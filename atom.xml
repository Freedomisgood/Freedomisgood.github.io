<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>果粒橙的博客</title>
  
  <subtitle>别装作很努力，因为结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2018-12-12T14:25:42.949Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>果粒橙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python中邮件的发送</title>
    <link href="https://nymrli.top/2018/12/12/Python%E4%B8%AD%E9%82%AE%E4%BB%B6%E7%9A%84%E5%8F%91%E9%80%81/"/>
    <id>https://nymrli.top/2018/12/12/Python中邮件的发送/</id>
    <published>2018-12-12T14:17:38.000Z</published>
    <updated>2018-12-12T14:25:42.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python普通的邮件发送"><a href="#Python普通的邮件发送" class="headerlink" title="Python普通的邮件发送"></a>Python普通的邮件发送</h2><p>需要一个安全的连接，例如SSL，因此接下来我们会使用SSL的方式去登录，但是在那之前，我们需要做一些准备，打开qq邮箱，点击设置-&gt;账户，找到<strong>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</strong>，开启IMAP/SMTP服务，然后根据要求使用手机发送到指定号码，获取授权码，这个<strong>授权码就是你接下来登录要使用的密码</strong>.</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> email.mime.<span class="built_in">text</span> import MIMEText</span><br><span class="line">import smtplib</span><br><span class="line"></span><br><span class="line"><span class="variable">_user</span> = <span class="string">'1063052964@qq.com'</span></span><br><span class="line"><span class="variable">_pwd</span> = <span class="string">'pykhotuhghdjbeci'</span></span><br><span class="line"><span class="variable">_to</span> = <span class="string">'2035420834@qq.com'</span></span><br><span class="line">msg = MIMEText(mail_body)<span class="comment">//MIMEText中_subtype默认为plain,html格式,只需改这个参数</span></span><br><span class="line">msg[<span class="string">"Subject"</span>] = <span class="string">'来自[不吐不快]网站的网友意见'</span></span><br><span class="line">msg[<span class="string">"From"</span>] = <span class="variable">_user</span></span><br><span class="line">msg[<span class="string">"To"</span>] = <span class="variable">_to</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s = smtplib.SMTP_SSL(<span class="string">"smtp.qq.com"</span>, <span class="number">465</span>)  <span class="comment">//或是使用s = smtplib.SMTP("smtp.qq.com",25)</span></span><br><span class="line">    s.login(<span class="variable">_user</span>, <span class="variable">_pwd</span>)</span><br><span class="line">    s.sendmail(<span class="variable">_user</span>, <span class="variable">_to</span>, msg.as_string())</span><br><span class="line">    s.quit()</span><br><span class="line">    message = <span class="string">'感谢你的来信'</span></span><br><span class="line">except:</span><br><span class="line">    message = <span class="string">'发送失败'</span></span><br></pre></td></tr></table></figure><p>▲smtplib.SMTP_SSL([host[, port[, local_hostname[, keyfile[, certfile[, timeout]]]]]])</p><p>这是一个派生自SMTP的子类，通过SSL加密的套接字连接（使用此类，您需要使用SSL支持编译的套接字模块）。如果未指定主机，则使用“（本地主机）”。如果省略端口，则使用标准的SMTP-over-SSL端口（465）</p><p>本机已安装了支持 SMTP 的服务，如：sendmail:</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line">from email.mime.<span class="keyword">text</span> <span class="keyword">import</span> MIMEText</span><br><span class="line">from email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line">message[<span class="string">'From'</span>] = Header(<span class="string">"菜鸟教程"</span>, <span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><p>第三方SMTP发送邮件:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> formataddr</span><br><span class="line"></span><br><span class="line">msg[<span class="string">'From'</span>]=formataddr([<span class="string">"FromRunoob"</span>,my_sender])  # 括号里的对应发件人邮箱昵称、发件人邮箱账号</span><br><span class="line">msg[<span class="string">'To'</span>]=formataddr([<span class="string">"FK"</span>,my_user])              # 括号里的对应收件人邮箱昵称、收件人邮箱账号</span><br><span class="line">*没有formataddr的昵称默认为账号*</span><br></pre></td></tr></table></figure><h4 id="Python-发送带附件的邮件"><a href="#Python-发送带附件的邮件" class="headerlink" title="Python 发送带附件的邮件:"></a>Python 发送带附件的邮件:</h4><blockquote><p>发送带附件的邮件，首先要创建MIMEMultipart()实例，然后构造附件，如果有多个附件，可依次构造，最后利用smtplib.smtp发送。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"> </span><br><span class="line">sender = <span class="string">'from@runoob.com'</span></span><br><span class="line">receivers = [<span class="string">'429240967@qq.com'</span>]  <span class="comment"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建一个带附件的实例</span></span><br><span class="line">message = MIMEMultipart()</span><br><span class="line">message[<span class="string">'From'</span>] = Header(<span class="string">"菜鸟教程"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">message[<span class="string">'To'</span>] =  Header(<span class="string">"测试"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">subject = <span class="string">'Python SMTP 邮件测试'</span></span><br><span class="line">message[<span class="string">'Subject'</span>] = Header(subject, <span class="string">'utf-8'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#邮件正文内容</span></span><br><span class="line">message.attach(MIMEText(<span class="string">'这是菜鸟教程Python 邮件发送测试……'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 构造附件1，传送当前目录下的 test.txt 文件</span></span><br><span class="line">att1 = MIMEText(open(<span class="string">'test.txt'</span>, <span class="string">'rb'</span>).read(), <span class="string">'base64'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">att1[<span class="string">"Content-Type"</span>] = <span class="string">'application/octet-stream'</span></span><br><span class="line"><span class="comment"># 这里的filename可以任意写，写什么名字，邮件中显示什么名字</span></span><br><span class="line">att1[<span class="string">"Content-Disposition"</span>] = <span class="string">'attachment; filename="test.txt"'</span></span><br><span class="line">message.attach(att1)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 构造附件2，传送当前目录下的 runoob.txt 文件</span></span><br><span class="line">att2 = MIMEText(open(<span class="string">'runoob.txt'</span>, <span class="string">'rb'</span>).read(), <span class="string">'base64'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">att2[<span class="string">"Content-Type"</span>] = <span class="string">'application/octet-stream'</span></span><br><span class="line">att2[<span class="string">"Content-Disposition"</span>] = <span class="string">'attachment; filename="runoob.txt"'</span></span><br><span class="line">message.attach(att2)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    smtpObj = smtplib.SMTP(<span class="string">'localhost'</span>)</span><br><span class="line">    smtpObj.sendmail(sender, receivers, message.as_string())</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"邮件发送成功"</span></span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Error: 无法发送邮件"</span></span><br></pre></td></tr></table></figure><h4 id="在-HTML-文本中添加图片"><a href="#在-HTML-文本中添加图片" class="headerlink" title="在 HTML 文本中添加图片"></a>在 HTML 文本中添加图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"> </span><br><span class="line">sender = <span class="string">'from@runoob.com'</span></span><br><span class="line">receivers = [<span class="string">'429240967@qq.com'</span>]  <span class="comment"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></span><br><span class="line"> </span><br><span class="line">msgRoot = MIMEMultipart(<span class="string">'related'</span>)//创建MIMEMultipart()实例</span><br><span class="line">msgRoot[<span class="string">'From'</span>] = Header(<span class="string">"菜鸟教程"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">msgRoot[<span class="string">'To'</span>] =  Header(<span class="string">"测试"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">subject = <span class="string">'Python SMTP 邮件测试'</span></span><br><span class="line">msgRoot[<span class="string">'Subject'</span>] = Header(subject, <span class="string">'utf-8'</span>)</span><br><span class="line"> </span><br><span class="line">msgAlternative = MIMEMultipart(<span class="string">'alternative'</span>)</span><br><span class="line">msgRoot.attach(msgAlternative)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">mail_msg = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;p&gt;Python 邮件发送测试...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;a href="http://www.runoob.com"&gt;菜鸟教程链接&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;图片演示：&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;img src="cid:image1"&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">msgAlternative.attach(MIMEText(mail_msg, <span class="string">'html'</span>, <span class="string">'utf-8'</span>))//内容</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定图片为当前目录</span></span><br><span class="line">fp = open(<span class="string">'test.png'</span>, <span class="string">'rb'</span>)</span><br><span class="line">msgImage = MIMEImage(fp.read())</span><br><span class="line">fp.close()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义图片 ID，在 HTML 文本中引用</span></span><br><span class="line">msgImage.add_header(<span class="string">'Content-ID'</span>, <span class="string">'&lt;image1&gt;'</span>)</span><br><span class="line">msgRoot.attach(msgImage)//附件</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    smtpObj = smtplib.SMTP(<span class="string">'localhost'</span>)</span><br><span class="line">    smtpObj.sendmail(sender, receivers, msgRoot.as_string())</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"邮件发送成功"</span></span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Error: 无法发送邮件"</span></span><br></pre></td></tr></table></figure><p><a href="http://www.runoob.com/python/python-email.html" target="_blank" rel="noopener">Python SMTP发送邮件</a></p><hr><h2 id="flask-email"><a href="#flask-email" class="headerlink" title="flask-email"></a>flask-email</h2><p><a href="https://pythonhosted.org/Flask-Mail/" target="_blank" rel="noopener">官方文档</a></p><h4 id="阻塞发送"><a href="#阻塞发送" class="headerlink" title="阻塞发送"></a>阻塞发送</h4><h5 id="最简单的调用"><a href="#最简单的调用" class="headerlink" title="最简单的调用"></a>最简单的调用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail,Message</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'MAIL_SERVER'</span>] = <span class="string">'smtp.qq.com'</span></span><br><span class="line">app.config[<span class="string">'MAIL_PORT'</span>] = <span class="number">587</span></span><br><span class="line">app.config[<span class="string">'MAIL_USE_TLS'</span>] = <span class="keyword">True</span></span><br><span class="line">app.config[<span class="string">'MAIL_USERNAME'</span>] = <span class="string">'1063052964@qq.com'</span></span><br><span class="line">app.config[<span class="string">'MAIL_PASSWORD'</span>] = <span class="string">'#'</span></span><br><span class="line"></span><br><span class="line">mail = Mail(app)</span><br><span class="line"></span><br><span class="line">msg = Message(<span class="string">'邮件主题'</span>, sender=<span class="string">'1063052964@qq.com'</span>, recipients=[<span class="string">'2035420834@qq.com'</span>])</span><br><span class="line">msg.body = <span class="string">'邮件内容'</span></span><br><span class="line">msg.html = <span class="string">"&lt;h1&gt;邮件的html模板&lt;h1&gt; body"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    mail.send(msg)</span><br></pre></td></tr></table></figure><h5 id="读取配置-视图函数中调用"><a href="#读取配置-视图函数中调用" class="headerlink" title="读取配置+视图函数中调用"></a>读取配置+视图函数中调用</h5><p>[config.py]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置邮箱信息</span></span><br><span class="line">MAIL_SERVER = <span class="string">'smtp.qq.com'</span></span><br><span class="line">MAIL_PORT = <span class="number">465</span></span><br><span class="line">MAIL_USE_TLS = <span class="keyword">False</span></span><br><span class="line">MAIL_USE_SSL = <span class="keyword">True</span></span><br><span class="line"><span class="comment"># 注意此处，很多人配置发不出去和这个是有关系的</span></span><br><span class="line">MAIL_PASSWORD = <span class="string">'**********'</span></span><br><span class="line">MAIL_USERNAME = <span class="string">'********@qq.com'</span></span><br><span class="line"><span class="comment"># qq郵箱默認走ssl，所以創建的smtp對象必須要支持加密傳輸，且需要指定port=465</span></span><br></pre></td></tr></table></figure><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Message,Mail</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line">mail = Mail(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendMail</span><span class="params">()</span>:</span></span><br><span class="line">    msg = Message(<span class="string">'test'</span>, sender = <span class="string">'1063052964@qq.com'</span>, recipients=[<span class="string">"2035420834@qq.com"</span>])</span><br><span class="line">    <span class="comment"># recipients是个列表，包含所有收件人</span></span><br><span class="line">    <span class="comment"># 此处的test是邮箱的主题，sender和config中的MAIL_USERNAME要一致哦</span></span><br><span class="line">    msg.body = <span class="string">'123'</span></span><br><span class="line">    msg.html = <span class="string">'&lt;b&gt;test&lt;/b&gt;body'</span></span><br><span class="line">    mail.send(msg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    sendMail()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><blockquote><p>tips:tip：具体工程中，配置可以写在单独一个文件如”.env”，然后利用python-envcfg来读取配置，如：<br>app.config.from_object(‘envcfg.raw’)</p></blockquote><h4 id="异步发送"><a href="#异步发送" class="headerlink" title="异步发送"></a>异步发送</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Message,Mail</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line">mail = Mail(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_async_email</span><span class="params">(app,msg)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        mail.send(message=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendMail</span><span class="params">()</span>:</span></span><br><span class="line">    msg = Message(<span class="string">'test'</span>,sender=<span class="string">'106305964@qq.com'</span>,\</span><br><span class="line">                        recipients=[<span class="string">"870545361@qq.com"</span>])</span><br><span class="line">    <span class="comment"># recipients是个列表，包含所有收件人</span></span><br><span class="line">    <span class="comment"># 此处的test是邮箱的主题，sender和config中的MAIL_USERNAME要一致哦</span></span><br><span class="line">    msg.body = <span class="string">'testbody'</span></span><br><span class="line">    msg.html = <span class="string">'&lt;b&gt;test&lt;/b&gt;body'</span></span><br><span class="line">    <span class="comment"># 邮件发送给目标，可以有文本，两种方式呈现，你能看见怎样的取决于你的客户端</span></span><br><span class="line">    thr = Thread(target=send_async_email,args=[app,msg])</span><br><span class="line">    <span class="comment"># 使用多线程，在实际开发中，若是不使用异步、多线程等方式，网页会卡住</span></span><br><span class="line">    thr.start()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>▲. 许多Flask的扩展都是假定自己运行在一个活动的应用和请求上下文中，Flask-Mail的send函数使用到current_app 这个上下文了，所以当 mail.send()函数在一个线程中执行的时候需要人为的创建一个上下文。在示例 send_async_email 中使用了 app.app_context() 来创建一个上下文。</p><p>既然异步的邮件发送功能已经实现了，如果将来我们需要实现其它异步的函数，还有什么需要改进的吗？我们需要为每一个实现异步功能的函数拷贝多线程的代码吗？这并不好。</p><p>我们可以通过实现一个 <a href="http://www.python.org/dev/peps/pep-0318/" target="_blank" rel="noopener">装饰器</a> 来解决这个问题。有了装饰器，上面的代码可以修改为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .decorators <span class="keyword">import</span> <span class="keyword">async</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@async</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_async_email</span><span class="params">(app, msg)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        mail.send(msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_email</span><span class="params">(subject, sender, recipients, text_body, html_body)</span>:</span></span><br><span class="line">    msg = Message(subject, sender=sender, recipients=recipients)</span><br><span class="line">    msg.body = text_body</span><br><span class="line">    msg.html = html_body</span><br><span class="line">    send_async_email(app, msg)</span><br></pre></td></tr></table></figure><p>好的多了吧，对不对？</p><p>这个神奇的代码其实很简单。我们把它放入一个新文件(文件 <em>app/decorators.py</em>):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        thr = Thread(target = f, args = args, kwargs = kwargs)</span><br><span class="line">        thr.start()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>作为一个练习，大家可以考虑考虑如何用 <code>*multiprocessing*</code> 模块来实现上面的功能。</p><p>摘自<a href="http://www.pythondoc.com/flask-mega-tutorial/email.html" target="_blank" rel="noopener">flask文档</a></p><hr><h2 id="django-core-mail邮件"><a href="#django-core-mail邮件" class="headerlink" title="django.core.mail邮件"></a>django.core.mail邮件</h2><p>EmailMessage: 标题. 内容.发件人.收件人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line">send_mail(<span class="string">u'邮件标题'</span>, <span class="string">u'邮件内容'</span>, <span class="string">'from@example.com'</span>,</span><br><span class="line">    [<span class="string">'to@example.com'</span>], fail_silently=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h3 id="send-mail"><a href="#send-mail" class="headerlink" title="send_mail()"></a>send_mail()</h3><blockquote><p><code>subject</code>, <code>message</code>, <code>from_email</code> and <code>recipient_list</code> 这四个参数是必须的。</p><ul><li><code>subject</code>: 字符串，表示邮件标题。</li><li><code>message</code>: 字符串，表示邮件内容。</li><li><code>from_email</code>: 字符串，表示发件邮箱。</li><li><code>recipient_list</code>: 字符串列表，列表中每个成员都是一个邮箱地址，而且每个收件人都会在 “收件人/To:” 栏看到出现在 <code>recipient_list</code> 中的其他收件人。</li><li><code>fail_silently</code>: （可选）布尔值。为 <code>False</code> 时， <code>send_mail</code> 会抛出 <a href="https://docs.python.org/2.7/library/smtplib.html#smtplib.SMTPException" target="_blank" rel="noopener"><code>smtplib.SMTPException</code></a> 异常。 <a href="https://docs.python.org/2.7/library/smtplib.html#module-smtplib" target="_blank" rel="noopener"><code>smtplib</code></a> 文档列出了所有可能的异常。 这些异常都是 <a href="https://docs.python.org/2.7/library/smtplib.html#smtplib.SMTPException" target="_blank" rel="noopener"><code>SMTPException</code></a> 的子类。</li><li><code>auth_user</code>: （可选）SMTP服务器的认证用户名。没提供该参数的情况下，Django会使用 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/ref/settings.html#std:setting-EMAIL_HOST_USER" target="_blank" rel="noopener"><code>EMAIL_HOST_USER</code></a> 配置项的设置。</li><li><code>auth_password</code>: （可选）SMTP服务器的认证密码，没提供该参数的情况下，Django会使用 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/ref/settings.html#std:setting-EMAIL_HOST_PASSWORD" target="_blank" rel="noopener"><code>EMAIL_HOST_PASSWORD</code></a>配置项的设置。</li><li><code>connection</code>: （可选）发送邮件的后端。没提供该参数的情况下，Django会使用默认后端的实例。可查看 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#topic-email-backends" target="_blank" rel="noopener">Email backends</a> 了解更多细节。</li></ul></blockquote><p><a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.send_mass_mail" target="_blank" rel="noopener"><code>send_mass_mail()</code></a> 和 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.send_mail" target="_blank" rel="noopener"><code>send_mail()</code></a> 的区别在于： <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.send_mail" target="_blank" rel="noopener"><code>send_mail()</code></a> 每发送一封邮件就会打开一次邮件服务器链接，而<a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.send_mass_mail" target="_blank" rel="noopener"><code>send_mass_mail()</code></a> 则是打开一次链接，发送所有的邮件。 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.send_mass_mail" target="_blank" rel="noopener"><code>send_mass_mail()</code></a> 明显更高效。</p><h3 id="main-admins"><a href="#main-admins" class="headerlink" title="main_admins()"></a>main_admins()</h3><p><code>mail_admins</code>(<em>subject</em>, <em>message</em>, <em>fail_silently=False</em>, <em>connection=None</em>, <em>html_message=None</em>)</p><p><code>django.core.mail.mail_admins()</code> 是一个给网站后台管理员(admin)发邮件的快捷方法，管理员设置放在 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/ref/settings.html#std:setting-ADMINS" target="_blank" rel="noopener"><code>ADMINS</code></a> 配置项。</p><p><code>mail_admins()</code> 使用 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/ref/settings.html#std:setting-EMAIL_SUBJECT_PREFIX" target="_blank" rel="noopener"><code>EMAIL_SUBJECT_PREFIX</code></a> 配置项的值做为邮件标题的前缀，默认情况下是 <code>&quot;[Django] &quot;</code> 。</p><h3 id="mail-managers"><a href="#mail-managers" class="headerlink" title="mail_managers()"></a>mail_managers()</h3><p>mail_managers`(<em>subject</em>, <em>message</em>, <em>fail_silently=False</em>, <em>connection=None</em>, <em>html_message=None</em>)</p><p>mail_managers<code>(*subject*, *message*, *fail_silently=False*, *connection=None*, *html_message=None*)</code>django.core.mail.mail_managers()<code>is just like</code>mail_admins()<code>，不同之处在于该方法的邮件接收人是网站负责人(manager)， 可以在 [</code>MANAGERS`]配置项设置网站负责人</p><h4 id="EmailMessage-对象"><a href="#EmailMessage-对象" class="headerlink" title="EmailMessage 对象"></a>EmailMessage 对象</h4><ul><li><em>class </em><code>EmailMessage</code></li></ul><p><a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.EmailMessage" target="_blank" rel="noopener"><code>EmailMessage</code></a> 类使用下列参数初始化（除非使用位置参数，否则默认顺序如下）。所有参数均可选，均可在调用 <code>send()</code>方法之前的任何时间对其赋值。</p><p>加入了 <code>cc</code> 参数（cc是抄送）</p><ul><li><p><code>subject</code>: 邮件的标题行</p></li><li><p><code>body</code>: 邮件的主体内容文本，须是纯文本信息。</p></li><li><p><code>from_email</code>: 发送者的地址。 <a href="mailto:`fred@example.com" target="_blank" rel="noopener">`fred@example.com</a><code>或</code>Fred <a href="mailto:&#102;&#114;&#x65;&#100;&#64;&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#x6d;" target="_blank" rel="noopener">&#102;&#114;&#x65;&#100;&#64;&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#x6d;</a><code>格式都是合法的。如果忽略该参数，Django就会使用 [</code>DEFAULT_FROM_EMAIL`](<a href="https://django-chinese-docs-14.readthedocs.io/en/latest/ref/settings.html#std:setting-DEFAULT_FROM_EMAIL" target="_blank" rel="noopener">https://django-chinese-docs-14.readthedocs.io/en/latest/ref/settings.html#std:setting-DEFAULT_FROM_EMAIL</a>) 配置项。</p></li><li><p><code>to</code>: 收件人地址列表或元组。</p></li><li><p><code>bcc</code>: 发送邮件时用于”Bcc”头信息的一组列表或元组，也就是暗送的收件人。</p></li><li><p><code>connection</code>: 一个邮件后端实例。用同一个链接发送多封邮件就要用到该参数。忽略该参数时，会在调用 <code>send()</code> 时自动创建一个新链接。</p></li><li><p><code>attachments</code>: 置于邮件报文内的附件列表。列表元素可以是　<code>email.MIMEBase.MIMEBase</code> 实例，也可以是 <code>(filename, content, mimetype)</code> 三部分构成的元组。</p></li><li><p><code>headers</code>: 置于邮件报文内的其他头信息(header)的字典。字典的key是头信息的名称，字典的value是头信息的值。 这样做能确保头信息的名称和对应值会以正确的格式保存于邮件报文中。</p></li><li><p><code>cc</code>: 发送邮件时放于”Cc”头信息的一系列列表或元组。</p><p>例如:</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">email = <span class="type">EmailMessage</span>(<span class="symbol">'Hello'</span>, <span class="symbol">'Body</span> goes here', <span class="symbol">'from</span>@example.com',</span><br><span class="line">            [<span class="symbol">'to1</span>@example.com', <span class="symbol">'to2</span>@example.com'], [<span class="symbol">'bcc</span>@example.com'],</span><br><span class="line">            headers = &#123;<span class="symbol">'Reply</span>-<span class="type">To'</span>: <span class="symbol">'another</span>@example.com'&#125;)</span><br></pre></td></tr></table></figure><p>该类方法如下:</p><ul><li><p><code>send(fail_silently=False)</code> 发送邮件报文。如果在构造邮件时如果指定了某个链接(connection)，就会使用该链接发邮件。 否则，就会使用默认后端的实例发邮件。如果关键字参数 <code>fail_silently</code> 为 <code>True</code> ，就会忽略邮件发送时抛出的异常。</p></li><li><p><code>message()</code> 构造了一个 <code>django.core.mail.SafeMIMEText</code> 对象 (Python的 <code>email.MIMEText.MIMEText</code> 类的子类) 或是 <code>django.core.mail.SafeMIMEMultipart</code> 对象（该对象保存即将发送出去邮件报文）。如需扩展 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.EmailMessage" target="_blank" rel="noopener"><code>EmailMessage</code></a>类，一般情况下要覆写该方法，将你所需的内容添加到MIME对象中。</p></li><li><p><code>recipients()</code> 返回邮件中所有收件人的列表，不管收件人是在 <code>to</code> 还是 <code>bcc</code> 属性中。这是另一个经常被继承覆写的方法， 因为SMTP服务器在发送邮件报文时，要接收完整的收件人列表。即使你自己的类使用其他方式来指定收件人，也仍然需要使用该方法返回收件人列表。</p></li><li><p><code>attach()</code> 创建一个新的文件附件，并把它添加到邮件报文中。 有两种方法调用 <code>attach()</code>:</p><ul><li><p>传递一个单独的 <code>email.MIMEBase.MIMEBase</code> 实例做为参数。该实例会直接添加到最终的邮件报文中。</p></li><li><p>或者，给 <code>attach()</code> 传递三个参数: <code>filename</code>, <code>content</code> 和 <code>mimetype</code>. <code>filename</code> 是出现在邮件中的附件文件的名称， <code>content</code> 是附件的内容，而 <code>mimetype</code> 是附件所使用的MIME类型。 如果忽略 <code>mimetype</code>, Django会自动根据附件文件名来推测MIME内容类型。</p><p>例如:</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message.attach(<span class="symbol">'design</span>.png', img_data, <span class="symbol">'image</span>/png')</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>attach_file()</code> 使用当前文件系统下的某个文件做为附件。调用时，传入某个文件的完整路径，以及该附件的MIME类型(可选的)。 忽略MIME类型的话，Django会自动根据附件文件名来推测MIME类型。最简单的用法如下:</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message</span>.attach_file(<span class="string">'/images/weather_map.png'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="发送多用途邮件"><a href="#发送多用途邮件" class="headerlink" title="发送多用途邮件"></a>发送多用途邮件</h4><p>在同一封邮件中包含多种版本的内容是非常有用的；典型的例子就是发送既有纯文本版本内容又有HTML版本内容的邮件。 在Django的邮件库中，可以使用 <code>EmailMultiAlternatives</code> 类来达到该目的。 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.EmailMessage" target="_blank" rel="noopener"><code>EmailMessage</code></a> 的子类有一个<code>attach_alternative()</code> 方法用来包含其他版本的邮件主体内容。所有其他方法(包括类的初始化方法)都直接继承自 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.EmailMessage" target="_blank" rel="noopener"><code>EmailMessage</code></a> 。</p><p>发送一封文本/HTML混合邮件，代码如下:</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail import EmailMultiAlternatives</span><br><span class="line"></span><br><span class="line">subject, from_email, <span class="keyword">to</span> = <span class="comment">'hello', 'from@example.com', 'to@example.com'</span></span><br><span class="line">text_content = <span class="comment">'This is an important message.'</span></span><br><span class="line">html_content = <span class="comment">'<span class="doctag">&lt;p&gt;</span>This is an <span class="doctag">&lt;strong&gt;</span>important<span class="doctag">&lt;/strong&gt;</span> message.<span class="doctag">&lt;/p&gt;</span>'</span></span><br><span class="line">msg = EmailMultiAlternatives(subject, text_content, from_email, [<span class="keyword">to</span>])</span><br><span class="line">msg.attach_alternative(html_content, <span class="string">"text/html"</span>)</span><br><span class="line">msg.send()</span><br></pre></td></tr></table></figure><p>默认情况下，<a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.EmailMessage" target="_blank" rel="noopener"><code>EmailMessage</code></a> 类中的 <code>body</code> 参数的MIME类型是 <code>&quot;text/plain&quot;</code> 。 大多数情况下，没必要更改该MIME，因为这样能保证每个收件人能够阅读该邮件，而不论他们使用的是什么邮件客户端。 不过，在能确保收件人能处理多用途邮件的情况下，可以使用:class:~django.core.mail.EmailMessage 类的 <code>content_subtype</code> 属性 来更改邮件内容类型。主类型总是 <code>&quot;text&quot;</code> ，子类型可以设置为别的版本(比如html)，例如:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msg = EmailMessage(subject, html_content, from_email, [<span class="keyword">to</span>])</span><br><span class="line">msg.content_subtype = <span class="string">"html"</span>  <span class="meta"># 主内体现在变成 text/html</span></span><br><span class="line">msg.<span class="built_in">send</span>()</span><br></pre></td></tr></table></figure><h4 id="获取邮件发送后端的实例"><a href="#获取邮件发送后端的实例" class="headerlink" title="获取邮件发送后端的实例"></a>获取邮件发送后端的实例</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django.core.mail 的 get_connection() 函式返回你当前使用的邮件后端的实例。</span><br><span class="line"></span><br><span class="line">get_connection(<span class="attribute">backend</span>=None, <span class="attribute">fail_silently</span>=<span class="literal">False</span>, <span class="number">*a</span>rgs, **kwargs)</span><br></pre></td></tr></table></figure><ul><li><h4 id="SMTP-backend-–默认的后端"><a href="#SMTP-backend-–默认的后端" class="headerlink" title="SMTP backend    –默认的后端"></a>SMTP backend    –默认的后端</h4></li><li><h4 id="Console-backend"><a href="#Console-backend" class="headerlink" title="Console backend"></a>Console backend</h4></li><li><h4 id="File-backend-–该后端并不建议在生产环境下使用–它仅仅是为开发提供方便"><a href="#File-backend-–该后端并不建议在生产环境下使用–它仅仅是为开发提供方便" class="headerlink" title="File backend –该后端并不建议在生产环境下使用–它仅仅是为开发提供方便"></a>File backend –该后端并不建议在生产环境下使用–它仅仅是为开发提供方便</h4></li><li><h4 id="In-memory-backend-内存后端"><a href="#In-memory-backend-内存后端" class="headerlink" title="In-memory backend(内存后端)"></a>In-memory backend(内存后端)</h4></li><li><h4 id="Dummy-backend-空后端"><a href="#Dummy-backend-空后端" class="headerlink" title="Dummy backend(空后端)"></a>Dummy backend(空后端)</h4></li></ul><h4 id="需要在-settings-py中设置的东西"><a href="#需要在-settings-py中设置的东西" class="headerlink" title="需要在 settings.py中设置的东西:"></a>需要在 settings.py中设置的东西:</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">EMAIL_BACKEND</span> = <span class="string">'django.core.mail.backends.smtp.EmailBackend'</span></span><br><span class="line"><span class="attr">EMAIL_USE_SSL</span> = <span class="literal">True</span></span><br><span class="line"><span class="attr">EMAIL_HOST</span> = <span class="string">'smtp.gmail.com'</span></span><br><span class="line"><span class="attr">EMAIL_PORT</span> = <span class="number">587</span></span><br><span class="line"><span class="attr">EMAIL_HOST_USER</span> = <span class="string">'urusername@gmail.com'</span></span><br><span class="line"><span class="attr">EMAIL_HOST_PASSWORD</span> = <span class="string">'password'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python普通的邮件发送&quot;&gt;&lt;a href=&quot;#Python普通的邮件发送&quot; class=&quot;headerlink&quot; title=&quot;Python普通的邮件发送&quot;&gt;&lt;/a&gt;Python普通的邮件发送&lt;/h2&gt;&lt;p&gt;需要一个安全的连接，例如SSL，因此接下来我们会使用
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="flask" scheme="https://nymrli.top/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>使用Cerbot申请免费证书升级 http到https</title>
    <link href="https://nymrli.top/2018/12/08/%E4%BD%BF%E7%94%A8Cerbot%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6%E5%8D%87%E7%BA%A7-http%E5%88%B0https/"/>
    <id>https://nymrli.top/2018/12/08/使用Cerbot申请免费证书升级-http到https/</id>
    <published>2018-12-08T08:10:03.000Z</published>
    <updated>2018-12-08T08:10:18.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Cerbot-免费证书-简单-升级-http-到-https"><a href="#使用-Cerbot-免费证书-简单-升级-http-到-https" class="headerlink" title="使用 Cerbot 免费证书 简单 升级 http 到 https"></a><a href="https://www.cnblogs.com/kiscall/p/5564448.html" target="_blank" rel="noopener">使用 Cerbot 免费证书 简单 升级 http 到 https</a></h1><p>1、安装 <em>cerbot</em>:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/letsencrypt/letsencrypt</span><br><span class="line">cd letsencrypt</span><br></pre></td></tr></table></figure><p><em>要求</em>：</p><ul><li><em>Python</em> 2.7</li><li>Git环境</li><li>连接外网</li></ul><p>2、运行:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> 根据自己的需求调整代码</span><br><span class="line"><span class="string">./certbot-auto</span> certonly <span class="params">--standalone</span> <span class="params">--email</span> admin@example.com -d example.com -d www.example.com -d other.example.net</span><br></pre></td></tr></table></figure><p>成功提示:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IMPORTANT NOTES:</span><br><span class="line">Congratulations! Your certificate <span class="keyword">and</span> chain have been saved <span class="keyword">at</span>:</span><br><span class="line">   /etc/letsencrypt/live/sast.nymrli.top/fullchain.pem</span><br><span class="line">   Your key <span class="built_in">file</span> has been saved <span class="keyword">at</span>:</span><br><span class="line">   /etc/letsencrypt/live/sast.nymrli.top/privkey.pem</span><br><span class="line">   Your cert will expire <span class="keyword">on</span> <span class="number">2019</span><span class="number">-02</span><span class="number">-08.</span> To obtain a new <span class="keyword">or</span> tweaked</span><br><span class="line">   <span class="built_in">version</span> <span class="keyword">of</span> this certificate <span class="keyword">in</span> <span class="keyword">the</span> future, simply <span class="built_in">run</span> certbot-auto</span><br><span class="line">   again. To non-interactively renew *all* <span class="keyword">of</span> your certificates, <span class="built_in">run</span></span><br><span class="line">   <span class="string">"certbot-auto renew"</span></span><br><span class="line"> - If you like Certbot, please consider supporting our work <span class="keyword">by</span>:</span><br></pre></td></tr></table></figure><p>3、配置<em>Nginx</em>:</p><p>server 不再监听80端口，因为TLS要使用的是443端口，然后引入证书和key</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen <span class="number">443</span> ssl;</span><br><span class="line">    server_name sast.nymrli.top;     <span class="comment">//这里是你的域名</span></span><br><span class="line">    index index_page.html;</span><br><span class="line">    root <span class="meta-keyword">/var/</span>www/homework_submission-master/;        <span class="comment">//网站目录</span></span><br><span class="line">    ssl_certificate   <span class="meta-keyword">/etc/</span>letsencrypt<span class="meta-keyword">/live/</span>sast.nymrli.top/fullchain.pem;    <span class="comment">//前面生成的证书，改一下里面的域名就行，不建议更换路径</span></span><br><span class="line">    ssl_certificate_key <span class="meta-keyword">/etc/</span>letsencrypt<span class="meta-keyword">/live/</span>sast.nymrli.top/privkey.pem;   <span class="comment">//前面生成的密钥，改一下里面的域名就行，不建议更换路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启<em>Nginx</em>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>nginx restart</span><br></pre></td></tr></table></figure><p>OK!</p><hr><h5 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决:"></a>问题解决:</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Problem binding <span class="keyword">to</span><span class="built_in"> port </span>80: Could <span class="keyword">not</span> bind <span class="keyword">to</span> IPv4 <span class="keyword">or</span> IPv6.</span><br></pre></td></tr></table></figure><p>原因是 nginx 占用了80端口，输入<code>service nginx stop</code>。然后再次执行证书安装命令，即可顺利安装。安装完毕后，输入<code>service nginx start</code>，重启 nginx 服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用-Cerbot-免费证书-简单-升级-http-到-https&quot;&gt;&lt;a href=&quot;#使用-Cerbot-免费证书-简单-升级-http-到-https&quot; class=&quot;headerlink&quot; title=&quot;使用 Cerbot 免费证书 简单 升级 http 
      
    
    </summary>
    
    
      <category term="后端" scheme="https://nymrli.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="环境部署" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>pipenv 新款Python虚拟环境工具详解[转]</title>
    <link href="https://nymrli.top/2018/12/08/pipenv-%E6%96%B0%E6%AC%BEPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%B7%A5%E5%85%B7%E8%AF%A6%E8%A7%A3-%E8%BD%AC/"/>
    <id>https://nymrli.top/2018/12/08/pipenv-新款Python虚拟环境工具详解-转/</id>
    <published>2018-12-08T08:08:23.000Z</published>
    <updated>2018-12-08T08:08:44.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pipenv-新款Python虚拟环境工具详解-转"><a href="#pipenv-新款Python虚拟环境工具详解-转" class="headerlink" title="pipenv 新款Python虚拟环境工具详解[转]"></a>pipenv 新款Python虚拟环境工具详解[转]</h1><p>pipenv是requests库作者Kenneth Reitz编写的一个用于创建和管理Python虚拟环境的工具。</p><p>Pipenv是Python官方机构推荐的Python包工具。</p><p>我们知道，为了管理Python虚拟环境，通常用得比较多的是virtualenv和pyenv。但是有人觉得它们还不够好用，不够偷懒。这个人是谁，就是上面的那位。于是他开发了一个pipenv，结合了pip及virtualenv的功能和优点，集成出了pipenv这个工具。其目的是替代virtualenv和pyenv，将pip及virtualenv的功能集于一身。</p><h2 id="一、安装pipenv"><a href="#一、安装pipenv" class="headerlink" title="一、安装pipenv"></a>一、安装pipenv</h2><p>windows下很简单：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pipenv</span><br></pre></td></tr></table></figure><p>Linux下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip <span class="keyword">install</span> pipenv</span><br></pre></td></tr></table></figure><p>在苹果操作系统下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>pipenv</span><br></pre></td></tr></table></figure><p>也就是说，无法用pip管理的包，pipenv同样无法使用。</p><p>pipenv依赖：psutil, virtualenv-clone, pew, certifi, urllib3, chardet, requests, mccabe, pyflakes, pycodestyle, flake8等第三方模块。</p><p>pipenv有很漂亮的彩色终端界面。</p><h2 id="二、简单使用"><a href="#二、简单使用" class="headerlink" title="二、简单使用"></a>二、简单使用</h2><p>进入你的Python项目文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your_project</span><br><span class="line">pipenv install</span><br></pre></td></tr></table></figure><p>windows操作系统中，虚拟环境创建过程如下：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">D:<span class="string">\test\test_pipenv&gt;pipenv</span> install</span><br><span class="line">Creating a virtualenv <span class="keyword">for</span> <span class="keyword">this</span> project…</span><br><span class="line">Using base prefix <span class="string">'c:\\python36'</span></span><br><span class="line">New python executable <span class="keyword">in</span> C:<span class="string">\Users\Administrator\.virtualenvs\test_pipenv-XHxuOsj</span></span><br><span class="line">n<span class="string">\Scripts\python.exe</span></span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br><span class="line"></span><br><span class="line">Virtualenv location: C:<span class="string">\Users\Administrator\.virtualenvs\test_pipenv-XHxuOsjn</span></span><br><span class="line">Creating a Pipfile <span class="keyword">for</span> <span class="keyword">this</span> project…</span><br><span class="line">Pipfile.lock <span class="keyword">not</span> found, creating…</span><br><span class="line">Locking [dev-packages] dependencies…</span><br><span class="line">Locking [packages] dependencies…</span><br><span class="line">Updated Pipfile.lock (c23e27)!</span><br><span class="line">Installing dependencies <span class="keyword">from</span> Pipfile.lock (c23e27)…</span><br><span class="line">  ================================ <span class="number">0</span>/<span class="number">0</span> - <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">To activate <span class="keyword">this</span> project<span class="string">'s virtualenv, run the following:</span></span><br><span class="line"><span class="string"> $ pipenv shell</span></span><br></pre></td></tr></table></figure><p>如果你给命令添加–two或–three参数，它将分别使用Python2或3来初始化你的虚拟环境，否则将使用默认的Python版本。</p><p>注意：pipenv默认把虚拟环境的真实文件全都放在了<code>C:\Users\Administrator\.virtualenvs\test_pipenv-XHxuOsjn\Scripts\python.exe</code>中，而在实际的项目文件夹内只创建了两个新文件Pipfile和Pipfile.lock。这可能造成C盘存有大量的文件，不是个好的做法。（但好像无法修改这一路径….）</p><p>看一下Pipfile中的内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[[source]]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">url</span> = <span class="string">"https://pypi.python.org/simple"</span></span><br><span class="line"><span class="attr">verify_ssl</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"pypi"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[packages]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[dev-packages]</span></span><br></pre></td></tr></table></figure><p>最关键的是定义了安装第三方库使用的源，默认为官方的pypi。</p><p>而Pipfile.lock文件内容呢？</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_meta"</span>: &#123;</span><br><span class="line">        <span class="attr">"hash"</span>: &#123;</span><br><span class="line">            <span class="attr">"sha256"</span>: <span class="string">"5f0257fe8c7a73db1c8de519faa92c658282a01087eb2bfafba7962704c23e27"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"host-environment-markers"</span>: &#123;</span><br><span class="line">            <span class="attr">"implementation_name"</span>: <span class="string">"cpython"</span>,</span><br><span class="line">            <span class="attr">"implementation_version"</span>: <span class="string">"3.6.4"</span>,</span><br><span class="line">            <span class="attr">"os_name"</span>: <span class="string">"nt"</span>,</span><br><span class="line">            <span class="attr">"platform_machine"</span>: <span class="string">"AMD64"</span>,</span><br><span class="line">            <span class="attr">"platform_python_implementation"</span>: <span class="string">"CPython"</span>,</span><br><span class="line">            <span class="attr">"platform_release"</span>: <span class="string">"7"</span>,</span><br><span class="line">            <span class="attr">"platform_system"</span>: <span class="string">"Windows"</span>,</span><br><span class="line">            <span class="attr">"platform_version"</span>: <span class="string">"6.1.7601"</span>,</span><br><span class="line">            <span class="attr">"python_full_version"</span>: <span class="string">"3.6.4"</span>,</span><br><span class="line">            <span class="attr">"python_version"</span>: <span class="string">"3.6"</span>,</span><br><span class="line">            <span class="attr">"sys_platform"</span>: <span class="string">"win32"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"pipfile-spec"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"requires"</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">"sources"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"pypi"</span>,</span><br><span class="line">                <span class="attr">"url"</span>: <span class="string">"https://pypi.python.org/simple"</span>,</span><br><span class="line">                <span class="attr">"verify_ssl"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"default"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"develop"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始情况下，文件里只包含一些操作系统的基本信息。</p><p>Pipfile和Pipfile.lock两个文件互相配合，完成虚拟环境的管理工作。</p><h2 id="三、安装第三方模块"><a href="#三、安装第三方模块" class="headerlink" title="三、安装第三方模块"></a>三、安装第三方模块</h2><p>Pipfile包含关于项目的依赖包的信息，并取代通常在Python项目中使用的requirements.txt文件。 如果你在具有requirements.txt文件的项目中启动了Pipenv，则在把它从项目中删除之前，应该使用Pipenv安装该requirements中列出的所有依赖包。</p><p>使用pipenv创建虚拟环境后，<strong>进入pipfile所在目录</strong>，使用install命令安装第三方库。 例如：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">install</span> django</span><br></pre></td></tr></table></figure><p>这个时候，你其实把pipenv当作pip来使用。无需像virtualenv那样需要额外的先启动虚拟环境。pipenv区分你是在给哪个虚拟环境工作，依赖的是Pipfile文件的位置。</p><p>要卸载某个第三方库：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pipenv</span> uninstall beautifulsoup4</span><br></pre></td></tr></table></figure><h2 id="四、冻结Pipfile"><a href="#四、冻结Pipfile" class="headerlink" title="四、冻结Pipfile"></a>四、冻结Pipfile</h2><p>冻结就相当于将项目所使用的第三方库列表进行打包输出，类似于virtualenv中生成requirements.txt文件。</p><p>通过更新Pipfile.lock来冻结库名称及其版本，以及其依赖关系的列表。需要使用lock参数：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">lock</span></span><br></pre></td></tr></table></figure><p>如果另一个用户拷贝了你的项目，他们只需要安装Pipenv，然后：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">install</span></span><br></pre></td></tr></table></figure><p>Pipenv会在项目文件夹下自动寻找Pipfile和Pipfile.lock文件，创建一个新的虚拟环境并安装必要的软件包。</p><p>也就是说pipenv install的时候有三种逻辑：</p><ul><li>如果目录下没有Pipfile和Pipfile.lock文件，表示创建一个新的虚拟环境；</li><li>如果有，表示使用已有的Pipfile和Pipfile.lock文件中的配置创建一个虚拟环境；</li><li>如果后面带诸如django这一类库名，表示为当前虚拟环境安装第三方库。</li></ul><h2 id="五、管理开发环境"><a href="#五、管理开发环境" class="headerlink" title="五、管理开发环境"></a>五、管理开发环境</h2><p>通常有一些Python包只在你的开发环境中需要，而不是在生产环境中，例如单元测试包。 Pipenv使用–dev标志区分两个环境。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">install</span> <span class="comment">--dev django</span></span><br></pre></td></tr></table></figure><p>django库现在将只在开发虚拟环境中使用。如果你要在你的生产环境中安装你的项目：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">install</span></span><br></pre></td></tr></table></figure><p>这不会安装django包。</p><p>但是，如果有一个开发人员将你的项目克隆到自己的开发环境中，他们可以使用–dev标志，将django也安装：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">install</span> <span class="comment">--dev</span></span><br></pre></td></tr></table></figure><p>也就是说一个–dev参数，帮你在同一个虚拟环境中又区分出了开发和非开发环境。</p><h2 id="六、在虚拟环境中运行命令"><a href="#六、在虚拟环境中运行命令" class="headerlink" title="六、在虚拟环境中运行命令"></a>六、在虚拟环境中运行命令</h2><p>使用run参数，提供要运行的命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">run</span><span class="bash"> python manage.py runserver</span></span><br></pre></td></tr></table></figure><p>这将使用当前虚拟环境关联的Python解释器，执行命令。</p><p>或者简单的执行脚本：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">run</span><span class="bash"> python your_script.py</span></span><br></pre></td></tr></table></figure><p>如果你不想每次运行Python时都输入这么多字符，可以在shell中设置一个别名，例如，</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alias</span> <span class="title">prp</span>=<span class="string">"pipenv run python"</span></span><br></pre></td></tr></table></figure><h2 id="七、pipenv选项解释"><a href="#七、pipenv选项解释" class="headerlink" title="七、pipenv选项解释"></a>七、pipenv选项解释</h2><p>pipenv 具有下列的选项：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv</span><br><span class="line">Usage: pipenv [OPTIONS] COMMAND [ARGS]...</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -<span class="ruby">-update         更新Pipenv &amp; pip</span></span><br><span class="line"><span class="ruby">  --where          显示项目文件所在路径</span></span><br><span class="line"><span class="ruby">  --venv           显示虚拟环境实际文件所在路径</span></span><br><span class="line"><span class="ruby">  --py             显示虚拟环境Python解释器所在路径</span></span><br><span class="line"><span class="ruby">  --envs           显示虚拟环境的选项变量</span></span><br><span class="line"><span class="ruby">  --rm             删除虚拟环境</span></span><br><span class="line"><span class="ruby">  --bare           最小化输出</span></span><br><span class="line"><span class="ruby">  --completion     完整输出</span></span><br><span class="line"><span class="ruby">  --man            显示帮助页面</span></span><br><span class="line"><span class="ruby">  --three / --two  使用Python <span class="number">3</span>/<span class="number">2</span>创建虚拟环境（注意本机已安装的Python版本）</span></span><br><span class="line"><span class="ruby">  --python TEXT    指定某个Python版本作为虚拟环境的安装源</span></span><br><span class="line"><span class="ruby">  --site-packages  附带安装原Python解释器中的第三方库</span></span><br><span class="line"><span class="ruby">  --jumbotron      不知道啥玩意....</span></span><br><span class="line"><span class="ruby">  --version        版本信息</span></span><br><span class="line"><span class="ruby">  -h, --help       帮助信息</span></span><br></pre></td></tr></table></figure><p>pipenv 可使用的命令参数：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Commands:</span><br><span class="line"> <span class="built_in"> check </span>     检查安全漏洞</span><br><span class="line">  graph      显示当前依赖关系图信息</span><br><span class="line">  install    安装虚拟环境或者第三方库</span><br><span class="line">  lock       锁定并生成Pipfile.lock文件</span><br><span class="line">  open       在编辑器中查看一个库</span><br><span class="line">  run        在虚拟环境中运行命令</span><br><span class="line">  shell      进入虚拟环境</span><br><span class="line">  uninstall  卸载一个库</span><br><span class="line">  update     卸载当前所有的包，并安装它们的最新版本</span><br></pre></td></tr></table></figure><p>一些使用例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Usage Examples:</span><br><span class="line">   使用Python 3.6创建虚拟环境:</span><br><span class="line">   $ pipenv <span class="comment">--python 3.6</span></span><br><span class="line"></span><br><span class="line">   安装包括开发环境中的第三方库:</span><br><span class="line">   $ pipenv <span class="keyword">install</span> <span class="comment">--dev</span></span><br><span class="line"></span><br><span class="line">   锁定pipfile:</span><br><span class="line">   $ pipenv <span class="keyword">lock</span> <span class="comment">--pre</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">Install</span> a <span class="keyword">local</span> setup.py <span class="keyword">into</span> your <span class="keyword">virtual</span> environment/Pipfile:</span><br><span class="line">   $ pipenv <span class="keyword">install</span> -e .</span><br></pre></td></tr></table></figure><h2 id="八、一些使用过程展示"><a href="#八、一些使用过程展示" class="headerlink" title="八、一些使用过程展示"></a>八、一些使用过程展示</h2><p>定位项目路径:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv --where</span><br><span class="line"><span class="regexp">/Users/</span>kennethreitz<span class="regexp">/Library/</span>Mobile Documents<span class="regexp">/com~apple~CloudDocs/</span>repos<span class="regexp">/kr/</span>pipenv<span class="regexp">/test</span></span><br></pre></td></tr></table></figure><p>定位虚拟环境</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv --venv</span><br><span class="line"><span class="regexp">/Users/</span>kennethreitz<span class="regexp">/.local/</span>share<span class="regexp">/virtualenvs/</span>test-Skyy4vre</span><br></pre></td></tr></table></figure><p>定位Python解释器：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv --py</span><br><span class="line"><span class="regexp">/Users/</span>kennethreitz<span class="regexp">/.local/</span>share<span class="regexp">/virtualenvs/</span>test-Skyy4vre<span class="regexp">/bin/</span>python</span><br></pre></td></tr></table></figure><p>安装包：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv <span class="keyword">install</span></span><br><span class="line">Creating a virtualenv <span class="keyword">for</span> this project...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">No</span> <span class="keyword">package</span> provided, installing all dependencies.</span><br><span class="line">Virtualenv location: /<span class="keyword">Users</span>/kennethreitz/.local/<span class="keyword">share</span>/virtualenvs/<span class="keyword">test</span>-EJkjoYts</span><br><span class="line">Installing dependencies <span class="keyword">from</span> Pipfile.lock...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> <span class="keyword">activate</span> this <span class="keyword">project</span><span class="string">'s virtualenv, run the following:</span></span><br><span class="line"><span class="string">$ pipenv shell</span></span><br></pre></td></tr></table></figure><p>安装一个开发环境中才使用的包：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install pytest <span class="params">--dev</span></span><br><span class="line">Installing pytest.<span class="string">..</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">Adding pytest to Pipfile's [dev-packages]<span class="string">...</span></span><br></pre></td></tr></table></figure><p>显示依赖关系：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv graph</span><br><span class="line">requests==<span class="number">2.18</span><span class="number">.4</span></span><br><span class="line">  - certifi [<span class="string">required:</span> &gt;=<span class="number">2017.4</span><span class="number">.17</span>, <span class="string">installed:</span> <span class="number">2017.7</span><span class="number">.27</span><span class="number">.1</span>]</span><br><span class="line">  - chardet [<span class="string">required:</span> &gt;=<span class="number">3.0</span><span class="number">.2</span>,&lt;<span class="number">3.1</span><span class="number">.0</span>, <span class="string">installed:</span> <span class="number">3.0</span><span class="number">.4</span>]</span><br><span class="line">  - idna [<span class="string">required:</span> &gt;=<span class="number">2.5</span>,&lt;<span class="number">2.7</span>, <span class="string">installed:</span> <span class="number">2.6</span>]</span><br><span class="line">  - urllib3 [<span class="string">required:</span> &lt;<span class="number">1.23</span>,&gt;=<span class="number">1.21</span><span class="number">.1</span>, <span class="string">installed:</span> <span class="number">1.22</span>]</span><br></pre></td></tr></table></figure><p>生成lock文件:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv lock</span><br><span class="line">Assuring all dependencies <span class="keyword">from</span> Pipfile are installed<span class="built_in">..</span>.</span><br><span class="line">Locking [dev-packages] dependencies<span class="built_in">..</span>.</span><br><span class="line">Locking [packages] dependencies<span class="built_in">..</span>.</span><br><span class="line">Note: your project now has only<span class="built_in"> default </span>[packages] installed.</span><br><span class="line"><span class="keyword">To</span> install [dev-packages], run: $ pipenv install --dev</span><br></pre></td></tr></table></figure><p>安装开发环境依赖：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv <span class="keyword">install</span> <span class="comment">--dev</span></span><br><span class="line">Pipfile <span class="keyword">found</span> <span class="keyword">at</span> /<span class="keyword">Users</span>/kennethreitz/repos/kr/pip2/<span class="keyword">test</span>/Pipfile. Considering this <span class="keyword">to</span> be the <span class="keyword">project</span> home.</span><br><span class="line">Pipfile.lock <span class="keyword">out</span> <span class="keyword">of</span> <span class="built_in">date</span>, updating...</span><br><span class="line">Assuring all dependencies <span class="keyword">from</span> Pipfile <span class="keyword">are</span> installed...</span><br><span class="line">Locking [dev-packages] dependencies...</span><br><span class="line">Locking [packages] dependencies...</span><br></pre></td></tr></table></figure><p>卸载所有的包：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv <span class="keyword">uninstall</span> <span class="comment">--all</span></span><br><span class="line"><span class="keyword">No</span> <span class="keyword">package</span> provided, un-installing all dependencies.</span><br><span class="line"><span class="keyword">Found</span> <span class="number">25</span> installed <span class="keyword">package</span>(s), purging...</span><br><span class="line">...</span><br><span class="line">Environment <span class="keyword">now</span> purged <span class="keyword">and</span> <span class="keyword">fresh</span>!</span><br></pre></td></tr></table></figure><p>使用虚拟环境的shell。exit退出：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv shell</span><br><span class="line">Loading .env environment variables…</span><br><span class="line">Launching subshell <span class="keyword">in</span> <span class="keyword">virtual</span> environment. <span class="keyword">Type</span> <span class="string">'exit'</span> <span class="keyword">or</span> <span class="string">'Ctrl+D'</span> <span class="keyword">to</span> return.</span><br></pre></td></tr></table></figure><p>本文来自刘江的博客和教程网站<a href="http://www.liujiangblog.com/blog/" target="_blank" rel="noopener">http://www.liujiangblog.com/blog/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pipenv-新款Python虚拟环境工具详解-转&quot;&gt;&lt;a href=&quot;#pipenv-新款Python虚拟环境工具详解-转&quot; class=&quot;headerlink&quot; title=&quot;pipenv 新款Python虚拟环境工具详解[转]&quot;&gt;&lt;/a&gt;pipenv 新款P
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>#ifdef、#ifndef、#endif</title>
    <link href="https://nymrli.top/2018/12/08/ifdef%E3%80%81-ifndef%E3%80%81-endif/"/>
    <id>https://nymrli.top/2018/12/08/ifdef、-ifndef、-endif/</id>
    <published>2018-12-08T08:07:37.000Z</published>
    <updated>2018-12-08T08:08:08.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ifdef、-ifndef、-endif使用说明"><a href="#ifdef、-ifndef、-endif使用说明" class="headerlink" title="#ifdef、#ifndef、#endif使用说明"></a>#ifdef、#ifndef、#endif使用说明</h1><h3 id="目的-防止头文件重复include"><a href="#目的-防止头文件重复include" class="headerlink" title="目的:防止头文件重复include"></a>目的:防止头文件重复include</h3><h4 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明:"></a>示例说明:</h4><h5 id="a-h"><a href="#a-h" class="headerlink" title="a.h"></a>a.h</h5><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"b.h"</span></span></span><br></pre></td></tr></table></figure><h5 id="b-h"><a href="#b-h" class="headerlink" title="b.h"></a>b.h</h5><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"a.h"</span></span></span><br></pre></td></tr></table></figure><h5 id="c-c"><a href="#c-c" class="headerlink" title="c.c"></a>c.c</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"a.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"b.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你程序是这样写的话，编译器就会出现Error #include nested too deeply的错误。<br>因为这里 b.h 和 a.h 都互相include，c.c文件在include的时候重复include了a.h，我们希望c.c文件中执行#include “b.h”的时候 b.h 能进行判断，如果没有#include “a.h”则include，如果已经include了，则不再重复定义。</p><p>可以将<strong>b.h</strong>修改为：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _A_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _A_H </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"a.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>原因是: &gt; <code>c.c</code>中先include了<code>a.h</code>文件，其中<code>a.h</code>中又包括了<code>b.h</code>，所以会定义宏<code>_A_H</code>，当<code>c,c</code>中又include<code>b,h</code>时判断<code>_A_H</code>是否已经被定义了,如果被定义了,则不再include<code>a.h</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ifdef、-ifndef、-endif使用说明&quot;&gt;&lt;a href=&quot;#ifdef、-ifndef、-endif使用说明&quot; class=&quot;headerlink&quot; title=&quot;#ifdef、#ifndef、#endif使用说明&quot;&gt;&lt;/a&gt;#ifdef、#ifnde
      
    
    </summary>
    
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>小程序——高德地图API调用</title>
    <link href="https://nymrli.top/2018/12/06/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEAPI%E8%B0%83%E7%94%A8/"/>
    <id>https://nymrli.top/2018/12/06/小程序——高德地图API调用/</id>
    <published>2018-12-06T09:11:14.000Z</published>
    <updated>2018-12-06T12:47:07.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小程序——高德地图API调用"><a href="#小程序——高德地图API调用" class="headerlink" title="小程序——高德地图API调用"></a>小程序——高德地图API调用</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>将压缩包解压至使用的小程序目录下，创建libs文件夹，包含<code>amap-wx.js</code></p><p><img src="/2018/12/06/小程序——高德地图API调用/hexo\source\_posts\小程序——高德地图API调用\1.jpg" alt="1"></p><h3 id="导入使用"><a href="#导入使用" class="headerlink" title="导入使用"></a>导入使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> amapFile = <span class="built_in">require</span>(<span class="string">'..­/../../../libs/amap-wx.js'</span>);</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    src: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> myAmapFun = <span class="keyword">new</span> amapFile.AMapWX(&#123; <span class="attr">key</span>: <span class="string">"dbb8be907441c2650218bdfd78848cf6"</span> &#125;);</span><br><span class="line">    wx.getSystemInfo(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;<span class="comment">//获得手机屏幕的高度宽度</span></span><br><span class="line">        <span class="keyword">var</span> height = data.windowHeight;</span><br><span class="line">        <span class="keyword">var</span> width = data.windowWidth;</span><br><span class="line">        <span class="keyword">var</span> size = width + <span class="string">"*"</span> + height;</span><br><span class="line">        myAmapFun.getStaticmap(&#123;</span><br><span class="line">          location: <span class="string">"118.9301,32.109"</span>,<span class="comment">//地图中心</span></span><br><span class="line">          zoom: <span class="number">15</span>,<span class="comment">//缩放比例</span></span><br><span class="line">          size: size,<span class="comment">//尺寸大小</span></span><br><span class="line">          scale: <span class="number">2</span>,<span class="comment">//像素,普通图、高清图</span></span><br><span class="line">          markers: <span class="comment">//标记</span></span><br><span class="line"> <span class="string">"large,0xFF0000,A:118.9301,32.109|mid,0xFF0000,B:118.9301,32.110"</span>,</span><br><span class="line">          success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            that.setData(&#123;</span><br><span class="line">              src: data.url</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">          fail: <span class="function"><span class="keyword">function</span> (<span class="params">info</span>) </span>&#123;</span><br><span class="line">            wx.showModal(&#123; <span class="attr">title</span>: info.errMsg &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  onPullDownRefresh: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  onReachBottom: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="API使用说明"><a href="#API使用说明" class="headerlink" title="API使用说明"></a>API使用说明</h3><table><thead><tr><th>参数名称</th><th>含义</th><th>规则说明</th><th>是否必填</th><th>默认值</th></tr></thead><tbody><tr><td>key</td><td>用户唯一标识</td><td>用户在高德地图官网申请</td><td>必填</td><td>无</td></tr><tr><td>location</td><td>地图中心点</td><td>中心点坐标。规则：经度和纬度用”,”分隔 经纬度小数点后不得超过6位。</td><td>部分条件必填</td><td>无</td></tr><tr><td>zoom</td><td>地图级别</td><td>地图缩放级别:[1,17]</td><td>可选</td><td>无</td></tr><tr><td>size</td><td>地图大小</td><td>图片宽度<em>图片高度。最大值为1024</em>1024</td><td>可选</td><td>400*400</td></tr><tr><td>scale</td><td>普通/高清</td><td>1:返回普通图；2:调用高清图，图片高度和宽度都增加一倍，zoom也增加一倍（当zoom为最大值时，zoom不再改变）。</td><td>可选</td><td>1</td></tr><tr><td>markers</td><td>标注</td><td>使用规则见markers详细说明，标注最大数10个</td><td>可选</td><td>无</td></tr><tr><td>labels</td><td>标签</td><td>使用规则见labels详细说明，标签最大数10个</td><td>可选</td><td>无</td></tr><tr><td>paths</td><td>折线</td><td>使用规则见paths详细说明，折线和多边形最大数4个</td><td>可选</td><td>无</td></tr><tr><td>traffic</td><td>交通路况标识</td><td>底图是否展现实时路况。 可选值： 0，不展现；1，展现。</td><td>可选</td><td>0</td></tr><tr><td>sig</td><td>数字签名</td><td>数字签名认证用户必填</td><td>可选</td><td>无</td></tr></tbody></table><h4 id="markers"><a href="#markers" class="headerlink" title="markers:"></a>markers:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">markers:<span class="string">"large,0xFF0000,A:118.9301,32.109|mid,0xFF0000,B:118.9301,32.110"</span>,</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">markers:<span class="string">"large,0xFF0000,A:118.9301,32.109;B:118.9301,32.110"</span>,</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名称</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>size</td><td>可选值： small,mid,large</td><td>small</td></tr><tr><td>color</td><td>选值范围：[0x000000, 0xffffff]例如：0x000000 black,0x008000 green,0x800080 purple,0xFFFF00 yellow,0x0000FF blue,0x808080 gray,0xffa500 orange,0xFF0000 red,0xFFFFFF white</td><td>0xFC6054</td></tr><tr><td>label</td><td>[0-9]、[A-Z]、[单个中文字] 当size为small时，图片不展现标注名。</td><td>无</td></tr></tbody></table><p><code>label，font ,bold, fontSize，fontColor，background</code></p><h5 id="自定义markersStyle-1，url，0。"><a href="#自定义markersStyle-1，url，0。" class="headerlink" title="自定义markersStyle:  -1，url，0。"></a>自定义markersStyle:  -1，url，0。</h5><p>-1表示为自定义图片，URL为图片的网址。自定义图片只支持<strong>PNG</strong>格式。</p><p><code>https://restapi.amap.com/v3/staticmap?markers=-1,http://ico.ooopic.com/ajax/iconpng/?id=158688.png,0:116.37359,39.92437&amp;key=您的key</code></p><h4 id="labels"><a href="#labels" class="headerlink" title="labels"></a>labels</h4><p><code>labels=labelsStyle1:location1;location2|labelsStyle2:location3;location4..|labelsStyleN:locationN;locationM</code></p><p><em>labelsStyle</em>：<code>label, font, bold, fontSize, fontColor, backgroun</code>d。 各参数使用”,”分隔，如有默认值则可为空。</p><table><thead><tr><th>参数名称</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>content</td><td>标签内容，字符最大数目为15</td><td>无</td></tr><tr><td>font</td><td>0：微软雅黑；1：宋体；2：Times New Roman;3：Helvetica</td><td>0</td></tr><tr><td>bold</td><td>0：非粗体；1：粗体</td><td>0</td></tr><tr><td>fontSize</td><td>字体大小，可选值[1,72]</td><td>10</td></tr><tr><td>fontColor</td><td>字体颜色，取值范围：[0x000000, 0xffffff]</td><td>0xFFFFFF</td></tr><tr><td>background</td><td>背景色，取值范围：[0x000000, 0xffffff]</td><td>0x5288d8</td></tr></tbody></table><h4 id="paths"><a href="#paths" class="headerlink" title="paths"></a>paths</h4><p><code>paths=pathsStyle1:location1;location2..|pathsStyle2:location3;location4..|pathsStyleN:locationN;locationM..</code></p><blockquote><p> ▲.LocationN :  <code>118.9301,32.109</code>先经度后维度</p></blockquote><p><em>pathsStyle</em>：<code>weight, color, transparency, fillcolor, fillTransparency</code></p><table><thead><tr><th>参数名称</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>weight</td><td>线条粗细。可选值： [2,15]</td><td>5</td></tr><tr><td>color</td><td>折线颜色。 选值范围：[0x000000, 0xffffff]例如：0x000000 black,0x008000 green,0x800080 purple,0xFFFF00 yellow,0x0000FF blue,0x808080 gray,0xffa500 orange,0xFF0000 red,0xFFFFFF white</td><td>0x0000FF</td></tr><tr><td>transparency</td><td>透明度。可选值[0,1]，小数后最多2位，0表示完全透明，1表示完全不透明。</td><td>1</td></tr><tr><td>fillcolor</td><td>多边形的填充颜色，<strong>此值不为空时折线封闭成多边形</strong>。取值规则同color</td><td>无</td></tr><tr><td>fillTransparency</td><td>填充面透明度。可选值[0,1]，小数后最多2位，0表示完全透明，1表示完全不透明。</td><td>0.5</td></tr></tbody></table><p>折线示例:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paths: '10,0x<span class="number">0000</span>ff,1,,:116.<span class="number">3160</span>4,39.<span class="number">9649</span>1;116.<span class="number">320816</span>,39.<span class="number">966606</span>;116.<span class="number">321785</span>,39.<span class="number">966827</span>;116.<span class="number">3236</span>1,39.<span class="number">966957</span>',</span><br></pre></td></tr></table></figure><p>区域示例:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">paths</span>: "10,0<span class="selector-tag">x0000ff</span>,0<span class="selector-class">.1</span>,0<span class="selector-tag">x0000ff</span>,0<span class="selector-class">.7</span><span class="selector-pseudo">:116.31604</span>,39<span class="selector-class">.96491</span>;116<span class="selector-class">.320816</span>,39<span class="selector-class">.966606</span>;116<span class="selector-class">.321785</span>,39<span class="selector-class">.966827</span>;116<span class="selector-class">.32361</span>,39<span class="selector-class">.966957</span>;116<span class="selector-class">.39361</span>,39<span class="selector-class">.966957</span>;116<span class="selector-class">.39361</span>,39<span class="selector-class">.936957</span>",</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;小程序——高德地图API调用&quot;&gt;&lt;a href=&quot;#小程序——高德地图API调用&quot; class=&quot;headerlink&quot; title=&quot;小程序——高德地图API调用&quot;&gt;&lt;/a&gt;小程序——高德地图API调用&lt;/h2&gt;&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://nymrli.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="https://nymrli.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>HTML和CSS学习</title>
    <link href="https://nymrli.top/2018/12/06/HTML%E5%92%8CCSS%E5%AD%A6%E4%B9%A0/"/>
    <id>https://nymrli.top/2018/12/06/HTML和CSS学习/</id>
    <published>2018-12-06T02:57:32.000Z</published>
    <updated>2018-12-06T02:59:19.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML学习"><a href="#HTML学习" class="headerlink" title="HTML学习"></a>HTML学习</h1><h2 id="lt-head-gt-中的-lt-meta-gt-标签"><a href="#lt-head-gt-中的-lt-meta-gt-标签" class="headerlink" title="&lt;head&gt;中的&lt;meta&gt;标签"></a><code>&lt;head&gt;</code>中的<code>&lt;meta&gt;</code>标签</h2><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><a href="http://www.w3school.com.cn/tags/tag_meta.asp#meta_prop_http-equiv" target="_blank" rel="noopener">http-equiv</a></td><td>content-typeexpiresrefreshset-cookie</td><td>把 content 属性关联到 HTTP 头部。</td></tr><tr><td><a href="http://www.w3school.com.cn/tags/tag_meta.asp#meta_prop_name" target="_blank" rel="noopener">name</a></td><td>authordescriptionkeywordsgeneratorrevisedothers</td><td>把 content 属性关联到一个名称。</td></tr><tr><td><a href="http://www.w3school.com.cn/tags/tag_meta.asp#meta_prop_scheme" target="_blank" rel="noopener">scheme</a></td><td>some_text</td><td>定义用于翻译 content 属性值的格式。</td></tr></tbody></table><h3 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a>name 属性</h3><blockquote><p>name 属性提供了名称/值对中的名称。 </p></blockquote><p>“keywords” 是一个经常被用到的名称。它为文档定义了一组关键字。某些搜索引擎在遇到这些关键字时，会用这些关键字对文档进行分类。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">"keywords"</span> <span class="attribute">content</span>=<span class="string">"HTML,ASP,PHP,SQL"</span>&gt;</span><br></pre></td></tr></table></figure><p>▲如果没有提供 name 属性，那么名称/值对中的名称会采用 http-equiv 属性的值。</p><h3 id="http-equiv-属性"><a href="#http-equiv-属性" class="headerlink" title="http-equiv 属性"></a>http-equiv 属性</h3><p>http-equiv 属性为名称/值对提供了名称。并指示服务器在发送实际的文档之前先在要传送给浏览器的 MIME 文档头部包含名称/值对。</p><p>使用带有 http-equiv 属性的 <meta> 标签时，服务器将把名称/值对添加到发送给浏览器的内容头部。例如，添加：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attribute">http-equiv</span>=<span class="string">"charset"</span> <span class="attribute">content</span>=<span class="string">"iso-8859-1"</span>&gt;</span><br><span class="line">&lt;meta <span class="attribute">http-equiv</span>=<span class="string">"expires"</span> <span class="attribute">content</span>=<span class="string">"31 Dec 2008"</span>&gt;</span><br></pre></td></tr></table></figure><p>这样发送到浏览器的头部就应该包含：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">content-type: text/html</span><br><span class="line"><span class="symbol">charset:</span>iso<span class="number">-8859</span><span class="number">-1</span></span><br><span class="line"><span class="symbol">expires:</span><span class="number">31</span> <span class="keyword">Dec</span> <span class="number">2008</span></span><br></pre></td></tr></table></figure><h3 id="content-属性"><a href="#content-属性" class="headerlink" title="content 属性"></a>content 属性</h3><p>content 属性提供了名称/值对中的值。该值可以是任何有效的字符串。</p><p>content 属性始终要和 name 属性或 http-equiv 属性一起使用。</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul><li><p><code>&lt;em&gt;</code>和<code>&lt;strong&gt;</code>标签是为了<strong>强调</strong>一段话中的关键字时使用，它们的语义是<strong>强调。</strong></p></li><li><p><code>&lt;span&gt;</code>标签是没有语义的，它的作用就是为了设置单独的样式用的。</p></li><li><p><code>&lt;q&gt;</code>引用文本<code>&lt;/q&gt;</code>,注意要引用的文本不用加<strong>双引号</strong>，浏览器会对q标签自动添加双引号。</p></li><li><p><code>&lt;blockquote&gt;</code>引用长文本<code>&lt;/blockquote&gt;</code></p></li><li><p>使用<code>&lt;br&gt;</code>标签分行显示文本</p></li><li><p>空格<code>&amp;nbsp;</code></p></li><li><p>认识<code>&lt;hr /&gt;</code>标签，添加水平横线</p></li><li><p><code>&lt;address&gt;</code>标签，为网页加入地址信息</p></li><li><p><code>&lt;code&gt;var i=i+300;&lt;/code&gt;</code>一行代码</p></li><li><p><code>&lt;pre&gt;</code>语言代码段<code>&lt;/pre&gt;</code>大段代码</p></li><li><p>使用<code>&lt;ul&gt;</code>，添加新闻信息列表</p></li><li>创建表格<code>table</code>的四个元素：<ul><li><code>tbody</code>：如果不加<code>&lt;thead&gt;&lt;tbody&gt;&lt;tfooter&gt;</code> , table表格加载完后才显示。加上这些表格结构， <code>tbody</code>包含行的内容下载完优先显示，不必等待表格结束后在显示，同时如果表格很长，用<code>tbody</code>分段，可以一部分一部分地显示。</li><li><code>tr</code>表格的一行，所以有几对tr 表格就有几行。</li><li><code>th</code><strong>表格表头。</strong></li><li><code>td</code>一行中数据单元格的个数。</li><li><code>&lt;caption&gt;</code>标题文本<code>&lt;/caption&gt;</code></li><li><code>&lt;table summary=&quot;表格简介文本&quot;&gt;</code>摘要</li></ul></li></ul><h1 id="CSS学习"><a href="#CSS学习" class="headerlink" title="CSS学习"></a>CSS学习</h1><h3 id="Q-CSS样式可以写在哪些地方呢？"><a href="#Q-CSS样式可以写在哪些地方呢？" class="headerlink" title="Q:CSS样式可以写在哪些地方呢？"></a>Q:CSS样式可以写在哪些地方呢？</h3><p>A:</p><ul><li><p><u>内联式</u> : 把css代码直接写在现有的HTML标签中</p><ul><li><code>&lt;p style=&quot;color:red&quot;&gt;这里文字是红色。&lt;/p&gt;</code></li></ul></li><li><p><u>嵌入式</u> : 把css样式代码写在<code>&lt;style type=&quot;text/css&quot;&gt;&lt;/style</code>标签之间，一般情况下嵌入式css样式写在<code>&lt;head&gt;&lt;/head&gt;</code>之间</p><ul><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">span&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><u>外部式</u> : 把css代码写一个单独的外部文件中,这个css样式文件以“<code>.css</code>”为扩展名</p><ul><li><code>&lt;link href=&quot;base.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</code></li></ul></li></ul><p>▲.三种方法的优先级</p><blockquote><p> 内联式 &gt; 嵌入式 &gt; 外部式</p><p> <strong>嵌入式&gt;外部式</strong>有一个<strong>前提</strong>：嵌入式css样式的位置一定在外部式的后面</p><p> ==&gt;其实总结来说，就是<code>--就近原则（离被设置元素越近优先级别越高）</code>。</p></blockquote><h3 id="权值"><a href="#权值" class="headerlink" title="权值:"></a>权值:</h3><p><strong>标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red;&#125; <span class="comment">/*权值为1*/</span></span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span>&#123;<span class="attribute">color</span>:green;&#125; <span class="comment">/*权值为1+1=2*/</span></span><br><span class="line"><span class="selector-class">.warning</span>&#123;<span class="attribute">color</span>:white;&#125; <span class="comment">/*权值为10*/</span></span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span><span class="selector-class">.warning</span>&#123;<span class="attribute">color</span>:purple;&#125; <span class="comment">/*权值为1+1+10=12*/</span></span><br><span class="line"><span class="selector-id">#footer</span> <span class="selector-class">.note</span> <span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:yellow;&#125; <span class="comment">/*权值为100+10+1=111*/</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>还有一个权值比较特殊–继承也有权值但很低，有的文献提出它只有0.1，所以可以理解为继承的权值最低。</strong></p></blockquote><h3 id="gt-根据权值和层叠的想法"><a href="#gt-根据权值和层叠的想法" class="headerlink" title="==&gt;根据权值和层叠的想法:"></a>==&gt;根据<strong>权值</strong>和层叠的想法:</h3><p><strong>内联样式表（标签内部）&gt; 嵌入样式表（当前文件中）&gt; 外部样式表（外部文件中）</strong>。</p><h3 id="提高权值的方法-重要性"><a href="#提高权值的方法-重要性" class="headerlink" title="提高权值的方法:重要性"></a>提高权值的方法:重要性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red<span class="meta">!important</span>;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.first</span>&#123;<span class="attribute">color</span>:green;&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS格式化排版"><a href="#CSS格式化排版" class="headerlink" title="CSS格式化排版"></a>CSS格式化排版</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ul><li><h4 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family: 字体"></a>font-family: 字体</h4><ul><li><code>body{font-family:&quot;宋体&quot;;}</code></li></ul></li><li><h4 id="font-size-字号"><a href="#font-size-字号" class="headerlink" title="font-size:字号"></a>font-size:字号</h4><ul><li><code>body{font-size:12px;color:#666}</code></li></ul></li><li><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p span&#123;font-weight:bold;&#125;//粗体</span><br><span class="line">p a&#123;font-style:italic;&#125;//斜体</span><br><span class="line">p a&#123;text-decoration:underline;&#125; //下划线</span><br><span class="line">.oldPrice&#123;text-decoration:line-through;&#125;//删除线</span><br></pre></td></tr></table></figure></li></ul><h3 id="段落排版"><a href="#段落排版" class="headerlink" title="段落排版"></a>段落排版</h3><ul><li><h4 id="text-indent-段落缩进"><a href="#text-indent-段落缩进" class="headerlink" title="text-indent:段落缩进"></a>text-indent:段落缩进</h4><ul><li><code>p{ text-indent:2em;}</code></li></ul></li><li><h4 id="行间距（行高）"><a href="#行间距（行高）" class="headerlink" title="行间距（行高）"></a>行间距（行高）</h4><ul><li><code>p{ line-height:1.5em;}</code></li></ul></li><li><h4 id="中文字间距、字母间距"><a href="#中文字间距、字母间距" class="headerlink" title="中文字间距、字母间距"></a>中文字间距、字母间距</h4><ul><li><code>h1{ word-spacing:50px;}</code></li></ul></li><li><h4 id="为块状元素中的文本、图片设置居中样式"><a href="#为块状元素中的文本、图片设置居中样式" class="headerlink" title="为块状元素中的文本、图片设置居中样式"></a>为<strong>块状元素</strong>中的文本、图片设置居中样式</h4><ul><li><code>h1{ text-align:center;}</code></li></ul></li></ul><h3 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h3><h4 id="块状元素-block"><a href="#块状元素-block" class="headerlink" title="块状元素(block)"></a><strong>块状元素</strong>(block)</h4><ul><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>、<span class="tag">&lt;<span class="name">p</span>&gt;</span>、<span class="tag">&lt;<span class="name">h1</span>&gt;</span>...<span class="tag">&lt;<span class="name">h6</span>&gt;</span>、<span class="tag">&lt;<span class="name">ol</span>&gt;</span>、<span class="tag">&lt;<span class="name">ul</span>&gt;</span>、<span class="tag">&lt;<span class="name">dl</span>&gt;</span>、<span class="tag">&lt;<span class="name">table</span>&gt;</span>、<span class="tag">&lt;<span class="name">address</span>&gt;</span>、<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span> 、<span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>1、每个块级元素都从<strong>新的一行开始</strong>，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）</p><p>2、元素的高度、宽度、行高以及顶和底边距都可设置。</p><p>3、元素<strong>宽度</strong>在不设置的情况下，是它本身父容器的<strong>100%</strong>（和父元素的宽度一致），除非设定一个宽度。</p></blockquote><h4 id="内联元素-又叫行内元素-inline"><a href="#内联元素-又叫行内元素-inline" class="headerlink" title="内联元素(又叫行内元素):inline"></a><strong>内联元素(又叫行内元素)</strong>:inline</h4><ul><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>、<span class="tag">&lt;<span class="name">span</span>&gt;</span>、<span class="tag">&lt;<span class="name">br</span>&gt;</span>、<span class="tag">&lt;<span class="name">i</span>&gt;</span>、<span class="tag">&lt;<span class="name">em</span>&gt;</span>、<span class="tag">&lt;<span class="name">strong</span>&gt;</span>、<span class="tag">&lt;<span class="name">label</span>&gt;</span>、<span class="tag">&lt;<span class="name">q</span>&gt;</span>、<span class="tag">&lt;<span class="name">var</span>&gt;</span>、<span class="tag">&lt;<span class="name">cite</span>&gt;</span>、<span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>1、和其他元素都在一行上；</p><p>2、元素的高度、宽度及顶部和底部边距<strong>不可</strong>设置；</p><p>3、<u>元素的<strong>宽度</strong>就是它包含的文字或图片的<strong>宽度</strong>，不可改变。</u></p></blockquote><h4 id="内联块状元素-inline-block）"><a href="#内联块状元素-inline-block）" class="headerlink" title="内联块状元素(inline-block）"></a>内联块状元素(inline-block）</h4><ul><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>、<span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>1、和其他元素都在一行上；</p><p>2、元素的高度、宽度、行高以及顶和底边距都可设置。</p></blockquote><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><blockquote><p>块级元素都具有盒子模型的特征</p></blockquote><p>外边距 : <code>marigin</code></p><p>内边距 : <code>padding</code></p><p>边框 : <code>border</code></p><h4 id="盒模型–宽度和高度"><a href="#盒模型–宽度和高度" class="headerlink" title="盒模型–宽度和高度"></a>盒模型–宽度和高度</h4><p>元素的实际高度为 : <code>自身height+ padding-top +padding-bottom</code></p><p>元素的实际宽度为 : <code>自身width+ padding-left +padding-right</code></p><p>▲ 一个元素实际宽度（盒子的宽度）=左边界+左边框+左填充+内容宽度+右填充+右边框+右边界。</p><h5 id="总宽度计算"><a href="#总宽度计算" class="headerlink" title="总宽度计算:"></a>总宽度计算:</h5><p><img src="/2018/12/06/HTML和CSS学习/盒模型-高度和宽度.jpg" alt="盒模型-高度和宽度"></p><h5 id="开发工具查看"><a href="#开发工具查看" class="headerlink" title="开发工具查看:"></a>开发工具查看:</h5><p><img src="/2018/12/06/HTML和CSS学习/盒模型-高度和宽度实图.jpg" alt="盒模型-高度和宽度实图"></p><h4 id="边框"><a href="#边框" class="headerlink" title="边框:"></a>边框:</h4><ul><li>border-style（边框样式）常见样式有：</li></ul><p><code>dashed（虚线）| dotted（点线）| solid（实线）</code></p><ul><li>border-color（边框颜色）中的颜色可设置为十六进制颜色，如:</li></ul><p><code>border-color:#888;//前面的井号不要忘掉。</code></p><ul><li>border-width（边框宽度）中的宽度也可以设置为：</li></ul><p><code>thin | medium | thick（但不是很常用），最常还是用像素（px）。</code></p><h2 id="css布局模型"><a href="#css布局模型" class="headerlink" title="css布局模型"></a>css布局模型</h2><p>1、流动模型（Flow）<br>2、浮动模型 (Float)<br>3、层模型（Layer）</p><h3 id="流动模型（Flow）"><a href="#流动模型（Flow）" class="headerlink" title="流动模型（Flow）"></a>流动模型（Flow）</h3><p>流动（Flow）是默认的网页布局模式.</p><p>2个比较典型的特征：</p><ul><li><p>第一点，<strong>块状元素</strong>都会在所处的<strong>包含元素内</strong><u>自上而下</u>按顺序<u>垂直延伸</u>分布，因为在默认状态下，块状元素的宽度都为<strong>100%</strong>。实际上，块状元素都会以行的形式占据位置。</p></li><li><p>第二点，在流动模型下，<strong>内联元素</strong>都会在所处的包含元素内<u>从左到右</u><u>水平分布</u>显示。（内联元素可不像块状元素这么霸道独占一行）</p></li></ul><h3 id="浮动模型-Float"><a href="#浮动模型-Float" class="headerlink" title="浮动模型 (Float)"></a>浮动模型 (Float)</h3><blockquote><p>想让两个块状元素并排显示..任何元素在默认情况下是不能浮动的，但可以用 CSS 定义为浮动，</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*实现两个 div 元素一行显示。*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> red solid;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="层模型（Layer）"><a href="#层模型（Layer）" class="headerlink" title="层模型（Layer）"></a>层模型（Layer）</h3><blockquote><p>如何让html元素在网页中精确定位，就像图像软件PhotoShop中的图层一样可以对每个图层能够精确定位操作</p></blockquote><h4 id="1、绝对定位-position-absolute"><a href="#1、绝对定位-position-absolute" class="headerlink" title="1、绝对定位(position: absolute)"></a>1、<strong>绝对定位</strong>(position: absolute)</h4><blockquote><p>将元素从文档流中拖出来，然后使用left(距离左)、right、top、bottom属性相对于其<strong>最接近</strong>的一个具有<strong>定位属性</strong>的<strong>父包含块</strong>进行绝对定位。如果不存在这样的包含块，则相对于<strong>body元素</strong>，即相对于<strong>浏览器窗口</strong></p></blockquote><h4 id="2、相对定位-position-relative"><a href="#2、相对定位-position-relative" class="headerlink" title="2、相对定位(position: relative)"></a>2、<strong>相对定位</strong>(position: relative)</h4><blockquote><p>相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于<strong>以前的位置移动，</strong>移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。</p></blockquote><p>Q:什么叫做“偏移前的位置保留不动”</p><p>A: 虽然div元素相对于以前的位置产生了偏移，但是div元素以前的位置还是保留着，所以后面的span元素是显示在了div元素以前位置的后面。</p><p>===&gt; 所占的位置不变,但是显示的位置发生了变化.</p><h4 id="3、固定定位-position-fixed"><a href="#3、固定定位-position-fixed" class="headerlink" title="3、固定定位(position: fixed)"></a>3、<strong>固定定位</strong>(position: fixed)</h4><blockquote><p>与absolute定位类型类似，但它的相对移动的坐标是视图（<strong>屏幕内的网页窗口</strong>）本身.</p><p>由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，</p></blockquote><p><em>用途</em> : 可以实现相对于<strong>浏览器视图</strong>向右移动100px，向下移动50px。并且<strong>拖动滚动条时位置固定不变。</strong></p><h2 id="水平居中设置"><a href="#水平居中设置" class="headerlink" title="水平居中设置"></a>水平居中设置</h2><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><ul><li>如果被设置元素为文本、图片等行内元素时，水平居中是通过给<strong>父元素</strong>设置 <code>text-align:center</code> 来实现的</li></ul><h4 id="块状元素"><a href="#块状元素" class="headerlink" title="块状元素"></a>块状元素</h4><ul><li><p>定宽~ : 宽度width为固定值</p><ul><li>通过设置“左右margin”值为“<code>auto</code>”来实现居中的</li></ul></li><li><p>不定宽~</p><ul><li><p>加入 <a href="http://www.imooc.com/code/292" target="_blank" rel="noopener">table</a> 标签</p><ul><li><p><code>table</code>长度自适应性,其长度根据其内文本长度决定</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第一行文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第二行文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第三行文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-tag">table</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>▲补充代码实现右侧中的 class 为 wrap 的 div 水平居中显示（要注意是这个 div元素 居中，而不是里面的文本居中啊）。</p></li></ul></li><li><p>设置 <a href="http://www.imooc.com/code/2049" target="_blank" rel="noopener">display: inline</a> 方法：与第一种类似，显示类型设为 行内元素，进行不定宽元素的属性设置</p><ul><li><p>改变块级元素的 display 为 inline 类型（设置为 <a href="http://www.imooc.com/code/2049" target="_blank" rel="noopener">行内元素</a> 显示），然后使用 <code>text-align:center</code> 来实现居中效果。如下例子：</p></li><li><p>html代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* margin:0;padding:0（消除文本与div边框之间的间隙）*/</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>:none;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>:inline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* margin-right:8px（设置li文本之间的间隔）*/</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">margin-right</span>:<span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">display</span>:inline;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>▲ 改变块级元素的 display 为 inline 类型（设置为 <a href="http://www.imooc.com/code/2049" target="_blank" rel="noopener">行内元素</a> 显示），然后使用 <code>text-align:center</code> 来实现居中效果。如下例子：</p></li></ul></li><li><p>父元素设置 <a href="http://www.imooc.com/code/2074" target="_blank" rel="noopener">position:relative</a> 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。：利用 相对定位 的方式，将元素向左偏移 50% ，即达到居中的目的</p><ul><li><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>:none;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">li</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">display</span>:inline;<span class="attribute">margin-right</span>:<span class="number">8px</span>;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h4 id="父元素高度确定的单行文本"><a href="#父元素高度确定的单行文本" class="headerlink" title="父元素高度确定的单行文本"></a>父元素高度确定的单行文本</h4><ul><li>通过设置父元素的 height 和<a href="http://www.imooc.com/code/2083" target="_blank" rel="noopener"> line-height </a>高度一致来实现的。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">line-height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>:<span class="selector-id">#999</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="父元素高度确定的多行文本、图片"><a href="#父元素高度确定的多行文本、图片" class="headerlink" title="父元素高度确定的多行文本、图片"></a>父元素高度确定的多行文本、图片</h4><ul><li><p>使用插入 <a href="http://www.imooc.com/code/292" target="_blank" rel="noopener">table</a>  (包括tbody、tr、td)标签，同时设置 vertical-align：middle。</p><ul><li><p>html代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>看我是否可以居中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#ccc</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*因为 td 标签默认情况下就默认设置了 vertical-align 为 middle，所以我们不需要显式地设置了。*/</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>在 chrome、firefox 及 IE8 以上的浏览器下可以设置块级元素的<code>display</code>为 <code>table-cell</code>（设置为表格单元显示），激活 vertical-align 属性</p><ul><li><p>html代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>看我是否可以居中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>看我是否可以居中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>看我是否可以居中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">display</span>:table-cell;<span class="comment">/*IE8以上及Chrome、Firefox*/</span></span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;<span class="comment">/*IE8以上及Chrome、Firefox*/</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="隐性改变display类型"><a href="#隐性改变display类型" class="headerlink" title="隐性改变display类型"></a>隐性改变display类型</h2><ol><li><p><a href="http://www.imooc.com/code/2073" target="_blank" rel="noopener">position : absolute</a> </p></li><li><p>float : left 或 <a href="http://www.imooc.com/code/2071" target="_blank" rel="noopener">float:right</a> </p></li></ol><p>只要html代码中出现以上两句之一，元素的display显示类型就会自动变为以 display:inline-block（<a href="http://www.imooc.com/code/2048" target="_blank" rel="noopener">块状元素</a>）的方式显示，当然就可以设置元素的 width 和 height 了，且默认宽度不占满父元素。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML学习&quot;&gt;&lt;a href=&quot;#HTML学习&quot; class=&quot;headerlink&quot; title=&quot;HTML学习&quot;&gt;&lt;/a&gt;HTML学习&lt;/h1&gt;&lt;h2 id=&quot;lt-head-gt-中的-lt-meta-gt-标签&quot;&gt;&lt;a href=&quot;#lt-head-gt
      
    
    </summary>
    
    
      <category term="前端" scheme="https://nymrli.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML" scheme="https://nymrli.top/tags/HTML/"/>
    
      <category term="CSS" scheme="https://nymrli.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Pyinstaller使用</title>
    <link href="https://nymrli.top/2018/12/03/Pyinstaller%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2018/12/03/Pyinstaller使用/</id>
    <published>2018-12-03T03:54:22.000Z</published>
    <updated>2018-12-03T03:57:42.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pyinstaller使用"><a href="#pyinstaller使用" class="headerlink" title="pyinstaller使用"></a>pyinstaller使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="1、安装pywin32-gt-pyinstaller依赖于"><a href="#1、安装pywin32-gt-pyinstaller依赖于" class="headerlink" title="1、安装pywin32==&gt;pyinstaller依赖于"></a>1、安装pywin32==&gt;pyinstaller依赖于</h4><ul><li><p>下载安装文件：查找到跟自己适用的python版本及window系统版本匹配的<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip" target="_blank" rel="noopener">pywin32</a>，下载后安装 </p></li><li><p>使用pip命令安装：<code>pip install pywin32</code></p></li></ul><h4 id="2、安装Pyinstaller"><a href="#2、安装Pyinstaller" class="headerlink" title="2、安装Pyinstaller"></a>2、安装Pyinstaller</h4><ul><li><p>下载安装文件安装：<a href="http://www.pyinstaller.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>使用pip命令安装：<code>pip install PyInstaller</code></p></li></ul><p>使用<code>Pycharm</code>直接搜索<code>pyinstaller</code>会自动安装依赖库<code>pywin32</code></p><hr><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="1、使用下载安装的方式安装的Pyinstaller打包方式"><a href="#1、使用下载安装的方式安装的Pyinstaller打包方式" class="headerlink" title="1、使用下载安装的方式安装的Pyinstaller打包方式"></a>1、使用下载安装的方式安装的Pyinstaller打包方式</h4><p>将需要打包的文件放在解压得到的Pyinstaller文件夹中，打开cmd窗口，把路径切换到当前路径打开命令提示行，输入以下内容（最后的是文件名）==&gt;<code>调用pyinstaller.py文件打包</code>：</p><ul><li><code>python pyinstaller.py -F myfile.py</code></li></ul><h4 id="2、使用pip方式安装的Pyinstaller打包方式"><a href="#2、使用pip方式安装的Pyinstaller打包方式" class="headerlink" title="2、使用pip方式安装的Pyinstaller打包方式"></a>2、使用pip方式安装的Pyinstaller打包方式</h4><p>打开cmd窗口，把路径切换到文件所在路径(文件随便放在哪里都行)打开命令提示行，输入以下内容（最后的是文件名）：</p><ul><li><code>pyinstaller -F myfile.py</code></li></ul><h4 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h4><p><code>pyinstaller -F test.py -i src\logo.ico</code></p><blockquote><ul><li><h5 id="F-表示生成单个可执行文件"><a href="#F-表示生成单个可执行文件" class="headerlink" title="-F 表示生成单个可执行文件"></a>-F 表示生成单个可执行文件</h5></li><li><h5 id="w-表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除吧！"><a href="#w-表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除吧！" class="headerlink" title="-w 表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除吧！"></a>-w 表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除吧！</h5></li><li><h5 id="p-表示你自己自定义需要加载的库路径，一般情况下用不到"><a href="#p-表示你自己自定义需要加载的库路径，一般情况下用不到" class="headerlink" title="-p 表示你自己自定义需要加载的库路径，一般情况下用不到"></a>-p 表示你自己自定义需要加载的库路径，一般情况下用不到</h5></li><li><h5 id="i-表示可执行文件的图标"><a href="#i-表示可执行文件的图标" class="headerlink" title="-i 表示可执行文件的图标"></a>-i 表示可执行文件的图标</h5></li></ul></blockquote><p>▲. <code>-i</code>的参数为<code>.ico</code>格式,其他格式的图片会报错</p><h3 id="文件中使用了第三方库的打包方式"><a href="#文件中使用了第三方库的打包方式" class="headerlink" title="文件中使用了第三方库的打包方式"></a>文件中使用了第三方库的打包方式</h3><p>在打包之前务必找到第三方库的包，把包复制到到跟<code>myfile.py</code>同目录下，然后再使用以上2种方式打包，否则会打包失败或者即使打包成功，程序也会闪退。</p><h3 id="pyqt5打包出现错误"><a href="#pyqt5打包出现错误" class="headerlink" title="pyqt5打包出现错误"></a>pyqt5打包出现错误</h3><p>一 、当写这篇文章的时候，pyinstaller官网版本对pyqt5打包可能会遇到<code>Could not find QtWebEngineProcess.exe.</code>的错误。解决方法为：安装最新的<code>pyinstaller</code></p><blockquote><p>1.在<a href="https://github.com/pyinstaller/pyinstaller" target="_blank" rel="noopener">github</a>下载新版本的开发包。<br>2.打开解压后的文件夹，shift+鼠标右键，点击“在此处打开命令窗口”。之后依次运行如下命令:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall pyinstaller</span><br><span class="line">python setup.py build</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><p>二 、如果有报错：<code>“could not find or load the Qt platform plugin &quot;windows&quot; ”</code>。原因之一可能是你把打包后的文件放在了中文目录下。只需要将打包后的文件放在<strong>英文目录</strong>下，就可以解决。</p><h3 id="多文件打包"><a href="#多文件打包" class="headerlink" title="多文件打包"></a>多文件打包</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller <span class="selector-attr">[主文件]</span> -<span class="selector-tag">p</span> <span class="selector-attr">[其他文件1]</span> -<span class="selector-tag">p</span> <span class="selector-attr">[其他文件2]</span> </span><br><span class="line">--hidden-import <span class="selector-attr">[自建模块1]</span> </span><br><span class="line">--hidden-import <span class="selector-attr">[自建模块2]</span></span><br><span class="line"># 以上为一整条命令</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller main<span class="selector-class">.py</span> -<span class="selector-tag">p</span> mysql<span class="selector-class">.py</span> -<span class="selector-tag">p</span> other<span class="selector-class">.py</span> --hidden-import mysql --hidden-import other</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;pyinstaller使用&quot;&gt;&lt;a href=&quot;#pyinstaller使用&quot; class=&quot;headerlink&quot; title=&quot;pyinstaller使用&quot;&gt;&lt;/a&gt;pyinstaller使用&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; cla
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>pyqt5与QT5</title>
    <link href="https://nymrli.top/2018/11/26/pyqt%E4%B8%8EQT5/"/>
    <id>https://nymrli.top/2018/11/26/pyqt与QT5/</id>
    <published>2018-11-26T04:11:52.000Z</published>
    <updated>2018-11-26T05:17:39.620Z</updated>
    
    <content type="html"><![CDATA[<p>添加<code>QT Designer</code>、<code>PyUIc</code>、<code>Pyrcc</code></p><h3 id="1-添加外部工具-Extenal-Tools"><a href="#1-添加外部工具-Extenal-Tools" class="headerlink" title="1.添加外部工具(Extenal Tools)"></a>1.添加外部工具(Extenal Tools)</h3><h4 id="QT-Designer"><a href="#QT-Designer" class="headerlink" title="QT Designer"></a>QT Designer</h4><blockquote><p>File–&gt;Settings–&gt;Tools–&gt;Extenal Tools –&gt; ‘’+’’ &gt; 添加具体细节,如图一图二</p></blockquote><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\2.jpg" alt="2"></p><p>​                                                图一</p><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\1.jpg" alt="1"></p><p>​                                                    图二</p><p>修改<code>Name</code>为<code>QT Designer</code>,<code>Program</code>为<code>QT</code>目录下<code>designer.exe</code>文件,不需要参数,<code>Work directory</code>为<code>D:\QT\{QT version}\msvc2015_64\bin</code></p><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\designer_pro.jpg" alt="designer_pro"></p><p>添加后就可以在菜单栏的<code>Tools</code>中找到..点击后,就可以直接打开<code>QT Designer</code>设计窗口</p><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\QTdesigner_finish.jpg" alt="QTdesigner_finish"></p><p>QT Designer</p><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\5.jpg" alt="5"></p><hr><h4 id="QT-UIC"><a href="#QT-UIC" class="headerlink" title="QT UIC"></a>QT UIC</h4><h5 id="1-Program设置为当前虚拟环境的python解释器python-exe-一旦设置好后-每次新建虚拟环境-pycharm会自动帮你修改选择的解释器"><a href="#1-Program设置为当前虚拟环境的python解释器python-exe-一旦设置好后-每次新建虚拟环境-pycharm会自动帮你修改选择的解释器" class="headerlink" title="1.Program设置为当前虚拟环境的python解释器python.exe,(一旦设置好后,每次新建虚拟环境,pycharm会自动帮你修改选择的解释器)"></a>1.<code>Program</code>设置为当前虚拟环境的python解释器<code>python.exe</code>,(一旦设置好后,每次新建虚拟环境,pycharm会自动帮你修改选择的解释器)</h5><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\pyUIC.jpg" alt="pyUIC"></p><p><strong>2.▲.<code>Arguments</code>参数设置为:</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-m</span><br><span class="line">PyQt5<span class="selector-class">.uic</span><span class="selector-class">.pyuic</span></span><br><span class="line"><span class="variable">$FileName</span>$</span><br><span class="line">-o</span><br><span class="line"><span class="variable">$FileNameWithoutExtension</span>$.py</span><br></pre></td></tr></table></figure><p>这个参数主要是用<code>uic</code>这个工具需要指定的参数</p><h5 id="3-working-directory设置为-FileDir-当前文件目录-gt-含义是-根据-UI生成的py窗口文件的位置"><a href="#3-working-directory设置为-FileDir-当前文件目录-gt-含义是-根据-UI生成的py窗口文件的位置" class="headerlink" title="3.working directory设置为$FileDir$(当前文件目录)===&gt;含义是:根据.UI生成的py窗口文件的位置"></a>3.<code>working directory</code>设置为<code>$FileDir$</code>(当前文件目录)===&gt;含义是:根据<code>.UI</code>生成的<code>py</code>窗口文件的位置</h5><p>完成后,效果如图..一开始是没有<code>window.py</code></p><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\ui.jpg" alt="ui"></p><p>将光标选择<code>window.ui</code>文件,然后选择<code>Tools</code>里面的<code>PyUIC</code>就可以自动生成一个<code>window.py</code>文件直接使用了.</p><p><strong>控制台输出内容:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">G:\PyGui\venv\Scripts\python.exe -m PyQt5.uic.pyuic window.ui -o window.py</span><br><span class="line"><span class="comment">#点击PyUIC就相当于输出了在setting里面写好的代码,$FileName$为我们光标选择的文件名,输出的名字为$FileNameWithoutExtension$.py,输出的路径为当前文件目录$FileDir$</span></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\ui1.jpg" alt="ui1"></p><h4 id="QT-Rcc"><a href="#QT-Rcc" class="headerlink" title="QT Rcc"></a>QT Rcc</h4><h5 id="1-将program设置为QT目录下的rcc-exe文件"><a href="#1-将program设置为QT目录下的rcc-exe文件" class="headerlink" title="1.将program设置为QT目录下的rcc.exe文件"></a>1.将<code>program</code>设置为<code>QT</code>目录下的<code>rcc.exe</code>文件</h5><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\rcc_setting1.jpg" alt="rcc_setting1"></p><h5 id="2-设置Arguments为"><a href="#2-设置Arguments为" class="headerlink" title="2.设置Arguments为"></a>2.设置<code>Arguments</code>为</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$FileName</span>$</span><br><span class="line">-o</span><br><span class="line"><span class="variable">$FileNameWithoutExtension</span><span class="variable">$.</span>py</span><br></pre></td></tr></table></figure><p>道理同上<code>-o 是输出的意思</code></p><h5 id="3-work-directory设置为-FileDir"><a href="#3-work-directory设置为-FileDir" class="headerlink" title="3.work directory设置为$FileDir$"></a>3.<code>work directory</code>设置为<code>$FileDir$</code></h5><h5 id="4-新建-qrc资源文件"><a href="#4-新建-qrc资源文件" class="headerlink" title="4.新建.qrc资源文件"></a>4.新建<code>.qrc</code>资源文件</h5><p>打开<code>QT Designer</code>选择下面的<strong>资源管理器</strong>,单击铅笔,如图操作</p><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\qrc建立.jpg" alt="qrc建立"></p><p>单击左边蓝色的存储后,意思是指定<code>.qrc</code>文件存储位置</p><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\qrc.jpg" alt="qrc"></p><p>选择好以后,再操作右边的选择卡,填好<strong>前缀</strong>,然后点击蓝色的按键,选择要添加的资源文件(如图片什么的)</p><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\qrc加载.jpg" alt="qrc加载"></p><p>此时打开<code>.qrc</code>文件就可以看到他指定了哪些资源文件</p><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\qrc_finish.jpg" alt="qrc_finish"></p><p>上述步骤完成后就可以使用<code>rcc</code>工具将<code>.qrc</code>文件转换成<code>.py的资源文件</code>使用了</p><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\rcc.jpg" alt="rcc"></p><p>光标选择<code>.qrc资源</code>后,选择<code>Pyrcc</code>后就会生成相应的<code>py</code>文件</p><p><img src="/2018/11/26/pyqt与QT5/hexo\source\_posts\pyqt与QT5\rcc_finish.jpg" alt="rcc_finish"></p><p>需要用到图片时,直接导入图片的<code>.py</code>文件即可</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mainwindow.py]</span><br><span class="line"><span class="keyword">import</span> picture</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[main.py]</span><br><span class="line"><span class="comment">#显示加载界面</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    splash = QSplashScreen(QPixmap(<span class="string">':/load/loading.jpg'</span>))</span><br><span class="line">    splash.show()</span><br><span class="line">    splash.showMessage(<span class="string">'正在加载请稍等..'</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    app.processEvents()</span><br><span class="line">    ui = caofunction.MyWindow()</span><br><span class="line">    ui.show()</span><br><span class="line">    splash.finish(ui)</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>#### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;添加&lt;code&gt;QT Designer&lt;/code&gt;、&lt;code&gt;PyUIc&lt;/code&gt;、&lt;code&gt;Pyrcc&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-添加外部工具-Extenal-Tools&quot;&gt;&lt;a href=&quot;#1-添加外部工具-Extenal-Tools&quot; cl
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>机器学习——数学概念</title>
    <link href="https://nymrli.top/2018/11/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/"/>
    <id>https://nymrli.top/2018/11/24/机器学习——数学概念/</id>
    <published>2018-11-24T05:00:34.000Z</published>
    <updated>2018-11-24T09:14:58.469Z</updated>
    
    <content type="html"><![CDATA[<h3 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h3><h3 id="Confusion-martrix-混淆矩阵"><a href="#Confusion-martrix-混淆矩阵" class="headerlink" title="Confusion_martrix(混淆矩阵)"></a>Confusion_martrix(混淆矩阵)</h3><p>混淆矩阵: 一种特定的矩阵用来呈现算法性能的可视化效果，通常是监督学习（非监督学习，通常用匹配矩阵：matching matrix）</p><blockquote><p>其每一列代表预测值，每一行代表的是实际的类别。这个名字来源于它可以非常容易的表明多个类别是否有混淆（也就是一个class被预测成另一个class）。</p></blockquote><h4 id="Example样例说明"><a href="#Example样例说明" class="headerlink" title="Example样例说明:"></a>Example样例说明:</h4><p>假设有一个用来对<code>猫（cats）、狗（dogs）、兔子（rabbits）</code>进行分类的系统，混淆矩阵就是为了进一步分析性能而对该算法测试结果做出的总结。假设总共有 <strong>27</strong> 只动物：8只猫， 6条狗， 13只兔子。结果的混淆矩阵如下图：</p><p><img src="/2018/11/24/机器学习——数学概念/hexo\source\_posts\机器学习——数学概念\confusion_matrix.png" alt="confusion_matrix"></p><p>在这个混淆矩阵中，实际有 8只猫，但是系统将其中3只预测成了狗；对于 6条狗，其中有 1条被预测成了兔子，2条被预测成了猫。从混淆矩阵中我们可以看出系统对于区分猫和狗存在一些问题，但是<strong>区分兔子和其他动物的效果还是不错的</strong>。<strong><u>所有正确的预测结果都在对角线上</u></strong>，所以从混淆矩阵中可以很方便直观的看出哪里有错误，因为他们呈现在对角线外面。</p><h3 id="Table-of-confusion-混淆表格"><a href="#Table-of-confusion-混淆表格" class="headerlink" title="Table of confusion(混淆表格)"></a>Table of confusion(混淆表格)</h3><p>有时也称混淆矩阵.</p><p>由<code>false positives</code>，<code>false negatives</code>，<code>true positives</code>和<code>true negatives</code>组成的两行两列的表格。它允许我们做出更多的分析，而不仅仅是局限在正确率.。 它允许我们做出更多的分析，而不仅仅是局限在正确率。准确率对于分类器的性能分析来说，并不是一个很好地衡量指标，因为如果数据集<u>不平衡</u>（每一类的数据样本数量相差太大），很可能会出现误导性的结果。例如，如果在一个数据集中有95只猫，但是只有5条狗，那么某些分类器很可能偏向于将所有的样本预测成猫。整体准确率为95%，<u>但是实际上该分类器对猫的识别率是100%，而对狗的识别率是0%。</u></p><p>对于上面的说明样例，其对应的对猫这个类别的混淆表格如下：</p><p><img src="/2018/11/24/机器学习——数学概念/hexo\source\_posts\机器学习——数学概念\混淆表格.png" alt="混淆表格"></p><p>假定一个实验有 P个positive实例，在某些条件下有 N 个negative实例。那么上面这四个输出可以用下面的偶然性表格（或混淆矩阵）来表示：</p><p><img src="/2018/11/24/机器学习——数学概念/hexo\source\_posts\机器学习——数学概念\偶然性表格.png" alt="偶然性表格"></p><p>更多详情见博客</p><p>摘自博客 :  <a href="https://blog.csdn.net/vesper305/article/details/44927047" target="_blank" rel="noopener">https://blog.csdn.net/vesper305/article/details/44927047</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;箱线图&quot;&gt;&lt;a href=&quot;#箱线图&quot; class=&quot;headerlink&quot; title=&quot;箱线图&quot;&gt;&lt;/a&gt;箱线图&lt;/h3&gt;&lt;h3 id=&quot;Confusion-martrix-混淆矩阵&quot;&gt;&lt;a href=&quot;#Confusion-martrix-混淆矩阵&quot; cla
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数学知识" scheme="https://nymrli.top/tags/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>机器学习——python实践.笔记</title>
    <link href="https://nymrli.top/2018/11/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Python%E5%AE%9E%E8%B7%B5-%E7%AC%94%E8%AE%B0/"/>
    <id>https://nymrli.top/2018/11/23/机器学习——Python实践-笔记/</id>
    <published>2018-11-23T13:20:18.000Z</published>
    <updated>2018-11-24T08:41:41.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习——Python实践"><a href="#机器学习——Python实践" class="headerlink" title="机器学习——Python实践"></a>机器学习——Python实践</h1><ul><li>Numpy: <ul><li>python开源数值计算拓展,用来存储和处理大型矩阵,提供了许多高级的数值编程工具,如 矩阵数据类型、矢量处理、精密的运算库<ul><li>利用Numpy数组来准备机器学习算法的数据</li></ul></li></ul></li><li>matplotlib:<ul><li>python中最著名的2D绘图库,适合交互式的进行制图;也可作为绘图空间,嵌入GUI应用程序中<ul><li>创建图表,展示数据</li></ul></li></ul></li><li>Pandas:<ul><li>基于Numpy的工具,为了解决数据分析任务而创建的.~纳入了大量库和标准的数据模型,提供了操作大型数据集的工具,和快速便捷处理数据的函数和方法<ul><li>导入、展示数据，以便挣钱对数据的理解和数据清洗、转换等工作</li></ul></li></ul></li></ul><p>##### </p><p><strong>预测模型所需的六个步骤:</strong></p><p><img src="/2018/11/23/机器学习——Python实践-笔记/预测模型所需的六个步骤.jpg" alt="预测模型所需的六个步骤"></p><hr><h2 id="第一章："><a href="#第一章：" class="headerlink" title="第一章："></a>第一章：</h2><h3 id="鸢尾花-Iris-Flower"><a href="#鸢尾花-Iris-Flower" class="headerlink" title="鸢尾花(Iris Flower)"></a>鸢尾花(Iris Flower)</h3><blockquote><ul><li><p>所有特征数据都是数字,不需要考虑如何导入和处理数据—&gt;有的图表有标题等的,需要处理- </p></li><li><p>分类问题===&gt;监督学习算法</p></li><li>多分类问题,可能需要一些特殊处理</li><li>所有特征的数值采用相同单位,不需要进行尺度转换</li></ul></blockquote><p>步骤:</p><p><img src="/2018/11/23/机器学习——Python实践-笔记/项目具体步骤.jpg" alt="项目具体步骤"></p><h5 id="1-导入数据集"><a href="#1-导入数据集" class="headerlink" title="1.导入数据集"></a>1.导入数据集</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> read_csv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'iris.data.csv'</span></span><br><span class="line">names = [<span class="string">'separ-length'</span>,<span class="string">'separ-width'</span>,<span class="string">'petal-length'</span>,<span class="string">'petal-width'</span>,<span class="string">'class'</span>]</span><br><span class="line"><span class="comment"># 花萼长度+宽度 , 花瓣长度+宽度</span></span><br><span class="line">dataset = read_csv(filename,names = names)</span><br><span class="line">print(dataset)  <span class="comment"># 150 * 5</span></span><br></pre></td></tr></table></figure><h5 id="2-概述数据"><a href="#2-概述数据" class="headerlink" title="2.概述数据"></a>2.概述数据</h5><blockquote><p>从下列角度审查数据:</p><ul><li>数据的维度</li><li><p>查看数据的自身</p></li><li><p>统计描述所有的数据特征</p></li><li>数据分类的分布情况</li></ul></blockquote><h6 id="1-数据的维度"><a href="#1-数据的维度" class="headerlink" title="1.数据的维度"></a>1.数据的维度</h6><p>了解数据集中有多少行数据,数据有几个属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'数据的维度: 行 %s , 列 %s'</span> % (dataset.shape))</span><br><span class="line"><span class="comment">#&gt;&gt;&gt;数据的维度: 行 150 , 列 5</span></span><br></pre></td></tr></table></figure><h6 id="2-参看数据本身"><a href="#2-参看数据本身" class="headerlink" title="2.参看数据本身"></a>2.参看数据本身</h6><p>直观的看到数据的特征,数据的类型,以及大概的数据分布范围</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(dataset.head(<span class="number">5</span>))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">   separ-length  separ-width     ...       petal-width        <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class">0           5.1          3.5     ...               0.2  <span class="title">Iris</span>-<span class="title">setosa</span></span></span><br><span class="line"><span class="class">1           4.9          3.0     ...               0.2  <span class="title">Iris</span>-<span class="title">setosa</span></span></span><br><span class="line"><span class="class">2           4.7          3.2     ...               0.2  <span class="title">Iris</span>-<span class="title">setosa</span></span></span><br><span class="line"><span class="class">3           4.6          3.1     ...               0.2  <span class="title">Iris</span>-<span class="title">setosa</span></span></span><br><span class="line"><span class="class">4           5.0          3.6     ...               0.2  <span class="title">Iris</span>-<span class="title">setosa</span></span></span><br></pre></td></tr></table></figure><h6 id="3-统计描述数据"><a href="#3-统计描述数据" class="headerlink" title="3.统计描述数据"></a>3.统计描述数据</h6><p>数据特征的统计描述信息包括数据的<code>行数</code>、<code>中位值</code>、<code>最大值</code>、<code>最小值</code>、<code>均值</code>、<code>四分位值</code>等统计数据信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(dataset.describe())</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">       separ-length  separ-width  petal-length  petal-width</span><br><span class="line">count    <span class="number">150.000000</span>   <span class="number">150.000000</span>    <span class="number">150.000000</span>   <span class="number">150.000000</span></span><br><span class="line">mean       <span class="number">5.843333</span>     <span class="number">3.054000</span>      <span class="number">3.758667</span>     <span class="number">1.198667</span></span><br><span class="line">std        <span class="number">0.828066</span>     <span class="number">0.433594</span>      <span class="number">1.764420</span>     <span class="number">0.763161</span></span><br><span class="line">min        <span class="number">4.300000</span>     <span class="number">2.000000</span>      <span class="number">1.000000</span>     <span class="number">0.100000</span></span><br><span class="line"><span class="number">25</span>%        <span class="number">5.100000</span>     <span class="number">2.800000</span>      <span class="number">1.600000</span>     <span class="number">0.300000</span></span><br><span class="line"><span class="number">50</span>%        <span class="number">5.800000</span>     <span class="number">3.000000</span>      <span class="number">4.350000</span>     <span class="number">1.300000</span></span><br><span class="line"><span class="number">75</span>%        <span class="number">6.400000</span>     <span class="number">3.300000</span>      <span class="number">5.100000</span>     <span class="number">1.800000</span></span><br><span class="line">max        <span class="number">7.900000</span>     <span class="number">4.400000</span>      <span class="number">6.900000</span>     <span class="number">2.500000</span></span><br></pre></td></tr></table></figure><h6 id="4-数据分类分布"><a href="#4-数据分类分布" class="headerlink" title="4.数据分类分布"></a>4.数据分类分布</h6><p>了解数据在不同分类的分布情况..==&gt;每个分类数据量的绝对数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(dataset.groupby(<span class="string">'class'</span>).size())</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">Iris</span>-<span class="title">setosa</span>        50</span></span><br><span class="line"><span class="class"><span class="title">Iris</span>-<span class="title">versicolor</span>    50</span></span><br><span class="line"><span class="class"><span class="title">Iris</span>-<span class="title">virginica</span>     50</span></span><br><span class="line"><span class="class"><span class="title">dtype</span>:</span> int64</span><br></pre></td></tr></table></figure><p>▲ 如果数据分布不平衡,可能会影响到模型的准确性,..==&gt;不平衡时,需要对数据进行调整,方法有:</p><ul><li>扩大数据样本<ul><li>通常容易被忽略的选择…但往往找到更大的数据集就有可能挖掘出更平衡的方面提高算法准确度</li></ul></li><li>数据的重新抽样<ul><li>过抽样(复制少数类样本)..数据少时考虑</li><li>欠抽样(删除多数类样本)..数据多时考虑</li></ul></li><li>尝试生成人工样本<ul><li>从少数类的实例中随机抽样特征属性,生成更多数据</li></ul></li><li>异常检测和变化检测<ul><li>尝试从不同观点思考,异常检测是对罕见事件的检测,将小类作为异常值类</li></ul></li></ul><h4 id="3-数据可视化"><a href="#3-数据可视化" class="headerlink" title="3.数据可视化"></a>3.数据可视化</h4><blockquote><p>单变量图表: 理解每一个特征属性</p><p>多变量图表: 理解不同特征属性之间的关系</p></blockquote><h5 id="单变量图"><a href="#单变量图" class="headerlink" title="单变量图:"></a>单变量图:</h5><blockquote><p>箱线图: 一种用作显示一组数据分散情况资料的统计图。因形状如箱子而得名。</p><p>主要用于反映原始数据分布的特征，还可以进行多组数据分布特征的比 较。箱线图的绘制方法是：先找出一组数据的最大值、最小值、中位数和两个四分位数；然后， 连接两个四分位数画出箱子；再将最大值和最小值与箱子相连接，中位数在箱子中间。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#箱线图 , 因为每个特征属性都是数字 , 所以 用箱线图展示 属性与中位值的离散程度</span></span><br><span class="line">dataset.plot(kind=<span class="string">'box'</span>,subplots = <span class="keyword">True</span>,layout = (<span class="number">2</span>,<span class="number">2</span>) , sharex = <span class="keyword">False</span> , sharey = <span class="keyword">False</span>)</span><br><span class="line"><span class="comment"># 参数说明 : box箱线 , subplots 允许多个子图, layout 布局为2*2 , sharex.sharey 不共享x,y</span></span><br><span class="line">pyplot.show()</span><br><span class="line"><span class="comment">#---</span></span><br><span class="line"><span class="comment">#直方图 , x轴为值 , y轴为数量</span></span><br><span class="line">dataset.hist()</span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><h5 id="多变量图"><a href="#多变量图" class="headerlink" title="多变量图:"></a>多变量图:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas.plotting <span class="keyword">import</span> scatter_matrix</span><br><span class="line"><span class="comment">#散点矩阵图</span></span><br><span class="line">scatter_matrix(dataset)</span><br><span class="line">pyplot.show()</span><br><span class="line"><span class="comment">#pyplot.savefig("scatter_matrix.png")</span></span><br></pre></td></tr></table></figure><p><img src="/2018/11/23/机器学习——Python实践-笔记/scatter_matrix.png" alt="scatter_matrix"></p><h4 id="4-评估算法"><a href="#4-评估算法" class="headerlink" title="4.评估算法"></a>4.评估算法</h4><blockquote><ul><li>分离出评估数据集</li><li>采用<strong>10折交叉验证</strong>来评估算法模型</li><li>生成6个不同的模型来预测新数据</li><li>选择最优模型</li></ul></blockquote><h5 id="1-分离出评估数据集"><a href="#1-分离出评估数据集" class="headerlink" title="1.分离出评估数据集"></a>1.分离出评估数据集</h5><p>:heart:要想知道算法模型对真是数据的准确度,所以保留一部分数据来评估算法模型.</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">array = dataset.values</span><br><span class="line">X = array[:,<span class="number">0</span>:<span class="number">4</span>]    <span class="comment">#除了最后的class类别</span></span><br><span class="line">Y = array[:,<span class="number">4</span>]      <span class="comment">#类别,目标</span></span><br><span class="line">validation_size = <span class="number">0.2</span>   <span class="comment">#验证比例</span></span><br><span class="line">seed = <span class="number">7</span>                <span class="comment">#随机种子</span></span><br><span class="line">X_train , X_validation , Y_train , Y_validation = \</span><br><span class="line">    train_test_split(X,Y,test_size=validation_size,random_state=seed)</span><br></pre></td></tr></table></figure><h5 id="2-评估模式"><a href="#2-评估模式" class="headerlink" title="2.评估模式"></a>2.评估模式</h5><p>采用10折交叉验证来分离训练数据集 : </p><blockquote><p> 随机将数据分成10份,9份用来训练模型,1份用来评估算法</p></blockquote><h5 id="3-创建模型"><a href="#3-创建模型" class="headerlink" title="3.创建模型"></a>3.创建模型</h5><p><strong>线性</strong></p><ul><li>线性回归(LR)</li><li>线性判别分析(LDA)</li></ul><p><strong>非线性</strong></p><ul><li>K近邻(KNN)</li><li>分类与回归树(CART)</li><li>贝叶斯分类器(NB)</li><li>支持向量机(SVM)</li></ul><p>▲ 在每次对算法进行评估前都会重新设置随机数种子,以保证每次对算法的评估都是用相同的数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression,LinearRegression <span class="comment">#LR</span></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier                      <span class="comment">#CART</span></span><br><span class="line"><span class="keyword">from</span> sklearn.discriminant_analysis <span class="keyword">import</span> LinearDiscriminantAnalysis <span class="comment">#LDA</span></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB                           <span class="comment">#NB</span></span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier                   <span class="comment">#KNN</span></span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC                                          <span class="comment">#SVM</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold,cross_val_score</span><br><span class="line">models = &#123;&#125;</span><br><span class="line">models[<span class="string">'LR'</span>] = LogisticRegression()</span><br><span class="line">models[<span class="string">'LDA'</span>] = LinearDiscriminantAnalysis()</span><br><span class="line">models[<span class="string">'CART'</span>] = DecisionTreeClassifier()</span><br><span class="line">models[<span class="string">'NB'</span>] = GaussianNB()</span><br><span class="line">models[<span class="string">'KNN'</span>] = KNeighborsClassifier()</span><br><span class="line">models[<span class="string">'SVM'</span>] = SVC()</span><br><span class="line"><span class="comment">#评估算法</span></span><br><span class="line">resutls  = []</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> models:</span><br><span class="line">    kfold = KFold(n_splits=<span class="number">10</span>,random_state=seed)</span><br><span class="line">    cv_result  = cross_val_score(models[key],X_train,Y_train,cv = kfold , scoring = <span class="string">'accuracy'</span>)</span><br><span class="line">    <span class="comment">#cross_val_score将交叉验证的整个过程连接起来，不用再进行手动的分割数据, cv参数用于规定将原始数据分成多少份</span></span><br><span class="line">    resutls.append(cv_result)</span><br><span class="line">    print(<span class="string">"%s: %f (%f)"</span> % (key,cv_result.mean(),cv_result.std()))<span class="comment">#均值,标准差</span></span><br></pre></td></tr></table></figure><h5 id="4-选择最优模型"><a href="#4-选择最优模型" class="headerlink" title="4.选择最优模型"></a>4.选择最优模型</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="selector-tag">LR</span>: 0<span class="selector-class">.966667</span> (0<span class="selector-class">.040825</span>)</span><br><span class="line"><span class="selector-tag">LDA</span>: 0<span class="selector-class">.975000</span> (0<span class="selector-class">.038188</span>)</span><br><span class="line"><span class="selector-tag">CART</span>: 0<span class="selector-class">.966667</span> (0<span class="selector-class">.040825</span>)</span><br><span class="line"><span class="selector-tag">NB</span>: 0<span class="selector-class">.975000</span> (0<span class="selector-class">.053359</span>)</span><br><span class="line"><span class="selector-tag">KNN</span>: 0<span class="selector-class">.983333</span> (0<span class="selector-class">.033333</span>)</span><br><span class="line"><span class="selector-tag">SVM</span>: 0<span class="selector-class">.991667</span> (0<span class="selector-class">.025000</span>)</span><br></pre></td></tr></table></figure><h5 id="为什么使用-10折交叉验证"><a href="#为什么使用-10折交叉验证" class="headerlink" title="为什么使用 10折交叉验证?"></a>为什么使用 10折交叉验证?</h5><p>进行模型验证的一个重要目的是要选出一个最合适的模型，对于监督学习而言，我们希望模型对于未知数据的<u>泛化能力</u>强，所以就需要模型验证这一过程来体现不同的模型对于未知数据的表现效果。</p><h6 id="训练准确度-gt-测试准确度"><a href="#训练准确度-gt-测试准确度" class="headerlink" title="训练准确度==&gt;测试准确度"></a>训练准确度==&gt;测试准确度</h6><p>最先我们用<strong>训练准确度</strong>（用全部数据进行训练和测试）来衡量模型的表现，这种方法会导致模型<u>过拟合(方差大)</u>；===&gt;&gt;为了解决这一问题，我们将所有数据分成训练集和测试集两部分，我们用<code>训练集</code>进行模型训练，得到的模型再用<code>测试集</code>来衡量模型的预测表现能力，这种度量方式叫<strong>测试准确度</strong>，这种方式可以有效避免过拟合。</p><h6 id="测试准确度-gt-10折交叉验证"><a href="#测试准确度-gt-10折交叉验证" class="headerlink" title="测试准确度==&gt;10折交叉验证"></a>测试准确度==&gt;10折交叉验证</h6><p><strong>测试准确度的一个缺点</strong>是其样本准确度是一个<strong>高方差估计</strong>（high variance estimate）, 所以该样本准确度会依赖不同的测试集，其表现效果不尽相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"random_state is "</span>, i,<span class="string">", and accuracy score is:"</span></span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=i)</span><br><span class="line"></span><br><span class="line">    knn = KNeighborsClassifier(n_neighbors=<span class="number">5</span>)</span><br><span class="line">    knn.fit(X_train, y_train)</span><br><span class="line">    y_pred = knn.predict(X_test)</span><br><span class="line">    <span class="keyword">print</span> metrics.accuracy_score(y_test, y_pred)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">random_state <span class="keyword">is</span>  <span class="number">1</span> , <span class="keyword">and</span> accuracy score <span class="keyword">is</span>:<span class="number">1.0</span></span><br><span class="line">random_state <span class="keyword">is</span>  <span class="number">2</span> , <span class="keyword">and</span> accuracy score <span class="keyword">is</span>:<span class="number">1.0</span></span><br><span class="line">random_state <span class="keyword">is</span>  <span class="number">3</span> , <span class="keyword">and</span> accuracy score <span class="keyword">is</span>:<span class="number">0.947368421053</span></span><br><span class="line">random_state <span class="keyword">is</span>  <span class="number">4</span> , <span class="keyword">and</span> accuracy score <span class="keyword">is</span>:<span class="number">0.973684210526</span></span><br></pre></td></tr></table></figure><p>上面的测试准确率可以看出，<u>不同的训练集、测试集分割的方法</u>导致其准确率不同，而交叉验证的基本思想是：<u>1.将数据集进行一系列分割，生成一组不同的训练测试集</u>，<u>2.然后分别训练模型并计算测试准确率</u>，<u>3.最后对结果进行<strong>平均处理</strong></u>。这样来有效降低测试准确率的差异。</p><h5 id="K折交叉验证"><a href="#K折交叉验证" class="headerlink" title="K折交叉验证:"></a>K折交叉验证:</h5><ol><li>将数据集平均分割成K个等份子集</li><li>使用1份数据(子集)作为测试数据，其余(K-1)份作为训练数据</li><li>计算测试准确率</li><li>使用不同的测试集，重复2、3步骤</li><li>对测试准确率做<strong>平均</strong>，作为对未知数据预测准确率的估计  ==&gt; <code>cross_val_score.mean()</code></li></ol><blockquote><p>不同的训练集、测试集分割的方法导致其准确率不同，而交叉验证的基本思想是：将数据集进行一系列分割，生成一组不同的训练测试集，然后分别训练模型并计算测试准确率，最后对结果进行平均处理。这样来有效降低测试准确率的差异。</p></blockquote><p><img src="/2018/11/23/机器学习——Python实践-笔记/数学概念\KFold.png" alt="KFold"></p><p>来自周志华&lt;&lt;机器学习&gt;&gt;:</p><p><img src="/2018/11/23/机器学习——Python实践-笔记/数学概念\K交叉验证法.jpg" alt="K交叉验证法"></p><h6 id="分割方法"><a href="#分割方法" class="headerlink" title="分割方法"></a>分割方法</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面代码演示了K-fold交叉验证是如何进行数据分割的</span></span><br><span class="line"><span class="comment"># simulate splitting a dataset of 25 observations into 5 folds</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> KFold</span><br><span class="line">kf = KFold(<span class="number">25</span>, n_folds=<span class="number">5</span>, shuffle=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cv_result  = cross_val_score(models[key],X_train,Y_train,cv = <span class="number">10</span> , scoring = <span class="string">'accuracy'</span>)</span><br><span class="line"><span class="comment">#cross_val_score将交叉验证的整个过程连接起来，不用再进行手动的分割数据, cv参数用于规定将原始数据分成多少份</span></span><br></pre></td></tr></table></figure><h5 id="5-实施预测"><a href="#5-实施预测" class="headerlink" title="5.实施预测"></a>5.实施预测</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用评估数据集评估算法</span></span><br><span class="line">svm = SVC()</span><br><span class="line">svm.fit(X = X_train ,y = Y_train)<span class="comment">#参数为 X , y</span></span><br><span class="line">predictions = svm.predict(X_validation)</span><br><span class="line">print(accuracy_score(Y_validation,predictions))<span class="comment">#测试集结果 与 预测结果 相比</span></span><br><span class="line">print(confusion_matrix(Y_validation,predictions))</span><br><span class="line">print(classification_report(Y_validation,predictions))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">0.9333333333333333</span></span><br><span class="line">[[ <span class="number">7</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">10</span>  <span class="number">2</span>]<span class="comment">#混淆矩阵只出现了两个错误,2</span></span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span> <span class="number">11</span>]]</span><br><span class="line">                 precision(精确度)    recall(召回率)  f1-score(F1值)   support(总和)</span><br><span class="line"></span><br><span class="line">    Iris-setosa       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">7</span></span><br><span class="line">Iris-versicolor       <span class="number">1.00</span>      <span class="number">0.83</span>      <span class="number">0.91</span>        <span class="number">12</span></span><br><span class="line"> Iris-virginica       <span class="number">0.85</span>      <span class="number">1.00</span>      <span class="number">0.92</span>        <span class="number">11</span></span><br><span class="line"></span><br><span class="line">    avg / total       <span class="number">0.94</span>      <span class="number">0.93</span>      <span class="number">0.93</span>        <span class="number">30</span></span><br></pre></td></tr></table></figure><h6 id="召回率-Recall-Rate-也叫查全率"><a href="#召回率-Recall-Rate-也叫查全率" class="headerlink" title="召回率(Recall Rate,也叫查全率)"></a>召回率(Recall Rate,也叫<a href="https://baike.baidu.com/item/%E6%9F%A5%E5%85%A8%E7%8E%87" target="_blank" rel="noopener">查全率</a>)</h6><blockquote><p>是<u>检索出的<strong>相关文档数</strong></u>和<u>文档库中所有的<strong>相关</strong>文档数</u>的比率，衡量的是检索系统的<a href="https://baike.baidu.com/item/%E6%9F%A5%E5%85%A8%E7%8E%87" target="_blank" rel="noopener">查全率</a>；</p></blockquote><h6 id="精度-Precise"><a href="#精度-Precise" class="headerlink" title="精度(Precise)"></a>精度(Precise)</h6><blockquote><p>是<u>检索出的<strong>相关文档数</strong></u>与<u>检索出的文档<strong>总数</strong></u>的比率，衡量的是<a href="https://baike.baidu.com/item/%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">检索系统</a>的<a href="https://baike.baidu.com/item/%E6%9F%A5%E5%87%86%E7%8E%87" target="_blank" rel="noopener">查准率</a>。</p></blockquote><ul><li><p>TP: 预测为正，实际为正        (第一个是实际T或F,第二个是预测P或N)</p></li><li><p>FP: 预测为正，实际为负</p></li><li><p>TN:预测为负，实际为负</p></li><li><p>FN: 预测为负，实际为正</p></li></ul><p>精确率、准确率：<code>Accuracy=(TP+TN)/(TP+TN+FN+FP)</code></p><p>//精准率、查准率：<code>P = TP/ (TP+FP)</code></p><p>召回率、查全率：<code>R = TP/ (TP+FN)</code></p><p><code>F1-score</code>: <code>2*TP/(2*TP + FP + FN)</code></p><p>◆. 精确度是“搜索结果有多大用处”，而召回是“结果如何完整”。</p><hr><h6 id="F1分数"><a href="#F1分数" class="headerlink" title="F1分数:"></a>F1分数:</h6><blockquote><p>概述 : 统计学中用来衡量<strong>二分类模型精确度</strong>的一种指标。它同时兼顾了分类模型的<a href="https://baike.baidu.com/item/%E5%87%86%E7%A1%AE%E7%8E%87/5165407" target="_blank" rel="noopener">准确率</a>和<a href="https://baike.baidu.com/item/%E5%8F%AC%E5%9B%9E%E7%8E%87/560642" target="_blank" rel="noopener">召回率</a>。F1分数可以看作是模型<a href="https://baike.baidu.com/item/%E5%87%86%E7%A1%AE%E7%8E%87/5165407" target="_blank" rel="noopener">准确率</a>和<a href="https://baike.baidu.com/item/%E5%8F%AC%E5%9B%9E%E7%8E%87/560642" target="_blank" rel="noopener">召回率</a>的一种加权平均，它的最大值是1，最小值是0。</p></blockquote><p>人们通常使用准确率和召回率这两个指标，来评价<strong>二分类模型</strong>的分析效果。</p><p>但是当这两个指标发生冲突时，我们很难在模型之间进行比较。比如，我们有如下两个模型A、B，A模型的召回率高于B模型，但是B模型的准确率高于A模型，A和B这两个模型的综合性能，哪一个更优呢？</p><table><thead><tr><th></th><th>准确率</th><th>召回率</th></tr></thead><tbody><tr><td>A</td><td>80%</td><td>90%</td></tr><tr><td>B</td><td>90%</td><td>80%</td></tr></tbody></table><p>为了解决这个问题，人们提出了<img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D19/sign=7b67c59895dda144de0968bbb3b7de21/c2cec3fdfc039245a13880848594a4c27c1e25af.jpg" alt="img"> 分数。<img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D19/sign=7b67c59895dda144de0968bbb3b7de21/c2cec3fdfc039245a13880848594a4c27c1e25af.jpg" alt="img">的物理意义就是将准确率和召回率这两个分值合并为一个分值，在合并的过程中，召回率的权重是准确率的 <img src="https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D17/sign=fad8d8ab03e93901520289397aec2ef2/38dbb6fd5266d0168f25fea3952bd40735fa3578.jpg" alt="img"> 倍。<img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D15/sign=9dae0b648fb1cb133a693816dc540bf7/b64543a98226cffcb711df39bb014a90f603ea06.jpg" alt="img"> 分数认为召回率和准确率<strong>同等重要</strong>， <img src="https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D16/sign=aaaaf6777ed98d1072d40837203fd065/50da81cb39dbb6fdd61185ad0b24ab18962b37f6.jpg" alt="img"> 分数认为<strong>召回率的重要程度是准确率的2倍</strong>，而 <img src="https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D25/sign=71816368d739b60049ce08b2e850cfbe/94cad1c8a786c9171b7132b2cb3d70cf3ac757ce.jpg" alt="img"> 分数认为<strong>召回率的重要程度是准确率的一半</strong>。</p><p><img src="/2018/11/23/机器学习——Python实践-笔记/数学概念\F_beta.jpg" alt="F_beta"></p><p><img src="/2018/11/23/机器学习——Python实践-笔记/数学概念\F1_score.gif" alt="F1_score"></p><p>▲ 如何计算<code>Precise</code>、<code>Recall</code>、<code>F1-score</code>见博客<a href="https://blog.csdn.net/akadiao/article/details/78788864" target="_blank" rel="noopener">https://blog.csdn.net/akadiao/article/details/78788864</a></p><hr><h3 id="Confusion-martrix-混淆矩阵"><a href="#Confusion-martrix-混淆矩阵" class="headerlink" title="Confusion_martrix(混淆矩阵)"></a>Confusion_martrix(混淆矩阵)</h3><p>混淆矩阵: 一种特定的矩阵用来呈现算法性能的可视化效果，通常是监督学习（非监督学习，通常用匹配矩阵：matching matrix）</p><blockquote><p>其每一列代表预测值，每一行代表的是实际的类别。这个名字来源于它可以非常容易的表明多个类别是否有混淆（也就是一个class被预测成另一个class）。</p></blockquote><h4 id="Example样例说明"><a href="#Example样例说明" class="headerlink" title="Example样例说明:"></a>Example样例说明:</h4><p>假设有一个用来对<code>猫（cats）、狗（dogs）、兔子（rabbits）</code>进行分类的系统，混淆矩阵就是为了进一步分析性能而对该算法测试结果做出的总结。假设总共有 <strong>27</strong> 只动物：8只猫， 6条狗， 13只兔子。结果的混淆矩阵如下图：</p><p><img src="/2018/11/23/机器学习——Python实践-笔记/数学概念\confusion_matrix.png" alt="confusion_matrix"></p><p>在这个混淆矩阵中，实际有 8只猫，但是系统将其中3只预测成了狗；对于 6条狗，其中有 1条被预测成了兔子，2条被预测成了猫。从混淆矩阵中我们可以看出系统对于区分猫和狗存在一些问题，但是<strong>区分兔子和其他动物的效果还是不错的</strong>。<strong><u>所有正确的预测结果都在对角线上</u></strong>，所以从混淆矩阵中可以很方便直观的看出哪里有错误，因为他们呈现在对角线外面。<em>**</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;机器学习——Python实践&quot;&gt;&lt;a href=&quot;#机器学习——Python实践&quot; class=&quot;headerlink&quot; title=&quot;机器学习——Python实践&quot;&gt;&lt;/a&gt;机器学习——Python实践&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Numpy: &lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Pycharm里无法查看Sqlite数据表</title>
    <link href="https://nymrli.top/2018/11/23/Pycharm%E9%87%8C%E6%97%A0%E6%B3%95%E6%9F%A5%E7%9C%8BSqlite%E6%95%B0%E6%8D%AE%E8%A1%A8/"/>
    <id>https://nymrli.top/2018/11/23/Pycharm里无法查看Sqlite数据表/</id>
    <published>2018-11-23T07:27:38.000Z</published>
    <updated>2018-11-23T07:32:06.720Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pycharm里无法查看Sqlite数据表"><a href="#Pycharm里无法查看Sqlite数据表" class="headerlink" title="Pycharm里无法查看Sqlite数据表"></a>Pycharm里无法查看Sqlite数据表</h3><p>听说Pycharm可以直接看数据库,于是试了试,发现无法读取sqlite数据库的内容…于是发现下载相应的驱动.如图</p><p><img src="/2018/11/23/Pycharm里无法查看Sqlite数据表/hexo\source\_posts\Pycharm里无法查看Sqlite数据表\fail.jpg" alt="fail"></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h4><h5 id="一-打开右侧的Database选项卡-选择Data-Source的Sqlite"><a href="#一-打开右侧的Database选项卡-选择Data-Source的Sqlite" class="headerlink" title="一.打开右侧的Database选项卡,选择Data Source的Sqlite"></a>一.打开右侧的<code>Database</code>选项卡,选择<code>Data Source</code>的Sqlite</h5><p><img src="/2018/11/23/Pycharm里无法查看Sqlite数据表/howto.jpg" alt="howto"></p><h5 id="二-点击黄色三角Download下载相应的驱动软件"><a href="#二-点击黄色三角Download下载相应的驱动软件" class="headerlink" title="二.点击黄色三角Download下载相应的驱动软件"></a>二.点击黄色三角<code>Download</code>下载相应的驱动软件</h5><p><img src="/2018/11/23/Pycharm里无法查看Sqlite数据表/hexo\source\_posts\Pycharm里无法查看Sqlite数据表\issue.jpg" alt="issue"></p><h5 id="三-安装完成-正常使用"><a href="#三-安装完成-正常使用" class="headerlink" title="三.安装完成,正常使用"></a>三.安装完成,正常使用</h5><p><img src="/2018/11/23/Pycharm里无法查看Sqlite数据表/success.jpg" alt="success"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Pycharm里无法查看Sqlite数据表&quot;&gt;&lt;a href=&quot;#Pycharm里无法查看Sqlite数据表&quot; class=&quot;headerlink&quot; title=&quot;Pycharm里无法查看Sqlite数据表&quot;&gt;&lt;/a&gt;Pycharm里无法查看Sqlite数据表&lt;/
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="数据库" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>flask-sqlalchemy使用与sqlalchemy对比</title>
    <link href="https://nymrli.top/2018/11/23/%C2%96flask-sqlalchemy%E4%BD%BF%E7%94%A8%E4%B8%8Esqlalchemy%E5%AF%B9%E6%AF%94/"/>
    <id>https://nymrli.top/2018/11/23/flask-sqlalchemy使用与sqlalchemy对比/</id>
    <published>2018-11-23T07:22:48.000Z</published>
    <updated>2018-12-06T03:07:03.384Z</updated>
    
    <content type="html"><![CDATA[<h3 id="flask-sqlalchemy使用与sqlalchemy对比"><a href="#flask-sqlalchemy使用与sqlalchemy对比" class="headerlink" title="flask-sqlalchemy使用与sqlalchemy对比"></a>flask-sqlalchemy使用与sqlalchemy对比</h3><h4 id="flask-sqlalchemy"><a href="#flask-sqlalchemy" class="headerlink" title="flask-sqlalchemy"></a>flask-sqlalchemy</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MGroup</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'Group'</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>, autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">50</span>),nullable=<span class="keyword">False</span>,unique = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MUserinfo</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'Userinfo'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    stuid = db.Column(db.String(<span class="number">15</span>),unique = <span class="keyword">True</span> ,nullable=<span class="keyword">False</span>)</span><br><span class="line">    subject = db.Column(db.String(<span class="number">50</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">10</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    qq = db.Column(db.Integer,nullable = <span class="keyword">False</span>)</span><br><span class="line">    dirction = db.Column(db.String(<span class="number">20</span>),db.ForeignKey(<span class="string">'Group.name'</span>),default=<span class="string">'3D仿真组'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mmessage</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'Contact'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">10</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">20</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    subject = db.Column(db.String(<span class="number">20</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    message = db.Column(db.Text, nullable=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h3 id="sqlalchemy"><a href="#sqlalchemy" class="headerlink" title="sqlalchemy"></a>sqlalchemy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlalchemy</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base    </span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(sqlalchemy.__version__)</span><br><span class="line">engine = create_engine(<span class="string">'sqlite:///test.db'</span>,echo = <span class="keyword">True</span>)    <span class="comment">#将数据库执行的语句打印出来</span></span><br><span class="line"></span><br><span class="line">Base = declarative_base() <span class="comment">#声明一个基类实例</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'User'</span><span class="comment">#表的名称</span></span><br><span class="line">    <span class="comment">#类的属性,而不是在析构函数中定义的原因是,Base类中有构造函数</span></span><br><span class="line">    Uid = sqlalchemy.Column(sqlalchemy.Integer,autoincrement=<span class="keyword">True</span>,primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = sqlalchemy.Column(sqlalchemy.String(<span class="number">20</span>),nullable=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;Uid&gt;:&#123;&#125;,&lt;name&gt;:&#123;&#125;"</span>.format(self.Uid,self.name)</span><br><span class="line"></span><br><span class="line">Base.metadata.create_all(engine)    <span class="comment">#创建数据库表,sqlalchemy会自动覆盖已存在的表</span></span><br></pre></td></tr></table></figure><hr><table><thead><tr><th></th><th style="text-align:center">flask-sqlalchemy</th><th>sqlalchemy</th></tr></thead><tbody><tr><td>表继承的类</td><td style="text-align:center">db = SQLAlchemy(app),db.Model</td><td>Base = declarative_base()</td></tr><tr><td></td><td style="text-align:center">都是从工厂函数中声明的一个实例类,作为声明性类基类</td><td></td></tr><tr><td>链接数据库函数</td><td style="text-align:center"></td><td>create_engine()</td></tr><tr><td>创建表函数</td><td style="text-align:center">db.create_all()</td><td>Base.metadata.create_all(engine)</td></tr><tr><td>表单字段</td><td style="text-align:center">db.Column()</td><td>sqlalchemy.Column()</td></tr><tr><td>字段类型</td><td style="text-align:center">db.Integer</td><td>sqlalchemy.Integer</td></tr><tr><td>插入数据</td><td style="text-align:center">msg =  Mmessage(name=data.get(‘name’),email=data.get(‘email’),                 subject=data.get(‘subject’),message=data.get(‘message’)) db.session.add(msg) db.session.commit()</td><td>user = User(name=’mrli’) Session = sessionmaker(bind=engine) session = Session() session.add(user) session.commit()</td></tr><tr><td>查询</td><td style="text-align:center"><code>Item.query.filter(Item.table == json_data.get(&#39;table&#39;)).first()</code></td><td><code>user = session.query(User).filter_by(name=&#39;mrli&#39;).first()</code></td></tr><tr><td>backref</td><td style="text-align:center"></td><td></td></tr><tr><td></td><td style="text-align:center"></td><td></td></tr><tr><td>文本输出</td><td style="text-align:center"></td><td><code>def __repr__(self):</code> （与django的<code>__str__</code>不同）</td></tr></tbody></table><h4 id="sqlalchemy-1"><a href="#sqlalchemy-1" class="headerlink" title="sqlalchemy:"></a>sqlalchemy:</h4><p>查:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">user = session.query(User).all()</span><br><span class="line">user = session.query(User).filter_by(name=<span class="string">'mrli'</span>).first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> user = session.query(User).order_by(User.id):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in_</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> session.query(User).filter(User.name.in_([<span class="string">'nymrli'</span>,<span class="string">'cl'</span>])):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;Uid&gt;:<span class="number">1</span>,&lt;name&gt;:mrli</span><br><span class="line">&gt;&gt;&gt;&gt; &lt;Uid&gt;:<span class="number">3</span>,&lt;name&gt;:qsy</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> session.query(~User.name.in_([<span class="string">'nymrli'</span>,<span class="string">'cl'</span>])):</span><br><span class="line">    print(row)</span><br><span class="line">    </span><br><span class="line">&gt;&gt;&gt;(<span class="keyword">True</span>,)</span><br><span class="line">&gt;&gt;&gt;(<span class="keyword">False</span>,)</span><br><span class="line">&gt;&gt;&gt;(<span class="keyword">True</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ~ in</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> session.query(User).filter(~User.name.in_([<span class="string">'nymrli'</span>,<span class="string">'cl'</span>])):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计数</span></span><br><span class="line">user = session.query(User).filter(User.name==<span class="string">'mrli'</span>).count()</span><br><span class="line"><span class="comment">#▲.注意filter()的==与filter_by()的=的使用区别</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># and_  or_</span></span><br></pre></td></tr></table></figure><h4 id="sqlalchemy-core-核心层-更接近SQL语句"><a href="#sqlalchemy-core-核心层-更接近SQL语句" class="headerlink" title="sqlalchemy core (核心层,更接近SQL语句)"></a>sqlalchemy core (核心层,更接近SQL语句)</h4><blockquote><p> 代码很接近、形似SQL原生语句,可以写sqlalchemy的SQL方言(dialect)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlalchemy</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Table,MetaData</span><br><span class="line"></span><br><span class="line">print(sqlalchemy.__version__)</span><br><span class="line">engine = create_engine(<span class="string">'sqlite:///test.db'</span>,echo = <span class="keyword">True</span>)    <span class="comment">#将数据库执行的语句打印出来</span></span><br><span class="line"></span><br><span class="line">metadata = MetaData()</span><br><span class="line"></span><br><span class="line">users = Table( <span class="string">'users'</span>,metadata,</span><br><span class="line">    sqlalchemy.Column(<span class="string">'id'</span>,sqlalchemy.Integer,primary_key=<span class="keyword">True</span>),</span><br><span class="line">    sqlalchemy.Column(<span class="string">'name'</span>,sqlalchemy.String)</span><br><span class="line">)</span><br><span class="line">addresses = Table( <span class="string">'addresses'</span> , metadata,</span><br><span class="line">   sqlalchemy.Column(<span class="string">'id'</span>, sqlalchemy.Integer, primary_key=<span class="keyword">True</span>),</span><br><span class="line">   sqlalchemy.Column(<span class="string">'user_id'</span>, <span class="keyword">None</span>,primary_key(<span class="string">'users.isd'</span>)),</span><br><span class="line">   sqlalchemy.Column(<span class="string">'email_address'</span>, sqlalchemy.String, nullable=<span class="keyword">False</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line">users = Table( <span class="string">'users'</span>,metadata,</span><br><span class="line">    sqlalchemy.Column(<span class="string">'id'</span>,sqlalchemy.Integer,primary_key=<span class="keyword">True</span>),</span><br><span class="line">    sqlalchemy.Column(<span class="string">'name'</span>,sqlalchemy.String)</span><br><span class="line">)</span><br><span class="line">addresses = Table( <span class="string">'addresses'</span> , metadata,</span><br><span class="line">   sqlalchemy.Column(<span class="string">'id'</span>, sqlalchemy.Integer, primary_key=<span class="keyword">True</span>),</span><br><span class="line">   sqlalchemy.Column(<span class="string">'user_id'</span>, <span class="keyword">None</span>,primary_key(<span class="string">'users.id'</span>)),</span><br><span class="line">   sqlalchemy.Column(<span class="string">'email_address'</span>, sqlalchemy.String, nullable=<span class="keyword">False</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">metadata.create_all(engine)</span><br><span class="line">conn = engine.connect()</span><br><span class="line"></span><br><span class="line">conn.execute(users.insert(),[</span><br><span class="line">    dict(name=<span class="string">'nymrli'</span>),</span><br><span class="line">    dict(name=<span class="string">'cl'</span>)</span><br><span class="line">])</span><br><span class="line">conn.execute(users.insert(),[</span><br><span class="line">    dict(user_id=<span class="number">1</span>,email_address=<span class="string">'1063052964@qq.com'</span>),</span><br><span class="line">    dict(user_id=<span class="number">1</span>,email_address=<span class="string">'2042423232@qq.com'</span>),</span><br><span class="line">    dict(user_id=<span class="number">2</span>, email_address=<span class="string">'1063052923@qq.com'</span>),</span><br><span class="line">    dict(user_id=<span class="number">2</span>, email_address=<span class="string">'2042423232@qq.com'</span>),</span><br><span class="line">])</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> select</span><br><span class="line">s = select([users])</span><br><span class="line">result = conn.execute(s)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s = select([users.addresses]).where(users.c.id == addresses.c.user_id)</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line">s = text(</span><br><span class="line">    <span class="string">"SELECT user.name || ',' || addresses.email_address AS title "</span> </span><br><span class="line">        <span class="string">"FROM users.addresses "</span></span><br><span class="line">        <span class="string">"WHERE users.id == addresses.user_id "</span> </span><br><span class="line">        <span class="string">"AND users.name BETWEEN :x AND :y "</span> </span><br><span class="line">        <span class="string">"AND (addresses.email_address LIKE :e1 "</span> </span><br><span class="line">        <span class="string">"OR addresses.email_address LIKE :e2)"</span></span><br><span class="line">)</span><br><span class="line">print(conn.execute(s,x=<span class="string">'m'</span>,y=<span class="string">'z'</span>,e1=<span class="string">"%@aoq.com"</span>,e2=<span class="string">'@qwe.com'</span>).fetchall())</span><br></pre></td></tr></table></figure><blockquote><p>注意下最后text()里面写的内容””引号最后要有空格,与下面的语句分割开</p></blockquote><h6 id="无空格的样子"><a href="#无空格的样子" class="headerlink" title="无空格的样子:"></a>无空格的样子:</h6><p><img src="/2018/11/23/flask-sqlalchemy使用与sqlalchemy对比/hexo\source\_posts\flask-sqlalchemy使用与sqlalchemy对比\fail.jpg" alt="fail"></p><h6 id="有空格的样子"><a href="#有空格的样子" class="headerlink" title="有空格的样子"></a>有空格的样子</h6><p><img src="/2018/11/23/flask-sqlalchemy使用与sqlalchemy对比/hexo\source\_posts\flask-sqlalchemy使用与sqlalchemy对比\success.jpg" alt="success"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;flask-sqlalchemy使用与sqlalchemy对比&quot;&gt;&lt;a href=&quot;#flask-sqlalchemy使用与sqlalchemy对比&quot; class=&quot;headerlink&quot; title=&quot;flask-sqlalchemy使用与sqlalchemy对
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="数据库" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Flask系列–将应用部署在Heroku上</title>
    <link href="https://nymrli.top/2018/11/21/Flask%E7%B3%BB%E5%88%97%E2%80%93%E5%B0%86%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%9C%A8Heroku%E4%B8%8A/"/>
    <id>https://nymrli.top/2018/11/21/Flask系列–将应用部署在Heroku上/</id>
    <published>2018-11-21T07:54:01.000Z</published>
    <updated>2018-11-21T08:58:36.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask补充系列–将应用部署在Heroku上"><a href="#Flask补充系列–将应用部署在Heroku上" class="headerlink" title="Flask补充系列–将应用部署在Heroku上"></a>Flask补充系列–将应用部署在Heroku上</h1><p>之前曾经介绍过如何<a href="http://www.bjhee.com/flask-ad8.html" target="_blank" rel="noopener">将Flask应用部署在自己的服务器上</a>，对于手头并不宽裕的程序员来说，购置一台托管服务器还是一笔不小的开销。即便现在有公有云服务器可以买，不过如果你只是以学习为目的，这笔开销还是能省则省了。另外，如果你的应用中需要访问国外被河蟹掉的资源，在服务器上翻墙也是件麻烦事，所以这里我们补充一篇如何将Flask应用部署在Heroku上。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku</a>是一个<a href="http://www.bjhee.com/cloud.html" target="_blank" rel="noopener">PaaS服务</a>提供商，使用前，你需要先<a href="https://signup.heroku.com/" target="_blank" rel="noopener">注册一个Heroku帐号</a>，注册帐号是免费的。</p><p>此外你本地必须要有Python 2.7的开发环境，并且装好了Pip, Setuptools, Virtualenv等工具。对于Python开发者来说，这些都是必备的吧。此外Git客户端也是必须的，因为Heroku的代码管理用的是Git。</p><p>Heroku提供了一个非常方便的<a href="https://devcenter.heroku.com/start" target="_blank" rel="noopener">Getting Start</a>教程，每种开发环境都有，我们可以打开Python的Getting Start，然后参照其说明创建一个Python Web应用。懒得看英文的朋友们，可以看我下面写的步骤。</p><p>在开始创建应用之前，你还需要安装<a href="https://toolbelt.heroku.com/" target="_blank" rel="noopener">Heroku的客户端工具</a>，你可以根据你本地的操作系统选择安装包下载。这是一个命令行工具，基于Ruby实现，所以使用起来每个操作系统都一样。安装完成后，你可以打开命令行，输入下面的命令来验证安装是否成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heroku --version</span></span><br></pre></td></tr></table></figure><p>如果安装成功，就在本地命令行里登录Heroku，执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heroku login</span></span><br></pre></td></tr></table></figure><p>并输入你注册号的Heroku帐号及密码即可。</p><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><h5 id="网页创建应用"><a href="#网页创建应用" class="headerlink" title="网页创建应用"></a>网页创建应用</h5><p>环境准备就绪了，我们开始创建一个应用。浏览器打开<a href="https://dashboard.heroku.com/apps" target="_blank" rel="noopener">Heroku应用控制台</a>，点击右上角的”+”号，并选择”Create new app”。<br><img src="http://www.bjhee.com/wp-content/uploads/2016/05/create-app.png" alt="Create App"></p><p>在创建页面中，输入你的应用名称，比如”flask-bjhee”，如果名称没有被占用，则会跳出绿色提示”flask-bjhee is available”。运行环境默认在美国，也可以选择欧洲。信息填完后，点击下方的”Create App”按钮，应用就创建完成了。<br><img src="http://www.bjhee.com/wp-content/uploads/2016/05/fill-appinfo.png" alt="Fill App Info"></p><p>接下来打开命令行，我们要初始化本地及远程代码库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /home/bjhee/flask-bjhee      <span class="comment"># 创建本地代码工作目录</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/bjhee/flask-bjhee         <span class="comment"># 切换到本地代码工作目录</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init                           <span class="comment"># 创建本地代码库</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> heroku git:remote -a flask-bjhee   <span class="comment"># 连接远程Heroku的flask-bjhee代码库</span></span></span><br></pre></td></tr></table></figure><p>现在，我们就可以编写应用代码，并提交到Heroku上去了。</p><p>命令行创建应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heroku create (xxx)<span class="comment">#省略会自动默认</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"yyy"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> heroku git:remote -a flask-bjhee</span></span><br></pre></td></tr></table></figure><h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><p>既然主要是在讲部署，那代码逻辑就简单些，Hello World吧。我们写一个Flask Web程序”run.py”，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>然后，我们就写个”requirements.txt”文件，应用部署时Heroku远程环境会自动执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure><p>来安装应用依赖的库。我们的”requirements.txt”文件如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Flask</span>==<span class="number">0.10</span>.<span class="number">1</span></span><br><span class="line"><span class="attr">gunicorn</span>==<span class="number">19.4</span>.<span class="number">5</span></span><br></pre></td></tr></table></figure><p>项目依赖Flask很好理解，为什么还要依赖gunicorn呢？因为我们不能靠Flask自带的Web服务器来运行Flask程序，所以gunicorn是个很好的选择。还记得如何<a href="http://www.bjhee.com/flask-ad8.html" target="_blank" rel="noopener">通过Gunicorn运行Flask应用</a>吗？对于上面的代码，我们只需执行”gunicorn run:app”即可。现在我们要告诉Heroku，应该使用这个命令来运行我们的应用。怎么做呢，就是在项目根目录里创建一个”Procfile”文件，然后写上：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web: gunicorn <span class="keyword">run</span>:<span class="keyword">app</span> --<span class="keyword">log</span>-<span class="keyword">file</span> -</span><br></pre></td></tr></table></figure><p>这就告诉Heroku，启动Web时，要执行”gunicorn run:app –log-file -“。后面的”–log-file -“参数，是为了让日志只打印到标准输出stdout上，因为Heroku不提供我们写本地磁盘的功能。</p><p>再接下来，我们要写一个app.json来描述项目信息，”app.json”内容大致如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Flask sample on Heroku"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"An example of deploying Flask web app to Heroku."</span>,</span><br><span class="line">  <span class="attr">"image"</span>: <span class="string">"heroku/python"</span>,</span><br><span class="line">  <span class="attr">"repository"</span>: <span class="string">"https://git.heroku.com/flask-bjhee"</span>,</span><br><span class="line">  <span class="attr">"keywords"</span>: [<span class="string">"python"</span>, <span class="string">"flask"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外根据习惯，我们应该写一个”README.md”来给用户看，”.gitignore”描述哪些文件类型不需要提交到代码库中去。好了，现在我们的目录结构如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flask-bjhee/</span><br><span class="line">  ├ .gitignore</span><br><span class="line">  ├ app.json</span><br><span class="line">  ├ Procfile</span><br><span class="line">  ├ README.md</span><br><span class="line">  ├ requirements.txt</span><br><span class="line">  └ run.py</span><br></pre></td></tr></table></figure><p>让我们执行git提交命令，来部署到远程Heroku上去吧：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"Initialize Project"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push heroku master               <span class="comment"># 提交到远程master分支</span></span></span><br></pre></td></tr></table></figure><p>想看看效果，命令行里输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heroku open</span></span><br></pre></td></tr></table></figure><p>就会启动浏览器，并打开地址”<a href="https://flask-bjhee.herokuapp.com/”，当然你也可以直接浏览器访问这个地址。有没有看到”Hello" target="_blank" rel="noopener">https://flask-bjhee.herokuapp.com/”，当然你也可以直接浏览器访问这个地址。有没有看到”Hello</a> World!”？</p><p>本篇的示例代码可以在<a href="http://www.bjhee.com/downloads/201605/flask-heroku.tar.gz" target="_blank" rel="noopener">这里下载</a>。</p><p>部分转自: <a href="http://www.bjhee.com/flask-heroku.html" target="_blank" rel="noopener">思诚之道</a></p><p>▲ 注意部署的时候有两个文件不能少,分别是<code>Procfile</code>和<code>requestments.txt(名字必须完全一样,我就是拼错了一次和少了个s)</code>,失败的报错情况如图</p><p><img src="/2018/11/21/Flask系列–将应用部署在Heroku上/hexo\source\_posts\Flask系列–将应用部署在Heroku上\1.jpg" alt="1"></p><p>完成后是这样的.heorku会自动根据你提供的<code>requestments.txt</code>安装相应的依赖库</p><p><img src="/2018/11/21/Flask系列–将应用部署在Heroku上/hexo\source\_posts\Flask系列–将应用部署在Heroku上\3.jpg" alt="3"></p><hr><h3 id="配置数据库环境、迁移文件、表"><a href="#配置数据库环境、迁移文件、表" class="headerlink" title="配置数据库环境、迁移文件、表"></a>配置数据库环境、迁移文件、表</h3><p>heroku提供了自己的控制台,打开的命令为<code>heroku run bash</code>,之后就可以像在linux的终端下一样操作了</p><p>除了这种方法还可以指明使用heroku命令,需要做的是加上前缀<code>heroku run</code>,如<code>heroku run python manage.py db init</code></p><p>官方介绍为:(如图</p><p><img src="/2018/11/21/Flask系列–将应用部署在Heroku上/hexo\source\_posts\Flask系列–将应用部署在Heroku上\4.jpg" alt="4"></p><hr><h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku domains:add apollo<span class="selector-class">.nymrli</span><span class="selector-class">.top</span></span><br></pre></td></tr></table></figure><p>▲.注意需要认证账户,否则会出现下图结果</p><p><img src="/2018/11/21/Flask系列–将应用部署在Heroku上/hexo\source\_posts\Flask系列–将应用部署在Heroku上\vertify.jpg" alt="vertify"></p><p>待认证好后,还需要用DNS解析,我用的是阿里云的万网解析,将<code>heroku domains:add apollo.nymrli.top</code>后<code>heroku</code>的值用CHAME记录解析.等个几秒后就可以用<code>apollo.nymrli.top</code>访问<code>heroku</code>上面的应用程序了</p><p>还有一个做法呢,是直接在heroku相应app的设置里面设置自定义域名,但是由于显示问题,容易复制错,导致无法被解析的问题…如果设置好CHAME解析30秒后还是无法用自定义域名打开的话,看看是不是值复制错了.</p><p>所以还是比较建议用命令<code>heroku domains:add xxx</code>来绑定</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask补充系列–将应用部署在Heroku上&quot;&gt;&lt;a href=&quot;#Flask补充系列–将应用部署在Heroku上&quot; class=&quot;headerlink&quot; title=&quot;Flask补充系列–将应用部署在Heroku上&quot;&gt;&lt;/a&gt;Flask补充系列–将应用部署在H
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="后端" scheme="https://nymrli.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>二分搜索降低时间复杂度</title>
    <link href="https://nymrli.top/2018/11/10/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E9%99%8D%E4%BD%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>https://nymrli.top/2018/11/10/二分搜索降低时间复杂度/</id>
    <published>2018-11-10T13:36:01.000Z</published>
    <updated>2018-11-10T13:38:14.609Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二分搜索降低时间复杂度"><a href="#二分搜索降低时间复杂度" class="headerlink" title="二分搜索降低时间复杂度"></a>二分搜索降低时间复杂度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">    canFit();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/11/10/二分搜索降低时间复杂度/Typora/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E9%99%8D%E4%BD%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/draw_lots.jpg" alt="draw_lots"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 150</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s[MAXN];</span><br><span class="line"><span class="keyword">int</span> ss[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canFit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;n;l++)</span><br><span class="line">        <span class="keyword">if</span>( s[i] + s[j] + s[l] + s[k] == m) flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度为O(n^4),只能在n较小的情况下,若n较大,则TLE..</strong></p><p><strong>时间复杂度为O(n^3log2(n))的做法:一层二分搜索</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 150</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s[MAXN];</span><br><span class="line"><span class="keyword">int</span> ss[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">binSearch</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=n,l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">int</span> i = (r+l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ( s[i] == k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( s[i] &lt; k) l = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r= i<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canFit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        <span class="keyword">if</span>( binSearch(m-s[i] - s[j] - s[k]) flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(n^2log2(n))做法: 排序<code>O(n^2log2(n))</code>,循环<code>O(n^2log2(n))</code>,总共也是<code>O(n^2log2(n))</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 150</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s[MAXN];</span><br><span class="line"><span class="keyword">int</span> ss[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">binSearch</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=n*n;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">int</span> i = (r+l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ( s[i] == k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( s[i] &lt; k) l = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r= i<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enumeration</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        ss[i*n+j] = s[i] + s[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canFit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    enumeration();</span><br><span class="line">    sort(ss,ss+n*n);        <span class="comment">//二分搜索的前提是有序</span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        <span class="keyword">if</span>( binSearch(m- s[i] - s[j] )) flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲需要注意的是,<code>ss[n*n]</code>的数组需要先排序才能使用二分搜索</p><p>—-出自:&lt;&lt;挑战程序设计竞赛&gt;&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二分搜索降低时间复杂度&quot;&gt;&lt;a href=&quot;#二分搜索降低时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;二分搜索降低时间复杂度&quot;&gt;&lt;/a&gt;二分搜索降低时间复杂度&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib.pyplot使用</title>
    <link href="https://nymrli.top/2018/11/10/matplotlib-pyplot%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2018/11/10/matplotlib-pyplot使用/</id>
    <published>2018-11-10T04:58:51.000Z</published>
    <updated>2018-11-10T05:02:47.069Z</updated>
    
    <content type="html"><![CDATA[<h3 id="matplotlib-pyplot使用"><a href="#matplotlib-pyplot使用" class="headerlink" title="matplotlib.pyplot使用"></a>matplotlib.pyplot使用</h3><h4 id="温习源自WeiboSpider"><a href="#温习源自WeiboSpider" class="headerlink" title="温习源自WeiboSpider"></a>温习源自WeiboSpider</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cgraph</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.db = db</span><br><span class="line">        self.create_dir()</span><br><span class="line">        self.Start_timestmp = time.mktime(time.strptime(<span class="string">'2018-7-5 00:00'</span>,<span class="string">'%Y-%m-%d %H:%M'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge_over</span><span class="params">(self, _time)</span>:</span>  <span class="comment"># start_time is timestamp</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        判断时间是否已经超过预设时间</span></span><br><span class="line"><span class="string">        :param Start_timestmp:</span></span><br><span class="line"><span class="string">        :param _time:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        timestamp = time.mktime(time.strptime(_time, <span class="string">'%Y-%m-%d %H:%M'</span>))</span><br><span class="line">        <span class="comment"># Start_timestamp = time.mktime(time.strptime(Start_time,'%Y-%m-%d %H:%M'))</span></span><br><span class="line">        <span class="keyword">if</span> timestamp - self.Start_timestmp &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_dir</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(<span class="string">'.\\graph'</span>):</span><br><span class="line">            os.makedirs(<span class="string">'.\\graph'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self,lists)</span>:</span></span><br><span class="line">        exist_dict = OrderedDict()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> exist_dict:</span><br><span class="line">                exist_dict[x] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                exist_dict[x] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> dict(sorted(exist_dict.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unify_time</span><span class="params">(self,_time)</span>:</span></span><br><span class="line">        c = _time.split(<span class="string">'-'</span>)</span><br><span class="line">        _time = <span class="string">'-'</span>.join([<span class="string">'0'</span> + x <span class="keyword">if</span> len(x.strip()) == <span class="number">1</span> <span class="keyword">else</span> x <span class="keyword">for</span> x <span class="keyword">in</span> c])</span><br><span class="line">        <span class="keyword">if</span> _time[:<span class="number">4</span>] == <span class="string">'2018'</span>:</span><br><span class="line">            _time = _time[<span class="number">5</span>:<span class="number">10</span>]</span><br><span class="line">        <span class="keyword">return</span> _time[:<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        timelist = []</span><br><span class="line">        <span class="keyword">for</span> alls <span class="keyword">in</span> self.db.find():</span><br><span class="line">            <span class="keyword">if</span> alls.get(<span class="string">'time'</span>):</span><br><span class="line">                print(alls.get(<span class="string">'time'</span>))</span><br><span class="line">                timelist.append(self.unify_time(alls.get(<span class="string">'time'</span>)))</span><br><span class="line">                </span><br><span class="line">        infodict = self.count(timelist[::<span class="number">-1</span>])</span><br><span class="line">        plt.figure(figsize=(<span class="number">40</span>, <span class="number">18</span>))<span class="comment">#设置图片大小</span></span><br><span class="line">        <span class="comment"># plt.rcParams['figure.figsize'] = (40.0, 12.0)   设置图片大小的另外一种方法</span></span><br><span class="line">        <span class="comment"># plt.rcParams['figure.dpi'] = 400</span></span><br><span class="line">        x = list(infodict.keys())</span><br><span class="line">        y = list(infodict.values())</span><br><span class="line">        plt.plot(x,y,linewidth=<span class="number">2</span>,color=<span class="string">'r'</span>,marker=<span class="string">'o'</span>,markersize=<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">for</span> x_value,y_value <span class="keyword">in</span> zip(x,y):</span><br><span class="line">            plt.text(x_value,y_value,y_value,fontsize= <span class="number">15</span>)<span class="comment">#文字标注(x,y,值)</span></span><br><span class="line">        plt.ylim((<span class="number">0</span>, max(y)))<span class="comment">#纵坐标y的上下限</span></span><br><span class="line">        plt.yticks([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,max(y)+<span class="number">10</span>,<span class="number">10</span>)])<span class="comment">#y的比例尺</span></span><br><span class="line">        plt.xlabel(<span class="string">'Time'</span>)</span><br><span class="line">        plt.ylabel(<span class="string">'Keyword times'</span>)<span class="comment">#y轴的标签</span></span><br><span class="line">        plt.title(<span class="string">'Weibo Keyword\'s Trendency'</span>)<span class="comment">#图的标题</span></span><br><span class="line">        plt.savefig(<span class="string">'.\\graph\\&#123;&#125;.jpg'</span>.format(TABLE))<span class="comment">#保存图片</span></span><br><span class="line">        plt.clf()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    graph = Cgraph()</span><br><span class="line">    graph.Draw()</span><br><span class="line">    print(<span class="string">'完成'</span>)</span><br></pre></td></tr></table></figure><h4 id="使用-大物实验画折线图"><a href="#使用-大物实验画折线图" class="headerlink" title="使用:大物实验画折线图"></a>使用:大物实验画折线图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">I = []</span><br><span class="line">U = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extractFromCsv</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        reader = csv.reader(f)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">            <span class="keyword">if</span> reader.line_num == <span class="number">1</span>:        <span class="comment">#跳过表头</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            U.append(float(row[<span class="number">0</span>]))</span><br><span class="line">            I.append((float(row[<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawPic</span><span class="params">(filename)</span>:</span></span><br><span class="line">    fig = plt.figure(dpi=<span class="number">256</span>, figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">    plt.plot(U,I,<span class="string">'r*'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'U(V)'</span>,fontsize=<span class="number">10</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'I(10e-9A)'</span>,fontsize=<span class="number">10</span>)</span><br><span class="line">    plt.title(<span class="string">'The line chart of the relation between U and I'</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">    plt.ylim(<span class="number">0</span>,max(I)+<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    x = np.linspace(<span class="number">0</span>,max(I)+<span class="number">0.5</span>,<span class="number">40</span>)</span><br><span class="line">    plt.yticks(x,fontsize=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">".\\graph"</span>):</span><br><span class="line">        os.mkdir(<span class="string">'.\\graph'</span>)</span><br><span class="line">    plt.savefig(<span class="string">'.\\graph\\&#123;&#125;.jpg'</span>.format(filename))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    filename=<span class="string">'phy.csv'</span></span><br><span class="line">    extractFromCsv(filename)</span><br><span class="line">    drawPic(filename)</span><br></pre></td></tr></table></figure><h4 id="图形类型"><a href="#图形类型" class="headerlink" title="图形类型"></a>图形类型</h4><ul><li>散列图 <code>ax1.scatter(x,y,c = &#39;r&#39;,marker = &#39;o&#39;)</code></li><li>折线图<code>plt.plot()</code></li><li>直方图<code>plt.hist()</code></li><li>条形图<code>plt.bar(left=index,height=y,color=&#39;green&#39;,width=0.5)</code></li><li>饼状图:<code>plt.pie(x=fracs,labels=labels,autopct=&#39;%.0f%%&#39;,explode=explode)#autopct显示百分比</code></li><li>箱形图<code>plt.boxplot(data,labels=labels)</code></li></ul><p><a href="https://blog.csdn.net/qiu931110/article/details/68130199" target="_blank" rel="noopener">scatter基本的用法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;matplotlib-pyplot使用&quot;&gt;&lt;a href=&quot;#matplotlib-pyplot使用&quot; class=&quot;headerlink&quot; title=&quot;matplotlib.pyplot使用&quot;&gt;&lt;/a&gt;matplotlib.pyplot使用&lt;/h3&gt;&lt;h4 i
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>apt代理的设置</title>
    <link href="https://nymrli.top/2018/11/10/apt%E4%BB%A3%E7%90%86%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
    <id>https://nymrli.top/2018/11/10/apt代理的设置/</id>
    <published>2018-11-10T04:56:53.000Z</published>
    <updated>2018-11-10T04:57:21.033Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原因是在apt-get update时遇到了Unable to connect to 代理，（由于<code>apt-get update</code>一直显示无法连接<code>172.17.18.141</code>百度后发现并不是个特殊的IP,）于是想到是否使用了代理。</p></blockquote><h3 id="apt代理的设置："><a href="#apt代理的设置：" class="headerlink" title="apt代理的设置："></a>apt代理的设置：</h3><h4 id="临时方法"><a href="#临时方法" class="headerlink" title="临时方法"></a>临时方法</h4><p><code>export http_proxy=http://10.3.0.1:80</code></p><h4 id="长久方法"><a href="#长久方法" class="headerlink" title="长久方法"></a>长久方法</h4><p>(1) 需要在/etc/apt/apt.conf中添加以下代码： (如果您希望apt-get(而不是其他应用程序)一直使用http代理,您可以使用这种方式。)</p><p><code>Acquire::http::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p><code>Acquire::ftp::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p><code>Acquire::https::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p>保存apt.conf文件。</p><p>(2)新建一个代理配置文件,在apt-get 时使用配置,15.10可用(针对需要下载的单个不同文件)</p><p>建立文件  <code>vim proxyfile</code></p><p><code>Acquire::http::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p><code>Acquire::ftp::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p><code>Acquire::https::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p>使用时<code>sudo apt-get install  xxx -c proxyfile</code></p><p>(2)在主目录下的.bashrc文件中添加两行。(如果您希望apt-get和其他应用程序如wget等都使用http代理,您可以使用这种方式。 )</p><p>在您的.bashrc文件末尾添加如下内容<br><code>export http_proxy=http://用户名:密码@地址:端口/</code><br><code>export https_proxy=http://用户名:密码@地址:端口/</code></p><p><code>export ftp_proxy=http://用户名:密码@地址:端口/</code></p><p><a href="https://blog.csdn.net/qq3399013670/article/details/81300497" target="_blank" rel="noopener">https://blog.csdn.net/qq3399013670/article/details/81300497</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原因是在apt-get update时遇到了Unable to connect to 代理，（由于&lt;code&gt;apt-get update&lt;/code&gt;一直显示无法连接&lt;code&gt;172.17.18.141&lt;/code&gt;百度后发现并不是个特殊的IP
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://nymrli.top/tags/Ubuntu/"/>
    
      <category term="计算机基础知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu更改nginx默认端口</title>
    <link href="https://nymrli.top/2018/11/10/Ubuntu%E6%9B%B4%E6%94%B9nginx%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3/"/>
    <id>https://nymrli.top/2018/11/10/Ubuntu更改nginx默认端口/</id>
    <published>2018-11-10T04:55:13.000Z</published>
    <updated>2018-11-10T04:56:15.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu更改nginx默认端口"><a href="#Ubuntu更改nginx默认端口" class="headerlink" title="Ubuntu更改nginx默认端口"></a>Ubuntu更改nginx默认端口</h1><blockquote><p>nginx 默认使用80端口，有时候我们希望nginx运行在其他端口，就需要更改nginx配置</p></blockquote><p><strong>nginx配置文件在/etc/nginx目录下的nginx.conf。(可以修改处理器数量、日志路径、pid文件路径等，默认的日志。)</strong></p><ul><li><code>错误日志 /var/log/nginx/error.log</code><br><code>访问日志 /var/log/nginx/access.log</code></li></ul><p><strong>在nginx.conf-&gt;http选项末尾有引入两个目录下的文件分别为：</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">/etc/nginx/nginx.conf</span>]</span><br><span class="line">http &#123;</span><br><span class="line">        <span class="comment">#   省略部分内容    </span></span><br><span class="line">        include <span class="string">/etc/nginx/conf.d/</span>*<span class="string">.conf</span>;<span class="comment">#意思是把用户自己的配置放到conf.d/*</span></span><br><span class="line">        include <span class="string">/etc/nginx/sites-enabled/</span>*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查看/etc/nginx/sites-enabled/目录，会找到一个default文件，在server选项下前两行就可以找到使用的80端口号：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[/etc/nginx/sites-enabled/default]</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br></pre></td></tr></table></figure><p><strong>将80端口号改为想使用的端口号，保存文件，如果没有启动nginx，启动即可。如果nginx已经在运行，重新加载即可。</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx <span class="literal">start</span> <span class="comment">#运行nginx</span></span><br><span class="line">sudo nginx -s reload <span class="comment">#重启nginx</span></span><br></pre></td></tr></table></figure><p><strong>如果遇到nginx报以下错误：<code>nginx: [error] open() &quot;/run/nginx.pid&quot; failed (2: No such file or directory)</code>则`sudo nginx -c path/<em>.conf #指定nginx配置</em>.conf的位置</strong>`</p><p><strong>查看nginx运行的端口`sudo netstat -anp | grep nginx</strong>`</p><p>▲如果启用防火墙，则需开启对应端口，使用AWS服务器需要更改服务器安全组，添加响应入站规则，开启对应端口。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu更改nginx默认端口&quot;&gt;&lt;a href=&quot;#Ubuntu更改nginx默认端口&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu更改nginx默认端口&quot;&gt;&lt;/a&gt;Ubuntu更改nginx默认端口&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://nymrli.top/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Pythonanywhere解决链接Mysql问题(部署flask)</title>
    <link href="https://nymrli.top/2018/11/10/Pythonanywhere%E8%A7%A3%E5%86%B3%E9%93%BE%E6%8E%A5Mysql%E9%97%AE%E9%A2%98-%E9%83%A8%E7%BD%B2flask/"/>
    <id>https://nymrli.top/2018/11/10/Pythonanywhere解决链接Mysql问题-部署flask/</id>
    <published>2018-11-10T04:54:14.000Z</published>
    <updated>2018-11-10T04:54:43.145Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Pythonanywhere解决链接Mysql问题-部署flask"><a href="#Pythonanywhere解决链接Mysql问题-部署flask" class="headerlink" title="Pythonanywhere解决链接Mysql问题(部署flask)"></a>Pythonanywhere解决链接Mysql问题(部署flask)</h4><blockquote><p>由于在bash控制台里通过命令<code>mysql -p</code>(<strong>这其实是因为错误的连接方式,由于不是默认的端口3306,自然连接不到,官方文档中有正确的连接方式</strong>)链接不到Mysql时,再加上进虚拟环境用<code>python manage db migrate</code>也失败后,我是异常慌张的..然后立马发现关于<code>pythonanywhere</code>链接Mysql的解决不是很多,要么就是说免费账号是无法用的…心顿时拔凉,但最后还是找到了pythonanywhere官方的文档,解决了这个问题,发现都是配置的问题</p></blockquote><p><strong>一开始的我本地及阿里云链接mysql数据库配置文件是这样写的:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[config.py]</span></span><br><span class="line">DIALECT = <span class="string">'mysql'</span></span><br><span class="line">DRIVER = <span class="string">'pymysql'</span></span><br><span class="line">USERNAME = <span class="string">'root'</span></span><br><span class="line">PASSWORD = <span class="string">'zxcqwe'</span> <span class="comment">#瞎写的</span></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="string">'3306'</span></span><br><span class="line">DATABASE = <span class="string">'restaurant'</span></span><br><span class="line">DEBUG = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">"&#123;&#125;+&#123;&#125;://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?charset=utf8"</span>.format(</span><br><span class="line">    DIALECT,DRIVER,USERNAME,PASSWORD,HOST,PORT,DATABASE)</span><br><span class="line"></span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p><strong>后来根据说明改成了如下:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[config.py]</span></span><br><span class="line">DIALECT = <span class="string">'mysql'</span></span><br><span class="line">DRIVER = <span class="string">'pymysql'</span></span><br><span class="line">USERNAME = <span class="string">'nymrli'</span></span><br><span class="line">PASSWORD = <span class="string">'zxcqwe'</span> <span class="comment">#瞎写的</span></span><br><span class="line">HOST = <span class="string">'nymrli.mysql.pythonanywhere-services.com'</span></span><br><span class="line">PORT = <span class="string">'3306'</span></span><br><span class="line">DATABASE = <span class="string">'nymrli$restaurant'</span></span><br><span class="line">DEBUG = <span class="keyword">True</span></span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">"&#123;&#125;+&#123;&#125;://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?charset=utf8"</span>.format(</span><br><span class="line">DIALECT, DRIVER, USERNAME, PASSWORD, HOST, PORT, DATABASE)</span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>其中修改的地方为</p><ul><li><code>USERNAME</code>为pythonanywhere账号</li><li><code>PASSWORD</code>为<code>Database</code>详情页设置的数据库密码</li><li><code>HOST</code>为<code>Database</code>详情页上的<code>Database host address</code></li><li><code>DATABASE</code>为<code>Database</code>详情页上 <code>create a database</code>的数据库名,但pythonanywhere会自动给你加上前缀<code>&lt;username&gt;$&lt;database_name&gt;</code>,所以我这边就是<code>nymrli$restaurant</code></li><li><code>PORT</code>默认还是<code>3306</code></li></ul><h4 id="附上官方文档"><a href="#附上官方文档" class="headerlink" title="附上官方文档:"></a>附上官方文档:</h4><p>配置说明:</p><blockquote><p>开始使用MySQL,您需要去在仪表板的MySQL选项卡,并设置一个密码。你也会找到连接设置选项卡(主机名、用户名),以及创建新的数据库的能力。 　　 　　</p><p>你可以开始一个新的MySQL控制台访问数据库从这个选项卡,或者您可以打开一个MySQL从bash shell使用以下命令控制台或ssh会话:</p></blockquote><p><code>mysql -u USERNAME -h HOSTNAME -p &#39;USERNAME$DATABASENAME&#39;</code></p><ul><li><a href="https://help.pythonanywhere.com/pages/UsingMySQL/" target="_blank" rel="noopener"><a href="https://help.pythonanywhere.com/pages/UsingMySQL/" target="_blank" rel="noopener">Using MySQL</a></a></li></ul><h5 id="通过SSH链接-据说免费账户不支持"><a href="#通过SSH链接-据说免费账户不支持" class="headerlink" title="通过SSH链接,据说免费账户不支持:"></a>通过SSH链接,据说免费账户不支持:</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SettingValue</span><br><span class="line">SSH Hostname:ssh.pythonanywhere.com</span><br><span class="line">SSH Username:your PythonAnywhere username</span><br><span class="line">SSH Password:the password you use <span class="keyword">to</span> log <span class="keyword">in</span> <span class="keyword">to</span> the PythonAnywhere website</span><br><span class="line">SSH Key file:should <span class="keyword">not</span> be necessary when you specify the password</span><br><span class="line">MySQL Hostname:your PythonAnywhere database hostname, eg. yourusername.mysql.pythonanywhere-services.com</span><br><span class="line">MySQL<span class="built_in"> Server </span>Port:3306</span><br><span class="line">Username:your PythonAnywhere username</span><br><span class="line">Password:your PythonAnywhere database password</span><br><span class="line">Default Schema:your database name, eg yourusername<span class="variable">$mydatabase</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://help.pythonanywhere.com/pages/AccessingMySQLFromOutsidePythonAnywhere/" target="_blank" rel="noopener">Accessing your MySQL database from outside PythonAnywhere</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Pythonanywhere解决链接Mysql问题-部署flask&quot;&gt;&lt;a href=&quot;#Pythonanywhere解决链接Mysql问题-部署flask&quot; class=&quot;headerlink&quot; title=&quot;Pythonanywhere解决链接Mysql问题(
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="MySQL" scheme="https://nymrli.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>写爬虫过程中碰到的编码问题</title>
    <link href="https://nymrli.top/2018/11/08/%E5%86%99%E7%88%AC%E8%99%AB%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%A2%B0%E5%88%B0%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>https://nymrli.top/2018/11/08/写爬虫过程中碰到的编码问题/</id>
    <published>2018-11-08T04:23:19.000Z</published>
    <updated>2018-12-03T15:02:19.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写爬虫过程中碰到的编码问题"><a href="#写爬虫过程中碰到的编码问题" class="headerlink" title="写爬虫过程中碰到的编码问题"></a>写爬虫过程中碰到的编码问题</h2><h4 id="遇到-‘-uxxxx-‘-的16进制字符串编解码问题，使用unicode-escape解决之。"><a href="#遇到-‘-uxxxx-‘-的16进制字符串编解码问题，使用unicode-escape解决之。" class="headerlink" title="遇到 ‘ \uxxxx ‘ 的16进制字符串编解码问题，使用unicode-escape解决之。"></a>遇到 ‘ \uxxxx ‘ 的16进制字符串编解码问题，使用<code>unicode-escape</code>解决之。</h4><p>实际上，在将unicode存储到文本的过程中，还有一种存储方式，不需要将unicode转换为实际的文本存储字符集，而是将unicode的内存编码值进行存储，读取文件的时候再反向转换回来，是采用：unicode-escape的转换方式。 </p><blockquote><p><strong>将unicode的内存编码值进行存储，读取文件时在反向转换回来。这里就采用了unicode-escape的方式</strong>  </p></blockquote><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(u'中文测试'.encode('utf-8'))</span><br><span class="line">print('中文测试'.encode('utf-8'))</span><br><span class="line">print(u'中文测试'.encode('unicode-escape'))</span><br><span class="line">print('中文测试'.encode('unicode-escape'))</span><br><span class="line">==&gt;b'<span class="symbol">\x</span>e4<span class="symbol">\x</span>b8<span class="symbol">\x</span>ad<span class="symbol">\x</span>e6<span class="symbol">\x</span>96<span class="symbol">\x</span>87<span class="symbol">\x</span>e6<span class="symbol">\x</span>b5<span class="symbol">\x</span>8b<span class="symbol">\x</span>e8<span class="symbol">\x</span>af<span class="symbol">\x</span>95'</span><br><span class="line">==&gt;b'<span class="symbol">\x</span>e4<span class="symbol">\x</span>b8<span class="symbol">\x</span>ad<span class="symbol">\x</span>e6<span class="symbol">\x</span>96<span class="symbol">\x</span>87<span class="symbol">\x</span>e6<span class="symbol">\x</span>b5<span class="symbol">\x</span>8b<span class="symbol">\x</span>e8<span class="symbol">\x</span>af<span class="symbol">\x</span>95'</span><br><span class="line">==&gt;b'<span class="symbol">\\</span>u4e2d<span class="symbol">\\</span>u6587<span class="symbol">\\</span>u6d4b<span class="symbol">\\</span>u8bd5'</span><br><span class="line">==&gt;b'<span class="symbol">\\</span>u4e2d<span class="symbol">\\</span>u6587<span class="symbol">\\</span>u6d4b<span class="symbol">\\</span>u8bd5'</span><br></pre></td></tr></table></figure><hr><blockquote><p>ASCII码只有128个字符，符合英文，一个英文字符只用1个字节(最高位恒为0)</p></blockquote><blockquote><p>ANSI：面向中文编码的GBK、GB2312是ANSI码的一种，ANSI码是对ASCII的拓展，所以一个英文只用一个字节，而中文需要拓展ASCII，所以用到两个字节。  0x80~0xFFFF =&gt;2**16</p></blockquote><blockquote><p>Unicode编码:为了解决不同国家ANSI编码的冲突问题，最常用的是用<strong>两个字节</strong>表示一个字符 。但是这样的话，原本可以用一个字节存储的英文字母在Unicode里面必须存两个字节，这就产生了浪费。那么有没有一种既能消除乱码，又能避免浪费的编码方式呢？===&gt;答案就是UTF-8 。000000 -10FFFF </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; UNICODE 的范围是 <span class="number">0x0000</span> - <span class="number">0xFFFF</span> 共<span class="number">6</span>万多个字符，其中光汉字就占用了<span class="number">4</span>万多个</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>UTF-8编码：当字符在ASCII码的范围时，就用一个字节表示 ，所以英文字符也只用一个字节，▲值得注意的是unicode编码中一个中文字符占2个字节，而UTF-8一个中文字符占3个字节。从unicode到uft-8并不是直接的对应，而是要过一些算法和规则来转换。utf-8长度是1-6个字节 （可变的）</strong></p></blockquote><table><thead><tr><th><strong>Unicode编码(十六进制)</strong></th><th><strong>UTF-8 字节流(二进制)</strong></th></tr></thead><tbody><tr><td>000000-00007F</td><td>0xxxxxxx</td></tr><tr><td>000080-0007FF</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>000800-00FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>010000-10FFFF</td><td>11110xxx 10xxxxxx 10xxxxxx10xxxxxx</td></tr></tbody></table><p>超出10FFFF后，UTF-8与Unicode不再对应</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><blockquote><p>UTF-8 vs GBK：</p><p>UTF-8版本虽然具有良好的国际兼容性，但中文需要比GBK/BIG5版本多占用50%的数据库存储空间，因此并非推荐使用，仅供对国际兼容性有特殊要求的用户使用。简单地说：对于中文较多的网站，适宜用GBK编码节省数据库空间。对于英文较多的网站，适宜用UTF-8节省数据库空间。</p></blockquote><p><strong><a href="https://blog.csdn.net/xiangxianghehe/article/details/77574965" target="_blank" rel="noopener"> 字符编码ANSI和ASCII区别、Unicode和UTF-8区别 </a></strong></p><h3 id="Python中编码问题"><a href="#Python中编码问题" class="headerlink" title="Python中编码问题"></a>Python中编码问题</h3><hr><p>在python中，unicode是内存编码集，一般我们将数据存储到文件时，需要将数据先编码为其他编码集，比如utf-8、gbk等。</p><p>读取数据的时候再通过同样的编码集进行解码即可。</p><p>但是其实还有一种unicode-escape编码集，他是将unicode内存编码值直接存储： </p><blockquote><p>在使用python3的requests模块时，发现获取响应有两种方式</p><ul><li>其一，为文本响应内容, r.text是Unicode的响应内容 </li><li>其二，为二进制响应内容，r.content是二进制的响应内容 </li></ul></blockquote><hr><p>Python2 的编码问题一直非常让人恼火，不过你的问题稍微简单一些。<br>在交互式命令模式(Interactive shell)下，可以这样来明白你遇到的问题的根源： </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import sys </span><br><span class="line">sys<span class="selector-class">.stdout</span><span class="selector-class">.encoding</span> </span><br><span class="line">在 Windows 下，如果你的系统是简体中文，一般输出会是 cp936 </span><br><span class="line"></span><br><span class="line">import codecs </span><br><span class="line">codecs.lookup(<span class="string">'cp936'</span>)<span class="selector-class">.name</span> </span><br><span class="line"><span class="string">'gbk'</span></span><br></pre></td></tr></table></figure><blockquote><p>这就是在 Windows 终端里面使用的编码。在 print 的时候，无论字符串源采取什么样的编码，最终输出的字符串的编码必须跟 shell 的编码一致，也就是说:<br>print some_string<br>Python 会做这样一个动作：<br>codecs.encode(some_string, coding, errors=’strict’)<br>在你遇到的情况下，some_string 是一个 unicode 字符串，coding 是 gbk。由于你的 unicode 字符串里面包含 gbk 字符集里面没有的字符，Python 就会抛出一个 UnicodeEncodeError. </p></blockquote><p>对于输出到文件中情况是类似的，Python2 的 open() 函数不会传入 encoding，以 ‘w’ 方式打开文件，如果写入 unicode 字符串，Python 会获取当前默认的编码，然后以此种编码把字符串写入文件。可惜的是，“默认编码”只是 Python 自己默认的，在 Objects/unicodeobject.c 中，用一个全局变量 unicode_default_encoding 来表示默认的编码： </p><blockquote><p>/* Default encoding to use and assume when NULL is passed as encoding<br>    parameter; it is initialized by _PyUnicode_Init(). </p><p>​    Always use the PyUnicode_SetDefaultEncoding() and<br>​    PyUnicode_GetDefaultEncoding() APIs to access this global. </p></blockquote><p><code>static char unicode_default_encoding[100 + 1] = &quot;ascii&quot;;</code><br>这个值在 Python 中有C接口（PyUnicode_SetDefaultEncoding）去改变，但可惜的是没有 Python 层的接口。<br>所以在调用到类似 file.write(some_string) 的时候，首先会有这样的编码过程:<br>codecs.encode(some_string, coding, errors=’restrict’)<br>当你的 some_string 是一个 unicode 字符串，并且包含 ascii 字符串不存在的字符时，就会抛出一个 UnicodeEncodeError。 </p><blockquote><p>所以，为了解决这个问题，可以这么处理： </p><p>(1) 在 Windows shell 下面:<br>     &gt;&gt;&gt; print some_string.encode(‘gbk’, errors=’ignore’) # replace 也可，只要不是 restrict<br>(2) 在写入文件时，两种方法：<br>    a. 忽略不存在的字符，同(1)<br>    &gt;&gt;&gt; f = open(filename, ‘w’)<br>    &gt;&gt;&gt; f.write(some_string.encode(‘gbk’, errors=’ignore’)<br>    b. byte 方式写入：<br>    &gt;&gt;&gt; f = open(filename, ‘wb’)<br>    &gt;&gt;&gt; f.write(some_string.encode(‘utf-8’))<br>​    a 会损失字符，b 不会。 </p></blockquote><p>来自<a href="http://www.newsmth.net/nForum/#!article/Python/124657" target="_blank" rel="noopener">http://www.newsmth.net/nForum/#!article/Python/124657</a></p><hr><h3 id="如果CMD命令行是gbk编码的，则输出的utf-8字符有些也显示不了"><a href="#如果CMD命令行是gbk编码的，则输出的utf-8字符有些也显示不了" class="headerlink" title="如果CMD命令行是gbk编码的，则输出的utf-8字符有些也显示不了"></a>如果CMD命令行是gbk编码的，则输出的utf-8字符有些也显示不了</h3><hr><h4 id="Win10-临时修改cmd命令行窗口UTF-8编码"><a href="#Win10-临时修改cmd命令行窗口UTF-8编码" class="headerlink" title="Win10 临时修改cmd命令行窗口UTF-8编码"></a>Win10 临时修改cmd命令行窗口UTF-8编码</h4><blockquote><p>只作用于当前打开的窗口</p><p>进入cmd窗口后，直接执行“chcp 65001”，执行完后，cmd的编码格式就是UTF-8</p></blockquote><p><a href="https://blog.csdn.net/tfs411082561/article/details/78416569" target="_blank" rel="noopener">永远修改</a></p><h4 id="Windows-控制台使用注册表永久修改编码问题"><a href="#Windows-控制台使用注册表永久修改编码问题" class="headerlink" title="Windows 控制台使用注册表永久修改编码问题"></a>Windows 控制台使用注册表永久修改编码问题</h4><h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><p>1.在cmd中输入<code>regedit</code>进入注册表</p><p>2.找到<code>HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe</code></p><p>3.新建一个 DWORD（32位值）,命名为CodePage，值设为65001 </p><p>4.已有CodePage的话，修改它，改为十进制，65001</p><h5 id="方法二：-亲测有效"><a href="#方法二：-亲测有效" class="headerlink" title="方法二：(亲测有效)"></a>方法二：(亲测有效)</h5><p>1.新建一个cmd.reg注册表文件:</p><p>2.内容输入如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe]</span><br><span class="line"><span class="string">"CodePage"</span>=<span class="string">dword:</span><span class="number">0000</span>fde9</span><br><span class="line"><span class="string">"FontFamily"</span>=<span class="string">dword:</span><span class="number">00000036</span></span><br><span class="line"><span class="string">"FontWeight"</span>=<span class="string">dword:</span><span class="number">00000190</span></span><br><span class="line"><span class="string">"FaceName"</span>=<span class="string">"Consolas"</span></span><br><span class="line"><span class="string">"ScreenBufferSize"</span>=<span class="string">dword:</span><span class="number">232900</span>d2</span><br><span class="line"><span class="string">"WindowSize"</span>=<span class="string">dword:</span><span class="number">002</span>b00d2</span><br></pre></td></tr></table></figure><p>3.双击运行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写爬虫过程中碰到的编码问题&quot;&gt;&lt;a href=&quot;#写爬虫过程中碰到的编码问题&quot; class=&quot;headerlink&quot; title=&quot;写爬虫过程中碰到的编码问题&quot;&gt;&lt;/a&gt;写爬虫过程中碰到的编码问题&lt;/h2&gt;&lt;h4 id=&quot;遇到-‘-uxxxx-‘-的16进制字符串
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="爬虫" scheme="https://nymrli.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本基础</title>
    <link href="https://nymrli.top/2018/11/08/Shell%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80/"/>
    <id>https://nymrli.top/2018/11/08/Shell脚本基础/</id>
    <published>2018-11-08T04:19:49.000Z</published>
    <updated>2018-11-08T04:20:26.700Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><h3 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h3><p>打开文本编辑器，新建一个文件，扩展名为sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用php写shell 脚本，扩展名就用php好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#!/usr/bin/php</span></span><br></pre></td></tr></table></figure><p>“#!”是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行。</p><h4 id="作为可执行程序"><a href="#作为可执行程序" class="headerlink" title="作为可执行程序"></a>作为可执行程序</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x <span class="keyword">test</span>.<span class="keyword">sh</span></span><br><span class="line">./<span class="keyword">test</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p>注意，一定要写成./test.sh，而不是test.sh，运行其它二进制的程序也一样，直接写test.sh，linux系统会去PATH里寻找有没有叫test.sh的，而只有/bin, /sbin, /usr/bin，/usr/sbin等在PATH里，你的当前目录通常不在PATH里，所以写成test.sh是会找不到命令的，要用./test.sh告诉系统说，就在当前目录找。</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h5><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"qinjx"</span></span><br><span class="line">▲.变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。</span><br></pre></td></tr></table></figure><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"qinjx"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"I am good at <span class="variable">$&#123;skill&#125;</span>Script"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了，哈哈），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。</p><h5 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">str</span>=<span class="string">'this is a string'</span></span><br></pre></td></tr></table></figure><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</li><li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）</li></ul><h5 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">your_name</span>=<span class="string">'qinjx'</span></span><br><span class="line"><span class="attr">str</span>=<span class="string">"Hello, I know your are \"$your_name\"! \n"</span></span><br></pre></td></tr></table></figure><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><h5 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">your_name</span>=<span class="string">"qinjx"</span></span><br><span class="line"><span class="attribute">greeting</span>=<span class="string">"hello, "</span><span class="variable">$your_name</span><span class="string">" !"</span></span><br><span class="line"><span class="attribute">greeting_1</span>=<span class="string">"hello, <span class="variable">$&#123;your_name&#125;</span> !"</span></span><br><span class="line"></span><br><span class="line">echo <span class="variable">$greeting</span> <span class="variable">$greeting_1</span></span><br></pre></td></tr></table></figure><h5 id="获取字符串长度："><a href="#获取字符串长度：" class="headerlink" title="获取字符串长度："></a>获取字符串长度：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"abcd"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出：4</span></span><br></pre></td></tr></table></figure><h5 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>=<span class="string">"alibaba is a great company"</span></span><br><span class="line">echo $&#123;<span class="built_in">string</span>:<span class="number">1</span>:<span class="number">4</span>&#125; <span class="comment">#输出：liba</span></span><br></pre></td></tr></table></figure><h5 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h5><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>=<span class="string">"alibaba is a great company"</span></span><br><span class="line">echo `<span class="built_in">expr</span> index <span class="string">"$string"</span> <span class="keyword">is</span>`<span class="comment">#输出：3，这个语句的意思是：找出字母i在这名话中的位置，要在linux下运行，mac下会报错</span></span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>和Java、PHP等语言不一样，sh的流程控制不可为空，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">"q"</span>])) &#123;</span></span><br><span class="line"><span class="php">search(q);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php"><span class="comment">//do nothing</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><p>在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else。</p><p>还要注意，sh里的if [ $foo -eq 0 ]，这个方括号跟Java/PHP里if后面的圆括号大不相同，它是一个可执行程序（和ls, grep一样），想不到吧？在CentOS上，它在/usr/bin目录下：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ll /usr/bin/[</span><br><span class="line">-rwxr-xr-x. <span class="number">1</span> root root <span class="number">33408</span> <span class="number">6</span>月  <span class="number">22</span> <span class="number">2012</span> /usr/bin/[</span><br></pre></td></tr></table></figure><p>正因为方括号在这里是一个可执行程序，方括号后面必须加空格，不能写成if [$foo -eq 0]</p><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line">then</span><br><span class="line"><span class="keyword">command</span>1 </span><br><span class="line"><span class="keyword">command</span>2</span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="keyword">command</span>N </span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>写成一行（适用于终端命令提示符）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> `ps -ef | grep ssh`;  <span class="keyword">then</span> <span class="built_in">echo</span> hello; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>末尾的fi就是if倒过来拼写，后面还会遇到类似的</p><h4 id="if-else-1"><a href="#if-else-1" class="headerlink" title="if else"></a>if else</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line">then</span><br><span class="line"><span class="keyword">command</span>1 </span><br><span class="line"><span class="keyword">command</span>2</span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="keyword">command</span>N</span><br><span class="line">else</span><br><span class="line"><span class="keyword">command</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else-if else"></a>if else-if else</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">command1</span><br><span class="line"><span class="keyword">elif</span> condition2</span><br><span class="line">command2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">commandN</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="for-while"><a href="#for-while" class="headerlink" title="for while"></a>for while</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>在开篇的示例里演示过了：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 <span class="string">...</span> itemN</span><br><span class="line">do</span><br><span class="line"><span class="keyword">command</span>1</span><br><span class="line"><span class="keyword">command</span>2</span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="keyword">command</span>N</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>写成一行：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">var</span> <span class="keyword">in</span> item1 item2 ... itemN; <span class="keyword">do</span> command1; command2… done;</span><br></pre></td></tr></table></figure><h4 id="C风格的for"><a href="#C风格的for" class="headerlink" title="C风格的for"></a>C风格的for</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for <span class="comment">(( EXP1; EXP2; EXP3 )</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">comma<span class="symbol">nd1</span></span><br><span class="line">comma<span class="symbol">nd2</span></span><br><span class="line">comma<span class="symbol">nd3</span></span><br><span class="line"><span class="keyword">do</span><span class="symbol">ne</span></span><br></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for (( <span class="comment">; ; ))</span></span><br></pre></td></tr></table></figure><h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">until</span> condition</span><br><span class="line"><span class="built_in">do</span></span><br><span class="line"><span class="keyword">command</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">case <span class="string">"$&#123;opt&#125;"</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">"Install-Puppet-Server"</span> )</span><br><span class="line">install_master <span class="variable">$1</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line"><span class="string">"Install-Puppet-Client"</span> )</span><br><span class="line">install_client <span class="variable">$1</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line"><span class="string">"Config-Puppet-Server"</span> )</span><br><span class="line">config_puppet_master</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line"><span class="string">"Config-Puppet-Client"</span> )</span><br><span class="line">config_puppet_client</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line"><span class="string">"Exit"</span> )</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">* ) echo <span class="string">"Bad option, please choose again"</span></span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break</p><p>学习自：<a href="https://github.com/qinjx/30min_guides/blob/master/shell.md#if-else" target="_blank" rel="noopener">Shell脚本编程30分钟入门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Shell&quot;&gt;&lt;a href=&quot;#Shell&quot; class=&quot;headerlink&quot; title=&quot;Shell&quot;&gt;&lt;/a&gt;Shell&lt;/h3&gt;&lt;h3 id=&quot;编写&quot;&gt;&lt;a href=&quot;#编写&quot; class=&quot;headerlink&quot; title=&quot;编写&quot;&gt;&lt;/a&gt;编
      
    
    </summary>
    
    
      <category term="Shell" scheme="https://nymrli.top/tags/Shell/"/>
    
      <category term="linux" scheme="https://nymrli.top/tags/linux/"/>
    
  </entry>
  
</feed>
