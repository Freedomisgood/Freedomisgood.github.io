<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mrli&#39;s Blog</title>
  
  <subtitle>别装作很努力，结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2022-04-12T14:29:28.958Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>Mrli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>总得学点Elasticsearch吧</title>
    <link href="https://nymrli.top/2022/04/11/%E6%80%BB%E5%BE%97%E5%AD%A6%E7%82%B9Elasticsearch%E5%90%A7/"/>
    <id>https://nymrli.top/2022/04/11/总得学点Elasticsearch吧/</id>
    <published>2022-04-11T14:18:04.000Z</published>
    <updated>2022-04-12T14:29:28.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="倒排索引"><a class="markdownIt-Anchor" href="#倒排索引"></a> 倒排索引</h2><p>反向索引（inverted index）更熟悉的名字是倒排索引。</p><p>什么是倒排索引: 倒排索引也叫反向索引，通俗来讲正向索引是通过key找value，反向索引则是通过value找key。</p><p>举个具体的例子：我们一般是通过<strong>标题</strong>来找<strong>文章内容</strong>，即通过目录（正向索引）；而反向索引的运用场景就是通过<strong>内容</strong>来找到是<strong>哪一篇文章</strong>（标题，作者……），而怎么建立反向索引呢？怎么更快更好地找到结果呢？这个就是<strong>搜索引擎</strong>做的事了、</p><p>正向索引：例如一个“文档1”经过分词，提取了20个关键词，每个关键词都会记录它在文档中的出现次数和出现位置。那我们就可以直接通过对&quot;文档1&quot;Document这个结构进行解析，从而得到每个关键词的信息。</p><p>反向索引：那么我们希望通过关键词来找到它在哪几篇“文档”中出现怎么办呢？那么其实在遍历文章的时候，如果当前文章出现了keyword，则对Keyword的结构（简单点可以想成是一个hashmap）添加上这篇文章的信息</p><p>再举个生活例子： 当用户在主页上搜索关键词“<u>华为手机</u>”时，假设只存在正向索引（forward index），那么就需要<strong>实时扫描完索引库中的所有文档</strong>，找出所有包含关键词“华为手机”的文档，再根据打分模型进行打分，排出名次后呈现给用户。因为互联网上收录在搜索引擎中的文档的数目是个天文数字，这样的索引结构根本无法满足<strong>实时</strong>返回排名结果的要求。</p><p>所以，<strong>搜索引擎</strong>会将正向索引<strong>重新构建</strong>为倒排索引，即把<strong>文件ID</strong>对应到<strong>关键词</strong>的映射转换为<strong>关键词到文件ID的映射</strong>，每个关键词都对应着一系列的文件，这些文件中都出现这个关键词。从而大大减少了遍历的大小，加快了检索的速度。</p><p><strong>本质上是通过设计数据结构，并花了额外的空间去换检索时的时间。</strong></p><p>论文查重就是这种的典型应用：<a href="https://www.bilibili.com/video/BV1iK4y1M7XR?spm_id_from=444.41.0.0" target="_blank" rel="noopener">B站视频——论文查重是如何实现的</a>——将段落通过标点符号分隔成一个个句子，再将句子每每7个分隔成一个个section，比如长度为9的句子则可以分成3个section，预处理创建<code>preDict={&quot;section1&quot;: [doc1, ], &quot;section2&quot;: [doc1, ], &quot;section&quot;3: [doc1, ]}</code>的倒排索引，当进行查重时，也是分隔成句子后每每7个字进行检查是否在preDict中，如果在则是知道了在哪些文章中出现（最简单版）。视频后又提出了增加LCS最长公共子串的增强，有效地检验出了添加“的”字or调整字位置的偷鸡方法——建立4字倒排，如果4个字已经出现在了别的文章A里，则把当前句子S1与文章A中的句子S2进行LCS，如果公共子串长度大于7则判定为重复。</p><h2 id="搜索引擎elasticsearch"><a class="markdownIt-Anchor" href="#搜索引擎elasticsearch"></a> 搜索引擎——Elasticsearch</h2><p>Elastic Stack 如果你没有听过，那么 ELK 一定听过。ELK 是三款软件的简称，分别是 <code>Elasticsearch</code>、<code>Logstash</code>、<code>Kibana</code> 组成。那什么是 Elasticsearch呢？——全文搜索是很多网站常见功能，比如 GitHub 站内搜索、JD 商品搜索、B 站视频搜索。<code>Elasticsearch</code> 是当今最火的<strong>搜索引擎</strong>之一，它的底层基于另外一个 <code>java</code> 开源搜索引擎 <code>Lucene</code>，是一款开源分布式搜索引擎，并且提供了一系列 <code>REST API</code> 操作接口。</p><h2 id="es的核心概念"><a class="markdownIt-Anchor" href="#es的核心概念"></a> ES的核心概念</h2><ol><li>索引（Index）：ES将数据存储于一个或多个索引中。类比传统的关系型数据库领域来说，索引相当于SQL中的一个数据库，或者一个数据存储方案（schema）。索引由其名称（必须为全小写字符）进行标识。一个ES集群中可以按需创建任意数目的索引。</li><li>类型（type）：类型是索引内部的逻辑分区（category/partition），一个索引内部可定义一个或多个类型（type）。类比传统的关系型数据库领域来说，类型相当于“表”。</li><li>文档（Document）：文档是索引和搜索的原子单位，它是包含了一个或多个域（Fild）的容器，每个域拥有一个名字及一个或多个值，有多个值的域通常称为“多值域”，文档基于JSON格式进行表示。每个文档可以存储不同的域集，但同一类型下的文档至应该有某种程度上的相似之处。</li><li>集群（Cluster）：一个或者多个拥有相同cluster…name配置的节点组成，它们共同承担数据和负载的压力。</li><li>节点（Node）：一个运行中的Elasticsearch实例称为一个节点。<br>ES集群中的节点有三种不同的类型：<ul><li>主节点：负责管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等。主节点并不需要涉及到文档级别的变更和搜索等操作。可以通过属性node.masteri进行设置。</li><li>数据节点：存储数据和其对应的倒排索引。默认每一个节点都是数据节点（包括主节点），可以通过ode.data属性进行设置。</li><li>协调节点：如果node.master和node.data属性均为false，则此节点称为协调节点，用来响应客户请求，均衡每个节点的负载。</li></ul></li></ol><h2 id="python操作elasticsearch"><a class="markdownIt-Anchor" href="#python操作elasticsearch"></a> Python操作Elasticsearch</h2><p>安装es库<code>pip install Elasticsearch</code></p><p>参考：</p><ul><li><a href="https://www.bilibili.com/video/BV1CJ411L7uV?from=search&amp;seid=16833887069453710612&amp;spm_id_from=333.337.0.0" target="_blank" rel="noopener"><em>python</em>操作<em>ElasticSearch</em>-创建、插入、检索</a></li><li><a href="https://www.bilibili.com/video/BV1Nk4y1R7Hf?p=5&amp;spm_id_from=pageDriver" target="_blank" rel="noopener">【狂神说Java】ElasticSearch搜索实战仿京东搜索</a>——Java操作ES+仿京东搜索+vue与thymeleft单页面实现前端</li></ul><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><h2 id="docker-运行-elasticsearch"><a class="markdownIt-Anchor" href="#docker-运行-elasticsearch"></a> docker 运行 Elasticsearch</h2><blockquote><p>根据官网推荐，ES配套 Kibana 只能安装 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Fkibana%2F6.8%2Fdocker.html" target="_blank" rel="noopener">6.8.19</a>， 所以安装</p></blockquote><ol><li><p>拉取镜像:<code>docker pull docker.io/elasticsearch:7.17.2</code>，拉取其他版本可见<a href="#%E6%9F%A5%E7%9C%8B%E9%95%9C%E5%83%8F%E7%89%88%E6%9C%AC%EF%BC%9Adocker-search-tag">查看镜像版本：docker-search-tag</a></p></li><li><p>es配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/apollo3d/cl/dockerdata/elasticsearch/config </span><br><span class="line">mkdir -p /home/apollo3d/cl/dockerdata/elasticsearch/data</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http.host: 0.0.0.0"</span> &gt;&gt; /home/apollo3d/cl/dockerdata/elasticsearch/config/elasticsearch.yml</span><br></pre></td></tr></table></figure></li><li><p>启动容器:<code>docker run --name es -p 9200:9200 -p 9300:9300 \ -e &quot;discovery.type=single-node&quot; \ -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; \ -v /home/apollo3d/dockerdata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \ -v /home/apollo3d/dockerdata/elasticsearch/data:/usr/share/elasticsearch/data \ -v /home/apollo3d/dockerdata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \ -d docker.io/elasticsearch:7.17.2</code>，注：<code>&lt;image_id&gt;</code>可以通过<code>docker images</code>查看刚刚pull下来的镜像；需要去ESC上打开防火墙的指定端口；</p></li><li><p>测试：浏览器访问 Elasticsearch 地址：<code>ECS_IP:9200</code>， 如果返回JSON数据则<strong>启动正确</strong></p></li><li><p>安装 ik 分词器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入es容器</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it es bash</span><br><span class="line"><span class="comment"># 下载ik分词器</span></span><br><span class="line">$ ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.1.1/elasticsearch-analysis-ik-7.1.1.zip</span><br><span class="line"><span class="comment"># 退出容器</span></span><br><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li><li><p>安装 ik 分词器后重启 Elasticsearch：<code>docker restart es</code></p></li><li><p>postman 测试 ik 分词器（注意：把 Content-Type 设置为 application/json ）</p></li></ol><h2 id="启动-es-head-可视化界面"><a class="markdownIt-Anchor" href="#启动-es-head-可视化界面"></a> 启动 es-head (可视化界面):</h2><blockquote><p>Elasticsearch 5.x后不支持插件，head作为单独服务独立运行。</p></blockquote><ol><li><p>拉取镜像：<code>docker pull mobz/elasticsearch-head:5</code></p></li><li><p>启动容器：<code>docker run -d -p 9100:9100 --name esh elasticsearch-head</code></p></li><li><p>访问 es-head：<code>ECS_IP:9100</code></p><p>当你输入 <a href="https://link.zhihu.com/?target=http%3A//192.168.232.128%3A9200/" target="_blank" rel="noopener">http://192.168.232.128:9200/</a> 点击连接时，会发现无法连接。是因为前后端分离开发，存在跨域问题，需要在服务端做 CORS 的配置。我们再次进入 Elasticsearch 容器内部，修改 <code>elasticsearch.yml</code> 配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it es /bin/bash</span><br><span class="line">[root@7f213e9fb6bb elasticsearch]<span class="comment"># vi config/elasticsearch.yml</span></span><br><span class="line"><span class="comment"># 添加如下两条配置，注意冒号后面有空格，保存并退出。</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span> </span><br><span class="line">http.cors.allow-origin: <span class="string">"*"</span></span><br></pre></td></tr></table></figure></li><li><p>最后退出容器，并重启 Elasticsearch: <code>docker restart esh</code></p></li><li><p>再次访问 es-head，就能看到可视化的界面了。</p></li></ol><h2 id="启动-kibana可视化界面"><a class="markdownIt-Anchor" href="#启动-kibana可视化界面"></a> ★启动 kibana（可视化界面）</h2><blockquote><p>Kibana 是为 <a href="https://so.csdn.net/so/search?q=Elasticsearch&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">Elasticsearch</a>设计的开源分析和可视化平台。可以使用 Kibana 来搜索，查看存储在 Elasticsearch 索引中的数据并与之交互。你可以很容易实现高级的数据分析和可视化，并且以<u>图表的形式</u>展现出来。</p><p>是ELK技术栈中的K，也是ES比较主流的可视化界面，也是官方推荐的</p><p>Elasticsearch 5.x后不支持插件，跟Elasticsearch  head一样，kibana需要作为单独服务独立运行。</p></blockquote><ol><li><p>拉取镜像：<code>docker pull docker.io/kibana:7.17.2</code></p></li><li><p>配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/dockerdata/elk7/kibana/config/</span><br><span class="line">vi ~/dockerdata/elk7/kibana/config/kibana.yml</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ** THIS IS AN AUTO-GENERATED FILE **</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default Kibana configuration for docker target</span></span><br><span class="line"></span><br><span class="line">server.name: kibana</span><br><span class="line">server.host: <span class="string">"0"</span> <span class="comment"># 对外访问kibana的地址</span></span><br><span class="line">elasticsearch.hosts: [ <span class="string">"http://127.0.0.1:9200"</span> ]<span class="comment"># elasticsearch的地址</span></span><br><span class="line">xpack.monitoring.ui.container.elasticsearch.enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>启动容器: <code>docker run -d --name=kibana --restart=always -p 5601:5601 -v ~/dockerdata/elk7/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml kibana:7.17.2</code></p></li><li><p>查看日志: <code>docker logs -f kibana</code></p></li><li><p>等待30秒，如果出现以下信息，说明启动成功了：<code>{&quot;type&quot;:&quot;log&quot;,&quot;@timestamp&quot;:&quot;2020-08-27T03:00:28Z&quot;,&quot;tags&quot;:[&quot;listening&quot;,&quot;info&quot;],&quot;pid&quot;:6,&quot;message&quot;:&quot;Server running at http://0:5601&quot;}</code></p></li><li><p>访问页面：<code>ECS_IP:5601</code>就可以看到Welcome to Kibana啦~</p></li></ol><p>Kibana server is not ready yet问题：</p><ul><li><a href="https://blog.csdn.net/fbvukn/article/details/107289027?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;utm_relevant_index=2" target="_blank" rel="noopener">kibana解决Kibana server is not ready yet问题</a></li><li><a href="https://blog.csdn.net/whatday/article/details/107879989" target="_blank" rel="noopener">kibana 报错 server is not ready yet 可能的原因</a></li></ul><h2 id="docker-compose"><a class="markdownIt-Anchor" href="#docker-compose"></a> docker-compose:</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    elasticsearch:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">docker.io/elasticsearch:7.17.2</span></span><br><span class="line"><span class="attr">        container_name:</span> <span class="string">es2</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">discovery.type=single-node</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">           -</span> <span class="string">"9200:9200"</span></span><br><span class="line"><span class="bullet">           -</span> <span class="string">"9300:9300"</span></span><br><span class="line"><span class="attr">    kinaba:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">docker.io/kibana:7.17.2</span></span><br><span class="line"><span class="attr">        container_name:</span> <span class="string">kibana2</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"5601:5601"</span></span><br><span class="line"><span class="attr">        volumes:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">/home/apollo3d/cl/dockerdata/elk7/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml</span></span><br><span class="line"><span class="attr">        depends_on:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">elasticsearch</span></span><br></pre></td></tr></table></figure><h2 id="查看镜像版本docker-search-tag"><a class="markdownIt-Anchor" href="#查看镜像版本docker-search-tag"></a> 查看镜像版本：docker-search-tag</h2><p><a href="http://xn--docker-show-repo-tag-2x06a431biq1j2e4clo2cqoe.sh" target="_blank" rel="noopener">使用自制脚本docker-show-repo-tag.sh</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Simple script that will display docker repository tags.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Usage:</span></span><br><span class="line"><span class="comment">#   $ docker-show-repo-tags.sh ubuntu centos</span></span><br><span class="line"><span class="keyword">for</span> Repo <span class="keyword">in</span> $* ; <span class="keyword">do</span></span><br><span class="line">  curl -s -S <span class="string">"https://registry.hub.docker.com/v2/repositories/library/<span class="variable">$Repo</span>/tags/"</span> | \</span><br><span class="line">    sed -e <span class="string">'s/,/,\n/g'</span> -e <span class="string">'s/\[/\[\n/g'</span> | \</span><br><span class="line">    grep <span class="string">'"name"'</span> | \</span><br><span class="line">    awk -F\<span class="string">" '&#123;print <span class="variable">$4</span>;&#125;' | \</span></span><br><span class="line"><span class="string">    sort -fu | \</span></span><br><span class="line"><span class="string">    sed -e "</span>s/^/<span class="variable">$&#123;Repo&#125;</span>:/<span class="string">"</span></span><br><span class="line"><span class="string">done</span></span><br></pre></td></tr></table></figure><p>然后在终端运行<code>$ ./docker-show-repo-tags.sh elasticsearch</code>即可获得结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">elasticsearch:8.0.1</span><br><span class="line">elasticsearch:8.1.0</span><br><span class="line">elasticsearch:8.1.1</span><br><span class="line">elasticsearch:8.1.2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;倒排索引&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#倒排索引&quot;&gt;&lt;/a&gt; 倒排索引&lt;/h2&gt;
&lt;p&gt;反向索引（inverted index）更熟悉的名字是倒排索引。&lt;/p&gt;
&lt;p&gt;什么是倒排索引: 倒排索引也叫反向索引，通俗来讲正向
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法与数据结构——滑动窗口、尺取法</title>
    <link href="https://nymrli.top/2022/04/10/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>https://nymrli.top/2022/04/10/算法与数据结构——滑动窗口/</id>
    <published>2022-04-10T03:14:53.000Z</published>
    <updated>2022-04-11T08:35:58.656Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Sliding window algorithm is used to perform required operation on specific window size of given large buffer or array.滑动窗口算法是在给定<strong>特定窗口大小</strong>的<u>数组或字符串</u>上执行要求的操作。</p><p>This technique shows how a nested for loop in few problems can be converted to single for loop and hence reducing the time complexity.该技术可以将一部分问题中的嵌套循环转变为一个单循环，因此它可以减少时间复杂度。</p></blockquote><h2 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h2><p>滑动窗口是一种基于双指针的一种思想，两个指针指向的元素之间形成一个窗口，可以看做是一种双指针方法的特例。</p><p>窗口的做法分为定长窗口和不定长窗口，有些人把涉及窗口移动的都统称为<strong>滑动窗口</strong>做法。而在此，我们进行进一步的细分：</p><ul><li>定长滑动窗口</li><li>变长滑动窗口——尺取法</li></ul><p><strong>应用</strong>：</p><blockquote><p>利用窗口的特性，可以用来解决一些查找满足一定条件的<strong>连续区间的</strong>性质（长度等）的问题。由于区间连续，因此当区间发生变化时，可以通过<u>旧有的计算结果</u>进行修改，从而对搜索空间进行剪枝，这样便减少了重复计算，降低了时间复杂度。</p></blockquote><p>Q：那么，具体什么情况可以用滑动窗口来解决实际问题呢？</p><ol><li>一般给出的数据结构是<u>数组或者字符串</u></li><li>求取某个子串或者<u>子序列</u><u>最长最短等最值问题</u>或者求某个目标值时</li><li>该问题<u>本身可以通过暴力求解</u>——★滑动窗口跟双指针一样，针对一些问题能降低时间复杂度。</li></ol><h2 id="核心思路"><a class="markdownIt-Anchor" href="#核心思路"></a> <strong>核心思路</strong></h2><p><strong>窗口的形成</strong></p><p>在具体使用之前，我们知道窗口实际是两个指针之间形成的区域，那关键就是这两个指针是如何移动的。</p><p>《挑战程序设计竞赛》这本书中把滑动窗口叫做「虫取法」，这也非常生动形象。因为滑动窗口的两个指针移动的过程和虫子爬动的过程非常像：前脚(right指针)不动，把后脚(left指针)移动过来；后脚不动，把前脚向前移动。</p><p>滑动窗口中用到了左右两个指针，它们移动的思路是：<strong>以右指针作为驱动，拖着左指针向前走。<u>右指针每次只移动一步，而左指针在内部 while 循环中每次可能移动多步</u>。右指针是主动前移，探索未知的新区域；左指针是被迫移动，负责寻找满足题意的区间</strong>。</p><p>为了得到符合要求的最长子数组的长度，应遵循以下两点原则：</p><ul><li>当 start 的值固定时，end 的值应尽可能大；</li><li>当 end 的值固定时, start 的值应尽可能小。</li></ul><p><strong>模板的执行思想是：</strong></p><ol><li>定义两个指针 left 和 right 分别指向区间的开头和结尾，注意是<strong>闭区间</strong>；定义 sums 用来统计该区间内的各个字符出现次数；</li><li>第一重 while 循环是为了判断 right 指针的位置是否超出了数组边界；当 right 每次到了新位置，需要增加 right 指针的求和/计数 --&gt; sum；</li><li>第二重 while 循环是让 left 指针向右移动到 [left, right] 区间符合题意的位置；当 left 每次移动到了新位置，需要减少 left 指针的求和/计数；</li><li>在第二重 while 循环之后，成功找到了一个符合题意的 [left, right] 区间，便跳出循环，更新题目要求最大的区间长度，即 <code>res = max(res, right - left + 1)</code>。</li><li>right 指针每次向右移动一步，开始探索新的区间。</li></ol><h2 id="代码模板"><a class="markdownIt-Anchor" href="#代码模板"></a> 代码模板</h2><h3 id="变长窗口模板"><a class="markdownIt-Anchor" href="#变长窗口模板"></a> 变长窗口模板</h3><p>伪代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 滑动窗口模板</span></span><br><span class="line">left,right = <span class="number">0</span>, (<span class="number">0</span> <span class="keyword">or</span> <span class="number">1</span>)</span><br><span class="line">ans = target = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> right &lt; len(nums):</span><br><span class="line">   根据 right 更新 target 值</span><br><span class="line">   <span class="keyword">while</span> 窗口内数据不满足要求</span><br><span class="line">      <span class="comment"># 1. 更新 target 值</span></span><br><span class="line">      <span class="comment"># 2. 收缩左边界 ==&gt; 使得新窗口满足要求</span></span><br><span class="line">      <span class="comment"># or: 更新 ans： 窗口相关最小值，则在此更新</span></span><br><span class="line">    <span class="comment"># or: 更新 ans： 求窗口相关最大值，则在此更新</span></span><br><span class="line">    更新right(移动右边界)</span><br><span class="line">返回 ans</span><br></pre></td></tr></table></figure><p>具象化的Python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findSubArray</span><span class="params">(nums)</span>:</span></span><br><span class="line">    N = len(nums) <span class="comment"># 数组/字符串长度</span></span><br><span class="line">    left, right = <span class="number">0</span>, <span class="number">0</span> <span class="comment"># 双指针，表示当前遍历的区间[left, right]，闭区间</span></span><br><span class="line">    sums = <span class="number">0</span> <span class="comment"># 用于统计 子数组/子区间 是否有效，根据题目可能会改成求和/计数</span></span><br><span class="line">    res = <span class="number">0</span> <span class="comment"># 保存最大的满足题目要求的 子数组/子串 长度</span></span><br><span class="line">    <span class="keyword">while</span> right &lt; N: <span class="comment"># 当右边的指针没有搜索到 数组/字符串 的结尾</span></span><br><span class="line">        sums += nums[right] <span class="comment"># 增加当前右边指针的数字/字符的求和/计数</span></span><br><span class="line">        <span class="keyword">while</span> 区间[left, right]不符合题意：<span class="comment"># 此时需要一直移动左指针，直至找到一个符合题意的区间</span></span><br><span class="line">            sums -= nums[left] <span class="comment"># 移动左指针前需要从counter中减少left位置字符的求和/计数</span></span><br><span class="line">            left += <span class="number">1</span> <span class="comment"># 真正的移动左指针，注意顺序不能跟上面一行代码写反</span></span><br><span class="line">        <span class="comment"># 到 while 结束时，我们找到了一个符合题意要求的 子数组/子串</span></span><br><span class="line">        res = max(res, right - left + <span class="number">1</span>) <span class="comment"># 需要更新结果</span></span><br><span class="line">        right += <span class="number">1</span> <span class="comment"># 移动右指针，去探索新的区间</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>另一种模板：</p><blockquote><p>(right++在前)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">string s, t;</span><br><span class="line">    <span class="comment">// 在 s 中寻找 t 的「最小覆盖子串」</span></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    string res = s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(right &lt; s.size()) &#123;</span><br><span class="line">        window.add(s[right]);</span><br><span class="line">        right++;</span><br><span class="line">        <span class="comment">// 如果符合要求，说明窗口构造完成，移动 left 缩小窗口</span></span><br><span class="line">        <span class="keyword">while</span> (window 符合要求) &#123;</span><br><span class="line">            <span class="comment">// 如果这个窗口的子串更短，则更新 res</span></span><br><span class="line">            <span class="comment">// or: ans更新位置</span></span><br><span class="line">            res = minLen(res, window);</span><br><span class="line">            window.remove(s[left]);</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// or: ans更新位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure><h3 id="固定长窗口模板"><a class="markdownIt-Anchor" href="#固定长窗口模板"></a> <a href="https://www.cnblogs.com/huansky/p/13488234.html" target="_blank" rel="noopener">固定长窗口模板：</a></h3><blockquote><p>right更新在第一层while最后，且while中没有<code>if (right &gt; k)</code>类似的代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxVowels</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">int</span> maxAns = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 初始构造定长窗口</span></span><br><span class="line">        <span class="keyword">while</span> (right &lt; k) &#123;</span><br><span class="line">            <span class="comment">// 更新这段初始化窗口中的 target 值</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// ★更新 ans 值 maxAns = Math.max(maxAns, );</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 让 right (有边界)</span></span><br><span class="line">        <span class="keyword">while</span> (right &lt; len) &#123;</span><br><span class="line">            <span class="comment">// 更新 target 值</span></span><br><span class="line">            <span class="comment">// 更新 ans 值 maxAns = Math.max(maxAns, );</span></span><br><span class="line">            right ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxAns;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">isVowel</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch == <span class="string">'a'</span> || ch == <span class="string">'e'</span> || ch == <span class="string">'i'</span> || ch == <span class="string">'o'</span> || ch == <span class="string">'u'</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种模板：</p><blockquote><ul><li>(right++在前) --&gt; 这个是可以调整的，相应地修改<code>if</code></li><li>有<code>if right &gt; k</code>的判断，即窗口是否已经构造完成</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 固定窗口大小为 k</span></span><br><span class="line">   <span class="built_in">string</span> s;</span><br><span class="line">   <span class="comment">// 在 s 中寻找窗口大小为 k 时的所包含最大元音字母个数</span></span><br><span class="line">   <span class="keyword">int</span>  right = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(right &lt; s.size()) &#123;</span><br><span class="line">       window.add(s[right]);</span><br><span class="line">       <span class="comment">// 注：如果放最后，则下面的if改成 right &gt; k</span></span><br><span class="line">       right++;</span><br><span class="line">       <span class="comment">// 如果符合要求，说明窗口构造完成，</span></span><br><span class="line">       <span class="keyword">if</span> (right&gt;=k) &#123;</span><br><span class="line">           <span class="comment">// 这是已经是一个窗口了，根据条件做一些事情</span></span><br><span class="line">          <span class="comment">// ... 可以计算窗口最大值等 </span></span><br><span class="line">           <span class="comment">// 最后不要忘记把 right - k 位置元素从窗口里面移除</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure><p>可以发现此时不需要依赖 left 指针了。因为窗口固定所以其实就没必要使用left。可以直接通过 right 指针来控制窗口。</p><p>由于窗口是固定的，因此可以轻易获取到 left 的位置，此处 left = right - k，所以在第二层while中可以通过<code>nums[right-k]</code>来获得left位置得值，从而从窗口中删除。</p><p>注： 虽然提供了两种模板，但不要贪多，跟二分模板一样，只要记住一种就行了。</p><h2 id="easy-point"><a class="markdownIt-Anchor" href="#easy-point"></a> easy point:</h2><ul><li>窗口的长度: <code>right - left + 1</code>，</li><li>假设窗口长度为k，则窗口内容为<code>[right-k+1, right-k+2, ..., right]</code>，要被剔除的<code>left</code>的索引为<code>right-k</code>：固定长窗口的题目中，可以通过right位置找到left位置。</li></ul><h2 id="一起做几题"><a class="markdownIt-Anchor" href="#一起做几题"></a> 一起做几题</h2><ul><li><a href="https://leetcode-cn.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/" target="_blank" rel="noopener">1456. 定长子串中元音的最大数目</a>——固定长窗口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxVowels</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">int</span> maxAns = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] chars = &#123;<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'u'</span>, <span class="string">'o'</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span> (right - left + <span class="number">1</span> &lt;= k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (contains(chars, s.charAt(right))) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        maxAns = Math.max(maxAns, ans);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (right &lt; len) &#123;</span><br><span class="line">            <span class="keyword">if</span> (contains(chars, s.charAt(right))) &#123;</span><br><span class="line">                ans += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 被排除的是元音</span></span><br><span class="line">            <span class="keyword">if</span> (contains(chars, s.charAt(right - k))) &#123;</span><br><span class="line">                ans -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            maxAns = Math.max(maxAns, ans);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxAns;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">char</span> chars[], <span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chars[i] == ch) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更好的做法:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxVowels</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> right =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">            sum += isYuan(s.charAt(right)) ;</span><br><span class="line">            right++;</span><br><span class="line">            <span class="keyword">if</span> (right &gt;=k) &#123;</span><br><span class="line">                max = Math.max(max, sum);</span><br><span class="line">                sum -= isYuan(s.charAt(right-k));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">isYuan</span><span class="params">(<span class="keyword">char</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s==<span class="string">'a'</span> || s==<span class="string">'e'</span> ||s==<span class="string">'i'</span> ||s==<span class="string">'o'</span> ||s==<span class="string">'u'</span> ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener"> #3 无重复字符的最长子串</a> ——用set来模拟窗口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> len;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        HashSet&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (right &lt; len) &#123;</span><br><span class="line">            <span class="comment">// 把删除之前s.charAt(right)位置内所有的字符</span></span><br><span class="line">            <span class="keyword">while</span> (set.contains(s.charAt(right))) &#123;</span><br><span class="line">                set.remove(s.charAt(left++));</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(s.charAt(right));</span><br><span class="line">            ans = Math.max(ans, right - left + <span class="number">1</span>);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/" target="_blank" rel="noopener"> #209 长度最小的子数组</a> —— 变长窗口板子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> minLen = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ( right &lt; len) &#123;</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">                <span class="comment">// 由于需要求最小, 因此这边在left收缩过程中更新minVal</span></span><br><span class="line">                minLen = Math.min(minLen, right - left +<span class="number">1</span>);</span><br><span class="line">                sum -= nums[left];</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            right ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minLen == Integer.MAX_VALUE ? <span class="number">0</span> : minLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/" target="_blank" rel="noopener"> #1004 最大连续1的个数 III</a> —— 变长窗口板子略有变形</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestOnes</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left= <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> zeroTimes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (right &lt; len) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = nums[right];</span><br><span class="line">            <span class="comment">// 把当前修改成1</span></span><br><span class="line">            <span class="keyword">if</span> (now == <span class="number">0</span>) &#123;</span><br><span class="line">                zeroTimes ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果欠了k，则需要从左边进行挪动补偿；保证下一次添加nums[right]时 k一定非负</span></span><br><span class="line">            <span class="keyword">while</span>( zeroTimes &gt; k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] == <span class="number">0</span>) &#123;</span><br><span class="line">                    zeroTimes--;</span><br><span class="line">                &#125;</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获得最大长度</span></span><br><span class="line">            ans = Math.max(ans, right - left + <span class="number">1</span>);</span><br><span class="line">            right ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode-cn.com/problems/maximum-average-subarray-i/" target="_blank" rel="noopener"> #643 子数组最大平均数 I</a>——固定长窗口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMaxAverage</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; k) &#123;</span><br><span class="line">          sum += nums[i++];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">double</span> maxV = -<span class="number">10000</span>;</span><br><span class="line">      maxV = Math.max(maxV, (<span class="keyword">double</span>) sum / k);</span><br><span class="line">      <span class="keyword">for</span> (; i &lt; nums.length; i++) &#123;</span><br><span class="line">          sum = sum - nums[i - k] + nums[i];</span><br><span class="line">          maxV = Math.max(maxV, (<span class="keyword">double</span>) sum / k);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> maxV;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode-cn.com/problems/contains-duplicate-ii/" target="_blank" rel="noopener"> #219 存在重复元素 II</a>——使用set作为窗口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化构造窗口</span></span><br><span class="line">        <span class="keyword">while</span> (set.size() &lt; k) &#123;</span><br><span class="line">            set.add(nums[right++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; nums.length)</span><br><span class="line">            <span class="keyword">if</span> (set.contains(nums[right])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            set.remove(nums[right-k]);</span><br><span class="line">            set.add(nums[right]);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/" target="_blank" rel="noopener">438. 找到字符串中所有字母异位词</a>——固定长窗口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findAnagrams</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> plen = p.length();</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 保证p比s短</span></span><br><span class="line">        <span class="keyword">if</span> (plen &gt; len) &#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">int</span>[] mp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">int</span>[] targetmp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">int</span> mpSize = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 记录p中各个字符出现的次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; plen; i++) &#123;</span><br><span class="line">            targetmp[ p.charAt(i) - <span class="string">'a'</span>] ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (right &lt; len) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(right);</span><br><span class="line">            mp[c-<span class="string">'a'</span>]++; mpSize++;</span><br><span class="line">            <span class="comment">// while和if效果是一样的，因为mp大小是通过right一次次增大的</span></span><br><span class="line">            <span class="keyword">if</span> (mpSize &gt; plen) &#123;</span><br><span class="line">                <span class="comment">// 缩小左边界</span></span><br><span class="line">                <span class="keyword">char</span> removeChar = s.charAt(right - plen);</span><br><span class="line">                mpSize--;</span><br><span class="line">                mp[removeChar-<span class="string">'a'</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right(mp, targetmp)) &#123;</span><br><span class="line">                list.add(right - plen + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            right ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span>[] chars1, <span class="keyword">int</span>[] chars2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chars1[i] != chars2[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode-cn.com/problems/get-equal-substrings-within-budget/" target="_blank" rel="noopener">1208. 尽可能使字符串相等</a>——变长窗口板子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">equalSubstring</span><span class="params">(String s, String t, <span class="keyword">int</span> maxCost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 现在已经花费的cost</span></span><br><span class="line">        <span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; len) &#123;</span><br><span class="line">            cost += Math.abs(s.charAt(right) - t.charAt(right));</span><br><span class="line">            <span class="comment">// 此时cost不满足条件</span></span><br><span class="line">            <span class="keyword">while</span> (cost &gt; maxCost) &#123;</span><br><span class="line">                <span class="comment">// 通过移动left, 将cost补偿回来</span></span><br><span class="line">                cost -= Math.abs(s.charAt(left) - t.charAt(left));</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 求最大长度，则更新在第一层while里面</span></span><br><span class="line">            ans = Math.max(ans, right - left + <span class="number">1</span>);</span><br><span class="line">            right ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode-cn.com/problems/sliding-window-maximum/" target="_blank" rel="noopener">239. 滑动窗口最大值(困难)</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[len - k + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (right &lt; len) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = nums[right];</span><br><span class="line">            <span class="comment">// 保持list递减</span></span><br><span class="line">            <span class="keyword">while</span> (!list.isEmpty() &amp;&amp; list.peekLast() &lt; now) &#123;</span><br><span class="line">                list.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            list.addLast(now);</span><br><span class="line">            right++;</span><br><span class="line">            <span class="keyword">if</span> (right &gt;= k) &#123;</span><br><span class="line">                ans[idx++] = list.peekFirst();</span><br><span class="line">                <span class="comment">// 下一次的时候将不会再在窗口里面， 所以判断是否出局</span></span><br><span class="line">                <span class="keyword">if</span> (list.peekFirst() == nums[right - k]) &#123;</span><br><span class="line">                    list.removeFirst();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode-cn.com/problems/permutation-in-string/" target="_blank" rel="noopener">567. 字符串的排列</a>——固定长度窗口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一开始都没看出来怎么需要用到窗口， 后来发现s1的排列必须是s2的子串, 所以字符是相同的, 子串长度也是固定。 所以是道定长窗口题</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkInclusion</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">            arr1[s1.charAt(i) - <span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> k = s1.length(), right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s2.length();</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (right &lt; len) &#123;</span><br><span class="line">            arr2[s2.charAt(right) - <span class="string">'a'</span>]++;</span><br><span class="line">            cnt ++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (cnt &gt; k) &#123;</span><br><span class="line">                arr2[ s2.charAt(right - k) - <span class="string">'a'</span>]--;</span><br><span class="line">                cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (contains(arr1, arr2)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 一旦arr2不符合</span></span><br><span class="line">            <span class="keyword">if</span> (arr1[i] &gt; arr2[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章：</h2><ul><li><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/solution/fen-xiang-hua-dong-chuang-kou-mo-ban-mia-f76z/" target="_blank" rel="noopener">分享滑动窗口模板，秒杀滑动窗口问题</a>——形象的理解：虫取法</li><li><a href="https://www.cnblogs.com/huansky/p/13488234.html" target="_blank" rel="noopener">滑动窗口算法基本原理与实践</a>——例题+模板</li><li><a href="https://blog.csdn.net/Dby_freedom/article/details/89066140" target="_blank" rel="noopener">算法与数据结构（一）：滑动窗口法总结</a>——概念+例题</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Sliding window algorithm is used to perform required operation on specific window size of given large buffer or array.滑动窗口算法
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>研究生work——地图匹配</title>
    <link href="https://nymrli.top/2022/02/26/%E7%A0%94%E7%A9%B6%E7%94%9Fwork%E2%80%94%E2%80%94%E5%9C%B0%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    <id>https://nymrli.top/2022/02/26/研究生work——地图匹配/</id>
    <published>2022-02-26T07:24:46.000Z</published>
    <updated>2022-03-09T13:33:00.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="地图匹配"><a class="markdownIt-Anchor" href="#地图匹配"></a> 地图匹配</h1><p>概念：</p><blockquote><ul><li>地图匹配（Map-Matching）是将运营车辆的有序的GPS位置关联到电子地图的路网上，将GPS坐标下采样序列转换为数字路网坐标序列的过程；本质上是平面线段序列的模式匹配问题（ Alt等，2003）</li><li>地图匹配是一种将原始GPS位置映射到路网上的路段的过程，以创建对车辆所走路线的估算。</li></ul></blockquote><p>两个主要的地图匹配用例</p><ul><li>乘车结束时，计算驾驶员行进的距离，以计算票价。——路线图匹配(EORMM)</li><li><strong>实时</strong> ，为ETA团队提供准确的位置并做出<strong>调度</strong>决策，并在rider应用程序上<strong>显示</strong>驾驶员的汽车。——实时地图匹配(RTMM)</li></ul><p>不同点在于，<em>实时地图匹配</em>的要求比较高，必须低延时，因此相比之下，<em>路线图匹配</em>对等待时间的要求不那么严格，并且可以使用乘车的全部历史记录</p><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考：</h3><ul><li><p><a href="https://zhuanlan.zhihu.com/p/83039334" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/83039334</a></p></li><li><p><a href="https://blog.csdn.net/weixin_26713521/article/details/108134220" target="_blank" rel="noopener">Lyft的地图匹配算法论文翻译</a></p><ul><li><p>地图匹配算法的性能取决于<strong>道路网络数据</strong>的<strong>质量</strong></p></li><li><p>解决问题的一种好的方法是使用<strong>状态空间模型</strong> 。 状态空间模型是时间序列模型，其中系统具有“隐藏”状态，这些状态无法直接观察到，但会引起可见的观察。 在这里，我们的隐藏状态是我们要估算的汽车在道路网络上的实际位置。 我们仅观察到隐藏状态的修改版本：观察值(原始位置数据)。 我们假设系统的状态以仅取决于当前状态的方式演化(马尔可夫假设)，并进一步定义了从隐藏状态到隐藏状态的转移密度和从隐藏状态到观察的密度。</p><p>常用的地图匹配状态空间模型是离散状态<strong>隐马尔可夫模型</strong> (Newson＆Krumm [2]，DiDi的IJCAI-19教程[3]，Uber的Map Matching [4])。 在该系统中，我们通过查看路段上的最近点来生成候选对象，并使用<a href="https://en.wikipedia.org/wiki/Viterbi_algorithm" target="_blank" rel="noopener">维特比算法</a>查找最可能的隐藏状态序列。</p><ul><li>对于不同的建模选择和输入数据而言，它相对不灵活</li><li>它缩放严重(O(N²)，其中N是每个状态下可能的候选数)</li><li>它不能很好地应对高频观测(请参阅Newson＆Krumm [2])。</li></ul></li></ul></li><li><p><a href="http://qikan.cqvip.com/Qikan/Article/Detail?id=1000359922&amp;from=Qikan_Search_Index" target="_blank" rel="noopener">GPS定位与地图匹配方法研究</a></p><ul><li>地图匹配算法从原理上可以解释为两个独立的过程：（1）找到车辆当前行使的道路——确定候选路段（2）将当前GPS定位点投影到车辆行使的道路上——候选路段匹配规则<ul><li>圆心拓展半径找到最近的路段（唯一）——构建第一条边的算法</li></ul></li></ul></li><li><p>[1]苏洁, 周东方, 岳春生. GPS车辆导航中的实时地图匹配算法[J]. 测绘学报, 2001, 30(3):5.</p><ul><li>另外，为了提高算法的鲁棒性，对于误差引起 的速度异常，我们利用推测航位法和线性插值来 进行 GPS数据补偿，以消除部分GPS接收外部 粗差</li></ul></li><li><p>[1]李清泉, 黄练. 基于GPS轨迹数据的地图匹配算法[J]. 测绘学报, 2010(2):6.</p><ul><li>针对传统导航系统的地图匹配方法的研究较多。其中点到线的匹配由于缺乏对整体轨迹趋势的考虑，在复杂的道路网环境下的匹配易导致误匹配。也有方法使用DR、差分GPS等辅助设备，采用滤波、模糊逻辑、证据理论等方法提高地图匹配的准确率。GPS浮动车轨迹数据提供了整体曲线的变化趋势，可以采用全局整体匹配的思想，保证轨迹的完整性和准确性14？。基于曲线相似度的算法一般 较为复杂，但匹配精度高，利于轨迹的直接恢复，适合进行数据的后处理</li><li>与整个轨迹相对 应的路径必然是连通 的路段集 ，可以基于道路拓扑与连通性设计地图匹配算法</li><li>key：除了道路的几何连通性，实际行车还会受到交通规则的限制，本文基于道路网的行车限制信息提出了一种GPS浮动车轨迹数据的全局地图匹配算法，综合考虑备选路段的几何连通性与交通网络条件约束构建整体备选路径，然后使用<strong>改进的扫描线法</strong>判断全局轨迹曲线与备选路径的相似度，完成地图匹配 。<ul><li>一句话概括算法：通过行车限制将候选线段找出来后，选择曲线相似度最高的</li></ul></li></ul></li><li><p>[1]陈滨, 王平, 施文灶,等. GPS轨迹数据的综合地图匹配算法研究[J]. 电子科技, 2014, 27(12):4.</p><ul><li>从实际的匹配效果来看，此匹配算法在交叉路口等路段较复杂的地方可有较高地匹配准确率，但该方法依赖于前后GPS定位点匹配准确度，若前一定位点匹配错误就会出现连锁反应，从而导致后面一系列点匹配错误；且历史轨迹推算匹配法计算量较大，匹配速度较慢，不利于高速实时定位。因此，需和其他地图匹配方法相结合使用才能取得较好的匹配效果。</li></ul></li><li><p>智能交通系统中GPS地图匹配算法设计与实现_罗杰涛</p><ul><li>模糊逻辑： 效率高，实时性好，对绝大多数的路段状况都适用。不过在车俩拐弯处以及车速较慢的情况下匹配效果不尽如人意，且不同路段建模的系数凭靠经验值，没有相应的缺乏理论依据。——01、06、08论文</li></ul></li><li><p>高级地图匹配算法：研究现状和趋势[2021]</p><ul><li><p>从实现技术或模型角度对近十年提出的算法进行分类，箭头标记算法间的继承关系。从图2可见，HMM模型是主流，其次是基于最大权重的模型.HMM-News-on、ST-Matching2 3IVMM3和HRIS8被引用对比最多，是具有开创性的工作。另外，从2019年开始，有研究采用深度学习技术来解决地图匹配问题。</p><p><img src="/2022/02/26/研究生work——地图匹配/E:%5Chexo%5Csource_posts%5C%E7%A0%94%E7%A9%B6%E7%94%9Fwork%E2%80%94%E2%80%94%E5%9C%B0%E5%9B%BE%E5%8C%B9%E9%85%8D%5C09-20%E5%B9%B4%E5%9C%B0%E5%9B%BE%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B.jpg" alt="09-20年地图匹配算法发展历程"></p></li></ul></li></ul><h3 id="points"><a class="markdownIt-Anchor" href="#points"></a> Points:</h3><ul><li><p>另外，一个重要的实际问题是，即使车辆定位精度可以保证在10米以内，当电子地图缩放到较大的比例尺时，也会<br>出现车辆偏离行使的道路而造成的视觉混乱现象.</p></li><li><p>由于城区内地物特征复杂，受密集的高大建筑物、隧道、立交桥、树木等地物的反射和遮蔽等影响，车栽GPS接收机接收到的卫星信号存在严重的多径效应，在某些区域内甚至会形成GPS定位育区，解决GPS盲区问题，一种方法是采用航位推算法（DR-Dead Reckoning），这种方法需要将DR设备装在车辆前端，一般在GPS接收机卫星信号受阻时一样可以得到正确的用户位置，但这种方法需要附加设备。另一种方法是在记忆正确GPS位置信息的基础上在一段时间内预测车辆位置，这种方法的优点是易于实现，缺点是精度不够（没有，作者使用卡尔曼滤波进行位置预测，预测结果如图所示。在规则行进时，预测效果较好，见图3、图4.但是当车辆转弯时，效果很差，见图5、图6</p></li><li><p>到折线的距离定义为点到折线上所有直线段的最短距离：点到线段的距离定义为如果点到直线段所在直线的投影在直线段上，则为垂线长度，否则为其到两个端点的最短距离。</p></li><li><p>定位误差： GPS误差、电子地图库误差、坐标投影变换投影</p></li><li><p>难点：</p><ul><li><a href="http://qikan.cqvip.com/Qikan/Article/ReadIndex?id=33650279&amp;info=X19Wa%2bQedw8TOqUh1eM7U0SrEn1nIM08tSny4w0YhPo%3d" target="_blank" rel="noopener">Y-junction问题</a>——点到线的匹配方式，没有考虑全局匹配</li><li>平行双线路</li></ul></li><li><p>MapMatching实现的思路</p><ul><li><strong>离散点集匹配</strong>：相对简单，随机离散点没有形状和拓扑关系，用欧氏距离作吸附即可，典型应用如离散热力图。</li><li><strong>曲线拟合</strong>： 实际中更有应用价值的是曲线拟合匹配关系，比如轨迹和路网，GPS序列和导航路的相似性。</li></ul></li><li><p>MapMatching算法的分类：</p><p><strong>以使用到的信息来划分</strong></p><p>现有的算法可被分成四类：几何、拓扑、概率、高级。</p><p>a）基于几何的算法考虑GPS点与道路的几何信息，如距离、角度等；</p><p>b）基于拓扑的算法使用道路拓扑信息来控制；</p><p>c）概率方法通过考虑GPS点的概率；</p><p>d）高级的算法往往综合考虑使用全面信息，有卡尔曼滤波、模糊逻辑模型、隐式马尔可夫模型等等。</p><p><strong>2.2 以考虑采样点的范围来划分</strong></p><p>根据考虑采样点的范围，可分成局部/增量算法、全局算法。</p><p>a）局部/增量算法是贪婪算法，每次确定一个匹配点，下个点从已经确定的匹配点开始。这些方法根据距离和方向相似性来找到局部最优点或边。（在线匹配）</p><p>b）全局算法是要从路网中找到一条与采样轨迹最接近的匹配轨迹。为了测量采样轨迹和匹配轨迹的相似性，大多数算法使用“Frechet距离”或者是“弱Frechet距离”。还有时空匹配算法、投票算法等。（离线匹配）</p><p><strong>以采样点的频率来划分</strong></p><p>根据轨迹数据的采样频率，现有的地图匹配算法可分成：</p><p>a）高频采样算法（所有局部算法、部分全局算法如Frechet距离判别法等）</p><p>b）低频采样算法（ST-matching算法、IVVM算法）</p><p>一般认为30s及其以上为低频采样，1s～10s为高频采样。</p><p><a href="https://www.cnblogs.com/LBSer/p/4612031.html#!comments" target="_blank" rel="noopener">https://www.cnblogs.com/LBSer/p/4612031.html#!comments</a></p></li><li><p>智能交通系统中GPS地图匹配算法设计与实现</p><p><img src="/2022/02/26/研究生work——地图匹配/E:%5Chexo%5Csource_posts%5C%E7%A0%94%E7%A9%B6%E7%94%9Fwork%E2%80%94%E2%80%94%E5%9C%B0%E5%9B%BE%E5%8C%B9%E9%85%8D%5C%E5%9C%B0%E5%9B%BE%E5%8C%B9%E9%85%8D%E7%BB%84%E4%BB%B6.jpg" alt="地图匹配组件"></p></li></ul><h3 id="算法评估的标准"><a class="markdownIt-Anchor" href="#算法评估的标准"></a> 算法评估的标准</h3><ul><li>实时性</li><li>可靠性(鲁棒性)</li><li>匹配的精度</li></ul><h2 id="朴素算法"><a class="markdownIt-Anchor" href="#朴素算法"></a> 朴素算法：</h2><p>快速匹配算法的执行步骤如下：</p><ol><li>步1接收GPS定位数据；</li><li>步2判断定位数据是否无效，若无效，则根据历史定位数据进行推测匹配，然后转（8）；</li><li>步3判断车辆当前是否处于停止或低速滑行状态，若是，对其作相应处理，然后转（8）；</li><li>步4由车辆当前位置点计算其对应的候选网格，进而获取其中的路段；</li><li>步5对步4得到的路段进行<strong>连接性拓扑检查</strong>，将通过拓扑检查的路段作为匹配候选路段；</li><li>步6判断匹配候选路段数目，若唯一，则直接将其作为匹配路段，并由定位点向其作投影，然后转（8）；否则，计算所有候选路段的匹配度度量值f，（i=1,2，…，N），从中选出最大值fm和次大值fm；</li><li>步7判断最大值fm和次大值fm之差是否大于阈值fh，且最大值fm是否大于阈值fh，如果大于，则将路段m作为匹配路段，并由定位点向其作投影；否则，暂不对本次定位结果进行匹配，待后面对其进行延时匹配处理；</li><li>步8结束本次匹配</li></ol><p>from : <a href="https://wenku.baidu.com/view/14551bfcfab069dc50220144.html?fr=xueshu_top" target="_blank" rel="noopener">一种适于车辆导航系统的快速地图匹配算法</a>——2003</p><h2 id="key"><a class="markdownIt-Anchor" href="#key"></a> Key:</h2><ul><li><p>出行数据：采用GPS定位，那么是否是WGS-84数据，但是GIS部门的路网数据坐标是什么坐标系下的</p></li><li><p>双线路：</p></li><li><p>当下，现在很多用于MapMatching的方法，大多来自于推理、预测的数学方法，如隐马尔可夫链、贝叶斯模型、神经网络模型等，但在数据结构上的创新比较少，GIS算法，更多要在计算机的基础上，结合比如时空观念、数据特征、拓扑关系等对于GIS相关的基础理论</p></li></ul><h2 id="软件"><a class="markdownIt-Anchor" href="#软件"></a> 软件</h2><ul><li>mapinfo: 当今世界上流行的桌面地理信息系统</li><li>graphhopper: 路径规划库</li><li>arcgis</li><li>openstreetmap——开源地图，简称为OSM</li></ul><p>线要素的匹配，主要通过几何、拓扑或语义相似度来进行识别，其中通过空间距离来进行要素匹配的常用方式有：</p><ul><li>闵可夫斯基距离(Minkowski Distance)</li><li>欧氏距离(Euclidean Distance)</li><li>曼哈顿距离(Manhattan Distance)</li><li>切比雪夫距离(Chebyshev Distance)</li><li>汉明距离(Hamming distance)</li><li>杰卡德相似系数(Jaccard similarity coefficient)</li><li>豪斯多夫距离(Hausdorff Distance)</li><li>弗雷歇距离(Fréchet距离)</li></ul><p>from：<a href="http://www.biaozhu.net/9224.html" target="_blank" rel="noopener">高德地图：地图数据处理之道路匹配篇</a></p><h1 id="隐马尔科夫hmm"><a class="markdownIt-Anchor" href="#隐马尔科夫hmm"></a> 隐马尔科夫HMM</h1><p><strong>HMM有三个典型(canonical)问题</strong>:</p><ul><li><strong>概率计算问题</strong>：已知模型参数，计算某一特定输出序列的概率.通常使用**<a href="http://en.wikipedia.org/wiki/Forward_algorithm" target="_blank" rel="noopener">Forward</a>算法**解决；</li><li><strong>预测问题或者解码（decoding）问题</strong>：已知模型参数，寻找最可能的能产生某一特定输出序列的<strong>隐含状态</strong>的序列。通常使用**<a href="http://en.wikipedia.org/wiki/Viterbi_algorithm" target="_blank" rel="noopener">Viterbi</a>算法**解决；</li><li><strong>学习问题</strong>：已知输出序列，寻找最可能的状态转移以及输出概率。通常使用**<a href="http://en.wikipedia.org/wiki/Baum-Welch_algorithm" target="_blank" rel="noopener">Baum-Welch</a>算法**。</li></ul><h2 id="hmm的几个重要元素"><a class="markdownIt-Anchor" href="#hmm的几个重要元素"></a> HMM的几个重要元素：</h2><ul><li><p>π(startprob_): 隐藏状态初始向量</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo>=</mo><mrow><mo fence="true">(</mo><msub><mi>π</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>:</mo><msub><mi>π</mi><mi>i</mi></msub><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><msub><mi>q</mi><mn>1</mn></msub><mo>=</mo><mi>i</mi><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">\pi=\left(\pi_{i}\right): \pi_{i}=P\left(q_{1}=i\right), 1 \leq i \leq N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">i</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span></p></li><li><p>A(transmat_):  状态转移概率矩阵:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><msub><mrow><mo fence="true">[</mo><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo fence="true">]</mo></mrow><mrow><mi>N</mi><mo>×</mo><mi>N</mi></mrow></msub><mtext>, 其中 </mtext><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><msub><mi>q</mi><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>j</mi><mo>∣</mo><msub><mi>q</mi><mi>t</mi></msub><mo>=</mo><mi>i</mi><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mn>1</mn><mo>≤</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>≤</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">A=\left[a_{i j}\right]_{N \times N} \text {, 其中 } a_{i j}=P\left(q_{t+1}=j \mid q_{t}=i\right), 1 \leq i, j \leq N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.144139em;vertical-align:-0.394139em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.14252299999999996em;"><span style="top:-2.364192em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394139em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord">, </span><span class="mord cjk_fallback">其中</span><span class="mord"> </span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">i</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span></p></li><li><p>B(emissionprob_): 观测状态概率矩阵</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><msub><mrow><mo fence="true">[</mo><msub><mi>b</mi><mi>j</mi></msub><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo fence="true">]</mo></mrow><mrow><mi>N</mi><mo>×</mo><mi>M</mi></mrow></msub><mi mathvariant="normal">，</mi><mtext> 其中 </mtext><msub><mi>b</mi><mi>j</mi></msub><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><msub><mi>o</mi><mi>t</mi></msub><mo>=</mo><msub><mi>o</mi><mi>k</mi></msub><mo>∣</mo><msub><mi>q</mi><mi>t</mi></msub><mo>=</mo><mi>j</mi><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mn>1</mn><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>N</mi><mo separator="true">,</mo><mn>1</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">B=\left[b_{j}(k)\right]_{N \times M} ， \text { 其中 } b_{j}(k)=P\left(o_{t}=o_{k} \mid q_{t}=j\right), 1 \leq j \leq N, 1 \leq k \leq M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.144139em;vertical-align:-0.394139em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.14252299999999996em;"><span style="top:-2.364192em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394139em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">其中</span><span class="mord"> </span></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span></span></p></li><li><p>HMM的状态变量数目：N</p></li><li><p>HMM的观察变量数目：M</p></li></ul><p>如果观测序列是一维的，则观测状态的概率密度函数是一维的普通高斯分布。如果观测序列是N维的，则隐藏状态对应的观测状态的概率密度函数是N维高斯分布。高斯分布的概率密度函数参数可以用μμ表示高斯分布的期望向量，Σ表示高斯分布的协方差矩阵。在GaussianHMM类中，“means”用来表示各个隐藏状态对应的高斯分布期望向量μ形成的矩阵，而“covars”用来表示各个隐藏状态对应的高斯分布协方差矩阵Σ形成的三维张量。</p><p>from :<a href="https://www.cnblogs.com/pinard/p/7001397.html" target="_blank" rel="noopener">用hmmlearn学习隐马尔科夫模型HMM</a></p><h2 id="mapmatching与hmm"><a class="markdownIt-Anchor" href="#mapmatching与hmm"></a> MapMatching与Hmm</h2><ul><li>观察变量：从GPS设备中得到的位置信息（经度，纬度）</li><li>隐藏状态：拥有GPS设备的物体（车，人等）实际所在的位置路段。</li><li>观测概率：例如，现测的GPS点离旁边路段上的位置越近，那么这个真实点在这个路段上的概率越大状态。</li><li>状态转移概率：例如，前后两个真实的位置点的距离越近，那么状态转移的概率越大</li></ul><p>在下面相关论文工作中会说明在这几篇论文中其实只用到了预测问题的<a href="http://en.wikipedia.org/wiki/Viterbi_algorithm" target="_blank" rel="noopener">Viterbi</a>算法,下面也会另开一小节具体描述下<a href="http://en.wikipedia.org/wiki/Viterbi_algorithm" target="_blank" rel="noopener">Viterbi</a>算法。</p><p><strong>Map-Matching的两个变量</strong>：</p><ul><li>从GPS设备中得到的位置信息（经度，纬度）：HMM中观察变量；</li><li>拥有GPS设备的物体（车，人等）实际所在的位置：HMM中的隐藏状态变量，实际地图是不知道GPS设备的准确位置的。</li></ul><p>这样就把Map-Matching问题与HMM结合起来了。三个问题在Map-Matching中有用的是两个问题：（1）预测问题；（2）学习问题。</p><p>在论文中，定义的规则要满足人的直观上的感觉，即人的先验知识，主要有以下两种：</p><ul><li>观测概率：观测的GPS点离旁边路段上的位置越近，那么这个真实点在这个路段上的概率越大。</li><li>状态转移概率：这里有两种解决思路：（1）前后两个真实的位置点的距离越近，那么状态转移的概率越大；或者（2）真实路段上的前后两个点的距离与GPS观测的前后两个点的距离越接近，状态转移概率越大。</li></ul><p>from: <a href="https://www.cnblogs.com/mindpuzzle/p/3653043.html" target="_blank" rel="noopener">基于隐马尔科夫模型(HMM)的地图匹配(Map-Matching)算法</a></p><h3 id="barefoot"><a class="markdownIt-Anchor" href="#barefoot"></a> <a href="https://github.com/bmwcarit/barefoot/wiki#stand-alone-servers" target="_blank" rel="noopener">barefoot</a></h3><ul><li>观测概率: 测量位置与其真实位置之间的距离，用于对测量误差进行建模，测量误差用具有一些标准偏差<em>σ</em>的高斯分布来描述（默认为<em>σ = 5 米</em>）。</li><li>转移概率: 用各个位置测量之间的路由距离和视线距离的差异来量化的。转移概率呈负指数分布，速率参数<em>λ</em>（默认为<em>λ = 0.1</em>）是均值的倒数</li></ul><p>==&gt;</p><ul><li><p><em><strong>序列概率</strong></em>： 定义<em>p(s 0 … s t |z 0 … z t )<em>为最可能的序列到达匹配候选</em>s t</em>的概率，称为 s t 的序列概率， 可以通过递归确定</p></li><li><p><em><strong>过滤概率</strong></em>：我们的 HMM 滤波器确定对象当前位置的估计值<em>s̅ t</em>，它是最可能匹配的候选对象<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>t</mi></msub><mo>∈</mo><msub><mi>S</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">s_t ∈ S_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 给定测量值<code>z0 ... zt</code>，其定义为：<code>s̅t = argmax(st ∈ St) p(st|z0 ... zt)</code>, <code>p(st|z0 ... zt)</code>称为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">s_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的过滤概率***，可以递归确定：</p><p><code>p(st|z0...zt) = p(st|zt) · Σ(st-1 ∈ St-1) p(st|st-1) · p(st-1|z0 ... zt-1)</code>。</p></li></ul><p>from: <a href="https://github.com/bmwcarit/barefoot/wiki#stand-alone-servers" target="_blank" rel="noopener">https://github.com/bmwcarit/barefoot/wiki#stand-alone-servers</a></p><h2 id="coding"><a class="markdownIt-Anchor" href="#coding"></a> Coding</h2><blockquote><p>在之前的<a href="http://www.cnblogs.com/pinard/p/6945257.html" target="_blank" rel="noopener">HMM系列</a>中，我们对隐马尔科夫模型HMM的原理以及三个问题的求解方法做了总结。本文我们就从实践的角度用Python的<a href="https://hmmlearn.readthedocs.io/en/latest/api.html#hmmlearn-hmm" target="_blank" rel="noopener">hmmlearn</a>库来学习HMM的使用。sklearn库中将HMM弃用了，新开了一个<code>hmmlearn</code>的新库，安装命令为：<code>pip install hmmlearn</code>，关于hmmlearn的更多资料在<a href="http://hmmlearn.readthedocs.io/" target="_blank" rel="noopener">官方文档</a>有介绍。</p></blockquote><p>hmmlearn实现了三种HMM模型类，按照观测状态是连续状态还是离散状态，可以分为两类。</p><ol><li>GaussianHMM 观测状态连续型且符合高斯分布</li><li>GMMHMM 观测状态连续型且符合混合高斯分布</li><li>MultinomialHMM 观测状态离散型</li></ol><p><strong>HMM主要解决的三个问题</strong><br>假设隐藏状态序列和观测状态序列分别使用Z和X表示，则解决的3个问题可表示为:<br>1.解码问题：已知模型参数和X，估计最可能的Z；维特比算法<br>2.概率问题：已知模型参数和X，估计X出现的概率；向前-向后算法<br>3.学习问题：仅给出X和隐藏层个数，估计模型参数。 B-W算法，通常是经过一定数量的训练以后，得到模型，然后解决问题1和2。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Created on 2017-12-4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">解码问题：本例为天气和行为的关系</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># hmmlearn可以在安装numpy以后，再使用pip install hmmlearn安装</span></span><br><span class="line"><span class="keyword">from</span> hmmlearn <span class="keyword">import</span> hmm</span><br><span class="line"></span><br><span class="line">states = [<span class="string">"Rainy"</span>, <span class="string">"Sunny"</span>]<span class="comment">##隐藏状态</span></span><br><span class="line">n_states = len(states)<span class="comment">##隐藏状态长度</span></span><br><span class="line"></span><br><span class="line">observations = [<span class="string">"walk"</span>, <span class="string">"shop"</span>, <span class="string">"clean"</span>]<span class="comment">##可观察的状态</span></span><br><span class="line">n_observations = len(observations)<span class="comment">##可观察序列的长度</span></span><br><span class="line"></span><br><span class="line">start_probability = np.array([<span class="number">0.6</span>, <span class="number">0.4</span>])<span class="comment">##开始转移概率，即开始是Rainy和Sunny的概率</span></span><br><span class="line"><span class="comment">##隐藏间天气转移混淆矩阵，即Rainy和Sunny之间的转换关系，例如[0,0]表示今天Rainy，明天Rainy的概率</span></span><br><span class="line">transition_probability = np.array([</span><br><span class="line">  [<span class="number">0.7</span>, <span class="number">0.3</span>],</span><br><span class="line">  [<span class="number">0.4</span>, <span class="number">0.6</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">##隐藏状态天气和可视行为混淆矩阵，例如[0,0]表示今天Rainy，walk行为的概率为0.1</span></span><br><span class="line">emission_probability = np.array([</span><br><span class="line">  [<span class="number">0.1</span>, <span class="number">0.4</span>, <span class="number">0.5</span>],</span><br><span class="line">  [<span class="number">0.6</span>, <span class="number">0.3</span>, <span class="number">0.1</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建了一个MultinomialHMM模型，这模型包括开始的转移概率，隐藏间天气转换混淆矩阵（transmat），隐藏状态天气和可视行为混淆矩阵emissionprob，对模型参数初始化</span></span><br><span class="line">model = hmm.MultinomialHMM(n_components=n_states)</span><br><span class="line">model.startprob_= start_probability</span><br><span class="line">model.transmat_ = transition_probability</span><br><span class="line">model.emissionprob_ = emission_probability</span><br><span class="line"></span><br><span class="line"><span class="comment">#给出一个可见序列</span></span><br><span class="line">bob_Actions = np.array([[<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]]).T</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决问题1,解码问题,已知模型参数和X，估计最可能的Z； 维特比算法 </span></span><br><span class="line">logprob, weathers = model.decode(bob_Actions, algorithm=<span class="string">"viterbi"</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Bob Actions:"</span>, <span class="string">", "</span>.join(map(<span class="keyword">lambda</span> x: observations[x], bob_Actions))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"weathers:"</span>, <span class="string">", "</span>.join(map(<span class="keyword">lambda</span> x: states[x], weathers))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">解码问题： 盒子</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> hmmlearn <span class="keyword">import</span> hmm</span><br><span class="line"></span><br><span class="line">states = [<span class="string">"box 1"</span>, <span class="string">"box 2"</span>, <span class="string">"box3"</span>]</span><br><span class="line">n_states = len(states)</span><br><span class="line"></span><br><span class="line">observations = [<span class="string">"red"</span>, <span class="string">"white"</span>]</span><br><span class="line">n_observations = len(observations)</span><br><span class="line"></span><br><span class="line">start_probability = np.array([<span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">0.4</span>])</span><br><span class="line"></span><br><span class="line">transition_probability = np.array([</span><br><span class="line">  [<span class="number">0.5</span>, <span class="number">0.2</span>, <span class="number">0.3</span>],</span><br><span class="line">  [<span class="number">0.3</span>, <span class="number">0.5</span>, <span class="number">0.2</span>],</span><br><span class="line">  [<span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.5</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">emission_probability = np.array([</span><br><span class="line">  [<span class="number">0.5</span>, <span class="number">0.5</span>],</span><br><span class="line">  [<span class="number">0.4</span>, <span class="number">0.6</span>],</span><br><span class="line">  [<span class="number">0.7</span>, <span class="number">0.3</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model = hmm.MultinomialHMM(n_components=n_states)</span><br><span class="line">model.startprob_=start_probability</span><br><span class="line">model.transmat_=transition_probability</span><br><span class="line">model.emissionprob_=emission_probability</span><br><span class="line"></span><br><span class="line">seen = np.array([[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]).T</span><br><span class="line">logprob, box = model.decode(seen, algorithm=<span class="string">"viterbi"</span>)</span><br><span class="line">print(<span class="string">"The ball picked:"</span>, <span class="string">", "</span>.join(map(<span class="keyword">lambda</span> x: observations[x], seen)))</span><br><span class="line">print(<span class="string">"The hidden box"</span>, <span class="string">", "</span>.join(map(<span class="keyword">lambda</span> x: states[x], box)))</span><br><span class="line">(<span class="string">'The ball picked:'</span>, <span class="string">'red, white, red'</span>)</span><br><span class="line">(<span class="string">'The hidden box'</span>, <span class="string">'box3, box3, box3'</span>)</span><br></pre></td></tr></table></figure><h2 id="限制"><a class="markdownIt-Anchor" href="#限制"></a> 限制</h2><ul><li>对于不同的建模选择和输入数据而言，它相对不灵活</li><li>它缩放严重(O(N²)，其中N是每个状态下可能的候选数)</li><li>它不能很好地应对高频观测(请参阅Newson＆Krumm [2])。</li></ul><p>基于(无味)卡尔曼滤波器的新模型——<a href="https://blog.csdn.net/weixin_26713521/article/details/108134220" target="_blank" rel="noopener">https://blog.csdn.net/weixin_26713521/article/details/108134220</a></p><h1 id="help-code"><a class="markdownIt-Anchor" href="#help-code"></a> help Code:</h1><ul><li><a href="https://github.com/bmwcarit/barefoot" target="_blank" rel="noopener">https://github.com/bmwcarit/barefoot</a></li><li><a href="https://github.com/oldrev/mapmatchingkit" target="_blank" rel="noopener">https://github.com/oldrev/mapmatchingkit</a></li></ul><h1 id="网络文章"><a class="markdownIt-Anchor" href="#网络文章"></a> 网络文章</h1><ul><li><a href="https://blog.csdn.net/weixin_42599077/article/details/114801735" target="_blank" rel="noopener">地图匹配实例-几何匹配</a>——效果图</li><li><a href="https://blog.csdn.net/weixin_26713521/article/details/108134220" target="_blank" rel="noopener">定位匹配 模板匹配 地图_什么是地图匹配？</a></li><li><a href="https://blog.csdn.net/Feng512275/article/details/96199675?spm=1001.2014.3001.5502" target="_blank" rel="noopener">出租车轨迹点地图匹配研究</a></li><li><a href="https://blog.csdn.net/yixianfeng41/article/details/73010792" target="_blank" rel="noopener">地图匹配小结</a></li><li><a href="https://www.cnblogs.com/mindpuzzle/p/3653043.html" target="_blank" rel="noopener">基于隐马尔科夫模型(HMM)的地图匹配(Map-Matching)算法</a></li></ul><h1 id="工作安排"><a class="markdownIt-Anchor" href="#工作安排"></a> 工作安排</h1><p>你的工作主要完成什么（概括说明就行），分为那几步，每一步完成什么（概括说明就行），每一步的工作量（预计完成这步工作需要多少个小时），每一步工作预计在什么时候完成（比如 3.5）</p><ul><li>工作包含：地图匹配，将车辆的有序GPS位置数据关联到电子地图的路网上，将GPS坐标下采样序列转换为数字路网路径序列的过程。工作内容：解析过滤点并进行坐标转换-&gt;点过滤(点稀疏)-&gt;地图匹配算法-&gt;点映射</li></ul><table><thead><tr><th>内容</th><th>预估时间</th></tr></thead><tbody><tr><td>查阅地图匹配算法相关的论文-&gt;找到解决方案(16小时)</td><td>2022年2月28日</td></tr><tr><td>学习隐马尔科夫模型相关理论知识 (6小时)</td><td>2022年3月2日</td></tr><tr><td>找寻隐马尔科夫模型资料、代码(8小时)——barefoot、graphhopper</td><td>2022年3月4日</td></tr><tr><td>熟悉项目中有关地图对象的代码（4小时）</td><td>2022年3月5日</td></tr><tr><td>移植隐马尔科夫模型到项目中，目前参考：开源<a href="https://github.com/bmwcarit/barefoot/wiki#stand-alone-servers" target="_blank" rel="noopener">barefoot</a>实现：熟悉代码(16小时)、坐标转换（3小时）、输入输出数据格式改造(10小时)、适配类(56小时)、效果检验（10小时）</td><td>2022年3月20日</td></tr><tr><td>点过滤（24小时）: 栅格化（16小时） + 双队列（8小时）</td><td>2022年3月24日</td></tr><tr><td>点映射（6小时）</td><td>2022年3月25日</td></tr></tbody></table><h1 id="库"><a class="markdownIt-Anchor" href="#库"></a> 库：</h1><ul><li><a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-geometryEngine.html" target="_blank" rel="noopener">geometryEngine</a></li><li>net.sf.geographiclib</li><li>com.esri.core.geometry——QuadTree</li><li>graphhopper——org.locationtech.jts.geom  ==&gt; Envelope --&gt; findCandidateSnapsInBBox</li></ul><hr><h1 id="简单版实现思路"><a class="markdownIt-Anchor" href="#简单版实现思路"></a> 简单版实现思路</h1><ol><li>找到起始点O和终点D，以两点为半径画圆，把所有范围内的NormalEdge全部加入List（只要起始点or终止点有一个在范围内）</li><li>确定第一条===&gt; 找离第一个GPS点最近的边</li><li>likelyRoute.forEach从上一条的lowerNormalEdge中(保证拓扑可达连接)，从中选择得分最高（距离和方向）的边作为后续边 。  如果没有lowerNormalEdge（如果所有剩余的点都能映射到最后的这条边上，则认为是终点，此时不在意死路）， 平常如果是死路，则放弃这条序列路径。TODO：没有后续路径时是否要考虑增加可能边集？</li><li>到达终点边结束</li><li>从likelyRoute中选择得分最高的路径</li></ol><p>用到的结构：</p><ul><li><code>likelyRoute: list[list]</code>, 存放多条可能</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;地图匹配&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#地图匹配&quot;&gt;&lt;/a&gt; 地图匹配&lt;/h1&gt;
&lt;p&gt;概念：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;地图匹配（Map-Matching）是将运营车辆的有序的GPS位置关联到
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>私有Gitlab配置SSH连接</title>
    <link href="https://nymrli.top/2022/02/25/%E7%A7%81%E6%9C%89Gitlab%E9%85%8D%E7%BD%AESSH%E8%BF%9E%E6%8E%A5/"/>
    <id>https://nymrli.top/2022/02/25/私有Gitlab配置SSH连接/</id>
    <published>2022-02-25T05:38:19.000Z</published>
    <updated>2022-02-25T06:04:05.992Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SSH连接并不是像<a href="https://so.csdn.net/so/search?q=http&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">http</a>连接一样，输入用户名和密码就可以了。SSH连接需要一些额外的配置</p></blockquote><h1 id="生成ssh秘钥和公钥"><a class="markdownIt-Anchor" href="#生成ssh秘钥和公钥"></a> 生成SSH秘钥和公钥</h1><h2 id="查询有效邮箱"><a class="markdownIt-Anchor" href="#查询有效邮箱"></a> 查询有效邮箱</h2><p>首先要确定使用的邮箱，是不是自己认为的邮箱，比如我以为是<code>chenli@sucsoft.com</code>结果，却发现是<code>399-chenli@sucsoft.com</code>，那么按照自认为的邮箱申请的keys那自然不会work。——一般情况不会有歧义邮箱出现，但我这边确实跟想的不太一样</p><h3 id="查询方法一新建项目"><a class="markdownIt-Anchor" href="#查询方法一新建项目"></a> 查询方法(一)——新建项目</h3><p>创建空的仓库，提示中提及的邮箱就是有效邮箱</p><p><img src="/2022/02/25/私有Gitlab配置SSH连接/gitlab-ssh.jpg" alt="gitlab-ssh"></p><h3 id="查询方法二个人preference"><a class="markdownIt-Anchor" href="#查询方法二个人preference"></a> 查询方法(二)——个人Preference</h3><ol><li>打开<code>User Settings-&gt;Profile</code>，其中有<code>Email</code>、<code>public email</code>和<code>commit email</code>三个邮箱，其中跟我们开发命令比较有关的就是这个Commit Email，之前我的默认是<code>399-chenli@sucsoft.com</code>，这边要设置自己想要的，比如<code>chenli@sucsoft.com</code></li></ol><p><img src="/2022/02/25/私有Gitlab配置SSH连接/email_settings.jpg" alt="email_settings"></p><p>▲选择完成后，滑到最下面选择Update profile settings</p><ol start="2"><li>打开<code>User Settings-&gt;Emails</code>可以看到，<code>chenli@sucsoft@sucsoft.com</code>的标签中有commit email，即设置成功</li></ol><p><img src="/2022/02/25/私有Gitlab配置SSH连接/preference_email.jpg" alt="preference_email"></p><h2 id="gitlab设置公钥"><a class="markdownIt-Anchor" href="#gitlab设置公钥"></a> Gitlab设置公钥</h2><p>确保邮箱是有效的后就可以生成秘钥了。</p><ol><li>设置git信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 设置git信息</span></span><br><span class="line">git config --global user.name <span class="string">"chenli"</span></span><br><span class="line">git config --global user.email <span class="string">"chenli@sucsoft.com"</span></span><br><span class="line"><span class="comment"># 2. 生成秘钥和公钥</span></span><br><span class="line">$ ssh-keygen -t rsa -C chenli@sucsoft.com</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/mrli/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/mrli/.ssh/id_rsa</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/mrli/.ssh/id_rsa.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:zKPeKkm0bNzDqZcHUEDcvvDqPG2znRqDrD30yoBb8MM chenli@sucsoft.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 3072]----+</span></span><br><span class="line"><span class="string">|   ooo           |</span></span><br><span class="line"><span class="string">|    . o          |</span></span><br><span class="line"><span class="string">|     o           |</span></span><br><span class="line"><span class="string">|    + .o         |</span></span><br><span class="line"><span class="string">|.  + B oS        |</span></span><br><span class="line"><span class="string">| = .B.O. .       |</span></span><br><span class="line"><span class="string">|. E+o*++         |</span></span><br><span class="line"><span class="string">| o BB.B=..       |</span></span><br><span class="line"><span class="string">|. ..*B=*+        |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>根据命令输出结果可以看到，生成的结果在<code>C:\Users\mrli\.ssh</code>路径下，有<code>id_rsa</code>、<code>id_rsa.pub</code>，其中<code>id_rsa.pub</code>为公钥。</p><ol start="2"><li><p>将SSH公钥添加到GitHub账户</p><ol><li>复制文件路径内.pub后缀里的内容</li><li>进入SSH Keys的设置页面（登录GitHub，在右上角头像点击设置）</li></ol><p><img src="/2022/02/25/私有Gitlab配置SSH连接/add_ssh.jpg" alt="add_ssh"></p><ol start="3"><li>粘贴后，Title会自动提取生成，点击<code>Add key</code>则完成添加</li></ol></li></ol><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@gitlab.sucsoft.com</span><br><span class="line">Welcome to GitLab, @chenli!</span><br></pre></td></tr></table></figure><h1 id="more"><a class="markdownIt-Anchor" href="#more"></a> More</h1><h2 id="配置多个git信息"><a class="markdownIt-Anchor" href="#配置多个git信息"></a> 配置多个Git信息</h2><ol><li>将默认的<code>id_rsa</code>和<code>id_rsa.pub</code>改成指定的如<code>id_rsa_sucsoft.pub</code></li><li><code>.ssh/</code>路径下添加<code>config</code>配置文件，对应填写</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Host github.com                 </span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile C:\\Users\\mrli\\.ssh\\id_rsa_github</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User Freedomisgood</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Host gitlab.sucsoft.com</span><br><span class="line">    HostName gitlab.sucsoft.com</span><br><span class="line">    IdentityFile C:\\Users\\mrli\\.ssh\\id_rsa_sucsoft</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User chenli</span><br></pre></td></tr></table></figure><p>注意：Host后写的就是<code>ssh -T git@gitlab.sucsoft.com</code>中@后面的内容，如果写的是<code>sucsoft</code>，则写成<code>ssh -T git@sucsoft</code>，但是这样其实跟Gitlab页面中直接提供的不一样: <code>git@gitlab.sucsoft.com:suc-frame/xxxx.git</code>，所以最好还是规范的写<code>gitlab.sucsoft.com</code></p><p>★配置完成后最终文件夹中的内容：</p><p><img src="/2022/02/25/私有Gitlab配置SSH连接/more-1.jpg" alt="more-1"></p><p>注： known_host是自动生成的，如果第一次SSH连接网站，则会将host添加到这个文件中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;SSH连接并不是像&lt;a href=&quot;https://so.csdn.net/so/search?q=http&amp;amp;spm=1001.2101.3001.7020&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http&lt;/a&gt;连
      
    
    </summary>
    
    
      <category term="git" scheme="https://nymrli.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>语义化的版本控制</title>
    <link href="https://nymrli.top/2022/01/26/%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    <id>https://nymrli.top/2022/01/26/语义化的版本控制/</id>
    <published>2022-01-26T14:30:00.000Z</published>
    <updated>2022-01-26T14:40:45.998Z</updated>
    
    <content type="html"><![CDATA[<p>语义化的版本控制： 用一组简单的规则及条件来约束版本号的配置和增长</p><blockquote><p>作为一位负责任的开发者，你理当确保每次包升级的运作与版本号的表述一致。现实世界是复杂的，我们除了提高警觉外能做的不多。你所能做的就是让语义化的版本控制为你提供一个健全的方式来发行以及升级包，而无需推出新的依赖包，节省你的时间及烦恼。</p><p>如果没有某个正式的规范可循，版本号对于依赖的管理并无实质意义。将上述的想法命名并给予清楚的定义，让你对软件使用者传达意向变得容易。一旦这些意向变得清楚，弹性（但又不会太弹性）的依赖规范就能达成。</p><p>如果你对此认同，希望立即开始使用语义化版本控制，你只需声明你的函数库正在使用它并遵循这些规则就可以了。请在你的 README 文件中保留<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener">此页链接</a>，让别人也知道这些规则并从中受益。</p></blockquote><h2 id="target"><a class="markdownIt-Anchor" href="#target"></a> Target:</h2><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><ol><li>主版本号：当你做了不兼容的 API 修改，</li><li>次版本号：当你做了向下兼容的功能性新增，</li><li>修订号：当你做了向下兼容的问题修正。</li></ol><p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p><h2 id="语义化版本控制规范semver"><a class="markdownIt-Anchor" href="#语义化版本控制规范semver"></a> 语义化版本控制规范（SemVer）</h2><p>以下关键词 MUST、MUST NOT、REQUIRED、SHALL、SHALL NOT、SHOULD、SHOULD NOT、 RECOMMENDED、MAY、OPTIONAL 依照 RFC 2119 的叙述解读。</p><ol><li>使用语义化版本控制的软件必须（MUST）定义公共 API。该 API 可以在代码中被定义或出现于严谨的文件内。无论何种形式都应该力求精确且完整。</li><li>标准的版本号必须（MUST）采用 X.Y.Z 的格式，其中 X、Y 和 Z 为非负的整数，且禁止（MUST NOT）在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素必须（MUST）以数值来递增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。</li><li>标记版本号的软件发行后，禁止（MUST NOT）改变该版本软件的内容。任何修改都必须（MUST）以新版本发行。</li><li>主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版。</li><li>1.0.0 的版本号用于界定公共 API 的形成。这一版本之后所有的版本号更新都基于公共 API 及其修改内容。</li><li><strong>修订号</strong> Z（x.y.Z <code>|</code> x &gt; 0）必须（MUST）在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。</li><li><strong>次版本号</strong> Y（x.Y.z <code>|</code> x &gt; 0）必须（MUST）在有向下兼容的新功能出现时递增。在任何公共 API 的功能被标记为弃用时也必须（MUST）递增。也可以（MAY）在内部程序有大量新功能或改进被加入时递增，其中可以（MAY）包括修订级别的改变。每当次版本号递增时，修订号必须（MUST）归零。</li><li><strong>主版本号</strong> X（X.y.z <code>|</code> X &gt; 0）必须（MUST）在有任何不兼容的修改被加入公共 API 时递增。其中可以（MAY）包括次版本号及修订级别的改变。每当主版本号递增时，次版本号和修订号必须（MUST）归零。</li><li><strong>先行版本号</strong>：可以（MAY）被标注在修订版之后，先加上<strong>一个连接号</strong>再加上<strong>一连串以句点分隔</strong>的标识符来修饰。标识符必须（MUST）由 ASCII 字母数字和连接号 [0-9A-Za-z-] 组成，且禁止（MUST NOT）留白。数字型的标识符禁止（MUST NOT）在前方补零。先行版的优先级低于相关联的标准版本。被标上先行版本号则表示这个版本并非稳定而且可能无法满足预期的兼容性需求。范例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。</li><li><strong>版本编译信息</strong>可以（MAY）被标注在修订版或先行版本号之后，先加上<strong>一个加号</strong>再加上一连串以<strong>句点分隔</strong>的标识符来修饰。标识符必须（MUST）由 ASCII 字母数字和连接号 [0-9A-Za-z-] 组成，且禁止（MUST NOT）留白。当判断版本的优先层级时，版本编译信息可（SHOULD）被忽略。因此当两个版本只有在版本编译信息有差别时，属于相同的优先层级。范例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。</li><li>版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，必须（MUST）把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较（版本编译信息不在这份比较的列表中）。由左到右依序比较每个标识符，第一个差异值用来决定优先层级：主版本号、次版本号及修订号以数值比较，例如：1.0.0 &lt; 2.0.0 &lt; 2.1.0 &lt; 2.1.1。当主版本号、次版本号及修订号都相同时，改以优先层级比较低的先行版本号决定。例如：1.0.0-alpha &lt; 1.0.0。有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级必须（MUST）透过由左到右的每个被句点分隔的标识符来比较，直到找到一个差异值后决定：只有数字的标识符以数值高低比较，有字母或连接号时则逐字以 ASCII 的排序来比较。数字的标识符比非数字的标识符优先层级低。若开头的标识符都相同时，栏位比较多的先行版本号优先层级比较高。范例：1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0-rc.1 &lt; 1.0.0。</li></ol><h2 id="faq"><a class="markdownIt-Anchor" href="#faq"></a> FAQ</h2><p><strong>在 0.y.z 初始开发阶段，我该如何进行版本控制？</strong></p><p>最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。</p><p><strong>如何判断发布 1.0.0 版本的时机？</strong></p><p>当你的软件被用于正式环境，它应该已经达到了 1.0.0 版。如果你已经有个稳定的 API 被使用者依赖，也会是 1.0.0 版。如果你很担心向下兼容的问题，也应该算是 1.0.0 版了。</p><p><strong>这不会阻碍快速开发和迭代吗？</strong></p><p>主版本号为零的时候就是为了做快速开发。如果你每天都在改变 API，那么你应该仍在主版本号为零的阶段（0.y.z），或是正在下个主版本的独立开发分支中。</p><p><strong>对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？</strong></p><p>这是开发的责任感和前瞻性的问题。不兼容的改变不应该轻易被加入到有许多依赖代码的软件中。升级所付出的代价可能是巨大的。要递增主版本号来发行不兼容的改版，意味着你必须为这些改变所带来的影响深思熟虑，并且评估所涉及的成本及效益比。</p><p><strong>为整个公共 API 写文件太费事了！</strong></p><p>为供他人使用的软件编写适当的文件，是你作为一名专业开发者应尽的职责。保持专案高效一个非常重要的部份是掌控软件的复杂度，如果没有人知道如何使用你的软件或不知道哪些函数的调用是可靠的，要掌控复杂度会是困难的。长远来看，使用语义化版本控制以及对于公共 API 有良好规范的坚持，可以让每个人及每件事都运行顺畅。</p><p><strong>万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？</strong></p><p>一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文件中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。</p><p><strong>如果我更新了自己的依赖但没有改变公共 API 该怎么办？</strong></p><p>由于没有影响到公共 API，这可以被认定是兼容的。若某个软件和你的包有共同依赖，则它会有自己的依赖规范，作者也会告知可能的冲突。要判断改版是属于修订等级或是次版等级，是依据你更新的依赖关系是为了修复问题或是加入新功能。对于后者，我经常会预期伴随着更多的代码，这显然会是一个次版本号级别的递增。</p><p><strong>如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）</strong></p><p>自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住， 语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。</p><p><strong>我该如何处理即将弃用的功能？</strong></p><p>弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。当你弃用部份公共 API 时，你应该做两件事：（1）更新你的文件让使用者知道这个改变，（2）在适当的时机将弃用的功能透过新的次版本号发布。在新的主版本完全移除弃用功能前，至少要有一个次版本包含这个弃用信息，这样使用者才能平顺地转移到新版 API。</p><p><strong>语义化版本对于版本的字串长度是否有限制呢？</strong></p><p>没有，请自行做适当的判断。举例来说，长到 255 个字元的版本已过度夸张。再者，特定的系统对于字串长度可能会有他们自己的限制。</p><h2 id="版本alpha-beta-rc"><a class="markdownIt-Anchor" href="#版本alpha-beta-rc"></a> 版本：Alpha、beta、RC</h2><blockquote><p>这些叫做先行版本号。被标注在修订版之后，先加上一个连接号再加上一连串以句点分隔的标识符来修饰，如1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92</p></blockquote><p>常见的 RC 版本，全称是 Release Candidate。其中 Release 是发行、发布的意思。Candidate 是候选人的意思，用在软件或者操作系统上就是候选版本。因此 Release Candidate 就是发行候选版本。</p><table><thead><tr><th>版本名称</th><th>介绍</th><th>说明</th></tr></thead><tbody><tr><td>Alpha</td><td>内测版本</td><td>内部测试版本。</td></tr><tr><td>Beta</td><td>公测版本</td><td>Beta 阶段会一直加入新的功能。</td></tr><tr><td>RC</td><td>候选版本</td><td>几乎就不会加入新的功能了，而主要着重于除错。</td></tr><tr><td>Release</td><td>正式版本</td><td>稳定版本。</td></tr></tbody></table><p>RC 版本和 Beta 版最大的差别在于 Beta 阶段会<strong>一直加入新的功能</strong>，但是到了 RC 阶段，几乎就不会加入新的功能了，而主要着重于<strong>除错</strong>。</p><p>RC 版本，它不是最终的版本，而是最终版（RTM，Release To Manufacture）之前的最后一个版本。广义上对测试有三个传统的称呼：Alpha（α）、Beta（β）、Gamma（γ），用来标识测试的阶段和范围。Alpha 是指内测，即现在说的 CB，指开发团队内部测试的版本或者有限用户体验测试版本。Beta 是指公测，即针对所有用户公开的测试版本。然后做过一些修改，成为正式发布的候选版本时叫做 Gamma，现在叫做 RC。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;语义化的版本控制： 用一组简单的规则及条件来约束版本号的配置和增长&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作为一位负责任的开发者，你理当确保每次包升级的运作与版本号的表述一致。现实世界是复杂的，我们除了提高警觉外能做的不多。你所能做的就是让语义化的版本控制为你提供一个健全
      
    
    </summary>
    
    
      <category term="计算机基础知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>浙江大学期末考试——Go语言</title>
    <link href="https://nymrli.top/2021/11/02/%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%AD%A6%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E2%80%94%E2%80%94Go%E8%AF%AD%E8%A8%80/"/>
    <id>https://nymrli.top/2021/11/02/浙江大学期末考试——Go语言/</id>
    <published>2021-11-02T13:52:53.000Z</published>
    <updated>2021-12-30T05:28:27.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浙江大学期末考试go语言"><a class="markdownIt-Anchor" href="#浙江大学期末考试go语言"></a> 浙江大学期末考试——Go语言</h1><blockquote><p>期末复习对学习知识的帮助是巨大的，相比于看视频，本篇点到为止的知识点形的期末复习笔记，我相信更能让人学会。我相信，只要把本笔记全部看完了必然就会Go了。如果你做到了但还没有学会Go，那你大可来找我/doge。</p></blockquote><h2 id="概论"><a class="markdownIt-Anchor" href="#概论"></a> 概论</h2><ul><li><strong>指令</strong>：计算机的一个最基本的功能，如实现一次加法运算或实现一次大小的判别</li><li><strong>计算机的指令系统</strong>：计算机所能实现的指令的集合</li><li><strong>程序</strong>：一系列计算机指令的有序组合</li></ul><h3 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法：</h3><blockquote><p>求解<strong>特定问题</strong>的一组<strong>有限</strong>的操作序列</p></blockquote><ul><li>目的性：算法有运算结果，程序强调过程性</li><li>抽象性：算法独立于编程语言和指令系统</li><li>研究性：算法是理论研究，载体可以是伪码，文字，图片等，载体为某一编程语言时就是程序</li></ul><h3 id="基本特征"><a class="markdownIt-Anchor" href="#基本特征"></a> 基本特征：</h3><ul><li>有限性：一个算法在执行有限步之后必须会终止。</li><li>确定性：一个算法的每个步骤都必须精确地定义，可以严格地、无歧义地执行。</li><li>输入：一个算法在运行之前赋给它的量，或在运行过程中动态地赋给它的量。</li><li>输出：一个算法运行结束时的结果。</li><li>有效性：一个算法在运行过程中，所有运算必须是充分基本的，是可行的，原则上人们可以用笔和纸在有限的时间内精确地完成这些运算。</li></ul><p><strong>结构化程序设计</strong></p><ul><li>程序=算法+数据结构  ----获得图灵奖的Pascal之父Nicklaus Wirth</li><li>将复杂程序划分为若干个相互独立的模块</li><li>模块：一条语句（Statement）、一段程序或一个函数（子程序）等</li></ul><h3 id="结构化程序设计特点"><a class="markdownIt-Anchor" href="#结构化程序设计特点"></a> <strong>结构化程序设计特点</strong></h3><ul><li>自顶向下</li><li>模块化设计</li><li>结构化编码</li></ul><h3 id="oop"><a class="markdownIt-Anchor" href="#oop"></a> <strong>OOP</strong></h3><ul><li>封装和数据隐藏</li><li>继承和重用</li><li>多态性</li></ul><h3 id="go-特性"><a class="markdownIt-Anchor" href="#go-特性"></a> <strong>GO 特性</strong></h3><p>静态编译型<br>语法强调少即是多<br>强调组合，更简洁的OOP<br>Duck模型的非侵入式接口<br>原生支持并发编程<br>支持多种操作系统和体系结构的交叉编译<br>大量使用内置函数和接口来提高代码复用度<br>支持和C 语言相互调用的机制（CGO）</p><h3 id="语言环境变量"><a class="markdownIt-Anchor" href="#语言环境变量"></a> <strong>语言环境变量</strong></h3><p><code>$GOROOT</code>  GO 语言环境在计算机的安装位置<br><code>$GOPATH</code>  GO 语言工作目录，可以有多个</p><h3 id="go语言的源码文件有三大类"><a class="markdownIt-Anchor" href="#go语言的源码文件有三大类"></a> <strong>Go语言的源码文件有三大类：</strong></h3><ul><li>命令源码文件，可执行的程序的入口</li><li>库源码文件，集中放置各种待被使用的程序实体</li><li>测试源码文件，用于对前两种源码文件中的程序实体的功能和性能进行测试</li></ul><h3 id="go-token标记"><a class="markdownIt-Anchor" href="#go-token标记"></a> Go Token(标记)</h3><ul><li>关键字：25个</li><li>标识符：40个</li><li>分隔符</li><li>字面量</li></ul><h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> <strong>变量</strong></h2><ul><li>变量代表<strong>某块内存区域</strong></li><li>变量的使用包括两个分开的步骤：变量声明、变量赋值</li><li>变量声明后会立即分配存储空间</li><li>变量声明后会<strong>初始化为该类型的零值</strong></li><li>同一代码块内不能多次声明同名变量</li><li>子代码块可声明父代码块同名变量，子遮盖父</li><li>变量<strong>未声明直接使用</strong>会出现编译错误</li><li>变量在函数中<strong>声明了但未使用</strong>也会出现编译错误</li><li>GO 是<strong>强类型语言</strong>，编译器会确认每个变量应有的类型，错误使用将引发错误</li><li>GO 是<strong>静态语言</strong>，但支持<u>编译时自动推断类型</u></li><li>变量声明后需按对应类型赋值</li><li>变量声明赋值可以同时进行</li><li>变量声明赋值同时进行可以忽略类型，由编译器推断</li><li>可在函数内部使用  :=   进行短类型声明赋值</li></ul><p>注：</p><ul><li>多变量同时赋值，只能在函数体内。<code>a, b = 3, 4</code></li><li>短类型声明赋值,只能在函数体内。<code>c := true</code></li><li>全局变量可以不被使用</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">1</span> <span class="comment">//声明赋值同时进行</span></span><br><span class="line"><span class="comment">//a =bool //错误赋值</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span> <span class="comment">// 声明未加类型，自动推断类型</span></span><br><span class="line">a, b = <span class="number">3</span>, <span class="number">4</span> <span class="comment">//多变量同时赋值，只能在函数体内</span></span><br><span class="line"><span class="comment">//c := true   //短类型声明赋值,只能在函数体内</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b = <span class="number">3</span>, <span class="number">4</span> <span class="comment">//多变量同时赋值，只能在函数体内</span></span><br><span class="line">c := <span class="literal">true</span>   <span class="comment">//短类型声明赋值,只能在函数体内</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"a address: %v  value: %v \n"</span>, &amp;a, a)</span><br><span class="line">fmt.Printf(<span class="string">"b address: %v  value: %v \n"</span>, &amp;b, b)</span><br><span class="line">fmt.Printf(<span class="string">"c address: %v  value: %v \n"</span>, &amp;c, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="iota枚举"><a class="markdownIt-Anchor" href="#iota枚举"></a> iota枚举</h2><p>Go里面的关键字<code>iota</code>，可以在声明<code>enum</code>时采用，它默认开始值是0，每调用一次加1：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>(</span><br><span class="line">x = <span class="literal">iota</span>  <span class="comment">// x == 0</span></span><br><span class="line">y = <span class="literal">iota</span>  <span class="comment">// y == 1</span></span><br><span class="line">z = <span class="literal">iota</span>  <span class="comment">// z == 2</span></span><br><span class="line">w  <span class="comment">// 常量声明省略值时，默认和之前一个值的字面相同。这里隐式地说w = iota，因此w == 3。其实上面y和z可同样不用"= iota"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v = <span class="literal">iota</span> <span class="comment">// 每遇到一个const关键字，iota就会重置，此时v == 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ( </span><br><span class="line">  e, f, g = <span class="literal">iota</span>, <span class="literal">iota</span>, <span class="literal">iota</span> <span class="comment">//e=0,f=0,g=0 iota在同一行值相同</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>除非被显式设置为其它值或<code>iota</code>，每个<code>const</code>分组的第一个常量被默认设置为它的0值，第二及后续的常量被默认设置为它前面那个常量的值，如果前面那个常量的值是<code>iota</code>，则它也被设置为<code>iota</code>。</p></blockquote><h1 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h1><h2 id="条件语句"><a class="markdownIt-Anchor" href="#条件语句"></a> <strong>条件语句</strong></h2><h3 id="if"><a class="markdownIt-Anchor" href="#if"></a> if</h3><ul><li>GO不支持 ?: 三元运算符</li><li>if 后面的条件不需要( )</li><li>if 可带一个初始化子语句用;跟条件分开</li></ul><h3 id="switch"><a class="markdownIt-Anchor" href="#switch"></a> switch</h3><blockquote><p>case 按照<strong>从上到下的顺序进行求值，直到找到匹配的项</strong>后执行并退出switch（除非使用fallthrough）。如果 switch 没有表达式，则对 true 进行匹配，因此，可以将 if else-if else 改写成一个 switch。</p></blockquote><ul><li>switch 一样可以带初始化子语句</li><li>switch 条件表达式不要求必须为整型，类型本身也可作条件判断</li><li>case 后的break 可以省略</li><li>多个case连在一起是为了满足连续的条件范围</li><li>也可以直接把多个case条件连在一起，在最后一个case写执行语句</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"hello"</span></span><br><span class="line"><span class="keyword">switch</span> a &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"hello"</span>:</span><br><span class="line">    fmt.Println(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"world"</span>:</span><br><span class="line">    fmt.Println(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// second</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"hello"</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> s == <span class="string">"hello"</span>:</span><br><span class="line">    fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> s != <span class="string">"world"</span>:</span><br><span class="line">    fmt.Println(<span class="string">"world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">world</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>注：新编写的代码，不建议使用 fallthrough。</p><h2 id="循环语句"><a class="markdownIt-Anchor" href="#循环语句"></a> 循环语句</h2><h3 id="for"><a class="markdownIt-Anchor" href="#for"></a> for</h3><ul><li>GO 的循环语句只有for ,没有while/do while</li><li>★：for 语句后面不能加( )</li><li>for语句的三个部分,省略任何一个时，分号不能省略</li><li>只留条件判断时，可以不用分号 （相当于while语句）</li><li>全部省略,变为无限循环</li></ul><h2 id="转移语句"><a class="markdownIt-Anchor" href="#转移语句"></a> 转移语句</h2><ul><li><p>break：语句用于跳出代码块或循环, 除了用在switch之外,还用于结束整个循环，不再进行循环条件判断</p></li><li><p>continue：语句用于立即终止本轮循环，返回循环结构的头部，开始下一轮循环</p></li><li><p>标签</p><blockquote><p>如果存在多重循环，默认情况下break语句和continue语句都只针对最内层循环。</p><p>所以Go提供了标签，标签允许指定跳出的循环</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用标签</span></span><br><span class="line">    flag := <span class="literal">false</span></span><br><span class="line">end:</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="number">100</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> i*j == <span class="number">651</span> &#123;</span><br><span class="line">                flag = <span class="literal">true</span></span><br><span class="line">                <span class="comment">//一次跳出</span></span><br><span class="line">                <span class="keyword">break</span> end </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(flag)</span><br></pre></td></tr></table></figure></li></ul><h1 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h1><p><strong>分类</strong></p><ul><li>命名类型：<ul><li>基础数据类型（整型、浮点型等）</li><li>用户自定义类型（type关键字定义的结构、接口等）</li></ul></li><li>未命名类型<ul><li>集合类型（数组、切片、映射等）</li><li>函数等</li></ul></li></ul><h2 id="bool类型"><a class="markdownIt-Anchor" href="#bool类型"></a> Bool类型</h2><ul><li>布尔值包括true、false，类型长度为1字节</li><li>布尔类型无法被其他类型赋值，也不支持类型转换</li><li>布尔类型不支持用0和1表示真假</li></ul><p>注：由于 Go语言是强类型的语言，如果不满足自动转换的条件，则必须进行强制类型转换。（C/C++等语言有隐式类型转换，golang中没有，即无法自动强转）</p><h2 id="字符类型"><a class="markdownIt-Anchor" href="#字符类型"></a> 字符类型</h2><ul><li>byte ，对应整型里的uint8 ，代表 ASCII 码一个字符</li><li>rune，对应整型里的int32 ，代表Unicode码一个字符</li></ul><p>格式化输出时，可用%c 输出对应值，如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浙</span></span><br><span class="line">fmt.Printf(<span class="string">"%c"</span>,<span class="number">27993</span>)</span><br></pre></td></tr></table></figure><h2 id="字符串类型"><a class="markdownIt-Anchor" href="#字符串类型"></a> 字符串类型</h2><ul><li>字符串类型string，采用UTF-8编码格式的不可改变的字符序列</li><li>字符串单行用双引号 ,多行可用反引号`，空格和缩进都会被保留</li></ul><p>字符串标准库：</p><ul><li>strings包提供了很多操作字符串的简单函数</li><li>strconv包提供了基本数据类型和字符串之间的转换</li><li>regexp包提供了正则表达式功能</li><li>unicode包及其子包 utf8、utf16 中，提供了对 Unicode 相关编码、解码的支持</li></ul><p>strings包</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子串 substr 在 s 中，返回 true</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Contains</span><span class="params">(s, substr <span class="keyword">string</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function">// <span class="title">chars</span> 中任何一个 <span class="title">Unicode</span> 代码点在 <span class="title">s</span> 中，返回 <span class="title">true</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">ContainsAny</span><span class="params">(s, chars <span class="keyword">string</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function">// <span class="title">Unicode</span> 代码点 <span class="title">r</span> 在 <span class="title">s</span> 中，返回 <span class="title">true</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">ContainsRune</span><span class="params">(s <span class="keyword">string</span>, r <span class="keyword">rune</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">/** 子串出现次数 */</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">Count</span><span class="params">(s, sep <span class="keyword">string</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function">// 字符串重复几次 </span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">Repeat</span><span class="params">(s <span class="keyword">string</span>, count <span class="keyword">int</span>)</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure><p>unicode 包主要包含3个部分：</p><ul><li>unicode  ：基本的字符判断函数</li><li>utf8 ：负责 rune 和 byte 之间的转换</li><li>utf16 ：负责 rune 和 uint16 数组之间的转换</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsControl</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span>  // 是否控制字符</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">IsDigit</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span>  // 是否阿拉伯数字字符，即 0-9</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">IsGraphic</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span> // 是否图形字符</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">IsLetter</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span> // 是否字母</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">IsLower</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span> // 是否小写字符</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">IsMark</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span> // 是否符号字符</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">IsNumber</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span> // 是否数字字符，比如罗马数字Ⅷ也是数字字符</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">IsOneOf</span><span class="params">(ranges []*RangeTable, r <span class="keyword">rune</span>)</span> <span class="title">bool</span> // 是否是 <span class="title">RangeTable</span> 中的一个</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">IsPrint</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span> // 是否可打印字符</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">IsPunct</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span> // 是否标点符号</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">IsSpace</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span> // 是否空格</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">IsSymbol</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span> // 是否符号字符</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">IsTitle</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span> // 是否 <span class="title">title</span> <span class="title">case</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">IsUpper</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span> // 是否大写字符</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">Is</span><span class="params">(rangeTab *RangeTable, r <span class="keyword">rune</span>)</span> <span class="title">bool</span> // <span class="title">r</span> 是否为 <span class="title">rangeTab</span> 类型的字符</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">In</span><span class="params">(r <span class="keyword">rune</span>, ranges ...*RangeTable)</span> <span class="title">bool</span>  // <span class="title">r</span> 是否为 <span class="title">ranges</span> 中任意一个类型的字符</span></span><br></pre></td></tr></table></figure><h1 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h1><ul><li>算术运算符<ul><li>自增、自减，直支持a++，不支持++a ==&gt; 设计思想是保证只有一种写法</li></ul></li><li>关系运算符<ul><li>因为bool类型不能转为整型，所以不支持不等式连写：比如 x&lt;y&lt;z 这种语法是错误的</li></ul></li><li>逻辑运算符<ul><li>注意短路</li></ul></li><li>赋值运算符</li><li>位运算符</li></ul><p>注：Go中的运算优先级跟C<ins>不太一样，比如Go中位移运算符的优先级是高于算数运算符的，而C</ins>中相反</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c++ --&gt; 2</span></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span> + <span class="number">4</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"><span class="comment">// go --&gt; 3</span></span><br><span class="line"><span class="built_in">println</span>( <span class="number">1</span> + <span class="number">4</span> &gt;&gt; <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>见：</p><ul><li><a href="http://c.biancheng.net/view/5559.html" target="_blank" rel="noopener">Go语言运算符的优先级</a></li><li><a href="https://www.sojson.com/operation/cxx.html" target="_blank" rel="noopener">C++运算符优先级</a></li></ul><h1 id="集合数据类型"><a class="markdownIt-Anchor" href="#集合数据类型"></a> 集合数据类型</h1><h2 id="数组array"><a class="markdownIt-Anchor" href="#数组array"></a> 数组（Array）</h2><ul><li>数组是同类元素的集合，它的元素排列在连续的空间中，按下标来标记和访问</li><li>数组类型定义包括元素类型，数组长度（元素个数）</li><li>元素类型相同的两个数组，数组长度不同则类型不同，相互不能复制</li><li>数组变量声明后，其元素类型、数组长度均不可变  （定长性）</li></ul><p>注：数组传参问题——实参拷贝一份给形参，二者相互独立，传递大数组时效率较低，尽量用指向数组的指针来传参</p><p><strong>数组声明</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只声明未赋值</span></span><br><span class="line"><span class="comment">//数组元素都被初始化为对应类型零值</span></span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line"><span class="comment">//声明3个元素的整型数组</span></span><br><span class="line"><span class="comment">//直接赋值</span></span><br><span class="line">arr2 := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br><span class="line"><span class="comment">//声明整型数组</span></span><br><span class="line"><span class="comment">//直接赋值</span></span><br><span class="line"><span class="comment">//数组长度由初始化值的数量来确定</span></span><br><span class="line">arr3 := [...]<span class="keyword">int</span>&#123;<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125; <span class="comment">//...不可省略</span></span><br><span class="line"><span class="comment">//声明4个元素的整型数组</span></span><br><span class="line"><span class="comment">//对下标为0和3的元素直接赋值</span></span><br><span class="line"><span class="comment">//其余元素保持零值</span></span><br><span class="line">arr4 := [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">0</span>: <span class="number">99</span>, <span class="number">3</span>: <span class="number">100</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%v,%v,%v,%v"</span>, arr1, arr2, arr3, arr4)</span><br><span class="line"><span class="comment">//[0 0 0 0 0],[11 12 13],[11 12 13 14 15],[99 0 0 100]</span></span><br></pre></td></tr></table></figure><h2 id="切片-slice"><a class="markdownIt-Anchor" href="#切片-slice"></a> 切片（ Slice）</h2><blockquote><p>数组的定长性和值拷贝限制其使用</p></blockquote><ul><li>切片封装底层的数组，提供长度可变的数组引用</li><li>切片是<strong>引用类型</strong>，不支持==运算（除了nil)</li><li>切片包括三个变量<ul><li>底层数组指针</li><li>切片当前长度</li><li>切片容量（小于等于底层数组长度，超过时要变更底层数组）</li></ul></li></ul><p><strong>切片使用</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建指定的底层数组，然后创建切片</span></span><br><span class="line">a := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>&#125;</span><br><span class="line">s1 := a[<span class="number">0</span>:<span class="number">4</span>] <span class="comment">// from a[0] to a[3]</span></span><br><span class="line">s2 := a[:<span class="number">4</span>]  <span class="comment">// from a[0] to a[3]</span></span><br><span class="line"><span class="comment">//不指定数组大小，同时创建匿名数组和返回切片引用 </span></span><br><span class="line">d := []<span class="keyword">int</span>&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;  </span><br><span class="line"><span class="comment">// 直接通过make函数创建切片</span></span><br><span class="line">i := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">5</span>) <span class="comment">// 为什么不用构造函数 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切片动态增加</span></span><br><span class="line">sli = <span class="built_in">append</span>(sli, <span class="number">20</span>)</span><br><span class="line"><span class="comment">// 切片合并：内置函数 append()  还支持切片的合并，用...运算符把对应切片所有元素都取出</span></span><br><span class="line">veggies := []<span class="keyword">string</span>&#123;<span class="string">"potatoes"</span>, <span class="string">"tomatoes"</span>, <span class="string">"brinjal"</span>&#125;</span><br><span class="line">fruits := []<span class="keyword">string</span>&#123;<span class="string">"oranges"</span>, <span class="string">"apples"</span>&#125;</span><br><span class="line">food := <span class="built_in">append</span>(veggies, fruits...) <span class="comment">//... 不可忽略</span></span><br></pre></td></tr></table></figure><p><strong>语法糖<code>...</code></strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MySum</span><span class="params">(p ...<span class="keyword">int</span>)</span> <span class="params">(sum <span class="keyword">int</span>)</span></span>&#123;<span class="comment">// 第一个用法主要是用于函数有多个不定参数的情况，可以接受多个不确定数量的参数。</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> p&#123;</span><br><span class="line">sum += v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := []<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>&#125;</span><br><span class="line">i := MySum(arr...)<span class="comment">// 第二个用法是将slice打散进行传递。</span></span><br><span class="line">fmt.Printf(<span class="string">"i: %v\n"</span>, i)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="映射-map"><a class="markdownIt-Anchor" href="#映射-map"></a> 映射（ Map）</h2><blockquote><p>映射用于存储一系列无序的键值对</p></blockquote><ul><li>映射的键（key） 只支持值类型（可以使用==运算符作比较）</li><li>映射的值(value)不限制，但所有元素的值类型一致</li><li>GO 映射的底层实现是哈希数组链表，不是 C++的红黑树</li></ul><p>注：</p><ul><li><p>只声明不初始化的映射为nil值，未分配底层存储空间，不能添加元素</p></li><li><p>用字面量或make函数进行初始化后可以添加元素</p><p>即：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">fmt.Println(m1 == <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//m1["a"] = 1 //error</span></span><br><span class="line"></span><br><span class="line">m2 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">fmt.Println(m2 == <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">//false</span></span><br><span class="line">m2[<span class="string">"a"</span>] = <span class="number">1</span> <span class="comment">//ok</span></span><br><span class="line"></span><br><span class="line">m3 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">fmt.Println(m3 == <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">//false</span></span><br><span class="line">m3[<span class="string">"a"</span>] = <span class="number">1</span> <span class="comment">//ok</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>Map映射元素查找</strong></p><ul><li><p>映射元素通过下标直接查找访问</p><ul><li>存在对应key的，返回对应value</li><li>不存在对应key的，返回value 类型的零值</li></ul><p>==&gt; Q: 如果返回零值，那如何判断是否存在呢？</p><p>A:映射元素通过下标访问其实可以返回两个值</p><ul><li>对应的value</li><li>对应的key是否存在的布尔值</li></ul></li></ul><p><strong>映射元素删除</strong>：使用内置函数delete()删除映射元素，如<code>delete(personSalary,&quot;steve&quot;)</code></p><p>二维映射map创建：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">comEmp := <span class="keyword">map</span>[<span class="keyword">string</span>] <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> &#123;</span><br><span class="line">    <span class="string">"IBM"</span>: &#123;</span><br><span class="line">        <span class="string">"steve"</span>: <span class="number">12000</span>,</span><br><span class="line">        <span class="string">"jamie"</span>: <span class="number">15000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"HP"</span>: &#123;</span><br><span class="line">        <span class="string">"mike"</span>: <span class="number">15000</span>,</span><br><span class="line">        <span class="string">"joe"</span>:  <span class="number">9000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若顶级类型只是一个类型名，你可以在文法的元素中省略它。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo1</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">Lat, Long <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123;</span><br><span class="line"><span class="string">"Bell Labs"</span>: &#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>&#125;,</span><br><span class="line"><span class="string">"Google"</span>:    &#123;<span class="number">37.42202</span>, <span class="number">-122.08408</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo2.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPAddr [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 给 IPAddr 添加一个 "String() string" 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f IPAddr)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">str := <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span>  _ ,v:= <span class="keyword">range</span> f&#123;</span><br><span class="line"><span class="keyword">if</span> str !=<span class="string">""</span> &#123;</span><br><span class="line">str += <span class="string">","</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(strconv.Itoa(<span class="keyword">int</span>(v)))</span><br><span class="line">str += strconv.Itoa(<span class="keyword">int</span>(v))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">hosts := <span class="keyword">map</span>[<span class="keyword">string</span>]IPAddr&#123;</span><br><span class="line"><span class="string">"loopback"</span>:  &#123;<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line"><span class="string">"googleDNS"</span>: &#123;<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name, ip := <span class="keyword">range</span> hosts &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v: %v\n"</span>, name, ip)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h1><p>概念：</p><p>函数是程序执行的基本语法结构：</p><ul><li>函数或方法编译成程序体代码区的一段指令序列</li><li>进程执行模型大多基于“栈堆”</li><li>函数抽象逻辑模块</li><li>通过函数调用函数,层层叠叠的函数构成树结构组织代码</li><li>函数效率高则程序效率高，建议多用标准库函数</li></ul><p>函数为<strong>第一等公民</strong>（与其他数据类型地位平等）</p><ul><li>赋值给变量</li><li>作为参数传递给其他函数</li><li>作为函数的结果被返回</li><li>支持闭包</li></ul><h2 id="语法格式"><a class="markdownIt-Anchor" href="#语法格式"></a> 语法格式：</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数可以有<strong>多个返回值</strong></li><li>返回值可以有变量名</li><li><strong>不支持函数重载</strong></li></ul><h2 id="函数参数"><a class="markdownIt-Anchor" href="#函数参数"></a> <strong>函数参数：</strong></h2><ul><li><strong>参数传递方式都是值拷贝</strong></li><li>形参与实参是值传递时，形参的变化不影响实参</li><li>形参与实参传递指针时，形参的变化有可能会影响实参<ul><li>===&gt; 注意：引用类型其实传的就是指针</li></ul></li><li><strong>不支持默认值参数</strong></li></ul><h3 id="不定参数"><a class="markdownIt-Anchor" href="#不定参数"></a> 不定参数</h3><ul><li>不定参数，形参数目可变、不确定</li><li>不定参数声明语法格式：<code>param … type</code></li><li>不定参数<strong>类型必须相同</strong></li><li>不定参数必须是<strong>函数的最后一个参数</strong></li><li>不定参数的<strong>形参在函数内是切片</strong></li><li><u>切片传递给不定参数时，要用…运算符取出各元素</u> ==&gt;多于函数定参数的参数将会被放到不定参数中</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//不定参数函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(items ...<span class="keyword">int</span>)</span> <span class="params">(sum <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> items &#123; <span class="comment">//items 相当于切片</span></span><br><span class="line">sum += v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//切片参数函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumS</span><span class="params">(items []<span class="keyword">int</span>)</span> <span class="params">(sum <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> items &#123;</span><br><span class="line">sum += v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">//array := [...]int&#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line">fmt.Println(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">fmt.Println(sum(slice...)) <span class="comment">//不定参数函数参数为切片时，需用...运算符</span></span><br><span class="line"><span class="comment">//fmt.Println(sum(array...)) //数组不支持...运算符</span></span><br><span class="line">fmt.Println(sumS(slice)) <span class="comment">//切片参数函数可直接用切片变量，不用...运算符</span></span><br><span class="line"><span class="comment">//fmt.Println(sumS(array)) //切片参数函数不能用数组传参</span></span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>, sum)</span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>, sumS)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数类型"><a class="markdownIt-Anchor" href="#函数类型"></a> 函数类型</h2><ul><li>函数类型又叫函数签名，显示函数类型fmt.Printf(&quot;%T\n&quot;, funcname)</li><li>函数类型包括形参列表和返回值列表<ul><li>形参列表：形参的次序、个数和类型（形参名无关）</li><li>返回值列表：返回值的次序、个数和类型（返回值名无关）</li></ul></li><li>可以使用type定义函数类型</li><li>函数类型是<strong>引用类型</strong>，未初始化的零值为nil</li><li>标准定义的函数名为常量，不可修改指向</li><li>函数是第一公民，函数变量可赋值、传参等</li></ul><h2 id="匿名函数"><a class="markdownIt-Anchor" href="#匿名函数"></a> 匿名函数</h2><blockquote><p>匿名函数相当于函数字面量，可以使用函数变量的地方就可以使用匿名函数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名函数直接调用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(a,b <span class="keyword">int</span> )</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line">&#125;(<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">//匿名函数赋值给函数变量</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">func</span><span class="params">(a,b <span class="keyword">int</span> )</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数作为返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFun</span><span class="params">(op <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">(a,b <span class="keyword">int</span> )</span><span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(a,b <span class="keyword">int</span> )</span><span class="title">int</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="闭包"><a class="markdownIt-Anchor" href="#闭包"></a> 闭包</h2><blockquote><p>闭包=函数+引用环境，常见于匿名函数引用了函数定义环境的变量</p></blockquote><ul><li>如果函数返回的闭包引用了该函数的局部变量<ul><li>每次调用函数都会为局部变量分配内存</li><li>每次使用闭包都会影响局部变量</li></ul></li></ul><h2 id="返回值"><a class="markdownIt-Anchor" href="#返回值"></a> 返回值</h2><p>允许返回指定变量名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addT1</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">bool</span>)</span></span> &#123; <span class="comment">//多值返回，返回值不命名</span></span><br><span class="line">c := a + b</span><br><span class="line">d := a &gt; b</span><br><span class="line"><span class="keyword">return</span> c, d <span class="comment">//按顺序输入返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addT2</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(c <span class="keyword">int</span>, d <span class="keyword">bool</span>)</span></span> &#123; <span class="comment">//多值返回，返回值命名</span></span><br><span class="line">    <span class="comment">// 注, c，d变量的类型声明在函数签名中已经声明了，因此直接赋值即可，不用:=</span></span><br><span class="line">c = a + b</span><br><span class="line">d = a &gt; b</span><br><span class="line"><span class="keyword">return</span> <span class="comment">//直接返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数作为类型，以及函数赋值给变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span> )</span><span class="title">int</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(f <span class="keyword">func</span>(a, b <span class="keyword">int</span>)</span><span class="title">int</span> )</span>&#123;</span><br><span class="line">f = <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a - b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> f <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span><span class="title">int</span> = <span class="title">add</span></span></span><br><span class="line"><span class="function"><span class="title">change</span><span class="params">(f)</span>// 未起作用</span></span><br><span class="line"><span class="function"><span class="title">i</span> := <span class="title">f</span><span class="params">(1, 2)</span></span></span><br><span class="line">fmt.Printf("i: %v\n", i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="defer"><a class="markdownIt-Anchor" href="#defer"></a> defer</h1><p>Go 函数支持defer进行延迟调用<br>defer 类似OO语言异常处理中的finally子句，常用来保证系统资源的回收和释放</p><ul><li>在注册defer函数时，会把当时的实参值传递给形参，后续实参的变化不影响函数结果，如</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a:=<span class="number">5</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"defer注册函数时的a值"</span>,a)<span class="comment">// a=5的时候，记录了defer</span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">fmt.Println(<span class="string">"普通函数的a值"</span>,a)<span class="comment">// 后续变化了</span></span><br><span class="line"><span class="comment">//普通函数的a值10</span></span><br><span class="line"><span class="comment">//defer注册函数时的a值5</span></span><br></pre></td></tr></table></figure><ul><li>使用多个defer时，这些defer 调用 以**先进后出（FILO）**顺序在函数返回前被执行</li></ul><h1 id="结构体"><a class="markdownIt-Anchor" href="#结构体"></a> 结构体</h1><ul><li>结构把有内在联系的不同类型的数据统一成一个整体，使它们相互关联</li><li>结构是变量的集合，从外部看是一个实体</li><li>结构支持嵌套</li><li>结构的字段类型不限</li><li>结构的存储空间连续，按声明时的顺序存放</li></ul><h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用：</h2><h3 id="命名类型结构"><a class="markdownIt-Anchor" href="#命名类型结构"></a> <strong>命名类型结构</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">    firstName <span class="keyword">string</span></span><br><span class="line">    lastName  <span class="keyword">string</span></span><br><span class="line">    age       <span class="keyword">int</span></span><br><span class="line">    salary    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">    firstName, lastName <span class="keyword">string</span></span><br><span class="line">    age, salary         <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名类型结构直接创建结构变量"><a class="markdownIt-Anchor" href="#匿名类型结构直接创建结构变量"></a> <strong>匿名类型结构（直接创建结构变量）</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myemployee <span class="keyword">struct</span> &#123;  </span><br><span class="line">    firstName, lastName <span class="keyword">string</span></span><br><span class="line">    age, salary         <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>带标签的结构体</strong></p><ul><li>标签是一个附属于字段的字符串，用于描述字段信息</li><li>标签还可以按<code>key1:“value1” key2:“value2”</code>键值对进行修饰，来提供编码、解码、ORM等转化辅助，比如JSON、BSON 等格式序列化</li></ul><p><strong>结构变量初始化</strong></p><ul><li><p>用命名类型结构或匿名类型结构声明的结构变量，各字段<strong>初始化为相关类型的零值</strong></p></li><li><p>按<strong>字段名</strong>初始化，<strong>不用按顺序</strong>，<strong>未指定的字段为零值</strong></p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">emp1 := Employee&#123;</span><br><span class="line">    firstName: <span class="string">"Sam"</span>,</span><br><span class="line">    age:       <span class="number">25</span>,</span><br><span class="line">    salary:    <span class="number">500</span>,</span><br><span class="line">    lastName:  <span class="string">"Anderson"</span>, <span class="comment">//逗号不能忽略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>用<strong>字面量</strong>初始化，按字段类型声明顺序并全部设置，顺序不对或遗漏字段报错</p><ul><li><code>emp2 := Employee{&quot;Thomas&quot;, &quot;Paul&quot;, 29, 800}</code></li></ul></li></ul><h3 id="访问结构体数据"><a class="markdownIt-Anchor" href="#访问结构体数据"></a> <strong>访问结构体数据</strong></h3><ul><li><p>采用 结构变量.字段</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">emp := Employee&#123;<span class="string">"Thomas"</span>, <span class="string">"Paul"</span>, <span class="number">29</span>, <span class="number">800</span>&#125;</span><br><span class="line">fmt.Println(emp.age)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>采用（*结构变量指针）.字段  *为间访符</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">emp := &amp;Employee&#123;<span class="string">"Sam"</span>, <span class="string">"Anderson"</span>, <span class="number">55</span>, <span class="number">6000</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"First Name:"</span>, (*emp).firstName)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>采用 结构变量指针.字段，不支持-&gt;</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">emp := &amp;Employee&#123;<span class="string">"Sam"</span>, <span class="string">"Anderson"</span>, <span class="number">55</span>, <span class="number">6000</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"First Name:"</span>, emp.firstName)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>匿名字段</strong>:结构体字段也可以省略字段名，字段名默认为对应数据类型名称（数据类型不能重复）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">p := Person&#123;<span class="string">"Naveen"</span>, <span class="number">50</span>&#125;</span><br><span class="line">p.<span class="keyword">int</span> =<span class="number">60</span></span><br></pre></td></tr></table></figure><h2 id="嵌套结构"><a class="markdownIt-Anchor" href="#嵌套结构"></a> 嵌套结构</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">    city, state <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name    <span class="keyword">string</span></span><br><span class="line">    age     <span class="keyword">int</span></span><br><span class="line">    address Address</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p Person</span><br><span class="line">    p.name = <span class="string">"Naveen"</span></span><br><span class="line">    p.age = <span class="number">50</span></span><br><span class="line">    p.address = Address&#123;</span><br><span class="line">        city:  <span class="string">"Chicago"</span>,</span><br><span class="line">        state: <span class="string">"Illinois"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">"Name:"</span>, p.name)</span><br><span class="line">    fmt.Println(<span class="string">"Age:"</span>, p.age)</span><br><span class="line">    fmt.Println(<span class="string">"City:"</span>, p.address.city)</span><br><span class="line">    fmt.Println(<span class="string">"State:"</span>, p.address.state)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子结构字段提升"><a class="markdownIt-Anchor" href="#子结构字段提升"></a> 子结构字段提升</h3><blockquote><p><strong>匿名子结构</strong>的<u>字段</u>可以像父结构的字段一样被父访问（没有同名父结构字段）</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;  </span><br><span class="line">    city, state <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;  </span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age  <span class="keyword">int</span></span><br><span class="line">    Address  <span class="comment">//子结构匿名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">var</span> p Person</span><br><span class="line">    p.name = <span class="string">"Naveen"</span></span><br><span class="line">    p.age = <span class="number">50</span></span><br><span class="line">    p.Address = Address&#123;</span><br><span class="line">        city:  <span class="string">"Chicago"</span>,</span><br><span class="line">        state: <span class="string">"Illinois"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">"Name:"</span>, p.name)</span><br><span class="line">    fmt.Println(<span class="string">"Age:"</span>, p.age)</span><br><span class="line">    fmt.Println(<span class="string">"City:"</span>, p.city) <span class="comment">//city 提升, 可以直接以父.city的形式使用</span></span><br><span class="line">    fmt.Println(<span class="string">"State:"</span>, p.state) <span class="comment">//state 提升</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h1><blockquote><p>方法是对具体类型行为的封装，本质上是<a href="#%E5%87%BD%E6%95%B0"><strong>绑定到该类型的函数</strong></a></p></blockquote><ul><li><p><mark>非命名类型不能定义方法</mark></p></li><li><p>OO语言的方法通常有个<u>隐藏的this或self指针</u>来指向对象</p></li><li><p>GO 把这个隐藏指针暴露出来，称为<strong>接收者（receiver）</strong></p></li><li><p>接收者可自定义名称，类型有值类型和指针类型两种，语法格式：</p><ul><li>值类型：<code>func (t Type) funcName(paramList)(resultList)</code></li><li>指针类型 ：<code>func (t *Type) funcName(paramList)(resultList)</code></li></ul><p>方法接收者</p><ul><li><p>方法接收者的本质是形参</p><ul><li>方法接收者为值时，方法修改对象属性将不能成功</li><li>方法接收者为值时，需要在内存复制一份对象，效率低</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//方法接收者是值</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(e Employee)</span> <span class="title">changeName</span><span class="params">(newName <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    e.name = newName</span><br><span class="line">    fmt.Printf(<span class="string">"\nEmployee name in func is: %s"</span>, e.name)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法接收者是指针</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(e *Employee)</span> <span class="title">changeAge</span><span class="params">(newAge <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    e.age = newAge</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实际上是拷贝了一个e对象，然后吧这个对象的name改掉了</span></span><br><span class="line">    <span class="comment">// Print(e.Name)实际上还是没有修改</span></span><br><span class="line">    e.changeName(<span class="string">"Michael"</span>)</span><br><span class="line">    <span class="comment">// 而接收者为指针的函数就能修改</span></span><br><span class="line">    e.changeAge(<span class="number">18</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了上述调用以外，还可以通过类型调用的方式</span></span><br><span class="line">    Employee.changeName(e, <span class="number">52</span>) <span class="comment">//类型调用</span></span><br><span class="line">    (*Employee).changeAge(&amp;e, <span class="number">52</span>) <span class="comment">//类型调用</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>总结：Go中的方法实现跟C<ins>比较类似，都是在体外完成对方法的具体实现。C</ins>是在类中声明函数原型，在类外以<code>Class::FuncMethod(){ xxx }</code>中具体实现函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">    name     <span class="keyword">string</span></span><br><span class="line">    salary   <span class="keyword">int</span></span><br><span class="line">    currency <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e Employee)</span> <span class="title">displaySalary</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"Salary of %s is %s%d"</span>, e.name, e.currency, e.salary)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    emp1 := Employee&#123;</span><br><span class="line">        name:     <span class="string">"Sam Adolf"</span>,</span><br><span class="line">        salary:   <span class="number">5000</span>,</span><br><span class="line">        currency: <span class="string">"$"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    emp1.displaySalary() </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Target：实际等价</span></span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;  </span><br><span class="line">    name     <span class="keyword">string</span></span><br><span class="line">    salary   <span class="keyword">int</span></span><br><span class="line">    currency <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">displaySalary</span><span class="params">(e Employee)</span></span> &#123;  </span><br><span class="line">    fmt.Printf(<span class="string">"Salary of %s is %s%d"</span>, e.name, e.currency, e.salary)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    emp1 := Employee&#123;</span><br><span class="line">        name:     <span class="string">"Sam Adolf"</span>,</span><br><span class="line">        salary:   <span class="number">5000</span>,</span><br><span class="line">        currency: <span class="string">"$"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    displaySalary(emp1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Q：方法可用等价函数实现，为什么还要方法？</p><ul><li><strong>GO 的函数不能重载</strong>(即不准存在只是参数不同的同名函数)，导致不同类型不能用同名函数，而不同类型的方法可以同名</li><li>GO 不支持class ,使用结构代替类，<strong><u>结构字段用来封装对象属性，方法用来封装对象的行为</u></strong></li></ul><h2 id="方法提升"><a class="markdownIt-Anchor" href="#方法提升"></a> 方法提升</h2><blockquote><p>匿名子结构的方法可以像父结构的方法一样被父使用（没有同名父结构方法）</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">city  <span class="keyword">string</span></span><br><span class="line">state <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">firstName ptring</span><br><span class="line">lastName  <span class="keyword">string</span></span><br><span class="line">Address</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Address)</span> <span class="title">fullAddress</span><span class="params">()</span></span> &#123; <span class="comment">//接收者是子结构指针</span></span><br><span class="line">fmt.Printf(<span class="string">"Full Address: %s, %s\n"</span>, a.city, a.state)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := Person&#123;</span><br><span class="line">firstName: <span class="string">"Elon"</span>,</span><br><span class="line">lastName:  <span class="string">"Musk"</span>,</span><br><span class="line">Address: Address&#123;</span><br><span class="line">city:  <span class="string">"Los Angeles"</span>,</span><br><span class="line">state: <span class="string">"California"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">p.Address.fullAddress() <span class="comment">//完整调用方法</span></span><br><span class="line">p.fullAddress()         <span class="comment">//父结构对象直接调用子结构方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 修改匿名字段Address变成指针，则2</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">firstName <span class="keyword">string</span></span><br><span class="line">lastName  <span class="keyword">string</span></span><br><span class="line">*Address</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := &amp;Person&#123;</span><br><span class="line">firstName: <span class="string">"Elon"</span>,</span><br><span class="line">lastName:  <span class="string">"Musk"</span>,</span><br><span class="line">Address: &amp;Address&#123;<span class="comment">// 2. 则这边传的时候应该是传地址</span></span><br><span class="line">city:  <span class="string">"Los Angeles"</span>,</span><br><span class="line">state: <span class="string">"California"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义类型扩展方法</strong></p><blockquote><p>方法并非结构体专有，所有自定义类型都可以定义方法</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myInt <span class="keyword">int</span> <span class="comment">// 命名类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *myInt)</span> <span class="title">add</span><span class="params">(b myInt)</span> <span class="title">myInt</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">num1 := myInt(<span class="number">5</span>)</span><br><span class="line">num2 := myInt(<span class="number">10</span>)</span><br><span class="line">sum := num1.add(num2)</span><br></pre></td></tr></table></figure><h2 id="方法值"><a class="markdownIt-Anchor" href="#方法值"></a> 方法值</h2><ul><li>方法本质上还是函数，所以方法可以赋值给函数变量</li><li>方法值是对象变量初始化后的方法</li><li>方法值其实是带有闭包的函数变量，<strong>接收者被隐式地保存在闭包里</strong></li><li>方法值赋给函数变量后，函数变量可直接调用</li><li><u>方法也可以直接通过<strong>类型</strong>来调用，把接收者作为第一个参数</u>：<code>e.play() &lt;==&gt;Employee.play(e)</code>, <code>(*Employee).changeAge(&amp;e, 52) //类型调用</code></li></ul><h1 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h1><ul><li>接口是编程规约，一组<strong>方法签名</strong>的<em>集合</em><ul><li>方法声明的两个组件构成了方法签名 - <strong>方法的名称</strong>和<strong>参数类型</strong>。</li></ul></li><li>传统OO里，接口通常用来抽象定义对象的行为，具体过程在类里实现 ，类在定义时要声明实现了哪些接口</li><li>GO 接口采用非侵入式，即具体类型实现接口不用显式声明，只要其方法集是接口的超集，<strong>编译时</strong>会进行对应校验</li><li>GO 接口只有方法签名，没有数据字段，没有函数体代码</li><li><strong>类型的方法集</strong>是多个接口的超集，则<strong>实现多个接口</strong></li></ul><p>类型定义：</p><ul><li><p>命名接口类型</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> interfaceName <span class="keyword">interface</span>&#123;<span class="comment">//接口类型命名通常以er为后缀</span></span><br><span class="line">    methodName(paramList)(resultList)</span><br><span class="line">    otherInterfaceName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>匿名接口类型</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span>&#123;</span><br><span class="line">    methodName(paramList)(resultList)</span><br><span class="line">    interfaceName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="空接口"><a class="markdownIt-Anchor" href="#空接口"></a> 空接口</h2><ul><li>空接口 interface{} 是一种<strong>匿名接口类型</strong></li><li>空接口的方法集为空，<strong>所有类型都实现了空接口，都可以赋值或传递给空接口</strong></li><li>非命名类型不能定义自己的方法，其方法集为空，只能传递给空接口==&gt;map，slice<ul><li>方法需要接收类型参数，所以非命名类型不能定义自己的方法</li></ul></li></ul><h2 id="接口初始化"><a class="markdownIt-Anchor" href="#接口初始化"></a> 接口初始化</h2><ul><li>只声明未赋值的接口变量为nil</li><li>接口变量初始化需要把接口<strong>绑定到具体类型实例</strong></li><li>未初始化的接口变量不能调用其方法</li><li>方法的接收者才能给接口变量赋值</li><li>接口变量的值包括底层类型的值和具体类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Printer <span class="keyword">interface</span> &#123; </span><br><span class="line">    Print()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> S <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s S)</span> <span class="title">Print</span><span class="params">()</span></span> &#123; </span><br><span class="line">    fmt.Println(<span class="string">"print"</span>)</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = S&#123;&#125;</span><br><span class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123; <span class="comment">//通过v才能调用接口函数</span></span><br><span class="line">    <span class="keyword">case</span> Printer:</span><br><span class="line">    v.Print()</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    fmt.Printf(<span class="string">"unknown type\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在内部，接口值可以看做包含值和具体类型的元组：<code>(value, type)</code></p><p>接口值保存了一个具体底层类型的具体值。接口值调用方法时会执行其底层类型的同名方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">S <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">M</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(t.S)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> F <span class="keyword">float64</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f F)</span> <span class="title">M</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i I</span><br><span class="line"></span><br><span class="line">i = &amp;T&#123;<span class="string">"Hello"</span>&#125;</span><br><span class="line">describe(i)</span><br><span class="line">i.M()</span><br><span class="line"></span><br><span class="line">i = F(math.Pi)</span><br><span class="line">describe(i)</span><br><span class="line">i.M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">describe</span><span class="params">(i I)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"(%v, %T)\n"</span>, i, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">(&amp;&#123;Hello&#125;, *main.T)</span></span><br><span class="line"><span class="comment">Hello</span></span><br><span class="line"><span class="comment">(3.141592653589793, main.F)</span></span><br><span class="line"><span class="comment">3.141592653589793</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="go-的面向对象"><a class="markdownIt-Anchor" href="#go-的面向对象"></a> GO 的面向对象</h2><blockquote><p>Go 没有类，而是松耦合的类型、方法对接口的实现</p></blockquote><p>封装</p><ul><li>用结构代替类</li><li>用New函数代替构造函数</li></ul><p>继承</p><ul><li>用类型组合来实现继承</li><li>多重继承通过内嵌多个类型实现</li></ul><p>多态</p><h1 id="类型断言"><a class="markdownIt-Anchor" href="#类型断言"></a> 类型断言</h1><p>Go语言里面有一个语法，可以直接判断是否是该类型的变量：<code>value, ok = element.(T)</code>，这里value就是变量的值，ok是一个bool类型，element是interface变量，T是断言的类型。</p><p>下面有个例子。只有当某个interface{}的类型 存储的是int时才打印出来。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"math/rand"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> v <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    r := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++&#123;</span><br><span class="line">        v = i </span><br><span class="line">        <span class="keyword">if</span> (r.Intn(<span class="number">100</span>) % <span class="number">2</span>) == <span class="number">0</span> &#123; </span><br><span class="line">            v = <span class="string">"hello"</span></span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">if</span> _, ok := v.(<span class="keyword">int</span>); ok &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"%d\n"</span>, v)</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个比较典型的应用场景就是：<code>errors.(*MyError)</code></p><h1 id="反射"><a class="markdownIt-Anchor" href="#反射"></a> 反射</h1><ul><li>反射可以在运行时检查变量的类型和值，是元编程的一种形式，在没有源代码时帮助调试程序</li><li>反射包  ” reflect” 通过空接口获取变量的类型和值</li><li>用接口实现多态</li><li>实例可以赋给它所实现的任意接口类型的变量</li><li>反射包 ” reflect” 通过空接口获取变量的类型和值<ul><li>func TypeOf(i interface{}) Type</li><li>func ValueOf(i interface{}) Value</li></ul></li><li>reflect.Type 和 reflect.Value 各有许多方法，比如kind方法用于返回底层类型名称的常量</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将函数包装为反射值对象</span></span><br><span class="line">funcValue := reflect.ValueOf(add)</span><br><span class="line"><span class="comment">// 生成函数参数, 传入两个整型值</span></span><br><span class="line">paramList := []reflect.Value&#123;reflect.ValueOf(<span class="number">10</span>), reflect.ValueOf(<span class="number">20</span>)&#125;</span><br><span class="line"><span class="comment">// 反射调用函数</span></span><br><span class="line">retList := funcValue.Call(paramList)</span><br><span class="line"><span class="comment">// 获取第一个返回值, 取整数值</span></span><br><span class="line">fmt.Println(retList[<span class="number">0</span>].Int())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Money <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x Money = <span class="number">58.9</span></span><br><span class="line">fmt.Println(<span class="string">"type:"</span>, reflect.TypeOf(x))</span><br><span class="line">v := reflect.ValueOf(x)</span><br><span class="line">fmt.Println(<span class="string">"value:"</span>, v)</span><br><span class="line">fmt.Println(<span class="string">"type:"</span>, v.Type())</span><br><span class="line">fmt.Println(<span class="string">"kind:"</span>, v.Kind())               <span class="comment">//查看底层类型</span></span><br><span class="line">fmt.Println(<span class="string">"settability of v:"</span>, v.CanSet()) <span class="comment">//能否被修改 x的地址不能修改</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    type: main.Money</span></span><br><span class="line"><span class="comment">    value: 58.9</span></span><br><span class="line"><span class="comment">    type: main.Money</span></span><br><span class="line"><span class="comment">    kind: float64</span></span><br><span class="line"><span class="comment">    settability of v: false</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="错误处理"><a class="markdownIt-Anchor" href="#错误处理"></a> 错误处理</h1><ul><li>传统OO里，异常是一种程序控制机制，依附于栈结构,却可以同时设置多个异常类型作为网捕条件,从而以类型匹配在栈机制中跳跃回馈</li><li>GO 语言里没有异常机制，只有<strong>错误处理</strong>，错误通过函数的多返回值来处理</li><li>GO 语言的错误主要有：<ul><li>编译错误</li><li>运行时错误</li><li>逻辑错误</li></ul></li><li>GO错误处理方式<ul><li>错误可处理，通过函数返回错误进行处理</li><li>错误不可处理，通过panic抛出错误，退出程序</li></ul></li></ul><h2 id="错误实现"><a class="markdownIt-Anchor" href="#错误实现"></a> 错误实现</h2><blockquote><p>通过error 接口 实现错误处理的标准模式，打印错误时自动调用Error()函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">type</span> error <span class="keyword">interface</span>&#123;</span><br><span class="line">&gt;     Error() <span class="keyword">string</span></span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>实际使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PathError <span class="keyword">struct</span> &#123;  </span><br><span class="line">    Op   <span class="keyword">string</span></span><br><span class="line">    Path <span class="keyword">string</span></span><br><span class="line">    Err  error</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *PathError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> e.Op + <span class="string">" "</span> + e.Path + <span class="string">": "</span> + e.Err.Error() &#125;</span><br><span class="line"></span><br><span class="line">f, err := os.Open(<span class="string">"/test.txt"</span>)</span><br><span class="line"><span class="comment">// 类型断言</span></span><br><span class="line"><span class="keyword">if</span> perr, ok := err.(*os.PathError); ok &#123;</span><br><span class="line">    fmt.Println(<span class="string">"File at path"</span>, perr.Path, <span class="string">"failed to open"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(f.Name(), <span class="string">"opened successfully"</span>)</span><br></pre></td></tr></table></figure><h3 id="创建错误"><a class="markdownIt-Anchor" href="#创建错误"></a> 创建错误</h3><ul><li><p>根据errors 包对错误的基本定义</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> errors</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(text <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;errorString&#123;text&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> errorString <span class="keyword">struct</span> &#123;</span><br><span class="line">    s <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *errorString)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e.s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>fmt包的Errorf 函数</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">circleArea1</span><span class="params">(radius <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">float64</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> radius &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">"Area calculation failed, radius is less than zero"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> math.Pi * radius * radius, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">circleArea2</span><span class="params">(radius <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">float64</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> radius &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">"Area calculation failed, radius %0.2f is less than zero"</span>, radius)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> math.Pi * radius * radius, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建自定义错误"><a class="markdownIt-Anchor" href="#创建自定义错误"></a> 创建自定义错误</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> areaError <span class="keyword">struct</span> &#123;</span><br><span class="line">err    <span class="keyword">string</span>  <span class="comment">//error description</span></span><br><span class="line">length <span class="keyword">float64</span> <span class="comment">//length which caused the error</span></span><br><span class="line">width  <span class="keyword">float64</span> <span class="comment">//width which caused the error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *areaError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> e.err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//error的方法用来明确错误原因</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *areaError)</span> <span class="title">lengthNegative</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> e.length &lt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *areaError)</span> <span class="title">widthNegative</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> e.width &lt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rectArea</span><span class="params">(length, width <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">float64</span>, error)</span></span> &#123;</span><br><span class="line">err := <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> length &lt; <span class="number">0</span> &#123;</span><br><span class="line">err += <span class="string">"length is less than zero"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> width &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == <span class="string">""</span> &#123;</span><br><span class="line">err = <span class="string">"width is less than zero"</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">err += <span class="string">", width is less than zero"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="string">""</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 返回的是对象的地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, &amp;areaError&#123;err, length, width&#125;</span><br><span class="line">&#125; <span class="comment">//err 文本用来给错误提示信息</span></span><br><span class="line"><span class="keyword">return</span> length * width, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">length, width := <span class="number">-5.0</span>, <span class="number">-9.0</span></span><br><span class="line">    <span class="comment">// 2. 所以这边err是指针</span></span><br><span class="line">area, err := rectArea(length, width)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(err)</span><br><span class="line">        <span class="comment">// 3. 所以这边类型断言得判断是不是areaError的指针</span></span><br><span class="line"><span class="keyword">if</span> err, ok := err.(*areaError); ok &#123;</span><br><span class="line"><span class="keyword">if</span> err.lengthNegative() &#123;</span><br><span class="line">fmt.Printf(<span class="string">"error: length %0.2f is less than zero\n"</span>, err.length)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err.widthNegative() &#123;</span><br><span class="line">fmt.Printf(<span class="string">"error: width %0.2f is less than zero\n"</span>, err.width)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"area of rect"</span>, area)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义错误的实现逻辑：</p><ol><li>自定义的错误都会重写Error() string的方法，即实现了error 接口。</li><li>在抛出自定义错误的函数中错误的返回值类型都是error接口</li><li>因此，在外部使用的时候<code>data, err = Myfunc()</code>，这边得到的err是error接口，至于捕捉自定义的错误就是通过对接口的类型断言来判断的了，即自定义的错误都能看到下面有<code>if errObj, ok := err.(*MyError); ok</code>的代码</li></ol><p><strong>使用 goto 集中处理错误</strong>——Go特性</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规的写法</span></span><br><span class="line">err := firstCheckError()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    exitProcess()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = secondCheckError()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    exitProcess()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Go借助标签特殊的写法</span></span><br><span class="line">err := firstCheckError()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">goto</span> onExit</span><br><span class="line">&#125;</span><br><span class="line">err = secondCheckError()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">goto</span> onExit</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正常处理代码</span></span><br><span class="line">onExit:</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    exitProcess()</span><br></pre></td></tr></table></figure><h2 id="panic恐慌"><a class="markdownIt-Anchor" href="#panic恐慌"></a> panic（恐慌）</h2><ul><li>通常情况下，向报告错误状态的方式是返回一个额外的error类型值。但是，当遇到<strong>不可恢复的错误状态</strong>，导致程序不能简单继续执行时引发panic</li><li>引发panic的两种情况<ul><li><strong>主动调用panic 函数</strong>，会产生一个运行时错误，该错误提供RuntimeError() 方法用于区别普通错误</li><li><u>程序运行时</u><strong>出现未处理错误</strong>自动触发，比如当发生像数组下标越界或类型断言失败等运行时错误时，Go 运行时会自动触发panic</li></ul></li><li>不应通过调用panic()函数来报告普通的错误，而应该只把它作为报告致命错误的一种方式</li></ul><h3 id="panicking终止过程"><a class="markdownIt-Anchor" href="#panicking终止过程"></a> panicking终止过程</h3><ul><li>panic 类似异常会<strong>逐级上传</strong></li><li>在多层嵌套的函数调用中触发或调用panic，会马上中止当前函数的执行，逐级冒泡上传到最顶层，并<u>执行（每层的） defer</u>，在栈顶处程序崩溃，并在命令行中用传给 panic 的值报告错误情况</li></ul><h2 id="recover"><a class="markdownIt-Anchor" href="#recover"></a> recover</h2><ul><li>panic一旦被引发就会导致程序崩溃，但无法保证程序不会发生任何运行时错误。</li><li>recover<strong>专用于“拦截”运行时panic</strong>，让进入恐慌的程序恢复过来并重新获得流程控制权。</li><li>recover 可以<u>阻止panic继续向上传递</u></li><li>▲.为确保捕获panic， <strong>recover 必须在延迟函数（defer）中执行</strong></li></ul><p>总结：</p><ul><li>程序发生的错误导致程序不能容错继续执行，应主动调用panic或由运行时抛出panic</li><li>程序发生错误，但能容错继续执行的，正常情况用错误返回值，运行时错误非关键分支用recover 捕获panic</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recoverName</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"recovered from fullName"</span>, r)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recoverMain</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"recovered from main"</span>, r)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fullName</span><span class="params">(firstName *<span class="keyword">string</span>, lastName *<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> recoverName()</span><br><span class="line"><span class="keyword">if</span> firstName == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"runtime error: first name cannot be nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> lastName == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"runtime error: last name cannot be nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s %s\n"</span>, *firstName, *lastName)</span><br><span class="line">fmt.Println(<span class="string">"returned normally from fullName"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> recoverMain()</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"deferred call in main"</span>)</span><br><span class="line"><span class="comment">//firstName := "Elon"</span></span><br><span class="line">lastName := <span class="string">"Potter"</span></span><br><span class="line"><span class="comment">//fullName(&amp;firstName, &amp;lastName)</span></span><br><span class="line">fullName(<span class="literal">nil</span>, &amp;lastName)</span><br><span class="line">fmt.Println(<span class="string">"returned normally from main"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="包"><a class="markdownIt-Anchor" href="#包"></a> 包</h1><ul><li>GO使用包来<strong>组织</strong>源代码和代码编译，实现代码复用</li><li>任何源代码<strong>必须属于某个包</strong>，同时源码文件的<strong>第一行有效代码必须是package</strong> pacakge packageName 语句，声明自己所在的包。</li><li>▲.包名为 main 为应用程序的<strong>入口包</strong>，编译不包含 main 包的源码文件时不会得到可执行文件</li><li>一个文件夹下的所有源码文件只能属于同一个包，同样<u>属于同一个包的源码文件不能放在多个文件夹下</u></li></ul><h2 id="包的引用格式"><a class="markdownIt-Anchor" href="#包的引用格式"></a> 包的引用格式</h2><ul><li><p>标准引用格式</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line">fmt.Printf(<span class="string">"Hello world！"</span>)</span><br></pre></td></tr></table></figure><p>通过：<code>库/包.func</code>的方式调用</p></li></ul></li><li><p>自定义别名引用格式</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> F <span class="string">"fmt"</span></span><br><span class="line">F.Printf(<span class="string">"Hello world！"</span>)</span><br></pre></td></tr></table></figure><p>通过：<code>定义的名称，如F.func</code>的方式调用</p></li></ul></li><li><p>省略引用格式</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> . <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//不需要加前缀 fmt.</span></span><br><span class="line">Printf(<span class="string">"Hello world！"</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>匿名引用格式</p><blockquote><ul><li>引用包，但是代码中却没有使用包，编译器会报错</li><li>在引用某个包时，如果只是希望执行包初始化的 init 函数，而不使用包内部的数据时，可以使用匿名引用格式(<code>_</code>)</li></ul></blockquote><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">"fmt"</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="init"><a class="markdownIt-Anchor" href="#init"></a> init( )</h2><ul><li>init( )是特殊的函数，<strong>不能够被人为调用</strong>，而是在<strong>每个包完成初始化后自动执行</strong>，并且<u>执行优先级比 main 函数高</u></li><li>init( )常用于在开始执行程序之前<strong>对数据进行检验或修复</strong>，或者在程序开始之前调用后台执行的 goroutine</li><li>每个源码可以使用 1 个 init() 函数，<u>一个包可以有多个 init 函数，包加载时会执行全部的 init 函数，但并不能保证执行顺序</u></li></ul><h2 id="包加载顺序"><a class="markdownIt-Anchor" href="#包加载顺序"></a> 包加载顺序</h2><ul><li>程序从 main 函数引用的包开始，<strong>逐级查找包的引用</strong>，直到找到没有引用其他包的包，最终生成一个<strong>包引用的有向无环图</strong></li><li>每个包会先①初始化常量，然后②是全局变量，③最后执行包的 init 函数</li></ul><p><img src="/2021/11/02/浙江大学期末考试——Go语言/E:%5Chexo%5Csource_posts%5C%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%AD%A6%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E2%80%94%E2%80%94Go%E8%AF%AD%E8%A8%80%5C%E5%8C%85%E5%BC%95%E7%94%A8%E9%A1%BA%E5%BA%8F.png" alt="包引用顺序"></p><h2 id="包内标识符导出向外暴露"><a class="markdownIt-Anchor" href="#包内标识符导出向外暴露"></a> 包内标识符导出——向外暴露</h2><ul><li><p>一个包里的标识符（如类型、变量、常量等）要被<strong>外部访问</strong>，需将要导出的标识符的<strong>首字母大写</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myVar = <span class="number">100</span> <span class="comment">//内部引用</span></span><br><span class="line"><span class="keyword">const</span> MyConst = <span class="string">"hello"</span> <span class="comment">//导出</span></span><br><span class="line"><span class="keyword">type</span> MyStruct <span class="keyword">struct</span> &#123;  <span class="comment">//导出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在被导出的<em>结构体</em>或接口中，如果它们的<strong>字段</strong>或<strong>方法</strong>首字母是大写，外部可以访问这些字段和方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyStruct <span class="keyword">struct</span> &#123;<span class="comment">//结构体要被导出    </span></span><br><span class="line">    ExportedField <span class="keyword">int</span><span class="comment">// 包外可以访问的字段    </span></span><br><span class="line">    privateField <span class="keyword">int</span> <span class="comment">// 仅限包内访问的字段</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> MyInterface <span class="keyword">interface</span> &#123;<span class="comment">//接口要被导出   </span></span><br><span class="line">    ExportedMethod() <span class="comment">// 包外可以访问的方法    </span></span><br><span class="line">    privateMethod()<span class="comment">// 仅限包内访问的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：Go没有提供权限控制符，而是通过了<strong>首字母是否大小写的统一规定</strong>来加上权限控制，这个跟Python中私有权限加<code>__</code>，保护权限加<code>_</code>颇为类似</p></li></ul><h2 id="gomod"><a class="markdownIt-Anchor" href="#gomod"></a> go.mod</h2><ul><li><p>使用GOPATH 不太方便</p></li><li><p>go.mod是Go1.11版本新引入的官方包管理工具</p></li><li><p>在项目目录下用go.mod 文件来记录依赖包具体版本，方便依赖包、源代码和版本控制的管理、</p></li><li><p><a href="https://github.com/golang/go/wiki/Modules" target="_blank" rel="noopener">https://github.com/golang/go/wiki/Modules</a></p></li><li><p>go.mod 文件内容</p><ul><li>module：指定包的名字</li><li>go：用于标识当前模块的 Go 语言版本，值为初始化模块时的版本</li><li>require：指定的依赖项模块</li><li>replace：可以替换依赖项模块</li><li>exclude：可以忽略依赖项模块</li></ul></li><li><p>go mod命令</p><p><img src="/2021/11/02/浙江大学期末考试——Go语言/E:%5Chexo%5Csource_posts%5C%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%AD%A6%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E2%80%94%E2%80%94Go%E8%AF%AD%E8%A8%80%5Cgomod.png" alt="gomod"></p></li></ul><h3 id="gosum-文件"><a class="markdownIt-Anchor" href="#gosum-文件"></a> go.sum 文件</h3><ul><li>go.sum 文件 在执行 go get xxxx之后或直接编译使用第三方包的源代码时自动生成</li><li>详细罗列了当前项目<u>直接或间接</u>依赖的<strong>所有模块版本</strong>，并写明了那些模块版本的 <strong>SHA-256 哈希值</strong>以备 Go 在今后的操作中保证项目所依赖的那些模块版本不会被篡改</li></ul><p><strong>go.mod 使用基本过程</strong></p><ul><li>创建项目目录Dir</li><li>在项目目录运行 <code>go mod init projectName</code>,生成go.mod 文件</li><li>在项目目录执行 go get xxxx 下载第三方包， 会生成go.sum文件 （可选）</li><li>在项目目录下新建子目录，创建项目子包（可选，无需再生成go.mod)</li></ul><h1 id="并发"><a class="markdownIt-Anchor" href="#并发"></a> 并发</h1><ul><li>并行是在<strong>任一粒度的时间瞬间</strong>都同时执行，比如多机并行</li><li>并发是在<strong>规定的时间期限内</strong>多个任务都在执行，实际底层是分时操作</li><li>并行强调<strong>瞬时性</strong>、并发强调<strong>过程性</strong></li><li>并行关键在于<strong>执行</strong>、并发关键在于<strong>结构</strong></li><li>单机运行时，并行通过使用多处理器以提高速度，并发程序可以是并行的，也可以不是</li><li>应用程序具备好的并发结构，操作系统才能更好地利用硬件并行执行</li></ul><h2 id="进程-process-线程-thread-和协程-coroutine"><a class="markdownIt-Anchor" href="#进程-process-线程-thread-和协程-coroutine"></a> 进程( process )、线程( thread )和协程( coroutine )</h2><ul><li>进程是程序在内存中<strong>运行时</strong>，<strong>操作系统</strong>对其进行资源分配和调度的独立单位</li><li>线程是进程的一个执行实体，是 <strong>CPU 调度和</strong>分派的基本单位，它是比进程更小的能独立运行的基本单位</li><li>每个进程至少包括一个线程</li><li>每个进程的初始线程被称为主线程，主线程终止，进程终止</li><li>协程是轻量级的线程，一个线程可以拥有多个协程</li><li>进程和线程是<strong>操作系统级</strong>的，协程<strong>是编译器级</strong>的。协程不被操作系统内核管理，而完全由程序控制，因此没有线程切换的开销。</li><li>和多线程比，数量越多，协程的性能优势就越明显。协程的最大优势在于其轻量级，可以轻松创建上万个而不会导致系统资源衰竭</li></ul><h2 id="go-routine-特性"><a class="markdownIt-Anchor" href="#go-routine-特性"></a> go routine 特性</h2><blockquote><ul><li>多数语言在语法层不支持协程，而是通过库方式，效率不高，容易阻塞</li><li>Go 在语言级别支持协程<ul><li>命名为goroutine，关键字go</li><li>由Go语言运行时统一调度，合理分配给各个CPU</li></ul></li></ul></blockquote><ul><li>各goroutine<strong>非阻塞</strong>，不会等待</li><li>goroutine <strong>可以并行执行</strong></li><li>goroutine执行的<strong>函数返回值被忽略</strong>===&gt;因此需要得到返回结果的话需要通过chan</li><li><u>运行时不保证各goroutine的执行顺序</u></li><li>goroutine之间被<u>平等</u>地调度和执行</li><li>main函数会单独创建和分配一个go routine</li></ul><h2 id="协程间的通信通道"><a class="markdownIt-Anchor" href="#协程间的通信通道"></a> 协程间的通信——通道</h2><ul><li>通道是一种特殊的类型，同时只能有一个 goroutine 访问通道进行发送和获取数据。</li><li>通道是一个队列，遵循<strong>先入先出</strong>（FIFO）的规则</li><li>通道默认是<strong>阻塞</strong>的，使goroutine有效通信，不需要使用其他语言的<u>显式锁</u>或<u>条件变量</u></li><li>通道是<strong>引用类型</strong>，需要使用chan关键字和内置函数make 进行创建</li><li>通道写入和读取使用  <code>&lt;-</code>  运算符<ul><li>写入 ：通道&lt;-变量</li><li>读取： 变量&lt;-通道</li></ul></li><li>通道包括无缓冲通道和有缓冲通道<ul><li>无缓冲通道   make(chan  datatype)</li><li>有缓冲通道   make(chan  datatype，capacity)</li></ul></li><li>无缓冲通道只能存储一条消息，有缓冲通道可以根据make函数的capacity参数存储n条消息，按FIFO读出</li><li>缓冲与阻塞<ul><li>无缓冲通道，写入等待读取，读取等待写入，在双方准备好之前是阻塞的</li><li>有缓冲通道，通道已满时的写入会等待，通道已空的读取会等待</li></ul></li></ul><p><strong>单向通道</strong></p><ul><li>通道默认为双向的，单向通道只能用于发送或接收数据</li><li>所谓单向通道只是对通道作为函数参数的一种使用限制，跟C语言使用const修饰函数参数为只读类似</li><li>通常先创建双向通道，在函数形参中利用&lt;-运算符修饰通道，使之变为只读或只写通道<ul><li><code>func pull(ch &lt;-chan int) //只读 func pump(ch chan&lt;- int) //只写</code></li></ul></li><li>关闭通道:<ul><li>关闭通道使用内置函数close(),实际上是关闭写入，即发送者告诉接收者不会再有数据发往通道</li><li>接收者能够在通道接收数据的同时，获取通道是否已关闭的参数  v, ok := &lt;-ch</li><li><code>for range</code>语句能自动判断通道是否已关闭</li></ul></li></ul><h3 id="channel底层实现"><a class="markdownIt-Anchor" href="#channel底层实现"></a> channel底层实现</h3><blockquote><p>src/runtime/chan.go:hchan定义了channel的数据结构</p><p>缓冲区是一个<strong>环形队列</strong></p><p>一个channel只能传递一种类型的值，类型信息存储在hchan数据结构</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> hchan <span class="keyword">struct</span> &#123;</span><br><span class="line">      qcount   <span class="keyword">uint</span>           <span class="comment">// 当前队列中剩余元素个数</span></span><br><span class="line">      dataqsiz <span class="keyword">uint</span>           <span class="comment">// 环形队列长度，即可以存放的元素个数</span></span><br><span class="line">  buf      unsafe.Pointer <span class="comment">// 环形队列指针</span></span><br><span class="line">      elemsize <span class="keyword">uint16</span>         <span class="comment">// 每个元素的大小</span></span><br><span class="line">      closed   <span class="keyword">uint32</span>        <span class="comment">// 标识关闭状态</span></span><br><span class="line">      elemtype *_type          <span class="comment">// 元素类型</span></span><br><span class="line">      sendx   <span class="keyword">uint</span>           <span class="comment">// 队列下标，指示元素写入时存放到队列中的位置</span></span><br><span class="line">      recvx    <span class="keyword">uint</span>           <span class="comment">// 队列下标，指示元素从队列的该位置读出</span></span><br><span class="line">       recvq    waitq          <span class="comment">// 等待读消息的goroutine队列，读阻塞的goroutine会被向channel写入数据的goroutine唤醒</span></span><br><span class="line">      sendq    waitq          <span class="comment">// 等待写消息的goroutine队列，写阻塞的goroutine会被从channel读数据的goroutine唤醒</span></span><br><span class="line">      lock mutex         <span class="comment">// 互斥锁，一个channel同时仅允许被一个goroutine读写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通道底层实现 <strong>向channel写数据</strong></p><ul><li>如果等待接收队列recvq不为空，说明缓冲区中没有数据或者没有缓冲区，此时直接从recvq取出G,并把数据写入，最后把该G唤醒，结束发送过程；</li><li>如果缓冲区中有空余位置，将数据写入缓冲区，结束发送过程；</li><li>如果缓冲区中没有空余位置，将待发送数据写入G，将当前G加入sendq，进入睡眠，等待被读goroutine唤醒</li></ul><p><img src="/2021/11/02/浙江大学期末考试——Go语言/E:%5Chexo%5Csource_posts%5C%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%AD%A6%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E2%80%94%E2%80%94Go%E8%AF%AD%E8%A8%80%5Cchan_send.png" alt="chan_send"></p><p>通道底层实现 <strong>从channel读数据</strong></p><ul><li>如果等待发送队列sendq不为空，且没有缓冲区，直接从sendq中取出G，把G中数据读出，最后把G唤醒，结束读取过程；</li><li>如果等待发送队列sendq不为空，此时说明缓冲区已满，从缓冲区中首部读出数据，把G中数据写入缓冲区尾部，把G唤醒，结束读取过程；</li><li>如果缓冲区中有数据，则从缓冲区取出数据，结束读取过程；</li><li>将当前goroutine加入recvq，进入睡眠，等待被写goroutine唤醒；</li></ul><p><img src="/2021/11/02/浙江大学期末考试——Go语言/E:%5Chexo%5Csource_posts%5C%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%AD%A6%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E2%80%94%E2%80%94Go%E8%AF%AD%E8%A8%80%5Cchan_recv.png" alt="chan_recv"></p><h2 id="定时器"><a class="markdownIt-Anchor" href="#定时器"></a> 定时器</h2><h3 id="timer"><a class="markdownIt-Anchor" href="#timer"></a> Timer</h3><blockquote><p>协程间的通信需设置超时等辅助机制</p></blockquote><ul><li><p>一次性定时器：定时器只计时一次，结束便停止</p></li><li><p>主要方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTimer</span><span class="params">(d Duration)</span> *<span class="title">Timer</span> // 指定一个时间创建一个<span class="title">Timer</span>，<span class="title">Timer</span>一经创建便开始计时，不需要额外的启动命令</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(t *Timer)</span> <span class="title">Stop</span><span class="params">()</span> <span class="title">bool</span>  // 停止计时器，返回值<span class="title">true</span>：定时器超时前停止， <span class="title">false</span>: 定时器超时后停止</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(t *Timer)</span> <span class="title">Reset</span><span class="params">(d Duration)</span> <span class="title">bool</span>  // 停掉定时器，再启动，返回值同上</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">After</span><span class="params">(d Duration)</span> &lt;-<span class="title">chan</span> <span class="title">Time</span>  // 创建匿名不需控制的计时器</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">AfterFunc</span><span class="params">(d Duration, f <span class="keyword">func</span>()</span>) *<span class="title">Timer</span>  // 延迟方法调用</span></span><br></pre></td></tr></table></figure><p>注：Timer一经创建便开始计时，不需要额外的启动命令</p></li></ul><h3 id="ticker"><a class="markdownIt-Anchor" href="#ticker"></a> Ticker</h3><blockquote><p>周期性定时器：定时器周期性进行计时，除非主动停止，否则将永久运行</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTicker</span><span class="params">(d Duration)</span> *<span class="title">Ticker</span> // 指定一个时间创建一个<span class="title">Ticker</span> ， <span class="title">Ticker</span>一经创建便开始计时，不需要额外的启动命令</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(t *Ticker)</span> <span class="title">Stop</span><span class="params">()</span> // 停止计时，但管道不会被关闭</span></span><br></pre></td></tr></table></figure><h2 id="并发函数"><a class="markdownIt-Anchor" href="#并发函数"></a> 并发函数</h2><h3 id="waitgroup"><a class="markdownIt-Anchor" href="#waitgroup"></a> WaitGroup</h3><blockquote><p>WaitGroup提供<strong>多个协程同步</strong>（平级）的机制，用来等待多个协程完成</p><p>信号量， Unix中保护共享资源的机制，用于防止多个线程同时访问某个资源</p></blockquote><ul><li>信号量&gt;0，表示资源可用，获取信号量时系统自动将信号量减1</li><li>信号量==0时，表示资源暂不可用，获取信号量时，当前线程会进入睡眠，当信号量为正时被唤醒</li></ul><p>WaitGroup 的方法</p><ul><li>Add(delta int)  添加等待信号量</li><li>Done() 释放等待信号，每次减少1</li><li>Wait() 阻塞调用该方法的协程，直到等待信号量为0</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(i <span class="keyword">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"started Goroutine "</span>, i)</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">fmt.Printf(<span class="string">"Goroutine %d ended\n"</span>, i)</span><br><span class="line">wg.Done() <span class="comment">//goroutine执行结束后将信号量减1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>) <span class="comment">//增加信号量</span></span><br><span class="line"><span class="keyword">go</span> process(i, &amp;wg)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait() <span class="comment">//主goroutine阻塞调用该方法的协程，直到等待信号量为0</span></span><br><span class="line">fmt.Println(<span class="string">"All go routines finished executing"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="select"><a class="markdownIt-Anchor" href="#select"></a> select</h3><blockquote><p>多路复用是在一个信道上传输多路信号或数据流，比如网线</p></blockquote><ul><li>select 借用网络多路复用的概念，用于监听多个通道，同时响应多个通道</li><li>多个通道都没有可写或可读的状态，select 会阻塞</li><li>有一个通道是可写或可读的， select 会执行该通道语句</li><li>有多个通道是可写或可读的， select 会随机选择其中一个执行</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">server1</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second) <span class="comment">//可取消</span></span><br><span class="line">ch &lt;- <span class="string">"from server1"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">server2</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">3</span> * time.Second) <span class="comment">//可取消</span></span><br><span class="line">ch &lt;- <span class="string">"from server2"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">output1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">output2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">go</span> server1(output1)</span><br><span class="line"><span class="keyword">go</span> server2(output2)</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line"><span class="keyword">var</span> reply <span class="keyword">string</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> reply = &lt;-output1:</span><br><span class="line">fmt.Println(reply)</span><br><span class="line"><span class="keyword">case</span> reply = &lt;-output2:</span><br><span class="line">fmt.Println(reply)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="context"><a class="markdownIt-Anchor" href="#context"></a> context</h3><ul><li><p>WaitGroup用来控制多个<strong>平级goroutine同时完成</strong></p></li><li><p>goroutine本身是平等的，但逻辑上可能有父子关系，context 表示程序上下文，是程序的运行状态，用来<strong>控制具有逻辑父子关系</strong>的多个goroutine</p></li><li><p>Context接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Context <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">//返回超时时间和是否已设置超时时间</span></span><br><span class="line">    Deadline() (deadline time.Time, ok <span class="keyword">bool</span>)</span><br><span class="line">    <span class="comment">//返回信道，当Context被撤销或过期时，该信道是关闭的</span></span><br><span class="line">    Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//Done信道关闭后，Err方法表明Context被撤销的原因</span></span><br><span class="line">    Err() error</span><br><span class="line">    <span class="comment">//协程间的数据共享</span></span><br><span class="line">    Value(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="context-使用"><a class="markdownIt-Anchor" href="#context-使用"></a> <strong>context 使用</strong></h4><ul><li><p>用context的树结构来给平等的goroutine 设置父子逻辑</p></li><li><p>context树的<strong>根节点</strong>通常是一个<strong>空的context</strong> ,由<u>第一个goroutine用Background()</u> 函数创建，该context不能被取消、没有值、也没有过期时间</p></li><li><p>创建子节点：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将父节点复制到子节点，返回一个可以主动撤销Context的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithCancel</span><span class="params">(parent Context)</span> <span class="params">(ctx Context, cancel CancelFunc)</span></span></span><br><span class="line"><span class="function">//过期时间由<span class="title">deadline</span>和<span class="title">parent</span>的过期时间共同决定，<span class="title">parent</span>过期时间优先</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">WithDeadline</span><span class="params">(parent Context, deadline time.Time)</span> <span class="params">(Context, CancelFunc)</span></span></span><br><span class="line"><span class="function">//与<span class="title">WithDeadline</span>类似，只不过传入的是从现在开始<span class="title">Context</span>剩余的生命时长</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">WithTimeout</span><span class="params">(parent Context, timeout time.Duration)</span> <span class="params">(Context, CancelFunc)</span></span></span><br><span class="line"><span class="function">//将父节点复制到子节点，子节点可扩展新的<span class="title">key</span>存储的值</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">WithValue</span><span class="params">(parent Context, key <span class="keyword">interface</span>&#123;&#125;, val <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">Context</span></span></span><br></pre></td></tr></table></figure></li></ul><p>e.g.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandelRequest</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> WriteLog(ctx)</span><br><span class="line"><span class="keyword">go</span> WriteDB(ctx)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">fmt.Println(<span class="string">"请求处理完毕"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"请求处理中……"</span>)</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteLog</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">fmt.Println(<span class="string">"写日志完成"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"写日志中……"</span>)</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"日志ing"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteDB</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">fmt.Println(<span class="string">"写数据库完成"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"写数据库中……"</span>)</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//WithCancel一旦触发该子context的cancel, 那么该context绑定上的子协程都会被关闭</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">ctx, cancel := context.WithCancel(context.Background())</span></span><br><span class="line"><span class="comment">go HandelRequest(ctx)</span></span><br><span class="line"><span class="comment">time.Sleep(5 * time.Second)</span></span><br><span class="line"><span class="comment">fmt.Println("所有子协程都需要结束!")</span></span><br><span class="line"><span class="comment">cancel()</span></span><br><span class="line"><span class="comment">//Just for test whether sub goroutines exit or not</span></span><br><span class="line"><span class="comment">time.Sleep(5 * time.Second) */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//WithTimeout子context会在5s后过期, 所以其执行的协程最多只能运行5s，相当于绑定了一个定时器</span></span><br><span class="line">ctx, _ := context.WithTimeout(context.Background(), <span class="number">5</span>*time.Second)</span><br><span class="line"><span class="keyword">go</span> HandelRequest(ctx)</span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注： 关于context.WithValue和context.Value的使用方式见：<a href="https://blog.csdn.net/u012190809/article/details/107700495" target="_blank" rel="noopener">https://blog.csdn.net/u012190809/article/details/107700495</a></p><h3 id="mutex"><a class="markdownIt-Anchor" href="#mutex"></a> mutex</h3><ul><li>多个线程同时竞争使用某个变量可能会导致结果失控</li><li>mutex，互斥锁，用来保证<u>某个变量在任一时刻，只能有一个线程访问</u></li><li>mutex 用Lock()和Unlock()来创建资源的临界区，这一区间内的代码是线程安全的，任何一个时间点都只能有一个goroutine执行这段区间的代码</li><li>mutex 也可以用通道来代替，二者无优劣之分，通常不涉及<strong>线程交互数据</strong>的用<strong>mutex</strong>，其他用通道</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">increment</span><span class="params">(wg *sync.WaitGroup, m *sync.Mutex)</span></span> &#123;</span><br><span class="line">m.Lock()</span><br><span class="line">x = x + <span class="number">1</span> <span class="comment">//锁定后访问全局变量</span></span><br><span class="line">m.Unlock()</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用Mutex可以用Chan中自带的Mutex来实现互斥</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incrementByChan</span><span class="params">(wg *sync.WaitGroup, ch <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">ch &lt;- <span class="literal">true</span></span><br><span class="line">x = x + <span class="number">1</span> <span class="comment">//锁定后访问全局变量</span></span><br><span class="line">&lt;- ch</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> w sync.WaitGroup</span><br><span class="line"><span class="comment">// var m sync.Mutex</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>) </span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">w.Add(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// go increment(&amp;w, &amp;m)</span></span><br><span class="line"><span class="keyword">go</span> incrementByChan(&amp;w, ch)</span><br><span class="line">&#125;</span><br><span class="line">w.Wait()</span><br><span class="line">fmt.Println(<span class="string">"final value of x"</span>, x) <span class="comment">//结果确定</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rwmutex"><a class="markdownIt-Anchor" href="#rwmutex"></a> RWMutex</h3><ul><li><p>RWMutex在Mutex的基础之上增加了读、写的信号量，并使用了类似引用计数的读锁数量</p></li><li><p>可以同时申请多个读锁</p></li><li><p>有读锁时申请写锁将阻塞</p></li><li><p>只要有写锁，后续申请读锁和写锁都将阻塞</p></li><li><p>主要方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">Lock</span><span class="params">()</span> //申请写锁</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">Unlock</span><span class="params">()</span> //释放写锁</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RLock</span><span class="params">()</span> //申请读锁</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RUnlock</span><span class="params">()</span>//释放读锁</span></span><br></pre></td></tr></table></figure></li></ul><p>e.g.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">var</span> rm sync.RWMutex</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">20</span> * time.Millisecond)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">rm.Lock()</span><br><span class="line">j++</span><br><span class="line">fmt.Printf(<span class="string">"Write lock %d\n"</span>, j)</span><br><span class="line">rm.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">18</span> * time.Millisecond)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">rm.RLock()</span><br><span class="line">k++</span><br><span class="line"><span class="comment">//fmt.Printf("Read lock %d\n", j)</span></span><br><span class="line">fmt.Printf(<span class="string">"Read lock %d\n"</span>, k)</span><br><span class="line">rm.RUnlock()</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cond-condition-条件变量"><a class="markdownIt-Anchor" href="#cond-condition-条件变量"></a> Cond （ condition 条件变量）</h3><ul><li><p>互斥锁保证在同一时刻仅有一个线程访问某一个共享数据</p></li><li><p>条件变量在共享数据的状态发生变化时，通知其他因此而被阻塞的线程</p></li><li><p>条件变量需要用互斥锁来创建</p></li><li><p>主要方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化一个带有Locker的Cond变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCond</span><span class="params">(l Locker)</span> *<span class="title">Cond</span></span></span><br><span class="line"><span class="function">//<span class="title">Unlock</span><span class="params">()</span>-&gt;阻塞等待通知<span class="params">(等待Signal()</span>或<span class="title">Broadcast</span><span class="params">()</span>的通知)-&gt;收到通知-&gt;<span class="title">Lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(c *Cond)</span> <span class="title">Wait</span><span class="params">()</span></span></span><br><span class="line"><span class="function">//激活执行<span class="title">Wait</span><span class="params">()</span>的通知队列的第一个协程</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(c *Cond)</span> <span class="title">Signal</span><span class="params">()</span></span></span><br><span class="line"><span class="function">//激活执行<span class="title">Wait</span><span class="params">()</span>的通知队列所有协程 </span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(c *Cond)</span> <span class="title">Broadcast</span><span class="params">()</span></span></span><br><span class="line"><span class="function">//使用内置的互斥锁</span></span><br><span class="line"><span class="function"><span class="title">cond</span>.<span class="title">L</span>.<span class="title">Lock</span><span class="params">()</span>和<span class="title">cond</span>.<span class="title">L</span>.<span class="title">Unlock</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li></ul><p>e.g.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> locker = <span class="built_in">new</span>(sync.Mutex)</span><br><span class="line"><span class="keyword">var</span> cond = sync.NewCond(locker)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">cond.L.Lock()         <span class="comment">// wait 前，必须要先加锁</span></span><br><span class="line"><span class="keyword">defer</span> cond.L.Unlock() <span class="comment">//保障释放资源</span></span><br><span class="line">cond.Wait()</span><br><span class="line">fmt.Println(x)</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">fmt.Println(<span class="string">"Signal...."</span>)</span><br><span class="line">cond.Signal() <span class="comment">// 下发一个通知给已经获取锁的goroutine</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="string">"Signal...."</span>)</span><br><span class="line">cond.Signal() <span class="comment">// 3 秒之后，下发一个通知给已经获取锁的goroutine</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="string">"Broadcast..."</span>)</span><br><span class="line">cond.Broadcast() <span class="comment">// 3 秒之后，下发通知给所有已经获取锁的goroutine</span></span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="附"><a class="markdownIt-Anchor" href="#附"></a> 附：</h1><h2 id="语言设计思想"><a class="markdownIt-Anchor" href="#语言设计思想"></a> 语言设计思想</h2><ul><li><p>保证只有一种写法</p></li><li><p>少即是多</p></li><li><p>GO 不支持class ,使用结构代替类，<strong><u>结构字段用来封装对象属性，方法用来封装对象的行为</u></strong></p></li><li><p>用类型组合来实现继承</p></li><li><p>多态：Go中只要结构体实现了接口的部分方法，就可以通过接口指向该结构体，并且使用被实现的方法。因此，可以看到Go的代码中函数传参很多都是接口，但真正使用的时候传入的是实现了该接口的struct，这就是Go中多态提现的一个例子。</p></li></ul><h2 id="new-和-make区别"><a class="markdownIt-Anchor" href="#new-和-make区别"></a> new 和 make区别</h2><ul><li>new和make是内建的两个函数，主要用来在堆上创建分配类型的内存</li><li>new用于普通类型的内存分配，内存清零，返回<strong>该类型指针</strong></li><li>make（专门）用于slice、map以及channel的初始化，返回<strong>引用</strong></li></ul><h2 id="golang中分为值类型和引用类型"><a class="markdownIt-Anchor" href="#golang中分为值类型和引用类型"></a> golang中分为值类型和引用类型</h2><ul><li><p>值类型分别有：int系列、float系列、bool、string、数组和结构体</p></li><li><p>引用类型有：指针、slice切片、管道channel、接口interface、map、函数等</p></li><li><p>值类型的特点是：变量直接存储值，内存通常在栈中分配</p></li><li><p>引用类型的特点是：变量存储的是一个地址，这个地址对应的空间里才是真正存储的值，内存通常在堆中分配</p></li></ul><h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2><h3 id="go中引用类型有哪些"><a class="markdownIt-Anchor" href="#go中引用类型有哪些"></a> Go中引用类型有哪些？</h3><p>在 Go 语言中，引用类型有 切片 (slice) 、 字典 (map) 、 接口 (interface) 、 函数 (func) 以及 通道 (chan) 。</p><p>引用类型之所以可以引用，是因为我们创建引用类型的变量，其实是一个标头值，标头值里包含一个<strong>指针</strong>，指向底层的数据结构，当我们在函数中传递引用类型时，其实传递的是这个标头值的副本，它所指向的底层结构并没有被复制传递，这也是引用类型传递高效的原因。</p><p>注：用户自定义类型不是引用类型===&gt;所以函数传参的时候都传的是地址，形参都是指针类型。And: 引用类型不支持<code>==</code>运算符，无法直接比较</p><p>总结：Go中规定的引用类型就5个：切片 (slice) 、 字典 (map) 、 接口 (interface) 、 函数 (func) 以及 通道 (chan)，但传参为这几个类型的时候，不需要传指针，直接用相应的类型即可。</p><h2 id="课上训练题"><a class="markdownIt-Anchor" href="#课上训练题"></a> 课上训练题</h2><h3 id="自定义排序"><a class="markdownIt-Anchor" href="#自定义排序"></a> 自定义排序</h3><blockquote><p>标准库的 sort 包采用的是快速排序</p></blockquote><p>请模仿其实现，基于Sorter 接口实现冒泡排序</p><h3 id="请按如下要求设计协程交互代码"><a class="markdownIt-Anchor" href="#请按如下要求设计协程交互代码"></a> 请按如下要求设计协程交互代码</h3><ul><li>协程一随机给出0~100的数</li><li>协程二猜协程一的数，猜中的话协程一返回信号0，结束程序；猜小了协程一返回信号-1，猜大了协程一返回信号1，继续猜</li><li>打印猜数过程</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> gg</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> up = <span class="number">100</span></span><br><span class="line"> <span class="keyword">var</span> down = <span class="number">0</span></span><br><span class="line"> <span class="keyword">var</span> last = <span class="number">-1</span></span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">guest</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"> <span class="keyword">for</span> &#123;</span><br><span class="line">signn := &lt;- ch</span><br><span class="line">fmt.Printf(<span class="string">"协程得到的sign: %v\n"</span>, signn)</span><br><span class="line"><span class="keyword">var</span> ths <span class="keyword">int</span></span><br><span class="line"><span class="keyword">switch</span> signn&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line"><span class="comment">// down ~ last</span></span><br><span class="line">down = last</span><br><span class="line">ths = rand.Intn(up - down) + down</span><br><span class="line">fmt.Printf(<span class="string">"协程随机到的ths: %v\n"</span>, ths)</span><br><span class="line">ch &lt;- ths</span><br><span class="line">last = ths</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">// last ~ up</span></span><br><span class="line">up = last</span><br><span class="line">ths = rand.Intn(up-down) + down</span><br><span class="line">fmt.Printf(<span class="string">"协程随机到的ths: %v\n"</span>, ths)</span><br><span class="line">ch &lt;- ths</span><br><span class="line">last = ths</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> rand.Seed(time.Now().UnixNano())</span><br><span class="line"> num := rand.Intn(<span class="number">100</span>)</span><br><span class="line"> fmt.Printf(<span class="string">"随机到的数为: %v\n"</span>, num)</span><br><span class="line"> ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line"> ch &lt;- <span class="number">-1</span></span><br><span class="line"> <span class="keyword">var</span> n <span class="keyword">int</span></span><br><span class="line"> <span class="keyword">go</span> guest(ch)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> &#123;</span><br><span class="line"> n = &lt;- ch</span><br><span class="line"> fmt.Printf(<span class="string">"主线程得到数值为%v\n"</span>, n)</span><br><span class="line"> <span class="keyword">if</span> ( n == num )&#123;</span><br><span class="line"> ch &lt;- <span class="number">0</span></span><br><span class="line"> fmt.Printf(<span class="string">"协程猜中啦, 数值为%v\n"</span>, n)</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span> (n &lt; num)&#123;</span><br><span class="line"> ch &lt;- <span class="number">-1</span></span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span> (n&gt; num)&#123;</span><br><span class="line"> ch &lt;- <span class="number">1</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="go复习题目"><a class="markdownIt-Anchor" href="#go复习题目"></a> Go复习题目：</h2><ul><li><a href="https://geektutu.com/post/qa-golang-1.html" target="_blank" rel="noopener">Go 语言笔试面试题(基础语法)</a>——基础知识题</li><li>★<a href="https://www.cnblogs.com/double-W/p/12774095.html" target="_blank" rel="noopener">GO语言测试题</a></li><li>同学推荐的<a href="https://tour.go-zh.org/basics/1" target="_blank" rel="noopener">Go指南</a>——可以根据概念实现做点题</li></ul><h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2><h2 id="考试中容易出的坑题"><a class="markdownIt-Anchor" href="#考试中容易出的坑题"></a> 考试中容易出的坑题：</h2><ul><li>▲与 C 不同的是，Go 在不同类型的项之间赋值时需要显式转换</li><li>▲与 C 不同，Go 没有指针运算。</li></ul><p>容易踩的坑：</p><ul><li><p>nil 是 interface、function、pointer、map、slice 和 channel 类型变量的默认初始值。</p></li><li><p>允许对值为 nil 的 slice 添加元素，但对值为 nil 的 map添加元素则会造成运行时 panic</p></li><li><p>string 类型的变量值不能为 nil ==&gt; string 的零值为&quot;&quot;</p></li><li><p>访问 map 中不存在的 key，Go中返回的是零值，而不是报错</p></li><li><p>range后迭代对象：数组、通道、string、map</p><ul><li>数组：for i, v := range arr，i为索引，v为arr[i]的值</li><li>通道：for data := ch, data为数据</li><li><strong>range 迭代 string 得到的值:</strong><ul><li>range 得到的索引是字符值（Unicode point / rune）第一个字节的位置，与其他编程语言不同，这个索引并不直接是字符在字符串中的位置。</li><li>注意一个字符可能占多个 rune，比如法文单词 café 中的 é。操作特殊字符可使用norm 包。</li><li>for range 迭代会尝试将 string 翻译为 UTF8 文本，对任何无效的码点都直接使用 0XFFFD rune（�）UNicode 替代字符来表示。如果 string 中有任何非 UTF8 的数据，应将 string 保存为 byte slice 再进行操作。</li></ul></li><li>range 迭代 map<ul><li>如果你希望以特定的顺序（如按 key 排序）来迭代 map，要注意每次迭代都可能产生不一样的结果。</li><li>Go 的运行时是有意打乱迭代顺序的，所以你得到的迭代结果可能不一致。但也并不总会打乱，得到连续相同的 5 个迭代结果也是可能的</li><li>如果你去 Go Playground 重复运行上边的代码，输出是不会变的，只有你<u>更新代码它才会重新编译</u>。</li></ul></li></ul></li><li><p>string 与 byte slice 之间的转换：Go 在 string 与 byte slice 相互转换上优化了两点，避免了额外的内存分配：</p><ul><li>在 map[string] 中查找 key 时，使用了对应的 []byte，避免做 m[string(key)] 的内存分配</li><li>使用 for range 迭代 string 转换为 []<strong>byte</strong> 的迭代：for i,v := range []byte(str) {…}</li></ul></li><li><p>在多行 array、slice、map 语句的末尾缺少 , 号</p></li><li><p>switch 中的 fallthrough 语句：switch 语句中的 case 代码块会默认带上 break，但可以使用 fallthrough 来强制执行下一个 case 代码块。  &lt;=等价于=&gt;改写成 case 为多条件判断：</p></li><li><p>自增和自减运算： Go 特立独行，<strong>去掉了前置操作</strong>，同时 ++、-- 只作为运算符而非表达式。</p></li><li><p>不导出的 struct 字段无法被 encode。以小写字母开头的字段成员是无法被外部直接访问的，所以 struct 在进行 json、xml、gob 等格式的 encode 操作时，这些私有字段会被忽略，导出时得到零值：</p></li><li><p>Go程序默认不等所有 goroutine 都执行完才退出</p></li><li><p>常用解决办法：使用 “WaitGroup” 变量，它会让主程序等待所有 goroutine 执行完毕再退出。</p></li><li><p>向已关闭的 channel 发送数据会造成 panic</p></li><li><p>在一个值为 nil 的 channel 上发送和接收数据将永久阻塞：</p></li><li><p>▲<strong>若函数 receiver 传参是传值方式，则无法修改参数的原有值</strong></p></li><li><p>从一个现有的非 interface 类型创建新类型时，并不会继承原有的方法：</p></li><li><p>跳出 for-switch 和 for-select 代码块：没有指定标签的 break 只会跳出 switch/select 语句，若不能使用 return 语句跳出的话，可为 break 跳出标签指定的代码块：</p></li><li><p>Go里面有两个保留的函数：init函数（能够应用于所有的package）和main函数（只能应用于package main）</p></li><li><p>对Slice使用append，当长度超出时会返回新的Slice，因此无法在递归的时候不能直接传引用对象，而是需要传指针<code>*[]int</code>指针，并且在append的时候改成<code>*ans = append(*ans, root.Val)</code></p><ul><li><p>见<strong>Leetcode94树的中层遍历：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">OrderTravel(root, &amp;ans)</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">如果ans不传指针，而是直接ans []int传参，关注ans地址变化，输出地址得到：</span></span><br><span class="line"><span class="comment">append前:0xc000004078</span></span><br><span class="line"><span class="comment">append后:0xc000004078</span></span><br><span class="line"><span class="comment">append前:0xc0000040c0</span></span><br><span class="line"><span class="comment">append后:0xc0000040c0</span></span><br><span class="line"><span class="comment">append前:0xc0000040a8</span></span><br><span class="line"><span class="comment">append后:0xc0000040a8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OrderTravel</span><span class="params">(root *TreeNode, ans *[]<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">OrderTravel(root.Left, ans)</span><br><span class="line">*ans = <span class="built_in">append</span>(*ans, root.Val)</span><br><span class="line">OrderTravel(root.Right, ans)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 修改成传指针后ans的地址就始终是一致的了</span></span><br><span class="line"><span class="comment">append前: 0xc000004078</span></span><br><span class="line"><span class="comment">append后: 0xc000004078</span></span><br><span class="line"><span class="comment">append前: 0xc000004078</span></span><br><span class="line"><span class="comment">append后: 0xc000004078</span></span><br><span class="line"><span class="comment">append前: 0xc000004078</span></span><br><span class="line"><span class="comment">append后: 0xc000004078</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">root := &amp;TreeNode&#123;</span><br><span class="line">Val: <span class="number">1</span>,</span><br><span class="line">Left: <span class="literal">nil</span>,</span><br><span class="line">Right: &amp;TreeNode&#123;</span><br><span class="line">Val: <span class="number">2</span>,</span><br><span class="line">Left: &amp;TreeNode&#123;Val: <span class="number">3</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">res := inorderTraversal(root)</span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>from：<a href="https://www.topgoer.com/%E8%B5%84%E6%96%99%E4%B8%8B%E8%BD%BD/Golang%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%8450%E4%B8%AA%E5%9D%91.html" target="_blank" rel="noopener">Golang新手可能会踩的50个坑</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浙江大学期末考试go语言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#浙江大学期末考试go语言&quot;&gt;&lt;/a&gt; 浙江大学期末考试——Go语言&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;期末复习对学习知识的帮助是巨大的，相比于看视频，本篇点
      
    
    </summary>
    
    
      <category term="Go" scheme="https://nymrli.top/tags/Go/"/>
    
      <category term="考试" scheme="https://nymrli.top/tags/%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>物联网基础与应用-课程笔记</title>
    <link href="https://nymrli.top/2021/09/27/%E7%89%A9%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%BA%94%E7%94%A8-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <id>https://nymrli.top/2021/09/27/物联网基础与应用-课程笔记/</id>
    <published>2021-09-27T15:44:21.000Z</published>
    <updated>2021-10-11T13:04:37.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iot课上实验"><a class="markdownIt-Anchor" href="#iot课上实验"></a> IOT课上实验</h1><h2 id="交叉编译环境"><a class="markdownIt-Anchor" href="#交叉编译环境"></a> 交叉编译环境</h2><h3 id="什么是交叉编译环境"><a class="markdownIt-Anchor" href="#什么是交叉编译环境"></a> 什么是交叉编译环境？</h3><p>交叉编译其实是相对于本地编译(native build)来说的，大家最开始学习 C/C++ 这些语言的时候，都是在自己的笔记本上写程序，然后在直接在电脑上编译生成可执行文件，最后在电脑上运行。整个流程为：程序的编辑-&gt;编译-&gt;运行，整个过程都是在一台 X86 电脑上。</p><p>当我们开始接触嵌入式开发后，事情变的不一样了。你在<strong>电脑上写程序</strong>，在电脑上编译出可执行文件，最后这个可执行文件需要下载到你的<strong>开发板上运行</strong>。程序最后运行的环境变了，比如你的开发板是基于 Arm 的——程序在 X86 上编辑，编译，最终运行在另一个和 X86 完全不同的架构的 Arm 芯片上。</p><p>之所以整个流程变成了这个样子，这是由<strong>嵌入式系统的特性</strong>决定的：一般嵌入式系统里面使用的芯片性能都比较弱，而且绝大部分都不能像 X86 一样运行 Windows/Ubuntu 桌面系统，即使能运行，性能也很弱，<strong>在开发板上很难提供写代码、编译代码的环境</strong>。所以我们还是离不开 X86 电脑强大高效的桌面环境进行软件开发。</p><p>总结： 在性能强大的个人电脑上编写源码和编译程序，将可执行文件运行在开发板上。</p><p><img src="/2021/09/27/物联网基础与应用-课程笔记/emb.png" alt="emb"></p><h3 id="搭建交叉编译环境"><a class="markdownIt-Anchor" href="#搭建交叉编译环境"></a> 搭建交叉编译环境</h3><blockquote><p>操作系统强烈推荐使用 ubuntu-12.04 以上版本的 64 位发行版， windows上不行</p></blockquote><ol><li><p>预安装：在安装交叉编译工具之前需要先安装 32 位的兼容库和 libncurses5-dev 库，安装兼容库 需要从 ubuntu 的源库中下载。如果主机没有安装 32 位兼容库，在使用交叉编译工具的时候可能会出现错误：<code>-bash: ./arm-fsl-linux-gnueabi-gcc: 没有那个文件或目录</code>因此需要先<code>sudo apt-get install ia32-libs</code>安装32位兼容库，然后<code>sudo apt-get install libncurses5-dev</code>安装 libncurses5-dev，如果没有安装<code>libncurses5-dev</code>，在使用 make menucofig 时会如所示的错误<code>'make menuconfig' requires the ncurses libraries</code></p></li><li><p>安装交叉编译工具链：需要 root 权限。在终端执行命令：<code>$ sudo tar –zxvf gcc-4.6.2-glibc-2.13-linaro-multilib-2011.12.tar.gz -C /opt/</code>， 交叉编译工具链将会被安装到<code>/opt/ gcc-4.6.2-glibc-2.13-linaro-multilib-2011.12</code>目录下（注意解压时-C为改变解压目录，指定为 /opt/ 目录），交叉编译器的具体目录是 <code>/opt/gcc-4.6.2-glibc-2.13-linaro-multilib-2011.12/fsl-linaro-toolchain/bin/bin</code>。</p></li><li><p>为了方便使用，还需将交叉编译器路径添加到<strong>系统路径</strong>中：修改~/.bashrc 文件，在 PATH 变量中增加交叉编译工具链的 安装路径，然后运行~/.bashrc 文件，使设置生效。在~/.bashrc 文件末尾增加一行： <code>export PATH=$PATH:/opt/gcc-4.6.2-glibc-2.13-linaro-multilib-2011.12/fsl-linaro-toolchain/bin/</code></p></li><li><p>查看是否安装成功：在终端输入 <code>arm-fsl-linux-gnueabi-</code>并按 TAB 键，如果能够看到很多 arm-fsl-linux-gnueabi前缀的命令，则基本可以确定交叉编译器安装正确。</p></li></ol><p>注：从ubuntu 13.10已经废弃了ia32-libs，因此如果在Ubuntu16.04的机子上安装，会出现如下报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mrli@welcome:~/iot$ sudo apt-get install ia32-libs</span><br><span class="line">sudo: unable to resolve host welcome</span><br><span class="line">[sudo] password <span class="keyword">for</span> mrli: </span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">Package ia32-libs is not available, but is referred to by another package.</span><br><span class="line">This may mean that the package is missing, has been obsoleted, or</span><br><span class="line">is only available from another <span class="built_in">source</span></span><br><span class="line">However the following packages replace it:</span><br><span class="line">  lib32ncurses5 lib32z1</span><br><span class="line">E: Package <span class="string">'ia32-libs'</span> has no installation candidate</span><br></pre></td></tr></table></figure><h2 id="编译代码"><a class="markdownIt-Anchor" href="#编译代码"></a> 编译代码</h2><p>由于一直报错：<code>/home /mrli/iot/gcc-46.2-glibc-213-linaro-multillb-201112/fsl-linaro-toolchain/bin/。/lib/gcc/arm-fsl-linux-gnueabi/4.6.2/。.//。/arm-fsl-linux-gnueabi/bin/ld:warning:libcrypto so 1.1， needed by ./lib/libcurl. so, not found（try using -rpath or -rpath-link）</code>， 原因是LIB后没有带编译链接选项<code>-lcurl, -lcrypto, -lssl</code></p><h2 id="mqtt"><a class="markdownIt-Anchor" href="#mqtt"></a> MQTT</h2><blockquote><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的&quot;轻量级&quot;通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p></blockquote><p><strong>MQTT协议实现方式</strong></p><p>实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：发布者（Publish）、代理（Broker）（服务器）、订阅者（Subscribe）。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。</p><p>MQTT传输的消息分为：主题（Topic）和负载（payload）两部分：</p><ul><li>（1）Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）；</li><li>（2）payload，可以理解为消息的内容，是指订阅者具体要使用的内容。</li></ul><p><a href="https://www.runoob.com/w3cnote/mqtt-intro.html" target="_blank" rel="noopener">MQTT入门介绍——菜鸟教程</a></p><h3 id="mosquitto使用"><a class="markdownIt-Anchor" href="#mosquitto使用"></a> mosquitto使用</h3><p>库函数API介绍：<a href="https://blog.csdn.net/weixin_53361650/article/details/116954595" target="_blank" rel="noopener">mosquitto库函数详解</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>MQTT设计了一套保证消息稳定传输的机制，包括消息应答、存储和重传。在这套机制下，提供了三种不同层次QoS（Quality of Service）：</p><ul><li>QoS0，At most once，至多一次；</li><li>QoS1，At least once，至少一次；</li><li>QoS2，Exactly once，确保只有一次。</li></ul><p>客户端可以主动选择性地往某一主题推送信息，这个不需要提前设定；但在接收信息方面，需要客户端提前订阅主题，注：客户端同时可以订阅多个主题，且MQTT协议的主题解析有规则，规则如下：</p><p>Springboot_MQTT:</p><ul><li><a href="https://blog.csdn.net/yl_hahha/article/details/99246679" target="_blank" rel="noopener">https://blog.csdn.net/yl_hahha/article/details/99246679</a></li><li><a href="https://blog.csdn.net/qq_41018959/article/details/81076055?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link" target="_blank" rel="noopener">https://blog.csdn.net/qq_41018959/article/details/81076055?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link</a></li></ul><h2 id="pthread库使用"><a class="markdownIt-Anchor" href="#pthread库使用"></a> pthread库使用</h2><p>库函数API介绍：<a href="https://blog.csdn.net/weixin_38102771/article/details/91351126" target="_blank" rel="noopener">线程以及pthread库的使用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iot课上实验&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#iot课上实验&quot;&gt;&lt;/a&gt; IOT课上实验&lt;/h1&gt;
&lt;h2 id=&quot;交叉编译环境&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#交叉编译环境&quot;&gt;
      
    
    </summary>
    
    
      <category term="ZJU" scheme="https://nymrli.top/tags/ZJU/"/>
    
      <category term="嵌入式开发" scheme="https://nymrli.top/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>学点Gradle</title>
    <link href="https://nymrli.top/2021/09/26/%E5%AD%A6%E7%82%B9Gradle/"/>
    <id>https://nymrli.top/2021/09/26/学点Gradle/</id>
    <published>2021-09-26T05:37:07.000Z</published>
    <updated>2021-09-27T00:37:42.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gradle学习"><a class="markdownIt-Anchor" href="#gradle学习"></a> Gradle学习</h1><p>在kotlin中使用mapstruct出现了些问题， 网上搜寻后得到结论：需要使用kapt(Kotlin annotation processing tool 即kotlin注解处理工具)， 但给出的大多都是通过Gradle来进行配置的。因此借此机会学习了下Gradle：</p><h2 id="plugins和apply-plugin"><a class="markdownIt-Anchor" href="#plugins和apply-plugin"></a> plugins和apply plugin:</h2><blockquote><p>由于文档写到了， 由于不清楚这些在哪些位置加入， 因此查看了plugins和<code>apply plugin:</code>的区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; 添加 kapt 插件</span><br><span class="line">&gt; apply plugin: &apos;kotlin-kapt&apos;</span><br><span class="line">&gt; </span><br><span class="line">&gt; 然后在项目中添加如下依赖：</span><br><span class="line">&gt; api(&quot;com.github.pozo:mapstruct-kotlin:1.3.1.2&quot;)</span><br><span class="line">&gt; kapt(&quot;com.github.pozo:mapstruct-kotlin-processor:1.3.1.2&quot;)</span><br><span class="line">&gt; </span><br><span class="line">&gt; 另外，还需要添加如下依赖：</span><br><span class="line">&gt; api(&quot;org.mapstruct:mapstruct:1.4.0.Beta3&quot;)</span><br><span class="line">&gt; kapt(&quot;org.mapstruct:mapstruct-processor:1.4.0.Beta3&quot;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>“plugins {}”块导入的是<a href="https://link.zhihu.com/?target=https%3A//plugins.gradle.org/" target="_blank" rel="noopener">Gradle官方插件仓库</a>里的插件。如果使用“buildscript {}”块指定第三方库作为Gradle插件的话，指定插件就需要使用“apply plugin”了。</p><p>刚刚翻了翻文档，“apply plugin”本身似乎还有更多的用途，而“plugins {}”块似乎是一个新引入的还不足够稳定的特性。题主想要知道更多的话直接看看文档就行了。</p><p>最终的Plain项目的依赖如下所示：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">    id <span class="string">'org.jetbrains.kotlin.jvm'</span> version <span class="string">'1.4.10'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">group</span> <span class="string">'org.example'</span></span><br><span class="line">version <span class="string">'1.0-SNAPSHOT'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">'kotlin-kapt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">"org.jetbrains.kotlin:kotlin-stdlib"</span></span><br><span class="line">    testImplementation <span class="string">'org.junit.jupiter:junit-jupiter-api:5.6.0'</span></span><br><span class="line">    testRuntimeOnly <span class="string">'org.junit.jupiter:junit-jupiter-engine'</span></span><br><span class="line"></span><br><span class="line">    api(<span class="string">"com.github.pozo:mapstruct-kotlin:1.3.1.2"</span>)</span><br><span class="line">    kapt(<span class="string">"com.github.pozo:mapstruct-kotlin-processor:1.3.1.2"</span>)</span><br><span class="line">    api(<span class="string">"org.mapstruct:mapstruct:1.4.0.Beta3"</span>)</span><br><span class="line">    kapt(<span class="string">"org.mapstruct:mapstruct-processor:1.4.0.Beta3"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="maven使用kapt"><a class="markdownIt-Anchor" href="#maven使用kapt"></a> maven使用kapt</h2><p>在 kotlin-maven-plugin 中的在<code>compile</code> 之前添加 <code>kapt</code> 目标的执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;execution&gt;</span><br><span class="line">    &lt;id&gt;kapt&lt;/id&gt;</span><br><span class="line">    &lt;goals&gt;</span><br><span class="line">        &lt;goal&gt;kapt&lt;/goal&gt;</span><br><span class="line">    &lt;/goals&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;sourceDirs&gt;</span><br><span class="line">            &lt;sourceDir&gt;src/main/kotlin&lt;/sourceDir&gt;</span><br><span class="line">            &lt;sourceDir&gt;src/main/java&lt;/sourceDir&gt;</span><br><span class="line">        &lt;/sourceDirs&gt;</span><br><span class="line">        &lt;annotationProcessorPaths&gt;</span><br><span class="line">            &lt;!-- 在此处指定你的注解处理器。 --&gt;</span><br><span class="line">            &lt;annotationProcessorPath&gt;</span><br><span class="line">                &lt;groupId&gt;com.google.dagger&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;dagger-compiler&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.9&lt;/version&gt;</span><br><span class="line">            &lt;/annotationProcessorPath&gt;</span><br><span class="line">        &lt;/annotationProcessorPaths&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/execution&gt;</span><br></pre></td></tr></table></figure><p>请注意，IntelliJ IDEA 自身的构建系统目前还不支持 kapt。当你想要重新运行注解处理时，请从“Maven Projects”工具栏启动构建。</p><p>from: <a href="https://www.kancloud.cn/alex_wsc/android_kotlin/1318386#_Maven__110" target="_blank" rel="noopener">https://www.kancloud.cn/alex_wsc/android_kotlin/1318386#_Maven__110</a></p><p><strong>各种依赖方式说明</strong></p><ul><li><p>implementation<br>这个指令的特点就是，对于使用了该命令编译的依赖，对该项目有依赖的项目将无法访问到使用该命令编译的依赖中的任何程序，也就是将该依赖隐藏在内部，而不对外部公开。</p></li><li><p>api<br>完全等同于compile指令。</p></li><li><p>compile<br>这种是我们最常用的方式，使用该方式依赖的库将会参与编译和打包。</p></li><li><p>testCompile<br>testCompile 只在单元测试代码的编译以及最终打包测试apk时有效。</p></li><li><p>debugCompile<br>debugCompile 只在debug模式的编译和最终的debug apk打包时有效。</p></li><li><p>releaseCompile<br>releaseCompile 仅仅针对Release模式的编译和最终的Release apk打包。这里比如</p></li></ul><h2 id="gradle中api-implementation和compile的区别"><a class="markdownIt-Anchor" href="#gradle中api-implementation和compile的区别"></a> gradle中api、implementation和compile的区别</h2><blockquote><p>我们在gradle中引用第三方maven库时，一般通过下面的语句去引用:<code>compile 'com.android.support:appcompat-v7:26.1.0'</code> , 然后sync project，就能成功引用对应的包到项目之中了，十分方便。除了使用compile关键字，使用implementation和api也能将包引用到项目中</p></blockquote><p>api和compile关键字作用效果是一样的，使用时可以互相替换。实际上，api关键字是用来替代compile关键字的，因为compile关键字将来会被弃用。在高版本的gradle，使用compile关键字会报错并提示使用api关键字代替。</p><p>Q：看起来这三个关键字的作用是一样的，那么，他们到底有什么区别呢？</p><p>A：在同一个module下，implementation和compile的使用效果相同，但是在不同module下，就会有所区别了。</p><p><strong>api或compile关键字引用的包对于其他module来说是可见的，而implementation关键字引用的包对于其他module来说是不可见的。</strong></p><h2 id="maven仓库列表"><a class="markdownIt-Anchor" href="#maven仓库列表"></a> Maven仓库列表</h2><table><thead><tr><th>仓库名</th><th>简介</th><th>实际地址</th><th>使用地址</th></tr></thead><tbody><tr><td>jcenter</td><td>JFrog公司提供的仓库</td><td><a href="http://jcenter.bintray.com" target="_blank" rel="noopener">http://jcenter.bintray.com</a></td><td><a href="https://maven.aliyun.com/repository/jcenter" target="_blank" rel="noopener">https://maven.aliyun.com/repository/jcenter</a> <a href="https://maven.aliyun.com/nexus/content/repositories/jcenter" target="_blank" rel="noopener">https://maven.aliyun.com/nexus/content/repositories/jcenter</a></td></tr><tr><td>mavenLocal</td><td>本台电脑上的仓库</td><td>{USER_HOME}/.m2/repository</td><td>C:/Users/liyujiang/.m2/repository (Windows) /home/liyujiang/.m2/repository (Linux)</td></tr><tr><td>mavenCentral</td><td>Sonatype公司提供的中央库</td><td><a href="http://central.maven.org/maven2" target="_blank" rel="noopener">http://central.maven.org/maven2</a></td><td><a href="https://maven.aliyun.com/repository/central" target="_blank" rel="noopener">https://maven.aliyun.com/repository/central</a> <a href="https://maven.aliyun.com/nexus/content/repositories/central" target="_blank" rel="noopener">https://maven.aliyun.com/nexus/content/repositories/central</a></td></tr><tr><td>google</td><td>Google公司提供的仓库</td><td><a href="https://maven.google.com" target="_blank" rel="noopener">https://maven.google.com</a></td><td><a href="https://maven.aliyun.com/repository/google" target="_blank" rel="noopener">https://maven.aliyun.com/repository/google</a> <a href="https://maven.aliyun.com/nexus/content/repositories/google" target="_blank" rel="noopener">https://maven.aliyun.com/nexus/content/repositories/google</a> <a href="https://dl.google.com/dl/android/maven2" target="_blank" rel="noopener">https://dl.google.com/dl/android/maven2</a></td></tr><tr><td>jitpack</td><td>JitPack提供的仓库</td><td><a href="https://jitpack.io" target="_blank" rel="noopener">https://jitpack.io</a></td><td><a href="https://jitpack.io" target="_blank" rel="noopener">https://jitpack.io</a></td></tr><tr><td>public</td><td>jcenter和mavenCentral的聚合仓库</td><td><a href="https://maven.aliyun.com/repository/public" target="_blank" rel="noopener">https://maven.aliyun.com/repository/public</a> <a href="https://maven.aliyun.com/nexus/content/groups/public" target="_blank" rel="noopener">https://maven.aliyun.com/nexus/content/groups/public</a></td><td></td></tr><tr><td>gradle-plugin</td><td>Gradle插件仓库</td><td><a href="https://plugins.gradle.org/m2" target="_blank" rel="noopener">https://plugins.gradle.org/m2</a></td><td><a href="https://maven.aliyun.com/repository/gradle-plugin" target="_blank" rel="noopener">https://maven.aliyun.com/repository/gradle-plugin</a> <a href="https://maven.aliyun.com/nexus/content/repositories/gradle-plugin" target="_blank" rel="noopener">https://maven.aliyun.com/nexus/content/repositories/gradle-plugin</a></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven&#123; url &apos;https://maven.aliyun.com/nexus/content/groups/public/&apos;&#125;</span><br><span class="line">    maven&#123; url &apos;https://maven.aliyun.com/nexus/content/repositories/jcenter&apos;&#125;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gradle全局换源"><a class="markdownIt-Anchor" href="#gradle全局换源"></a> gradle全局换源</h3><p>在<code>C:\Users\mrli\.gradle</code>文件夹下修改init.gradle文件（如果没有则新建），写下如下内容:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span>&#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        <span class="keyword">def</span> ALIYUN_REPOSITORY_URL = <span class="string">'https://maven.aliyun.com/repository/public/'</span></span><br><span class="line">        <span class="keyword">def</span> ALIYUN_JCENTER_URL = <span class="string">'https://maven.aliyun.com/repository/jcenter/'</span></span><br><span class="line">        <span class="keyword">def</span> ALIYUN_GOOGLE_URL = <span class="string">'https://maven.aliyun.com/repository/google/'</span></span><br><span class="line">        <span class="keyword">def</span> ALIYUN_GRADLE_PLUGIN_URL = <span class="string">'https://maven.aliyun.com/repository/gradle-plugin/'</span></span><br><span class="line">        all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">            <span class="keyword">if</span>(repo <span class="keyword">instanceof</span> MavenArtifactRepository)&#123;</span><br><span class="line">                <span class="keyword">def</span> url = repo.url.toString()</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">'https://repo1.maven.org/maven2/'</span>)) &#123;</span><br><span class="line">                    <span class="keyword">project</span>.logger.lifecycle <span class="string">"Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL."</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">'https://jcenter.bintray.com/'</span>)) &#123;</span><br><span class="line">                    <span class="keyword">project</span>.logger.lifecycle <span class="string">"Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL."</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">'https://dl.google.com/dl/android/maven2/'</span>)) &#123;</span><br><span class="line">                    <span class="keyword">project</span>.logger.lifecycle <span class="string">"Repository $&#123;repo.url&#125; replaced by $ALIYUN_GOOGLE_URL."</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">'https://plugins.gradle.org/m2/'</span>)) &#123;</span><br><span class="line">                    <span class="keyword">project</span>.logger.lifecycle <span class="string">"Repository $&#123;repo.url&#125; replaced by $ALIYUN_GRADLE_PLUGIN_URL."</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123; url ALIYUN_REPOSITORY_URL &#125;</span><br><span class="line">        maven &#123; url ALIYUN_JCENTER_URL &#125;</span><br><span class="line">        maven &#123; url ALIYUN_GOOGLE_URL &#125;</span><br><span class="line">        maven &#123; url ALIYUN_GRADLE_PLUGIN_URL &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：阿里源的URL使用https而不是http，否则会出现以下报错:<code>Gradle报错Could not resolve all dependencies for configuration ‘:detachedConfiguration7‘.</code></p><p>参考：</p><ul><li><a href="https://blog.csdn.net/qq_41053520/article/details/118244668" target="_blank" rel="noopener">https://blog.csdn.net/qq_41053520/article/details/118244668</a></li><li><a href="https://www.cnblogs.com/huiyi0521/p/10997152.html%E2%80%94%E2%80%94gradle%E4%B8%AD%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">https://www.cnblogs.com/huiyi0521/p/10997152.html——gradle中执行函数</a></li><li><a href="https://blog.csdn.net/qq32933432/article/details/108906687%E2%80%94%E2%80%94work" target="_blank" rel="noopener">https://blog.csdn.net/qq32933432/article/details/108906687——work</a></li></ul><h2 id="buildscript"><a class="markdownIt-Anchor" href="#buildscript"></a> buildscript</h2><blockquote><p>buildscript中的声明是gradle脚本自身需要使用的资源</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;java&apos; // java项目</span><br><span class="line">apply plugin: &apos;eclipse&apos; // eclipse开发环境构建，生成所需要的.project,.classpath等文件</span><br><span class="line">apply plugin: &apos;org.springframework.boot&apos;</span><br><span class="line">jar &#123;</span><br><span class="line">    baseName = &apos;shop-supplier&apos;</span><br><span class="line">    version =  &apos;1.0.0-SNAPSHOT&apos;</span><br><span class="line">&#125;</span><br><span class="line">version = &apos;1.0.0-SNAPSHOT&apos;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line">targetCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123; // maven仓库地址</span><br><span class="line">   maven&#123;url &apos;私服地址&apos;&#125;</span><br><span class="line">   mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123; // 依赖项</span><br><span class="line">   // web thymeleaf</span><br><span class="line">   compile(&apos;org.springframework.boot:spring-boot-starter-web&apos;)</span><br><span class="line">   compile(&apos;org.springframework.boot:spring-boot-starter-thymeleaf&apos;)</span><br><span class="line"></span><br><span class="line">   // test</span><br><span class="line">   testCompile(&apos;org.springframework.boot:spring-boot-starter-test&apos;)</span><br><span class="line"></span><br><span class="line">   //添加 google二维码</span><br><span class="line">   compile &apos;com.google.zxing:core:3.2.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gradle-工程使用mybatis"><a class="markdownIt-Anchor" href="#gradle-工程使用mybatis"></a> <a href="https://my.oschina.net/u/3574106/blog/2222889" target="_blank" rel="noopener">gradle 工程使用mybatis</a></h2><p>正常情况下是在src/main/java/**/xxx.xml 文件是不会被打包的，需要我们队gradle做一些特别的配置</p><p>①，build.gradle</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sourceSets.main.resources.srcDirs = [<span class="string">"src/main/java"</span>,<span class="string">"src/main/resources"</span>]</span><br></pre></td></tr></table></figure><p>②，指定mapper.xml 文件所在路径，这里我用的是mp</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.mapper-locations=com/mp/test/mapper/xml<span class="comment">/*Mapper.xml</span></span><br></pre></td></tr></table></figure><p>③，指定mapper接口所在路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.mp.test.mapper"</span>)</span><br></pre></td></tr></table></figure><h2 id="gradle中使用docker"><a class="markdownIt-Anchor" href="#gradle中使用docker"></a> gradle中使用docker</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;gradle学习&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#gradle学习&quot;&gt;&lt;/a&gt; Gradle学习&lt;/h1&gt;
&lt;p&gt;在kotlin中使用mapstruct出现了些问题， 网上搜寻后得到结论：需要使用kapt(Kotlin a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学点Kotlin</title>
    <link href="https://nymrli.top/2021/09/13/%E5%AD%A6%E7%82%B9Kotlin/"/>
    <id>https://nymrli.top/2021/09/13/学点Kotlin/</id>
    <published>2021-09-13T09:18:17.000Z</published>
    <updated>2021-12-02T03:17:32.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kotlin-基础语法"><a class="markdownIt-Anchor" href="#kotlin-基础语法"></a> Kotlin 基础语法</h2><p>Kotlin 文件以 .kt 为后缀。</p><h3 id="函数定义"><a class="markdownIt-Anchor" href="#函数定义"></a> 函数定义</h3><p>函数定义使用关键字 fun，参数格式为：参数 : 类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;   <span class="comment">// Int 参数，返回值 Int</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表达式作为函数体，返回类型自动推断：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = a + b   <span class="comment">// public 方法则必须明确写出返回类型</span></span><br></pre></td></tr></table></figure><p>无返回值的函数(类似Java中的void)：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Unit</span> &#123; </span><br><span class="line">    print(a + b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是返回 Unit类型，则可以省略(对于public方法也是这样)：</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> &#123; </span><br><span class="line">    print(a + b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可变长参数函数"><a class="markdownIt-Anchor" href="#可变长参数函数"></a> 可变长参数函数</h4><p>函数的变长参数可以用 <strong>vararg</strong> 关键字进行标识：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">vars</span><span class="params">(<span class="keyword">vararg</span> v:<span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(vt <span class="keyword">in</span> v)&#123;</span><br><span class="line">        print(vt)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    vars(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)  <span class="comment">// 输出12345</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lambda匿名函数"><a class="markdownIt-Anchor" href="#lambda匿名函数"></a> lambda(匿名函数)</h4><p>lambda表达式使用实例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> sumLambda: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = &#123;x,y -&gt; x+y&#125;</span><br><span class="line">    println(sumLambda(<span class="number">1</span>,<span class="number">2</span>))  <span class="comment">// 输出 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="null检查机制"><a class="markdownIt-Anchor" href="#null检查机制"></a> NULL检查机制</h3><p>Kotlin的空安全设计对于声明可为空的参数，在使用时要进行空判断处理，有两种处理方式，字段后加!!像Java一样抛出空异常，另一种字段后加?可不做处理返回值为 null或配合?:做空判断处理</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型后面加?表示可为空</span></span><br><span class="line"><span class="keyword">var</span> age: String? = <span class="string">"23"</span> </span><br><span class="line"><span class="comment">// 不能为空，否则抛出空指针异常</span></span><br><span class="line"><span class="keyword">val</span> ages = age!!.toInt()</span><br><span class="line"><span class="comment">//不做处理返回 null</span></span><br><span class="line"><span class="keyword">val</span> ages1 = age?.toInt()</span><br><span class="line"><span class="comment">//age为空返回-1</span></span><br><span class="line"><span class="keyword">val</span> ages2 = age?.toInt() ?: <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>当一个引用可能为 null 值时, 对应的类型声明必须明确地标记为可为 null。</p><p>当 str 中的字符串内容不是一个整数时, 返回 null:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseInt</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kotlin-基本数据类型"><a class="markdownIt-Anchor" href="#kotlin-基本数据类型"></a> Kotlin 基本数据类型</h2><p>Kotlin 的基本数值类型包括 Byte、Short、Int、Long、Float、Double 等。不同于 Java 的是，字符不属于数值类型，是一个独立的数据类型。</p><p><strong>Kotlin 中没有基础数据类型，只有封装的数字类型</strong>。你每定义的一个变量，其实 Kotlin 帮你封装了一个对象，这样可以保证不会出现空指针。数字类型也一样，所以在比较两个数字的时候，就有比较数据大小和比较两个对象是否相同的区别了。</p><p>在 Kotlin 中，<u>三个等号 === 表示比较对象地址，两个 == 表示比较两个值大小</u>。</p><ul><li><code>var x = 1..16</code>:  [1,16]</li><li><code>var x = 1 until 16</code>: [1, 16)</li></ul><h3 id="变量和常量"><a class="markdownIt-Anchor" href="#变量和常量"></a> 变量和常量</h3><p>可变变量定义：var 关键字</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &lt;标识符&gt; : &lt;类型&gt; = &lt;初始化值&gt;</span><br><span class="line"><span class="keyword">val</span> &lt;标识符&gt; : &lt;类型&gt; = &lt;初始化值&gt;</span><br></pre></td></tr></table></figure><h3 id="字符串模板"><a class="markdownIt-Anchor" href="#字符串模板"></a> 字符串模板</h3><ul><li><code>$</code> 表示一个变量名或者变量值</li><li><code>$varName</code>表示变量值</li><li><code>${varName.fun()}</code>表示变量的方法返回值:</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span><span class="comment">// 模板中的简单名称：val s1 = "a is $a" a = 2// 模板中的任意表达式：val s2 = "$&#123;s1.replace("is", "was")&#125;, but now is $a"</span></span><br></pre></td></tr></table></figure><h2 id="kotlin-条件控制"><a class="markdownIt-Anchor" href="#kotlin-条件控制"></a> <a href="https://www.runoob.com/kotlin/kotlin-condition-control.html" target="_blank" rel="noopener">Kotlin 条件控制</a></h2><h2 id="kotlin-循环控制"><a class="markdownIt-Anchor" href="#kotlin-循环控制"></a> Kotlin 循环控制</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对任何提供迭代器（iterator）的**对象**进行遍历for (item in collection) print(item)// 通过**索引**遍历一个数组或者一个 listfor (i in array.indices) &#123;    print(array[i])&#125;// 索引+值，相当于Python中的enumeratefor ((index, value) in array.withIndex()) &#123;    println("the element at $index is $value")&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while循环while( 布尔表达式 ) &#123;  //循环内容&#125;// do循环do &#123;       //代码语句&#125;while(布尔表达式);</span></span><br></pre></td></tr></table></figure><h3 id="返回和跳转"><a class="markdownIt-Anchor" href="#返回和跳转"></a> 返回和跳转</h3><p>Kotlin 有三种结构化跳转表达式：</p><ul><li><em>return</em>。默认从最直接包围它的函数或者匿名函数返回。</li><li><em>break</em>。终止最直接包围它的循环。</li><li><em>continue</em>。继续下一次最直接包围它的循环。</li></ul><h3 id="break-和-continue-的跳转标签"><a class="markdownIt-Anchor" href="#break-和-continue-的跳转标签"></a> Break 和 Continue 的跳转标签</h3><p>在 Kotlin 中任何表达式都可以用标签（label）来标记。 标签的格式为<code>标识符+跟 @</code>，例如：abc@、fooBar@都是有效的标签。 要为一个表达式加标签，我们只要在其前加标签即可</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">loop@</span> <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span>) &#123;    <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span>) &#123;        <span class="keyword">if</span> (……) <span class="keyword">break</span><span class="symbol">@loop</span>    &#125;&#125;</span><br></pre></td></tr></table></figure><p>标签限制使得 break 跳转到刚好位于该标签指定循环的后面执行点。 continue 继续标签指定的循环的下一次迭代。</p><h4 id="标签处返回"><a class="markdownIt-Anchor" href="#标签处返回"></a> 标签处返回</h4><p>Kotlin 有函数字面量、局部函数和对象表达式。因此 Kotlin 的函数可以被嵌套。 标签限制的 return 允许我们从外层函数返回。 <strong>标签处返回的最重要的一个用途就是从 lambda 表达式中返回</strong>。回想一下我们这么写的时候：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;    ints.forEach &#123;        <span class="keyword">if</span> (it == <span class="number">0</span>) <span class="keyword">return</span>        print(it)    &#125;&#125;</span><br></pre></td></tr></table></figure><p>这个 return 表达式从最直接包围它的函数即 foo 中返回。 （注意，这种非局部的返回只支持传给内联函数的 lambda 表达式。） 如果我们需要从 lambda 表达式中返回，我们必须给它加标签并用以限制 return。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;    ints.forEach <span class="symbol">lit@</span> &#123;        <span class="keyword">if</span> (it == <span class="number">0</span>) <span class="keyword">return</span><span class="symbol">@lit</span>        print(it)    &#125;&#125;</span><br></pre></td></tr></table></figure><p>现在，它只会从 lambda 表达式中返回。通常情况下使用隐式标签更方便。 该标签与接受该 lambda 的函数同名。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;    ints.forEach &#123;        <span class="keyword">if</span> (it == <span class="number">0</span>) <span class="keyword">return</span><span class="symbol">@forEach</span>        print(it)    &#125;&#125;</span><br></pre></td></tr></table></figure><p>或者，我们用一个匿名函数替代 lambda 表达式。 匿名函数内部的 return 语句将从该匿名函数自身返回</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;    ints.forEach(<span class="function"><span class="title">fun</span><span class="params">(value: <span class="type">Int</span>)</span></span> &#123;        <span class="keyword">if</span> (value == <span class="number">0</span>) <span class="keyword">return</span>        print(value)    &#125;)&#125;</span><br></pre></td></tr></table></figure><p>当要返一个回值的时候，解析器优先选用标签限制的 return，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return@a 1</span><br></pre></td></tr></table></figure><p>意为&quot;从标签 @a 返回 1&quot;，而不是&quot;返回一个标签标注的表达式 (@a 1)&quot;。</p><h2 id="kotlin-类和对象"><a class="markdownIt-Anchor" href="#kotlin-类和对象"></a> Kotlin 类和对象</h2><h3 id="类的定义"><a class="markdownIt-Anchor" href="#类的定义"></a> 类的定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runoob</span> <span class="keyword">constructor</span></span>(name: String) &#123;    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">"Foo"</span>) &#125; <span class="comment">// 成员函数    var url: String = ……            // 次构造函数    constructor (name: String, alexa: Int) : this(name) &#123;        println("Alexa 排名 $alexa")    &#125;    var lastName: String = "zhang"        get() = field.toUpperCase()   // 将变量赋值后转换为大写        set    var no: Int = 100        get() = field                // 后端变量        set(value) &#123;            if (value &lt; 10) &#123;       // 如果传入的值小于 10 返回该值                field = value            &#125; else &#123;                field = -1         // 如果传入的值大于等于 10 返回 -1            &#125;        &#125;    var heiht: Float = 145.4f        private set    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="对象的声明"><a class="markdownIt-Anchor" href="#对象的声明"></a> 对象的声明</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> site = Runoob() <span class="comment">// Kotlin 中没有 new 关键字site.name           // 使用 . 号来引用site.url</span></span><br></pre></td></tr></table></figure><h3 id="构造函数"><a class="markdownIt-Anchor" href="#构造函数"></a> 构造函数</h3><p>Koltin 中的类可以有一个 主构造器，以及一个或多个次构造器，主构造器是类头部的一部分，位于类名称之后:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">constructor</span></span>(firstName: String) &#123;    init &#123;        println(<span class="string">"FirstName is <span class="variable">$firstName</span>"</span>)    &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果主构造器没有任何注解，也没有任何可见度修饰符，那么constructor关键字可以省略。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(firstName: String) &#123;&#125;</span><br></pre></td></tr></table></figure><p>次构造函数</p><p>类也可以有二级构造函数，需要加前缀 constructor:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;     constructor(parent: Person) &#123;        parent.children.add(this)     &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果类有主构造函数，每个次构造函数都要，或直接或间接通过另一个次构造函数代理主构造函数。在同一个类中代理另一个构造函数使用 this 关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Person(val name: String) &#123;    constructor (name: String, age:Int) : this(name) &#123;        // 初始化...    &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果一个非抽象类没有声明构造函数(主构造函数或次构造函数)，它会产生一个没有参数的构造函数。构造函数是 public 。如果你不想你的类有公共的构造函数，你就得声明一个空的主构造函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class DontCreateMe private constructor () &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="getter-和-setter"><a class="markdownIt-Anchor" href="#getter-和-setter"></a> getter 和 setter</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &lt;propertyName&gt;[: &lt;PropertyType&gt;] [= &lt;property_initializer&gt;]    [&lt;getter&gt;]    [&lt;setter&gt;]<span class="comment">// var变量可设置getter 和 setter, 都是可选// 如果属性类型可以从初始化语句或者类的成员函数中推断出来，那就可以省去类型，val不允许设置setter函数，因为它是只读的。var allByDefault: Int? // 错误: 需要一个初始化语句, 默认实现了 getter 和 setter 方法var initialized = 1    // 类型为 Int, 默认实现了 getter 和 setterval simple: Int?       // 类型为 Int ，默认实现 getter ，但必须在构造函数中初始化val inferredType = 1   // 类型为 Int 类型,默认实现 getter</span></span><br></pre></td></tr></table></figure><h3 id="抽象类"><a class="markdownIt-Anchor" href="#抽象类"></a> 抽象类</h3><p>抽象是面向对象编程的特征之一，类本身，或类中的部分成员，都可以声明为abstract的。抽象成员在类中不存在具体的实现。</p><p>注意：无需对抽象类或抽象成员标注open注解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open class Base &#123;    open fun f() &#123;&#125;&#125;abstract class Derived : Base() &#123;    override abstract fun f()&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套类"><a class="markdownIt-Anchor" href="#嵌套类"></a> 嵌套类</h3><p>我们可以把类嵌套在其他类中，看以下实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Outer &#123;                  // 外部类    private val bar: Int = 1    class Nested &#123;             // 嵌套类        fun foo() = 2    &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="内部类"><a class="markdownIt-Anchor" href="#内部类"></a> 内部类</h4><p>内部类使用 inner 关键字来表示。</p><p>内部类会带有一个对外部类的对象的引用，所以内部类可以访问外部类成员属性和成员函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;    <span class="keyword">private</span> <span class="keyword">val</span> bar: <span class="built_in">Int</span> = <span class="number">1</span>    <span class="keyword">var</span> v = <span class="string">"成员属性"</span>    <span class="comment">/**嵌套内部类**/</span>    inner <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;        <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = bar  <span class="comment">// 访问外部类成员        fun innerTest() &#123;            var o = this@Outer //获取外部类的成员变量            println("内部类可以引用外部类的成员，例如：" + o.v)        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="匿名内部类"><a class="markdownIt-Anchor" href="#匿名内部类"></a> 匿名内部类</h4><p>使用对象表达式来创建匿名内部类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;    <span class="keyword">var</span> v = <span class="string">"成员属性"</span>    <span class="function"><span class="keyword">fun</span> <span class="title">setInterFace</span><span class="params">(test: <span class="type">TestInterFace</span>)</span></span> &#123;        test.test()    &#125;&#125;<span class="comment">/** * 定义接口 */</span><span class="class"><span class="keyword">interface</span> <span class="title">TestInterFace</span> </span>&#123;    <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span>&#125;<span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;    <span class="keyword">var</span> test = Test()    <span class="comment">/**     * 采用对象表达式来创建接口对象，即匿名内部类的实例。     */</span>    test.setInterFace(<span class="keyword">object</span> : TestInterFace &#123;        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;            println(<span class="string">"对象表达式创建匿名内部类的实例"</span>)        &#125;    &#125;)&#125;</span><br></pre></td></tr></table></figure><h3 id="类的修饰符"><a class="markdownIt-Anchor" href="#类的修饰符"></a> 类的修饰符</h3><p>类的修饰符包括 classModifier 和_accessModifier_:</p><ul><li><p>classModifier: 类属性修饰符，标示类本身特性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abstract    // 抽象类  final       // 类不可继承，默认属性enum        // 枚举类open        // 类可继承，类默认是final的annotation  // 注解类</span><br></pre></td></tr></table></figure></li><li><p>accessModifier: 访问权限修饰符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private    // 仅在同一个文件中可见protected  // 同一个文件中或子类可见public     // 所有调用的地方都可见internal   // 同一个模块中可见</span><br></pre></td></tr></table></figure></li></ul><h2 id="kotlin-继承"><a class="markdownIt-Anchor" href="#kotlin-继承"></a> Kotlin 继承</h2><p>Kotlin 中所有类都继承该 Any 类，它是所有类的超类，对于没有超类型声明的类是默认超类：</p><p>Any 默认提供了三个函数：</p><ul><li>equals()</li><li>hashCode()</li><li>toString()</li></ul><p>注意：Any 不是 java.lang.Object。</p><p>如果一个类要被继承，可以使用 open 关键字进行修饰。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>(p: <span class="built_in">Int</span>)           <span class="comment">// 定义基类class Derived(p: Int) : Base(p)</span></span><br></pre></td></tr></table></figure><h2 id="构造函数-2"><a class="markdownIt-Anchor" href="#构造函数-2"></a> 构造函数</h2><h3 id="子类有主构造函数"><a class="markdownIt-Anchor" href="#子类有主构造函数"></a> 子类有主构造函数</h3><p>如果子类有主构造函数， 则基类必须在主构造函数中立即初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open class Person(var name : String, var age : Int)&#123;// 基类&#125;class Student(name : String, age : Int, var no : String, var score : Int) : Person(name, age) &#123;&#125;// 测试fun main(args: Array&lt;String&gt;) &#123;    val s =  Student(&quot;Runoob&quot;, 18, &quot;S12346&quot;, 89)    println(&quot;学生名： $&#123;s.name&#125;&quot;)    println(&quot;年龄： $&#123;s.age&#125;&quot;)    println(&quot;学生号： $&#123;s.no&#125;&quot;)    println(&quot;成绩： $&#123;s.score&#125;&quot;)&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">学生名： Runoob年龄： 18学生号： S12346成绩： 89</span><br></pre></td></tr></table></figure><h3 id="子类没有主构造函数"><a class="markdownIt-Anchor" href="#子类没有主构造函数"></a> 子类没有主构造函数</h3><p>如果子类没有主构造函数，则必须在每一个二级构造函数中用 super 关键字初始化基类，或者在代理另一个构造函数。初始化基类时，可以调用基类的不同构造方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> : <span class="type">Person &#123;    constructor</span></span>(ctx: Context) : <span class="keyword">super</span>(ctx) &#123;    &#125;     <span class="keyword">constructor</span>(ctx: Context, attrs: AttributeSet) : <span class="keyword">super</span>(ctx,attrs) &#123;    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="重写"><a class="markdownIt-Anchor" href="#重写"></a> 重写</h3><p>在基类中，使用fun声明函数时，此函数默认为final修饰，不能被子类重写。如果允许子类重写该函数，那么就要手动添加 open 修饰它, 子类重写方法使用 override 关键词：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**用户基类**/</span><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">study</span><span class="params">()</span></span>&#123;       <span class="comment">// 允许子类重写        println("我毕业了")    &#125;&#125;/**子类继承 Person 类**/class Student : Person() &#123;    override fun study()&#123;    // 重写方法        println("我在读大学")    &#125;&#125;fun main(args: Array&lt;String&gt;) &#123;    val s =  Student()    s.study();&#125;</span></span><br></pre></td></tr></table></figure><p>如果有多个相同的方法（继承或者实现自其他类，如A、B类），则必须要重写该方法，使用super范型去选择性地调用父类的实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open class A &#123;    open fun f () &#123; print(&quot;A&quot;) &#125;    fun a() &#123; print(&quot;a&quot;) &#125;&#125;interface B &#123;    fun f() &#123; print(&quot;B&quot;) &#125; //接口的成员变量默认是 open 的    fun b() &#123; print(&quot;b&quot;) &#125;&#125;class C() : A() , B&#123;    override fun f() &#123;        super&lt;A&gt;.f()//调用 A.f()        super&lt;B&gt;.f()//调用 B.f()    &#125;&#125;fun main(args: Array&lt;String&gt;) &#123;    val c =  C()    c.f();&#125;</span><br></pre></td></tr></table></figure><p>C 继承自 a() 或 b(), C 不仅可以从 A 或则 B 中继承函数，而且 C 可以继承 A()、B() 中共有的函数。此时该函数在中只有一个实现，为了消除歧义，该函数必须调用A()和B()中该函数的实现，并提供自己的实现。</p><p>输出结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AB</span><br></pre></td></tr></table></figure><h3 id="属性重写"><a class="markdownIt-Anchor" href="#属性重写"></a> 属性重写</h3><p>属性重写使用 override 关键字，属性必须具有兼容类型，每一个声明的属性都可以通过初始化程序或者getter方法被重写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open class Foo &#123;    open val x: Int get &#123; …… &#125;&#125;class Bar1 : Foo() &#123;    override val x: Int = ……&#125;</span><br></pre></td></tr></table></figure><p>注：可以用一个var属性重写一个val属性，但是反过来不行。</p><h2 id="kotlin-接口"><a class="markdownIt-Anchor" href="#kotlin-接口"></a> Kotlin 接口</h2><h3 id="接口定义"><a class="markdownIt-Anchor" href="#接口定义"></a> 接口定义</h3><p>Kotlin 接口与 Java 8 类似，使用 interface 关键字定义接口，允许方法有默认实现：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span>    <span class="comment">// 未实现    fun foo() &#123;  //已实现      // 可选的方法体      println("foo")    &#125;    // 接口中的属性只能是抽象的，不允许初始化值，接口不会保存属性值，实现接口时，必须重写属性：    var name:String //name 属性, 抽象的&#125;</span></span><br></pre></td></tr></table></figure><h3 id="实现接口"><a class="markdownIt-Anchor" href="#实现接口"></a> 实现接口</h3><p>一个类或者对象可以实现一个或多个接口。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;    override fun bar</span></span>() &#123;        <span class="comment">// 方法体    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="kotlin-扩展"><a class="markdownIt-Anchor" href="#kotlin-扩展"></a> Kotlin 扩展</h2><blockquote><p>Kotlin 可以对一个类的属性和方法进行扩展，且不需要继承或使用 Decorator 模式。</p><p>扩展是一种静态行为，对被扩展的类代码本身不会造成任何影响。</p></blockquote><h3 id="将函数扩展"><a class="markdownIt-Anchor" href="#将函数扩展"></a> 将函数扩展</h3><p>扩展函数可以在已有类中添加新的方法，不会对原类做修改，扩展函数定义形式：</p><ul><li>receiverType：表示函数的接收者，也就是函数扩展的对象</li><li>functionName：扩展函数的名称</li><li>params：扩展函数的参数，可以为NULL</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数扩展原型fun receiverType.functionName(params)&#123;    body&#125;class User(var name:String)/**扩展函数**/fun User.Print()&#123;    print("用户名 $name")&#125;</span></span><br></pre></td></tr></table></figure><h4 id="扩展函数是静态解析的"><a class="markdownIt-Anchor" href="#扩展函数是静态解析的"></a> 扩展函数是静态解析的</h4><p>扩展函数是<strong>静态解析</strong>的，并不是接收者类型的虚拟成员，在调用扩展函数时，具体被调用的的是哪一个函数，由<strong>调用函数的的对象表达式来决定</strong>的，而不是动态的类型决定的:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Cclass</span> <span class="title">D</span>: <span class="type">C</span></span>()<span class="function"><span class="keyword">fun</span> C.<span class="title">foo</span><span class="params">()</span></span> = <span class="string">"c"</span>   <span class="comment">// 扩展函数 foofun D.foo() = "d"   // 扩展函数 foofun printFoo(c: C) &#123;    println(c.foo())  // 类型是 C 类&#125;fun main(arg:Array&lt;String&gt;)&#123;    printFoo(D())&#125;// 输出c</span></span><br></pre></td></tr></table></figure><p>若扩展函数和成员函数一致，则使用该函数时，会优先使用成员函数。</p><h3 id="扩展一个空对象"><a class="markdownIt-Anchor" href="#扩展一个空对象"></a> 扩展一个空对象</h3><p>在扩展函数内， 可以通过 this 来判断接收者是否为 NULL,这样，即使接收者为 NULL,也可以调用扩展函数。例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun Any?.toString(): String &#123;    if (this == null) return &quot;null&quot;    // 空检测之后，“this”会自动转换为非空类型，所以下面的 toString()    // 解析为 Any 类的成员函数    return toString()&#125;fun main(arg:Array&lt;String&gt;)&#123;    var t = null    println(t.toString())&#125;</span><br></pre></td></tr></table></figure><p>实例执行输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null</span><br></pre></td></tr></table></figure><p>扩展属性允许定义在类或者kotlin文件中，不允许定义在函数中。初始化属性因为属性没有后端字段（backing field），所以不允许被初始化，只能由显式提供的 getter/setter 定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val Foo.bar = 1 // 错误：扩展属性不能有初始化器</span><br></pre></td></tr></table></figure><p>扩展属性只能被声明为 val。</p><h3 id="伴生对象的扩展"><a class="markdownIt-Anchor" href="#伴生对象的扩展"></a> 伴生对象的扩展</h3><blockquote><p>伴生对象内的成员相当于 Java 中的静态成员，其生命周期伴随类始终，在伴生对象内部可以定义变量和函数，这些变量和函数可以直接用类名引用。</p></blockquote><p>如果一个类定义有一个伴生对象 ，你也可以为伴生对象定义扩展函数和属性。</p><p>伴生对象通过&quot;类名.&quot;形式调用伴生对象，伴生对象声明的扩展函数，通过用类名限定符来调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class MyClass &#123;    companion object &#123; &#125;  // 将被称为 &quot;Companion&quot;&#125;fun MyClass.Companion.foo() &#123;    println(&quot;伴随对象的扩展函数&quot;)&#125;val MyClass.Companion.no: Int    get() = 10fun main(args: Array&lt;String&gt;) &#123;    println(&quot;no:$&#123;MyClass.no&#125;&quot;)    MyClass.foo()&#125;</span><br></pre></td></tr></table></figure><p>实例执行输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no:10伴随对象的扩展函数</span><br></pre></td></tr></table></figure><p>注：对于伴生对象扩展函数，有两种形式，一种是在类内扩展，一种是在类外扩展，这两种形式扩展后的函数互不影响（甚至名称都可以相同），即使名称相同，它们也完全是两个不同的函数，并且有以下特点：</p><ul><li>（1）类内扩展的伴随对象函数和类外扩展的伴随对象可以同名，它们是两个独立的函数，互不影响；</li><li>（2）当类内扩展的伴随对象函数和类外扩展的伴随对象同名时，类内的其它函数优先引用类内扩展的伴随对象函数，即对于类内其它成员函数来说，类内扩展屏蔽类外扩展；</li><li>（3）类内扩展的伴随对象函数只能被类内的函数引用，不能被类外的函数和伴随对象内的函数引用；</li><li>（4）类外扩展的伴随对象函数可以被伴随对象内的函数引用，；</li></ul><h2 id="kotlin-对象表达式和对象声明"><a class="markdownIt-Anchor" href="#kotlin-对象表达式和对象声明"></a> Kotlin 对象表达式和对象声明</h2><h2 id="对象表达式"><a class="markdownIt-Anchor" href="#对象表达式"></a> 对象表达式</h2><p>通过对象表达式实现一个匿名内部类的对象用于方法的参数中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.addMouseListener(<span class="keyword">object</span> : MouseAdapter() &#123;    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseClicked</span><span class="params">(e: <span class="type">MouseEvent</span>)</span></span> &#123;        <span class="comment">// ...    &#125;    override fun mouseEntered(e: MouseEvent) &#123;        // ...    &#125;&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="对象声明"><a class="markdownIt-Anchor" href="#对象声明"></a> 对象声明</h3><blockquote><p>Kotlin 使用 object 关键字来声明一个对象。</p><p>Kotlin 中我们可以方便的通过<strong>对象object声明</strong>来获得一个单例。</p></blockquote><p>当对象声明在另一个类的内部时，这个对象并不能通过外部类的实例访问到该对象，而只能通过类名来访问，同样该对象也不能直接访问到外部类的方法和变量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;    <span class="keyword">var</span> name = <span class="string">"菜鸟教程"</span>    <span class="keyword">object</span> DeskTop&#123;        <span class="keyword">var</span> url = <span class="string">"www.runoob.com"</span>        <span class="function"><span class="keyword">fun</span> <span class="title">showName</span><span class="params">()</span></span>&#123;            print&#123;<span class="string">"desk legs <span class="variable">$name</span>"</span>&#125; <span class="comment">// 错误，不能访问到外部类的方法和变量        &#125;    &#125;&#125;fun main(args: Array&lt;String&gt;) &#123;    var site = Site()    site.DeskTop.url // 错误，不能通过外部类的实例访问到该对象    Site.DeskTop.url // 正确, 类似静态内部类，这个类是属于外部类的，而不是某个实例&#125;</span></span><br></pre></td></tr></table></figure><h3 id="伴生对象"><a class="markdownIt-Anchor" href="#伴生对象"></a> 伴生对象</h3><p>类内部的对象声明可以用 <code>companion</code> 关键字标记，这样它就与外部类关联在一起，我们就可以直接通过外部类访问到对象的内部元素。</p><h3 id="对象表达式和对象声明之间的语义差异"><a class="markdownIt-Anchor" href="#对象表达式和对象声明之间的语义差异"></a> 对象表达式和对象声明之间的语义差异</h3><p>对象表达式和对象声明之间有一个重要的语义差别：</p><ul><li>对象表达式是在使用他们的地方立即执行的</li><li>对象声明是在第一次被访问到时延迟初始化的</li><li>伴生对象的初始化是在相应的类被加载（解析）时，与 Java 静态初始化器的语义相匹配</li></ul><h2 id="kotlin-委托"><a class="markdownIt-Anchor" href="#kotlin-委托"></a> kotlin 委托</h2><blockquote><p><a href="https://www.runoob.com/w3cnote/delegate-mode.html" target="_blank" rel="noopener">委托模式</a>是软件设计模式中的一项基本技巧。在委托模式中，有两个对象参与处理同一个请求，接受请求的对象将请求委托给另一个对象来处理。</p><p>Kotlin 直接支持委托模式，更加优雅，简洁。Kotlin 通过关键字 by 实现委托。</p></blockquote><h3 id="类委托"><a class="markdownIt-Anchor" href="#类委托"></a> 类委托</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建接口interface Base &#123;       fun print()&#125;// 实现此接口的被委托的类class BaseImpl(val x: Int) : Base &#123;    override fun print() &#123; print(x) &#125;&#125;// 通过关键字 by 建立委托类class Derived(b: Base) : Base by bfun main(args: Array&lt;String&gt;) &#123;    val b = BaseImpl(10)    Derived(b).print() // 输出 10&#125;</span></span><br></pre></td></tr></table></figure><p>在 Derived 声明中，by 子句表示，将 b 保存在 Derived 的对象实例内部，而且编译器将会生成继承自 Base 接口的所有方法, 并将调用转发给 b。</p><h3 id="属性委托"><a class="markdownIt-Anchor" href="#属性委托"></a> 属性委托</h3><p>属性委托指的是一个<strong>类的某个属性值</strong>不是在类中直接进行定义，而是将<strong>其托付给一个代理类</strong>，从而实现对该类的属性统一管理。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.reflect.KProperty<span class="comment">// 定义包含属性委托的类class Example &#123;    var p: String by Delegate()    // val/var &lt;属性名&gt;: &lt;类型&gt; by &lt;表达式&gt;&#125;// 委托的类class Delegate &#123;    operator fun getValue(thisRef: Any?, property: KProperty&lt;*&gt;): String &#123;        return "$thisRef, 这里委托了 $&#123;property.name&#125; 属性"    &#125;    operator fun setValue(thisRef: Any?, property: KProperty&lt;*&gt;, value: String) &#123;        println("$thisRef 的 $&#123;property.name&#125; 属性赋值为 $value")    &#125;&#125;fun main(args: Array&lt;String&gt;) &#123;    val e = Example()    println(e.p)     // 访问该属性，调用 getValue() 函数    e.p = "Runoob"   // 调用 setValue() 函数    println(e.p)&#125;</span></span><br></pre></td></tr></table></figure><h3 id="标准委托"><a class="markdownIt-Anchor" href="#标准委托"></a> 标准委托</h3><p>Kotlin 的标准库中已经内置了很多工厂方法来实现属性的委托。</p><h4 id="延迟属性-lazy"><a class="markdownIt-Anchor" href="#延迟属性-lazy"></a> 延迟属性 Lazy</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> lazyValue: String <span class="keyword">by</span> lazy &#123;    println(<span class="string">"computed!"</span>)     <span class="comment">// 第一次调用输出，第二次调用不执行    "Hello"&#125;fun main(args: Array&lt;String&gt;) &#123;    println(lazyValue)   // 第一次执行，执行两次输出表达式    println(lazyValue)   // 第二次执行，只输出返回值&#125;/*computed!HelloHello*/</span></span><br></pre></td></tr></table></figure><h4 id="可观察属性-observable"><a class="markdownIt-Anchor" href="#可观察属性-observable"></a> 可观察属性 Observable</h4><blockquote><p>observable 可以用于实现观察者模式。</p><p>Delegates.observable() 函数接受两个参数: 第一个是初始化值, 第二个是属性值变化事件的响应器(handler)。</p><p>在属性赋值后会执行事件的响应器(handler)，它有三个参数：被赋值的属性、旧值和新值：</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.properties.Delegatesclass User &#123;    <span class="keyword">var</span> name: String <span class="keyword">by</span> Delegates.observable(<span class="string">"初始值"</span>) &#123;        prop, old, new -&gt;        println(<span class="string">"旧值：<span class="variable">$old</span> -&gt; 新值：<span class="variable">$new</span>"</span>)    &#125;&#125;<span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;    <span class="keyword">val</span> user = User()    user.name = <span class="string">"第一次赋值"</span>    user.name = <span class="string">"第二次赋值"</span>&#125;<span class="comment">/*旧值：初始值 -&gt; 新值：第一次赋值旧值：第一次赋值 -&gt; 新值：第二次赋值*/</span></span><br></pre></td></tr></table></figure><h4 id="把属性储存在映射中"><a class="markdownIt-Anchor" href="#把属性储存在映射中"></a> 把属性储存在映射中</h4><h4 id="not-null"><a class="markdownIt-Anchor" href="#not-null"></a> Not Null</h4><p>notNull 适用于那些无法在初始化阶段就确定属性值的场合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Foo &#123;    var notNullBar: String by Delegates.notNull&lt;String&gt;()&#125;foo.notNullBar = &quot;bar&quot;println(foo.notNullBar)</span><br></pre></td></tr></table></figure><p>需要注意，如果属性在赋值前就被访问的话则会抛出异常。</p><h4 id="局部委托属性"><a class="markdownIt-Anchor" href="#局部委托属性"></a> 局部委托属性</h4><p>你可以将局部变量声明为委托属性。 例如，你可以使一个局部变量惰性初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun example(computeFoo: () -&gt; Foo) &#123;    val memoizedFoo by lazy(computeFoo)    if (someCondition &amp;&amp; memoizedFoo.isValid()) &#123;        memoizedFoo.doSomething()    &#125;&#125;</span><br></pre></td></tr></table></figure><p>memoizedFoo 变量只会在第一次访问时计算。 如果 someCondition 失败，那么该变量根本不会计算。</p><h3 id="属性委托要求"><a class="markdownIt-Anchor" href="#属性委托要求"></a> 属性委托要求</h3><p>对于只读属性(也就是说val属性), 它的委托必须提供一个名为getValue()的函数。该函数接受以下参数：</p><ul><li>thisRef —— 必须与属性所有者类型（对于扩展属性——指被扩展的类型）相同或者是它的超类型</li><li>property —— 必须是类型 KProperty&lt;*&gt; 或其超类型</li></ul><p>这个函数必须返回与属性相同的类型（或其子类型）。</p><p>对于一个值可变(mutable)属性(也就是说,var 属性),除 getValue()函数之外,它的委托还必须 另外再提供一个名为setValue()的函数, 这个函数接受以下参数:</p><p>property —— 必须是类型 KProperty&lt;*&gt; 或其超类型new value —— 必须和属性同类型或者是它的超类型。</p><h3 id="提供委托"><a class="markdownIt-Anchor" href="#提供委托"></a> 提供委托</h3><h1 id="附"><a class="markdownIt-Anchor" href="#附"></a> 附：</h1><h2 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> Kotlin</h2><h3 id="构造函数-3"><a class="markdownIt-Anchor" href="#构造函数-3"></a> 构造函数</h3><p>Kotlin 中构造函数分为<strong>主构造函数</strong>和**次构造函数，**主构造函数只能有一个，次构造函数个数不限制，可以有一个或者多个。</p><ul><li>主构造函数就是类后的小括号中定义的，会定义类有哪些数据成员并初始化。——然而那一些初始化的方法该怎么调用呢==&gt; 在init{}中编写需要在主构造函数中完成的业务</li><li>而次构造函数需要用constructor关键字来声明。</li></ul><p>基础概念：</p><ul><li><a href="https://www.jianshu.com/p/fc54d2241ba7" target="_blank" rel="noopener">Kotlin 构造函数、继承</a></li></ul><p>进阶：</p><ul><li><a href="https://www.codeleading.com/article/33773156838/" target="_blank" rel="noopener">kotlin的主构造函数, 次构造函数, init代码块, 伴生对象的执行顺序, 特点, 使用场景, 及跟java的比较</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Person(var name: String, var age: Int) &#123;</span><br><span class="line">    <span class="comment">// 次构造函数中传入了主构造函数中没有的数据成员的时候，需要在这里定义</span></span><br><span class="line">    var sex: Boolean?=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    init &#123;</span><br><span class="line">        println(<span class="string">"main constructor init $&#123;name&#125;"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor(name:String, age: Int, sexy: Boolean): <span class="keyword">this</span>(name, age)&#123;</span><br><span class="line">        println(<span class="string">"constructor"</span>)</span><br><span class="line">        <span class="keyword">this</span>.sex = sexy</span><br><span class="line">        println(<span class="keyword">this</span>.sex)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataClassTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function">fun <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        val person = Person(name = <span class="string">"a"</span>, age = <span class="number">12</span>)</span><br><span class="line">        println(person.age)</span><br><span class="line">        println(<span class="string">"________________________"</span>)</span><br><span class="line">        val person2 = Person(name = <span class="string">"b"</span>, age = <span class="number">14</span>, sexy = <span class="keyword">false</span>)</span><br><span class="line">        println(person2.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">main constructor init a</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">________________________</span></span><br><span class="line"><span class="comment">main constructor init b</span></span><br><span class="line"><span class="comment">constructor</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li>默认情况下class是有不带参数的主构造函数， 当class具有有参的构造函数时， 无参的就会失效， 除非参数全有默认值。如果在定义了上述构造函数的情况下， 输入Person(), idea会提示报错，并提示如下Person类有如下构造函数。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/309640/1628758129977-581aaa97-2f71-4e17-91f8-a1fb3765b529.png" alt="img"></p><p>但如果将主构造函数的参数全部设置为null，即<code>class Person(var name: String? =null, var age: Int? = null)</code>， 那么就可以直接创建不带参数的对象了, <code>var person0 = Person();</code></p><ol><li><p>主构造函数的参数如果使用了var或val修饰符，就相当于在类中声明了对应名称的属性。</p></li><li><p>Kotlin 中规定，当一个类既有主构造函数又有次构造函数时，所有次构造函数都<strong>必须使用<strong><strong>this</strong></strong>关键字直接或间接的调用主构造函数</strong>（间接指多层调用次构造函数）：</p></li><li><p>调用顺序:  ( 伴生对象成员变量初始化 -&gt; 伴生对象的init )-&gt; ( 主构造函数的参数赋值  -&gt; init 代码块 ) -&gt; 次构造函数代码块</p></li></ol><h4 id="throwable-kotlin-demo"><a class="markdownIt-Anchor" href="#throwable-kotlin-demo"></a> Throwable kotlin demo:</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Throwable</span></span>(<span class="keyword">open</span> <span class="keyword">val</span> message: String?, <span class="keyword">open</span> <span class="keyword">val</span> cause: Throwable?) &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(message: String?) : <span class="keyword">this</span>(message, <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(cause: Throwable?) : <span class="keyword">this</span>(cause?.toString(), cause)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() : <span class="keyword">this</span>(<span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="data-class数据类"><a class="markdownIt-Anchor" href="#data-class数据类"></a> data class数据类</h3><p>在 Kotlin 中，不需要自己动手去写一个 JavaBean，可以直接使用 DataClass，使用 DataClass 编译器会默默地帮我们生成以下函数</p><ul><li>equals()</li><li>hashCode()</li><li>toString()</li><li>componentN()</li><li>copy()</li></ul><p>定义一个： <code>dataclassCountry(var id: Int,var name: String,var continent: String)</code></p><p>如何申明一个简单的数据类？ 有一下几点要求：</p><ul><li><p>主构造函数必须要<strong>至少有一个参数</strong></p></li><li><p>在主构造函数中的所有参数必须被标记为val或者var （var就表示可读写，val就表示只读）</p></li><li><p>数据类不能有以下修饰符：abstract，inner ,open, sealed  ==》 数据类本身是不能被继承的 final</p></li><li><p>data class只能实现接口（Kotlin1.1以前的规则），现在也可以继承其它类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document</span>(<span class="string">"daf_FiledDetail"</span>)</span><br><span class="line"><span class="meta">@ApiModel</span>(<span class="string">"字段类型表"</span>)</span><br><span class="line"><span class="function">data class <span class="title">FiledDetail</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @ApiModelProperty(<span class="string">"字段名称"</span>)</span></span></span><br><span class="line"><span class="function">     val name: String,</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    @<span class="title">ApiModelProperty</span><span class="params">(<span class="string">"字段类型"</span>)</span></span></span><br><span class="line"><span class="function">     val type: FieldTypeEnum,</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    @<span class="title">ApiModelProperty</span><span class="params">(<span class="string">"选项"</span>)</span></span></span><br><span class="line"><span class="function">     val choices: String,</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    @<span class="title">ApiModelProperty</span><span class="params">(<span class="string">"字段分组"</span>)</span></span></span><br><span class="line"><span class="function">     val fieldGroup: String</span></span><br><span class="line"><span class="function">): <span class="title">MongoTableBean</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">class DataClassTest </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function">fun <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        val filedDetail = FiledDetail(<span class="string">"name"</span>, FieldTypeEnum.ADMINISTRATIVE, <span class="string">"YES"</span>, <span class="string">"NO"</span>)</span><br><span class="line">        println(filedDetail)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化"><a class="markdownIt-Anchor" href="#序列化"></a> 序列化</h2><ul><li>序列化和反序列化其实就是方便传输对象.</li><li>这里是需要在几个系统 Service 里通过 Bundle 传递数据.</li><li>Parcelable 全部都在内存,效率高,<s>需要实现部分多,使用繁琐.</s>(在 kotlin 不成立)</li><li>Serializable 实现简单,但是是基于反射实现的,故有性能损失,但是是最通用的.</li></ul><h1 id="kotlin-中class-data-class-object-companion-object区别"><a class="markdownIt-Anchor" href="#kotlin-中class-data-class-object-companion-object区别"></a> Kotlin 中class、data class、object、companion object区别</h1><h3 id="data-class"><a class="markdownIt-Anchor" href="#data-class"></a> data class：</h3><p>kotlin中的数据类，只保存一些数据字段，类似于java bean，oc中的model。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">yourClassName</span></span>(<span class="comment">// 这边是小括号</span></span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">val</span> age: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="keyword">val</span> sex: <span class="built_in">Boolean</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="object"><a class="markdownIt-Anchor" href="#object"></a> object：</h3><p>kotlin中使用&quot;<strong>object</strong>&quot;修饰静态类，可用于util工具类中。</p><ul><li>对象声明（object declaration）<ul><li>将类的声明和定义该类的单例对象结合在一起（即通过object就实现了单例模式）</li><li>对象声明中不能包含构造器（包括主构造器和次级构造器）</li></ul></li><li>伴生对象（companion object）</li><li>对象表达式（object expression）</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> UserUtil &#123;</span><br><span class="line">    <span class="keyword">val</span> guoji = <span class="string">"中国"</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"小红"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伴生对象companion-object"><a class="markdownIt-Anchor" href="#伴生对象companion-object"></a> 伴生对象（companion object）</h3><blockquote><p>因为在kotlin中是没有static关键字的，也就意味着没有静态方法和静态成员。那么在kotlin中如果想要表达这种概念，可以使用包级别函数（package-level funcation）和伴生对象（companion object）。</p></blockquote><p>伴生对象语法形式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 伴生对象名可以省略，默认为Companion</span></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> 伴生对象名 &#123;</span><br><span class="line">        <span class="comment">// define field and method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>from ： <a href="https://www.jianshu.com/p/1a0cf2ca87cc" target="_blank" rel="noopener">Kotlin：object关键字总结</a></li></ul><h3 id="相应结果封装类"><a class="markdownIt-Anchor" href="#相应结果封装类"></a> 相应结果封装类：</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sucsoft.dispatch.utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sucsoft.daf.enums.OperationEnum</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mrli</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 结果返回封装类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/8/6 13:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span></span>(<span class="keyword">var</span> <span class="keyword">data</span>: Any? = <span class="literal">null</span>, <span class="keyword">var</span> code: <span class="built_in">Int</span>? = <span class="literal">null</span>, <span class="keyword">var</span> message: String? =<span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">of</span><span class="params">(<span class="keyword">data</span>: <span class="type">Any</span>, code: <span class="type">Int</span>, message: <span class="type">String</span>)</span></span>: Result &#123;</span><br><span class="line">            <span class="keyword">return</span> Result(<span class="keyword">data</span>, code, message)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">make</span><span class="params">(<span class="keyword">data</span>: <span class="type">Any</span>?, op: <span class="type">OperationEnum</span>)</span></span>: Result &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">if</span> (<span class="literal">null</span> == <span class="keyword">data</span>) <span class="keyword">this</span>.err(op.cn) <span class="keyword">else</span> <span class="keyword">this</span>.ok(<span class="keyword">data</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">ok</span><span class="params">(<span class="keyword">data</span>: <span class="type">Any</span>)</span></span>: Result &#123;</span><br><span class="line">            <span class="keyword">return</span> of(<span class="keyword">data</span>, <span class="number">200</span>, OperationEnum.SUCCESS.cn)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">err</span><span class="params">(msg: <span class="type">String</span>)</span></span>: Result &#123;</span><br><span class="line">            <span class="keyword">return</span> of(&#123;&#125;, <span class="number">500</span>, msg)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">badRequest</span><span class="params">()</span></span>: Result &#123;</span><br><span class="line">            <span class="keyword">return</span> of(&#123;&#125;, <span class="number">400</span>, OperationEnum.PARAM_ERROR.cn)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">serverError</span><span class="params">()</span></span>: Result &#123;</span><br><span class="line">            <span class="keyword">return</span> of(&#123;&#125;, <span class="number">500</span>, OperationEnum.SERVER_ERROR.cn)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="踩坑"><a class="markdownIt-Anchor" href="#踩坑"></a> 踩坑：</h3><ul><li>swagger里面不填时，对应传的值为空， 因此需要对应接口的参数类型上是否能接受空?, （即比在写swagger（required）上比java对写个对类型的限制），</li></ul><p><img src="/2021/09/13/学点Kotlin/C:%5CUsers%5Cmrli%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210817152123083.png" alt="image-20210817152123083"></p><ul><li>data class 中字段的定义， 如果需要默认值则<code>sortNum : Int = 0</code>, 而对于String的话，如果是不可为空写成 <code>id :String,</code>即可，如果为空则定义为<code>id: String?</code>， 至于之后的默认值还是根据需求来看。</li></ul><h3 id="和的区分"><a class="markdownIt-Anchor" href="#和的区分"></a> ?. 和?:的区分</h3><p>code1?.code2   翻译为 ：if code1 Not Null 执行 code2;<br>code1?:code2   翻译为：if code1 Null 执行 code2;<br>?. 翻译为： <code>If Not Null</code><br>?: 翻译为： <code>If Null</code></p><p>注意点：</p><p>【?.】后面的方法是前者的相关调用<br>【?:】后面的方法与前者的无关调用</p><p>?.表示当前对象如果为空则不执行，<br>!!.表示当前对象如果为空也执行，然后会抛出空异常</p><h2 id="open"><a class="markdownIt-Anchor" href="#open"></a> open</h2><p>在 Java 中，一个类除了被手动加上 <strong>final</strong> 关键字以外，它总能能被任意一个类继承并重写它的非 final 方法，这就可能会导致某些子类出现不符合其父类的设计初衷，特别是在多人协作的开发环境下。</p><p>这类问题被 Kotlin 语言设计者注意到了并切引起了他们的重视，因此，在 Kotlin 中的<strong>类和方法默认都是 final 的</strong>，如果要继承或者重写一个<strong>类和其方法</strong>时，必须将他们都显式地声明为 <strong>open</strong> , 成员变量不需要，会自动认为是open 的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name : String = <span class="string">""</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: String)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">saySomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">"yes"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抛弃-java-改用-kotlin-的六个月后我后悔了"><a class="markdownIt-Anchor" href="#抛弃-java-改用-kotlin-的六个月后我后悔了"></a> <a href="https://blog.csdn.net/csdnnews/article/details/80746096" target="_blank" rel="noopener">抛弃 Java 改用 Kotlin 的六个月后，我后悔了</a>——Kotlin特性有哪些？</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;kotlin-基础语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#kotlin-基础语法&quot;&gt;&lt;/a&gt; Kotlin 基础语法&lt;/h2&gt;
&lt;p&gt;Kotlin 文件以 .kt 为后缀。&lt;/p&gt;
&lt;h3 id=&quot;函数定义&quot;&gt;&lt;a clas
      
    
    </summary>
    
    
      <category term="Kotlin" scheme="https://nymrli.top/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>学习画好架构图</title>
    <link href="https://nymrli.top/2021/08/24/%E5%AD%A6%E4%B9%A0%E7%94%BB%E5%A5%BD%E6%9E%B6%E6%9E%84%E5%9B%BE/"/>
    <id>https://nymrli.top/2021/08/24/学习画好架构图/</id>
    <published>2021-08-24T06:57:11.000Z</published>
    <updated>2022-02-27T15:15:10.449Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一图胜万语，做好一张架构图能让别人一眼就清晰地弄懂程序的功能与依赖，大大降低大家的理解成本和提升沟通效率。但作为新人而言，如何画出要点，提炼出核心概念是个有难度的事。</p></blockquote><h2 id="什么是架构"><a class="markdownIt-Anchor" href="#什么是架构"></a> <strong>什么是架构？</strong></h2><p>架构是结构和愿景，是对系统中的实体以及实体之间的关系所进行的抽象描述，是一系列的决策。</p><p>系统架构是概念的体现，是对物/信息的功能与形式元素之间的对应情况所做的分配，是对元素之间的关系以及元素同周边环境之间的关系所做的定义。</p><h2 id="什么是架构图"><a class="markdownIt-Anchor" href="#什么是架构图"></a> <strong>什么是架构图？</strong></h2><p>系统架构图是为了抽象地表示<u>软件系统</u>的<strong>整体轮廓</strong>和<u>各个组件</u>之间的相互关系和<strong>约束边界</strong>，以及软件系统的物理部署和软件系统的演进方向的<strong>整体视图</strong>。</p><h2 id="架构图的作用"><a class="markdownIt-Anchor" href="#架构图的作用"></a> <strong>架构图的作用</strong></h2><p>要让干系人理解、遵循架构决策，就需要把架构信息传递出去。架构图就是一个很好的载体。那么，画架构图是为了：</p><ul><li>解决沟通障碍</li><li>达成共识</li><li>减少歧义</li></ul><h2 id="架构核心要素"><a class="markdownIt-Anchor" href="#架构核心要素"></a> 架构核心要素</h2><p><img src="/2021/08/24/学习画好架构图/C:%5CUsers%5Cmrli%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210824152422270.png" alt="image-20210824152422270"></p><p>综合上述各种权威定义，软件系统的架构通常需要包含如下四类核心要素：</p><ul><li><strong>元素（elements）</strong>：将系统拆分为一组元素 - 模块、组件、结构体、子系统；</li><li><strong>关系（relationships）</strong>：不同元素之间的关系 - 交互、依赖 、继承、组合、聚合；</li><li><strong>属性（properties）</strong>：每个元素具备的属性 - 名称、职责、接口、实现限制等；</li><li><strong>原理（principles）</strong>：为什么这么设计 - 拆分依据、设计原则、决策原因等。</li></ul><h2 id="架构图分类"><a class="markdownIt-Anchor" href="#架构图分类"></a> <strong>架构图分类</strong></h2><p>搜集了很多资料，分类有很多，有一种比较流行的是4+1视图，分别为场景视图、逻辑视图、物理视图、处理流程视图和开发视图。</p><p>from：<a href="https://blog.csdn.net/wwd0501/article/details/105688895" target="_blank" rel="noopener">如何画好软件项目架构图？</a>， <a href="https://zhuanlan.zhihu.com/p/260068315" target="_blank" rel="noopener">架构制图：工具与方法论</a></p><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><h2 id="五种常见软件架构"><a class="markdownIt-Anchor" href="#五种常见软件架构"></a> <a href="https://www.cnblogs.com/doit8791/p/9343826.html" target="_blank" rel="noopener">五种常见软件架构</a></h2><ul><li>分层架构</li><li>事件驱动架构</li><li>微核架构</li><li>微服务架构</li><li>云架构</li></ul><h2 id="架构图example"><a class="markdownIt-Anchor" href="#架构图example"></a> 架构图example：</h2><p><img src="/2021/08/24/学习画好架构图/C:%5CUsers%5Cmrli%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210824150755684.png" alt="image-20210824150755684"></p><hr><p><img src="https://i.loli.net/2021/08/24/x3g8pz7heaDvTXd.png" alt=""></p><hr><p><img src="https://i.loli.net/2021/08/24/uEUok8KXzWPen4f.png" alt=""></p><h2 id="架构文章"><a class="markdownIt-Anchor" href="#架构文章"></a> 架构文章</h2><ul><li><a href="https://mp.weixin.qq.com/s/NIu95lFJszpXcoIw6h3Lyg" target="_blank" rel="noopener">【超赞】技术架构的战略和战术原则</a></li><li><a href="https://juejin.cn/post/7062662600437268493" target="_blank" rel="noopener">画一手好的架构图是码农进阶的开始</a></li><li><a href="https://mp.weixin.qq.com/s/onk3Vteh-82MgIx_7SRgvA" target="_blank" rel="noopener">[译] 我做基础架构学到的42件事</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一图胜万语，做好一张架构图能让别人一眼就清晰地弄懂程序的功能与依赖，大大降低大家的理解成本和提升沟通效率。但作为新人而言，如何画出要点，提炼出核心概念是个有难度的事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是架构&quot;&gt;&lt;a clas
      
    
    </summary>
    
    
      <category term="福利" scheme="https://nymrli.top/tags/%E7%A6%8F%E5%88%A9/"/>
    
  </entry>
  
  <entry>
    <title>Chrome插件编写-天猫秒杀插件</title>
    <link href="https://nymrli.top/2021/03/03/%E5%A4%A9%E7%8C%AB%E7%A7%92%E6%9D%80%E6%8F%92%E4%BB%B6-Chrome%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/"/>
    <id>https://nymrli.top/2021/03/03/天猫秒杀插件-Chrome插件编写/</id>
    <published>2021-03-03T13:37:15.000Z</published>
    <updated>2021-12-04T14:15:30.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="chrome插件开发"><a class="markdownIt-Anchor" href="#chrome插件开发"></a> chrome插件开发</h1><blockquote><p>借鉴TODO-List：<a href="https://www.w3cschool.cn/kesyi/kesyi-m5uo24rx.html" target="_blank" rel="noopener">Chrome插件开发简要指南</a></p></blockquote><h2 id="文件结构"><a class="markdownIt-Anchor" href="#文件结构"></a> 文件结构</h2><p>在应用商店中下载下来的插件基本上都是以<code>.crx</code>为文件后缀，该文件其实就是一个压缩包（文件夹压缩而来），包括插件所需要的<strong>html</strong>、css、<strong>javascript</strong>、图片资源等等文件。</p><p>其中，</p><ul><li><code>manifest.json</code>是整个插件的功能及文件配置清单，非常重要。</li><li><code>static</code>目录是放置整个插件的静态资源文件的，包括css、js、图片等等资源</li><li><code>template</code>目录是放置整个插件的功能页面模板的。</li><li><code>_locales</code>目录是放置整个插件的国际化语言脚本的。</li></ul><p>一般来说，<strong>清单文件<code>manifest.json</code>文件是必须的</strong>，且必须放在插件开发目录的根目录上。其他的目录都可以自定义。</p><h2 id="弹出窗口和后台页面"><a class="markdownIt-Anchor" href="#弹出窗口和后台页面"></a> 弹出窗口和后台页面</h2><p>弹出窗口一般用于插件和用户的交互，而后台页面一般用于插件本身做一些额外的事情。比如有时候，插件需要联网进行数据同步等操作，这种操作用户是无感知的，所有就要求插件需要有一个后台页面来运行这部分的逻辑。</p><p>其实后台页面还可以分为持久运行的后端页面和事件页面，这里对这两者就不多做说明了，更多的内容可以参阅具体的文档。</p><h2 id="弹出式插件教程todo-list"><a class="markdownIt-Anchor" href="#弹出式插件教程todo-list"></a> 弹出式插件教程TODO-LIST</h2><h3 id="manifestjson"><a class="markdownIt-Anchor" href="#manifestjson"></a> manifest.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"todo-plugin"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.9.0"</span>,</span><br><span class="line">    <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"chrome plugin demo"</span>,</span><br><span class="line">    <span class="attr">"browser_action"</span>: &#123;</span><br><span class="line">        <span class="attr">"default_icon"</span>: <span class="string">"icon.png"</span>,</span><br><span class="line">        <span class="attr">"default_title"</span>: <span class="string">"Todo List"</span>,</span><br><span class="line">        <span class="attr">"default_popup"</span>: <span class="string">"popup.html"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="popuphtml"><a class="markdownIt-Anchor" href="#popuphtml"></a> popup.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        width: 150px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#add-new-item</span> &#123;</span></span><br><span class="line"><span class="undefined">        cursor: pointer;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#CCC</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: none;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.show</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="undefined">        cursor: pointer;</span></span><br><span class="line"><span class="undefined">        margin: 5px 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.item</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">        width: 12px;</span></span><br><span class="line"><span class="undefined">        height: 12px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    input &#123;</span></span><br><span class="line"><span class="undefined">        width: 120px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"add-new-item"</span>&gt;</span>添加新项<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"add-new-item-input"</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"new-item-title"</span> <span class="attr">placeholder</span>=<span class="string">"添加新任务"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"item-list"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="mainjs"><a class="markdownIt-Anchor" href="#mainjs"></a> main.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $ = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> Tasks = &#123;</span><br><span class="line">        show: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            obj.className = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        hide: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            obj.className = <span class="string">'hide'</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        $addNewItem: $(<span class="string">'add-new-item'</span>),</span><br><span class="line">        $addNewItemInput: $(<span class="string">'add-new-item-input'</span>),</span><br><span class="line">        $itemList: $(<span class="string">'item-list'</span>),</span><br><span class="line">        $newItemTitle: $(<span class="string">'new-item-title'</span>),</span><br><span class="line">        init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//打开添加文本框</span></span><br><span class="line">            Tasks.$addNewItem.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                Tasks.show(Tasks.$addNewItemInput).hide(Tasks.$addNewItem);</span><br><span class="line">                Tasks.$newItemTitle.focus();</span><br><span class="line">            &#125;, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//回车添加任务</span></span><br><span class="line">            Tasks.$newItemTitle.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">                <span class="keyword">if</span> (ev.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">                    <span class="comment">//<span class="doctag">TODO:</span>写入本地数据</span></span><br><span class="line">                    <span class="keyword">var</span> task = Tasks.$newItemTitle.value;</span><br><span class="line">                    Tasks.AppendHtml(task);</span><br><span class="line">                    Tasks.$newItemTitle.value = <span class="string">''</span>;</span><br><span class="line">                    Tasks.hide(Tasks.$addNewItemInput).show(Tasks.$addNewItem);</span><br><span class="line">                &#125;</span><br><span class="line">                ev.preventDefault();</span><br><span class="line">            &#125;, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//取消添加</span></span><br><span class="line">            Tasks.$newItemTitle.addEventListener(<span class="string">'blur'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                Tasks.$newItemTitle.value = <span class="string">''</span>;</span><br><span class="line">                Tasks.hide(Tasks.$addNewItemInput).show(Tasks.$addNewItem);</span><br><span class="line">            &#125;, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//TODO 初始化数据，加载本地数据，生成html</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//增加</span></span><br><span class="line">        Add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//TODO</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        Edit: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//TODO</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        Del: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//TODO</span></span><br><span class="line">        &#125;,</span><br><span class="line">        AppendHtml: <span class="function"><span class="keyword">function</span> (<span class="params">title</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">            oDiv.className = <span class="string">'item item-todo'</span>;</span><br><span class="line">            <span class="keyword">var</span> oInput = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">            oInput.type = <span class="string">'checkbox'</span>;</span><br><span class="line">            <span class="keyword">var</span> oTitle = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">            oTitle.innerHTML = title;</span><br><span class="line">            oDiv.appendChild(oInput);</span><br><span class="line">            oDiv.appendChild(oTitle);</span><br><span class="line">            Tasks.$itemList.appendChild(oDiv);</span><br><span class="line">            oDiv.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//TODO</span></span><br><span class="line">            &#125;, <span class="literal">true</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        RemoveHtml: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//TODO</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Tasks.init();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="天猫秒杀插件-tmall_kill"><a class="markdownIt-Anchor" href="#天猫秒杀插件-tmall_kill"></a> 天猫秒杀插件 Tmall_Kill</h1><p>Code Template： <a href="https://link.zhihu.com/?target=https%3A//github.com/cehui0303/Tmall_Tickets" target="_blank" rel="noopener">https://link.zhihu.com/?target=https%3A//github.com/cehui0303/Tmall_Tickets</a></p><p>代码比较简单，实现原理为，打开浏览器后执行插件，JS脚本将会在指定时间点击“结算”按钮，然后发起订单，从而锁定库存抢货。</p><h3 id="mainjs-2"><a class="markdownIt-Anchor" href="#mainjs-2"></a> main.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定时器</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测状态</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkElementState</span>(<span class="params">path,callback</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ele = <span class="built_in">document</span>.querySelector(path);</span><br><span class="line"><span class="keyword">if</span>(ele)&#123;</span><br><span class="line">callback &amp;&amp; callback();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'异步加载元素中....'</span> + path );</span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;checkElementState(path,callback);&#125;,<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结算</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkOut</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'结算开始....'</span>);</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'J_Go'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(btn)&#123;</span><br><span class="line">btn.click();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'结算按钮没找到'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// S1: 1. 点击结算按钮  =&gt;  2. checkElementState()检测结算按钮是否加载出来 --&gt; 3.checkOut()点击结算按钮</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkOutAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">checkElementState(<span class="string">'#J_Go'</span>,checkOut);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// S2: 提交订单</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submitOrder</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'提交订单开始....'</span>);</span><br><span class="line">checkElementState(<span class="string">'.go-btn'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">".go-btn"</span>);</span><br><span class="line"><span class="keyword">if</span>(btn)&#123;</span><br><span class="line">btn.click();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'提交订单按钮没找到'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标时间</span></span><br><span class="line"> <span class="keyword">var</span> dDate = <span class="keyword">new</span> <span class="built_in">Date</span>();  <span class="comment">//10点和20点开抢</span></span><br><span class="line"> <span class="keyword">if</span>( dDate.getHours() &lt; <span class="number">10</span> )&#123;</span><br><span class="line">  dDate.setHours(<span class="number">9</span>,<span class="number">59</span>,<span class="number">59.2</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  dDate.setHours(<span class="number">19</span>,<span class="number">59</span>,<span class="number">59.2</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入时间判断循环</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enterTimeCheckLoop</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> diff = <span class="built_in">Date</span>.parse(dDate) - <span class="built_in">Date</span>.parse(date) ;</span><br><span class="line"><span class="built_in">console</span>.log(diff);</span><br><span class="line"><span class="keyword">if</span>(diff &lt; <span class="number">-90</span> )&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'时间过了！'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(diff &lt; <span class="number">50</span> ) &#123;</span><br><span class="line">callback &amp;&amp; callback();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'时间到了！！！'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; enterTimeCheckLoop(callback);&#125;,<span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//主要函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'############################天猫枪杀脚本############################'</span>);</span><br><span class="line"><span class="keyword">var</span> href = <span class="built_in">window</span>.location.href;</span><br><span class="line"><span class="comment">//结算页面</span></span><br><span class="line"><span class="keyword">if</span>(href.indexOf(<span class="string">'cart.tmall.com'</span>) &gt; <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="comment">//进入时间判断</span></span><br><span class="line">enterTimeCheckLoop( checkOutAsync );</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(href.indexOf(<span class="string">'buy.tmall.com'</span>) &gt; <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="comment">//提交订单页面</span></span><br><span class="line">submitOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>这种理论上是可行的，只不过肯定会有刷新上的问题，效率不及网络请求，但思路依旧是值得学习的，因此借此机会也是学下Chrome插件的编写。</p><h3 id="manifestjson-2"><a class="markdownIt-Anchor" href="#manifestjson-2"></a> manifest.json</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "manifest_version": 2,// manifest文件版本号。Chrome18开始必须为2</span><br><span class="line">  "name": "Tmall-tickets", // crx扩展名称</span><br><span class="line">  "version": "1.0",// 插件版本</span><br><span class="line">  "description": "天猫超市枪杀脚本",</span><br><span class="line">  "browser_action": &#123;// 地址栏右侧图标管理。含图标及弹出页面的设置等</span><br><span class="line">    "default_icon": "icon.png"</span><br><span class="line">  &#125;,</span><br><span class="line">  "content_scripts": [// 指定要向Web页面内注入的脚本。可注入多个css与js。</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"matches"</span>: [<span class="string">"https://chaoshi.detail.tmall.com/*"</span>,<span class="string">"https://cart.tmall.com/*"</span>,<span class="string">"https://buy.tmall.com/*"</span>],</span><br><span class="line">      <span class="attr">"js"</span>: [<span class="string">"maotai.js"</span>],</span><br><span class="line">  <span class="attr">"run_at"</span>: <span class="string">"document_idle"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">    "permissions": [</span><br><span class="line">       "https://www.baidu.com/*",</span><br><span class="line">       "background",</span><br><span class="line">       <span class="string">"tabs"</span></span><br><span class="line">    ], //权限</span><br><span class="line">    "plugins": [&#123;</span><br><span class="line">       "path": "extension_plugin.dll",</span><br><span class="line">       "public": true</span><br><span class="line">    &#125;], // 扩展。可调用第三方扩展</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>content_scripts</strong>，其数组元素的字段有：</p><ol><li><p>matches：String数组，必须。定义content_scripts对哪些页面生效。其规则符合permissions的模式匹配。</p></li><li><p>css：String数组，可选。定义哪些css文件在web页面DOM创建前注入到web页面中。</p></li><li><p>js：String数组，可选。定义哪些js文件注入到web页面中。其js文件的注入顺序与数组中定义的顺序相同。至于这些js与web页面中所定义js的顺序关系，取决于run_at字段。</p></li><li><p>run_at：String，可选。定义content_scripts的注入时机，从而影响到js与web页面所定义js的顺序关系。取值有：</p><ul><li><p>document_start：所有css加载完毕，但DOM尚未创建时。</p></li><li><p>document_end：DOM创建完成，但图片及frame等子资源尚未加载时。</p></li><li><p>document_idle：document_end之后，window.onload之前。</p><p>默认是document_idle，也就是content_scripts的js都罗列在web页面的js之后。</p></li></ul></li><li><p>all_frames：boolean，可选。是否运行在页面所有的frame中。若为false，则只运行在最上层的frame中。默认为false。</p></li><li><p>include_globs：String数组，可选。用于规定页面匹配的白名单。一个URL，必须同时满足：匹配matches，匹配include_globs白名单，不匹配exclude_globs黑名单这三个条件才可以。注意include_globs和exclude_globs中的匹配语法与permissions和matches所用的匹配模式不同。</p></li><li><p>exclude_globs：String数组，可选。用于规定页面匹配的黑名单。同⑥。</p></li></ol><p><strong>permissions</strong>：扩展所需要的权限。permissions是一个String数组，每一个权限都使用String来表示。某些权限在安装前会告知用户。</p><ol><li>模式配匹：用于指定扩展会在哪些URL中生效。例如：</li><li>background：启用扩展后端环境。即在浏览器运行期始终运行，与单个页面无关。可以在这里调用浏览器的API，通常在这里进行扩展主要逻辑的开发。配合manifest.json的background字段使用。</li></ol><p><strong>background</strong>： 这是一个比较重要的属性，如果你需要运行一些后台脚本，比如监听用户在扩展信息栏按下你的插件图标，或者你要监听用户新建tab页，这个时候你就需要有一个background的页面。background你可以指定一个HTML页面（如我的插件），也可以指定一个JS文件，如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"My extension"</span>,</span><br><span class="line">  ...</span><br><span class="line">  "background": &#123;</span><br><span class="line">    "scripts": ["background.js"]</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">// 需要注意两点：</span><br><span class="line">// 1、是HTML不能写JS代码，JS代码需要写到JS文件中后引入；</span><br><span class="line">// 2、不能使用jquery（没有详细测试，可能是我没用正确）；</span><br></pre></td></tr></table></figure><p>background.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// background.js</span></span><br><span class="line"><span class="comment">// @describtion: 监听用户在扩展信息栏按下你的插件图标时，显示当前活动页的URL：</span></span><br><span class="line">chrome.browserAction.onClicked.addListener(<span class="function"><span class="keyword">function</span> (<span class="params">tab</span>) </span>&#123;</span><br><span class="line">alert(tab.url);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="改进tmall_kill"><a class="markdownIt-Anchor" href="#改进tmall_kill"></a> 改进Tmall_Kill</h2><p>需要修改的功能为：</p><ol><li>插件中设定时间=&gt;时间框选择时间</li><li>匹配网站自动运行-&gt;弹出页面手动点击运行</li><li>选中购物车商品后结算-&gt;到时间后自动勾选商品结算</li><li>弹出页+时间框 popup.html</li></ol><p><a href="https://blog.csdn.net/z_xiaocun/article/details/46934223" target="_blank" rel="noopener">HTML5日期输入框(date)</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> * @Author: Mrli</span></span><br><span class="line"><span class="comment"> * @Date: 2021-03-02 17:19:02</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2021-03-03 22:18:02</span></span><br><span class="line"><span class="comment"> * @Description: </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        width: 250px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#add-new-item</span> &#123;</span></span><br><span class="line"><span class="undefined">        cursor: pointer;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#CCC</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: none;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.show</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="undefined">        cursor: pointer;</span></span><br><span class="line"><span class="undefined">        margin: 5px 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.item</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">        width: 12px;</span></span><br><span class="line"><span class="undefined">        height: 12px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    input &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"add-new-item"</span>&gt;</span>add new item<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"add-new-item-input"</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"new-item-title"</span> <span class="attr">placeholder</span>=<span class="string">"add new"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"meeting"</span>&gt;</span>killTime:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"meeting"</span> <span class="attr">type</span>=<span class="string">"datetime-local"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"item-list"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配套的manifest.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"todo-plugin"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.9.0"</span>,</span><br><span class="line">    <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"chrome plugin demo"</span>,</span><br><span class="line">    <span class="attr">"browser_action"</span>: &#123;</span><br><span class="line">        <span class="attr">"default_icon"</span>: <span class="string">"icon.png"</span>,</span><br><span class="line">        <span class="attr">"default_title"</span>: <span class="string">"Todo List"</span>,</span><br><span class="line">        <span class="attr">"default_popup"</span>: <span class="string">"popup.html"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $ = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> Tasks = &#123;</span><br><span class="line">        show: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            obj.className = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        hide: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            obj.className = <span class="string">'hide'</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        $addNewItem: $(<span class="string">'add-new-item'</span>),</span><br><span class="line">        $addNewItemInput: $(<span class="string">'add-new-item-input'</span>),</span><br><span class="line">        $itemList: $(<span class="string">'item-list'</span>),</span><br><span class="line">        $newItemTitle: $(<span class="string">'new-item-title'</span>),</span><br><span class="line">        init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//打开添加文本框</span></span><br><span class="line">            Tasks.$addNewItem.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                Tasks.show(Tasks.$addNewItemInput).hide(Tasks.$addNewItem);</span><br><span class="line">                Tasks.$newItemTitle.focus();</span><br><span class="line">            &#125;, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//回车添加任务</span></span><br><span class="line">            Tasks.$newItemTitle.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">                <span class="keyword">if</span> (ev.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">                    <span class="comment">//<span class="doctag">TODO:</span>写入本地数据</span></span><br><span class="line">                    <span class="keyword">var</span> task = Tasks.$newItemTitle.value;</span><br><span class="line">                    Tasks.AppendHtml(task);</span><br><span class="line">                    Tasks.$newItemTitle.value = <span class="string">''</span>;</span><br><span class="line">                    Tasks.hide(Tasks.$addNewItemInput).show(Tasks.$addNewItem);</span><br><span class="line">                &#125;</span><br><span class="line">                ev.preventDefault();</span><br><span class="line">            &#125;, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//取消添加</span></span><br><span class="line">            Tasks.$newItemTitle.addEventListener(<span class="string">'blur'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                Tasks.$newItemTitle.value = <span class="string">''</span>;</span><br><span class="line">                Tasks.hide(Tasks.$addNewItemInput).show(Tasks.$addNewItem);</span><br><span class="line">            &#125;, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//TODO 初始化数据，加载本地数据，生成html</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//增加</span></span><br><span class="line">        Add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//TODO</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        Edit: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//TODO</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        Del: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//TODO</span></span><br><span class="line">        &#125;,</span><br><span class="line">        AppendHtml: <span class="function"><span class="keyword">function</span> (<span class="params">title</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">            oDiv.className = <span class="string">'item item-todo'</span>;</span><br><span class="line">            <span class="keyword">var</span> oInput = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">            oInput.type = <span class="string">'checkbox'</span>;</span><br><span class="line">            <span class="keyword">var</span> oTitle = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">            oTitle.innerHTML = title;</span><br><span class="line">            oDiv.appendChild(oInput);</span><br><span class="line">            oDiv.appendChild(oTitle);</span><br><span class="line">            Tasks.$itemList.appendChild(oDiv);</span><br><span class="line">            oDiv.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//TODO</span></span><br><span class="line">            &#125;, <span class="literal">true</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        RemoveHtml: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//TODO</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Tasks.init();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="学习案例"><a class="markdownIt-Anchor" href="#学习案例"></a> 学习案例：</h2><ul><li><a href="https://www.extfans.com/web-development/dmkhgkeoafabappeigncmifgkiecjcpp" target="_blank" rel="noopener">cookies-list</a></li><li><a href="https://juejin.cn/post/7005598387634438175" target="_blank" rel="noopener">Chrome 插件开发不完全指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;chrome插件开发&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#chrome插件开发&quot;&gt;&lt;/a&gt; chrome插件开发&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;借鉴TODO-List：&lt;a href=&quot;https://www.w3
      
    
    </summary>
    
    
      <category term="脚本" scheme="https://nymrli.top/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>浙大2020春夏-人工智能习题2——垃圾分类</title>
    <link href="https://nymrli.top/2020/12/11/%E6%B5%99%E5%A4%A72020%E6%98%A5%E5%A4%8F-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B9%A0%E9%A2%982%E2%80%94%E2%80%94%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB/"/>
    <id>https://nymrli.top/2020/12/11/浙大2020春夏-人工智能习题2——垃圾分类/</id>
    <published>2020-12-11T02:25:45.000Z</published>
    <updated>2020-12-19T12:57:33.295Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>homework for ZJU: <a href="https://mo.zju.edu.cn/homework/zju_ai_2020_ss" target="_blank" rel="noopener">https://mo.zju.edu.cn/homework/zju_ai_2020_ss</a></p></blockquote><h1 id="1-实验介绍"><a class="markdownIt-Anchor" href="#1-实验介绍"></a> 1. 实验介绍</h1><h2 id="11-实验背景"><a class="markdownIt-Anchor" href="#11-实验背景"></a> 1.1 实验背景</h2><p>自今年 7 月 1 日起，上海市将正式实施 《上海市生活垃圾管理条例》。<br>垃圾分类，看似是微不足道的“小事”，实则关系到13亿多人生活环境的改善，理应大力提倡。<br>垃圾识别分类数据集中包括玻璃 (glass) 、硬纸板 (cardboard) 、金属 (metal) 、纸 (paper) 、塑料 (plastic) 、一般垃圾 (trash) ，共6个类别。<br>生活垃圾由于种类繁多，具体分类缺乏统一标准，大多人在实际操作时会“选择困难”，基于深度学习技术建立准确的分类模型，利用技术手段改善人居环境。</p><h2 id="12-实验要求"><a class="markdownIt-Anchor" href="#12-实验要求"></a> 1.2 实验要求</h2><p>a）建立深度神经网络模型，并尽可能将其调到最佳状态。<br>b）绘制深度神经网络模型图、绘制并分析学习曲线。<br>c）用准确率等指标对模型进行评估。</p><h2 id="13-实验环境"><a class="markdownIt-Anchor" href="#13-实验环境"></a> 1.3 实验环境</h2><p>可以使用基于 Python 的 OpenCV 库进行图像相关处理，使用 Numpy 库进行相关数值运算，使用 Keras 等框架建立深度学习模型等。</p><h1 id="2实验内容"><a class="markdownIt-Anchor" href="#2实验内容"></a> 2.实验内容</h1><h2 id="21-介绍数据集"><a class="markdownIt-Anchor" href="#21-介绍数据集"></a> 2.1 介绍数据集</h2><p>该数据集包含了 2307 个生活垃圾图片。数据集的创建者将垃圾分为了 6 个类别，分别是：</p><table><thead><tr><th>序号</th><th>中文名</th><th>英文名</th><th>数据集大小</th></tr></thead><tbody><tr><td>1</td><td>玻璃</td><td>glass</td><td>457</td></tr><tr><td>2</td><td>纸</td><td>paper</td><td>540</td></tr><tr><td>3</td><td>硬纸板</td><td>cardboard</td><td>370</td></tr><tr><td>4</td><td>塑料</td><td>plastic</td><td>445</td></tr><tr><td>5</td><td>金属</td><td>metal</td><td>380</td></tr><tr><td>6</td><td>一般垃圾</td><td>trash</td><td>115</td></tr></tbody></table><ul><li>物品都是放在白板上在日光/室内光源下拍摄的，压缩后的尺寸为 512 * 384</li></ul><h2 id="22-图片预处理"><a class="markdownIt-Anchor" href="#22-图片预处理"></a> 2.2 图片预处理</h2><p>图片生成器 <a href="https://keras.io/preprocessing/image/" target="_blank" rel="noopener">ImageDataGenerator</a>: keras.preprocessing.image 模块中的图片生成器，主要用以生成一个 batch 的图像数据，支持实时数据提升。训练时该函数会无限生成数据，直到达到规定的 epoch 次数为止。同时也可以在 batch 中对数据进行增强，扩充数据集大小，增强模型的泛化能力，比如进行旋转，变形，归一化等等。</p><p>图片生成器的主要方法：</p><ul><li><p>fit(x, augment=False, rounds=1)：计算依赖于数据的变换所需要的统计信息(均值方差等)。</p></li><li><p>flow(self, X, y, batch_size=32, shuffle=True, seed=None, save_to_dir=None, save_prefix=’’, save_format=‘png’)：接收 Numpy 数组和标签为参数,生成经过数据提升或标准化后的 batch 数据，并在一个无限循环中不断的返回 batch 数据。</p></li><li><p>flow_from_directory(directory): 以文件夹路径为参数，会从路径推测 label，生成经过数据提升/归一化后的数据，在一个无限循环中无限产生 batch 数据。</p></li></ul><blockquote><p>根据上面的介绍和我们数据集的特性，我们主要运用 <code>ImageDataGenerator()</code> 和 <code>flow_from_directory()</code> 方法。我们将数据处理过程封装成为一个函数：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入图片生成器</span></span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">processing_data</span><span class="params">(data_path, height, width, batch_size=<span class="number">32</span>, validation_split=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    数据处理</span></span><br><span class="line"><span class="string">    :param data_path: 带有子目录的数据集路径</span></span><br><span class="line"><span class="string">    :param height: 图像形状的行数</span></span><br><span class="line"><span class="string">    :param width: 图像形状的列数</span></span><br><span class="line"><span class="string">    :param batch_size: batch 数据的大小，整数，默认32。</span></span><br><span class="line"><span class="string">    :param validation_split: 在 0 和 1 之间浮动。用作测试集的训练数据的比例，默认0.1。</span></span><br><span class="line"><span class="string">    :return: train_generator, validation_generator: 处理后的训练集数据、验证集数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    train_data = ImageDataGenerator(</span><br><span class="line">            <span class="comment"># 对图片的每个像素值均乘上这个放缩因子，把像素值放缩到0和1之间有利于模型的收敛</span></span><br><span class="line">            rescale=<span class="number">1.</span> / <span class="number">255</span>,  </span><br><span class="line">            <span class="comment"># 浮点数，剪切强度（逆时针方向的剪切变换角度）</span></span><br><span class="line">            shear_range=<span class="number">0.1</span>,  </span><br><span class="line">            <span class="comment"># 随机缩放的幅度，若为浮点数，则相当于[lower,upper] = [1 - zoom_range, 1+zoom_range]</span></span><br><span class="line">            zoom_range=<span class="number">0.1</span>,</span><br><span class="line">            <span class="comment"># 浮点数，图片宽度的某个比例，数据提升时图片水平偏移的幅度</span></span><br><span class="line">            width_shift_range=<span class="number">0.1</span>,</span><br><span class="line">            <span class="comment"># 浮点数，图片高度的某个比例，数据提升时图片竖直偏移的幅度</span></span><br><span class="line">            height_shift_range=<span class="number">0.1</span>,</span><br><span class="line">            <span class="comment"># 布尔值，进行随机水平翻转</span></span><br><span class="line">            horizontal_flip=<span class="keyword">True</span>,</span><br><span class="line">            <span class="comment"># 布尔值，进行随机竖直翻转</span></span><br><span class="line">            vertical_flip=<span class="keyword">True</span>,</span><br><span class="line">            <span class="comment"># 在 0 和 1 之间浮动。用作验证集的训练数据的比例</span></span><br><span class="line">            validation_split=validation_split  </span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接下来生成测试集，可以参考训练集的写法</span></span><br><span class="line">    validation_data = ImageDataGenerator(</span><br><span class="line">            rescale=<span class="number">1.</span> / <span class="number">255</span>,</span><br><span class="line">            validation_split=validation_split)</span><br><span class="line"></span><br><span class="line">    train_generator = train_data.flow_from_directory(</span><br><span class="line">            <span class="comment"># 提供的路径下面需要有子目录</span></span><br><span class="line">            data_path, </span><br><span class="line">            <span class="comment"># 整数元组 (height, width)，默认：(256, 256)。 所有的图像将被调整到的尺寸。</span></span><br><span class="line">            target_size=(height, width),</span><br><span class="line">            <span class="comment"># 一批数据的大小</span></span><br><span class="line">            batch_size=batch_size,</span><br><span class="line">            <span class="comment"># "categorical", "binary", "sparse", "input" 或 None 之一。</span></span><br><span class="line">            <span class="comment"># 默认："categorical",返回one-hot 编码标签。</span></span><br><span class="line">            class_mode=<span class="string">'categorical'</span>,</span><br><span class="line">            <span class="comment"># 数据子集 ("training" 或 "validation")</span></span><br><span class="line">            subset=<span class="string">'training'</span>, </span><br><span class="line">            seed=<span class="number">0</span>)</span><br><span class="line">    validation_generator = validation_data.flow_from_directory(</span><br><span class="line">            data_path,</span><br><span class="line">            target_size=(height, width),</span><br><span class="line">            batch_size=batch_size,</span><br><span class="line">            class_mode=<span class="string">'categorical'</span>,</span><br><span class="line">            subset=<span class="string">'validation'</span>,</span><br><span class="line">            seed=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> train_generator, validation_generator</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------使用---------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据路径</span></span><br><span class="line">data_path = <span class="string">"./datasets/la1ji1fe1nle4ishu4ju4ji22-momodel/dataset-resized"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像数据的行数和列数</span></span><br><span class="line">height, width = <span class="number">384</span>, <span class="number">512</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取训练数据和验证数据集</span></span><br><span class="line">train_generator, validation_generator = processing_data(data_path, height, width)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过属性class_indices可获得文件夹名与类的序号的对应字典。 (类别的顺序将按照字母表顺序映射到标签值)。</span></span><br><span class="line">labels = train_generator.class_indices</span><br><span class="line">print(labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为类的序号与文件夹名对应的字典</span></span><br><span class="line">labels = dict((v, k) <span class="keyword">for</span> k, v <span class="keyword">in</span> labels.items())</span><br><span class="line">print(labels)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Found 2078 images belonging to 6 classes.</span></span><br><span class="line"><span class="string">Found 229 images belonging to 6 classes.</span></span><br><span class="line"><span class="string">&#123;'trash': 5, 'metal': 2, 'plastic': 4, 'glass': 1, 'cardboard': 0, 'paper': 3&#125;</span></span><br><span class="line"><span class="string">&#123;0: 'cardboard', 1: 'glass', 2: 'metal', 3: 'paper', 4: 'plastic', 5: 'trash'&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="23-采用-keras-建立一个简单的深度神经网络模型"><a class="markdownIt-Anchor" href="#23-采用-keras-建立一个简单的深度神经网络模型"></a> 2.3 采用 Keras 建立一个简单的深度神经网络模型</h2><p>通过 Keras 构建深度学习模型的步骤如下：</p><h3 id="1-定义模型创建一个模型并添加配置层"><a class="markdownIt-Anchor" href="#1-定义模型创建一个模型并添加配置层"></a> 1. 定义模型——创建一个模型并添加配置层</h3><blockquote><p>Keras 的核心数据结构是 model，一种组织网络层的方式。最简单的模型是 <a href="https://keras.io/getting-started/sequential-model-guide/" target="_blank" rel="noopener">Sequential 顺序模型</a>，它由多个网络层线性堆叠。</p></blockquote><ol><li>方式一: 使用 .add() 方法将各层添加到模型中</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一: 使用 .add() 方法将各层添加到模型中</span></span><br><span class="line"><span class="comment"># 导入相关包</span></span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Activation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择模型，选择序贯模型（Sequential())</span></span><br><span class="line">model = Sequential()</span><br><span class="line"><span class="comment"># 构建网络层</span></span><br><span class="line"><span class="comment"># 添加全连接层，输入784维,输出空间维度32</span></span><br><span class="line">model.add(Dense(<span class="number">32</span>, input_shape=(<span class="number">784</span>,)))</span><br><span class="line"><span class="comment"># 添加激活层，激活函数是 relu</span></span><br><span class="line">model.add(Activation(<span class="string">'relu'</span>))</span><br><span class="line"><span class="comment"># 打印模型概况</span></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><ol start="2"><li><p>方式二：网络层实例的列表构建序贯模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式二：网络层实例的列表构建序贯模型</span></span><br><span class="line"><span class="comment"># 导入相关的包</span></span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Activation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择模型，选择序贯模型（Sequential())</span></span><br><span class="line"><span class="comment"># 通过将网络层实例的列表传递给 Sequential 的构造器，来创建一个 Sequential 模型</span></span><br><span class="line">model = Sequential([</span><br><span class="line">    Dense(<span class="number">32</span>, input_shape=(<span class="number">784</span>,)),</span><br><span class="line">    Activation(<span class="string">'relu'</span>)</span><br><span class="line">])</span><br><span class="line"><span class="comment"># 打印模型概况</span></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure></li><li><p>方式三：函数式模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式三：函数式模型</span></span><br><span class="line"><span class="comment"># 导入相关的包</span></span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Input, Dense,Activation</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入层，返回一个张量 tensor</span></span><br><span class="line">inputs = Input(shape=(<span class="number">784</span>,))</span><br><span class="line"><span class="comment"># 全连接层，返回一个张量</span></span><br><span class="line">output_1 = Dense(<span class="number">32</span>)(inputs)</span><br><span class="line"><span class="comment"># 激活函数层</span></span><br><span class="line">predictions= Activation(activation=<span class="string">'relu'</span>)(output_1)</span><br><span class="line"><span class="comment"># 创建一个模型，包含输入层、全连接层和激活层</span></span><br><span class="line">model = Model(inputs=inputs, outputs=predictions)</span><br><span class="line"><span class="comment"># 打印模型概况</span></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-编译模型指定损失函数和优化器并调用模型的-compile-函数完成模型编译"><a class="markdownIt-Anchor" href="#2-编译模型指定损失函数和优化器并调用模型的-compile-函数完成模型编译"></a> 2. 编译模型——指定损失函数和优化器，并调用模型的 compile() 函数，完成模型编译。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入相关包</span></span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Input, Dense, Flatten, Dropout, Activation</span><br><span class="line"><span class="keyword">from</span> keras.layers.normalization <span class="keyword">import</span> BatchNormalization</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> TensorBoard</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dnn_model</span><span class="params">(input_shape, train_generator, validation_generator, model_save_path=<span class="string">'results/dnn.h5'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              log_dir=<span class="string">"results/logs/"</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    该函数实现 Keras 创建深度学习模型的过程. ▲.定义模型+编译模型</span></span><br><span class="line"><span class="string">    :param input_shape: 模型数据形状大小，比如:input_shape=(384, 512, 3)</span></span><br><span class="line"><span class="string">    :param train_generator: 训练集</span></span><br><span class="line"><span class="string">    :param validation_generator: 验证集</span></span><br><span class="line"><span class="string">    :param model_save_path: 保存模型的路径</span></span><br><span class="line"><span class="string">    :param log_dir: 保存模型日志路径</span></span><br><span class="line"><span class="string">    :return: 返回已经训练好的模型</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># Input 用于实例化 Keras 张量。</span></span><br><span class="line">    <span class="comment"># shape: 一个尺寸元组（整数），不包含批量大小。 例如，shape=(32,) 表明期望的输入是按批次的 32 维向量。</span></span><br><span class="line">    inputs = Input(shape=input_shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将输入展平</span></span><br><span class="line">    dnn = Flatten()(inputs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Dense 全连接层  实现以下操作：output = activation(dot(input, kernel) + bias)</span></span><br><span class="line">    <span class="comment"># 其中 activation 是按逐个元素计算的激活函数，kernel 是由网络层创建的权值矩阵，</span></span><br><span class="line">    <span class="comment"># 以及 bias 是其创建的偏置向量 (只在 use_bias 为 True 时才有用)。</span></span><br><span class="line">    dnn = Dense(<span class="number">6</span>)(dnn)</span><br><span class="line">    <span class="comment"># 批量标准化层: 在每一个批次的数据中标准化前一层的激活项， 即应用一个维持激活项平均值接近 0，标准差接近 1 的转换。</span></span><br><span class="line">    <span class="comment"># axis: 整数，需要标准化的轴 （通常是特征轴）。默认值是 -1</span></span><br><span class="line">    dnn = BatchNormalization(axis=<span class="number">-1</span>)(dnn)</span><br><span class="line">    <span class="comment"># 将激活函数,输出尺寸与输入尺寸一样，激活函数可以是'softmax'、'sigmoid'等</span></span><br><span class="line">    dnn = Activation(<span class="string">'sigmoid'</span>)(dnn)</span><br><span class="line">    <span class="comment"># Dropout 包括在训练中每次更新时，将输入单元的按比率随机设置为 0, 这有助于防止过拟合。</span></span><br><span class="line">    <span class="comment"># rate: 在 0 和 1 之间浮动。需要丢弃的输入比例。</span></span><br><span class="line">    dnn = Dropout(<span class="number">0.25</span>)(dnn)</span><br><span class="line"></span><br><span class="line">    dnn = Dense(<span class="number">12</span>)(dnn)</span><br><span class="line">    dnn = BatchNormalization(axis=<span class="number">-1</span>)(dnn)</span><br><span class="line">    dnn = Activation(<span class="string">'relu'</span>)(dnn)</span><br><span class="line">    dnn = Dropout(<span class="number">0.5</span>)(dnn)</span><br><span class="line"></span><br><span class="line">    dnn = Dense(<span class="number">6</span>)(dnn)</span><br><span class="line">    dnn = BatchNormalization(axis=<span class="number">-1</span>)(dnn)</span><br><span class="line">    dnn = Activation(<span class="string">'softmax'</span>)(dnn)</span><br><span class="line"></span><br><span class="line">    outputs = dnn</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成一个函数型模型</span></span><br><span class="line">    model = Model(inputs=inputs, outputs=outputs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 编译模型, 采用 compile 函数: https://keras.io/models/model/#compile</span></span><br><span class="line">    model.compile(</span><br><span class="line">            <span class="comment"># 是优化器, 主要有Adam、sgd、rmsprop等方式。</span></span><br><span class="line">            optimizer=<span class="string">'Adam'</span>,</span><br><span class="line">            <span class="comment"># 损失函数,多分类采用 categorical_crossentropy</span></span><br><span class="line">            loss=<span class="string">'categorical_crossentropy'</span>,</span><br><span class="line">            <span class="comment"># 是除了损失函数值之外的特定指标, 分类问题一般都是准确率</span></span><br><span class="line">            metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可视化，TensorBoard 是由 Tensorflow 提供的一个可视化工具。</span></span><br><span class="line">    tensorboard = TensorBoard(log_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练模型, fit_generator函数:https://keras.io/models/model/#fit_generator</span></span><br><span class="line">    <span class="comment"># 利用Python的生成器，逐个生成数据的batch并进行训练。</span></span><br><span class="line">    <span class="comment"># callbacks: 实例列表。在训练时调用的一系列回调。详见 https://keras.io/callbacks/。</span></span><br><span class="line">    d = model.fit_generator(</span><br><span class="line">            <span class="comment"># 一个生成器或 Sequence 对象的实例</span></span><br><span class="line">            generator=train_generator,</span><br><span class="line">            <span class="comment"># epochs: 整数，数据的迭代总轮数。</span></span><br><span class="line">            epochs=<span class="number">5</span>,</span><br><span class="line">            <span class="comment"># 一个epoch包含的步数,通常应该等于你的数据集的样本数量除以批量大小。</span></span><br><span class="line">            steps_per_epoch=<span class="number">2076</span> // <span class="number">32</span>,</span><br><span class="line">            <span class="comment"># 验证集</span></span><br><span class="line">            validation_data=validation_generator,</span><br><span class="line">            <span class="comment"># 在验证集上,一个epoch包含的步数,通常应该等于你的数据集的样本数量除以批量大小。</span></span><br><span class="line">            validation_steps=<span class="number">231</span> // <span class="number">32</span>,</span><br><span class="line">            callbacks=[tensorboard])</span><br><span class="line">    <span class="comment"># 模型保存</span></span><br><span class="line">    model.save(model_save_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d, model</span><br></pre></td></tr></table></figure><h3 id="3-训练模型通过调用模型的-fit-函数来训练模型"><a class="markdownIt-Anchor" href="#3-训练模型通过调用模型的-fit-函数来训练模型"></a> 3. 训练模型——通过调用模型的 fit() 函数来训练模型。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开始时间</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="comment"># 数据预处理</span></span><br><span class="line">data_path = <span class="string">"./datasets/la1ji1fe1nle4ishu4ju4ji22-momodel/dataset-resized"</span></span><br><span class="line"><span class="comment"># 图像数据的行数和列数</span></span><br><span class="line">height, width = <span class="number">384</span>, <span class="number">512</span></span><br><span class="line"><span class="comment"># 获取训练数据和验证数据</span></span><br><span class="line">train_generator, validation_generator = processing_data(data_path, height, width)</span><br><span class="line"><span class="comment"># 定义模型输入大小</span></span><br><span class="line">input_shape=(<span class="number">384</span>, <span class="number">512</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 训练模型，获取训练过程和训练后的模型</span></span><br><span class="line">res,model = dnn_model(input_shape, train_generator, validation_generator)</span><br><span class="line"><span class="comment"># 打印模型概况和模型训练总数长</span></span><br><span class="line">model.summary()</span><br><span class="line">print(<span class="string">"模型训练总时长："</span>,time.time()-start)</span><br></pre></td></tr></table></figure><ol><li>查看模型训练效果</li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_training_history</span><span class="params">(res)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    绘制模型的训练结果</span></span><br><span class="line"><span class="string">    :param res: 模型的训练结果</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 绘制模型训练过程的损失和平均损失</span></span><br><span class="line">    <span class="comment"># 绘制模型训练过程的损失值曲线，标签是 loss</span></span><br><span class="line">    plt.plot(res.history[<span class="string">'loss'</span>], label=<span class="string">'loss'</span>)</span><br><span class="line">    <span class="comment"># 绘制模型训练过程中的平均损失曲线，标签是 val_loss</span></span><br><span class="line">    plt.plot(res.history[<span class="string">'val_loss'</span>], label=<span class="string">'val_loss'</span>)</span><br><span class="line">    <span class="comment"># 绘制图例,展示出每个数据对应的图像名称和图例的放置位置</span></span><br><span class="line">    plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">    <span class="comment"># 展示图片</span></span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="comment"># 绘制模型训练过程中的的准确率和平均准确率</span></span><br><span class="line">    <span class="comment"># 绘制模型训练过程中的准确率曲线，标签是 acc</span></span><br><span class="line">    plt.plot(res.history[<span class="string">'accuracy'</span>], label=<span class="string">'accuracy'</span>)</span><br><span class="line">    <span class="comment"># 绘制模型训练过程中的平均准确率曲线，标签是 val_acc</span></span><br><span class="line">    plt.plot(res.history[<span class="string">'val_accuracy'</span>], label=<span class="string">'val_accuracy'</span>)</span><br><span class="line">    <span class="comment"># 绘制图例,展示出每个数据对应的图像名称，图例的放置位置为默认值。</span></span><br><span class="line">    plt.legend()</span><br><span class="line">    <span class="comment"># 展示图片</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h3 id="4-模型预测调用模型的-evaluate或者-predict-等函数对新数据进行预测"><a class="markdownIt-Anchor" href="#4-模型预测调用模型的-evaluate或者-predict-等函数对新数据进行预测"></a> 4. 模型预测——调用模型的 evaluate()或者 predict() 等函数对新数据进行预测。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_and_model_prediction</span><span class="params">(validation_generator)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    加载模型和模型评估，打印验证集的 loss 和准确度</span></span><br><span class="line"><span class="string">    :param validation_generator: 预测数据</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 加载模型</span></span><br><span class="line">    model = load_model(<span class="string">'results/dnn.h5'</span>)</span><br><span class="line">    <span class="comment"># 获取验证集的 loss 和 accuracy</span></span><br><span class="line">    loss, accuracy = model.evaluate_generator(validation_generator)</span><br><span class="line">    print(<span class="string">"\nLoss: %.2f, Accuracy: %.2f%%"</span> % (loss, accuracy * <span class="number">100</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 打印模型评估的结果</span></span><br><span class="line">load_and_model_prediction(validation_generator)</span><br></pre></td></tr></table></figure><p>(预测可视化)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_load_and_model_prediction</span><span class="params">(validation_generator, labels)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    加载模型、模型预测并展示模型预测结果等</span></span><br><span class="line"><span class="string">    :param validation_generator: 预测数据</span></span><br><span class="line"><span class="string">    :param labels: 数据标签</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 加载模型</span></span><br><span class="line">    model = load_model(<span class="string">'results/dnn.h5'</span>)</span><br><span class="line">    <span class="comment"># 测试集数据与标签</span></span><br><span class="line">    test_x, test_y = validation_generator.__getitem__(<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 预测值</span></span><br><span class="line">    preds = model.predict(test_x)</span><br><span class="line">    <span class="comment"># 绘制预测图像的预测值和真实值，定义画布</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">16</span>, <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        <span class="comment"># 绘制各个子图</span></span><br><span class="line">        plt.subplot(<span class="number">4</span>, <span class="number">4</span>, i + <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 图片名称</span></span><br><span class="line">        plt.title(</span><br><span class="line">                <span class="string">'pred:%s / truth:%s'</span> % (labels[np.argmax(preds[i])], labels[np.argmax(test_y[i])]))</span><br><span class="line">        <span class="comment"># 展示图片</span></span><br><span class="line">        plt.imshow(test_x[i])</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 展示模型预测结果</span></span><br><span class="line">plot_load_and_model_prediction(validation_generator, labels)</span><br></pre></td></tr></table></figure><h3 id="5-使用模型"><a class="markdownIt-Anchor" href="#5-使用模型"></a> 5. 使用模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_and_predict</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    加载模型并预测一张图片的类别</span></span><br><span class="line"><span class="string">    :param img: PIL.Image 对象</span></span><br><span class="line"><span class="string">    :return: string, 模型识别图片的类别, </span></span><br><span class="line"><span class="string">            共 'cardboard','glass','metal','paper','plastic','trash' 6 个类别</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 加载模型, 默认'results/dnn.h5',请填写你的最佳模型</span></span><br><span class="line">    model_path = <span class="string">'results/dnn.h5'</span></span><br><span class="line">    model = load_model(model_path)</span><br><span class="line">    <span class="comment"># 把图片转换成为numpy数组</span></span><br><span class="line">    img = image.img_to_array(img)</span><br><span class="line">    <span class="comment"># 图片放缩</span></span><br><span class="line">    img = <span class="number">1.0</span>/<span class="number">255</span> * img</span><br><span class="line">    <span class="comment"># expand_dims的作用是把img.shape转换成(1, img.shape[0], img.shape[1], img.shape[2])</span></span><br><span class="line">    x = np.expand_dims(img, axis=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 模型预测, y: [[0.22421867 0.13031775 0.15167782 0.15904953 0.21509506 0.11964121]]</span></span><br><span class="line">    y = model.predict(x)</span><br><span class="line">    <span class="comment"># 获取labels</span></span><br><span class="line">    labels = &#123;<span class="number">0</span>: <span class="string">'cardboard'</span>, <span class="number">1</span>: <span class="string">'glass'</span>, <span class="number">2</span>: <span class="string">'metal'</span>, <span class="number">3</span>: <span class="string">'paper'</span>, <span class="number">4</span>: <span class="string">'plastic'</span>, <span class="number">5</span>: <span class="string">'trash'</span>&#125;</span><br><span class="line">    <span class="comment"># 获取输入图片的类别</span></span><br><span class="line">    y_predict = labels[np.argmax(y)]</span><br><span class="line">    <span class="comment"># 返回图片的类别</span></span><br><span class="line">    <span class="keyword">return</span> y_predict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> image</span><br><span class="line"><span class="comment"># 输入图片路径和名称</span></span><br><span class="line">file_path = <span class="string">'test.jpg'</span></span><br><span class="line"><span class="comment"># 打印该张图片的类别</span></span><br><span class="line">img = image.load_img(file_path)</span><br><span class="line">print(load_and_predict(img))</span><br></pre></td></tr></table></figure><h1 id="mycode"><a class="markdownIt-Anchor" href="#mycode"></a> Mycode</h1><blockquote><p>编写 <strong>数据处理</strong>、<strong>创建模型</strong>、<strong>训练模型</strong>、<strong>保存模型</strong> 和 <strong>评估模型</strong> 等部分的代码</p></blockquote><h2 id="完成模型"><a class="markdownIt-Anchor" href="#完成模型"></a> 完成模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">processing_data</span><span class="params">(data_path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    数据处理</span></span><br><span class="line"><span class="string">    :param data_path: 数据集路径</span></span><br><span class="line"><span class="string">    :return: train, test:处理后的训练集数据、测试集数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># -------------------------- 实现数据处理部分代码 ----------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------------------------------------------</span></span><br><span class="line">    train_data, test_data = <span class="keyword">None</span>, <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> train_data, test_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(train_data, test_data, save_model_path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    创建、训练和保存深度学习模型</span></span><br><span class="line"><span class="string">    :param train_data: 训练集数据</span></span><br><span class="line"><span class="string">    :param test_data: 测试集数据</span></span><br><span class="line"><span class="string">    :param save_model_path: 保存模型的路径和名称</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># --------------------- 实现模型创建、训练和保存等部分的代码 ---------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存模型（请写好保存模型的路径及名称）</span></span><br><span class="line">    <span class="comment"># -------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_mode</span><span class="params">(test_data, save_model_path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    加载模型和评估模型</span></span><br><span class="line"><span class="string">    可以实现，比如: 模型训练过程中的学习曲线，测试集数据的loss值、准确率及混淆矩阵等评价指标！</span></span><br><span class="line"><span class="string">    主要步骤:</span></span><br><span class="line"><span class="string">        1.加载模型(请填写你训练好的最佳模型),</span></span><br><span class="line"><span class="string">        2.对自己训练的模型进行评估</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param test_data: 测试集数据</span></span><br><span class="line"><span class="string">    :param save_model_path: 加载模型的路径和名称,请填写你认为最好的模型</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># ----------------------- 实现模型加载和评估等部分的代码 -----------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    深度学习模型训练流程,包含数据处理、创建模型、训练模型、模型保存、评价模型等。</span></span><br><span class="line"><span class="string">    如果对训练出来的模型不满意,你可以通过调整模型的参数等方法重新训练模型,直至训练出你满意的模型。</span></span><br><span class="line"><span class="string">    如果你对自己训练出来的模型非常满意,则可以提交作业!</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data_path = <span class="keyword">None</span>  <span class="comment"># 数据集路径</span></span><br><span class="line">    save_model_path = <span class="keyword">None</span>  <span class="comment"># 保存模型路径和名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取数据</span></span><br><span class="line">    train_data, test_data = processing_data(data_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建、训练和保存模型</span></span><br><span class="line">    model(train_data, test_data, save_model_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估模型</span></span><br><span class="line">    evaluate_mode(test_data, save_model_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="模型预测"><a class="markdownIt-Anchor" href="#模型预测"></a> 模型预测</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------- 请加载您最满意的模型 ---------------------------</span></span><br><span class="line"><span class="comment"># 加载模型(请加载你认为的最佳模型)</span></span><br><span class="line"><span class="comment"># 加载模型,加载请注意 model_path 是相对路径, 与当前文件同级。</span></span><br><span class="line"><span class="comment"># 如果你的模型是在 results 文件夹下的 dnn.h5 模型，则 model_path = 'results/dnn.h5'</span></span><br><span class="line">model_path = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型，如果采用keras框架训练模型，则 model=load_model(model_path)</span></span><br><span class="line">model = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    加载模型和模型预测</span></span><br><span class="line"><span class="string">    主要步骤:</span></span><br><span class="line"><span class="string">        1.图片处理</span></span><br><span class="line"><span class="string">        2.用加载的模型预测图片的类别</span></span><br><span class="line"><span class="string">    :param img: PIL.Image 对象</span></span><br><span class="line"><span class="string">    :return: string, 模型识别图片的类别, </span></span><br><span class="line"><span class="string">            共 'cardboard','glass','metal','paper','plastic','trash' 6 个类别</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># -------------------------- 实现模型预测部分的代码 ---------------------------</span></span><br><span class="line">    <span class="comment"># 获取图片的类别，共 'cardboard','glass','metal','paper','plastic','trash' 6 个类别</span></span><br><span class="line">    <span class="comment"># 把图片转换成为numpy数组</span></span><br><span class="line">    img = image.img_to_array(img)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取输入图片的类别</span></span><br><span class="line">    y_predict = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------------------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回图片的类别</span></span><br><span class="line">    <span class="keyword">return</span> y_predict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------使用-----------------------------</span></span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> image</span><br><span class="line"><span class="comment"># 输入图片路径和名称</span></span><br><span class="line">img_path = <span class="string">'test.jpg'</span></span><br><span class="line"><span class="comment"># 打印该张图片的类别</span></span><br><span class="line">img = image.load_img(img_path)</span><br><span class="line">print(predict(img))</span><br></pre></td></tr></table></figure><h3 id="mo项目上代码-accuracy为56"><a class="markdownIt-Anchor" href="#mo项目上代码-accuracy为56"></a> Mo项目上代码-&gt; accuracy为56%</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image </span><br><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms.functional <span class="keyword">as</span> TF</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNN</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, image_size, num_classes)</span>:</span></span><br><span class="line">        super(MyCNN, self).__init__()</span><br><span class="line">        <span class="comment"># conv1: Conv2d -&gt; BN -&gt; ReLU -&gt; MaxPool</span></span><br><span class="line">        self.conv1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">16</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">16</span>),</span><br><span class="line">            nn.ReLU(), </span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># conv2: Conv2d -&gt; BN -&gt; ReLU -&gt; MaxPool</span></span><br><span class="line">        self.conv2 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">16</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">32</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># fully connected layer</span></span><br><span class="line">        self.fc = nn.Linear(<span class="number">32</span> * (image_size // <span class="number">4</span>) * (image_size // <span class="number">4</span>), num_classes)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        input: N * 3 * image_size * image_size</span></span><br><span class="line"><span class="string">        output: N * num_classes</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        <span class="comment"># view(x.size(0), -1): change tensor size from (N ,H , W) to (N, H*W)</span></span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>)</span><br><span class="line">        output = self.fc(x)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_model</span><span class="params">(model_path, device)</span>:</span></span><br><span class="line">    net = MyCNN(<span class="number">32</span>,<span class="number">6</span>)</span><br><span class="line">    print(<span class="string">'loading the model from %s'</span> % model_path)</span><br><span class="line">    state_dict = torch.load(model_path, map_location=str(device))</span><br><span class="line">    <span class="keyword">if</span> hasattr(state_dict, <span class="string">'_metadata'</span>):</span><br><span class="line">        <span class="keyword">del</span> state_dict._metadata</span><br><span class="line">    net.load_state_dict(state_dict)</span><br><span class="line">    <span class="keyword">return</span> net </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型,加载请注意 model_path 是相对路径, 与当前文件同级。</span></span><br><span class="line"><span class="comment"># 如果你的模型是在 results 文件夹下的 dnn.h5 模型，则 model_path = 'results/dnn.h5'</span></span><br><span class="line">model_path = <span class="string">'results/cnn.pth'</span></span><br><span class="line">device = torch.device(<span class="string">'cuda'</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">'cpu'</span>)</span><br><span class="line">model = load_model(model_path, device).to(device)</span><br><span class="line">model.eval()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param img: PIL.Image 对象</span></span><br><span class="line"><span class="string">    :return: string, 模型识别图片的类别, </span></span><br><span class="line"><span class="string">            共 'cardboard','glass','metal','paper','plastic','trash' 6 个类别</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    transform = transforms.Compose([transforms.RandomCrop(size=(<span class="number">384</span>,<span class="number">512</span>), padding=<span class="number">10</span>),</span><br><span class="line">                                transforms.Resize((<span class="number">32</span>,<span class="number">32</span>)),</span><br><span class="line">                                transforms.ToTensor(),</span><br><span class="line">                                transforms.Normalize([<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>], [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">    ])</span><br><span class="line">    img = transform(img)</span><br><span class="line"></span><br><span class="line">    classes=[<span class="string">'glass'</span>,<span class="string">'paper'</span>,<span class="string">'carboard'</span>,<span class="string">'plastic'</span>,<span class="string">'metal'</span>,<span class="string">'trash'</span>]</span><br><span class="line"></span><br><span class="line">    img = img.to(device).unsqueeze(<span class="number">0</span>)</span><br><span class="line">    pred_cate = model(img)</span><br><span class="line">    preds = pred_cate.argmax(dim=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># -------------------------------------------------------------------------</span></span><br><span class="line">    y_predict = classes[preds]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回图片的类别</span></span><br><span class="line">    <span class="keyword">return</span> y_predict</span><br></pre></td></tr></table></figure><p>VGG16代码：accurary：92%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment"># 重要: 请务必把任务(jobs)中需要保存的文件存放在 results 文件夹内</span></span><br><span class="line"><span class="comment"># Important : Please make sure your files are saved to the 'results' folder</span></span><br><span class="line"><span class="comment"># in your jobs</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment"># ------------------------------------------提交内容-----------------------------------</span></span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Input, Dense, Flatten, Dropout, Activation </span><br><span class="line"><span class="keyword">from</span> keras.layers.normalization <span class="keyword">import</span> BatchNormalization</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> TensorBoard</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> image</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> glob, os, cv2, random,time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D,Flatten,MaxPooling2D,Dense </span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> SGD</span><br><span class="line"><span class="keyword">from</span> keras.applications.vgg16 <span class="keyword">import</span> VGG16</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">processing_data</span><span class="params">(data_path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    数据处理</span></span><br><span class="line"><span class="string">    :param data_path: 数据集路径</span></span><br><span class="line"><span class="string">    :return: train, test:处理后的训练集数据、测试集数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    train_data = ImageDataGenerator(</span><br><span class="line">            <span class="comment"># 对图片的每个像素值均乘上这个放缩因子，把像素值放缩到0和1之间有利于模型的收敛</span></span><br><span class="line">            rescale=<span class="number">1.</span> / <span class="number">225</span>,  </span><br><span class="line">            <span class="comment"># 浮点数，剪切强度（逆时针方向的剪切变换角度）</span></span><br><span class="line">            shear_range=<span class="number">0.1</span>,  </span><br><span class="line">            <span class="comment"># 随机缩放的幅度，若为浮点数，则相当于[lower,upper] = [1 - zoom_range, 1+zoom_range]</span></span><br><span class="line">            zoom_range=<span class="number">0.1</span>,</span><br><span class="line">            <span class="comment"># 浮点数，图片宽度的某个比例，数据提升时图片水平偏移的幅度</span></span><br><span class="line">            width_shift_range=<span class="number">0.1</span>,</span><br><span class="line">            <span class="comment"># 浮点数，图片高度的某个比例，数据提升时图片竖直偏移的幅度</span></span><br><span class="line">            height_shift_range=<span class="number">0.1</span>,</span><br><span class="line">            <span class="comment"># 布尔值，进行随机水平翻转</span></span><br><span class="line">            horizontal_flip=<span class="keyword">True</span>,</span><br><span class="line">            <span class="comment"># 布尔值，进行随机竖直翻转</span></span><br><span class="line">            vertical_flip=<span class="keyword">True</span>,</span><br><span class="line">            <span class="comment"># 在 0 和 1 之间浮动。用作验证集的训练数据的比例</span></span><br><span class="line">            validation_split=<span class="number">0.1</span>  </span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接下来生成测试集，可以参考训练集的写法</span></span><br><span class="line">    validation_data = ImageDataGenerator(</span><br><span class="line">            rescale=<span class="number">1.</span> / <span class="number">255</span>,</span><br><span class="line">            validation_split=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    train_generator = train_data.flow_from_directory(</span><br><span class="line">            <span class="comment"># 提供的路径下面需要有子目录</span></span><br><span class="line">            data_path, </span><br><span class="line">            <span class="comment"># 整数元组 (height, width)，默认：(256, 256)。 所有的图像将被调整到的尺寸。</span></span><br><span class="line">            target_size=(<span class="number">150</span>, <span class="number">150</span>),</span><br><span class="line">            <span class="comment"># 一批数据的大小</span></span><br><span class="line">            batch_size=<span class="number">16</span>,</span><br><span class="line">            <span class="comment"># "categorical", "binary", "sparse", "input" 或 None 之一。</span></span><br><span class="line">            <span class="comment"># 默认："categorical",返回one-hot 编码标签。</span></span><br><span class="line">            class_mode=<span class="string">'categorical'</span>,</span><br><span class="line">            <span class="comment"># 数据子集 ("training" 或 "validation")</span></span><br><span class="line">            subset=<span class="string">'training'</span>, </span><br><span class="line">            seed=<span class="number">0</span>)</span><br><span class="line">    validation_generator = validation_data.flow_from_directory(</span><br><span class="line">            data_path,</span><br><span class="line">            target_size=(<span class="number">150</span>, <span class="number">150</span>),</span><br><span class="line">            batch_size=<span class="number">16</span>,</span><br><span class="line">            class_mode=<span class="string">'categorical'</span>,</span><br><span class="line">            subset=<span class="string">'validation'</span>,</span><br><span class="line">            seed=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> train_generator, validation_generator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(train_generator, validation_generator, save_model_path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    模型的建立</span></span><br><span class="line"><span class="string">    本次实验采用Vgg16模型</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    vgg16_model = VGG16(weights=<span class="string">'imagenet'</span>,include_top=<span class="keyword">False</span>, input_shape=(<span class="number">150</span>,<span class="number">150</span>,<span class="number">3</span>))</span><br><span class="line">    top_model = Sequential()</span><br><span class="line">    top_model.add(Flatten(input_shape=vgg16_model.output_shape[<span class="number">1</span>:]))</span><br><span class="line">    top_model.add(Dense(<span class="number">256</span>,activation=<span class="string">'relu'</span>))</span><br><span class="line">    top_model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">    top_model.add(Dense(<span class="number">6</span>,activation=<span class="string">'softmax'</span>))</span><br><span class="line"></span><br><span class="line">    model = Sequential()</span><br><span class="line">    model.add(vgg16_model)</span><br><span class="line">    model.add(top_model)</span><br><span class="line">    <span class="comment"># 编译模型, 采用 compile 函数: https://keras.io/models/model/#compile</span></span><br><span class="line">    model.compile(</span><br><span class="line">             <span class="comment"># 是优化器, 主要有Adam、sgd、rmsprop等方式。</span></span><br><span class="line">            optimizer=SGD(lr=<span class="number">1e-3</span>,momentum=<span class="number">0.9</span>),</span><br><span class="line">            <span class="comment"># 损失函数,多分类采用 categorical_crossentropy</span></span><br><span class="line">            loss=<span class="string">'categorical_crossentropy'</span>,</span><br><span class="line">            <span class="comment"># 是除了损失函数值之外的特定指标, 分类问题一般都是准确率</span></span><br><span class="line">            metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">    model.fit_generator(</span><br><span class="line">            <span class="comment"># 一个生成器或 Sequence 对象的实例</span></span><br><span class="line">            generator=train_generator,</span><br><span class="line">            <span class="comment"># epochs: 整数，数据的迭代总轮数。</span></span><br><span class="line">            epochs=<span class="number">200</span>,</span><br><span class="line">            <span class="comment"># 一个epoch包含的步数,通常应该等于你的数据集的样本数量除以批量大小。</span></span><br><span class="line">            steps_per_epoch=<span class="number">2259</span> // <span class="number">16</span>,</span><br><span class="line">            <span class="comment"># 验证集</span></span><br><span class="line">            validation_data=validation_generator,</span><br><span class="line">             <span class="comment"># 在验证集上,一个epoch包含的步数,通常应该等于你的数据集的样本数量除以批量大小。</span></span><br><span class="line">            validation_steps=<span class="number">248</span> // <span class="number">16</span>,</span><br><span class="line">            )</span><br><span class="line">    model.save(save_model_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_mode</span><span class="params">(validation_generator, save_model_path)</span>:</span></span><br><span class="line">     <span class="comment"># 加载模型</span></span><br><span class="line">    model = load_model(<span class="string">'results/Ynnex1.h5'</span>)</span><br><span class="line">    <span class="comment"># 获取验证集的 loss 和 accuracy</span></span><br><span class="line">    loss, accuracy = model.evaluate_generator(validation_generator)</span><br><span class="line">    print(<span class="string">"\nLoss: %.2f, Accuracy: %.2f%%"</span> % (loss, accuracy * <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    加载模型和模型预测</span></span><br><span class="line"><span class="string">    主要步骤:</span></span><br><span class="line"><span class="string">        1.加载模型(请加载你认为的最佳模型)</span></span><br><span class="line"><span class="string">        2.图片处理</span></span><br><span class="line"><span class="string">        3.用加载的模型预测图片的类别</span></span><br><span class="line"><span class="string">    :param img: PIL.Image 对象</span></span><br><span class="line"><span class="string">    :return: string, 模型识别图片的类别, </span></span><br><span class="line"><span class="string">            共 'cardboard','glass','metal','paper','plastic','trash' 6 个类别</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 把图片转换成为numpy数组</span></span><br><span class="line">    img = img.resize((<span class="number">150</span>, <span class="number">150</span>))</span><br><span class="line">    img = image.img_to_array(img)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 加载模型,加载请注意 model_path 是相对路径, 与当前文件同级。</span></span><br><span class="line">    <span class="comment"># 如果你的模型是在 results 文件夹下的 dnn.h5 模型，则 model_path = 'results/dnn.h5'</span></span><br><span class="line">    model_path = <span class="string">'results/Ynnex1.h5'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 作业提交时测试用, 请勿删除此部分</span></span><br><span class="line">        model_path = os.path.realpath(__file__).replace(<span class="string">'main.py'</span>, model_path)</span><br><span class="line">    <span class="keyword">except</span> NameError:</span><br><span class="line">        model_path = <span class="string">'./'</span> + model_path</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># -------------------------- 实现模型预测部分的代码 ---------------------------</span></span><br><span class="line">    <span class="comment"># 加载模型</span></span><br><span class="line">    model = load_model(model_path)</span><br><span class="line">    <span class="comment"># expand_dims的作用是把img.shape转换成(1, img.shape[0], img.shape[1], img.shape[2])</span></span><br><span class="line">    x = np.expand_dims(img, axis=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 模型预测</span></span><br><span class="line">    y = model.predict(x)</span><br><span class="line">    <span class="comment"># 获取labels</span></span><br><span class="line">    labels = &#123;<span class="number">0</span>: <span class="string">'cardboard'</span>, <span class="number">1</span>: <span class="string">'glass'</span>, <span class="number">2</span>: <span class="string">'metal'</span>, <span class="number">3</span>: <span class="string">'paper'</span>, <span class="number">4</span>: <span class="string">'plastic'</span>, <span class="number">5</span>: <span class="string">'trash'</span>&#125;</span><br><span class="line">    <span class="comment"># -------------------------------------------------------------------------</span></span><br><span class="line">    predict = labels[np.argmax(y)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回图片的类别</span></span><br><span class="line">    <span class="keyword">return</span> predict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    深度学习模型训练流程,包含数据处理、创建模型、训练模型、模型保存、评价模型等。</span></span><br><span class="line"><span class="string">    如果对训练出来的模型不满意,你可以通过调整模型的参数等方法重新训练模型,直至训练出你满意的模型。</span></span><br><span class="line"><span class="string">    如果你对自己训练出来的模型非常满意,则可以提交作业!</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data_path = <span class="string">"./datasets/la1ji1fe1nle4ishu4ju4ji22-momodel/dataset-resized"</span>  <span class="comment"># 数据集路径</span></span><br><span class="line">    save_model_path = <span class="string">'results/Ynnex1.h5'</span>  <span class="comment"># 保存模型路径和名称</span></span><br><span class="line">    <span class="comment"># 获取数据</span></span><br><span class="line">    train_generator, validation_generator = processing_data(data_path)</span><br><span class="line">    <span class="comment"># 创建、训练和保存模型</span></span><br><span class="line">    model(train_generator, validation_generator, save_model_path)</span><br><span class="line">    <span class="comment"># 评估模型</span></span><br><span class="line">    evaluate_mode(validation_generator, save_model_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据测试</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_result</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> random,cv2</span><br><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> PIL <span class="keyword">import</span> Image </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导入相关包</span></span><br><span class="line">    <span class="keyword">import</span> glob, os</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    data_path = <span class="string">"./datasets/la1ji1fe1nle4ishu4ju4ji22-momodel/dataset-resized"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取数据名称列表</span></span><br><span class="line">    img_list = glob.glob(os.path.join(data_path, <span class="string">'*/*.jpg'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印数据集总量</span></span><br><span class="line">    print(<span class="string">"数据集总数量:"</span>, len(img_list))</span><br><span class="line">    print(<span class="string">"数据路径和名称:"</span>,img_list[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 从数据名称列表 img_list 中随机选取 6 个。</span></span><br><span class="line">    <span class="keyword">for</span> i, img_path <span class="keyword">in</span> enumerate(random.sample(img_list, <span class="number">6</span>)):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取图片</span></span><br><span class="line">        img = cv2.imread(img_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将图片从 BGR 模式转为 RGB 模式</span></span><br><span class="line">        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">        img = Image.fromarray(img)</span><br><span class="line">        plt.imshow(img)</span><br><span class="line">        plt.show()</span><br><span class="line">        res = predict(img)</span><br><span class="line">        print(res)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="comment">#     main()</span></span><br><span class="line">    test_result()</span><br></pre></td></tr></table></figure><p>VGG16说明：<a href="https://baijiahao.baidu.com/s?id=1667221544796169037&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1667221544796169037&amp;wfr=spider&amp;for=pc</a></p><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><h2 id="csdn"><a class="markdownIt-Anchor" href="#csdn"></a> CSDN</h2><ul><li><a href="https://blog.csdn.net/weixin_40651515/article/details/105804557" target="_blank" rel="noopener">基于深度学习的垃圾分类识别系统</a></li><li><a href="https://blog.csdn.net/qq_34218654/article/details/102885223" target="_blank" rel="noopener">基于深度学习的计算机视觉 - 垃圾分类（附源码）</a></li></ul><h2 id="github"><a class="markdownIt-Anchor" href="#github"></a> Github</h2><ul><li><a href="https://github.com/jzx-gooner/DL-wastesort" target="_blank" rel="noopener">基于深度学习的垃圾分类</a></li><li><strong><a href="https://github.com/wusaifei/garbage_classify" target="_blank" rel="noopener">garbage_classify</a></strong></li><li><strong><a href="https://github.com/Jack-Cherish/Deep-Learning" target="_blank" rel="noopener">Deep-Learning</a></strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;homework for ZJU: &lt;a href=&quot;https://mo.zju.edu.cn/homework/zju_ai_2020_ss&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mo.zju.edu.
      
    
    </summary>
    
    
      <category term="ZJU" scheme="https://nymrli.top/tags/ZJU/"/>
    
      <category term="ML" scheme="https://nymrli.top/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>细品单例模式</title>
    <link href="https://nymrli.top/2020/12/11/%E7%BB%86%E5%93%81%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nymrli.top/2020/12/11/细品单例模式/</id>
    <published>2020-12-11T02:25:26.000Z</published>
    <updated>2020-12-11T13:02:05.492Z</updated>
    
    <content type="html"><![CDATA[<p>虽然还没正式踏入开发就业浪潮中，但为了保证自己的代码质量，最近还是在学设计模式相关内容。以下为读《研磨设计模式》和《设计模式就该这样学：基于经典框架源码和真实业务场景》的读书笔记。</p><blockquote><p>GoF的《设计模式》就是设计模式的始祖、经典教科书。其描述严谨，举例恰当，分类组织，是应该反复细读的经典，两本书皆提及了GoF这本书，引用了GoF中的部分例子。</p></blockquote><h1 id="单例模式"><a class="markdownIt-Anchor" href="#单例模式"></a> 单例模式</h1><h2 id="虚拟场景"><a class="markdownIt-Anchor" href="#虚拟场景"></a> 虚拟场景：</h2><p>读取配置文件的内容（假设系统采用的是properties格式的配置文件）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.javass.dp.singleton.example1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来存放配置文件中参数A的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String parameterA;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来存放配置文件中参数B的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String parameterB;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getParameterA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> parameterA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getParameterB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> parameterB;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AppConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//调用读取配置文件的方法</span></span><br><span class="line">readConfig();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取配置文件，把配置文件中的内容读出来设置到属性上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">Properties p = <span class="keyword">new</span> Properties(); </span><br><span class="line">InputStream in = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in = AppConfig.class.getResourceAsStream(<span class="string">"AppConfig.properties"</span>);</span><br><span class="line">p.load(in);</span><br><span class="line"><span class="comment">//把配置文件中的内容读出来设置到属性上</span></span><br><span class="line"><span class="keyword">this</span>.parameterA = p.getProperty(<span class="string">"paramA"</span>);</span><br><span class="line"><span class="keyword">this</span>.parameterB = p.getProperty(<span class="string">"paramB"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"装载配置文件出错了，具体堆栈信息如下："</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="存在的问题"><a class="markdownIt-Anchor" href="#存在的问题"></a> 存在的问题：</h2><p>系统运行期间，如果存在很多个AppConfig的实例对象即配置内容，会严重浪费内存资源。实际上，对于AppConfig这种类<strong>在运行期间只要一个实例对象就够了</strong>。===&gt;单例模式</p><blockquote><p>定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p></blockquote><h2 id="单例实现思路"><a class="markdownIt-Anchor" href="#单例实现思路"></a> 单例实现思路：</h2><p>一个类能够被创建多个实例的问题根源在于类的构造方法是公开的，也就是可以让类的外部通过构造方法来创建多个实例。换句话说，只要类的构造方法能让类的外部访问，就没有办法去控制外部来创建这个类的实例个数。要想控制一个类只被创建一个实例，那么首要的问题就是要把<strong>创建实例的权限收回来，让类自身来负责自己类实例的创建工作</strong>，然后由这个类来提供外部可以访问这个类实例的方法，这就是单例模式的实现方式。</p><h2 id="单例模式的结构和说明"><a class="markdownIt-Anchor" href="#单例模式的结构和说明"></a> 单例模式的结构和说明：</h2><p><img src="/2020/12/11/细品单例模式/%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt="结构图"></p><p>Singleton：私有化构造函数来隐藏构造，从而自己负责创建Singleton类自己的唯一实例，并提供一个getlnstance的方法，让外部来访问这个类的唯一实例。</p><h2 id="基础级单例"><a class="markdownIt-Anchor" href="#基础级单例"></a> 基础级单例</h2><h3 id="饿汉式"><a class="markdownIt-Anchor" href="#饿汉式"></a> 饿汉式</h3><blockquote><p>所谓饿汉式，既然饿，那么在创建对象实例的时候就比较着急，饿了嘛，于是在<strong>装载类的时候就创建对象实例</strong>，写法如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现方式"><a class="markdownIt-Anchor" href="#实现方式"></a> 实现方式：</h4><ol><li>私有化构造方法</li><li>提供获取实例的方法getInstance</li><li>把获取实例的方法变成静态方法</li><li>定义存储实例的属性(成员变量)instance</li><li>将实例成员变量instance定义为静态的（由于要在静态方法中使用，被迫写成static，没用到static特性）</li><li>从而实现控制实例的创建</li></ol><h3 id="懒汉式"><a class="markdownIt-Anchor" href="#懒汉式"></a> 懒汉式</h3><blockquote><p>所谓懒汉式，既然是<strong>懒</strong>，那么在创建对象实例的时候就不着急，<strong>会一直等到马上要使用对象实例的时候才会创建</strong>，懒人嘛，总是推托不开的时候才去真正执行工作，因此在装载对象的时候不创建对象实例，写法如下：</p><p>懒汉式体现了延迟加载的思想，lazy load，这个lazy并不是懒惰的意思，而是延迟的意思，Lazy load在实际开发中是种很常见的思想，可以尽可能的节约资源。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个变量来存储创建好的类实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ▲私有化构造方法，将构造方法权限回收，好在内部控制创建实例的数目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个方法来为客户端提供类实例， 提供访问方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 一个Singleton的实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现方式-2"><a class="markdownIt-Anchor" href="#实现方式-2"></a> 实现方式：</h4><ol><li>私有化构造方法</li><li>提供获取实例的方法getInstance</li><li>把获取实例的方法变成静态方法</li><li>定义存储实例的属性(成员变量)instance</li><li>将实例成员变量instance定义为静态的（利用static在类装载的时候执行的特性，从而实现初始化）</li><li>从而实现控制实例的创建</li></ol><p>🎯以上两种就是最基础的单例写法，在不考虑复杂的条件下仅是满足了定义所要求的功能：运行期间只会被创建一个实例，切提供了一个全局唯一访问点（即getInstance方法）</p><h3 id="优缺点分析"><a class="markdownIt-Anchor" href="#优缺点分析"></a> 优缺点分析：</h3><ul><li>时间和空间：<ul><li>饿汉：空间换时间，类加载时就创建。因此当系统有大量单例对象存在时，系统初始化就会造成大量的内存浪费</li><li>懒汉：时间换空间，每次获取时都需要判断是否需要创建实例</li></ul></li><li>线程安全：<ul><li>饿汉：线程安全，因为虚拟机保证智慧加载以此类推，并且加载类的时候不会并发发生。</li><li>懒汉：需要加上synchronized关键字才能确认线程安全，但synchronized加在方法上会比较影响性能，导致大批量线程阻塞，从而导致程序性能大幅下降</li></ul></li></ul><h2 id="双重检查锁"><a class="markdownIt-Anchor" href="#双重检查锁"></a> 双重检查锁</h2><blockquote><p>为了保证加载时的性能-&gt;即不能采用饿汉，而是得采用懒汉lazy load的模式</p><p>那么如何较好地保证线程安全呢？===&gt;在懒汉式的基础上，我们得到了双重检查锁</p></blockquote><p>懒汉式的做法好比地铁进站限流，在寒风刺骨的冬天，所有人都在站前广场转圈，用户体验会不好；而双重检查就是设置两重检查，好比在入站门处和入厅后再闸口检票处再检查一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对保存实例的变量添加volatile的修饰。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//先检查实例是否存在，如果不存在才进入下面的同步块</span></span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//同步块，线程安全的创建实例</span></span><br><span class="line"><span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line"><span class="comment">//再次检查实例是否存在，如果不存在才真的创建实例</span></span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双重检查加锁机制和懒汉不同的在于并不是进入getInstace方法需要同步(由方法加锁-&gt;方法内部加对象锁)，而是不存在实例的时候才会进入同步块。此处阻塞的不是基于整个LazyDoubleCheckSingleton类的阻塞，而是在getInstance方法内部的阻塞，只要逻辑不复杂，对于调用者是感觉不到的。</p><p>▲注：被volatile修饰的变量的值不会被本地线程缓存，所有对该变量的读写都是直接操作共享内存的，从而使得多个线程能够正确的处理该变量。（由于Java1.4前对volatile关键字实现有问题，因此双重检查锁适用于Java1.5以后）。此外<u>volatile可能会屏蔽JVM一些必要的代码优化，所以会降低运行效率</u>，因此一般建议没有特别需要，不要使用volatile。因此，<strong>不建议系统中大量使用双重检查锁</strong>。</p><h2 id="静态内部类式类级内部类"><a class="markdownIt-Anchor" href="#静态内部类式类级内部类"></a> 静态内部类式（类级内部类）</h2><blockquote><p>虽然双重检查锁较之懒汉和饿汉有了不少优化，但双重检查锁仍存在1.volatile性能、2.synchronized性能，有没有什么办法不使用synchronized关键字，还能实现延迟加载和线程安全呢？==&gt;静态内部类式</p></blockquote><h3 id="什么是类级内部类"><a class="markdownIt-Anchor" href="#什么是类级内部类"></a> 什么是类级内部类？</h3><p>简单点说，<strong>类级内部类</strong>指的是，有<u>static修饰的成员式内部类</u>。如果没有static修饰的成员式内部类被称为<strong>对象级内部类</strong>。</p><ul><li>类级内部类相当于其外部类的static成分，<u>它的对象(类级内部类对象)与外部类对象间不存在依赖关系</u>，因此可直接创建。而对象级内部类的实例，是绑定在外部对象实例中的。</li><li>类级内部类中，可以定义静态的方法。在<u>内部类的静态方法</u>中只能够引用外部类中的<strong>静态</strong>成员方法或者成员变量。</li><li><strong>类级内部类相当于其外部类的成员，只有在第一次被使用的时候才会被装载。</strong></li></ul><h4 id="jvm隐含执行同步的情况"><a class="markdownIt-Anchor" href="#jvm隐含执行同步的情况"></a> JVM隐含执行同步的情况：</h4><ul><li>由静态初始化器（在静态字段上或static{}块中的初始化器）初始化数据时</li><li>访问final字段时</li><li>在创建线程之前创建对象时</li><li>线程可以看见它将要处理的对象时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyStaticInnerClassSingleton</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类级的内部类，也就是静态的成员式内部类，该内部类的实例与外部类的实例没有绑定关系，</span></span><br><span class="line"><span class="comment"> * 而且只有被调用到才会装载，从而实现了延迟加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态初始化器，由JVM来保证线程安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> LazyStaticInnerClassSingleton instance = <span class="keyword">new</span> LazyStaticInnerClassSingleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 私有化构造方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LazyStaticInnerClassSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyStaticInnerClassSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决反射破坏单例问题"><a class="markdownIt-Anchor" href="#解决反射破坏单例问题"></a> 解决反射破坏单例问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyStaticInnerClassSingleton</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类级的内部类，也就是静态的成员式内部类，该内部类的实例与外部类的实例没有绑定关系，</span></span><br><span class="line"><span class="comment"> * 而且只有被调用到才会装载，从而实现了延迟加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态初始化器，由JVM来保证线程安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> LazyStaticInnerClassSingleton instance = <span class="keyword">new</span> LazyStaticInnerClassSingleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 私有化构造方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LazyStaticInnerClassSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LazyStaticInnerClassSingleton.instance != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不允许创建多个实例"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyStaticInnerClassSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举式单例"><a class="markdownIt-Anchor" href="#枚举式单例"></a> 枚举式单例</h2><blockquote><p>虽然静态内部类式已经接近完美了，但还不够优雅，还有没有更优雅的写法呢？—&gt;枚举式单例</p></blockquote><p>对枚举的观点：</p><ul><li>Java的枚举类型实质上是功能齐全的类，因此可以有自己的属性和方法。</li><li>Java枚举类型的基本思想是通过公有的静态final域为每个<u>枚举常量</u>导出<u>实例的类</u>。</li><li>从某个角度讲，<u>枚举</u>是单例的泛型化，<u>本质上是<em>单元素</em>的枚举</u>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个枚举的元素,它就代表了Singleton的一个实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">uniqueInstance;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 示意方法，单例可以有自己的操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonOperation</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//功能处理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用枚举来实现单实例控制会更加简洁，而且<strong>无偿地提供了防序列化（需要增加readResove方法）、反射破坏的机制</strong>，并由JVM从根本上提供保障，绝对防止多次实例化，是更简洁、高效、安全的实现单例的方式。至于为什么可以这么玩，可以看《设计模式就该这样学：基于经典框架源码和真实业务场景》中的源码分析</p><h2 id="容器式单例"><a class="markdownIt-Anchor" href="#容器式单例"></a> 容器式单例</h2><blockquote><p>适用于需要大量创建单例对象的场景，便于管理，但它是非线程安全的。Spring中有用到容器式单例的写法。容器一般就是一个Map</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ContainerSingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; ioc = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ioc) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ioc.containsKey(className)) &#123;</span><br><span class="line">                Object obj = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    obj = Class.forName(className).newInstance();</span><br><span class="line">                    ioc.put(className, obj);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ioc.get(className)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模式讲解"><a class="markdownIt-Anchor" href="#模式讲解"></a> 模式讲解：</h2><p>单例模式的范围为一个虚拟机的范围，因为加载类的载类的功能是虚拟机的，一个虚拟机在通过自己的ClassLoader 装载饿汉式实现单例类的时候就会创建一个类的实例。</p><p>▲所以需要注意的是，如果一个虚拟机里面有很多个ClassLoader，而且<u>这些ClassLoader都装载某个类的话(针对饿汉式)，就算这个类是单例，它也会产生很多个实例</u>。当然，如果一个机器上有多个虚拟机，那么每个虚拟机里面都应该至少有一个这个类的实例，也就是说整个机器。<strong>所以这边讨论的单例都不适用于集群环境。</strong></p><p>▲单例模式的本质：控制实例数目</p><h2 id="应用场景"><a class="markdownIt-Anchor" href="#应用场景"></a> 应用场景：</h2><blockquote><p>对于Java来说单例模式就是要保证在一个JVM中只存在单一实例</p></blockquote><ul><li>需要频繁创建的一些类，使用单例可以降低系统的内存压力，减少GC</li><li>某些类创建实例时占用资源较多，或实例化耗时较长，且经常使用</li><li>频繁访问数据库或文件的对象</li><li>对于一些控制硬件级别的操作，或者从系统上来讲应当是单一控制逻辑的操作，如果有多个实例，则无法保证逻辑的统一性。</li></ul><p>p.s. 抽象工厂模式中具体的工厂类就是一个单例</p><h2 id="单例模式的优点"><a class="markdownIt-Anchor" href="#单例模式的优点"></a> 单例模式的优点：</h2><ol><li>可以保证内存中只有一个实例，减少了内存的开销</li><li>可以避免对资源的多重占用</li><li>设置全局访问点，可以优化和共享资源的访问</li></ol><h2 id="单例模式的缺点"><a class="markdownIt-Anchor" href="#单例模式的缺点"></a> 单例模式的缺点：</h2><ol><li>没有接口，扩展困难。如果要扩展，则除了修改原来的代码，没有第二种途径， 违背了开闭原则。好在的是，一般修改单例也比较简单</li><li>在并发测试中，单例不利于代码调试。在调试过程总，如果单例代码没有执行完，也不能模拟生成一个恶心的对象</li><li>单例模式的功能代码通常写在一个类中，如果功能设计不合理，很容易违背单一职责原则</li></ol><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><h2 id="lazy-load-缓存思想"><a class="markdownIt-Anchor" href="#lazy-load-缓存思想"></a> Lazy load-&gt;缓存思想</h2><p>缓存使用场景：当某些资源或者数据被频繁地使用，而这些资源或数据存储在系统外部，比如数据库、硬盘文件等，那么每次操作这些数据的时候都得从数据库或者硬盘上去获取，速度会很慢，将造成性能问题。<br>一个简单的解决方法就是：把这些数据<strong>缓存到内存</strong>里面，每次操作的时候，先到内存里面找，看有没有这些数据，如果有，就直接使用，如果没有就获取它，并设置到缓存中，<u>下一次访问的时候就可以直接从内存中获取了</u>，从而节省大量的时间。当然，缓存是一种<strong>典型的空间换时间</strong>的方案。</p><h3 id="缓存基本实现"><a class="markdownIt-Anchor" href="#缓存基本实现"></a> 缓存基本实现</h3><p>在Java开发中最常见的一种实现缓存的方式就是使用<em>Map</em>，基本步骤如下。<br>（1）先到缓存里面查找，看看是否存在需要使用的数据。<br>（2）如果没有找到，那么就创建一个满足要求的数据，然后把这个数据设置到缓存中，以备下次使用。如果找到了相应的数据，或者是创建了相应的数据，那就直接使用这个数据。</p><h2 id="多例控制模式"><a class="markdownIt-Anchor" href="#多例控制模式"></a> 多例控制模式</h2><p>▲单例模式的本质：控制实例数目，只要按照这种思想，我们除了控制单例以外，还可以限制实例具体数目为2、3、4…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.javass.dp.singleton.example9;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单演示如何扩展单例模式，控制实例数目为3个 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneExtend</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个缺省的key值的前缀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DEFAULT_PREKEY = <span class="string">"Cache"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存实例的容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,OneExtend&gt; map = <span class="keyword">new</span> HashMap&lt;String,OneExtend&gt;();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来记录当前正在使用第几个实例，到了控制的最大数目，就返回从1开始</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义控制实例的最大数目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_MAX = <span class="number">3</span>; </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">OneExtend</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OneExtend <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">String key = DEFAULT_PREKEY+num;</span><br><span class="line">OneExtend oneExtend = map.get(key);</span><br><span class="line"><span class="keyword">if</span>(oneExtend==<span class="keyword">null</span>)&#123;</span><br><span class="line">oneExtend = <span class="keyword">new</span> OneExtend();</span><br><span class="line">map.put(key, oneExtend);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把当前实例的序号加1</span></span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">if</span>(num &gt; NUM_MAX)&#123;</span><br><span class="line"><span class="comment">//如果实例的序号已经达到最大数目了，那就重复从1开始获取</span></span><br><span class="line">num = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> oneExtend;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">OneExtend t1 = getInstance();</span><br><span class="line">OneExtend t2 = getInstance();</span><br><span class="line">OneExtend t3 = getInstance();</span><br><span class="line">OneExtend t4 = getInstance();</span><br><span class="line">OneExtend t5 = getInstance();</span><br><span class="line">OneExtend t6 = getInstance();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"t1=="</span>+t1);</span><br><span class="line">System.out.println(<span class="string">"t2=="</span>+t2);</span><br><span class="line">System.out.println(<span class="string">"t3=="</span>+t3);</span><br><span class="line">System.out.println(<span class="string">"t4=="</span>+t4);</span><br><span class="line">System.out.println(<span class="string">"t5=="</span>+t5);</span><br><span class="line">System.out.println(<span class="string">"t6=="</span>+t6);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然还没正式踏入开发就业浪潮中，但为了保证自己的代码质量，最近还是在学设计模式相关内容。以下为读《研磨设计模式》和《设计模式就该这样学：基于经典框架源码和真实业务场景》的读书笔记。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GoF的《设计模式》就是设计模式的始祖、经典教科书。
      
    
    </summary>
    
    
      <category term="计算机基础知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>浙大2020春夏-人工智能习题3——图像恢复</title>
    <link href="https://nymrli.top/2020/12/09/%E6%B5%99%E5%A4%A72020%E6%98%A5%E5%A4%8F-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B9%A0%E9%A2%983%E2%80%94%E2%80%94%E5%9B%BE%E5%83%8F%E6%81%A2%E5%A4%8D/"/>
    <id>https://nymrli.top/2020/12/09/浙大2020春夏-人工智能习题3——图像恢复/</id>
    <published>2020-12-09T05:20:46.000Z</published>
    <updated>2020-12-17T07:27:31.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="习题3-图像恢复"><a class="markdownIt-Anchor" href="#习题3-图像恢复"></a> <strong>习题3</strong> - 图像恢复</h1><h2 id="31-实验内容"><a class="markdownIt-Anchor" href="#31-实验内容"></a> 3.1 <strong>实验内容</strong></h2><p>图像是一种非常常见的信息载体，但是在图像的获取、传输、存储的过程中可能由于各种原因使得图像受到噪声的影响——称为图像退化。图像复原就是重建退化的图像，使其最大限度恢复景物原貌的处理。如何去除噪声的影响，恢复图像原本的信息是计算机视觉中的重要研究问题。</p><p>常见的图像恢复算法有基于空间域的中值滤波、基于小波域的小波去噪、基于偏微分方程的非线性扩散滤波等，在本次实验中，📌<strong>我们要对图像添加噪声，并对添加噪声的图像进行基于模型的去噪</strong>。</p><h2 id="32-实验要求"><a class="markdownIt-Anchor" href="#32-实验要求"></a> 3.2 <strong>实验要求</strong></h2><p>A. 生成受损图像。</p><ul><li>a) 受损图像是由原始图像添加了不同噪声遮罩（noise masks）得到的。</li><li>b) 噪声遮罩仅包含 {0,1} 值。对原图的噪声遮罩的可以每行分别用 0.8/0.4/0.6 的噪声比率产生的，即噪声遮罩每个通道每行 80%/40%/60% 的像素值为 0，其他为 1。</li></ul><p>B. 使用模型，进行图像恢复。</p><p>C. 评估误差为所有恢复图像与原始图像的 2-范数之和，此误差越小越好，其他评估方式包括 Cosine 相似度以及 SSIM 相似度。</p><p>D. 提交程序报告,请在本地编辑并命名为『程序报告.docx』或者 『程序报告.pdf』后， 上传到左侧文件列表中。</p><h2 id="33-实验环境"><a class="markdownIt-Anchor" href="#33-实验环境"></a> 3.3 <strong>实验环境</strong></h2><p>可以使用基于Python的 <a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_tutorials.html" target="_blank" rel="noopener">OpenCV</a> 库进行图像相关处理，使用 <a href="https://www.numpy.org/" target="_blank" rel="noopener">Numpy</a> 库进行相关数值运算。</p><h2 id="34-参考资料"><a class="markdownIt-Anchor" href="#34-参考资料"></a> 3.4 <strong>参考资料</strong></h2><p>OpenCV：<a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_tutorials.html" target="_blank" rel="noopener">https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_tutorials.html</a></p><p>Numpy：<a href="https://www.numpy.org/" target="_blank" rel="noopener">https://www.numpy.org/</a></p><h1 id="notes"><a class="markdownIt-Anchor" href="#notes"></a> notes</h1><h2 id="图像退化复原过程模型"><a class="markdownIt-Anchor" href="#图像退化复原过程模型"></a> 图像退化/复原过程模型</h2><p><img src="https://img-blog.csdn.net/20150715093119065" alt=""></p><h2 id="图像复原处理的过程"><a class="markdownIt-Anchor" href="#图像复原处理的过程"></a> 图像复原处理的过程</h2><p>设原始图像 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">f(x, y),</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mpunct">,</span></span></span></span> 则退化后的图像可以表示为</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">[</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>+</mo><mi>η</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(x, y)=H[f(x, y)]+\eta(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">η</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span></span></span></span> 为退化函数, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>η</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\eta(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">η</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 为加性柬声, 复原的日标是得到基于退化图像的一个估计 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>f</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">\hat{f}(x, y),</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2078799999999998em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.08332999999999999em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mpunct">,</span></span></span></span> 使得图像能够尽可能地贴近原始图像。 *若H是线性的、空间不变的过程, 则退化图像在空间频域中可以表示为</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>+</mo><mi>η</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(x, y)=h(x, y) * f(x, y)+\eta(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">η</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></p><p>进行傅立叶变换, 有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mi>F</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>+</mo><mi>N</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G(u, v)=H(u, v) F(u, v)+N(u, v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span></span></p><h2 id="1-图像增强与图像复原的区别"><a class="markdownIt-Anchor" href="#1-图像增强与图像复原的区别"></a> <strong>1. 图像增强与图像复原的区别</strong></h2><p>图像增强的目的是消除噪声，显现那些被模糊了的细节或简单地突出一幅图像中读者感兴趣的特征，不考虑图像质量下降的原因。图像复原是<strong>利用退化现象的某种先验知识</strong>，建立退化现象的数学模型，再根据模型进行反向的推演运算，以恢复原来的景物图像。因而，图像复原可以理解为图像降质过程的反向过程。建立图像复原的反向过程的数学模型，就是图像复原的主要任务。经过反向过程的数学模型的运算，要想恢复全真的景物图像比较困难。所以， 图像复原本身往往需要有一个质量标准， 即衡量接近全真景物图像的程度，或者说，对原图像的估计是否到达最佳的程度。</p><h2 id="2-噪声模型"><a class="markdownIt-Anchor" href="#2-噪声模型"></a> <strong>2. 噪声模型：</strong></h2><p>噪声主要来源于图像的获取和传输过程。</p><p>（1）图像传感器的工作情况受各种因素的影响，如图像获取中的环境条件和传感器元器件自身的质量。</p><p>（2）图像在传输过程中主要由于所用传输信道被干扰而受到噪声污染。</p><p>**噪声种类：**高斯噪声、瑞利噪声、伽马噪声、指数噪声、均匀分布噪声、脉冲噪声（椒盐噪声）</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">-4</span>:<span class="number">.1</span>:<span class="number">4</span>;</span><br><span class="line">subplot(<span class="number">321</span>)</span><br><span class="line">Y1=show_noise_pdf(<span class="string">'gaussian'</span>,x,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">plot(x,Y1);</span><br><span class="line">title(<span class="string">'高斯'</span>);</span><br><span class="line">subplot(<span class="number">322</span>)</span><br><span class="line">Y2=show_noise_pdf(<span class="string">'uniform'</span>,x,<span class="number">-3</span>,<span class="number">3</span>);</span><br><span class="line">plot(x,Y2);</span><br><span class="line">title(<span class="string">'均匀'</span>);</span><br><span class="line">subplot(<span class="number">323</span>)</span><br><span class="line">Y3=show_noise_pdf(<span class="string">'salt &amp; pepper'</span>,x);</span><br><span class="line">plot(x,Y3);</span><br><span class="line">title(<span class="string">'椒盐'</span>);</span><br><span class="line">subplot(<span class="number">324</span>)</span><br><span class="line">Y4=show_noise_pdf(<span class="string">'rayleigh'</span>,x,<span class="number">1</span>);</span><br><span class="line">plot(x,Y4);</span><br><span class="line">title(<span class="string">'瑞利'</span>);</span><br><span class="line">subplot(<span class="number">325</span>)</span><br><span class="line">Y5=show_noise_pdf(<span class="string">'exp'</span>,x,<span class="number">1</span>);</span><br><span class="line">plot(x,Y5);</span><br><span class="line">title(<span class="string">'指数'</span>);</span><br><span class="line">subplot(<span class="number">326</span>)</span><br><span class="line">Y6=show_noise_pdf(<span class="string">'gamma'</span>,x,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">plot(x,Y6);</span><br><span class="line">title(<span class="string">'伽马'</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180809103221221?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM5MDQ0MTc4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h3 id="噪声概率密度函数probability-density-function"><a class="markdownIt-Anchor" href="#噪声概率密度函数probability-density-function"></a> 噪声概率密度函数probability density function：</h3><h4 id="高斯噪声"><a class="markdownIt-Anchor" href="#高斯噪声"></a> 高斯噪声</h4><p>概率密度函数：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><msqrt><mrow><mn>2</mn><mi>π</mi><mi>σ</mi></mrow></msqrt></mfrac><msup><mi>e</mi><mrow><mi mathvariant="normal">−</mi><mfrac><mrow><mo stretchy="false">(</mo><mi>z</mi><mi mathvariant="normal">−</mi><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup></mrow></mfrac></mrow></msup></mrow><annotation encoding="application/x-tex">p(z)=\frac{1}{\sqrt{2πσ}}e^{−\frac{(z−μ)^2}{2σ^2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.8670900000000001em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.32909em;"><span style="top:-3.4534200000000004em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.5061857142857145em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9384399999999999em;"><span style="top:-2.93844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mord mtight">−</span><span class="mord mathdefault mtight">μ</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.49381428571428565em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span><br>均值：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">μ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span></span></span></span><br>方差：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">σ^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p><p>高斯噪声是一个均值为 0 方差为 $σ_n^2  $的正态分布，是一个加性噪声（在原图的基础上加上噪声即为加噪后的图象）。但要正确地给图片添加高斯噪声，还要取决于程序中读入图片的数据格式。</p><h4 id="瑞利噪声"><a class="markdownIt-Anchor" href="#瑞利噪声"></a> 瑞利噪声</h4><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> 概率密度函数： </mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>p</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mn>2</mn><mi>b</mi></mfrac><mo stretchy="false">(</mo><mi>z</mi><mo>−</mo><mi>a</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mrow><mo>−</mo><mo stretchy="false">(</mo><mi>z</mi><mo>−</mo><mi>a</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mi mathvariant="normal">/</mi><mi>b</mi></mrow></msup><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>≥</mo><mi>a</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>&lt;</mo><mi>a</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> 均值： </mtext><mi>μ</mi><mo>=</mo><mi>a</mi><mo>+</mo><msqrt><mrow><mi>π</mi><mi>b</mi></mrow></msqrt><mi mathvariant="normal">/</mi><mn>4</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> 方差: </mtext><msup><mi>σ</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mi>b</mi><mo stretchy="false">(</mo><mn>4</mn><mo>−</mo><mi>π</mi><mo stretchy="false">)</mo></mrow><mn>4</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}&amp;\text { 概率密度函数： }\\&amp;p(z)=\left\{\begin{array}{ll}\frac{2}{b}(z-a) e^{-(z-a)^{2} / b}, &amp; z \geq a \\0, &amp; z&lt;a\end{array}\right.\\&amp;\text { 均值： } \mu=a+\sqrt{\pi b} / 4\\&amp;\text { 方差: } \sigma^{2}=\frac{b(4-\pi)}{4}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:8.401015000000001em;vertical-align:-3.9505075000000014em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4505075000000005em;"><span style="top:-7.133967500000001em;"><span class="pstrut" style="height:3.52346em;"></span><span class="mord"></span></span><span style="top:-4.9505075000000005em;"><span class="pstrut" style="height:3.52346em;"></span><span class="mord"></span></span><span style="top:-2.645952499999999em;"><span class="pstrut" style="height:3.52346em;"></span><span class="mord"></span></span><span style="top:-0.5589524999999987em;"><span class="pstrut" style="height:3.52346em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9505075000000014em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4505075000000005em;"><span style="top:-7.133967500000001em;"><span class="pstrut" style="height:3.52346em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">概率密度函数：</span><span class="mord"> </span></span></span></span><span style="top:-4.9505075000000005em;"><span class="pstrut" style="height:3.52346em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5234599999999998em;"><span style="top:-3.53654em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999998em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">a</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord mtight">/</span><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span><span style="top:-2.33654em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0234600000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5234599999999998em;"><span style="top:-3.53654em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">a</span></span></span><span style="top:-2.33654em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0234600000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.645952499999999em;"><span class="pstrut" style="height:3.52346em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">均值：</span><span class="mord"> </span></span><span class="mord mathdefault">μ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981095em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault">b</span></span></span><span style="top:-2.941095em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.058904999999999985em;"><span></span></span></span></span></span><span class="mord">/</span><span class="mord">4</span></span></span><span style="top:-0.5589524999999987em;"><span class="pstrut" style="height:3.52346em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">方差</span><span class="mord">: </span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9505075000000014em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>曲线：<img src="https://img-blog.csdn.net/20150715100251107" alt="这里写图片描述"></p><h4 id="伽马爱尔兰噪声"><a class="markdownIt-Anchor" href="#伽马爱尔兰噪声"></a> 伽马（爱尔兰）噪声</h4><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> 概率密度函数： </mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>p</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><msup><mi>a</mi><mi>b</mi></msup><msup><mi>z</mi><mrow><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup></mrow><mrow><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mi>a</mi><mi>z</mi></mrow></msup><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>≥</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>&lt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> 均值： </mtext><mi>μ</mi><mo>=</mo><mfrac><mi>b</mi><mi>a</mi></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> 方差： </mtext><msup><mi>σ</mi><mn>2</mn></msup><mo>=</mo><mfrac><mi>b</mi><msup><mi>a</mi><mn>2</mn></msup></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}&amp;\text { 概率密度函数： }\\&amp;p(z)=\left\{\begin{array}{ll}\frac{a^{b} z^{(b-1)}}{(b-1) !} e^{-a z}, &amp; z \geq 0 \\0, &amp; z&lt;0\end{array}\right.\\&amp;\text { 均值： } \mu=\frac{b}{a}\\&amp;\text { 方差： } \sigma^{2}=\frac{b}{a^{2}}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.51491em;vertical-align:-4.507455000000001em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.007455em;"><span style="top:-7.917455em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span><span style="top:-5.507455em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span><span style="top:-2.585985em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span><span style="top:-0.228544999999999em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.507455000000001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.007455em;"><span style="top:-7.917455em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">概率密度函数：</span><span class="mord"> </span></span></span></span><span style="top:-5.507455em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6453499999999999em;"><span style="top:-3.64535em;"><span class="pstrut" style="height:3.0707em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0707em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">b</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9270285714285713em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9667142857142857em;"><span style="top:-2.966714285714285em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5357142857142856em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">b</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span><span style="top:-2.2853499999999998em;"><span class="pstrut" style="height:3.0707em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1453500000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6453499999999999em;"><span style="top:-3.64535em;"><span class="pstrut" style="height:3.0707em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.2853499999999998em;"><span class="pstrut" style="height:3.0707em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1453500000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.585985em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">均值：</span><span class="mord"> </span></span><span class="mord mathdefault">μ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-0.228544999999999em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">方差：</span><span class="mord"> </span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.507455000000001em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>曲线：<img src="https://img-blog.csdn.net/20150715101947373" alt="这里写图片描述"><br>注意：只有当分母是Γ(b)Γ(b)时，才是伽马噪声，如表达式中的，该密度近似称为爱尔兰密度</p><h4 id="指数分布噪声"><a class="markdownIt-Anchor" href="#指数分布噪声"></a> 指数分布噪声</h4><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> 概率密度函数： </mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>p</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><msup><mi>e</mi><mrow><mo>−</mo><mi>a</mi><mi>z</mi></mrow></msup><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>≥</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>&lt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> 均值: </mtext><mi>μ</mi><mo>=</mo><mfrac><mn>1</mn><mi>a</mi></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> 方差： </mtext><msup><mi>σ</mi><mn>2</mn></msup><mo>=</mo><mfrac><mn>1</mn><msup><mi>a</mi><mn>2</mn></msup></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}&amp;\text { 概率密度函数： }\\&amp;p(z)=\left\{\begin{array}{ll}a e^{-a z}, &amp; z \geq 0 \\0, &amp; z&lt;0\end{array}\right.\\&amp;\text { 均值: } \mu=\frac{1}{a}\\&amp;\text { 方差： } \sigma^{2}=\frac{1}{a^{2}}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:8.814910000000001em;vertical-align:-4.157455000000001em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.657455em;"><span style="top:-7.267455em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span><span style="top:-5.157454999999999em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span><span style="top:-2.5859849999999995em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span><span style="top:-0.2785449999999997em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.157455000000001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.657455em;"><span style="top:-7.267455em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">概率密度函数：</span><span class="mord"> </span></span></span></span><span style="top:-5.157454999999999em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.5859849999999995em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">均值</span><span class="mord">: </span></span><span class="mord mathdefault">μ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-0.2785449999999997em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">方差：</span><span class="mord"> </span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.157455000000001em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="脉冲椒盐噪声"><a class="markdownIt-Anchor" href="#脉冲椒盐噪声"></a> 脉冲（椒盐）噪声</h4><p>概率密度函数： 双极脉冲口声 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>P</mi><mi>a</mi></msub><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>=</mo><mi>a</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>P</mi><mi>b</mi></msub><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>=</mo><mi>b</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext> 其他 </mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">p(z)=\left\{\begin{array}{ll}P_{a}, &amp; z=a \\ P_{b}, &amp; z=b \\ 0, &amp; \text { 其他 }\end{array}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">a</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">b</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">其他</span><span class="mord"> </span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br>如果b&gt;a，灰度值b在图像中将显示为一个亮点，相反，a的值将显示为一个暗点。若Pa或Pb为零，则脉冲噪声为单极脉冲。如果两者都不为零，尤其在它们近似相等时，脉冲噪声将类似于随机分布在图像上的胡椒和盐粉微粒，因此双极脉冲噪声也称为椒盐噪声。</p><p><img src="https://img-blog.csdn.net/20150715103542532" alt=""></p><h2 id="3-空间滤波"><a class="markdownIt-Anchor" href="#3-空间滤波"></a> <strong>3. 空间滤波</strong></h2><blockquote><p>图像滤波器又叫做<strong>掩模</strong>、<strong>核</strong>、<strong>模板</strong>或<strong>窗口</strong>，是与原图像的子图像有相同维数的子图像，滤波器子图像中的值是<strong>系数值</strong>，不是像素值，滤波器的处理结果是子图像中心位置像素值等于被掩住位置的像素值与滤波器中系数的<strong>点积和</strong>。</p></blockquote><p><u>无论是平均平滑还是高斯平滑，在处理图像噪声时，都或多或少会对图片产生一定的模糊</u>，损失部分信息。较为理想的情况，是可以选择性地进行滤波，只在噪声区域进行平滑，而在无噪声区域不进行平滑，将模糊的影响降到最低，这就是自适应性滤波的思想。通常噪声的存在，可能会使得附近邻域内，极值的上下差距较大，或者是方差较大，我们可以设置一定的阈值来判断该点是否需要进行平滑。不过这个不是该章节的内容。</p><p>​    不同的滤波器在处理不同类型的噪声是效果不同，对于线性平滑滤波，在处理像素邻域内的噪声点时，噪声或多或少都会影响该点的像素值计算(以高斯平滑为例，距离近则影响大，距离远则影响小，与距离的平方呈反比)；但是中值滤波通常可以将噪声点直接忽略掉。同时，中值滤波在降噪的同时引起的模糊效应较低。中值滤波的一种典型应用，就是用来消除椒盐(salt &amp; pepper)噪声。</p><hr><p>**空间滤波器种类：**均值滤波器（适于高斯噪声）、统计排序滤波器（适于椒盐噪声）、自适应局部噪声消除滤波器（适于所有噪声）、自适应中值滤波器（适于椒盐噪声）。</p><p>空域滤波器分为<strong>平滑滤波器</strong>和<strong>锐化滤波器</strong>，平滑滤波用<strong>积分</strong>实现，锐化滤波用<strong>微分</strong>实现</p><ul><li><p>平滑滤波器（低通滤波器）：------体现一种平均，所以模板均下来一般为1</p><ul><li><p>作用：****模糊处理****:去除图像中一些不重要的细节、减小噪声</p></li><li><p>分类：</p><p>1.<strong>线性滤波器</strong>：均值滤波器</p><p>2.<strong>非线性滤波器</strong>（一般指统计排序滤波器）： 中值滤波器</p></li></ul></li><li><p>**锐化滤波（高通滤波器）****-----**体现一种插值，所以模板均下来是0</p><ul><li>作用：1.提取图像的边缘信息、2.突出图像边缘及细节、3.拟补平滑滤波造成的边缘模糊</li></ul></li></ul><h3 id="31-均值滤波器均值滤波器"><a class="markdownIt-Anchor" href="#31-均值滤波器均值滤波器"></a> 3.1 均值滤波器——均值滤波器</h3><ul><li><p>算术均值滤波器 描述: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>f</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>∈</mo><msub><mi>S</mi><mrow><mi>x</mi><mi>y</mi></mrow></msub></mrow></msub><mi>g</mi><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat{f}(x, y)=\sum_{(s, t) \in S_{x y}} g(s, t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2078799999999998em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.08332999999999999em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.24703em;vertical-align:-0.49703em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999982em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.49703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span><br>结果：模糊了结果, 降低了口声<br>适用：适用于高斯口声或均匀随机噪声</p></li><li><p>几何均值滤波器 描述: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>f</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">[</mo><msub><mo>∏</mo><mrow><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>∈</mo><msub><mi>S</mi><mrow><mi>x</mi><mi>y</mi></mrow></msub></mrow></msub><mi>g</mi><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\hat{f}(x, y)=\left[\prod_{(s, t) \in S_{x y}} g(s, t)\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2078799999999998em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.08332999999999999em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.80002em;vertical-align:-0.65002em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">[</span></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999982em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.49703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">]</span></span></span></span></span></span><br>结果：和算术均值滤波器相比, 丟失更少的细节<br>适用：同算术均值滤波器</p></li><li><p>谐波均值滤波器 描述: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>f</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>m</mi><mi>n</mi></mrow><mrow><msub><mo>∑</mo><mrow><mo stretchy="false">(</mo><mi>z</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>∈</mo><msub><mi>S</mi><mrow><mi>z</mi><mi>y</mi></mrow></msub></mrow></msub><mfrac><mn>1</mn><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">\hat{f}(x, y)=\frac{m n}{\sum_{(z, y) \in S_{z y}} \frac{1}{g(s, t)}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2078799999999998em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.08332999999999999em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.518639em;vertical-align:-0.8232470000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.5989799999999996em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.21427571428571424em;"><span style="top:-2.214275714285714em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5357142857142856em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23056em;"><span style="top:-2.3000000000000003em;margin-left:-0.05764em;margin-right:0.1em;"><span class="pstrut" style="height:2.5em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.39444em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6031814285714286em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.640785714285714em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5377857142857143em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8232470000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>结果：谐波均值滤波器对于“盐”噪声效果更好，但是不适用于“胡椒”噪声。<br>适用：像高斯那样的噪声</p></li><li><p>逆谐波均值滤波器<br>其实Q称为滤波器的阶数，当Q值为正时，滤波器用于消除“胡椒”噪声；当Q值为负时，滤波器用于消除“盐”噪声。但它不能同时消除两种噪声，当Q值为0时，逆谐波滤波器变为算术均值滤波器；当Q为-1时，逆谐波均值滤波器退变为谐波均值滤波器。<br>适用：脉冲噪声<br>缺点：必须知道是明噪声还是暗噪声</p></li><li><p>高斯滤波</p><p>GaussianBlur， k窗口值都是奇数，如3、5、7，越靠近中心的权重越大。整个高斯核跟图像窗口做卷积后取其值</p></li></ul><h3 id="32-顺序统计滤波器非线性滤波器"><a class="markdownIt-Anchor" href="#32-顺序统计滤波器非线性滤波器"></a> 3.2 顺序统计滤波器——非线性滤波器</h3><ul><li><p>中值滤波器<br>描述: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>f</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi mathvariant="normal">median</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>∈</mo><msub><mi>S</mi><mrow><mi>x</mi><mi>y</mi></mrow></msub><mo stretchy="false">{</mo><mi>g</mi><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow></msub></mrow><annotation encoding="application/x-tex">\hat{f}(x, y)=\operatorname{median}_{(s, t) \in S_{x y}\{g(s, t)\}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2078799999999998em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.08332999999999999em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0719599999999998em;vertical-align:-0.3775199999999999em;"></span><span class="mop"><span class="mop"><span class="mord mathrm">m</span><span class="mord mathrm">e</span><span class="mord mathrm">d</span><span class="mord mathrm">i</span><span class="mord mathrm">a</span><span class="mord mathrm">n</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34479999999999994em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mopen mtight">{</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mclose mtight">}</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3775199999999999em;"><span></span></span></span></span></span></span></span></span></span>，中值滤波本质上是一个<strong>统计排序滤波器</strong>，是以该点为中心的的邻域内的所有像素的统计排序中值作为该点的响应；而平滑就是加权平均数作为响应，概念上有一定差别。<br>适用：对单极或双极脉冲噪声非常有效</p><p>视频讲解：<a href="https://www.bilibili.com/video/BV1fQ4y1N7EP?from=search&amp;seid=11848827709822211739" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1fQ4y1N7EP?from=search&amp;seid=11848827709822211739</a></p></li><li><p>最大值滤波器 描述: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>f</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo><mi>max</mi><mo>⁡</mo></mo><mrow><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>∈</mo><msub><mi>S</mi><mrow><mi>z</mi><mi>y</mi></mrow></msub></mrow></msub><mo stretchy="false">{</mo><mi>g</mi><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\hat{f}(x, y)=\max _{(s, t) \in S_{z y}}\{g(s, t)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2078799999999998em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.08332999999999999em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1275199999999999em;vertical-align:-0.3775199999999999em;"></span><span class="mop"><span class="mop">max</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34479999999999994em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3775199999999999em;"><span></span></span></span></span></span></span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mclose">}</span></span></span></span><br>结果:<br>适用：发现图像中的最亮点，故适用于去除“胡椒”噪声（黑色）</p></li><li><p>最小值滤波器 描述: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>f</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo><mi>min</mi><mo>⁡</mo></mo><mrow><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>∈</mo><msub><mi>S</mi><mrow><mi>x</mi><mi>y</mi></mrow></msub></mrow></msub><mo stretchy="false">{</mo><mi>g</mi><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\hat{f}(x, y)=\min _{(s, t) \in S_{x y}}\{g(s, t)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2078799999999998em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.08332999999999999em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1275199999999999em;vertical-align:-0.3775199999999999em;"></span><span class="mop"><span class="mop">min</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34479999999999994em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3775199999999999em;"><span></span></span></span></span></span></span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mclose">}</span></span></span></span><br>适用: 发现图像中的最暗点，适用于去除“盐”噪声（白色）</p></li><li><p>中点滤波器 描述: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>f</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">[</mo><msub><mo><mi>max</mi><mo>⁡</mo></mo><mrow><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>∈</mo><msub><mi>S</mi><mrow><mi>x</mi><mi>y</mi></mrow></msub></mrow></msub><mo stretchy="false">{</mo><mi>g</mi><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo><mo>+</mo><msub><mo><mi>min</mi><mo>⁡</mo></mo><mrow><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>∈</mo><msub><mi>S</mi><mrow><mi>x</mi><mi>y</mi></mrow></msub></mrow></msub><mo stretchy="false">{</mo><mi>g</mi><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\hat{f}(x, y)=\left[\max _{(s, t) \in S_{x y}}\{g(s, t)\}+\min _{(s, t) \in S_{x y}}\{g(s, t)\}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2078799999999998em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.08332999999999999em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.22752em;vertical-align:-0.3775199999999999em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mop"><span class="mop">max</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34479999999999994em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3775199999999999em;"><span></span></span></span></span></span></span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop"><span class="mop">min</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34479999999999994em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3775199999999999em;"><span></span></span></span></span></span></span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mclose">}</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span><br>适用: 结合了顺序统计和求平均，对高斯和均匀随机分布的噪声有很好的效果</p></li><li><p>修正后的阿尔法均值滤波體 描述: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>f</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>m</mi><mi>n</mi></mrow></mfrac><msub><mo>∑</mo><mrow><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>∈</mo><msub><mi>S</mi><mrow><mi>x</mi><mi>y</mi></mrow></msub></mrow></msub><mrow><mo fence="true">{</mo><msub><mi>g</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">\hat{f}(x, y)=\frac{1}{m n} \sum_{(s, t) \in S_{x y}}\left\{g_{r}(s, t)\right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2078799999999998em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.08332999999999999em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.342138em;vertical-align:-0.49703em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999982em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.49703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span><br>在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>x</mi><mi>y</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{xy}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>邻域内取点g（s，t）最高灰度值的d/2和最低灰度值的d/2，用gr(s,t)来代表剩余的mn-d个像素，由这些剩余像素点的平均值形成的滤波器称为修正后的阿尔法均值滤波器<br>当d=0时，退变为算术均值滤波器；当d=（mn-d）/2时，退变为中值滤波器。<br>适用：对多重混合的噪声有很好的效果</p></li></ul><h3 id="33-自适应滤波器"><a class="markdownIt-Anchor" href="#33-自适应滤波器"></a> 3.3 自适应滤波器</h3><p>自适应滤波器的行为变化基于由m*n矩形窗口Sxy定义的区域内图像的统计特性，它的性能要明显优于前面介绍的滤波器，代价是滤波器的复杂度。</p><ul><li><p>自适应、局部噪声消除滤波器<br>描述: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>f</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>−</mo><mfrac><msubsup><mi>σ</mi><mi>η</mi><mn>2</mn></msubsup><msubsup><mi>σ</mi><mi>L</mi><mn>2</mn></msubsup></mfrac><mrow><mo fence="true">[</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi>m</mi><mi>L</mi></msub><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\hat{f}(x, y)=g(x, y)-\frac{\sigma_{\eta}^{2}}{\sigma_{L}^{2}}\left[g(x, y)-m_{L}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2078799999999998em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.08332999999999999em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.842425em;vertical-align:-0.611085em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2313399999999999em;"><span style="top:-2.62642em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051142857142857em;"><span style="top:-2.160707142857143em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span style="top:-2.8448em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3392928571428572em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.60742em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.214em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">η</span></span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.42488571428571426em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.611085em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span><br>其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>σ</mi><mi>η</mi><mn>2</mn></msubsup><mo separator="true">,</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_{\eta}^{2}, g(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.197216em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">η</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 形成的噪声方差<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>m</mi><mi>L</mi></msub><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">m_{L},</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span> 局部像素点的均值<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>σ</mi><mi>L</mi><mn>2</mn></msubsup><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">\sigma_{L}^{2},</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.089439em;vertical-align:-0.275331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.424669em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.275331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span> 局部方差<br>滤波器性能预期：<br>(1) 如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>σ</mi><mi>η</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sigma_{\eta}^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.197216em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">η</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></span> 为零, 滤波器应该简单的返回 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 的值。<br>(2) 如果局部方差与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>σ</mi><mi>η</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sigma_{\eta}^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.197216em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">η</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></span> 是高度相关的, 那么滤波器要返回一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 的近似值。<br>(3) 如果两个方差相等, 希望滤波器返回区域Sxy上像素的算术均值。 个关键的问题是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>σ</mi><mi>η</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sigma_{\eta}^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.197216em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">η</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></span> 未知, 需要进行估计，合理的估计会带来较好的滤波效果。 适用：防止由于缺乏图像噪声方差知识而产生的无意义结果, 适用均值和方差确定的加性高斯口声。</p></li><li><p>自适应中值滤波器<br>描述：自适应中值滤波算法分两层进行<br>先考虑如下符号：</p><ul><li>Zmin=Sxy中灰度值的最小值</li><li>Zmax=Sxy中灰度值的最大值</li><li>Zmed=Sxy中灰度值的中间值</li><li>Zxy=在坐标（x，y）上的灰度值</li><li>Smax=Sxy允许的最大尺寸<br>算法流程：<br>A层： A1=Zmed-Zmin；<br>A2=Zmed-Zmax；<br>如果A1&gt;0且A2&lt;0（即Zmin</li></ul></li></ul><p>from: <a href="https://blog.csdn.net/xdmdth/article/details/46889091?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control" target="_blank" rel="noopener">https://blog.csdn.net/xdmdth/article/details/46889091?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control</a></p><h1 id="mycode"><a class="markdownIt-Anchor" href="#mycode"></a> Mycode</h1><h2 id="增加噪声"><a class="markdownIt-Anchor" href="#增加噪声"></a> 增加噪声</h2><h3 id="椒盐噪声"><a class="markdownIt-Anchor" href="#椒盐噪声"></a> 椒盐噪声</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoiseGenerator</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_pulse_noise</span><span class="params">(im, noise_ratios=<span class="number">0.3</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        给图像增加脉冲噪声</span></span><br><span class="line"><span class="string">        脉冲噪声：噪声点只有两种情况，全黑or全白，因此又称为椒盐噪声</span></span><br><span class="line"><span class="string">        :param im: 待处理的图像</span></span><br><span class="line"><span class="string">        :param noise_ratios: 噪声比</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        h, w = im.shape[<span class="number">0</span>:<span class="number">2</span>]                            <span class="comment"># 获得图像的长宽</span></span><br><span class="line">        p_size = h * w                                  <span class="comment"># 计算出图像的平面大小</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> range(int(p_size * noise_ratios)):     <span class="comment"># 噪声点数量</span></span><br><span class="line">            <span class="comment"># 获得噪声的随机位置</span></span><br><span class="line">            rand_h = random.randint(<span class="number">0</span>, h - <span class="number">1</span>)</span><br><span class="line">            rand_w = random.randint(<span class="number">0</span>, w - <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 两种处理: 1.像素点设置为全黑，2.像素点设置为全白</span></span><br><span class="line">            im[rand_h, rand_w, :] = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]) <span class="keyword">if</span> random.random() &lt; <span class="number">0.5</span> <span class="keyword">else</span> np.array([<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">        <span class="keyword">return</span> im</span><br></pre></td></tr></table></figure><h3 id="高斯噪声-2"><a class="markdownIt-Anchor" href="#高斯噪声-2"></a> 高斯噪声</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoiseGenerator</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_normalization</span><span class="params">(cls, image)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        将数据线性归一化</span></span><br><span class="line"><span class="string">        :param image: 图片矩阵，一般是np.array 类型</span></span><br><span class="line"><span class="string">        :return: 将归一化后的数据，在（0,1）之间</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 获取图片数据类型对象的最大值和最小值</span></span><br><span class="line">        info = np.iinfo(image.dtype)</span><br><span class="line">        <span class="comment"># 图像数组数据放缩在 0-1 之间</span></span><br><span class="line">        <span class="keyword">return</span> image.astype(np.double) / info.max</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_gaussian_noise</span><span class="params">(im, mean=<span class="number">0</span>, var=<span class="number">0.005</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        添加高斯噪声</span></span><br><span class="line"><span class="string">        :param im:</span></span><br><span class="line"><span class="string">        :param mean: 均值</span></span><br><span class="line"><span class="string">        :param var: 方差</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># image = np.array(im / 255, dtype=float)   # 将像素值归一， (0, 1)</span></span><br><span class="line">        image = NoiseGenerator._normalization(im)   <span class="comment"># 将像素值归一, (0, 1)</span></span><br><span class="line">        noise = np.random.normal(mean, var ** <span class="number">0.5</span>, image.shape)  <span class="comment"># 产生高斯噪声</span></span><br><span class="line">        noised_im = image + noise  <span class="comment"># 直接将归一化的图片与噪声相加</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">clip_img</span><span class="params">(noised_im)</span>:</span></span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            将值限制在(-1或0, 1)间，然后乘255恢复</span></span><br><span class="line"><span class="string">            :param noised_im: 加了噪声的图片</span></span><br><span class="line"><span class="string">            :return: clip过的图片</span></span><br><span class="line"><span class="string">            """</span><span class="string">""</span></span><br><span class="line">            low_clip = <span class="number">-1.</span> <span class="keyword">if</span> noised_im.min() &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0.</span> <span class="comment"># 如果最小值小于1, 则边界设为(-1, 1)</span></span><br><span class="line">            out_im = np.clip(noised_im, low_clip, <span class="number">1.0</span>)  <span class="comment"># 如果noised_im中像素小于low_clip则置为low_clip, 大于1值置为1</span></span><br><span class="line">            out_im = np.uint8(out_im * <span class="number">255</span>) <span class="comment"># 将(-1, 1)的浮点型转成(0, 255)的整型</span></span><br><span class="line">            <span class="keyword">return</span> out_im</span><br><span class="line">        <span class="keyword">return</span> clip_img(noised_im)</span><br></pre></td></tr></table></figure><p>▲这边肯定有人会好奇<code>out_im = np.uint8(out_im * 255)</code>并不是将其转换到(0, 255)，而是(-255, 255)。 解释一下：——注意这边的<code>np.uint8</code>可以看到这边的数据类型就是8位int，所以范围是0-255，因此即使num=-55，那么计算的结果其实是201； num=-1，结果其实是255。</p><p>法二：skimage</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> skimage</span><br><span class="line"><span class="keyword">import</span> pylab</span><br><span class="line">impath = <span class="string">"000001.jpg"</span></span><br><span class="line">image = io.imread(impath)</span><br><span class="line">img1 = image / <span class="number">255.00</span><span class="comment"># 均一化处理</span></span><br><span class="line">img2 = skimage.util.random_noise(image,mode=<span class="string">'gaussian'</span>,seed=<span class="keyword">None</span>,clip=<span class="keyword">True</span>)</span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.imshow(img1)</span><br><span class="line">plt.title(<span class="string">"Origin picture"</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.imshow(img2)</span><br><span class="line">plt.title(<span class="string">"Add Gaussian noise"</span>)</span><br><span class="line">pylab.show()</span><br><span class="line">plt.savefig(<span class="string">"noise_image.jpg"</span>)</span><br></pre></td></tr></table></figure><p>注意到：增加高斯噪声还可以用图像三方库完成的：<code>skimage.util.random_noise(image,mode ='gaussian',seed=None,clip=True)</code></p><h3 id="skimage的简介"><a class="markdownIt-Anchor" href="#skimage的简介"></a> skimage的简介</h3><blockquote><p>skimage即是Scikit-Image。基于python脚本语言开发的数字图片处理包，比如PIL,Pillow, opencv, scikit-image等。</p><p>PIL和Pillow只提供最基础的数字图像处理，功能有限；opencv实际上是一个c++库，只是提供了python接口，更新速度非常慢。scikit-image是基于<strong>scipy</strong>的一款图像处理包，它将图片作为numpy数组进行处理，正好与matlab一样，因此，我们最终选择scikit-image进行数字图像处理。</p><p>skimage包的全称是scikit-image SciKit (toolkit for SciPy) ，它对scipy.ndimage进行了扩展，提供了更多的图片处理功能。它是由python语言编写的，由scipy 社区开发和维护。skimage包由许多的子模块组成，各个子模块提供不同的功能。</p></blockquote><table><thead><tr><th>子模块名称</th><th style="text-align:center">主要实现功能</th></tr></thead><tbody><tr><td>io</td><td style="text-align:center">读取、保存和显示图片或视频</td></tr><tr><td>data</td><td style="text-align:center">提供一些测试图片和样本数据</td></tr><tr><td>color</td><td style="text-align:center">颜色空间变换</td></tr><tr><td>filters</td><td style="text-align:center">图像增强、边缘检测、排序滤波器、自动阈值等</td></tr><tr><td>draw</td><td style="text-align:center">操作于numpy数组上的基本图形绘制，包括线条、矩形、圆和文本等</td></tr><tr><td>transform</td><td style="text-align:center">几何变换或其它变换，如旋转、拉伸和拉东变换等</td></tr><tr><td>morphology</td><td style="text-align:center">形态学操作，如开闭运算、骨架提取等</td></tr><tr><td>exposure</td><td style="text-align:center">图片强度调整，如亮度调整、直方图均衡等</td></tr><tr><td>feature</td><td style="text-align:center">特征检测与提取等</td></tr><tr><td>measure</td><td style="text-align:center">图像属性的测量，如相似性或等高线等</td></tr><tr><td>segmentation</td><td style="text-align:center">图像分割</td></tr><tr><td>restoration</td><td style="text-align:center">图像恢复</td></tr><tr><td>util</td><td style="text-align:center">通用函数</td></tr></tbody></table><h3 id="数据加模糊高斯模糊"><a class="markdownIt-Anchor" href="#数据加模糊高斯模糊"></a> 数据加模糊——高斯模糊：</h3><ul><li>本质上是低通滤波器，输出图像的每个像素点是原图像上对应像素点与周围像素点的加权和。</li><li>即用高斯分布权值矩阵与原始图像矩阵做卷积运算。</li></ul><p><a href="python%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87%E5%8A%A0%E9%81%AE%E6%8C%A1%E3%80%81%E5%99%AA%E5%A3%B0%E3%80%81%E6%A8%A1%E7%B3%8A">https://blog.csdn.net/qq_37995260/article/details/100351153</a></p><p><a href="http://www.cppcns.com/jiaoben/python/253632.html" target="_blank" rel="noopener">Python给图像添加噪声具体操作</a></p><h2 id="增加噪声noise_mask_image"><a class="markdownIt-Anchor" href="#增加噪声noise_mask_image"></a> 增加噪声noise_mask_image</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CGK提供的，巧用了np.random.choice，学习了</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noise_mask_image</span><span class="params">(img, noise_ratio)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据题目要求生成受损图片</span></span><br><span class="line"><span class="string">    :param img: 图像矩阵，一般为 np.ndarray</span></span><br><span class="line"><span class="string">    :param noise_ratio: 噪声比率，可能值是0.4/0.6/0.8</span></span><br><span class="line"><span class="string">    :return: noise_img 受损图片, 图像矩阵值 0-1 之间，数据类型为 np.array, </span></span><br><span class="line"><span class="string">             数据类型对象 (dtype): np.double, 图像形状:(height,width,channel),通道(channel) 顺序为RGB</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 受损图片初始化</span></span><br><span class="line">    noise_img = <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># -------------实现受损图像答题区域-----------------</span></span><br><span class="line">    mask = np.random.choice([<span class="number">0</span>, <span class="number">1</span>], size=(img.shape[<span class="number">0</span>],img.shape[<span class="number">1</span>],img.shape[<span class="number">2</span>]), p = [noise_ratio, <span class="number">1</span> - noise_ratio])</span><br><span class="line">    noise_img = mask * img</span><br><span class="line">    <span class="comment"># -----------------------------------------------</span></span><br><span class="line">    <span class="keyword">return</span> noise_img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 符合题意版本， 但是过不了样例，说产生的比例不正确</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noise_mask_image</span><span class="params">(img, noise_ratio)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据题目要求生成受损图片</span></span><br><span class="line"><span class="string">    :param img: 图像矩阵，一般为 np.ndarray</span></span><br><span class="line"><span class="string">    :param noise_ratio: 噪声比率，可能值是0.4/0.6/0.8</span></span><br><span class="line"><span class="string">    :return: noise_img 受损图片, 图像矩阵值 0-1 之间，数据类型为 np.array, </span></span><br><span class="line"><span class="string">             数据类型对象 (dtype): np.double, 图像形状:(height,width,channel),通道(channel) 顺序为RGB</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 受损图片初始化</span></span><br><span class="line">    noise_img = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------实现受损图像答题区域-----------------</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">    noise_img = deepcopy(img)</span><br><span class="line">    h, w = img.shape[: <span class="number">2</span>]  <span class="comment"># h为图片的长, w为图片的宽</span></span><br><span class="line"><span class="comment">#     noise_img = normalization(img)</span></span><br><span class="line">    <span class="keyword">for</span> dh <span class="keyword">in</span> range(h):  <span class="comment"># 遍历每行</span></span><br><span class="line">        cols = range(w)</span><br><span class="line">        mask_indexes = random.sample(cols, int(w * noise_ratio))</span><br><span class="line">        pixel_list = [<span class="number">0</span> <span class="keyword">if</span> i <span class="keyword">in</span> mask_indexes <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> cols]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> cols:</span><br><span class="line">            noise_img[dh, c, :] = noise_img[dh, c, :] * pixel_list[c]</span><br><span class="line">    <span class="comment"># -----------------------------------------------</span></span><br><span class="line">    noise_img = np.array(noise_img, dtype=<span class="string">'double'</span>)</span><br><span class="line">    <span class="keyword">return</span> noise_img</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/qi-yuan-008/p/12581979.html" target="_blank" rel="noopener">Python的random操作</a></p><h2 id="图像恢复"><a class="markdownIt-Anchor" href="#图像恢复"></a> 图像恢复</h2><h3 id="中值滤波demo"><a class="markdownIt-Anchor" href="#中值滤波demo"></a> 中值滤波demo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddNoise</span><span class="params">(src, dst, probility=<span class="number">0.05</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    salt_pepper增加噪声</span></span><br><span class="line"><span class="string">    :param src:</span></span><br><span class="line"><span class="string">    :param dst:</span></span><br><span class="line"><span class="string">    :param probility:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    imarray = np.array(Image.open(src))</span><br><span class="line">    height, width = imarray.shape[:<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">            <span class="keyword">if</span> np.random.random(<span class="number">1</span>) &lt; probility:</span><br><span class="line">                <span class="keyword">if</span> np.random.random(<span class="number">1</span>) &lt; <span class="number">0.5</span>:</span><br><span class="line">                    imarray[i, j, :] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    imarray[i, j, :] = <span class="number">255</span></span><br><span class="line">    new_im = Image.fromarray(imarray)</span><br><span class="line">    new_im.save(dst)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MedianFilter</span><span class="params">(src, dst, k=<span class="number">3</span>, padding=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    中值滤波</span></span><br><span class="line"><span class="string">    :param src:</span></span><br><span class="line"><span class="string">    :param dst:</span></span><br><span class="line"><span class="string">    :param k: 过滤器核大小</span></span><br><span class="line"><span class="string">    :param padding:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    imarray = np.array(Image.open(src))</span><br><span class="line">    height, width, channels = imarray.shape</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> padding:</span><br><span class="line">        edge = int((k - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> height - <span class="number">1</span> - edge &lt;= edge <span class="keyword">or</span> width - <span class="number">1</span> - edge &lt;= edge:</span><br><span class="line">            print(<span class="string">"The parameter k is to large."</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        new_arr = np.zeros((height, width, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(height):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> range(channels):           <span class="comment"># 处理3个通道</span></span><br><span class="line">                    <span class="keyword">if</span> i &lt;= edge - <span class="number">1</span> <span class="keyword">or</span> i &gt;= height - <span class="number">1</span> - edge <span class="keyword">or</span> j &lt;= edge - <span class="number">1</span> <span class="keyword">or</span> j &gt;= width - edge - <span class="number">1</span>:</span><br><span class="line">                        new_arr[i, j, c] = imarray[i, j, c]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        new_arr[i, j, c] = np.median(imarray[i - edge:i + edge + <span class="number">1</span>, j - edge:j + edge + <span class="number">1</span>, c])</span><br><span class="line">        new_im = Image.fromarray(new_arr)</span><br><span class="line">        new_im.save(dst)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    gray_girl = <span class="string">"A.png"</span></span><br><span class="line">    tar = <span class="string">"A_noised.png"</span></span><br><span class="line">    AddNoise(gray_girl, tar)</span><br><span class="line">    src = <span class="string">"A_noised.png"</span></span><br><span class="line">    dst = <span class="string">"A_repaired.png"</span></span><br><span class="line">    MedianFilter(src, dst)</span><br></pre></td></tr></table></figure><p>下图是k=3是的改进后的中值滤波策略的结果，可以看到图像的清晰度得到了较大的保留，噪声的数量就相对也残留的比较多。从中可以看到，二者之间有此消彼长的关系。至于为什么还有这么多的椒盐噪声，原因是因为我们添加噪声的代码中设置的概率太高了，导致图像中的椒盐噪声数量非常多，<u>在小区域内有可能有许多的噪声点，导致算法所寻找到的中值仍然是噪声的数值范围</u>。这种情况下扩大滤波模板的大小并不会有多大的改变。此时可以将已经执行过一次中值滤波的结果图像再执行一次中值滤波，效果就会更好一些。</p><p>参考：数字图像处理的python实现(8)——中值滤波https://blog.csdn.net/baidu_41902768/article/details/94451787——上述代码在j的条件判断上需要将height-1-edge改成width-1-edge</p><h3 id="图像修复restore_image"><a class="markdownIt-Anchor" href="#图像修复restore_image"></a> 图像修复restore_image</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Filter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, k = <span class="number">3</span>)</span>:</span></span><br><span class="line">        self.k = k</span><br><span class="line">        self.padding = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_median</span><span class="params">(self, imarray)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        中值滤波</span></span><br><span class="line"><span class="string">        :param imarray:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        height, width, channels = imarray.shape</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.padding:</span><br><span class="line">            edge = int((self.k - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> height - <span class="number">1</span> - edge &lt;= edge <span class="keyword">or</span> width - <span class="number">1</span> - edge &lt;= edge:</span><br><span class="line">                print(<span class="string">"The parameter k is to large."</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            new_arr = np.zeros((height, width, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(height):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">                    <span class="keyword">for</span> c <span class="keyword">in</span> range(channels):  <span class="comment"># 处理3个通道</span></span><br><span class="line">                        <span class="keyword">if</span> i &lt;= edge - <span class="number">1</span> <span class="keyword">or</span> i &gt;= height - <span class="number">1</span> - edge \</span><br><span class="line">                                <span class="keyword">or</span> j &lt;= edge - <span class="number">1</span> <span class="keyword">or</span> j &gt;= width - edge - <span class="number">1</span>:</span><br><span class="line">                            <span class="comment"># 除了中心点以外其他边沿的点</span></span><br><span class="line">                            new_arr[i, j, c] = imarray[i, j, c]</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="comment"># 中心点为排序后的中值</span></span><br><span class="line">                            new_arr[i, j, c] = np.median(imarray[i-edge: i+edge+<span class="number">1</span>, j-edge: j+edge+<span class="number">1</span>, c])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> new_arr</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_max</span><span class="params">(self, imarray)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        中值滤波</span></span><br><span class="line"><span class="string">        :param imarray:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        height, width, channels = imarray.shape</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.padding:</span><br><span class="line">            edge = int((self.k - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> height - <span class="number">1</span> - edge &lt;= edge <span class="keyword">or</span> width - <span class="number">1</span> - edge &lt;= edge:</span><br><span class="line">                print(<span class="string">"The parameter k is to large."</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            new_arr = np.zeros((height, width, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(height):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">                    <span class="keyword">for</span> c <span class="keyword">in</span> range(channels):  <span class="comment"># 处理3个通道</span></span><br><span class="line">                        <span class="keyword">if</span> i &lt;= edge - <span class="number">1</span> <span class="keyword">or</span> i &gt;= height - <span class="number">1</span> - edge \</span><br><span class="line">                                <span class="keyword">or</span> j &lt;= edge - <span class="number">1</span> <span class="keyword">or</span> j &gt;= width - edge - <span class="number">1</span>:</span><br><span class="line">                            <span class="comment"># 边界处理， 当i索引&lt;=edge-1 -&gt; 或者 i &gt;= ((height-1)-&gt;图像边界-edge)-&gt;窗口在图像边界内的边界</span></span><br><span class="line">                            new_arr[i, j, c] = imarray[i, j, c]</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="comment"># 中心点为排序后的中值</span></span><br><span class="line">                            new_arr[i, j, c] = np.max(imarray[i-edge: i+edge+<span class="number">1</span>, j-edge: j+edge+<span class="number">1</span>, c])</span><br><span class="line">            <span class="keyword">return</span> new_arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restore_image</span><span class="params">(noise_img, size=<span class="number">4</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    使用 你最擅长的算法模型 进行图像恢复。</span></span><br><span class="line"><span class="string">    :param noise_img: 一个受损的图像</span></span><br><span class="line"><span class="string">    :param size: 输入区域半径，长宽是以 size*size 方形区域获取区域, 默认是 4</span></span><br><span class="line"><span class="string">    :return: res_img 恢复后的图片，图像矩阵值 0-1 之间，数据类型为 np.array,</span></span><br><span class="line"><span class="string">            数据类型对象 (dtype): np.double, 图像形状:(height,width,channel), 通道(channel) 顺序为RGB</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 恢复图片初始化，首先 copy 受损图片，然后预测噪声点的坐标后作为返回值。</span></span><br><span class="line">    res_img = np.copy(noise_img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取噪声图像</span></span><br><span class="line">    noise_mask = get_noise_mask(noise_img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------实现图像恢复代码答题区域----------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res_img</span><br></pre></td></tr></table></figure><p>目前修复思路: 由于观察到mask基本都是胡椒噪声（黑色），因此最大值滤波效果会比较好一点，但是仍然会有少量椒盐噪声残余，因此，可以采用将降噪后的图像再次降噪（而不是扩大过滤核大小）。 在这里剩余的仍然是胡椒噪声（黑色），但是经过测试可以看出最大值滤波对图像的影响明显大于中值滤波，最大值滤波会比较模糊，因此这边采用的是“最大值滤波+中值滤波”的组合。（注：为什么先用最大值滤波？因为实验测试第一次就用中值滤波效果很差）</p><p><img src="/2020/12/09/浙大2020春夏-人工智能习题3——图像恢复/noise.png" alt="noise"></p><h4 id="先用最大值滤波的效果"><a class="markdownIt-Anchor" href="#先用最大值滤波的效果"></a> 先用最大值滤波的效果：</h4><p><img src="/2020/12/09/浙大2020春夏-人工智能习题3——图像恢复/first.png" alt="first"></p><h5 id="组合中值滤波的效果"><a class="markdownIt-Anchor" href="#组合中值滤波的效果"></a> 组合中值滤波的效果：</h5><p><img src="/2020/12/09/浙大2020春夏-人工智能习题3——图像恢复/medina.png" alt="medina"></p><h5 id="组合最大值滤波效果"><a class="markdownIt-Anchor" href="#组合最大值滤波效果"></a> 组合最大值滤波效果</h5><p><img src="/2020/12/09/浙大2020春夏-人工智能习题3——图像恢复/max.png" alt="max"></p><p>直接使用中值滤波实验结果：</p><p><img src="/2020/12/09/浙大2020春夏-人工智能习题3——图像恢复/%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%80%BC%E6%BB%A4%E6%B3%A2%E7%BB%93%E6%9E%9C.png" alt="直接使用中值滤波结果"></p><h4 id="记录坑点"><a class="markdownIt-Anchor" href="#记录坑点"></a> 记录坑点：</h4><blockquote><p>用savefig保存时，图片会有压缩，导致保存和重新从文件中读取的内容有些区别</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">noised_im = NoiseGenerator.add_pulse_noise(im)<span class="comment"># (1104, 828, 3)</span></span><br><span class="line">plt.imshow(noised_im)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">plt.savefig(<span class="string">"A_noised.png"</span>)</span><br><span class="line">src = <span class="string">"A_noised.png"</span></span><br><span class="line">dst = <span class="string">"A_repaired.png"</span></span><br><span class="line">MedianFilter(src, dst)<span class="comment"># (480, 640, 4)</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h3><blockquote><p>samples给的图中噪声基本都是胡椒噪声，没有什么盐噪声，因此考虑最大值滤波</p></blockquote><ul><li>当黑色占比大于0.3时使用&quot;最大值滤波+中值滤波组合&quot;， 当小于0.3时直接使用中值滤波</li><li>k=5太模糊，目前使用k=3</li></ul><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><ul><li><a href="https://blog.csdn.net/u012526003/article/details/77784211/?utm_medium=distribute.pc_relevant.none-task-blog-title-3&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">图像复原原理及实现</a></li></ul><h2 id="读取展示图片的两种方式"><a class="markdownIt-Anchor" href="#读取展示图片的两种方式"></a> 读取展示图片的两种方式：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -----------------用cv的imshow-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_noise</span><span class="params">(filename)</span>:</span></span><br><span class="line">    im = cv2.imread(filename)</span><br><span class="line">    cv2.imshow(<span class="string">'original img'</span>, im)</span><br><span class="line">    h, w = im.shape[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    pNum = h * w</span><br><span class="line">    nRate = <span class="number">0.3</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> range(int(pNum * nRate)):</span><br><span class="line">        randh = random.randint(<span class="number">0</span>, h - <span class="number">1</span>)</span><br><span class="line">        randw = random.randint(<span class="number">0</span>, w - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># print(h,randh,w,randw)</span></span><br><span class="line">        <span class="keyword">if</span> random.random() &lt; <span class="number">0.5</span>:</span><br><span class="line">            im[randh, randw, :] = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            im[randh, randw, :] = np.array([<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">    cv2.imshow(<span class="string">'add noise'</span>, im)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">add_noise(<span class="string">'A.png'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------------用plt.imshow-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_photo</span><span class="params">(pic_path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param pic_path: 图片路径</span></span><br><span class="line"><span class="string">    :return: &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 以 BGR 方式读取图片</span></span><br><span class="line">    im = cv2.imread(pic_path)</span><br><span class="line">    <span class="comment"># 将 BGR 方式转换为 RGB 方式</span></span><br><span class="line">    im = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)</span><br><span class="line">    <span class="comment"># 展示图片</span></span><br><span class="line">    plt.imshow(im)</span><br><span class="line">    <span class="comment"># 关闭坐标轴</span></span><br><span class="line">    plt.axis(<span class="string">'off'</span>)</span><br><span class="line">    <span class="comment"># show</span></span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="keyword">return</span> im</span><br></pre></td></tr></table></figure><h2 id="imshow的参数"><a class="markdownIt-Anchor" href="#imshow的参数"></a> imshow的参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@_preprocess_data(label_namer=None)</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">imshow</span><span class="params">(self, X, cmap=None, norm=None, aspect=None,</span></span></span><br><span class="line"><span class="function"><span class="params">              interpolation=None, alpha=None, vmin=None, vmax=None,</span></span></span><br><span class="line"><span class="function"><span class="params">              origin=None, extent=None, shape=None, filternorm=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              filterrad=<span class="number">4.0</span>, imlim=None, resample=None, url=None, **kwargs)</span>:</span></span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       Display an image on the axes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       Parameters</span></span><br><span class="line"><span class="string">       ----------</span></span><br><span class="line"><span class="string">       X : array_like, shape (n, m) or (n, m, 3) or (n, m, 4)</span></span><br><span class="line"><span class="string">           Display the image in `X` to current axes.  `X` may be an</span></span><br><span class="line"><span class="string">           array or a PIL image. If `X` is an array, it</span></span><br><span class="line"><span class="string">           can have the following shapes and types:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           - MxN -- values to be mapped (float or int)</span></span><br><span class="line"><span class="string">           - MxNx3 -- RGB (float or uint8)</span></span><br><span class="line"><span class="string">           - MxNx4 -- RGBA (float or uint8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           MxN arrays are mapped to colors based on the `norm` (mapping</span></span><br><span class="line"><span class="string">           scalar to scalar) and the `cmap` (mapping the normed scalar to</span></span><br><span class="line"><span class="string">           a color).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           Elements of RGB and RGBA arrays represent pixels of an MxN image.</span></span><br><span class="line"><span class="string">           All values should be in the range [0 .. 1] for floats or</span></span><br><span class="line"><span class="string">           [0 .. 255] for integers.  Out-of-range values will be clipped to</span></span><br><span class="line"><span class="string">           these bounds.</span></span><br></pre></td></tr></table></figure><h3 id="clip"><a class="markdownIt-Anchor" href="#clip"></a> clip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</span><br></pre></td></tr></table></figure><p>按照上述信息可知，如果元素为float类型且超过了1，则会被clip，这边clip就是上下限幅，而不是截取小数点后部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res = np.array([</span><br><span class="line">    [[<span class="number">1.22</span>,<span class="number">2.22</span>,<span class="number">3.22</span>]],</span><br><span class="line">    [[<span class="number">-0.55</span>,<span class="number">-0.44</span>,<span class="number">-6.55</span>]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/浙大2020春夏-人工智能习题3——图像恢复/test_clip.png" alt="test_clip"></p><h2 id="图像相似度指标"><a class="markdownIt-Anchor" href="#图像相似度指标"></a> 图像相似度指标</h2><h3 id="ssim结构相似性度量"><a class="markdownIt-Anchor" href="#ssim结构相似性度量"></a> SSIM（结构相似性度量）</h3><blockquote><p>这是一种全参考的图像质量评价指标，分别从亮度、对比度、结构三个方面度量图像相似性。SSIM取值范围[0, 1]，值越大，表示图像失真越小。</p></blockquote><h3 id="cosin相似度余弦相似度"><a class="markdownIt-Anchor" href="#cosin相似度余弦相似度"></a> cosin相似度（余弦相似度）</h3><blockquote><p>把图片表示成一个向量，通过计算向量之间的余弦距离来表征两张图片的相似度。</p></blockquote><p><a href="https://blog.csdn.net/u010977034/article/details/82733137" target="_blank" rel="noopener">https://blog.csdn.net/u010977034/article/details/82733137</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;习题3-图像恢复&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#习题3-图像恢复&quot;&gt;&lt;/a&gt; &lt;strong&gt;习题3&lt;/strong&gt; - 图像恢复&lt;/h1&gt;
&lt;h2 id=&quot;31-实验内容&quot;&gt;&lt;a class=&quot;markdownIt-
      
    
    </summary>
    
    
      <category term="ZJU" scheme="https://nymrli.top/tags/ZJU/"/>
    
      <category term="ML" scheme="https://nymrli.top/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>理解科学计算(numpy,pytorch)中的dim参数</title>
    <link href="https://nymrli.top/2020/12/05/%E7%90%86%E8%A7%A3%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E4%B8%AD%E7%9A%84dim%E5%8F%82%E6%95%B0/"/>
    <id>https://nymrli.top/2020/12/05/理解科学计算中的dim参数/</id>
    <published>2020-12-05T03:53:10.000Z</published>
    <updated>2020-12-10T06:22:37.272Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>😄理解numpy中array和pytorch中tensor的操作是开始科学运算的第一步!</p></blockquote><p>首先明白维度的感念：</p><h2 id="维度"><a class="markdownIt-Anchor" href="#维度"></a> 维度</h2><p>我们通常能听到的都是2D, 3D，其实这边的D就是dimension的含义即维度。2D，我们通常理解为是平面，如我们最熟悉的直角坐标系就是平面坐标系，还有极坐标系。而3D呢，就是在平面的基础上增加了一维——高度，从而使平面的物体立起来了，同样3D也有耳熟能详的坐标系——3维坐标系。</p><p>更官方的解释呢：维度（Dimension），又称为<a href="https://baike.baidu.com/item/%E7%BB%B4%E6%95%B0/6496548" target="_blank" rel="noopener">维数</a>，是<a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6/107037" target="_blank" rel="noopener">数学</a>中独立参数的<a href="https://baike.baidu.com/item/%E6%95%B0%E7%9B%AE/7720359" target="_blank" rel="noopener">数目</a>。在<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%AD%A6/313183" target="_blank" rel="noopener">物理学</a>和<a href="https://baike.baidu.com/item/%E5%93%B2%E5%AD%A6/140608" target="_blank" rel="noopener">哲学</a>的领域内，指独立的时空坐标的数目。0维是一个无限小的点，没有长度。<strong>1维是一条无限长的线，只有长度。2维是一个平面，是由长度和宽度(或部分曲线)组成面积。3维是2维加上高度组成体积。4维分为时间上和空间上的4维，人们说的4维通常是指关于物体在时间线上的转移。</strong>（4维准确来说有两种。1.四维时空，是指三维空间加一维时间。2.四维空间，只指四个维度的空间。）四维运动产生了五维。</p><p>从哲学角度看，人们观察、思考与表述某事物的“<u>思维角度</u>”，简称“维度”。例如，人们观察与思考“月亮”这个事物，可以从月亮的“内容、时间、空间”三个思维角度去描述；也可以从月亮的“载体、能量、信息”三个思维角度去描述。这边的维度其实也可以理解为角度，从不同的方面去看待、确定一个事物。</p><p>所以代数上来说，维度其实是数学里在<strong>表示</strong>方面的一个重要的概念，它反映的是一个空间的本质性质。</p><h2 id="科学计算中维度的概念"><a class="markdownIt-Anchor" href="#科学计算中维度的概念"></a> 科学计算中维度的概念</h2><h3 id="从二维点位置-编程中的坐标系"><a class="markdownIt-Anchor" href="#从二维点位置-编程中的坐标系"></a> 从二维点位置-&gt;编程中的坐标系</h3><p>维度的考量主要集中在矩阵的运算上。首先我们来看一个元素：4，其实它就是一个点，可以被认为是0维的。但往往我们不会只有一个元素。我们最常见的是编程中的数组，如[1,2,3,4]，这个是由多个元素构成的，它的维度就是一维的，这个我们也比较好理解。</p><p>而二维是什么呢？我们能直观理解的二维是平面坐标系的那种：(1,3), (4,5)…即给一个x，一个y，那么在平面中就可以在直角坐标系下确定这个点（物）。现在我们规整下这些坐标点[ (1, 3), (4, 5) ]，从这个角度上离我们的矩阵，或是数组好像还是有点远。那么我们继续变形。</p><p>如果我们需要画出坐标系中有哪些点的话， 1.第一种做法就是跟上述一样， 把点都存一个vector中[ (1, 3), (4, 5) ]，然后遍历，再在坐标系中点出。2.第二种呢，就是在坐标系中把所有的位置都列出来，如果有点存在就把它标出来，即跟我们列出迷宫地图一样，先把地图画出来，然后再把宝藏标出来。所以上述的两个点可以理解为。在给出了<code>map[20][20]</code>的地图上，(1, 3)和(4, 5)位置为true， 即<code>map[1][3] = 1</code>, <code>map[4][5] = 1</code>，其他位置<code>map[x][y] = 0</code>，所以这样我们就从[(1, 3), (4, 5)]==&gt; 用map形式表现出了这两个点，两者成功在<strong>二维</strong>上进行了转换。接下来我们就来分析这个二维的map。</p><p>数组，在编程中，我们都不陌生，如<code>int arr[50][50]</code>，虽然可以通过这个二维的数组，根据val的不同来表示三维的量，但是我们这边不把它这么理解，仅是当做<code>bool arr[50][50]</code>来理解维度上的概念。===&gt;同样，面对numpy中的array我们也是这么个理解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch </span><br><span class="line">x = np.random.randint(<span class="number">2</span>, size = (<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">y = torch.randint(<span class="number">2</span>, size = (<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">print(y)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[0 1 1]</span></span><br><span class="line"><span class="string"> [1 0 1]]</span></span><br><span class="line"><span class="string">tensor([[1, 0, 1],</span></span><br><span class="line"><span class="string">        [0, 0, 1]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>我们从numpy的x上理解，这边是创建了一个2*3的矩阵，其中<code>x[0][1], x[0][2], x[1][0], x[0][2]</code>全1，其余为0，输入<code>x.shape</code>得到的结果是(2, 3)，有两项，跟我们从map的理解上是一致的，这个地图map拥有长和宽两个维度。</p><p>然后我们从编程中观察这个2*3的矩阵或是叫数组，可以发现<code>x[a][b]</code>第一个<code>[]</code>中的内容a范围是从0-1的，第一个<code>[]</code>中的内容b范围是从0-2的，0的话学编程的人都能很快的理解，而第二个的范围却不太那么肯定。为什么呢？因为它跟我们普通认知的直角坐标系不一致。下面我们把x画出来(不改变输出显示的形式，而是让坐标系去适应这种表现形式)。</p><p><img src="/2020/12/05/理解科学计算中的dim参数/%E5%9D%90%E6%A0%87%E7%B3%BB.png" alt="坐标系"></p><p>为什么是这样画的呢？首先明确的原则是，不改变输出显示的形式，而是让坐标系去适应这种输出形式，因此输出长啥样，我们坐标系只能去适应。由于我们碰到有x，有y的时候，习惯上把第一个出现的当作x，第二个当作y，所以就有了第一个[]为x，第二个[]为y。</p><p>好了，现在我们确定好坐标系长什么样了。接下来就是具体理解dim的含义了</p><h3 id="编程中坐标系-科学计算中array的dim"><a class="markdownIt-Anchor" href="#编程中坐标系-科学计算中array的dim"></a> 编程中坐标系-&gt;科学计算中array的dim</h3><blockquote><p>想必大家在学习numpy或者torch的时候都被各种函数方法中的dim参数折磨过，感觉怎么理解都有问题，不敢自己使用。因此，这边就是解决，这些函数中的dim到底是怎么确定的</p></blockquote><p>比如我们创建一个高维的array</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A = torch.randint(<span class="number">2</span>, size = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([[[[0, 0, 1, 0],</span></span><br><span class="line"><span class="string">          [1, 1, 0, 1],</span></span><br><span class="line"><span class="string">          [0, 0, 0, 0]],</span></span><br><span class="line"><span class="string">         [[0, 0, 1, 1],</span></span><br><span class="line"><span class="string">          [1, 1, 1, 0],</span></span><br><span class="line"><span class="string">          [0, 1, 0, 0]]]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>举个我自己最初理解dim的笨方法：硬记x为第一维(dim = 0)， y为第二维(dim = 1)</p><p>实际上这种记法是比较低效的，最好的方法是我们怎么定义这个array就怎么记，比如我们这边创建的是一个size=(1, 2, 3, 4)，输出<code>len(A.shape)</code>为4，可以看到这就是个4维的tensor，那么我们顺理成章地就把把各个维度依次定义出来了。如dim = 0地指的就是size = 1的那层，dim = 1就是指size = 2的那层，依次类推。这样说可能有点抽象，因此我们回归简单的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">B = torch.randint(<span class="number">2</span>, size = (<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">print(B)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([[1, 0],</span></span><br><span class="line"><span class="string">        [1, 1],</span></span><br><span class="line"><span class="string">        [0, 0]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>按照我们刚的定义，dim=0就是size=3的这一层，也就是我们坐标系中的X轴orX面。</p><p>好了，想必大家这个时候还不知道我在说什么。接下来就带大家来测试函数。</p><h4 id="测试dim在函数参数中的定义"><a class="markdownIt-Anchor" href="#测试dim在函数参数中的定义"></a> 测试dim在函数参数中的定义</h4><blockquote><p>提前指出把：要注意函数介绍中dim指的是&quot;<strong>沿着dim这个维度</strong>&quot;or&quot;<strong>删除、增加…dim这个维度(在dim这个维度上进行维度修改)</strong>&quot;</p></blockquote><h5 id="规约计算"><a class="markdownIt-Anchor" href="#规约计算"></a> 规约计算</h5><blockquote><p>一般是指分组聚合计算，表现结果就是会进行维度压缩</p></blockquote><h6 id="sum"><a class="markdownIt-Anchor" href="#sum"></a> sum</h6><blockquote><p>沿着dim累加元素</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C = torch.randint(<span class="number">5</span>, size = (<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">print(C)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([[2, 3, 3, 4, 0],</span></span><br><span class="line"><span class="string">        [1, 0, 2, 4, 4]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(C.sum(dim = <span class="number">0</span>))</span><br><span class="line">print(C.sum(dim = <span class="number">1</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([3, 3, 5, 8, 4])</span></span><br><span class="line"><span class="string">tensor([12, 11])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>可以看到sum就是比较典型的&quot;沿着dim&quot;的例子，当dim = 0时就沿着dim = 0即x轴进行累加，由于sum这个函数会进行维度的压缩，所以最后的结果为<code>tensor([3, 3, 5, 8, 4])</code></p><h6 id="cumprod"><a class="markdownIt-Anchor" href="#cumprod"></a> cumprod</h6><blockquote><p>通过dim指定沿着某个维度计算累积</p><p>其他的函数还有cumsum、prod、sum，实际上两者是相同的，还有mean、median、var、std、min、max</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">x = torch.Tensor([</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">    [<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,]</span><br><span class="line">])</span><br><span class="line">print(torch.cumprod(x, dim = <span class="number">0</span>))</span><br><span class="line">print(torch.cumprod(x, dim = <span class="number">1</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([[ 2.,  3.,  4.,  5.,  6.],</span></span><br><span class="line"><span class="string">        [18., 24., 28., 30., 30.]])</span></span><br><span class="line"><span class="string">tensor([[2.0000e+00, 6.0000e+00, 2.4000e+01, 1.2000e+02, 7.2000e+02],</span></span><br><span class="line"><span class="string">        [9.0000e+00, 7.2000e+01, 5.0400e+02, 3.0240e+03, 1.5120e+04]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># min</span></span><br><span class="line">x = torch.Tensor([</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">    [<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,]</span><br><span class="line">])</span><br><span class="line">print(torch.min(x, dim = <span class="number">0</span>))</span><br><span class="line">print(torch.min(x, dim = <span class="number">1</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">torch.return_types.min(</span></span><br><span class="line"><span class="string">    values=tensor([2., 3., 4., 5., 5.]),</span></span><br><span class="line"><span class="string">    indices=tensor([0, 0, 0, 0, 1]) )</span></span><br><span class="line"><span class="string">torch.return_types.min(</span></span><br><span class="line"><span class="string">    values=tensor([2., 5.]),</span></span><br><span class="line"><span class="string">    indices=tensor([0, 4]) )</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mean</span></span><br><span class="line">x = torch.Tensor([</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">    [<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,]</span><br><span class="line">])</span><br><span class="line">print(torch.mean(x, dim = <span class="number">0</span>))</span><br><span class="line">print(torch.mean(x, dim = <span class="number">1</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([5.5000, 5.5000, 5.5000, 5.5000, 5.5000])</span></span><br><span class="line"><span class="string">tensor([4., 7.])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h5 id="索引-切片-连接"><a class="markdownIt-Anchor" href="#索引-切片-连接"></a> 索引、切片、连接</h5><h6 id="squeezeunsqueeze"><a class="markdownIt-Anchor" href="#squeezeunsqueeze"></a> squeeze，unsqueeze</h6><blockquote><p>unsqueeze关键字：参数dim指定在第几个维度增加&quot;[]&quot;，以提升维度</p><p>squeeze: unsqueeze的逆操作，删除dim指定的维度</p></blockquote><p>unsqueeze</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">D = torch.Tensor( [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] )</span><br><span class="line">y = D.unsqueeze(dim = <span class="number">0</span>)</span><br><span class="line">print(y, y.shape)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([[1., 2., 3., 4., 5.]]) torch.Size([1, 5])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">y = D.unsqueeze(dim = <span class="number">1</span>)</span><br><span class="line">print(y.shape)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([[1.],</span></span><br><span class="line"><span class="string">        [2.],</span></span><br><span class="line"><span class="string">        [3.],</span></span><br><span class="line"><span class="string">        [4.],</span></span><br><span class="line"><span class="string">        [5.]])  torch.Size([5, 1])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>可以看到的是dim = 0的时候就是在dim = 0 维度上增加了一维， 使得变成了[1, 5]。第二个是在dim=1的位置加了一维变成了[5, 1] （这也就是为什么很多书上会说其实就是在dim维度上加了1）</p><p>▲这个典型就是要区分： <strong>在dim维度上</strong> 和 <strong>沿着dim维度</strong>了</p><p>squeeze</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">F = torch.Tensor( [ [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], </span><br><span class="line">                    [<span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span> ,<span class="number">55</span>]</span><br><span class="line">                  ])</span><br><span class="line">y = torch.squeeze(F, dim = <span class="number">0</span>)</span><br><span class="line">print(y, y.shape)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([[ 0.,  2.,  3.,  4.],</span></span><br><span class="line"><span class="string">        [22., 33., 44., 55.]]) torch.Size([2, 4])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">y = torch.squeeze(F, dim = <span class="number">1</span>)</span><br><span class="line">print(y, y.shape)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([[ 0.,  2.,  3.,  4.],</span></span><br><span class="line"><span class="string">        [22., 33., 44., 55.]]) torch.Size([2, 4])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>这边变换不大的原因是因为dim上没有size=1可以删除</p><h6 id="split"><a class="markdownIt-Anchor" href="#split"></a> split</h6><blockquote><p><strong>按(沿着)dim维度</strong>将tensor分成n个部分</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">x = torch.Tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>],</span><br><span class="line">    [<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">])</span><br><span class="line">print(x)</span><br><span class="line">print(torch.split(x, <span class="number">5</span>, dim = <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 指定划分列表，表示依次有1,2,3,4个长度 (总和得跟dim维度上元素个数相同)</span></span><br><span class="line">print(torch.split(x, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], dim = <span class="number">1</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tensor([[ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.],</span></span><br><span class="line"><span class="string">        [10.,  9.,  8.,  7.,  6.,  5.,  4.,  3.,  2.,  1.]])</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">(tensor([# 可以看到这个是在x[:][6]的地方将tensor切成了两个</span></span><br><span class="line"><span class="string">[ 1.,  2.,  3.,  4.,  5.],</span></span><br><span class="line"><span class="string">        [10.,  9.,  8.,  7.,  6.]</span></span><br><span class="line"><span class="string">        ]), </span></span><br><span class="line"><span class="string">tensor([</span></span><br><span class="line"><span class="string">        [ 6.,  7.,  8.,  9., 10.],</span></span><br><span class="line"><span class="string">        [ 5.,  4.,  3.,  2.,  1.]</span></span><br><span class="line"><span class="string">        ]))</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">(tensor([[ 1.],</span></span><br><span class="line"><span class="string">        [10.]]), tensor([[2., 3.],</span></span><br><span class="line"><span class="string">        [9., 8.]]), tensor([[4., 5., 6.],</span></span><br><span class="line"><span class="string">        [7., 6., 5.]]), tensor([[ 7.,  8.,  9., 10.],</span></span><br><span class="line"><span class="string">        [ 4.,  3.,  2.,  1.]]))</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h6 id="unbind"><a class="markdownIt-Anchor" href="#unbind"></a> unbind</h6><blockquote><p>删除某个维度后，返回所有切片组成的<strong>元组</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">x = torch.rand(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># x = torch.rand(size=(1,2,3))</span></span><br><span class="line">print(x, x.shape)</span><br><span class="line">out = torch.unbind(x, dim = <span class="number">1</span>)</span><br><span class="line">print(out, len(out))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">            [0.3631, 0.6672, 0.9489],</span></span><br><span class="line"><span class="string">            [0.4944, 0.1606, 0.6122]</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">         ])torch.Size([1, 2, 3])</span></span><br><span class="line"><span class="string">         </span></span><br><span class="line"><span class="string">(</span></span><br><span class="line"><span class="string">    tensor([[0.3631, 0.6672, 0.9489]]), torch.Size([1, 3])</span></span><br><span class="line"><span class="string">    tensor([[0.4944, 0.1606, 0.6122]])torch.Size([1, 3])</span></span><br><span class="line"><span class="string">)      2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">x = torch.Tensor([</span><br><span class="line">        [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,],</span><br><span class="line">        [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</span><br><span class="line">        [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]],</span><br><span class="line">    </span><br><span class="line">        [[<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>],</span><br><span class="line">        [<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>],</span><br><span class="line">        [<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>]]</span><br><span class="line">])</span><br><span class="line">print(x, x.shape)</span><br><span class="line">out = torch.unbind(x, dim = <span class="number">1</span>)</span><br><span class="line">print(out, len(out))</span><br><span class="line">print(out[<span class="number">0</span>].shape)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([</span></span><br><span class="line"><span class="string">        [[1,2,3,4,],</span></span><br><span class="line"><span class="string">        [5,6,7,8],</span></span><br><span class="line"><span class="string">        [9,10,11,12]],</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        [[13,14,15,16],</span></span><br><span class="line"><span class="string">        [17,18,19,20],</span></span><br><span class="line"><span class="string">        [21,22,23,24]]</span></span><br><span class="line"><span class="string">])        torch.Size([2, 3, 4])</span></span><br><span class="line"><span class="string">(tensor([</span></span><br><span class="line"><span class="string">[ 1.,  2.,  3.,  4.],</span></span><br><span class="line"><span class="string">        [13., 14., 15., 16.]]), </span></span><br><span class="line"><span class="string">tensor([</span></span><br><span class="line"><span class="string">[ 5.,  6.,  7.,  8.],</span></span><br><span class="line"><span class="string">        [17., 18., 19., 20.]]), </span></span><br><span class="line"><span class="string">tensor([</span></span><br><span class="line"><span class="string">[ 9., 10., 11., 12.],</span></span><br><span class="line"><span class="string">        [21., 22., 23., 24.]])) </span></span><br><span class="line"><span class="string">删除dim = 1, 把size[1] = 3的tensor拆成了3个tensor</span></span><br><span class="line"><span class="string">不要记这个： 因为dim0为z轴， dim1为x轴， dim2为y轴，所以删除dim1就是删除x轴，最后得到的就是yOz平面</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h6 id="cat-stack"><a class="markdownIt-Anchor" href="#cat-stack"></a> cat、stack</h6><blockquote><p>通过关键字dim指定按哪个维度拼接</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randint(<span class="number">1</span>, <span class="number">100</span>, size=(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">print(x)</span><br><span class="line">y = torch.randint(<span class="number">1</span>, <span class="number">100</span>, size=(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">print(y)</span><br><span class="line">res = torch.cat((x, y), dim = <span class="number">1</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tensor([[71, 56, 44],</span></span><br><span class="line"><span class="string">        [64, 30, 87]])</span></span><br><span class="line"><span class="string">tensor([[39, 56, 63],</span></span><br><span class="line"><span class="string">        [68, 28, 65]])</span></span><br><span class="line"><span class="string">tensor([[71, 56, 44, 39, 56, 63],</span></span><br><span class="line"><span class="string">        [64, 30, 87, 68, 28, 65]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加强高维理解</span></span><br><span class="line">x = torch.randint(<span class="number">1</span>, <span class="number">100</span>, size=(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">print(x)</span><br><span class="line">y = torch.randint(<span class="number">1</span>, <span class="number">100</span>, size=(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">print(y)</span><br><span class="line">res = torch.cat((x, y), dim = <span class="number">1</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([[[81, 79, 10,  8],</span></span><br><span class="line"><span class="string">         [47, 30, 48, 35],</span></span><br><span class="line"><span class="string">         [10, 57, 68, 88]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[33, 51, 60, 97],</span></span><br><span class="line"><span class="string">         [27, 14, 83, 51],</span></span><br><span class="line"><span class="string">         [51, 54, 79, 65]]])</span></span><br><span class="line"><span class="string">tensor([[[85,  9, 95, 95],</span></span><br><span class="line"><span class="string">         [29, 99, 12,  8],</span></span><br><span class="line"><span class="string">         [32,  8,  3, 84]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[13, 24, 46, 20],</span></span><br><span class="line"><span class="string">         [86, 83, 72, 10],</span></span><br><span class="line"><span class="string">         [76, 33, 79, 48]]])</span></span><br><span class="line"><span class="string">tensor([[[81, 79, 10,  8],</span></span><br><span class="line"><span class="string">         [47, 30, 48, 35],</span></span><br><span class="line"><span class="string">         [10, 57, 68, 88],</span></span><br><span class="line"><span class="string">         [85,  9, 95, 95],</span></span><br><span class="line"><span class="string">         [29, 99, 12,  8],</span></span><br><span class="line"><span class="string">         [32,  8,  3, 84]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[33, 51, 60, 97],</span></span><br><span class="line"><span class="string">         [27, 14, 83, 51],</span></span><br><span class="line"><span class="string">         [51, 54, 79, 65],</span></span><br><span class="line"><span class="string">         [13, 24, 46, 20],</span></span><br><span class="line"><span class="string">         [86, 83, 72, 10],</span></span><br><span class="line"><span class="string">         [76, 33, 79, 48]]]) torch.Size([2, 6, 4])</span></span><br><span class="line"><span class="string">dim=1即沿元素为3的方向上延伸，所以结果变成了6</span></span><br><span class="line"><span class="string">不要记：也可以理解为沿x轴方向</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>官方文档： <a href="https://pytorch.org/docs/stable/generated/torch.cat.html?highlight=cat#torch.cat" target="_blank" rel="noopener">https://pytorch.org/docs/stable/generated/torch.cat.html?highlight=cat#torch.cat</a></p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><h4 id="正确理解姿势"><a class="markdownIt-Anchor" href="#正确理解姿势"></a> 正确理解姿势</h4><p>dim是指tensor在shape上的顺序(可以这么理解)，如x的shape是２ｘ３ｘ４，也就是[2, 3, 4]。故可以这样一一对应来。<br>比如dim = 1就是按具有3个元素的那个轴操作，从而不用死记硬背那些dim = 0是对列操作还是对行操作了。</p><h4 id="强记三维"><a class="markdownIt-Anchor" href="#强记三维"></a> 强记三维</h4><p><img src="/2020/12/05/理解科学计算中的dim参数/3%E7%BB%B4.png" alt="3维"></p><p>但还是不提倡强记，因为一旦高维就理解不了了。</p><h2 id="附"><a class="markdownIt-Anchor" href="#附"></a> 附：</h2><h3 id="关于size的设置"><a class="markdownIt-Anchor" href="#关于size的设置"></a> 关于size的设置</h3><p>在ones、rand等函数上，size = (2,3,4)，我们在C++数组中<code>int arr[x][y][z]</code>的理解是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">2*3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>然后z为4， 但实际上在科学运算中size = (2,3,4)的矩阵是有4个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mo>∗</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">3*4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>的矩阵叠加而成，这边是要区分的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.random.randint(<span class="number">1</span>, <span class="number">100</span>, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[<span class="number">26</span>, <span class="number">36</span>, <span class="number">31</span>, <span class="number">21</span>],</span><br><span class="line">        [<span class="number">74</span>, <span class="number">59</span>, <span class="number">79</span>, <span class="number">32</span>],</span><br><span class="line">        [<span class="number">77</span>, <span class="number">94</span>, <span class="number">81</span>, <span class="number">32</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">72</span>, <span class="number">76</span>, <span class="number">85</span>, <span class="number">93</span>],</span><br><span class="line">        [<span class="number">66</span>, <span class="number">34</span>, <span class="number">80</span>, <span class="number">12</span>],</span><br><span class="line">        [<span class="number">99</span>, <span class="number">17</span>, <span class="number">98</span>, <span class="number">23</span>]]])</span><br><span class="line"></span><br><span class="line">x = torch.randint(<span class="number">1</span>, <span class="number">100</span>, size=(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">print(x)</span><br><span class="line">print(x[<span class="number">1</span>][<span class="number">2</span>][<span class="number">3</span>])<span class="comment"># 高度索引为1的, 在x = 2, y = 3的元素就是76</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([[[63, 54, 57, 17],</span></span><br><span class="line"><span class="string">         [78, 64, 76, 44],</span></span><br><span class="line"><span class="string">         [96,  3, 59, 37]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[86,  3, 92, 84],</span></span><br><span class="line"><span class="string">         [89, 36,  8, 79],</span></span><br><span class="line"><span class="string">         [10, 87, 15, 76]]])</span></span><br><span class="line"><span class="string">tensor(76)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">x = torch.randint(<span class="number">1</span>, <span class="number">100</span>, size=(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>))</span><br><span class="line">print(x)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([[[[29, 50],</span></span><br><span class="line"><span class="string">          [50, 69],</span></span><br><span class="line"><span class="string">          [95, 70],</span></span><br><span class="line"><span class="string">          [21, 35]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         [[58, 65],</span></span><br><span class="line"><span class="string">          [15, 53],</span></span><br><span class="line"><span class="string">          [96, 25],</span></span><br><span class="line"><span class="string">          [11, 75]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         [[12, 71],</span></span><br><span class="line"><span class="string">          [36, 12],</span></span><br><span class="line"><span class="string">          [71, 92],</span></span><br><span class="line"><span class="string">          [87, 47]]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[[43, 89],</span></span><br><span class="line"><span class="string">          [88, 22],</span></span><br><span class="line"><span class="string">          [61, 56],</span></span><br><span class="line"><span class="string">          [47, 97]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         [[71,  7],</span></span><br><span class="line"><span class="string">          [44, 88],</span></span><br><span class="line"><span class="string">          [54, 32],</span></span><br><span class="line"><span class="string">          [15, 65]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         [[96, 22],</span></span><br><span class="line"><span class="string">          [90, 78],</span></span><br><span class="line"><span class="string">          [30, 85],</span></span><br><span class="line"><span class="string">          [65, 57]]]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="关于如何看图"><a class="markdownIt-Anchor" href="#关于如何看图"></a> 关于如何看图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">res = np.uint8(np.random.rand(<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>) * <span class="number">255</span>)</span><br><span class="line">print(res)</span><br><span class="line">plt.imshow(res)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[[ 19 228 231]</span></span><br><span class="line"><span class="string">  [106  28 252]</span></span><br><span class="line"><span class="string">  [191  98 139]</span></span><br><span class="line"><span class="string">  [171  71 202]</span></span><br><span class="line"><span class="string">  [105 101  93]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [[155 232 228]</span></span><br><span class="line"><span class="string">  [ 89 119  13]</span></span><br><span class="line"><span class="string">  [142 158 200]</span></span><br><span class="line"><span class="string">  [226 169  55]</span></span><br><span class="line"><span class="string">  [137 187 249]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [[202 217  96]</span></span><br><span class="line"><span class="string">  [214  44 133]</span></span><br><span class="line"><span class="string">  [144 253 213]</span></span><br><span class="line"><span class="string">  [ 82   4  28]</span></span><br><span class="line"><span class="string">  [172 242 238]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [[106 103  68]</span></span><br><span class="line"><span class="string">  [236 252  63]</span></span><br><span class="line"><span class="string">  [ 53  49  66]</span></span><br><span class="line"><span class="string">  [ 48 121  62]</span></span><br><span class="line"><span class="string">  [ 64  61 209]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [[158  80 221]</span></span><br><span class="line"><span class="string">  [220  12 199]</span></span><br><span class="line"><span class="string">  [214  40   3]</span></span><br><span class="line"><span class="string">  [169 142 144]</span></span><br><span class="line"><span class="string">  [140 112 148]]]</span></span><br><span class="line"><span class="string">  """</span></span><br></pre></td></tr></table></figure><p>画图效果如下：</p><p><img src="/2020/12/05/理解科学计算中的dim参数/%E5%9B%BE.png" alt="图"></p><p>可以得到的结果是针对<code>np.random.rand(5,5,3)</code>来说，三个通道被列成了三列，因此每一列就是一个通道。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">res = np.uint8(np.random.rand(<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>) * <span class="number">255</span>)</span><br><span class="line">[[[ <span class="number">19</span> <span class="number">228</span> <span class="number">231</span>]</span><br><span class="line">  [<span class="number">106</span>  <span class="number">28</span> <span class="number">252</span>]</span><br><span class="line">  [<span class="number">191</span>  <span class="number">98</span> <span class="number">139</span>]</span><br><span class="line">  [<span class="number">171</span>  <span class="number">71</span> <span class="number">202</span>]</span><br><span class="line">  [<span class="number">105</span> <span class="number">101</span>  <span class="number">93</span>]]</span><br><span class="line">  </span><br><span class="line">res = np.uint8(np.random.rand(<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>) * <span class="number">255</span>)</span><br><span class="line">[[[<span class="number">217</span> <span class="number">210</span> <span class="number">138</span>]</span><br><span class="line">  [  <span class="number">1</span> <span class="number">148</span>  <span class="number">10</span>]</span><br><span class="line">  [ <span class="number">25</span> <span class="number">231</span> <span class="number">128</span>]</span><br><span class="line">  [<span class="number">158</span> <span class="number">216</span>  <span class="number">73</span>]</span><br><span class="line">  [<span class="number">220</span> <span class="number">208</span> <span class="number">165</span>]</span><br><span class="line">  [ <span class="number">73</span> <span class="number">119</span> <span class="number">122</span>]]</span><br><span class="line"><span class="comment"># 单元中竖着的行数表示了图片的长，可以看到横着的长是6</span></span><br><span class="line"><span class="comment"># 而有多少个单元就以为着图片的宽， 可以看到竖着的宽是5==&gt; 所以第几个单元意味着第几行</span></span><br><span class="line"><span class="comment"># 所以[0][5][0]=73标志着右上角那一块绿色的第一个通道的值</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可以设置后再绘图看看是不是右上角的图块变成白色的了</span></span><br><span class="line">res[<span class="number">0</span>][<span class="number">5</span>][<span class="number">0</span>] = res[<span class="number">0</span>][<span class="number">5</span>][<span class="number">1</span>] = res[<span class="number">0</span>][<span class="number">5</span>][<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">print(res[<span class="number">0</span>][<span class="number">5</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>总结： RGB图像的shape：(H, W, C)</p><h3 id="pytorchapi"><a class="markdownIt-Anchor" href="#pytorchapi"></a> pytorchAPI:</h3><p><a href="https://pytorch.org/docs/stable/torch.html#torch.arange" target="_blank" rel="noopener">https://pytorch.org/docs/stable/torch.html#torch.arange</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;😄理解numpy中array和pytorch中tensor的操作是开始科学运算的第一步!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先明白维度的感念：&lt;/p&gt;
&lt;h2 id=&quot;维度&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h
      
    
    </summary>
    
    
      <category term="计算机基础知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="ML" scheme="https://nymrli.top/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>Lets learn 设计模式</title>
    <link href="https://nymrli.top/2020/12/03/Lets-learn-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nymrli.top/2020/12/03/Lets-learn-设计模式/</id>
    <published>2020-12-03T03:36:53.000Z</published>
    <updated>2020-12-11T12:59:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《研磨设计模式》和《设计模式就该这样学：基于经典框架源码和真实业务场景》的读书笔记</p></blockquote><h2 id="设计模式是什么"><a class="markdownIt-Anchor" href="#设计模式是什么"></a> 设计模式是什么？</h2><p>模式：从字面上理解，模，就是<u>模型、模板</u>的意思；式，就是方式、方法的意思。综合起来，所谓模式就是：可以作为模型或模板的方式或方法。再简单点说就是可以用来作为样板的方式或方法，类似于大家所熟悉的范例。</p><p>所以设计模式就是设计方面的模板，具体定义为：是指在软件开发中，<strong>经过验证的</strong>，用于解决在<strong>特定环境</strong>下、<strong>重复出现</strong>的、特定问题的<strong>解决方案</strong>。</p><h3 id="每个设计模式的构成如下"><a class="markdownIt-Anchor" href="#每个设计模式的构成如下"></a> 每个设计模式的构成如下：</h3><p>1、模式名称：模式的一个好记的名字</p><p>2、环境和问题：描述在什么环境下，出现什么特定的问题</p><p>3、解决方案：描述如何解决问题</p><p>4、效果：描述应用模式后的效果，以及可能带来的问题</p><h2 id="设计模式分类"><a class="markdownIt-Anchor" href="#设计模式分类"></a> 设计模式分类：</h2><p>为了缩小范围，我们仅讨论Java设计模式，也就是GoF著作中的23种设计模式，对于这23种设计模式，GoF把它们分为三类。</p><ul><li>创建型模式：抽象了对象实例化过程，用来帮助创建对象的实例。<ul><li>简单工厂模式</li><li>单例模式</li><li>工厂方法模式</li><li>抽象工厂模式</li><li>生成器模式</li><li>原型模式</li></ul></li><li>结构型模式：描述如何组合类和对象以获得更大的结构。<ul><li>外观模式</li><li>适配器模式</li><li>代理模式</li><li>组合模式</li><li>享元模式</li><li>装饰模式</li><li>桥接模式</li></ul></li><li>行为型模式：描述算法和对象间职责的分配。<ul><li>中介模式</li><li>观察者模式</li><li>命令模式</li><li>迭代器模式</li><li>模板模式</li><li>策略模式</li><li>状态模式</li><li>备忘录模式</li><li>解释器模式</li><li>责任链模式</li><li>访问者模式</li></ul></li></ul><p>《<strong>设计模式就该这样学：基于经典框架源码和真实业务场景</strong>》中提到了新的设计模式：</p><ul><li>对象池模式</li><li>规格模式</li><li>空对象模式</li><li>雇工模式</li></ul><h2 id="java中的面向接口编程"><a class="markdownIt-Anchor" href="#java中的面向接口编程"></a> JAVA中的面向接口编程</h2><h3 id="1java中接口的概念"><a class="markdownIt-Anchor" href="#1java中接口的概念"></a> 1.Java中接口的概念</h3><p>在Java中接口是一种特殊的抽象类，跟一般的抽象类相比，接口里面的所有方法都是抽象方法，接口里面的所有属性都是常量。也就是说，接口里面只有方法定义而没有任何方法实现。</p><h3 id="2接口用来干什么"><a class="markdownIt-Anchor" href="#2接口用来干什么"></a> 2.接口用来干什么</h3><p>通常用接口来定义实现类的外观，也就是实现类的行为定义，用来约束实现类的行为。接口就相当于一份契约，根据外部应用需要的功能，约定了实现类应该要实现的功能，但是具体的实现类除了实现接口约定的功能外，还可以根据需要实现其他一些功能，这是允许的，也就是说实现类的功能包含但不仅限于接口约束的功能。<br>通过使用接口，可以实现不相关类的相同行为，而不需考虑这些类之间的层次关系，接口就是实现类对外的外观。</p><h3 id="3接口的思想"><a class="markdownIt-Anchor" href="#3接口的思想"></a> 3.接口的思想</h3><p>根据接口的作用和用途，浓缩下来，<strong>接口的思想就是“封装隔离”</strong>。<br>通常提到的封装是指对数据的封装，但是这里的封装是指“对被隔离体的行为的封装”，或者是“对被隔离体的职责的封装”；而隔离指的是外部调用和内部实现，外部调用只能通过接口进行调用，外部调用是不知道内部具体实现的，也就是说外部调用和内部实现是被接口隔离开的。</p><h3 id="4使用接口的好处"><a class="markdownIt-Anchor" href="#4使用接口的好处"></a> 4.使用接口的好处</h3><p>由于外部调用和内部实现被接口隔离开了，那么只要接口不变，内部实现的变化就不会影响到外部应用，从而使得系统更灵活，具有更好的扩展性和可维护性，这也就是所谓“接口是系统可插拔性的保证”这句话的意思。</p><h3 id="5接口和抽象类的选择"><a class="markdownIt-Anchor" href="#5接口和抽象类的选择"></a> 5.接口和抽象类的选择</h3><p>既然接口是一种特殊的抽象类，那么在开发中，何时选用接口？何时选用抽象类呢？<br>对于它们的选择，在开发中是一个很重要的问题，特别总结两句话给大家：</p><ul><li>优先选用接口</li><li>在既要定义子类的行为，又要为子类提供公共的功能时应选择抽象类。</li></ul><h2 id="设计原则"><a class="markdownIt-Anchor" href="#设计原则"></a> 设计原则</h2><blockquote><p>面向对象的分析设计有很多原则，这些原则大多从<u>思想层面</u>给我们指出了面向对象分析设计的正确<u>方向</u>，是我们进行面向对象分析设计时应该尽力遵守的<u>准则</u>。而设计模式已经是针对某个场景下某些问题的某个解决方案。也就是说这些设计原则是思想上的指导，而<u>设计模式</u>是<u>实现上的手段</u>，因此设计模式也应该遵守这些原则，换句话说，设计模式就是这些设计原则的一些具体体现。</p></blockquote><h3 id="常见的面向对象设计原则solid原则"><a class="markdownIt-Anchor" href="#常见的面向对象设计原则solid原则"></a> 常见的面向对象设计原则——SOLID原则</h3><h4 id="单一职责原则srpsingle-responsibility-principle"><a class="markdownIt-Anchor" href="#单一职责原则srpsingle-responsibility-principle"></a> 单一职责原则SRP（Single Responsibility Principle）</h4><p>所谓单一职责原则，指的是，一个类应该仅有一个引起它变化的原因。总体来说就是一个class、interface、method只负责一项职责。<br>这里变化的原因就是所说的“职责”，如果一个类有多个引起它变化的原因，那么也就意味着这个类有多个职责，再进一步说，就是把多个职责耦合在一起了。<br>这会造成职责的相互影响，可能一个职责的变化，会影响到其他职责的实现，甚至引起其他职责随着变化，这种设计是很脆弱的。<br>这个原则看起来是最简单和最好理解的，但是实际上是很难完全做到的，难点在于如何区分“职责”。这是个没有标准量化的东西，哪些算职责、到底这个职责有多大的粒度、这个职责如何细化等。<em>因此，在实际开发中，这个原则也是最容易违反的</em>。</p><p><strong>▲一句话总结</strong>：一个类只干一件事，从而便于立即额，提高代码可读性</p><h4 id="开放-关闭原则ocpopen-closed-principle"><a class="markdownIt-Anchor" href="#开放-关闭原则ocpopen-closed-principle"></a> 开放-关闭原则OCP（Open-Closed Principle）</h4><blockquote><p>所谓开放-关闭原则，指的是，一个类应该对扩展开放，对修改关闭。一般也被简称为开闭原则，开闭原则是设计中非常核心的一个原则。</p><p>OCP的核心思想是面对抽象编程，强调用抽象构建框架，用实现拓展细节，从而额提高软件系统的可复用性和可维护性。</p></blockquote><p>开闭原则要求的是，类的行为是可以扩展的，而且是在不修改已有代码的情况下进行扩展，也不必改动已有的源代码或者二进制代码。<br>看起来好像是矛盾的，怎么样才能实现呢？<br>实现开闭原则的关键就在于合理地抽象、分离出变化与不变化的部分，为<u>变化的部分预留下可扩展的方式</u>，比如，<u>钩子方法或是动态组合对象</u>等。</p><p>这个原则看起来也很简单。但事实上，一个系统要全部做到遵守开闭原则，几乎是不可能的，也没这个必要。适度的抽象可以提高系统的灵活性，使其可扩展、可维护，但是过度地抽象，会大大增加系统的复杂程度。应该在需要改变的地方应用开闭原则就可以了，而不用到处使用，从而陷入过度设计。</p><p><strong>▲一句话总结</strong>：对扩展开放，对修改关闭，从而降低维护带来的新风险</p><h4 id="里氏替换原则lspliskov-substitution-principle"><a class="markdownIt-Anchor" href="#里氏替换原则lspliskov-substitution-principle"></a> 里氏替换原则LSP（Liskov Substitution Principle）</h4><p>所谓里氏替换原则，指的是，子类型<strong>必须能够</strong>替换掉它们的父类型。这很明显是一种多态的使用情况，它可以避免在多态的应用中，出现某些隐蔽的错误。</p><blockquote><p>这条原则的定义是比较抽象的，可以理解为</p><ol><li>一个软件实体如果使用一个父类，则一定适用于其子类，即要求所有引用父类的地方必须能透明地使用子类对象，子类能够代替父类对象，而程序逻辑不变。</li><li>子类可以拓展父类的功能，但不能改变父类原有的功能，根据这个理解，我们可以将DIP定义总结如下：<ol><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li><li>子类可以增加自己特有的方法</li><li>当子类的方法重载父类的方法时，方法的前置条件（入参）要比父类的更宽松</li><li>当子类的方法实现父类的方法时（重写、重载或实现抽象方法），方法的后置条件（输出、返回值）要比父类的更严格或相等</li></ol></li></ol></blockquote><p><strong>▲一句话总结</strong>：子类重写方法功能改变，不应该影响父类方法的含义，从而防止继承泛滥</p><h4 id="依赖倒置原则dipdependence-inversion-principle"><a class="markdownIt-Anchor" href="#依赖倒置原则dipdependence-inversion-principle"></a> 依赖倒置原则DIP（Dependence Inversion Principle）</h4><p>所谓依赖倒置原则，指的是，要依赖于抽象，不要依赖于具体类。要做到依赖倒置，典型的应该做到：</p><ul><li>高层模块不应该依赖于底层模块，二者都应该依赖于抽象。</li><li>抽象不应该依赖于具体实现，具体实现应该依赖于抽象。</li></ul><p>很多人觉得，层次化调用的时候，应该是高层调用“底层所拥有的接口”，这是一种典型的误解。事实上，一般高层模块包含对业务功能的处理和业务策略选择，应该被重用，是高层模块去影响底层的具体实现。<br>因此，这个底层的接口应该是由高层提出的，然后由底层实现的。也就是说底层的接口的所有权在高层模块，因此是一种所有权的倒置。<br>倒置接口所有权，这就是著名的Hollywood（好莱坞）原则：不要找我们，我们会联系你。</p><p><strong>一句话总结</strong>：高层不应该依赖底层，从而更利用代码结构的省级扩展</p><h4 id="接口隔离原则ispinterface-segregation-principle"><a class="markdownIt-Anchor" href="#接口隔离原则ispinterface-segregation-principle"></a> 接口隔离原则ISP（Interface Segregation Principle）</h4><blockquote><p>指用多个专门的接口，而不使用单一的总接口，客户端不应该依赖它不需要的接口（不需要的接口对客户来说不可见）。</p><p>这个原则告诉我们的注意点为：</p><ul><li>一个雷对另一个类的依赖应该建立在最小接口上</li><li>建立单一接口，不要建立庞大臃肿的接口</li><li>尽量细化接口，接口中的方法越少越好（适量少）</li></ul><p>这些“高聚合、低耦合”要求的设计思想，使得类具有很好的可读性、可扩展性和可维护性。</p></blockquote><p>所谓接口隔离原则，指的是，不应该强迫客户依赖于他们不用的方法。<br>这个原则用来处理那些比较“庞大”的接口，这种接口通常会有较多的操作声明，涉及到很多的职责。客户在使用这样的接口的时候，通常会有很多他不需要的方法，这些方法对于客户来讲，就是一种接口污染，相当于强迫用户在一大堆“垃圾方法”中去寻找他需要的方法。<br>因此，这样的接口应该被分离，应该按照不同的客户需要来分离成为针对客户的接口。<u>这样的接口中，只包含客户需要的操作声明</u>，这样既方便了客户的使用，也可以避免因误用接口而导致的错误。</p><p>分离接口的方式，除了直接进行代码分离之外，还可以使用委托来分离接口，在能够支持多重继承的语言中，还可以采用多重继承的方式进行分离。</p><p><strong>▲一句话总结</strong>：一个接口只干一件事，从而功能解耦，高聚合、低耦合</p><hr><p>demo：针对动物Animal接口，显然需要将飞的、游的隔离开，因此需要针对不同动物的行为来设计不同的接口。</p><p><img src="/2020/12/03/Lets-learn-设计模式/ISP.jpg" alt="ISP"></p><h3 id="其他一些设计原则"><a class="markdownIt-Anchor" href="#其他一些设计原则"></a> 其他一些设计原则</h3><h4 id="最少知道原则lkpleast-knowledge-principle迪米特原则lod"><a class="markdownIt-Anchor" href="#最少知道原则lkpleast-knowledge-principle迪米特原则lod"></a> 最少知道原则LKP（Least Knowledge Principle）——迪米特原则LoD</h4><blockquote><p>指一个对象应该对其他对象保持最少的了解，尽量降低类与类之间的耦合。强调之和朋友交流、不和陌生人说话，出现在成员变量、方法的输入、输出参数中的类可以被称为成员朋友类，出现在方法体内部的类不属于朋友类。</p></blockquote><p>这个原则用来指导我们在设计系统的时候，应该尽量减少对象之间的交互，对象只和自己的朋友谈话，<u>也就是只和自己的朋友交互</u>，从而松散类之间的耦合。通过松散类之间的耦合来降低类之间的相互依赖，这样在修改系统的某一个部分的时候，就不会影响其他的部分，从而使得系统具有更好的可维护性。</p><p>那么究竟哪些对象才能被当作朋友呢？最少知识原则提供了一些指导。</p><ul><li>当前对象本身。</li><li>通过方法的参数传递进来的对象。</li><li>当前对象所创建的对象。——成员变量</li><li>当前对象的实例变量所引用的对象。——成员变量</li><li>方法内所创建或实例化的对象。 —&gt; ???</li></ul><p>请注意！！！1-5条的意思是，<mark>如果某对象是调用其他方法的返回结果，不要调用该对象的方法！</mark>即要求我们只调用以下范围的方法：</p><p>（1）该对象本身；<br>（2）被当作方法的<strong>参数</strong>而传递进来的对象；<br>（3）此方法所<strong>创建或实例化</strong>的任何对象；<br>（4）对象的任何组件；</p><p>总之，最少知识原则要求我们的方法调用必须保持在一定的界限范围之内，尽量减少对象的依赖关系。</p><p><strong>▲一句话总结</strong>：不该知道的不要知道，从而减少代码臃肿</p><h4 id="合成复用原则"><a class="markdownIt-Anchor" href="#合成复用原则"></a> 合成复用原则</h4><blockquote><p>尽量使用对象组合或对象聚合的方式来实现代码复用，而不是继承关系达到代码复用的目的。</p></blockquote><p><strong>▲一句话总结</strong>：尽量使用组合实现代码复用而不是用继承，从而降低代码耦合</p><p>除了上面提到的这些原则，还有一些大家都熟知的原则，比如：</p><ul><li>面向接口编程；</li><li>优先使用组合，而非继承。</li></ul><p>当然也还有很多大家不是很熟悉的原则，比如：</p><ul><li>一个类需要的数据应该隐藏在类的内部；</li><li>类之间应该零耦合，或者只有传导耦合，换句话说，类之间要么没有关系，要么只使用另一个类的接口提供的操作；</li><li>在水平方向上尽可能统一地分布系统功能；</li></ul><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><p>Github图说设计模式: <a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html" target="_blank" rel="noopener">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html</a></p><p><a href="http://www.cnblogs.com/zishengY/p/8869823.html" target="_blank" rel="noopener">设计模式就该这么学：以微信订阅号来讲观察者模式(第三篇)</a></p><p><a href="http://www.cnblogs.com/zishengY/p/7056948.html" target="_blank" rel="noopener">观察者模式实际应用：监听线程，意外退出线程后自动重启</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;《研磨设计模式》和《设计模式就该这样学：基于经典框架源码和真实业务场景》的读书笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;设计模式是什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#设计模式是什么&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="计算机基础知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>玩玩油猴脚本Tampermonkey</title>
    <link href="https://nymrli.top/2020/12/01/%E7%8E%A9%E7%8E%A9%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/"/>
    <id>https://nymrli.top/2020/12/01/玩玩油猴脚本/</id>
    <published>2020-12-01T07:32:53.000Z</published>
    <updated>2020-12-01T12:19:48.468Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于在研究如何优化网盘直链下载助手**<a href="https://github.com/ziyuanshu/baidupan" target="_blank" rel="noopener">baidupan</a><strong>，如何将直链的结果提取出来供IDM批量下载。由于</strong><a href="https://github.com/ziyuanshu/baidupan" target="_blank" rel="noopener">baidupan</a>**是用油猴脚本写的，因此借机学习一下。</p></blockquote><blockquote></blockquote><h2 id="greasy-fork"><a class="markdownIt-Anchor" href="#greasy-fork"></a> <a href="https://greasyfork.org/zh-CN/" target="_blank" rel="noopener">Greasy Fork</a></h2><blockquote><p>这里是一个提供用户脚本的网站。</p></blockquote><h2 id="tampermonkey"><a class="markdownIt-Anchor" href="#tampermonkey"></a> <a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="noopener">Tampermonkey</a></h2><blockquote><p>其为浏览器插件，目前主流浏览器皆支持，油猴叫法来源：「油猴」是从「Greasemonkey」来的。「Greasemonkey」最初是运行在Firefox浏览器中的脚本，「Tampermonkey」在Google Chrome浏览器上实现了几乎相同的功能，所以也被中文用户称之为「油猴」。</p></blockquote><h3 id="新建"><a class="markdownIt-Anchor" href="#新建"></a> 新建：</h3><p><img src="/2020/12/01/玩玩油猴脚本/E:%5Chexo%5Csource_posts%5C%E7%8E%A9%E7%8E%A9%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC%5C%E6%96%B0%E5%BB%BA.jpg" alt="新建"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         New Userscript</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       You</span></span><br><span class="line"><span class="comment">// @match        https://www.1949la.com/post/10351.html</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2><h3 id="脚本编写方法"><a class="markdownIt-Anchor" href="#脚本编写方法"></a> 脚本编写方法</h3><h4 id="注释功能注释"><a class="markdownIt-Anchor" href="#注释功能注释"></a> 注释——功能注释</h4><p>首先来看看脚本的内容，上面是一大排注释，这些注释可以非常有用的，它表明了脚本的各个属性。下面来简单介绍一下。</p><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>name</td><td>油猴脚本的名字</td></tr><tr><td>namespace</td><td>命名空间，类似于Java的包名，用来区分相同名称的脚本，一般写成作者名字或者网址就可以了</td></tr><tr><td>version</td><td>脚本版本，油猴脚本的更新会读取这个版本号</td></tr><tr><td>description</td><td>描述，用来告诉用户这个脚本是干什么用的</td></tr><tr><td>author</td><td>作者名字</td></tr><tr><td>match</td><td>只有匹配的网址才会执行对应的脚本，例如<code>*</code>、<code>http://*</code>、<code>http://www.baidu.com/*</code>等，参见<a href="https://developer.chrome.com/extensions/match_patterns" target="_blank" rel="noopener">谷歌开发者文档</a></td></tr><tr><td>grant</td><td><strong>指定脚本运行所需权限</strong>，如果脚本拥有相应的权限，就可以调用油猴扩展提供的API与浏览器进行交互。如果设置为<code>none</code>的话，则不使用沙箱环境，脚本会直接运行在网页的环境中，这时候无法使用大部分油猴扩展的API。如果不指定的话，油猴会默认添加几个最常用的API</td></tr><tr><td>require</td><td>如果脚本依赖其他js库的话，可以使用require指令，在运行脚本之前先加载其他库，常见用法是加载jquery</td></tr><tr><td>connect</td><td>当用户使用<a href="https://www.tampermonkey.net/documentation.php?version=4.9&amp;ext=dhdg&amp;show=dhdg#GM_xmlhttpRequest" target="_blank" rel="noopener">GM_xmlhttpRequest</a>请求远程数据的时候，需要使用connect指定允许访问的域名，支持域名、子域名、IP地址以及<code>*</code>通配符</td></tr><tr><td>updateURL</td><td>脚本更新网址，当油猴扩展检查更新的时候，会尝试从这个网址下载脚本，然后比对版本号确认是否更新</td></tr></tbody></table><p>grant中几个常用的权限：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @grant GM_setValue</span></span><br><span class="line"><span class="comment">// @grant GM_getValue</span></span><br><span class="line"><span class="comment">// @grant GM_setClipboard</span></span><br></pre></td></tr></table></figure><p>注意， match写法由于支持通配符，可以写的通用些:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @match        *://10.10.244.11/a70.htm*</span></span><br><span class="line"><span class="comment">// @match        *://p.njupt.edu.cn/a70.htm*</span></span><br></pre></td></tr></table></figure><h4 id="脚本权限"><a class="markdownIt-Anchor" href="#脚本权限"></a> 脚本权限</h4><p>下面简单介绍一下grant指令那里可以填写的一些权限，详情请查看<a href="https://www.tampermonkey.net/documentation.php" target="_blank" rel="noopener">油猴脚本文档</a>。这里就简单介绍几个常用的，可以调用的函数全部以GM_作为开头。</p><table><thead><tr><th>权限名</th><th>功能</th></tr></thead><tbody><tr><td>unsafeWindow</td><td>允许脚本可以完整访问原始页面，包括原始页面的脚本和变量。</td></tr><tr><td>GM_getValue(name,defaultValue)</td><td>从油猴扩展的存储中访问数据。可以设置默认值，在没成功获取到数据的时候当做初始值。如果保存的是日期等类型的话，取出来的数据会变成文本，需要自己转换一下。</td></tr><tr><td>GM_setValue(name,value)</td><td>将数据保存到存储中</td></tr><tr><td>GM_xmlhttpRequest(details)</td><td><strong>异步访问网页数据</strong>的API，这个方法比较复杂，有大量参数和回调，详情请参考官方文档。</td></tr><tr><td>GM_setClipboard(data, info)</td><td>将数据复制到剪贴板中，第一个参数是要复制的数据，第二个参数是MIME类型，用于指定复制的数据类型。</td></tr><tr><td>GM_log(message)</td><td>将日志打印到控制台中，可以使用F12开发者工具查看。</td></tr><tr><td>GM_addStyle(css)</td><td>像网页中添加自己的样式表。</td></tr><tr><td>GM_notification(details, ondone), GM_notification(text, title, image, onclick)</td><td>设置网页通知，请参考文档获取用法。</td></tr><tr><td>GM_openInTab(url, loadInBackground)</td><td>在浏览器中打开网页，可以设置是否在后台打开等几个选项</td></tr></tbody></table><p>还有一些API没有介绍，请大家直接查看官方文档吧。</p><h5 id="gm_xmlhttprequest-demo"><a class="markdownIt-Anchor" href="#gm_xmlhttprequest-demo"></a> GM_xmlhttpRequest DEMO：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GM_xmlhttpRequest(&#123;</span><br><span class="line">    method: <span class="string">"POST"</span>,</span><br><span class="line">    url: url,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded;charset=utf-8"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data: form_data,</span><br><span class="line">    onload: <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"请求成功"</span>);</span><br><span class="line">        <span class="keyword">let</span> success = <span class="string">"认证成功页"</span>;</span><br><span class="line">        <span class="keyword">let</span> resp = response.responseText;</span><br><span class="line">        <span class="keyword">let</span> flag = resp.indexOf(success);</span><br><span class="line">        <span class="keyword">if</span> (flag === <span class="number">-1</span>) &#123;</span><br><span class="line">            do_login_old(username, password);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//alert("登录成功");</span></span><br><span class="line">            <span class="built_in">window</span>.location.href = <span class="string">"https://cn.bing.com/"</span>; <span class="comment">//避免重复登录导致瞬间三个设备同时登录的状态</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    onerror: <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        do_login_old(username, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mycode"><a class="markdownIt-Anchor" href="#mycode"></a> MyCode</h4><blockquote><p>我的第一个脚本，简简单单打开自己的个人博客吧，修改如下</p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="comment">// @match        https://www.baidu.com</span></span><br><span class="line">&gt;   <span class="comment">// @grant GM_openInTab</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;       <span class="keyword">const</span> URL = <span class="string">"https://nymrli.top"</span>;</span><br><span class="line">&gt;       GM_openInTab(URL, <span class="literal">true</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>访问百度的时候就会在当前session中打开我的个人博客了，(URL, true)不会切换到URL上</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         New Userscript</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       Mrli</span></span><br><span class="line"><span class="comment">// @match        https://www.baidu.com</span></span><br><span class="line"><span class="comment">// @grant GM_openInTab</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">const</span> URL = <span class="string">"https://nymrli.top"</span>;</span><br><span class="line">    GM_openInTab(URL, <span class="literal">true</span>);<span class="comment">// 打开URL后当前tab不变; false会切换当前tab为URL页面</span></span><br><span class="line">    <span class="comment">//     GM_openInTab(URL, &#123;incognito :true &#125;);   options中貌似有有限级, 加了incognito后,insert会失效</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h5 id="bilibili倍速"><a class="markdownIt-Anchor" href="#bilibili倍速"></a> Bilibili倍速</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         BilibiliFast</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       You</span></span><br><span class="line"><span class="comment">// @match        https://www.bilibili.com/video/*</span></span><br><span class="line"><span class="comment">// @require      https://code.jquery.com/jquery-2.1.4.min.js</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"导入成功"</span>);</span><br><span class="line">    $(<span class="string">"body"</span>).append(<span class="string">`&lt;div id='video_set' style="position:fixed; right:10px; top:10px; z-index:9999; background:red"&gt;</span></span><br><span class="line"><span class="string">             &lt;input id="setPlay" value=1 type="number" style="padding:10px;"&gt;</span></span><br><span class="line"><span class="string">       &lt;/div&gt;`</span></span><br><span class="line">       );</span><br><span class="line">    <span class="comment">// $(document).append()会报错Cannot read property 'createDocumentFragment' of undefined</span></span><br><span class="line"></span><br><span class="line">    $(<span class="built_in">document</span>).on(<span class="string">"change"</span>, <span class="string">"#video_set #setPlay"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.value &lt;= <span class="number">16</span>)&#123;</span><br><span class="line">                <span class="built_in">document</span>.querySelector(<span class="string">'video'</span>).playbackRate=<span class="keyword">this</span>.value;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                alert(<span class="string">"最大为16"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="学习baidupan源码"><a class="markdownIt-Anchor" href="#学习baidupan源码"></a> <strong>学习<a href="https://github.com/ziyuanshu/baidupan" target="_blank" rel="noopener">baidupan</a>源码</strong></h3><p>学到新东西：SweetAlert2 漂亮可定制的 JavaScript 弹窗</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @require           https://cdn.jsdelivr.net/npm/sweetalert2@9</span></span><br><span class="line"><span class="comment">// 基础语法：</span></span><br><span class="line">Swal.fire(&#123;</span><br><span class="line">title: <span class="string">"是否删除"</span>,</span><br><span class="line">text: <span class="string">"是否删除？一旦提交，无法恢复！"</span>,</span><br><span class="line">icon: <span class="string">"warning"</span>,</span><br><span class="line">showCancelButton: <span class="literal">true</span>,</span><br><span class="line">confirmButtonColor: <span class="string">"#DD6B55"</span>,</span><br><span class="line">confirmButtonText: <span class="string">"确定"</span>,</span><br><span class="line">cancelButtonText: <span class="string">"取消"</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">isConfirm</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 是否成功在then里面用if判断</span></span><br><span class="line"><span class="keyword">if</span> (isConfirm.value) &#123;</span><br><span class="line">Swal.fire(<span class="string">"删除成功"</span>, <span class="string">"成功"</span>, <span class="string">"success"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Swal.fire(<span class="string">"取消操作"</span>, <span class="string">"点击了取消"</span>, <span class="string">"error"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>来源于checkVersion</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setValue(<span class="string">'up'</span>,<span class="number">0</span>)</span><br><span class="line">    GM_xmlhttpRequest(&#123;</span><br><span class="line">        method: <span class="string">"GET"</span>,</span><br><span class="line">        url: <span class="string">`https://api.baiduyun.wiki/update?ver=<span class="subst">$&#123;version&#125;</span>`</span>,</span><br><span class="line">        responseType: <span class="string">'json'</span>,</span><br><span class="line">        onload: <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> res = r.response</span><br><span class="line">            setValue(<span class="string">'lastest_version'</span>, res.version)</span><br><span class="line">            userAgent = res.ua</span><br><span class="line">            ids = res.ids</span><br><span class="line">            <span class="keyword">if</span> (res.vcode === <span class="number">200</span> &amp;&amp; compareVersion(res.version,version)) &#123;</span><br><span class="line">                setValue(<span class="string">'up'</span>,<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res.scode != getValue(<span class="string">'scode'</span>)) &#123;</span><br><span class="line">                <span class="keyword">let</span> dom = $(<span class="string">'&lt;div&gt;&lt;img style="width: 250px;margin-bottom: 10px;" src="https://img.tool22.com/image/5f365d403c89f.jpg"&gt;&lt;input class="swal2-input" id="scode" type="text" placeholder="请输入暗号，可扫描上方二维码免费获取!"&gt;&lt;/div&gt;'</span>)</span><br><span class="line">                Swal.fire(&#123;</span><br><span class="line">                    title: <span class="string">"初次使用请输入暗号"</span>,</span><br><span class="line">                    html: dom[<span class="number">0</span>],</span><br><span class="line">                    allowOutsideClick: <span class="literal">false</span>,</span><br><span class="line">                    confirmButtonText: <span class="string">'确定'</span></span><br><span class="line">                &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (res.scode == $(<span class="string">'#scode'</span>).val()) &#123;</span><br><span class="line">                        setValue(<span class="string">'scode'</span>, res.scode)</span><br><span class="line">                        setValue(<span class="string">'init'</span>, <span class="number">1</span>)</span><br><span class="line">                        Toast.fire(&#123;</span><br><span class="line">                            icon: <span class="string">'success'</span>,</span><br><span class="line">                            text: <span class="string">'暗号正确，正在初始化中。。。'</span>,</span><br><span class="line">                        &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                            history.go(<span class="number">0</span>)<span class="comment">// go() 方法可加载历史列表中的某个具体的页面。（-1上一个页面，1前进一个页面, 0就是当前页面)</span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        setValue(<span class="string">'init'</span>, <span class="number">0</span>)</span><br><span class="line">                        Swal.fire(&#123;</span><br><span class="line">                            title: <span class="string">"🔺🔺🔺"</span>,</span><br><span class="line">                            text: <span class="string">'暗号不正确，请通过微信扫码免费获取'</span>,</span><br><span class="line">                            imageUrl: <span class="string">'https://img.tool22.com/image/5f365d403c89f.jpg'</span>,</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                loadPanhelper()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将console.log输出分组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clog</span>(<span class="params">c1, c2, c3</span>) </span>&#123;</span><br><span class="line">    c1 = c1 ? c1 : <span class="string">''</span></span><br><span class="line">    c2 = c2 ? c2 : <span class="string">''</span></span><br><span class="line">    c3 = c3 ? c3 : <span class="string">''</span></span><br><span class="line">    <span class="built_in">console</span>.group(<span class="string">'[网盘直链下载助手]'</span>)<span class="comment">// 分组</span></span><br><span class="line">    <span class="built_in">console</span>.log(c1, c2, c3)</span><br><span class="line">    <span class="built_in">console</span>.groupEnd()      <span class="comment">// 要想将其他内容显示在外面得取消分组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="程序的逻辑"><a class="markdownIt-Anchor" href="#程序的逻辑"></a> 程序的逻辑</h4><ul><li><p>开始:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(() =&gt; &#123;</span><br><span class="line">    <span class="comment">//阻止在其他网站运行</span></span><br><span class="line">    <span class="keyword">if</span> (hostname.match(<span class="regexp">/(pan|yun).baidu.com/i</span>)) &#123;</span><br><span class="line">        <span class="keyword">let</span> plugin = <span class="keyword">new</span> PanPlugin()</span><br><span class="line">        plugin.init()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>进行检查更新-&gt;创建菜单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PanPlugin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    clog(<span class="string">'RPC：'</span>, ariaRPC)</span><br><span class="line">    <span class="keyword">this</span>.init = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        main()</span><br><span class="line">        addGMStyle()</span><br><span class="line">        checkUpdate()</span><br><span class="line">        <span class="keyword">if</span> (getValue(<span class="string">'SETTING_H'</span>)) createHelp()</span><br><span class="line">        createMenu()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>主要的应用是在checkUpdate中的loadPanhelper完成的，其会根据参数创建PanHelper(网盘页面的下载助手)或PanShareHelper(分享页面的下载助手)对象， 显然PanHelper就是我们最想分析的</li></ul></li></ul><h4 id="panhelper逻辑"><a class="markdownIt-Anchor" href="#panhelper逻辑"></a> PanHelper逻辑</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PanHelper</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> yunData, sign, timestamp, bdstoken, logid, fid_list</span><br><span class="line">    <span class="keyword">let</span> fileList = [], selectFileList = [], batchLinkList = [], batchLinkListAll = [], linkList = []</span><br><span class="line">    <span class="keyword">let</span> dialog, searchKey</span><br><span class="line">    <span class="keyword">let</span> panAPIUrl = location.protocol + <span class="string">"//"</span> + location.host + <span class="string">"/api/"</span></span><br><span class="line">    <span class="keyword">let</span> restAPIUrl = location.protocol + <span class="string">"//pcs.baidu.com/rest/2.0/pcs/"</span></span><br><span class="line">    <span class="keyword">let</span> clientAPIUrl = location.protocol + <span class="string">"//pan.baidu.com/rest/2.0/"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.init = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        yunData = unsafeWindow.yunData</span><br><span class="line">        <span class="keyword">if</span> (yunData === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            clog(<span class="string">'初始化信息:'</span>, yunData)</span><br><span class="line">            clog(<span class="string">'页面未正常加载，或者百度已经更新！'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        initVar()</span><br><span class="line">        registerEventListener()</span><br><span class="line">        addButton()</span><br><span class="line">        createIframe()</span><br><span class="line">        dialog = <span class="keyword">new</span> Dialog(&#123;<span class="attr">addCopy</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">        clog(<span class="string">'下载助手加载成功！当前版本：'</span>, version)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最核心的逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我的网盘 - 获取PCS下载地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPCSBatchLink</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fsids = []</span><br><span class="line">    $.each(selectFileList, (index, element) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (element.isdir == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        fsids.push(element.fs_id)</span><br><span class="line">    &#125;)</span><br><span class="line">    fsids = <span class="built_in">encodeURIComponent</span>(<span class="built_in">JSON</span>.stringify(fsids))</span><br><span class="line">    <span class="keyword">let</span> link = clientAPIUrl + <span class="string">`xpan/multimedia?method=filemetas&amp;access_token=undefined&amp;fsids=<span class="subst">$&#123;fsids&#125;</span>&amp;dlink=1`</span></span><br><span class="line">    GM_xmlhttpRequest(&#123;</span><br><span class="line">        method: <span class="string">"GET"</span>,</span><br><span class="line">        responseType: <span class="string">'json'</span>,</span><br><span class="line">        headers: &#123;<span class="string">"User-Agent"</span>: userAgent&#125;,</span><br><span class="line">        url: link,</span><br><span class="line">        onload: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> response = res.response</span><br><span class="line">            <span class="keyword">if</span> (response.errno === <span class="number">0</span>) &#123;</span><br><span class="line">                callback(response.list)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h2><h3 id="官方文档"><a class="markdownIt-Anchor" href="#官方文档"></a> <a href="https://www.tampermonkey.net/documentation.php#GM_openInTab" target="_blank" rel="noopener">官方文档</a></h3><h3 id="tampermonkey油猴用户脚本api文档-教程"><a class="markdownIt-Anchor" href="#tampermonkey油猴用户脚本api文档-教程"></a> <a href="https://www.1949la.com/post/10351.html" target="_blank" rel="noopener">Tampermonkey油猴用户脚本API文档-教程</a></h3><h3 id="脚本debug建议"><a class="markdownIt-Anchor" href="#脚本debug建议"></a> 脚本debug建议</h3><h4 id="jquery使用"><a class="markdownIt-Anchor" href="#jquery使用"></a> jquery使用</h4><p>踩了几天坑，最后总结一下编写油猴脚本的一点步骤。首先要思考脚本的实现方式，需要用到什么API和权限，然后填写好脚本的注释信息。</p><p>然后将功能封装成函数的形式，最后在脚本末尾调用实现的函数。写的差不多的时候复制到浏览器中尝试运行。</p><p>遇到困难的时候，可能需要直接在F12开发者工具里进行调试。<u>有些网页不用jQuery，为了方便，我们需要自己将jQuery导入到页面中，可以将下面的代码复制到浏览器控制台中。</u></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jq = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">jq.src = <span class="string">"https://cdn.staticfile.org/jquery/3.4.1/jquery.min.js"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(jq);</span><br></pre></td></tr></table></figure><h4 id="debug方法"><a class="markdownIt-Anchor" href="#debug方法"></a> debug方法：</h4><p>第一种方法就是最原始的打印日志，可以利用<code>console.log</code>和<code>GM_log</code>来将关键信息打印出来，上面的脚本就是我靠打印日志一点点发现各种参数错误的。说实话这种办法有点笨。</p><p>第二种就是利用浏览器的调试功能(推荐)，在脚本需要调试的地方插入<code>debugger;</code>语句，然后在打开F12开发者工具的情况下刷新页面，就会发现网页已经暂停在相应位置上。这样就可以利用F12开发者工具进行单步调试、监视变量等操作了。</p><h3 id="将文章同步复制到csdn和思否编辑器的脚本demo"><a class="markdownIt-Anchor" href="#将文章同步复制到csdn和思否编辑器的脚本demo"></a> 将文章同步复制到Csdn和思否编辑器的脚本demo：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         copy_jianshu_to_csdn_and_segmentfault</span></span><br><span class="line"><span class="comment">// @namespace    https://github.com/techstay/myscripts</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  将简书文章复制到csdn和思否编辑器中</span></span><br><span class="line"><span class="comment">// @author       techstay</span></span><br><span class="line"><span class="comment">// @match        https://editor.csdn.net/md/</span></span><br><span class="line"><span class="comment">// @match https://segmentfault.com/write</span></span><br><span class="line"><span class="comment">// @match https://www.jianshu.com/writer*</span></span><br><span class="line"><span class="comment">// @require      https://cdn.staticfile.org/jquery/3.4.1/jquery.min.js</span></span><br><span class="line"><span class="comment">// @require      https://cdn.bootcss.com/jqueryui/1.12.1/jquery-ui.min.js</span></span><br><span class="line"><span class="comment">// @grant GM_setValue</span></span><br><span class="line"><span class="comment">// @grant GM_getValue</span></span><br><span class="line"><span class="comment">// @grant GM_deleteValue</span></span><br><span class="line"><span class="comment">// @grant unsafeWindow</span></span><br><span class="line"><span class="comment">// @grant GM_setClipboard</span></span><br><span class="line"><span class="comment">// @grant window.close</span></span><br><span class="line"><span class="comment">// @grant window.focus</span></span><br><span class="line"><span class="comment">// @grant GM_openInTab</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> SF_URL = <span class="string">'https://segmentfault.com/write'</span></span><br><span class="line">    <span class="keyword">const</span> CSDN_URL = <span class="string">'https://editor.csdn.net/md/'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> SF_TITLE = <span class="string">'sf_title'</span></span><br><span class="line">    <span class="keyword">const</span> SF_CONTENT = <span class="string">'sf_content'</span></span><br><span class="line">    <span class="keyword">const</span> CSDN_TITLE = <span class="string">'csdn_title'</span></span><br><span class="line">    <span class="keyword">const</span> CSDN_CONTENT = <span class="string">'csdn_content'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">saveArticle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        GM_setValue(CSDN_TITLE, $(<span class="string">'._24i7u'</span>).val())</span><br><span class="line">        GM_setValue(CSDN_CONTENT, $(<span class="string">'#arthur-editor'</span>).val())</span><br><span class="line">        GM_setValue(SF_TITLE, $(<span class="string">'._24i7u'</span>).val())</span><br><span class="line">        GM_setValue(SF_CONTENT, $(<span class="string">'#arthur-editor'</span>).val())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">copyToCsdn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> title = GM_getValue(CSDN_TITLE, <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">var</span> content = GM_getValue(CSDN_CONTENT, <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> (title != <span class="string">''</span> &amp;&amp; content != <span class="string">''</span>) &#123;</span><br><span class="line">            $(<span class="string">'.article-bar__title'</span>).delay(<span class="number">2000</span>).queue(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">'.article-bar__title'</span>).val(title)</span><br><span class="line">                $(<span class="string">'.editor__inner'</span>).text(content)</span><br><span class="line">                GM_deleteValue(CSDN_TITLE)</span><br><span class="line">                GM_deleteValue(CSDN_CONTENT)</span><br><span class="line">                $(<span class="keyword">this</span>).dequeue()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">copyToSegmentFault</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> title = GM_getValue(SF_TITLE, <span class="string">''</span>)</span><br><span class="line">            <span class="keyword">var</span> content = GM_getValue(SF_CONTENT, <span class="string">''</span>)</span><br><span class="line">            <span class="keyword">if</span> (title != <span class="string">''</span> &amp;&amp; content != <span class="string">''</span>) &#123;</span><br><span class="line">                $(<span class="string">'#title'</span>).delay(<span class="number">2000</span>).queue(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    $(<span class="string">'#title'</span>).val(title)</span><br><span class="line">                    GM_setClipboard(content, <span class="string">'text'</span>)</span><br><span class="line">                    GM_deleteValue(SF_TITLE)</span><br><span class="line">                    GM_deleteValue(SF_CONTENT)</span><br><span class="line">                    $(<span class="keyword">this</span>).dequeue()</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addCopyButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'body'</span>).append(<span class="string">'&lt;div id="copyToCS"&gt;双击复制到CSDN和思否&lt;/div&gt;'</span>)</span><br><span class="line">        $(<span class="string">'#copyToCS'</span>).css(<span class="string">'width'</span>, <span class="string">'200px'</span>)</span><br><span class="line">        $(<span class="string">'#copyToCS'</span>).css(<span class="string">'position'</span>, <span class="string">'absolute'</span>)</span><br><span class="line">        $(<span class="string">'#copyToCS'</span>).css(<span class="string">'top'</span>, <span class="string">'70px'</span>)</span><br><span class="line">        $(<span class="string">'#copyToCS'</span>).css(<span class="string">'left'</span>, <span class="string">'350px'</span>)</span><br><span class="line">        $(<span class="string">'#copyToCS'</span>).css(<span class="string">'background-color'</span>, <span class="string">'#28a745'</span>)</span><br><span class="line">        $(<span class="string">'#copyToCS'</span>).css(<span class="string">'color'</span>, <span class="string">'white'</span>)</span><br><span class="line">        $(<span class="string">'#copyToCS'</span>).css(<span class="string">'font-size'</span>, <span class="string">'large'</span>)</span><br><span class="line">        $(<span class="string">'#copyToCS'</span>).css(<span class="string">'z-index'</span>, <span class="number">100</span>)</span><br><span class="line">        $(<span class="string">'#copyToCS'</span>).css(<span class="string">'border-radius'</span>, <span class="string">'25px'</span>)</span><br><span class="line">        $(<span class="string">'#copyToCS'</span>).css(<span class="string">'text-align'</span>, <span class="string">'center'</span>)</span><br><span class="line">        $(<span class="string">'#copyToCS'</span>).dblclick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            saveArticle()</span><br><span class="line">            GM_openInTab(SF_URL, <span class="literal">true</span>)</span><br><span class="line">            GM_openInTab(CSDN_URL, <span class="literal">true</span>)</span><br><span class="line">            <span class="comment">// GM_openInTab(url, options)在新标签页打开URL。options可选的值：</span></span><br><span class="line">            <span class="comment">// active ：新标签页获得焦点; insert：新标签页在当前页面之后添加; setParent：当新标签页关闭后，焦点给回当前页面 ; incognito: 新标签页在隐身模式或私有模式窗口打开. </span></span><br><span class="line">            <span class="comment">// options可以写成&#123; active: true, insert: true, setParent :true &#125;</span></span><br><span class="line">            <span class="comment">// GM_openInTab(url, loadInBackground)：loadInBackground 可以是 Boolean 类型，如果是 true，则当前 tab 不变，如果是 false，则当前 tab 变为新打开的 tab.  当前tab就是当前标签页(显示的页面)</span></span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="string">'#copyToCS'</span>).draggable()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.location.href.startsWith(<span class="string">'https://www.jianshu.com'</span>)) &#123;</span><br><span class="line">            addCopyButton()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.location.href.startsWith(SF_URL)) &#123;</span><br><span class="line">            copyToSegmentFault()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.location.href.startsWith(CSDN_URL)) &#123;</span><br><span class="line">            copyToCsdn()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>▲推荐：<a href="https://blog.csdn.net/u011054333/article/details/104101806" target="_blank" rel="noopener">油猴脚本编写教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于在研究如何优化网盘直链下载助手**&lt;a href=&quot;https://github.com/ziyuanshu/baidupan&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;baidupan&lt;/a&gt;&lt;strong&gt;，如何将直链
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浙大2020春夏-人工智能习题3——AIforOthello</title>
    <link href="https://nymrli.top/2020/12/01/%E6%B5%99%E5%A4%A72020%E6%98%A5%E5%A4%8F-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B9%A0%E9%A2%981%E2%80%94%E2%80%94AIforOthello/"/>
    <id>https://nymrli.top/2020/12/01/浙大2020春夏-人工智能习题1——AIforOthello/</id>
    <published>2020-12-01T04:02:33.000Z</published>
    <updated>2020-12-11T03:17:16.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="something-about-othello"><a class="markdownIt-Anchor" href="#something-about-othello"></a> something about Othello</h2><h3 id="黑白棋规则"><a class="markdownIt-Anchor" href="#黑白棋规则"></a> 黑白棋规则</h3><p>传统的黑白棋棋盘由 8 x 8 方格组成。开局时，棋盘中央的4格先置黑白相间的4颗棋子 (详见下图)，并由<strong>黑子先行</strong>。</p><p>首步由黑子先下；下子时；新子必须与棋盘上任一己方棋子形成一条或多条 (横、竖、斜) 直线，并夹着对方棋子；由新子及旧子连成的直线之间，必须存有一颗或以上对方的棋子。如图，黑子开局时之可行棋步有以下4格:</p><p>双方交替下子；倘若任何一方没有棋步可行，则其必须将下子权利相认予对手；另在双方均无子可下的情况下，游戏自动结束。</p><p>游戏结束后，拥子较多一方为胜；倘若双方棋数相同的，则为和局。</p><h3 id="黑白棋基本策略"><a class="markdownIt-Anchor" href="#黑白棋基本策略"></a> 黑白棋基本策略</h3><h4 id="占角子及固定子"><a class="markdownIt-Anchor" href="#占角子及固定子"></a> 占角子及固定子</h4><blockquote><p>按照黑白棋的玩法，其中一子落在佔角处的，该棋子将无法再被翻转。</p></blockquote><h4 id="危险方块"><a class="markdownIt-Anchor" href="#危险方块"></a> 危险方块</h4><p>在棋盘上，棋子下在某些方块中，比起其它下子位置更为安全。档游戏开始，一般建议尽量将棋子下于棋盘 4 x 4格的中心范围内 (下图以半透明白子显示)；且应避免将棋子下于靠近边角的方块内(下图以半透明黑子显示)，棋子落于靠近边角的方块中，会让对手更容易占据边角相邻的位置。</p><p><img src="https://www.eothello.com/images/basic_strategy_othello_2.png" alt="Basic strategy - danger zones"></p><h4 id="行动力"><a class="markdownIt-Anchor" href="#行动力"></a> 行动力</h4><p>初学者的普遍错误一般在开盘后<u>不断占子</u>，但在黑白棋中这并<u>不是一个好的策略</u>。<strong>较好的策略为专注于限制对方的落子选项，而交易进入这种策略的方法为占少子</strong>。在下面的例子中，白子虽然只有一颗棋子，但其可轻而易具的在4步内赢得整盘棋。</p><p>from : <a href="https://www.eothello.com/" target="_blank" rel="noopener">https://www.eothello.com/</a></p><p>较为强悍的othello AI: <a href="https://playpager.com/play-reversi/index.html" target="_blank" rel="noopener">https://playpager.com/play-reversi/index.html</a></p><h2 id="ai-for-othello-coding"><a class="markdownIt-Anchor" href="#ai-for-othello-coding"></a> AI for Othello Coding</h2><h3 id="search-before-coding"><a class="markdownIt-Anchor" href="#search-before-coding"></a> search before Coding：</h3><ul><li><a href="https://github.com/Unispac" target="_blank" rel="noopener">Unispac</a>/<strong><a href="https://github.com/Unispac/Alpha-Othello" target="_blank" rel="noopener">Alpha-Othello</a></strong>——浙大学长的（集成了很多Agent）</li><li><a href="https://github.com/YuMu0" target="_blank" rel="noopener">YuMu0</a>/<strong><a href="https://github.com/YuMu0/ReversiAI" target="_blank" rel="noopener">ReversiAI</a></strong>——博弈树、α-β剪枝（有UI；单文件，结构有点差）</li><li><a href="https://github.com/1011497938" target="_blank" rel="noopener">1011497938</a>/<strong><a href="https://github.com/1011497938/Othello" target="_blank" rel="noopener">Othello</a></strong>——MCTS、Q-learning（在浙大学长的基础上增加了几类agent）</li><li><a href="https://github.com/im0qianqian" target="_blank" rel="noopener">im0qianqian</a>/<strong><a href="https://github.com/im0qianqian/Reversi-based-RL" target="_blank" rel="noopener">Reversi-based-RL</a></strong>——毕设，文档说明：<a href="https://www.dreamwings.cn/reversi/3013.html" target="_blank" rel="noopener">https://www.dreamwings.cn/reversi/3013.html</a></li><li><a href="https://github.com/faded53222" target="_blank" rel="noopener">faded53222</a>/<strong><a href="https://github.com/faded53222/Othello" target="_blank" rel="noopener">Othello</a></strong>——B站用户</li></ul><hr><h2 id="mycode"><a class="markdownIt-Anchor" href="#mycode"></a> MyCode</h2><blockquote><p>部分借鉴了<a href="https://github.com/int8/monte-carlo-tree-search" target="_blank" rel="noopener">tic-tac-toe井字棋MCTS</a>的代码框架</p></blockquote><p>MSCT-target： Start：从可行位置进行树探索 -&gt; End：一个价值比较高的action</p><p><mark>代码中容易忘记的是，所有的board在rollout的时候都应该保存的临时变量，即确保node的self.board是不变的；board设计的时候，不要限定死color（move），这样可选择性更好</mark></p><p>虽然加上了corner，但是对站中级还是赢少输多， 看了下比赛棋盘，发现对corner的限制并不奏效，希望能找到更好的方法吧。</p><p><img src="/2020/12/01/浙大2020春夏-人工智能习题1——AIforOthello/mct-seq.png" alt="mct-seq"></p><h3 id="战力"><a class="markdownIt-Anchor" href="#战力"></a> 战力</h3><h4 id="basic"><a class="markdownIt-Anchor" href="#basic"></a> basic</h4><h5 id="初级win"><a class="markdownIt-Anchor" href="#初级win"></a> 初级WIN</h5><p><img src="/2020/12/01/浙大2020春夏-人工智能习题1——AIforOthello/E:%5Chexo%5Csource_posts%5CAI-for-Othello%5Cbasic_%E5%88%9D%E7%BA%A7win-%E4%B8%AD%E7%BA%A7Lost%5C%E5%88%9D%E7%BA%A7%5C12.png" alt="12"></p><p><img src="/2020/12/01/浙大2020春夏-人工智能习题1——AIforOthello/E:%5Chexo%5Csource_posts%5CAI-for-Othello%5Cbasic_%E5%88%9D%E7%BA%A7win-%E4%B8%AD%E7%BA%A7Lost%5C%E5%88%9D%E7%BA%A7%5C21.png" alt="21"></p><p><img src="/2020/12/01/浙大2020春夏-人工智能习题1——AIforOthello/E:%5Chexo%5Csource_posts%5CAI-for-Othello%5Cbasic_%E5%88%9D%E7%BA%A7win-%E4%B8%AD%E7%BA%A7Lost%5C%E5%88%9D%E7%BA%A7%5C22.png" alt="22"></p><h5 id="中级loss"><a class="markdownIt-Anchor" href="#中级loss"></a> 中级LOSS：</h5><p><img src="/2020/12/01/浙大2020春夏-人工智能习题1——AIforOthello/E:%5Chexo%5Csource_posts%5CAI-for-Othello%5Cbasic_%E5%88%9D%E7%BA%A7win-%E4%B8%AD%E7%BA%A7Lost%5C%E4%B8%AD%E7%BA%A7%5C11.png" alt="11"></p><p><img src="/2020/12/01/浙大2020春夏-人工智能习题1——AIforOthello/E:%5Chexo%5Csource_posts%5CAI-for-Othello%5Cbasic_%E5%88%9D%E7%BA%A7win-%E4%B8%AD%E7%BA%A7Lost%5C%E4%B8%AD%E7%BA%A7%5C12.png" alt="12"></p><p><img src="/2020/12/01/浙大2020春夏-人工智能习题1——AIforOthello/E:%5Chexo%5Csource_posts%5CAI-for-Othello%5Cbasic_%E5%88%9D%E7%BA%A7win-%E4%B8%AD%E7%BA%A7Lost%5C%E4%B8%AD%E7%BA%A7%5C21.png" alt="21"></p><p><img src="/2020/12/01/浙大2020春夏-人工智能习题1——AIforOthello/E:%5Chexo%5Csource_posts%5CAI-for-Othello%5Cbasic_%E5%88%9D%E7%BA%A7win-%E4%B8%AD%E7%BA%A7Lost%5C%E4%B8%AD%E7%BA%A7%5C22.png" alt="22"></p><h4 id="加上corner"><a class="markdownIt-Anchor" href="#加上corner"></a> 加上corner：</h4><h5 id="中级tie"><a class="markdownIt-Anchor" href="#中级tie"></a> 中级tie</h5><p><img src="/2020/12/01/浙大2020春夏-人工智能习题1——AIforOthello/E:%5Chexo%5Csource_posts%5CAI-for-Othello%5C%E5%8A%A0%E4%B8%8Acorner%5C11.png" alt="11"></p><p><img src="/2020/12/01/浙大2020春夏-人工智能习题1——AIforOthello/E:%5Chexo%5Csource_posts%5CAI-for-Othello%5C%E5%8A%A0%E4%B8%8Acorner%5C12.png" alt="12"></p><h5 id="中级win"><a class="markdownIt-Anchor" href="#中级win"></a> 中级WIN</h5><p><img src="/2020/12/01/浙大2020春夏-人工智能习题1——AIforOthello/E:%5Chexo%5Csource_posts%5CAI-for-Othello%5C%E5%8A%A0%E4%B8%8Acorner%5C21.png" alt="21"></p><p><img src="/2020/12/01/浙大2020春夏-人工智能习题1——AIforOthello/E:%5Chexo%5Csource_posts%5CAI-for-Othello%5C%E5%8A%A0%E4%B8%8Acorner%5C22.png" alt="22"></p><h4 id="高级"><a class="markdownIt-Anchor" href="#高级"></a> 高级：</h4><h2 id="时间安排"><a class="markdownIt-Anchor" href="#时间安排"></a> 时间安排</h2><p>2020/12/2 上网冲浪，搜集相关资料，看了<a href="https://github.com/Unispac" target="_blank" rel="noopener">Unispac</a>/**<a href="https://github.com/Unispac/Alpha-Othello" target="_blank" rel="noopener">Alpha-Othello</a>**的设计报告。</p><p>2020/12/4 结合<a href="https://github.com/1011497938/Othello" target="_blank" rel="noopener">代码</a>和[视频](<a href="https://www.bilibili.com/video/BV1JD4y1Q7mV?from=search&amp;seid=6045698802301050730" target="_blank" rel="noopener">AI如何下棋？直观了解蒙特卡洛树搜索MCTS！！！</a>理了遍MCTS的原理， 列出了大致的框架， 明天开始编写逻辑代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;something-about-othello&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#something-about-othello&quot;&gt;&lt;/a&gt; something about Othello&lt;/h2&gt;
&lt;h3 id=&quot;黑白棋规
      
    
    </summary>
    
    
      <category term="ZJU" scheme="https://nymrli.top/tags/ZJU/"/>
    
      <category term="ML" scheme="https://nymrli.top/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>fork curlconverter for Better</title>
    <link href="https://nymrli.top/2020/12/01/fork-curlconverter-for-Better/"/>
    <id>https://nymrli.top/2020/12/01/fork-curlconverter-for-Better/</id>
    <published>2020-12-01T02:43:34.000Z</published>
    <updated>2020-12-01T04:00:56.428Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>终于12月了，又是一个月初，定个flag，pr一个Gitcode</p><p>由于之前写Python爬虫的时候，从<a href="https://github.com/NickCarneiro/curlconverter" target="_blank" rel="noopener">curlconverter</a>受惠很多，并且看到<a href="https://github.com/NickCarneiro/curlconverter/issues/22" target="_blank" rel="noopener">issue #22: Add generator for Java</a>中有Java版本的需求还未完成，所以目标就是完成JAVA for curl</p></blockquote><p>curlconverter提供了一个网页版： <a href="https://curl.trillworks.com/%EF%BC%8C" target="_blank" rel="noopener">https://curl.trillworks.com/，</a> 其实其本质上也是用js完成的，功能如README中所写：</p><h2 id="readme"><a class="markdownIt-Anchor" href="#readme"></a> README</h2><h3 id="install"><a class="markdownIt-Anchor" href="#install"></a> Install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save curlconverter</span><br></pre></td></tr></table></figure><h3 id="usage"><a class="markdownIt-Anchor" href="#usage"></a> Usage</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> curlconverter = <span class="built_in">require</span>(<span class="string">'curlconverter'</span>);</span><br><span class="line"></span><br><span class="line">curlconverter.toPython(<span class="string">"curl 'http://en.wikipedia.org/' -H 'Accept-Encoding: gzip, deflate, sdch' -H 'Accept-Language: en-US,en;q=0.8' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' -H 'Referer: http://www.wikipedia.org/' -H 'Cookie: GeoIP=US:Albuquerque:35.1241:-106.7675:v4; uls-previous-languages=%5B%22en%22%5D; mediaWiki.user.sessionId=VaHaeVW3m0ymvx9kacwshZIDkv8zgF9y; centralnotice_buckets_by_campaign=%7B%22C14_enUS_dsk_lw_FR%22%3A%7B%22val%22%3A%220%22%2C%22start%22%3A1412172000%2C%22end%22%3A1422576000%7D%2C%22C14_en5C_dec_dsk_FR%22%3A%7B%22val%22%3A3%2C%22start%22%3A1417514400%2C%22end%22%3A1425290400%7D%2C%22C14_en5C_bkup_dsk_FR%22%3A%7B%22val%22%3A1%2C%22start%22%3A1417428000%2C%22end%22%3A1425290400%7D%7D; centralnotice_bannercount_fr12=22; centralnotice_bannercount_fr12-wait=14' -H 'Connection: keep-alive' --compressed"</span>);</span><br></pre></td></tr></table></figure><p>Returns a string of Python code like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">'GeoIP'</span>: <span class="string">'US:Albuquerque:35.1241:-106.7675:v4'</span>,</span><br><span class="line">    <span class="string">'uls-previous-languages'</span>: <span class="string">'%5B%22en%22%5D'</span>,</span><br><span class="line">    <span class="string">'mediaWiki.user.sessionId'</span>: <span class="string">'VaHaeVW3m0ymvx9kacwshZIDkv8zgF9y'</span>,</span><br><span class="line">    <span class="string">'centralnotice_buckets_by_campaign'</span>: <span class="string">'%7B%22C14_enUS_dsk_lw_FR%22%3A%7B%22val%22%3A%220%22%2C%22start%22%3A1412172000%2C%22end%22%3A1422576000%7D%2C%22C14_en5C_dec_dsk_FR%22%3A%7B%22val%22%3A3%2C%22start%22%3A1417514400%2C%22end%22%3A1425290400%7D%2C%22C14_en5C_bkup_dsk_FR%22%3A%7B%22val%22%3A1%2C%22start%22%3A1417428000%2C%22end%22%3A1425290400%7D%7D'</span>,</span><br><span class="line">    <span class="string">'centralnotice_bannercount_fr12'</span>: <span class="string">'22'</span>,</span><br><span class="line">    <span class="string">'centralnotice_bannercount_fr12-wait'</span>: <span class="string">'14'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, sdch'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'en-US,en;q=0.8'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'http://www.wikipedia.org/'</span>,</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://en.wikipedia.org/'</span>, headers=headers, cookies=cookies)</span><br></pre></td></tr></table></figure><p>想要参加开发，最重要的就是看清master提出的contributing要求：</p><h3 id="contributing"><a class="markdownIt-Anchor" href="#contributing"></a> Contributing</h3><blockquote><p>I’d rather write programs to write programs than write programs.</p><p>Dick Sites, Digital Equipment Corporation, September 1985</p></blockquote><p>Make sure you’re running node 12 or greater. The test suite will fail on older versions of node.</p><p>If you add a new generator, make sure to update the list of supported languages in <a href="https://github.com/NickCarneiro/curlconverter/blob/master/bin/cli.js" target="_blank" rel="noopener">cli.js</a> or else it won’t be accessible from the command line. Further, you’ll want to update test.js and index.js for your new generator to make it part of the testing.</p><p>If you want to add new functionality, start with a test.</p><ul><li>Create a file containing the curl command in <code>fixtures/curl_commands</code> with a descriptive filename like <code>post_with_headers.txt</code></li><li>Create a file containing the output in <code>fixtures/python_output/</code> with a matching filename (but different extension) like <code>post_with_headers.py</code></li><li>Run tests with <code>npm test</code>.</li><li>If your filenames match correctly, you should see one failing test. Fix it by modifying the parser in <code>util.js</code> or the generators in <code>generators/</code></li></ul><p>The parser generates a generic data structure consumed by code generator functions.</p><p>You can run a specific test with this command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node test.js --test=test_name</span><br></pre></td></tr></table></figure><p>where “test_name” is a file (without extension) in <code>fixtures/curl_commands</code></p><p>You can run a specific test with this command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node test.js --language=R</span><br></pre></td></tr></table></figure><p>I recommend setting this up with a debugger so you can see exactly what the parser is passing to the generator. Here’s my Intellij run configuration for a single test:</p><p>Before submitting a PR, please check that your JS code conforms to the code style enforced by <a href="https://standardjs.com/" target="_blank" rel="noopener">standardjs</a>. Use the following to fix your code if it doesn’t:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ standard --fix my_file.js</span><br></pre></td></tr></table></figure><p>If you get stuck, please reach out via email. I am always willing to hop on a google hangout and pair program.</p><h4 id="翻译"><a class="markdownIt-Anchor" href="#翻译"></a> 翻译：</h4><blockquote><p>相比写程序，我更愿意写出能写程序的程序。——Dick Sites, Digital Equipment Corporation, September 1985</p></blockquote><p>确保你正在运行node 12或更高版本。测试套件在旧版本的node上会失败。</p><p>如果你添加了一个新的生成器，请确保更新cli.js中的支持语言列表，否则它将无法从命令行访问。此外，你还要为你的新生成器更新test.js和index.js，使其成为测试的一部分。</p><p>如果您想添加新功能，请从测试开始。</p><ul><li>在<code>fixtures/curl_commands</code>中创建一个包含curl命令的文件，文件名为post_with_headers.txt。</li><li>在<code>fixtures/python_output/</code>中创建一个包含输出的文件，并使用一个匹配的文件名（但不同的扩展名），比如<code>post_with_headers.py</code>。</li><li>用<code>npm test</code>运行测试。</li><li>如果您的文件名正确匹配，您应该看到一个失败的测试。通过修改<code>util.js</code>中的解析器或<code>generators/</code>中的生成器来解决。</li></ul><p>解析器需要生成一个通用数据结构给代码生成器函数。</p><p>你可以用这个命令运行一个特定的测试。<code>node test.js --test=test_name</code>， 其中 &quot;test_name &quot;是<code>fixtures/curl_commands</code>中的一个文件（没有扩展名）。</p><p>你可以用这个命令运行一个特定的测试。<code>node test.js --language=R</code>，我建议用调试器来设置，这样你就可以看到解析器传递给生成器的具体内容。这是我的Intellij运行配置，用于单次测试。</p><p><img src="https://github.com/NickCarneiro/curlconverter/raw/master/docs/intellijconfig.png" alt="Screenshot of intellij debug configuration"></p><p>在提交PR之前，请检查您的JS代码是否符合standardjs执行的代码风格。如果不符合的话，请使用下面的方法来修正你的代码。<code>$ standard --fix my_file.js.</code></p><p>如果你遇到困难，请通过电子邮件联系我。我总是愿意跳上google上线、校验程序。</p><hr><h2 id="分析其他contributor的pr"><a class="markdownIt-Anchor" href="#分析其他contributor的pr"></a> 分析其他contributor的PR</h2><h3 id="dainisgorbunovs"><a class="markdownIt-Anchor" href="#dainisgorbunovs"></a> <strong><a href="https://github.com/DainisGorbunovs" target="_blank" rel="noopener">DainisGorbunovs</a></strong></h3><ul><li>PR说明：<a href="https://github.com/NickCarneiro/curlconverter/pull/154" target="_blank" rel="noopener">https://github.com/NickCarneiro/curlconverter/pull/154</a><ul><li>Thanks / what I found helpful：<ul><li>可以使用nc -l 3000，然后在另一个标签页中 curl -X POST <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> --data “hello=world” (感谢 @NickCarneiro)</li><li>可以使用Wireshark来检查（抓包）</li><li>可以使用<strong>httpbin</strong>服务（用途：个人感觉是将curl结果跟generate结果对比）</li></ul></li></ul></li><li>commit详情：<a href="https://github.com/DainisGorbunovs/curlconverter/commit/5cfedbf595177aa912b78f0fde05f15da81f11f9" target="_blank" rel="noopener">https://github.com/DainisGorbunovs/curlconverter/commit/5cfedbf595177aa912b78f0fde05f15da81f11f9</a></li></ul><hr><h2 id="java-for-curl"><a class="markdownIt-Anchor" href="#java-for-curl"></a> JAVA for Curl</h2><h3 id="http库选取"><a class="markdownIt-Anchor" href="#http库选取"></a> http库选取</h3><blockquote><p>在2016年的时候**<a href="https://github.com/NickCarneiro" target="_blank" rel="noopener">NickCarneiro</a>**就<a href="https://github.com/NickCarneiro/curlconverter/issues/22" target="_blank" rel="noopener">Add generator for Java #22</a>提出增加JAVA版本， 但无奈JAVA较为繁琐，并且没有像Python的requests一样好用的库，因此现在都还未有JAVA版本</p><blockquote><p>Java is super popular and super verbose, making it a good candidate for curlconverter.<br>We need to find out if there is some modern library for sending http requests. Please advise.</p></blockquote></blockquote><h4 id="1-httpclient"><a class="markdownIt-Anchor" href="#1-httpclient"></a> 1、HttpClient</h4><blockquote><p>HttpClient：代码复杂，还得操心资源回收等。代码很复杂，冗余代码多，不建议直接使用。</p></blockquote><h5 id="httpclient使用介绍"><a class="markdownIt-Anchor" href="#httpclient使用介绍"></a> HttpClient使用介绍</h5><p>使用HttpClient发送请求主要分为以下几步骤：</p><ul><li>创建 CloseableHttpClient对象或CloseableHttpAsyncClient对象，前者同步，后者为异步</li><li>创建Http请求对象</li><li>调用execute方法执行请求，如果是异步请求在执行之前需调用start方法</li></ul><ol><li>java原生HttpURLConnection</li><li>apache HttpClient3.1</li><li>apache httpClient4.5</li></ol><p>上述见：<a href="https://www.cnblogs.com/hhhshct/p/8523697.html" target="_blank" rel="noopener">java实现HTTP请求的三种方式</a>—— 有代码demo</p><h4 id="2-okhttp"><a class="markdownIt-Anchor" href="#2-okhttp"></a> 2、okhttp</h4><blockquote><p>okhttp：OkHttp是一个高效的HTTP客户端，允许所有同一个主机地址的请求共享同一个socket连接；连接池减少请求延时；透明的GZIP压缩减少响应数据的大小；缓存响应内容，避免一些完全重复的请求</p></blockquote><p>OkHttp使用</p><p>使用OkHttp发送请求主要分为以下几步骤：</p><ul><li>创建OkHttpClient对象</li><li>创建Request对象</li><li>将Request 对象封装为Call</li><li>通过Call 来执行同步或异步请求，调用execute方法同步执行，调用enqueue方法异步执行</li></ul><h4 id="3-resttemplate"><a class="markdownIt-Anchor" href="#3-resttemplate"></a> 3、RestTemplate</h4><blockquote><p>RestTemplate： 是 Spring 提供的用于访问Rest服务的客户端， RestTemplate 提供了多种便捷访问远程Http服务的方法,能够大大提高客户端的编写效率。</p></blockquote><p><a href="https://www.cnblogs.com/zk-blog/p/12465951.html" target="_blank" rel="noopener">https://www.cnblogs.com/zk-blog/p/12465951.html</a></p><h4 id="4http-request"><a class="markdownIt-Anchor" href="#4http-request"></a> 4.<strong><a href="https://github.com/kevinsawicki/http-request" target="_blank" rel="noopener">http-request</a></strong></h4><blockquote><p>在我们日常工作中，我们需要经常和第三方接口进行交互通信，很多时候我们都是使用http协议进行交互，java原生自带对http的支持（<code>java.net.*</code>），但是使用起来不太方便，除此之外，用的最多的就是apache httpclient工具包。但是个人使用这么久而言，感觉不管是原生的抑或是httpclient，使用起来都不太顺手，也略显复杂</p></blockquote><p>文章见： <a href="https://www.jianshu.com/p/e955b01e2e16" target="_blank" rel="noopener">JAVA http请求工具类http-request</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;终于12月了，又是一个月初，定个flag，pr一个Gitcode&lt;/p&gt;
&lt;p&gt;由于之前写Python爬虫的时候，从&lt;a href=&quot;https://github.com/NickCarneiro/curlconverter&quot; target=&quot;_b
      
    
    </summary>
    
    
      <category term="GitCode" scheme="https://nymrli.top/tags/GitCode/"/>
    
  </entry>
  
  <entry>
    <title>《漫画机器学习入门》大关真之——读书笔记</title>
    <link href="https://nymrli.top/2020/11/28/%E3%80%8A%E6%BC%AB%E7%94%BB%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E3%80%8B%E5%A4%A7%E5%85%B3%E7%9C%9F%E4%B9%8B%E2%80%94%E2%80%94%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://nymrli.top/2020/11/28/《漫画机器学习入门》大关真之——读书笔记/</id>
    <published>2020-11-28T13:39:01.000Z</published>
    <updated>2020-11-28T13:40:38.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漫画机器学习入门总结"><a class="markdownIt-Anchor" href="#漫画机器学习入门总结"></a> 《漫画机器学习入门》总结</h1><p>机器学习是指计算机通过不断地处理数据并修正算法和参数来学习各种规则， 从而不断改进模型而得到更优化的算法。书中主要讲解了玻尔兹曼机的机器学习</p><h3 id="谁是世界上最美丽的人"><a class="markdownIt-Anchor" href="#谁是世界上最美丽的人"></a> <a href="https://blog.csdn.net/weixin_41513917/article/details/102646458#%E7%9F%A5%E8%AF%86%E7%82%B9" target="_blank" rel="noopener">谁是世界上最美丽的人？</a></h3><ol><li><p>****特征量****就是如每一个人的年龄，眼睛大小； 特征向量就是每个人的特征量放到一起，特征向量是表达特征的一个数组</p></li><li><p>误差函数： 在美丽程度这个问题上， 误差函数就是—— 计算“美丽程度”的实际输出与给定的理想输出之间的差值</p></li><li><p>最优化问题：  最小化误差函数，其实是一个求解最优化问题：我们的任务就是要找到没有误差或者误差小到满足要求的最适合的模型。这就要通过调节模型中的参数，使误差函数值尽量小，这就是求解（参数）最优化问题。</p><ol><li>微分：稍微拉动一点摇杆，确认误差是否变小。这种操作叫做<strong>微分</strong>。</li><li>梯度下降法： 一直拉到误差不再减少，直到误差值保持不变或者反而有所上升时为止。希望不停地调整权重，使得误差一直在朝着减小的方向前进。这种调整误差的方法叫<strong>梯度下降法</strong>。</li><li><img src="https://img-blog.csdnimg.cn/20191021100811994.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTUxMzkxNw==,size_16,color_FFFFFF,t_70" alt=""></li></ol></li><li><p>回归就是：建立模型—拟合—微调</p></li><li><p>机器学习是寻找输入数据与输出数据之间关系(model-&gt;function map)的一门学问。</p></li><li><p>每一个特征量都很重要，但是不同特征量的重要程度是不同的，所以需要寻找特征的权重矩阵</p></li><li><p>训练数据和测试数据： 学习和测试是机器学习的两项基本任务。 (1)好的算法很重要； (2)要将获得的数据分为训练用数据和测试用数据；(3)仅仅匹配训练用数据是不行的——仅仅满足训练用数据叫overfit过拟合，如果连训练数据都不符合叫underfit欠拟合</p></li><li><p>验证的方法：交叉验证：将所有的数据分成4组， 每组中1份数据用于测试，3份用于训练</p></li><li><p>复杂化模型——寻找新的特征值：sigmoid 函数：当发现检测的结果不太好，王后想把模型变得更复杂一些。王后尝试将原始的特征量组合起来获得新的特征量，再加权求输出，却发现因为只有乘法和加法的情况这种<strong>线性特性</strong>，与之前并没有本质区别。因此，引入了sigmoid函数，这个非线性函数。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">sig(x) = \frac{1}{1-e^{-x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7026642857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><img src="https://img-blog.csdnimg.cn/2019102111070935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTUxMzkxNw==,size_16,color_FFFFFF,t_70" alt=""></p><p>加权组合，构成新的特征值： 如果我们把将特征量组合，新增加5个特征量的话（如图），摇杆的数量就变成了原来的5倍。</p><p>多层神经网络：在单层神经网络的基础上，增加一层非线性变换，结构上也就多了一个中间的曾，就是多层神经网络。</p></li><li><p>只由输入到输出方向进行信息的传递，被称为正向型神经网络； 而双方向都能够进行信息交换的结构被称为双向型神经网络。双向型神经网络典型代表是Hopfield一处的，玻尔兹曼机也是基于这种神经网络。 双向信息处理模式不同于淡出的正向信息处理， 它可以有多个输出结果， 而且从这些输出结果中它可以回忆起以前记忆过的信息，因此也被叫做联想记忆。</p></li><li><p>模型越复杂，网络就越纠缠，拉动一根线就会对整个网络产生较大的影响。反过来，网络中任何一根线又会连接很多其他的线，拉它的时候也会受到很大限制，甚至拉不动。 距离输出层越近的摇杆越容易搬动，这是有梯度的结果。因为搬动一下离输出很近的摇杆，它的效果能够很方便地传递给输出。离输出越远，梯度越难计算，越难调整。===&gt;BP算法， 以及最好不要使用Sigmod函数， 因为容易梯度消失， 可以换用tanh或者reLU（观察函数的微分结果）</p></li><li><p><strong>dropout</strong>：为了防止过度学习， 需要掌握平衡， 做出取舍：  适当地选取一定比例的特征量，剩下的全部舍弃不用。</p></li><li><p>批量学习与在线学习：</p><p><strong>批量学习（batch learning）</strong>：将全部数据收集齐了之后一起作为训练用数据使用，这叫做批量学习（batch learning）</p><p><strong>在线学习（online learning）</strong>:与此相对的，随着数据不断地获取而逐步进行的学习则称为在线学习（online learning）</p><p>现在批量学习也在改进，有些地方与在线学习差不多， 如使用概率梯度下降法：</p><p><img src="https://img-blog.csdnimg.cn/20191021170700902.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTUxMzkxNw==,size_16,color_FFFFFF,t_70" alt=""></p><p>（采用概率的方式去分组，也叫随机选择，就是不能利用某种故意的特定意图去分组）</p><p>当利用概率分组后，对每一组数据进行训练，动一下摇杆看误差如何变化，然后再向误差变小的方向搬动摇杆，这就是概率梯度下降法。（通过适当地概率计算，让参数或左或右地跳动着变化）</p><p>这种算法考虑的是，与其冲着预先规定好的方向一直走下去，倒不如是不是地左看看，右看看。这样反倒更容易找到隐藏的近路。</p><p>在线学习和随机梯度下降法的优势在于， 可以捕捉灵光霎现的机会， 增加了跳脱鞍点的可能性。</p></li></ol><h3 id="粮食问题"><a class="markdownIt-Anchor" href="#粮食问题"></a> 粮食问题</h3><ol><li><p>感知机perceptron(弗兰克·罗森布拉特)和支持向量机SVM(Vladmir N.Vapnik)</p><p>感知机：移动分割超平面进行数据分类。感知机的缺点：非线性模型处理不好</p><p>支持向量机：使分割超平面处于一种非常“好”的状态，即所有数据点尽量都远离分割超平面，因此能够更好的识别并且<strong>使得安全裕量最大</strong></p></li><li><p><strong>矩阵的秩</strong>：= 模式的种类， 一个模式以一行向量表示。<u>矩阵中两行的规律相似，应该属于同一种模式</u>。假设数据中存在某些模式，那么在矩阵中一定会存在某一行的数值代表该模式，其他的某一行代表另一种模式。</p><p>如果模式能够从可见数据中推演出来，通过对可见数据做有效处理，就能够推测出不可见的那部分数据，这其实是一种无监督学习：希望能够完美地补充矩阵中空白的数据，并能够预测出新的模式。（计算机从大量数据中通过自己的分析来找出规律，叫做无监督学习）</p></li><li><h3 id="预测方面有监督无监督的不同"><a class="markdownIt-Anchor" href="#预测方面有监督无监督的不同"></a> 预测方面有监督/无监督的不同 ：</h3><p>从数据中学到东西，这一点是一致的。之后，在是否进行预测这一点上是不同的。<br>有监督学习是希望计算机越来越聪明并逐渐能够代替人的某些工作。<br>无监督学习，是希望计算机从特征量中选择出我们容易理解的某种模式，将模式分成若干或者某种形式的分类。</p></li><li><p><strong>稀疏化</strong>：有些算法会将不重要的特征量的权重直接设定为0，舍弃一些不重要的东西， 导致矩阵中产生很多0， 这种矩阵将稀疏矩阵。</p></li><li><p><strong>非负矩阵分解（ Nonnegative Matrix Factor ）</strong>： 非负，指在计算的时候不使用负值，也就是只做加法运算。就像用钢笔描绘人脸，先有眼睛，鼻子，再加上嘴等等。这些都是一个一个添加的。（非负好比用钢笔作画不能删除， 而普通作画是用铅笔， 所以可以有负值）</p><p>如果也用减法，就像用铅笔，还可以用橡皮擦去一些地方。</p></li></ol><h3 id="基于玻尔兹曼机器学习的图像处理方法"><a class="markdownIt-Anchor" href="#基于玻尔兹曼机器学习的图像处理方法"></a> 基于玻尔兹曼机器学习的图像处理方法</h3><blockquote><p>首先要明确的一点是， 图片是由像素组成的。每一个像素到底是呈现数模颜色，这是由数据来决定的。</p></blockquote><ol><li><p><strong>玻尔兹曼机器学习</strong>:将图像的颜色数据输入到玻尔兹曼机中，计算机通过分析这些数据，就可以得到实际图像的特征，各像素点显示某种颜色的概率，以及<strong>相邻像素间的关系</strong>。这种过程叫做玻尔兹曼机器学习。</p></li><li><p><strong>似然度</strong>： 相似的程度。 机器学习的目的要么是让误差值最小，要么是让似然度最大</p></li><li><p><strong>采样</strong>：将实际提供的数据输入到玻尔兹曼机后， 模型会输出伪数据（重构数据）， 这个自身不断<strong>产生数据</strong>的过程就叫做采样 sampling</p><p>玻尔兹曼机器学习在进行时，采用马尔科夫蒙特卡罗方法，来逐一考虑相邻像素之间的关系，来完成双向型神经网络的信息流动。这是一种在整个网络结构中的循环，<u>在这一过程中还要不断地采集大量的重构数据。很费时间</u>。==&gt; 替代算法是，单纯考虑由相邻像素传送过来的信息，<strong>平均场近似法</strong></p><p><img src="/2020/11/28/《漫画机器学习入门》大关真之——读书笔记/hexo/source/_posts/%E6%BC%AB%E7%94%BB%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%A4%A7%E5%85%B3%E7%9C%9F%E4%B9%8B%E2%80%94%E2%80%94%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/1.jpg" alt="平均近场法"></p></li><li><p>中间结果包含每一个像素颜色的变化过程，也能够构成中间过程的许多图像。这些中间产生的图像数据就是重构数据， 也可以叫做伪数据。其实核心就是“依据临近像素的数据， 在现有的参数值情况下， 预测中心像素的颜色值”</p></li><li><p>机器学习与统计力学： 我们在研究原子和分子的时候， 位置、运动扽信息是分析研究的对象， 但是统计力学有趣的地方是利用统计学理论去获取事物整体的特征。类比机器学习， 就像我们并不去计较每一个颗粒的位置和速度， 对于机器学习我们也是希望得到大量数据间的整体组合信息， 这种整体组合信息在最优化问题求解时就是推到出函数模型</p></li><li><p>可见变量、隐含变量：在图像中， 每一个像素颜色的数值时可以直接读取的， 这一部分就叫做可见变量。由可见变量之间关联关系构成的新变量称为隐含变量， 从而可以建立出眼睛、鼻子等部件， 从而将利用各个部件就可以将图像分成各个部分了。 利用上述方式就可以以“开关”的形式来操作了，通过像素和开关之间的关系就可以决定在可见变量一侧表示出什么， 这种方法认为可见变量之间没有任何关系， 各个开关之间也没有关联。只考虑开关与像素之间的关系， 叫做受限玻尔兹曼机（RBM）， 有较好的特性， 如一定条件下的独立性</p></li><li><p><strong>变分原理</strong>：物理学中， 指自然界中静止实物的一个普遍适用的数学定律，也称最小作用原理。比如在确定了物体的起点和终点后， 通过动能和势能之差就能计算出最短路径。</p></li><li><p><strong>对比散度算法</strong>：将实际的颜色数据与建立的模型采集到的伪数据进行比较， 我们希望能够从中找到某些有用的东西。</p></li><li><p><img src="https://img-blog.csdnimg.cn/20191022114125126.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTUxMzkxNw==,size_16,color_FFFFFF,t_70" alt=""></p><p>深度玻尔兹曼机将图像数据作为输入， 内部作为隐含变量的各种开关来决定到底输出什么图像， 因此为了能够对应不同的图像， 建立数量巨大的复杂的隐含变量时非常必要的——深度玻尔兹曼机的目的时<strong>学习图像中隐含的特征</strong>， 知道了图像中拥有的特征可以就可以返回来看可见变量中是否有猫和狗了——传统机器学习和深度学习的区别也在于此， 传统机器学习需要自己手动提取特征（特征工程）， 而神经网络可以自己提取特征。</p></li><li><p>受限玻尔兹曼机是两层神经网络。包含输入层，隐藏层，输出层</p></li><li><p>预训练： ①运用在无监督学习中， 不告诉model特征有哪些 ②用预训练网络做微调：一般图片分类的神经网络每一类别的图片量级至少在5000-10000左右，如果没有这么多图片，（使用数据增强的方法后也不够），此时就需要用预训练网络了（在几十万张图片训练集上获得较好效果的图片多分类器）。然后用我们现有的图片在这个预训练网络的基础上继续训练， 利用现有的图片继续训练就是为了让网络重新适应现有的图片训练集， 这种适应过程往往比从头训练一个网络更快更好， 这种方法跟迁移学习的思想很像。</p></li><li><p>自我符号化（在无监督学习中具有代表性）：吧收到的输入信号原原本本地返回来。</p></li></ol><p><img src="/2020/11/28/《漫画机器学习入门》大关真之——读书笔记/hexo/source/_posts/%E6%BC%AB%E7%94%BB%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%A4%A7%E5%85%B3%E7%9C%9F%E4%B9%8B%E2%80%94%E2%80%94%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%87%AA%E6%88%91%E7%AC%A6%E5%8F%B7%E5%8C%96.jpg" alt="自我符号化"></p><p>注意， 左右知识结构上的复制，权值是不一样的。这些权值是需要进行调整后才能满足右边的“输入”等于左边输入的。在这个调整权值的过程中，输入数据所隐含的特征就可以被挖掘出来了。<mark>&gt;从而使得中间层具有能够反映输入数据中特征的能力。</mark>&gt; 中间层的自我符号化训练其实也是提取特征的过程</p><ol start="13"><li><p>卷积神经网络：</p><blockquote><p>在处理图像时已有已知的神经网络可以利用了——卷积神经网络。</p></blockquote><p><strong>卷积</strong>：卷积是利用了，人在看见图像识别图像时并不需要将所有的细小像素全部看清的特征而设计的。卷积就是在某种程度上将临近的像素组合起来形成新的特征量，然后利用卷积结果进行分析</p><p><strong>池化</strong>：在图片中即使模糊我们也能通过模糊的影像大致判断出—&gt;数据即使有些差异也能够得出同样的结果。因此可以利用卷积将特征进行排序，将相近的特征进行比较并选用其中的最大值或平均值，叫做池化</p><p>▲通过卷积和池化操作，神经网络从而可以将图像中的特征量自动地提取出来了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;漫画机器学习入门总结&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#漫画机器学习入门总结&quot;&gt;&lt;/a&gt; 《漫画机器学习入门》总结&lt;/h1&gt;
&lt;p&gt;机器学习是指计算机通过不断地处理数据并修正算法和参数来学习各种规则， 从而不断改进模型而得到
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="读书笔记" scheme="https://nymrli.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
