<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>果粒橙的博客</title>
  
  <subtitle>别装作很努力，结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2019-03-28T02:38:56.756Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>果粒橙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>蓝桥杯突击训练</title>
    <link href="https://nymrli.top/2019/03/28/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AA%81%E5%87%BB%E8%AE%AD%E7%BB%83/"/>
    <id>https://nymrli.top/2019/03/28/蓝桥杯突击训练/</id>
    <published>2019-03-28T02:35:12.000Z</published>
    <updated>2019-03-28T02:38:56.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ACM-3-20笔记"><a href="#ACM-3-20笔记" class="headerlink" title="ACM 3-20笔记"></a>ACM 3-20笔记</h2><h3 id="3部排序"><a href="#3部排序" class="headerlink" title="3部排序"></a>3部排序</h3><ul><li>左指针，右指针， 探路指针–&gt;链表的pq</li></ul><h3 id="马虎的算式"><a href="#马虎的算式" class="headerlink" title="马虎的算式"></a>马虎的算式</h3><ul><li>枚举（五重循环，注意条件）</li><li>内存1000ms大约运行10^8的指令</li></ul><h3 id="大数除法"><a href="#大数除法" class="headerlink" title="大数除法"></a>大数除法</h3><ul><li>减法</li><li>除法</li></ul><h3 id="39级阶梯"><a href="#39级阶梯" class="headerlink" title="39级阶梯"></a>39级阶梯</h3><ul><li>斐波那契</li><li>简化模型后再加上考虑条件</li></ul><h3 id="错误票据"><a href="#错误票据" class="headerlink" title="错误票据"></a>错误票据</h3><ul><li><p>获得一行内容：getline()前要用getchar()吃掉换行符</p></li><li><p>分割一行以空格分隔的元素</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>,s);</span><br><span class="line"><span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line"><span class="built_in">string</span>(tmp);</span><br><span class="line"><span class="keyword">while</span>( getline(ss,tmp,<span class="string">" "</span>) )</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="▲翻硬币"><a href="#▲翻硬币" class="headerlink" title="▲翻硬币"></a>▲翻硬币</h3><p><img src="/2019/03/28/蓝桥杯突击训练/最问题.png" alt="最问题"></p><h2 id="ACM-3-21笔记-（2014年）"><a href="#ACM-3-21笔记-（2014年）" class="headerlink" title="ACM 3-21笔记 （2014年）"></a>ACM 3-21笔记 （2014年）</h2><h3 id="奇怪的分式"><a href="#奇怪的分式" class="headerlink" title="奇怪的分式"></a>奇怪的分式</h3><ul><li>gcd辗转相除法</li><li>枚举</li></ul><h3 id="蚂蚁感冒"><a href="#蚂蚁感冒" class="headerlink" title="蚂蚁感冒"></a>蚂蚁感冒</h3><ul><li>日本白书的蚂蚁模型：穿过身体</li><li></li></ul><h3 id="▲地宫取宝"><a href="#▲地宫取宝" class="headerlink" title="▲地宫取宝"></a>▲地宫取宝</h3><ul><li>深搜</li><li>递归</li><li>取模</li></ul><blockquote><p>面对&amp;$4^{100}$优化思考方向：</p><ul><li>贪心 ： 知道有一条最好的路  —X—&gt; 这题要求每种情况都遍历</li><li>重复子问题 ： 记忆化搜索<ul><li><code>dfs(int x, int y , int max,int cnt)</code>，虽然x,y都是不同的，但max,cnt可能会有相同的值，这些情况是重复的</li></ul></li><li>动态规划 （递推方式）： </li></ul></blockquote><h2 id="ACM-3-22笔记-2015"><a href="#ACM-3-22笔记-2015" class="headerlink" title="ACM 3-22笔记 (2015)"></a>ACM 3-22笔记 (2015)</h2><h3 id="T5-全排列"><a href="#T5-全排列" class="headerlink" title="T5-全排列"></a>T5-全排列</h3><ul><li>DFS框架<ul><li>递归</li><li>回溯</li></ul></li></ul><h3 id="T7-牌型种数"><a href="#T7-牌型种数" class="headerlink" title="T7-牌型种数"></a>T7-牌型种数</h3><ul><li>排列组合<ul><li>一般都是用递归解决</li><li>回溯（恢复初始状态）：袋子理论 –&gt; 每次都得把自己的袋子清空再返回</li></ul></li><li>两种思路：<ul><li>13次选牌($O(13^{13})$)</li><li>每张牌选几次（更简单$O(5^{13})$)</li></ul></li></ul><h3 id="T9-垒骰子"><a href="#T9-垒骰子" class="headerlink" title="T9-垒骰子"></a>T9-垒骰子</h3><ul><li>递归<ul><li>分治法</li><li>逐步生成</li></ul></li></ul><h3 id="ACM-3-23-2016"><a href="#ACM-3-23-2016" class="headerlink" title="ACM 3-23 (2016)"></a>ACM 3-23 (2016)</h3><ul><li>凑数字<ul><li>多个不同的数字—-&gt;全排列问题</li></ul></li></ul><hr><h2 id="附录：通用的代码工具"><a href="#附录：通用的代码工具" class="headerlink" title="附录：通用的代码工具"></a>附录：通用的代码工具</h2><h4 id="void-i2s-string-amp-s-int-amp-num"><a href="#void-i2s-string-amp-s-int-amp-num" class="headerlink" title="void i2s(string &amp;s, int &amp;num)"></a>void i2s(string &amp;s, int &amp;num)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">i2s</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="keyword">int</span> &amp;num)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; num;</span><br><span class="line">    ss &gt; s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="split-“-“"><a href="#split-“-“" class="headerlink" title="split(“ “)"></a>split(“ “)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">split(<span class="string">" "</span>)</span><br></pre></td></tr></table></figure><h4 id="string去前置0"><a href="#string去前置0" class="headerlink" title="string去前置0"></a>string去前置0</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removePre0</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line"> s = s.substr(s.find_first_not_of(<span class="string">"0"</span>)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="string回溯去最后一个元素"><a href="#string回溯去最后一个元素" class="headerlink" title="string回溯去最后一个元素"></a>string回溯去最后一个元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path += pai[i];</span><br><span class="line">f(k<span class="number">-1</span>,path);</span><br><span class="line">path.erase(path.end()<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h4 id="求最大公因数-辗转相除法-："><a href="#求最大公因数-辗转相除法-：" class="headerlink" title="求最大公因数(辗转相除法)："></a>求最大公因数(辗转相除法)：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( a%b == <span class="number">0</span>) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="comment">//极端情况最大的公约数为两个中最小的一个</span></span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">    <span class="comment">// 被除数为其中小的那个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.sohu.com/a/231586600_99902636" target="_blank" rel="noopener">漫画图解</a></p><h4 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h4><h5 id="next-premutation"><a href="#next-premutation" class="headerlink" title="next_premutation"></a>next_premutation</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)&#123;</span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">1000</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a,a+n);<span class="comment">//可以自行测试一下删除后的结果</span></span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;<span class="keyword">while</span>(next_permutation(a,a+n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有sort()，输出为</p><blockquote><p>0 1 2<br>0 2 1<br>1 0 2<br>1 2 0<br>2 0 1<br>2 1 0</p></blockquote><p>若无，则输出为</p><blockquote><p>1 0 2<br>1 2 0<br>2 0 1<br>2 1 0</p></blockquote><p>可以发现少了许多种组合方法。</p><p>不过，仔细比较各种组合方法和有无<code>sort()</code>的输出，可以发现函数<code>next_permutation()</code>是按照字典序产生排列的，并且是从数组中当前的字典序开始依次增大直至到最大字典序。</p><p>△.<code>sort()</code>默认排序从小到大</p><h5 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h5><h4 id="C-输入输出流设置"><a href="#C-输入输出流设置" class="headerlink" title="C++输入输出流设置"></a>C++输入输出流设置</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="comment">//命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="comment">//取消输入输出流等待同步</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (i != n) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//每个输出样例间有换行,(可理解每个CASE后加个换行,最后一行没有)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C语言里的输入输出问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> d,</span><br><span class="line"><span class="keyword">float</span> f,</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">20</span>],</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%f%s"</span>,d,f,str);</span><br></pre></td></tr></table></figure><h5 id="scanf"><a href="#scanf" class="headerlink" title="scanf:"></a>scanf:</h5><p>使用 scanf 输入  42</p><ul><li>scanf()中使用%c说明符，该函数将只读取字符4 并将其存储在一个char类型的变量中</li><li>如果使用%s说明符，该函数会读取两个字符，即字符4和字符2，并将它们存储在一个字符串中。</li><li>如果使用%d说明符，则scanf 读取同样的两个字符，但是随后它会继续计算与它们的相应的整数值为4*10+2  得到 42；然后将该整数的二进制表示保存在一个int变量中，</li><li>如果使用%f说明符 则scanf（）读取这两个字符 计算它们对应的数值 42，然后以内部的浮点表述该值，并将结果保存在一个float变量中</li></ul><h5 id="getchar"><a href="#getchar" class="headerlink" title="getchar():"></a>getchar():</h5><p>getchar()只能输入字符型,输入时遇到回车键才从缓冲区依次提取字符.</p><p>说明：当程序调用getchar()函数时，程序就等着用户按键，用户输入的字符被存放在键盘缓冲区中，直到用户按回车为止（回车字符也放在缓冲区中）。当用户键入回车之后，getchar()函数才开始从键盘缓冲区中每次读入一个字符。也就是说，后续的getchar()函数调用不会等待用户按键，而直接读取缓冲区中的字符，直到缓冲区中的字符读完后，才重新等待用户按键。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ACM-3-20笔记&quot;&gt;&lt;a href=&quot;#ACM-3-20笔记&quot; class=&quot;headerlink&quot; title=&quot;ACM 3-20笔记&quot;&gt;&lt;/a&gt;ACM 3-20笔记&lt;/h2&gt;&lt;h3 id=&quot;3部排序&quot;&gt;&lt;a href=&quot;#3部排序&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++机器学习库MLPack</title>
    <link href="https://nymrli.top/2019/03/25/C++%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%BA%93MLPack/"/>
    <id>https://nymrli.top/2019/03/25/C++机器学习库MLPack/</id>
    <published>2019-03-25T09:44:11.000Z</published>
    <updated>2019-03-25T09:47:47.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-机器学习库MLPack"><a href="#C-机器学习库MLPack" class="headerlink" title="C++机器学习库MLPack"></a>C++机器学习库MLPack</h1><blockquote><p>mlpack: a scalable C++ machine learning library</p></blockquote><p>由于在网上查了一下发现安装这个库碰到了不少问题，所以还是记录一下安装过程。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>列出两种安装教程吧，第一种实测可以。第二种在测试Armadillo的时候没通过，还是缺库，有兴趣的人可以通过给的Armadillo官网链接下载安装Armadillo再试试</p></blockquote><h3 id="安装方法一："><a href="#安装方法一：" class="headerlink" title="安装方法一："></a>安装方法一：</h3><p><a href="http://www.mlpack.org/" target="_blank" rel="noopener">Mlpack 官网</a> 提供了下载的方法 ： <code>sudo apt-get install libmlpack-dev</code> ， 但貌似有博客指出目前国内源里是没有这个镜像的，所以采取的办法是直接从观望上下载<code>mlpack-3.0.0.tar.gz</code>（没敢使用最新的，怕出错） 来编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tar -xvf mlpack-3.0.0.tar.gz </span><br><span class="line"><span class="meta">$</span> cd mlpack-1.0.12  </span><br><span class="line"><span class="meta">$</span> mkdir build  </span><br><span class="line"><span class="meta">$</span> sudo apt-get install libboost-math-dev libboost-program-options-dev libboost-random-dev libboost-test-dev libxml2-dev libarmadillo-dev  </span><br><span class="line"><span class="meta">$</span> cd build  </span><br><span class="line"><span class="meta">$</span> cmake </span><br><span class="line"><span class="meta">$</span> make  </span><br><span class="line"><span class="meta">$</span> sudo make install</span><br></pre></td></tr></table></figure><p>注意根据报错信息：<strong>Maybe need administrative privileges.</strong>，所以 <code>make install</code> 前面要加上<code>sudo</code>权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ 51%] Built target mlpack_sparse_coding</span><br><span class="line"><span class="meta">[100%</span>] Built target mlpack_test</span><br><span class="line">Install the project...</span><br><span class="line">-- Install configuration: ""</span><br><span class="line">CMake Error at cmake_install.cmake:36 (file):</span><br><span class="line">  file cannot create directory: /usr/local/lib/pkgconfig.  Maybe need</span><br><span class="line">  administrative privileges.</span><br></pre></td></tr></table></figure><p>然后就是可选的编译条件，就是你只想安装其中一些包，也是可以的：  <code>$ make pca allknn allkfn  ,只安装pca allknn allkfn这几个算法包。</code></p><p>摘自：<a href="http://www.linuxdiyf.com/linux/27052.html" target="_blank" rel="noopener">http://www.linuxdiyf.com/linux/27052.html</a></p><h3 id="安装方式二：（不推荐）"><a href="#安装方式二：（不推荐）" class="headerlink" title="安装方式二：（不推荐）"></a>安装方式二：（不推荐）</h3><h4 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Armadillo     &gt;= 6.500.0</span><br><span class="line">Boost (program_options, math_c99, unit_test_framework, serialization,</span><br><span class="line">       spirit)</span><br><span class="line">CMake         &gt;= 2.8.5</span><br></pre></td></tr></table></figure><h5 id="Aramdillo-安装-（Ubuntu为例子）"><a href="#Aramdillo-安装-（Ubuntu为例子）" class="headerlink" title="Aramdillo 安装  （Ubuntu为例子）"></a>Aramdillo 安装  （Ubuntu为例子）</h5><p> 首先安装Armadillo依赖的库：lapack, blas, boost</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get install liblapack-dev</span><br><span class="line"><span class="meta">$</span> sudo apt-get install libblas-dev</span><br><span class="line"><span class="meta">$</span> sudo apt-get install libboost-dev</span><br></pre></td></tr></table></figure><p>接下来 安装Armadillo：<code>sudo apt-get libarmadillo-dev</code></p><p>之后，安装完成，测试是否完成！以上步骤，都是应该可以直接完成的，需要Cmake和g++提前安装。</p><p><code>g++ test.cpp -o test -larmadillo</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;armadillo&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> arma;</span><br><span class="line"><span class="comment">//test.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    mat A=randu&lt;mat&gt;(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    mat B=randu&lt;mat&gt;(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    cout&lt;&lt;A*trans(B)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上还有说<strong>Armadillo</strong>也无法找不到镜像， 于是还是到官网下载下来编译安装，[Armadillo C++ matrix library](</p><h5 id="Boost库的安装"><a href="#Boost库的安装" class="headerlink" title="Boost库的安装"></a>Boost库的安装</h5><p><code>apt-get install libboost-math-dev libboost-program-options-dev libboost-random-dev libboost-test-dev libxml2-dev</code></p><h5 id="mlpack安装"><a href="#mlpack安装" class="headerlink" title="mlpack安装"></a>mlpack安装</h5><p>也是去官网下载编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tar -xzf mlpack-2.0.1.tar.gz   # tar解压</span><br><span class="line"><span class="meta">$</span> cd mlpack-2.0.1                # 进入解压后的目录</span><br><span class="line"><span class="meta">$</span> unzip mlpack-2.0.1.zip         # zip解压</span><br><span class="line"><span class="meta">$</span> cd mlpack-2.0.1                # 进入解压后的目录</span><br><span class="line"><span class="meta">#</span> 之后，建立build目录，cmake，make即可</span><br><span class="line"><span class="meta">$</span> mkdir build</span><br><span class="line"><span class="meta">$</span> cd build</span><br><span class="line"><span class="meta">$</span> cmake ../</span><br><span class="line"><span class="meta">$</span> make    </span><br><span class="line"><span class="meta">$</span> sudo make install</span><br></pre></td></tr></table></figure><h2 id="使用mlpack"><a href="#使用mlpack" class="headerlink" title="使用mlpack"></a>使用mlpack</h2><p>源文件中有各种算法的例子，可以学习其使用方法，这里需要注意一点，在编译和链接时，都要加上<code>-lmlpack -larmadillo</code>，来包含所需库。</p><p>如编写下列代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mlpack/core.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mlpack::util::GetVersion() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲.注意.编译的命令为<code>g++ -std=c++11 testmlpack.cpp -o testlars -l mlpack -l armadillo</code>，其中要加上<strong>-std=c++11</strong>，不然无法编译通过。</p><hr><p>[Armadillo C++ ML library]<a href="http://arma.sourceforge.net/download.html" target="_blank" rel="noopener">http://arma.sourceforge.net/download.html</a>)</p><p>如果<strong>Armadillo</strong>出错，可以去官网[Armadillo C++ ML library]<a href="http://arma.sourceforge.net/download.html)下载编译安装" target="_blank" rel="noopener">http://arma.sourceforge.net/download.html)下载编译安装</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-机器学习库MLPack&quot;&gt;&lt;a href=&quot;#C-机器学习库MLPack&quot; class=&quot;headerlink&quot; title=&quot;C++机器学习库MLPack&quot;&gt;&lt;/a&gt;C++机器学习库MLPack&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;mlpack: a s
      
    
    </summary>
    
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="ML" scheme="https://nymrli.top/tags/ML/"/>
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学java程序设计作业在线编程第六次作业</title>
    <link href="https://nymrli.top/2019/03/17/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E7%AC%AC%E5%85%AD%E6%AC%A1%E4%BD%9C%E4%B8%9A/"/>
    <id>https://nymrli.top/2019/03/17/南京邮电大学java程序设计作业在线编程第六次作业/</id>
    <published>2019-03-17T05:29:36.000Z</published>
    <updated>2019-03-17T08:45:46.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总分：100"><a href="#总分：100" class="headerlink" title="总分：100"></a>总分：100</h2><h3 id="选择题得分：40"><a href="#选择题得分：40" class="headerlink" title="选择题得分：40"></a>选择题得分：40</h3><ul><li>1.下列方法定义中，正确的是（）</li></ul><p>A.double me（int a，int b）{int r; r = ab}</p><p>B.double me（a，b）{return b;}</p><p>C.int me（int a，int b）{return（a-b）;}</p><p>D.int me（inta，b）{return（a-b）;}</p><p>正确答案是：C</p><ul><li>2.下列方法定义中，不正确的是（）</li></ul><p>A.float x（int a，int b）{return（ab）;}</p><p>B.int x（int a，int b）{return ab;}</p><p>C.int x（int a，int b）{return a * b;}</p><p>D.int x（int a，int b）{return 1.2 *（a + b）;}</p><p>正确答案是：D</p><ul><li>3.下面哪个数据类型占用的内存最大？（）</li></ul><p>A.int</p><p>B.float</p><p>C.double</p><p>D.byte</p><p>正确答案是：C</p><ul><li>4.下面哪个不属于Java的关键字？（）</li></ul><p>A.static</p><p>B.final</p><p>C.super</p><p>D.sub</p><p>正确答案是：D</p><ul><li>5.下面的标识符中哪个是合法的标识符？（）</li></ul><p>A.–a</p><p>B.Test</p><p>C.class</p><p>D.＃ABC</p><p>正确答案是：B</p><ul><li>6.下列语句序列执行后，c的值是（）int a = 3，b = 4，c = 0; （（a ++）&lt;（ - b））++ c;</li></ul><p>A.0</p><p>B.1</p><p>C.2</p><p>D.3</p><p>正确答案是：A</p><ul><li>7.下面关于数组定义语句不正确的是（）</li></ul><p>A.float f [] = new {2.4f，3.5f，5.7f，7.9f};</p><p>B.int a [] = {1,2,3,4,5}</p><p>C.double [] d = new double [10];</p><p>D.int [] a2;</p><p>正确答案是：A</p><ul><li>8.下面（）是Java数据类型中的int类型的取值范围。</li></ul><p>A.$-2^ 7 $〜$2^ 7 -1$</p><p>B.0 〜 $2 ^ {16} -1$</p><p>C.$-2 ^ {15} $^ 〜 $2 ^{ 15}  -1$</p><p>D.$-2 ^ {31}​$ 〜$2 ^ {31} -1​$</p><p>正确答案是：D</p><ul><li>9.在Java语言中，下面（）类型可以表示整数基本数据类型。</li></ul><p>A.single</p><p>B.byte</p><p>C.double</p><p>D.char</p><p>正确答案是：B</p><ul><li>10.假设int a = -3; 则表达式a&gt; 0？a：-a的结果是（）</li></ul><p>A.true</p><p>B.false</p><p>C.-3</p><p>D.3</p><p>正确答案是：D</p><h3 id="编程题得分：60"><a href="#编程题得分：60" class="headerlink" title="编程题得分：60"></a>编程题得分：60</h3><h4 id="输出所有的3位数字的质数得分：10-10"><a href="#输出所有的3位数字的质数得分：10-10" class="headerlink" title="输出所有的3位数字的质数得分：10/10"></a>输出所有的3位数字的质数得分：10/10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">int</span> prime[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; size; i++) &#123;</span><br><span class="line">    flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>; j &lt;= Math.sqrt(i) ; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i%j == <span class="number">0</span>)&#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !flag ) prime[pos++] = i;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pf=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prime.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prime[i] != <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.printf(<span class="string">"%6d"</span>,prime[i]);</span><br><span class="line">    pf ++;</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="number">5</span>) &#123;</span><br><span class="line">    pf = <span class="number">0</span>;</span><br><span class="line">    System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数列求和得分：10-10"><a href="#数列求和得分：10-10" class="headerlink" title="数列求和得分：10/10"></a>数列求和得分：10/10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">double</span> x = s.nextDouble();</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> single ;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">single = Math.pow(x, cnt)/fac(cnt);</span><br><span class="line">sum += Math.pow(-<span class="number">1</span>, (cnt+<span class="number">1</span>) % <span class="number">2</span>)*single;</span><br><span class="line">    cnt ++;</span><br><span class="line">&#125; <span class="keyword">while</span> ( Math.abs(single) &gt; <span class="number">1e-4</span> );</span><br><span class="line">    </span><br><span class="line">    System.out.printf(<span class="string">"%.2f\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Target</span>: 递归求阶乘</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fac</span> <span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">0</span> || a == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> a*fac(a-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最大公约数得分：10-10"><a href="#最大公约数得分：10-10" class="headerlink" title="最大公约数得分：10/10"></a>最大公约数得分：10/10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> a = s.nextInt();</span><br><span class="line">    <span class="keyword">int</span> b = s.nextInt();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    System.out.printf(<span class="string">"%d"</span>,gcd(a,b));</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( b==<span class="number">0</span> ) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出斐波那契数列的前10得分：10-10"><a href="#输出斐波那契数列的前10得分：10-10" class="headerlink" title="输出斐波那契数列的前10得分：10/10"></a>输出斐波那契数列的前10得分：10/10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">10</span>;</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;len; i++) </span><br><span class="line">    arr[i] = arr[i-<span class="number">2</span>] + arr[i-<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;len; i++) &#123;</span><br><span class="line">    System.out.printf(<span class="string">"%d"</span>,arr[i]);</span><br><span class="line">    <span class="keyword">if</span>( i != len - <span class="number">1</span>) System.out.print(<span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">else</span> System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总分：100&quot;&gt;&lt;a href=&quot;#总分：100&quot; class=&quot;headerlink&quot; title=&quot;总分：100&quot;&gt;&lt;/a&gt;总分：100&lt;/h2&gt;&lt;h3 id=&quot;选择题得分：40&quot;&gt;&lt;a href=&quot;#选择题得分：40&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="java" scheme="https://nymrli.top/tags/java/"/>
    
      <category term="NJUPT" scheme="https://nymrli.top/tags/NJUPT/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学java程序设计作业在线编程第五次作业</title>
    <link href="https://nymrli.top/2019/03/17/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%BA%94%E6%AC%A1%E4%BD%9C%E4%B8%9A/"/>
    <id>https://nymrli.top/2019/03/17/南京邮电大学java程序设计作业在线编程第五次作业/</id>
    <published>2019-03-17T03:44:36.000Z</published>
    <updated>2019-03-17T05:32:17.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总分：100"><a href="#总分：100" class="headerlink" title="总分：100"></a>总分：100</h2><h3 id="选择题得分：50"><a href="#选择题得分：50" class="headerlink" title="选择题得分：50"></a>选择题得分：50</h3><ul><li><ol><li>以下哪一个工具是Java的编译器？( )</li></ol></li></ul><p>A.javac.exe</p><p>B.java.exe</p><p>C.javap.exe</p><p>D.javadoc.exe</p><p>正确答案是: A</p><ul><li><ol start="2"><li>以下哪一个数据类型不属于Java的基本数据类型？( )</li></ol></li></ul><p>A.boolean</p><p>B.char</p><p>C.int</p><p>D.String</p><p>正确答案是: D</p><ul><li><ol start="3"><li>假设有如下类的定义： public class test{ public static void main(String[] args){ int a= 3, b = 4; swap(a,b); System.out.println(“a=”+a + “ b=” + b); } public static void swap(int a,int b){ int tmp = a; a = b; b = tmp; } } 程序运行后结果为( )</li></ol></li></ul><p>A.a=4 b=3</p><p>B.a=3 b=4</p><p>C.a=a b=b</p><p>D.无结果输出</p><p>正确答案是: B</p><ul><li><ol start="4"><li>执行如下代码后，b的值是( ) int a=0, b=0; do{ –b; a = a-1; }while(a&gt;0);</li></ol></li></ul><p>A.0</p><p>B.1</p><p>C.-1</p><p>D.死循环</p><p>正确答案是: C</p><ul><li><ol start="5"><li>下列关于Java中的数组的说法，错误的是( )。</li></ol></li></ul><p>A.数组中的元素的类型必须相同</p><p>B.数组中的元素是有顺序的</p><p>C.数组对象，属于引用类型</p><p>D.数组的大小可以任意改变</p><p>正确答案是: D</p><ul><li><ol start="6"><li>在循环体中，如果想结束本次循环，可以使用哪个语句？（ ）。</li></ol></li></ul><p>A.break</p><p>B.continue</p><p>C.final</p><p>D.finally</p><p>正确答案是: B</p><ul><li><ol start="7"><li>下列标识符中，哪一个是非法标识符？（ ）</li></ol></li></ul><p>A.statics</p><p>B.static_10</p><p>C.10static</p><p>D.$statics10</p><p>正确答案是: C</p><ul><li><ol start="8"><li>设有数组的定义int[] a = new int[3]，则下面对数组元素的引用错误的是（ ）。</li></ol></li></ul><p>A.a[0]</p><p>B.a[a.length-1]</p><p>C.int i=0;a[i]</p><p>D.a[a.length]-1</p><p>正确答案是: D</p><ul><li><ol start="9"><li>int a=new int[2][3]，则该数组包含（ ）个数组元素。</li></ol></li></ul><p>A.2</p><p>B.3</p><p>C.6</p><p>D.不确定</p><p>正确答案是: C</p><ul><li><ol start="10"><li>下面的代码段执行之后count的值是什么（ ） int count = 1; for (int i = 1; i &lt;= 5; i++) { count += i; } System.out.println(count);</li></ol></li></ul><p>A.5</p><p>B.1</p><p>C.15</p><p>D.16</p><p>正确答案是: D</p><h3 id="编程题得分：50"><a href="#编程题得分：50" class="headerlink" title="编程题得分：50"></a>编程题得分：50</h3><h4 id="数字加密-得分：10-10"><a href="#数字加密-得分：10-10" class="headerlink" title="数字加密  得分：10 / 10"></a>数字加密  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = s.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>) &#123;</span><br><span class="line">arr[cnt--] = (n%<span class="number">10</span> + <span class="number">9</span>)%<span class="number">10</span>;</span><br><span class="line">n /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">"The encrypted number is %d%d%d%d\n"</span>,arr[<span class="number">2</span>],arr[<span class="number">3</span>],arr[<span class="number">0</span>],arr[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数列排序-得分：10-10"><a href="#数列排序-得分：10-10" class="headerlink" title="数列排序  得分：10 / 10"></a>数列排序  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;  len; i++) arr[i] = s.nextInt();</span><br><span class="line">bubble(arr);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;  len; i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%4d"</span>,arr[i]);</span><br><span class="line"><span class="keyword">if</span> ( i == len-<span class="number">1</span>) System.out.println();</span><br><span class="line"><span class="comment">//else System.out.print(" ");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Target</span>: 冒泡排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr待排数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubble</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">5</span>; <span class="comment">// 第6个元素的下标是5</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">14</span>;<span class="comment">// 第15个元素的下标是14</span></span><br><span class="line"><span class="keyword">int</span> tmp ;<span class="comment">// 交换的临时变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = start; j &lt; len-(i-start); j++) &#123;</span><br><span class="line">                <span class="comment">// 类比从0 开始的冒泡,这边需要改成len-(i-start),因为j的范围只能是(start,len)</span></span><br><span class="line"><span class="keyword">if</span> ( arr[j] &lt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">tmp = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印杨辉三角形-得分：10-10"><a href="#打印杨辉三角形-得分：10-10" class="headerlink" title="打印杨辉三角形  得分：10 / 10"></a>打印杨辉三角形  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> hang = s.nextInt();</span><br><span class="line"><span class="keyword">int</span> arr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[hang][hang];</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; hang ; i++) &#123;</span><br><span class="line">arr[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; hang; j++) &#123;</span><br><span class="line">arr[i][j] = arr[i-<span class="number">1</span>][j] + arr[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hang ; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; hang; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i][j] != <span class="number">0</span> )</span><br><span class="line">System.out.printf(<span class="string">"%5d"</span>,arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造指定的数列-得分：10-10"><a href="#构造指定的数列-得分：10-10" class="headerlink" title="构造指定的数列  得分：10 / 10"></a>构造指定的数列  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> a = s.nextInt();</span><br><span class="line"><span class="keyword">int</span> b = s.nextInt();</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = a; i &lt;= b; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ( i % <span class="number">7</span> == <span class="number">0</span> || i % <span class="number">11</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ( !(i % <span class="number">7</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">11</span> == <span class="number">0</span>) )</span><br><span class="line">arr[cnt++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x : arr) </span><br><span class="line"><span class="keyword">if</span> ( x!= <span class="number">0</span>)</span><br><span class="line">System.out.printf(<span class="string">"%d "</span>,x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求平均值-得分：10-10"><a href="#求平均值-得分：10-10" class="headerlink" title="求平均值  得分：10 / 10"></a>求平均值  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> num = s.nextInt();</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//去除最大最小值的总和</span></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;<span class="comment">//要去掉的个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) arr[i]= s.nextInt();</span><br><span class="line"></span><br><span class="line">Arrays.sort(arr);<span class="comment">// 排序,默认从大到小</span></span><br><span class="line">System.out.printf(<span class="string">"max element:%d\n"</span>, arr[num-<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 第一个是最大的</span></span><br><span class="line">System.out.printf(<span class="string">"min element:%d\n"</span>, arr[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 最后一个是最小的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 去掉最大和最小项</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ( arr[i] == arr[<span class="number">0</span>] ||  arr[i] == arr[num-<span class="number">1</span>] ) &#123;</span><br><span class="line"> arr[i] = <span class="number">0</span> ;</span><br><span class="line"> cnt ++ ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否全是最小最大值</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="keyword">true</span>)</span><br><span class="line">System.out.printf(<span class="string">"average is %5.2f\n"</span>, (<span class="keyword">double</span>)sum/(num-(cnt+<span class="number">2</span>)));</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">System.out.printf(<span class="string">"no solution\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总分：100&quot;&gt;&lt;a href=&quot;#总分：100&quot; class=&quot;headerlink&quot; title=&quot;总分：100&quot;&gt;&lt;/a&gt;总分：100&lt;/h2&gt;&lt;h3 id=&quot;选择题得分：50&quot;&gt;&lt;a href=&quot;#选择题得分：50&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="java" scheme="https://nymrli.top/tags/java/"/>
    
      <category term="NJUPT" scheme="https://nymrli.top/tags/NJUPT/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令手册</title>
    <link href="https://nymrli.top/2019/03/15/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/"/>
    <id>https://nymrli.top/2019/03/15/Linux命令手册/</id>
    <published>2019-03-15T14:33:26.000Z</published>
    <updated>2019-03-26T08:17:47.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><p><strong>1、从服务器上下载文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp username@servername:/path/filename /var/www/local_dir（本地目录）</span><br></pre></td></tr></table></figure><p> 例如scp <a href="mailto:root@192.168.0.101" target="_blank" rel="noopener">root@192.168.0.101</a>:/var/www/test.txt  把192.168.0.101上的/var/www/test.txt 的文件下载到/var/www/local_dir（本地目录）</p><p><strong>2、上传本地文件到服务器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /path/filename username@servername:/path</span><br></pre></td></tr></table></figure><p>例如scp /var/www/test.php  <a href="mailto:root@192.168.0.101" target="_blank" rel="noopener">root@192.168.0.101</a>:/var/www/  把本机/var/www/目录下的test.php文件上传到192.168.0.101这台服务器上的/var/www/目录中</p><p><strong>3、从服务器下载整个目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）</span><br></pre></td></tr></table></figure><p>例如:scp -r <a href="mailto:root@192.168.0.101" target="_blank" rel="noopener">root@192.168.0.101</a>:/var/www/test  /var/www/  </p><p><strong>4、上传目录到服务器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp  -r local_dir username@servername:remote_dir例如：scp -r test  root@192.168.0.101:/var/www/   把当前目录下的test目录上传到服务器的/var/www/ 目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh root@47.98.233.15</span></span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint for the ECDSA key sent by the remote host is</span><br><span class="line">SHA256:8hgJ8jpcBr1tm6HS72FpXwMrjba8MQqlqYJQLPB/Qf4.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key in /Users/wangdong/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending ECDSA key in /Users/wangdong/.ssh/known_hosts:26</span><br><span class="line">ECDSA host key for 47.98.233.15 has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从网上截的,自己电脑报错没报错</span></span><br><span class="line">按报错的提示,需要将C:\Users\10630\.ssh中的known_hosts中的内容删掉,因为他默认先从这里边找相同IP的,删掉后就行了</span><br></pre></td></tr></table></figure><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>SSH分客户端<code>openssh-client</code>和服务器端<code>openssh-server</code>，如果你只是想登陆别的机器的SSH只需要安装<code>openssh-client</code>（ubuntu有默认安装，如果没有则<code>sudo apt-get install openssh-client）</code>，如果要使本机开放SSH服务就需要安装<code>openssh-server</code></p><h4 id="下面讲解openssh-server"><a href="#下面讲解openssh-server" class="headerlink" title="下面讲解openssh-server"></a>下面讲解openssh-server</h4><ol><li><p>首先更新源　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装ssh服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure></li><li><p>检测是否已启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e | grep ssh</span><br></pre></td></tr></table></figure><p>看到有ssh字样，说明已启动，如果没有就手动启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br></pre></td></tr></table></figure></li><li><p>配置ssh-server，配置文件位于/etc/ssh/sshd_config，默认端口为22，为了安全，一般自定义为其他端口，然后重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/ssh resart</span><br></pre></td></tr></table></figure></li></ol><h2 id="增加桌面快捷方式"><a href="#增加桌面快捷方式" class="headerlink" title="增加桌面快捷方式"></a>增加桌面快捷方式</h2><p>Launcher :<br>​    在/usr/share/applications/中写入Roboviz.desktop文件(sudo vim Roboviz.desktop)        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Roboviz</span><br><span class="line">Comment=Roboviz</span><br><span class="line">Exec=/home/apollo3d/RoboViz-dev/bin/linux-amd64/roboviz.sh</span><br><span class="line">Icon=/home/apollo3d/RoboViz-dev/bin/linux-amd64/resources/images/icon.png</span><br><span class="line">Terminal=true</span><br><span class="line">StartupNotify=true</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Development;IDE;</span><br></pre></td></tr></table></figure><p><code>ps aux | grep</code>进程名<br><code>ps -A</code>        显示所有程序。<br><code>ps e</code>        列出程序时，显示每个程序所使用的环境变量。<br><code>kill －9 324</code><br><code>killall -9 NAME</code>　Linux下还提供了一个killall命令，可以直接使用进程的名字而不是进程标识号<br><code>chmod {u|g|o|a}{+|-|=}{r|w|x} filename</code> 修改权限<br><code>find pathname [option] expression</code>     寻找文件<br><code>grep [option] pattern filenames</code>     搜索文件中匹配符<br>​    grep -r 二进制 /home/apollo3d/Documents<br>./文件名                进入到进程的执行文件所在的路径下，执行文件</p><p><a href="https://www.cnblogs.com/lcword/p/6046261.html" target="_blank" rel="noopener">https://www.cnblogs.com/lcword/p/6046261.html</a></p><h2 id="端口操作"><a href="#端口操作" class="headerlink" title="端口操作"></a>端口操作</h2><blockquote><p>端口监听信息 <code>netstat -plant</code><br>一、查看哪些端口被打开 <code>netstat -anp</code></p><p>二、关闭端口号:<code>iptables -A OUTPUT -p tcp --dport 端口号 -j DROP</code></p><p>三、打开端口号：<code>iptables -A INPUT -ptcp --dport  端口号 -j ACCEPT</code></p><p>四、以下是linux打开端口命令的使用方法。</p><p><code>nc -lp 23 &amp;(打开23端口，即telnet)</code><br>　　<br><code>netstat -an | grep 23 (查看是否打开23端口)</code> 或者 <code>lsof -i:80</code></p><p>五、linux打开端口命令每一个打开的端口，都需要有相应的监听程序才可以</p></blockquote><h2 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h2><blockquote><p>在 root 用户下运行这条命令创建一个新用户，yangxg 是用户名</p><p>因为我叫杨学光，所以我取的用户名是 yangxg</p><p>选择一个你喜欢的用户名，不一定非得和我的相同</p><p><code>root@localhost:~# useradd -m -s /bin/bash yangxg</code></p><p>把新创建的用户加入超级权限组</p><p><code>root@localhost:~# usermod -a -G sudo yangxg</code></p><p>为新用户设置密码</p><p>注意在输密码的时候不会有字符显示，不要以为键盘坏了，正常输入即可</p><p><code>root@localhost:~# passwd yangxg</code></p><p>切换到创建的新用户</p><p><code>root@localhost:~# su - yangxg</code></p><p>切换成功，@符号前面已经是新用户名而不是 root 了</p><p><code>yangxg@localhost:~$</code></p></blockquote><h2 id="为root用户提供初始密码"><a href="#为root用户提供初始密码" class="headerlink" title="为root用户提供初始密码"></a>为root用户提供初始密码</h2><p><code>sudo passwd root</code></p><h2 id="修改为阿里云-DNS"><a href="#修改为阿里云-DNS" class="headerlink" title="修改为阿里云 DNS"></a>修改为阿里云 DNS</h2><ol><li><p>您必须是管理员root或者具有管理员权限</p></li><li><p><code>sudo vim /etc/resolv.conf</code></p></li><li><p>加入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver 223.5.5.5</span><br><span class="line">nameserver 223.6.6.6</span><br></pre></td></tr></table></figure></li><li><p>保存退出，然后使用dig 验证:</p></li><li><p><code>dig www.taobao.com +short</code>若出现结果则表示正常。</p></li></ol><h2 id="换源-更换数据源"><a href="#换源-更换数据源" class="headerlink" title="换源(更换数据源)"></a>换源(更换数据源)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rootdubuntu:/home/lusifer# curl -sSL https://get. daocloud. io/docker | sh</span><br><span class="line"></span><br><span class="line">Executing docker install script, commit:1d31602</span><br><span class="line">+sh-c apt-get update-qq&gt;/dev/null E: Could not get Lock /var/lib/apt/lists/lock-open (11: Resource temporarily unavailable)</span><br><span class="line">E: Unable to lock directory /var/lib/apt/lists/</span><br></pre></td></tr></table></figure><p>原因可能是没有<strong>更新数据源</strong></p><blockquote><p>1.备份默认的源<code>sudo cp /etc/apt/sources.list /etc/apt/sources_init.list</code></p><p>2.用你熟悉的编辑器打开：如<code>vim /etc/apt/sources.list</code>替换默认的<code>http://archive.ubuntu.com/</code>为<code>mirrors.aliyun.com</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br></pre></td></tr></table></figure><p>最后输入<code>sudo apt-get update</code></p><h2 id="Ubuntu无法找到add-apt-repository问题的解决方法"><a href="#Ubuntu无法找到add-apt-repository问题的解决方法" class="headerlink" title="Ubuntu无法找到add-apt-repository问题的解决方法"></a>Ubuntu无法找到add-apt-repository问题的解决方法</h2><blockquote><p>网上查了一下资料，原来是需要python-software-propertiduanjkes</p><p>于是<code>apt-get install python-software-properties</code></p><p>除此之外还要安装software-properties-common</p><p>于是<code>apt-get install software-properties-common</code></p><p>然后就能用add-apt-repository了</p></blockquote><hr><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="搜索代理"><a href="#搜索代理" class="headerlink" title="搜索代理"></a>搜索代理</h3><p><code>env | grep proxy</code>、<code>sudo grep -r -i http_proxy=代理地址</code></p><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><blockquote><p>临时:<code>export http_proxy=http://10.3.0.1:80</code></p></blockquote><blockquote><p>(1) 需要在/etc/apt/apt.conf中添加以下代码： (如果您希望apt-get(而不是其他应用程序)一直使用http代理,您可以使用这种方式。)</p><p><code>Acquire::http::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p><code>Acquire::ftp::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p><code>Acquire::https::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p>保存apt.conf文件。</p><p>(2)新建一个代理配置文件,在apt-get 时使用配置,15.10可用(针对需要下载的单个不同文件)</p><p>建立文件  <code>vim proxyfile</code></p><p><code>Acquire::http::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p><code>Acquire::ftp::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p><code>Acquire::https::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p>使用时<code>sudo apt-get install  xxx -c proxyfile</code></p><p>(2)在主目录下的.bashrc文件中添加两行。(如果您希望apt-get和其他应用程序如wget等都使用http代理,您可以使用这种方式。 )</p><p>在您的.bashrc文件末尾添加如下内容<br><code>export http_proxy=http://用户名:密码@地址:端口/</code><br><code>export https_proxy=http://用户名:密码@地址:端口/</code></p><p><code>export ftp_proxy=http://用户名:密码@地址:端口/</code></p></blockquote><p><a href="https://blog.csdn.net/qq3399013670/article/details/81300497" target="_blank" rel="noopener">ubuntu 代理配置</a></p><hr><h3 id="PPA"><a href="#PPA" class="headerlink" title="PPA"></a>PPA</h3><p>1.<code>vim /usr/lib/python3/dist-packages/softwareproperties/ppa.py</code></p><p>在函数def _get_https_content_py3（lp_url）的catch案例中添加了一个print（e）显示了错误的真正原因。</p><p>2.系统时间是否正确</p><p>3.除了配置代理之外，请告诉sudo使用<code>-E</code>该标志来考虑环境 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://&lt;proxy&gt;:&lt;port&gt;</span><br><span class="line">export https_proxy=http://&lt;proxy&gt;:&lt;port&gt;</span><br><span class="line">sudo -E apt-add-repository ppa:canonical-qt5-edgers/qt5-proper</span><br></pre></td></tr></table></figure><p>with username and password:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export https_proxy=&lt;username&gt;:&lt;password&gt;@&lt;proxy&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="Ubuntu下让终端走SS代理的方法"><a href="#Ubuntu下让终端走SS代理的方法" class="headerlink" title="Ubuntu下让终端走SS代理的方法"></a>Ubuntu下让终端走SS代理的方法</h3><p>Ubuntu下让终端走SS代理需要第三方软件的帮助，即privoxy。<br>privoxy 是非快取式 (non-caching) 的网页代理伺服器，具有进阶的过滤能力，可强化隐私权，还可以修改网页资料、管理 HTTP cookies、去除广告等。</p><p><strong>安装 privoxy</strong></p><p><code>sudo apt-get install privoxy</code></p><p>安装完成后在 /etc/privoxy 目录下可以找到配置文件 config。</p><h4 id="配置-privoxy"><a href="#配置-privoxy" class="headerlink" title="配置 privoxy"></a><strong>配置 privoxy</strong></h4><p>一般地，改配置前应该备份配置。</p><p><code>mv /etc/privoxy/config /etc/privoxy/config.back</code></p><p>然后打开 config 文件，找到<code>listen-address</code>那一行，修改值为 privoxy 监听的地址，一般使用默认。</p><p>然后再找到<code>forward-socks5</code>那一行，去掉注释，值为SS代理监听的地址。</p><p>让终端走SS代理,修改配置后，重启 privoxy。</p><p><code>sudo /etc/init.d/privoxy restart</code></p><p>然后在终端下添加 http 代理。</p><p><code>export http_proxy=”127.0.0.1:8118”</code></p><p><code>export https_proxy=”127.0.0.1:8118”</code></p><p>然后就可以愉快的用终端翻墙了。</p><p>原文：<a href="https://blog.csdn.net/tailgo/article/details/52075643" target="_blank" rel="noopener">https://blog.csdn.net/tailgo/article/details/52075643</a></p><hr><h2 id="Lets-Encrypt-配置SSL错误-DNS-problem-NXDOMAIN-looking-up-A-for-xxx"><a href="#Lets-Encrypt-配置SSL错误-DNS-problem-NXDOMAIN-looking-up-A-for-xxx" class="headerlink" title="Lets Encrypt 配置SSL错误 DNS problem: NXDOMAIN looking up A for xxx"></a>Lets Encrypt 配置SSL错误 DNS problem: NXDOMAIN looking up A for xxx</h2><ul><li>刚刚解析了A记录，解析服务器还没有生效</li><li>服务器本地 <strong>DNS缓存未更新</strong></li></ul><h4 id="1-首先确定A记录是否成效"><a href="#1-首先确定A记录是否成效" class="headerlink" title="1. 首先确定A记录是否成效"></a>1. 首先确定A记录是否成效</h4><p>确定的方式很简单，在浏览器输入自己的域名，查看能否访问成功。</p><h4 id="2-确定DNS是否有问题"><a href="#2-确定DNS是否有问题" class="headerlink" title="2. 确定DNS是否有问题"></a>2. 确定DNS是否有问题</h4><h5 id="1-ping主机"><a href="#1-ping主机" class="headerlink" title="1) ping主机"></a>1) ping主机</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ping主机，如果无法发现host，则确定是dns问题</span></span><br><span class="line">$ ping demo.ptbird.cn</span><br></pre></td></tr></table></figure><h5 id="2-更新DNS缓存"><a href="#2-更新DNS缓存" class="headerlink" title="2) 更新DNS缓存"></a>2) 更新DNS缓存</h5><p>不建议直接 network restart</p><h5 id="使用nscd"><a href="#使用nscd" class="headerlink" title="使用nscd"></a>使用nscd</h5><p>如果系统没装可以装一下，nscd做DNS缓存加速很有用。</p><p><code>centos : yum install nscd</code>、<code>ubuntu ：apt-get install nscd</code></p><p>如果已经装了直接更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要是hosts</span></span><br><span class="line">$ nscd -i passwd</span><br><span class="line">$ nscd -i group</span><br><span class="line">$ nscd -i hosts</span><br></pre></td></tr></table></figure><h2 id="grep指令参数说明"><a href="#grep指令参数说明" class="headerlink" title="grep指令参数说明"></a>grep指令参数说明</h2><p><a href="https://www.cnblogs.com/forestwolf/p/6413916.html" target="_blank" rel="noopener">https://www.cnblogs.com/forestwolf/p/6413916.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;scp&quot;&gt;&lt;a href=&quot;#scp&quot; class=&quot;headerlink&quot; title=&quot;scp&quot;&gt;&lt;/a&gt;scp&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1、从服务器上下载文件&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://nymrli.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>搭建Gitlab服务器</title>
    <link href="https://nymrli.top/2019/03/14/%E6%90%AD%E5%BB%BAGitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://nymrli.top/2019/03/14/搭建Gitlab服务器/</id>
    <published>2019-03-14T10:32:26.000Z</published>
    <updated>2019-03-16T12:07:39.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建Gitlab服务器"><a href="#搭建Gitlab服务器" class="headerlink" title="搭建Gitlab服务器"></a>搭建Gitlab服务器</h1><h2 id="下载安装Gitlab"><a href="#下载安装Gitlab" class="headerlink" title="下载安装Gitlab"></a>下载安装Gitlab</h2><p>由于直接下载Gitlab会很慢(被墙的缘故) ， 于是选择清华的镜像安装，<a href="https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/" target="_blank" rel="noopener">清华源</a></p><h3 id="Ubuntu-16-04-用户"><a href="#Ubuntu-16-04-用户" class="headerlink" title="Ubuntu 16.04 用户"></a>Ubuntu 16.04 用户</h3><blockquote><p>Linux其他版本或者不是Ubuntu 16.04 见官网修改方式</p></blockquote><ul><li>首先信任 GitLab 的 GPG 公钥:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure><p>▲如果这步不行，先进行下一步</p><ul><li>文本框中内容写进 <code>/etc/apt/sources.list.d/gitlab-ce.list</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu xenial main</span><br></pre></td></tr></table></figure><ul><li>安装 gitlab-ce:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gitlab-ce</span><br></pre></td></tr></table></figure><p>安装成功后，会显示“狐狸头”。</p><ul><li>初次配置服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><ul><li>启动服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl start</span><br></pre></td></tr></table></figure><ul><li>初始化管理员root账号</li></ul><p><img src="/2019/03/14/搭建Gitlab服务器/hexo\source\_posts\搭建Gitlab服务器\1.png" alt="1"></p><h2 id="汉化-用不了–-gt-建议另找"><a href="#汉化-用不了–-gt-建议另找" class="headerlink" title="汉化(用不了–&gt;建议另找)"></a>汉化(用不了–&gt;建议另找)</h2><p>1.下载社区提供的汉化包，在 <a href="https://gitlab.com/xhang/gitlab/" target="_blank" rel="noopener">https://gitlab.com/xhang/gitlab/</a> 中找到相应的汉化分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget wget -cO gitlab-9.0_zh.tar.gz https://gitlab.com/xhang/gitlab/repository/archive.tar.gz?ref=9-0-stable-zh</span><br></pre></td></tr></table></figure><p>2.解压包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar zxvf gitlab-9.0_zh.tar.gz</span><br></pre></td></tr></table></figure><p>3.停止 GitLab 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl stop</span><br></pre></td></tr></table></figure><p>4.备份 gitlab-rails 目录，该目录下主要是web应用部分，也是当前项目仓库的起始版本，也是汉化包要覆盖的目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar zcvf /opt/gitlab/embedded/service/gitlab-rails-bak.tar.gz gitlab-rails</span><br></pre></td></tr></table></figure><p>5.将解压后的汉化补丁覆盖原来的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -rf gitlab-9-0-stable-zh/* gitlab-rails/</span><br></pre></td></tr></table></figure><p>6.启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl start</span><br></pre></td></tr></table></figure><p>7.重新执行配置命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>注意gitlab的配置文件在<code>/etc/gitlab/gitlab.rb</code>中,我个人操作是要经过一次reconfigure后，gitlab.rb才有内容的。（但<code>/opt/gitlab/etcgitlab.rb.template</code> 中一直有，应该就是因为是模板的原因吧）</p><h2 id="gitlab修改默认端口"><a href="#gitlab修改默认端口" class="headerlink" title="gitlab修改默认端口"></a>gitlab修改默认端口</h2><h3 id="gitlab-rb修改"><a href="#gitlab-rb修改" class="headerlink" title="gitlab.rb修改"></a>gitlab.rb修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Advanced settings</span></span></span><br><span class="line">unicorn['listen'] = '127.0.0.1'</span><br><span class="line">unicorn['port'] = 8082</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># GitLab Web server</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> web_server[<span class="string">'shell'</span>] = <span class="string">'/bin/false'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> web_server[<span class="string">'home'</span>] = <span class="string">'/var/opt/gitlab/nginx'</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># GitLab NGINX</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#! Docs: https://docs.gitlab.com/omnibus/settings/nginx.html</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################################################################</span></span></span><br><span class="line"></span><br><span class="line">nginx['listen_addresses'] = ['*']</span><br><span class="line">nginx['listen_port'] = 82 </span><br><span class="line"><span class="meta">#</span><span class="bash"> override only <span class="keyword">if</span> you use a reverse proxy: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md<span class="comment">#setting-the-nginx-listen-port</span></span></span><br></pre></td></tr></table></figure><h3 id="gitlab-rails修改"><a href="#gitlab-rails修改" class="headerlink" title="gitlab-rails修改"></a>gitlab-rails修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> What ports/sockets to listen on, and what options <span class="keyword">for</span> them.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">listen <span class="string">"127.0.0.1:8080"</span>, :tcp_nopush =&gt; <span class="literal">true</span></span></span><br><span class="line">listen "127.0.0.1:8082", :tcp_nopush =&gt; true</span><br><span class="line">listen "/var/opt/gitlab/gitlab-rails/sockets/gitlab.socket", :backlog =&gt; 1024</span><br></pre></td></tr></table></figure><h3 id="gitlab-nginx-修改"><a href="#gitlab-nginx-修改" class="headerlink" title="gitlab nginx 修改"></a>gitlab nginx 修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen *:82;</span><br><span class="line"> </span><br><span class="line">  server_name gitlab.123.123.cn;</span><br><span class="line">  server_tokens off; ## Don&apos;t show the nginx version number, a security best practice</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改完成后，重启下<code>sudo gitlab-ctl reconfigure</code>,<code>sudo gitlab-ctl restart</code>，就可以放82端口的gitlab了。</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录:"></a>附录:</h2><ul><li>参考链接:</li></ul><p><a href="https://www.linuxidc.com/Linux/2018-01/150319.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2018-01/150319.htm</a></p><p><a href="https://blog.csdn.net/hnmpf/article/details/80518460" target="_blank" rel="noopener">https://blog.csdn.net/hnmpf/article/details/80518460</a> (未看，但觉得应该还行)</p><hr><p>之前记录的,先放着</p><h2 id="配置Gitlab"><a href="#配置Gitlab" class="headerlink" title="配置Gitlab"></a>配置Gitlab</h2><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><h5 id="1）查看电脑配置"><a href="#1）查看电脑配置" class="headerlink" title="1）查看电脑配置"></a>1）查看电脑配置</h5><p> github对内核有限制 <strong>64位</strong>,<strong>内核3.0</strong></p><ul><li><code>uname -a</code> 、 <code>uname --m</code></li></ul><h5 id="2）安装"><a href="#2）安装" class="headerlink" title="2）安装"></a>2）安装</h5><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/" target="_blank" rel="noopener">https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/</a></p><h5 id="3）-配置开启GitLab"><a href="#3）-配置开启GitLab" class="headerlink" title="3） 配置开启GitLab"></a>3） 配置开启GitLab</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><h5 id="1-查看主机名然后登陆"><a href="#1-查看主机名然后登陆" class="headerlink" title="1.查看主机名然后登陆"></a>1.查看主机名然后登陆</h5><p>你第一次访问, 你会被自动导向到密码重置界面，重置完成密码后 会重新返回登陆界面</p><p>默认账户的 username 是 root. 提供给你的密码容易创建和登录. 登录后你可以将 username 改成你希望的.</p><h5 id="2-配置服务器及访问路径"><a href="#2-配置服务器及访问路径" class="headerlink" title="2. 配置服务器及访问路径"></a>2. 配置服务器及访问路径</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/gitlab</span></span><br><span class="line">~ external_url = "http://gitlab.aaa.com"</span><br><span class="line"><span class="meta">$</span><span class="bash"> Gitlab-ctl reconfigure</span></span><br></pre></td></tr></table></figure><h4 id="3-配置nginx及DNS域名解析"><a href="#3-配置nginx及DNS域名解析" class="headerlink" title="3.配置nginx及DNS域名解析"></a>3.配置nginx及DNS域名解析</h4><h2 id="docker-下-Gitlab搭建"><a href="#docker-下-Gitlab搭建" class="headerlink" title="docker 下 Gitlab搭建"></a>docker 下 Gitlab搭建</h2><h4 id="1-配置vim-docker-compose-yml"><a href="#1-配置vim-docker-compose-yml" class="headerlink" title="1.配置vim docker-compose.yml"></a>1.配置<code>vim docker-compose.yml</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">version:3</span><br><span class="line">services: </span><br><span class="line">gitlab: </span><br><span class="line">image: twang2218/g1tlab-ce-zh:9.4</span><br><span class="line">        restart: always hostname:192,16875.129</span><br><span class="line">        # environment里才是gitlab的设置,包含nginx和gitlab</span><br><span class="line">        # gitlab的网页访问是通过nginx的方向代理访问的</span><br><span class="line">        environment: </span><br><span class="line">        TZ: Asia/Shanghei</span><br><span class="line">        GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">                external _url 'http://192 168.75.129:8080'</span><br><span class="line">                gitlab_rails[' gitlab_shell_ssh_port']=2222</span><br><span class="line">                unicorn[' port']=8888</span><br><span class="line">                nginx[' listen_port']=8080</span><br><span class="line">        ports:</span><br><span class="line">        # 左边是宿主机的端口, 右边是容器的端口</span><br><span class="line">        - '8080:8080'</span><br><span class="line">        - '8443:443'</span><br><span class="line">        - '2222:22'</span><br><span class="line">        volumes:</span><br><span class="line">        - /usr/local/docker/gitlab/config:/etc/gitlab</span><br><span class="line">         - /usr/local/docker/gitlab/data:/var/opt/gitlab</span><br><span class="line">         - /usr/local/docker/gitlab/logs:/var/log/gitlab</span><br></pre></td></tr></table></figure><p>配置好后通过<code>http://192 168.75.129:8080</code>进行访问</p><h4 id="2-配置root用户初始密码"><a href="#2-配置root用户初始密码" class="headerlink" title="2.配置root用户初始密码"></a>2.配置root用户初始密码</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建Gitlab服务器&quot;&gt;&lt;a href=&quot;#搭建Gitlab服务器&quot; class=&quot;headerlink&quot; title=&quot;搭建Gitlab服务器&quot;&gt;&lt;/a&gt;搭建Gitlab服务器&lt;/h1&gt;&lt;h2 id=&quot;下载安装Gitlab&quot;&gt;&lt;a href=&quot;#下载安装Git
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Linux" scheme="https://nymrli.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>程序设计周cpp学习笔记</title>
    <link href="https://nymrli.top/2019/03/07/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%91%A8cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://nymrli.top/2019/03/07/程序设计周cpp学习笔记/</id>
    <published>2019-03-07T11:56:14.000Z</published>
    <updated>2019-03-07T11:56:39.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件名传参"><a href="#文件名传参" class="headerlink" title="文件名传参"></a>文件名传参</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILENAME <span class="meta-string">"data.csv"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readfile</span><span class="params">(<span class="built_in">string</span> file)</span></span>&#123;</span><br><span class="line">ifstream inFile;</span><br><span class="line">inFile.open(file.c_str(), ios::out); <span class="comment">// 打开模式可省略</span></span><br><span class="line"><span class="built_in">string</span> lineStr;</span><br><span class="line"><span class="keyword">while</span> (getline(inFile, lineStr) )</span><br><span class="line"><span class="comment">// 打印整行字符串</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; lineStr  &lt;&lt; <span class="string">'-'</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">     readfile(FILENAME);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="输入Q退出"><a href="#输入Q退出" class="headerlink" title="输入Q退出"></a>输入Q退出</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">studentMenu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> UID;</span><br><span class="line">    <span class="built_in">string</span> PWD;</span><br><span class="line">    <span class="keyword">int</span> confirmed = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//判断是否认证成功</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"请输入普通账号ID:"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span>  &gt;&gt; UID;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"请输入密码:"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span>  &gt;&gt; PWD;</span><br><span class="line">        confirmed = confirmStatus(UID,PWD);</span><br><span class="line">        <span class="keyword">if</span>( !confirmed ) <span class="built_in">cout</span> &lt;&lt; <span class="string">"账号或密码错误,请尝试.账号ID输入'Q'退出"</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>( !confirmed &amp;&amp; UID != <span class="string">"Q"</span>);</span><br><span class="line">        <span class="keyword">if</span>(confirmed) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"成功认证"</span>;</span><br><span class="line">        <span class="comment">//进入学生界面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标准库文件是在-h还是-cpp中include"><a href="#标准库文件是在-h还是-cpp中include" class="headerlink" title="!!!! 标准库文件是在.h还是.cpp中include?"></a>!!!! 标准库文件是在<code>.h</code>还是<code>.cpp</code>中include?</h3><p>现有两个文件Test.h 和Test.cpp<code>#include &lt;iostream&gt;</code>在<strong>Test.h</strong>中包含 和在<strong>Test.cpp</strong>中包含有什么区别?</p><ul><li>1、在cpp文件中包含.h文件，要么你要用到这个头文件中的函数或者类，要么就是实现这个头文件；</li><li>2、.h —就是为了放一堆声明所产生的东西。<br>如果是定义放在.h中。     如果.h被重复包含多次，那么则会被报重定义。所以在.h 中都要—如果函数就要是inline ,如果是变量就要 selectany (windows)才不会被报错。</li><li>3、#include尽量写到cpp文件里。两个文件在.h文件里相互include,就会产生编译错误，而两个文件在.c文件互相include，就不会有该问题，因此在.h文件include就要避免互相包含的问题，而.cpp文件就不需要考虑</li><li>4、1）在 .h 里面 include 的好处是：如果很多.c,.cpp文件，都包含一批头文件,如果复制很容易遗漏，如果输入，很容易出错</li></ul><p>如果全部在一个.h, include  那么每个.c,.cpp文件只需要一个#include 语句这样不仅输入量减少，而且代码也美观多了代码也主次分明了毕竟，.c.cpp, 里面要实现的函数，才是主要代码</p><p>2）主要缺陷，<br>可能会包含完全不需要的头文件，<br>增加编译工作量</p><ul><li>5、如果你在a.h头文件中include了“stdio.h”，“iostream”，……一大堆<br>那么你的a.cpp源文件只要include你的a.h，就相当于include了“stdio.h”，“iostream”，……一大堆<br>但是当其他文件include你的a.h的同时也就包含了“stdio.h”，“iostream”，……一大堆这个要看你个人需要，如果你需要让其他文件也include一大堆，那么写在a.h中就可以，其他文件包含a.cpp简单整洁无脑如果只有a.cpp需要include一大堆，那么还是建议在a.cpp中include一大堆</li><li>6、如果a.c包含了头文件a.h，a.h包含了头文件b.h，b.c也包含了b.h，那么当b.h发生改变时，a.c和b.c都会重新编译也就是所有包含了b.h的都会重新编译，无论是直接包含，还是间接包含</li><li>7、2点原则：<ul><li>第一个原则：如果可以不包含头文件，那就不要包含了，这时候前置声明可以解决问题。如果使用的仅仅是一个类的指针，没有使用这个类的具体对象（非指针），也没有访问到类的具体成员，那么前置声明就可以了。因为指针这一数据类型的大小是特定的，编译器可以获知（C++编译器自上而下编译源文件的时候，对每一个数据的定义，总是需要知道定义的数据的类型的大小） 第二个原则：尽量在CPP文件中包含头文件，而非在头文件中。假设类A的一个成员是是一个指向类B的指针，在类A的头文件中使用了类 B的前置声明并编译成功，那么在A的实现中我们需要访问B的具体成员，因此需要包含头文件，那么我们应该在类A的实现部分（CPP文件）包含类B的头文件而非声明部分(H文件)</li></ul></li></ul><p>摘自:<a href="https://www.cnblogs.com/fengzhengfly/p/8884581.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengzhengfly/p/8884581.html</a></p><hr><h3 id="C-构造函数的使用"><a href="#C-构造函数的使用" class="headerlink" title="C++ 构造函数的使用"></a>C++ 构造函数的使用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CUser</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">string</span> UID;</span><br><span class="line">        <span class="keyword">int</span> status;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>;</span><br><span class="line">        CUser():UID(<span class="string">"0"</span>),status(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">        CUser(<span class="built_in">string</span> id,<span class="keyword">int</span> sts):UID(id),status(sts)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">CUser <span class="title">user</span><span class="params">(<span class="string">"hello"</span>,<span class="number">12</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; user.UID &lt;&lt; user.status;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string转int"><a href="#string转int" class="headerlink" title="string转int"></a>string转int</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">atoi(rstatus.c_str())  </span><br><span class="line">//atoi(&quot;04&quot;); ===&gt; 4  可以忽略0</span><br><span class="line">---</span><br><span class="line">使用stringstream:</span><br><span class="line">string s = &quot;17&quot;;</span><br><span class="line">stringstream ss;</span><br><span class="line">ss&lt;&lt;s;</span><br><span class="line">int i;</span><br><span class="line">ss&gt;&gt;i;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;endl; // 17</span><br><span class="line">//stringstream可以吞下任何类型，根据实际需要吐出不同的类型</span><br></pre></td></tr></table></figure><h3 id="int转string"><a href="#int转string" class="headerlink" title="int转string"></a><strong>int转string</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">ss&lt;&lt;n;</span><br><span class="line">ss&gt;&gt;str;</span><br><span class="line"><span class="comment">//或者cout &lt;&lt; ss.str();</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itoa(num, str, 10);</span><br></pre></td></tr></table></figure><p>string转int</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::string str = &quot;123&quot;;</span><br><span class="line">int n = atoi(str.c_str());</span><br></pre></td></tr></table></figure><h3 id="int-转string"><a href="#int-转string" class="headerlink" title="int 转string"></a>int 转string</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">这是C++11新增的，使用非常方便，简单查了下：C++11标准增加了全局函数std::to_string，</span><br><span class="line">string to_string (int val);</span><br><span class="line">string to_string (long val);</span><br><span class="line">string to_string (long long val);</span><br><span class="line">string to_string (unsigned val);</span><br><span class="line">string to_string (unsigned long val);</span><br><span class="line">string to_string (unsigned long long val);</span><br><span class="line">string to_string (float val);</span><br><span class="line">string to_string (double val);</span><br><span class="line">string to_string (long double val)</span><br></pre></td></tr></table></figure><h3 id="一-string转char"><a href="#一-string转char" class="headerlink" title="一.string转char *"></a>一.string转char *</h3><ul><li>data()</li><li>c_str()</li><li>copy();</li></ul><h4 id="1、string转char-。"><a href="#1、string转char-。" class="headerlink" title="1、string转char*。"></a>1、string转char*。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 string str = &quot;hello&quot;;</span><br><span class="line">2 const char* p = str.data();//加const  或者用char * p=(char*)str.data();的形式</span><br><span class="line">/*</span><br><span class="line">同时有一点需要说明，这里在devc++中编译需要添加const，否则会报错invalid conversion from const char*  to char *，这里可以再前面加上const或者在等号后面给强制转化成char*的类型。</span><br><span class="line">　　下面解释下该问题，const char*是不能直接赋值到char*的,这样编译都不能通过,理由:假如可以的话,那么通过char*就可以修改const char指向的内容了,这是不允许的。所以char*要另外开辟新的空间，即上面的形式。</span><br><span class="line">　　*/</span><br></pre></td></tr></table></figure><h4 id="2-c-str-方法，如："><a href="#2-c-str-方法，如：" class="headerlink" title="2.c_str()方法，如："></a>2.c_str()方法，如：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 string str=“world”;</span><br><span class="line">2 const char *p = str.c_str();//同上，要加const或者等号右边用char*</span><br></pre></td></tr></table></figure><h4 id="3-copy-方法，如："><a href="#3-copy-方法，如：" class="headerlink" title="3.copy()方法，如："></a>3.copy()方法，如：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 string str=&quot;hmmm&quot;;</span><br><span class="line">2 char p[50];</span><br><span class="line">3 str.copy(p, 5, 0);//这里5代表复制几个字符，0代表复制的位置，</span><br><span class="line">4 *(p+5)=‘\0’;//注意手动加结束符！！！</span><br></pre></td></tr></table></figure><h3 id="二、char-转string。"><a href="#二、char-转string。" class="headerlink" title="二、char * 转string。"></a>二、char * 转string。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 string s;</span><br><span class="line">2 char *p = &quot;hello&quot;;//直接赋值</span><br><span class="line">3 s = p;</span><br></pre></td></tr></table></figure><p>这里有一点要说明，当声明了string类型变量s后，用printf(“%s”,s);是会出错的，因为“%s”要求后面的对象的首地址。但是string不是这样的一个类型。所以肯定出错。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">co</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> A::co()&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"hello"</span>;</span><br><span class="line">A::bo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> A::bo()&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"world"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">A a;</span><br><span class="line">a.co();</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">ifstream inFile(&quot;data1.csv&quot;, ios::in);</span><br><span class="line"></span><br><span class="line">    if (inFile.fail())&#123;</span><br><span class="line">        cout &lt;&lt; &quot;Cannot open file&quot; &lt;&lt; endl;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;string&gt; line;</span><br><span class="line">    string lineStr;</span><br><span class="line">    while (getline(inFile, lineStr) )&#123;</span><br><span class="line">    line.push_back(lineStr);</span><br><span class="line">    &#125;</span><br><span class="line">for(vector&lt;string&gt;::iterator i=line.begin();i!=line.end();i++)&#123;</span><br><span class="line">        // cout &lt;&lt; strArray.at(i)&lt;&lt;endl;</span><br><span class="line">        cout &lt;&lt; (*i) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; &quot;请输入书的数量：&quot; &lt;&lt; endl;</span><br><span class="line">    do&#123;</span><br><span class="line">cin &gt;&gt; tmp.TotalNumber;</span><br><span class="line">&#125;while( atoi( tmp.TotalNumber.c_str())  == 0  ) ;    //非数字情况</span><br></pre></td></tr></table></figure><h2 id="操作二维Vector"><a href="#操作二维Vector" class="headerlink" title="操作二维Vector"></a>操作二维Vector</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">string lineStr;</span><br><span class="line">vector&lt;vector&lt;string&gt;&gt; strArray;</span><br><span class="line">while (getline(inFile, lineStr) )&#123;</span><br><span class="line">stringstream ss(lineStr);</span><br><span class="line">string str;</span><br><span class="line">vector&lt;string&gt; lineArray;</span><br><span class="line">while (getline(ss, str, &apos;,&apos;)) lineArray.push_back(str);</span><br><span class="line">strArray.push_back(lineArray);</span><br><span class="line">for(vector&lt;vector&lt;string&gt;&gt;::iterator i=strArray.begin();i!=strArray.end();i++)&#123;</span><br><span class="line">     for(vector&lt;string&gt;::iterator j=(*i).begin();j!=(*i).end();j++)&#123;</span><br><span class="line">        cout &lt;&lt; &quot;*j &quot; ;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改好的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">inFile</span><span class="params">(<span class="string">"data1.csv"</span>, ios::in)</span></span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; lineVec;</span><br><span class="line">    <span class="keyword">if</span> (inFile.fail())&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Cannot open file"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> lineStr;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; vecArray;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; newvec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (getline(inFile, lineStr) )&#123;</span><br><span class="line"><span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(lineStr)</span></span>;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; lineVec;</span><br><span class="line"><span class="keyword">while</span> (getline(ss, str, <span class="string">','</span>)) lineVec.push_back(str);</span><br><span class="line">vecArray.push_back(lineVec);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;::iterator i=vecArray.begin();i!=vecArray.end();i++)&#123;</span><br><span class="line">     <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator j=(*i).begin();</span><br><span class="line">     <span class="keyword">if</span>( *j != <span class="string">"100009/1"</span> ) </span><br><span class="line">     &#123;newvec.push_back(lineStr);</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator i = newvec.begin(); i != newvec.end(); ++i)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二维Vector</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char const *argv[])&#123;</span><br><span class="line">vector&lt;vector&lt;string&gt;&gt; row;</span><br><span class="line">vector&lt;string&gt; col1;</span><br><span class="line">vector&lt;string&gt; col2;</span><br><span class="line"></span><br><span class="line">col1.push_back(&quot;Q&quot;);</span><br><span class="line">col1.push_back(&quot;W&quot;);</span><br><span class="line"></span><br><span class="line">col2.push_back(&quot;A&quot;);</span><br><span class="line">col2.push_back(&quot;S&quot;);</span><br><span class="line"></span><br><span class="line">row.push_back(col1);</span><br><span class="line">row.push_back(col2);</span><br><span class="line">cout &lt;&lt; row.at(0).at(1);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看vector中是否含指定的string"><a href="#查看vector中是否含指定的string" class="headerlink" title="查看vector中是否含指定的string"></a>查看vector中是否含指定的string</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main(int argc, char const *argv[])</span><br><span class="line">&#123;</span><br><span class="line">std::vector&lt;string&gt; v;</span><br><span class="line">v.push_back(&quot;hello&quot;);</span><br><span class="line">v.push_back(&quot;1ord&quot;);</span><br><span class="line">v.push_back(&quot;asd&quot;);</span><br><span class="line">if (std::find(v.begin(), v.end(), &quot;he&quot;) != v.end())</span><br><span class="line">&#123;</span><br><span class="line">  cout &lt;&lt; &quot;yes&quot;;</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环时删除某个元素,不影响循环==&gt;每个元素仍能被遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line">v.push_back(<span class="string">"1"</span>);</span><br><span class="line">v.push_back(<span class="string">"2"</span>);</span><br><span class="line">v.push_back(<span class="string">"3"</span>);</span><br><span class="line">v.push_back(<span class="string">"4"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); ++i)&#123;</span><br><span class="line"><span class="keyword">if</span> (v.at(i) == <span class="string">"2"</span>) v.erase(v.begin()+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); ++i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v.at(i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳过索引值-只输出id"><a href="#跳过索引值-只输出id" class="headerlink" title="跳过索引值,只输出id"></a>跳过索引值,只输出id</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char const *argv[])&#123;</span><br><span class="line">ifstream inFile;</span><br><span class="line">inFile.open(&quot;data1.csv&quot;);</span><br><span class="line"></span><br><span class="line">string lineStr;</span><br><span class="line">vector&lt;vector&lt;string&gt; &gt; row;</span><br><span class="line">vector&lt;string&gt; newvec;</span><br><span class="line"></span><br><span class="line">while (getline(inFile, lineStr) )&#123;</span><br><span class="line">stringstream ss(lineStr);</span><br><span class="line">string str;</span><br><span class="line">vector&lt;string&gt; col;</span><br><span class="line">while (getline(ss, str, &apos;,&apos;)) col.push_back(str);</span><br><span class="line">row.push_back(col);</span><br><span class="line">    &#125;</span><br><span class="line">for (int i = 1; i &lt; row.size(); ++i)</span><br><span class="line">     cout &lt;&lt; row.at(i).at(0) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="避免错误输入"><a href="#避免错误输入" class="headerlink" title="避免错误输入"></a>避免错误输入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while(getchar()!=&apos;\n&apos;) ;</span><br></pre></td></tr></table></figure><h3 id="分割时间"><a href="#分割时间" class="headerlink" title="分割时间"></a>分割时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void CData(string &amp;timestr)&#123;</span><br><span class="line">    stringstream ss(timestr);</span><br><span class="line">    int year;</span><br><span class="line">    int mon;</span><br><span class="line">    int day;</span><br><span class="line">    string str;</span><br><span class="line">    getline(ss, str, &apos;/&apos;);</span><br><span class="line">    year = atoi(str.c_str());</span><br><span class="line">    getline(ss, str, &apos;/&apos;);</span><br><span class="line">    mon = atoi(str.c_str());</span><br><span class="line">    getline(ss, str, &apos;/&apos;);</span><br><span class="line">    day = atoi(str.c_str());</span><br><span class="line">    cout &lt;&lt; year &lt;&lt; &quot;,&quot; &lt;&lt;  mon &lt;&lt; &quot;,&quot; &lt;&lt;  day &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char const *argv[])</span><br><span class="line">&#123;</span><br><span class="line">// string a =&quot;2017/04/02&quot;;</span><br><span class="line">// CData(a);</span><br><span class="line">stringstream ss;</span><br><span class="line">ss &lt;&lt; 1 &lt;&lt; &quot;/&quot; &lt;&lt; 2 &lt;&lt; &quot;/&quot; &lt;&lt; 3;</span><br><span class="line">cout &lt;&lt; ss.str();</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stringstream ss;</span><br><span class="line">ss &lt;&lt; 1 &lt;&lt; &quot;/&quot; &lt;&lt; 2 &lt;&lt; &quot;/&quot; &lt;&lt; 3;</span><br></pre></td></tr></table></figure><p>vector最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int maxn =  *max_element(v.begin(),v.end());</span><br></pre></td></tr></table></figure><h3 id="找到最大ID"><a href="#找到最大ID" class="headerlink" title="找到最大ID"></a>找到最大ID</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; idcol;</span><br><span class="line">string lineStr;</span><br><span class="line">    while (getline(infile, lineStr) )&#123;     //获取行</span><br><span class="line">   stringstream ss(lineStr);</span><br><span class="line">   string bookid;                              //记录列数据,必须写在这个循环里</span><br><span class="line">   getline(ss, bookid, &apos;,&apos;);</span><br><span class="line">   idcol.push_back(bookid);</span><br><span class="line">&#125;</span><br><span class="line">   int addid = vecMAX(idcol)+1;</span><br><span class="line">   stringstream inttostring;</span><br><span class="line">   inttostring &lt;&lt; addid;</span><br><span class="line">   tmp.BookID = inttostring.str();</span><br></pre></td></tr></table></figure><h3 id="二维VEC排序"><a href="#二维VEC排序" class="headerlink" title="二维VEC排序"></a>二维VEC排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    std::vector&lt;std::vector&lt;int&gt; &gt; s;</span><br><span class="line">    vector&lt;int&gt; v1;</span><br><span class="line">    vector&lt;int&gt; v2;</span><br><span class="line">    v1.push_back(5);</span><br><span class="line">    v1.push_back(13);</span><br><span class="line">    s.push_back(v1);</span><br><span class="line">    v2.push_back(7);</span><br><span class="line">    v2.push_back(4);</span><br><span class="line">    s.push_back(v2);</span><br><span class="line">    sort(s.begin(), s.end());</span><br><span class="line">    for (int i = 0; i &lt; s.size(); ++i)&#123;</span><br><span class="line">            for (int j = 0; j &lt; v1.size(); ++j)</span><br><span class="line">                 cout &lt;&lt; s.at(i).at(j);</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out.open(USERTMPFILE) 可以打开宏定义</span><br><span class="line">ios::in + ios::out 从开头加</span><br><span class="line">ios::app 从结尾加</span><br></pre></td></tr></table></figure><h3 id="获得值最大的键"><a href="#获得值最大的键" class="headerlink" title="获得值最大的键"></a>获得值最大的键</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bool cmp(const pair&lt;string, int&gt;&amp; lhs, const pair&lt;string, int&gt;&amp; rhs) &#123;  </span><br><span class="line">  return lhs.second &gt; rhs.second;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">int main(int argc, char const *argv[])&#123; </span><br><span class="line">    map&lt;string,int&gt; a ;</span><br><span class="line">    a.insert(pair&lt;string, int&gt;(&quot;ssd&quot;, 3)); </span><br><span class="line">    a[&quot;hello&quot;]=3;</span><br><span class="line">    a[&quot;world&quot;]=9;</span><br><span class="line">    a[&quot;cl&quot;]=6;</span><br><span class="line">    std::vector&lt; pair&lt;string, int&gt; &gt; v(a.begin(), a.end());</span><br><span class="line">    sort(v.begin(), v.end(),cmp);</span><br><span class="line">    cout &lt;&lt; &quot;max&quot; &lt;&lt; v.at(0).first &lt;&lt; endl;</span><br><span class="line">    getchar();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件名传参&quot;&gt;&lt;a href=&quot;#文件名传参&quot; class=&quot;headerlink&quot; title=&quot;文件名传参&quot;&gt;&lt;/a&gt;文件名传参&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="程序设计" scheme="https://nymrli.top/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ACM-DFS、BFS</title>
    <link href="https://nymrli.top/2019/03/07/ACM-DFS%E3%80%81BFS/"/>
    <id>https://nymrli.top/2019/03/07/ACM-DFS、BFS/</id>
    <published>2019-03-07T11:55:03.000Z</published>
    <updated>2019-03-28T02:37:47.684Z</updated>
    
    <content type="html"><![CDATA[<h3 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索(DFS)"></a>深度优先搜索(DFS)</h3><blockquote><p>从某个状态,不断转移状态直到无法转移,然后回退到前一步的状态,继续转移到其他状态,如此不断重复,直到找到最终解. ====&gt; 递归函数  </p><p><strong>隐式的用到了栈(stack)</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[部分和问题]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000</span></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> s[MAXN];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( i == n ) <span class="keyword">return</span> sum == k;<span class="comment">//如果前n项计算过了，返回sum=k是否相等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( dfs(i+<span class="number">1</span> , sum) ) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//不加上s[i]的情况；</span></span><br><span class="line">    <span class="keyword">if</span> ( dfs(i+<span class="number">1</span>, sum + s[i] )) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//加上s[i]的情况</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//无论加不加上s[i]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    <span class="keyword">if</span> (dfs(<span class="number">0</span>,<span class="number">0</span>)) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt;<span class="string">"NO"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[laking countiing]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">char</span> field[MAXN][MAXN]=&#123;</span><br><span class="line">&#123;<span class="string">"W........WW."</span>&#125;,</span><br><span class="line">&#123;<span class="string">".WWW.....WWW"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"....WW...WW."</span>&#125;,</span><br><span class="line">&#123;<span class="string">".........WW."</span>&#125;,</span><br><span class="line">&#123;<span class="string">".........W.."</span>&#125;,</span><br><span class="line">&#123;<span class="string">"..W.......W."</span>&#125;,</span><br><span class="line">&#123;<span class="string">".W.W.....WW."</span>&#125;,</span><br><span class="line">&#123;<span class="string">"W.W.W.....W."</span>&#125;,</span><br><span class="line">&#123;<span class="string">".W.W......W."</span>&#125;,</span><br><span class="line">&#123;<span class="string">"..W.......W."</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    field[x][y] = <span class="string">'.'</span>;</span><br><span class="line">    <span class="comment">//循环遍历移动的8个方向,检测八连通位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> dx=<span class="number">-1</span>;dx&lt;=<span class="number">1</span>;dx++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> dy=<span class="number">-1</span>;dy&lt;=<span class="number">1</span>;dy++)&#123;</span><br><span class="line">          <span class="keyword">int</span> nx=x+dx;<span class="comment">//移动后的结果为(nx,ny)</span></span><br><span class="line">          <span class="keyword">int</span> ny=y+dy;</span><br><span class="line">          <span class="keyword">if</span>( (<span class="number">0</span> &lt;= nx &amp;&amp; nx&lt; N) &amp;&amp; (<span class="number">0</span> &lt;= ny &amp;&amp; ny &lt; M) &amp;&amp; field[nx][ny]==<span class="string">'W'</span>) dfs(nx,ny);<span class="comment">//此处为做题的关键 : 不断</span></span><br><span class="line">          &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;<span class="comment">//水坑数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;M;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(field[i][j] == <span class="string">'W'</span>)&#123;</span><br><span class="line">            dfs(i,j);</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLake</span><span class="params">()</span></span>&#123;</span><br><span class="line">    N=<span class="number">10</span>;M=<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;M;j++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; field[i][j] ;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    N=<span class="number">10</span>;</span><br><span class="line">    M=<span class="number">12</span>;</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="宽度优先搜索-BFS"><a href="#宽度优先搜索-BFS" class="headerlink" title="宽度优先搜索(BFS)"></a>宽度优先搜索(BFS)</h3><blockquote><p>总是优先搜索距离初始状态最近的状态,复杂度 = O(状态书 * 转移的方式)</p><p><strong>利用队列(queue)</strong>,搜索时首先将初始状态添加到队列里,此后从队列的最前端不断取出状态,吧从该状态可以转移到的状态中尚未访问过的部分加入队列,如此往返,直至队列被取空或是找到了问题的解</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">W........WW.</span><br><span class="line">.WWW.....WWW</span><br><span class="line">....WW...WW.</span><br><span class="line">.........WW.</span><br><span class="line">.........W..</span><br><span class="line">.........WW.</span><br><span class="line">..W.......W.</span><br><span class="line">.W.W.....WW.</span><br><span class="line">W.W.W.....W.</span><br><span class="line">.W.W......W.</span><br><span class="line">..W.......W.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;W........WW.&#125;</span><br><span class="line">&#123;.WWW.....WWW&#125;</span><br><span class="line">&#123;....WW...WW.&#125;</span><br><span class="line">&#123;.........WW.&#125;</span><br><span class="line">&#123;.........W..&#125;</span><br><span class="line">&#123;.........WW.&#125;</span><br><span class="line">&#123;..W.......W.&#125;</span><br><span class="line">&#123;.W.W.....WW.&#125;</span><br><span class="line">&#123;W.W.W.....W.&#125;</span><br><span class="line">&#123;.W.W......W.&#125;</span><br><span class="line">&#123;..W.......W.&#125;</span><br></pre></td></tr></table></figure><h3 id="广度优先搜索思想"><a href="#广度优先搜索思想" class="headerlink" title="广度优先搜索思想"></a>广度优先搜索思想</h3><p>设图G的初态是所有顶点均未访问，在G 中任选一顶点i作为初始点，则广度优先搜索的基本思想是：</p><ul><li>（1）从图中的某个顶点V出发，访问之；并将其访问标志置为已被访问，即visited[i]=1；</li><li>（2）依次访问顶点V的各个未被访问过的邻接 点，将V的全部邻接点都访问到；</li><li>（3）分别从这些邻接点出发，依次访问它们的未被访问过的邻接点，并使“先被访问的顶点的邻接点”先于“后被访问的顶点的邻接 点”被访问，直到图中所有已被访问过的顶点的邻接点都被访问到。依此类推，直到图中所有顶点都被访问完为止 。</li></ul><p>广度优先搜索在搜索访问一层时，需要<strong>记住已被访问的顶点</strong>，以便在访问下层顶点时，从已被访问的顶点出发搜索访问其邻接点。所以在广度优先搜索中<u>需要设置一个队列Queue，使已被访问的顶点顺序由队尾进入队列</u>。在搜索访问下层顶点时，先从队首取出一个已被访问的上层顶点，再从该顶点出发搜索访问它的各个邻接点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;深度优先搜索-DFS&quot;&gt;&lt;a href=&quot;#深度优先搜索-DFS&quot; class=&quot;headerlink&quot; title=&quot;深度优先搜索(DFS)&quot;&gt;&lt;/a&gt;深度优先搜索(DFS)&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从某个状态,不断转移状态直到无法转移,然后回退
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>ACM-快速幂</title>
    <link href="https://nymrli.top/2019/03/07/ACM-%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>https://nymrli.top/2019/03/07/ACM-快速幂/</id>
    <published>2019-03-07T11:54:05.000Z</published>
    <updated>2019-03-07T11:54:35.545Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单位运算快速幂"><a href="#简单位运算快速幂" class="headerlink" title="简单位运算快速幂"></a>简单位运算快速幂</h4><blockquote><p>假设我们要求a^b，那么其实b是可以拆成二进制的，该二进制数第i位的权为2^(i-1)，例如当b==11时，<strong>a^11=a^(2^0+2^1+2^3)</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poww</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>,base=a;</span><br><span class="line">    <span class="keyword">while</span>(b!)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans*=base;</span><br><span class="line">        base*=base;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">　 &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11的二进制是<code></code>1011<code>，</code>11 = 2³×1 + 2²×0 + 2¹×1 + 2º×1，因此，我们将<code>a¹¹</code>转化为算<code>a^(2^0)*a^(2^1)*a^(2^3)</code></p><p>其中比较重要的一步:<code>base*=base</code>,即基底不断增加,如果二进制是1则*上基底否则不,<code>ans</code>为所有基底相乘</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">base*base==base^2</span><br><span class="line">下一步再乘，就是base^2*base^2==base^4</span><br><span class="line">然后同理  base^4 * base4 = base^8 </span><br><span class="line">see?是不是做到了base--&gt;base^2--&gt;base^4--&gt;base^8--&gt;base^16--&gt;base^32.......</span><br><span class="line">指数正是 2^i ，</span><br><span class="line">再看上面的例子，a¹¹ =  a^(2^0) * a^(2^1) * a^(2^3)，</span><br><span class="line">这三项是不是完美解决了，，嗯，快速幂就是这样。</span><br></pre></td></tr></table></figure><blockquote><p>▲.由于指数函数是爆炸增长的函数，所以很有可能会爆掉int的范围，根据题意决定是用 long long啊还是unsigned int啊还是mod某个数啊自己看着办。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll base,ll n,ll mod)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>( n &amp; <span class="number">1</span> )  res = res*base%mod;</span><br><span class="line">        base *= base;</span><br><span class="line">        n&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简单位运算快速幂&quot;&gt;&lt;a href=&quot;#简单位运算快速幂&quot; class=&quot;headerlink&quot; title=&quot;简单位运算快速幂&quot;&gt;&lt;/a&gt;简单位运算快速幂&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;假设我们要求a^b，那么其实b是可以拆成二进制的，该二进制数第i位
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学java程序设计作业在线编程第三次作业</title>
    <link href="https://nymrli.top/2019/03/07/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BD%9C%E4%B8%9A/"/>
    <id>https://nymrli.top/2019/03/07/南京邮电大学java程序设计作业在线编程第三次作业/</id>
    <published>2019-03-07T11:12:47.000Z</published>
    <updated>2019-03-17T05:31:56.614Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选择题得分：60"><a href="#选择题得分：60" class="headerlink" title="选择题得分：60"></a>选择题得分：60</h3><p> \1. 设有如下定义语句： String s1=”My cat”; int m=s1.compareTo(“My a cat”); 语句被执行后m的值为（ ）</p><p>A.2</p><p>B.1</p><p>C.0</p><p>D.-2</p><p>正确答案是: A</p><p> \2. 语句 String s1=new String(“Hello”); String s2=new String(“Hello”); System.out.println(s1==s2); System.out.printlv(s1.equals(s2)); 执行后的输出结果是（ ）</p><p>A.Hello false</p><p>B.Hello true</p><p>C.Hello Hello</p><p>D.false true</p><p>正确答案是: D</p><p> \3. 执行下列语句 int[] lx={2,3,4,5}; lx[3]=lx[3]==–lx[0]?++lx[1]:lx[2]–; 后，数组lx的元素值分别为（ ）</p><p>A.1,2,3,4</p><p>B.1,3,3,3</p><p>C.1,2,3,3</p><p>D.1,3,3,4</p><p>正确答案是: D</p><p> \4. 在一个应用程序中定义了数组a：int[] a={1,2,3,4,5,6,7,8,9,10}，为了打印输出数组a的最后一个数组元素，下面正确的代码是（ ）</p><p>A.System.out.println(a[10]);</p><p>B.System.out.println(a[9]);</p><p>C.System.out.println(a[8]);</p><p>D.System.out.println(a[a.length]);</p><p>正确答案是: B</p><p> \5. 设有定义语句int a[]={36,72,99};则以下对此语句叙述错误的是（ ）</p><p>A.该语句定义了一个名为a的一维数组；</p><p>B.a数组有3个元素；</p><p>C.数组中的每个元素是整型；</p><p>D.a数组的元素的下标为1~3；</p><p>正确答案是: D</p><p> \6. 下面关于数组定义语句不正确的是（ ）</p><p>A.float f[]=new{2.4f,3.5f,5.7f,7.9f};</p><p>B.int a[]={1,2,3,4,5}</p><p>C.double[]d=new double[10];</p><p>D.int[]a2;</p><p>正确答案是: A</p><p> \7. 下列语句序列执行后，c的值是（ ） int a=3,b=4,c=0; while ((a++)&lt;(–b))++c;</p><p>A.0</p><p>B.1</p><p>C.2</p><p>D.3</p><p>正确答案是: A</p><p> \8. 下列语句序列执行后，a的值是（ ） int a=1; for(int i=5;i&gt;0;i-=2) a*=i;</p><p>A.0</p><p>B.1</p><p>C.15</p><p>D.60</p><p>正确答案是: C</p><p> \9. 下列语句序列执行后，c的值是（ ） int a=10,b=18,c=30; switch(b-a){ case 8 : c++; case 9 : c+=2; case 10 : c+=3; default :c/=b; }</p><p>A.31</p><p>B.32</p><p>C.2</p><p>D.33</p><p>正确答案是: C</p><p> \10. 设a、b为int型变量，c、d为fload类型变量，ch为char类型变量，且所有变量均已赋值，则下列正确的switch语句是（ ）</p><p>A.switch(a+b);{…}</p><p>B.switch(ch+1){…}</p><p>C.switch ch {…}</p><p>D.switch(c+d){…}</p><p>正确答案是: B</p><p> \11. 下列语句序列执行后，c的值是（ ） int a=4,b=5,c=9,d=6; if (a&gt;b||c&lt;d) c–; else c++;</p><p>A.6</p><p>B.10</p><p>C.8</p><p>D.9</p><p>正确答案是: B</p><p> \12. 下列语句序列执行后，c的值是（ ） int a=6,b=3,c=5; if (a==b) c+=a;else c=++a*c;</p><p>A.15</p><p>B.25</p><p>C.35</p><p>D.45</p><p>正确答案是: C</p><p> \13. 下列语句序列执行后，c变量的值为（ ） int a=2,b=4,c=5; if (a&lt;–b) c*=a;</p><p>A.5</p><p>B.20</p><p>C.15</p><p>D.10</p><p>正确答案是: D</p><p> \14. 下列语句序列执行后，ch1变量中的值为（ ） char ch1=’A’,ch2=’B’; if (ch1+2&lt;ch2)++ch1;</p><p>A.’A’</p><p>B.’B’</p><p>C.A</p><p>D.B</p><p>正确答案是: A</p><p> \15. 以下选项中，合法的赋值语句是（ ）</p><p>A.++m!=n–;</p><p>B.++m;</p><p>C.m=m+1=5;</p><p>D.m==1;</p><p>正确答案是: B</p><p> \16. 设有定义“int a=22;long b=56;”，下面赋值不正确的语句是（ ）</p><p>A.a=b;</p><p>B.b=(long)a;</p><p>C.a=(int)b;</p><p>D.b=a;</p><p>正确答案是: A</p><p> \17. 下面选项中，（ ）是正确的输出结果 int m=2,n=1; m+=m-=n; System.out.println(“m=”+m);</p><p>A.m=1</p><p>B.m=2</p><p>C.m=3</p><p>D.m=4</p><p>正确答案是: C</p><p> \18. 下列语句序列执行后的结果为（ ） int a=10,b=4,c=20,d=6; System.out.println(a++<em>b+c</em>–d);</p><p>A.144</p><p>B.140</p><p>C.28</p><p>D.不能执行</p><p>正确答案是: B</p><p> \19. 假设以下选项中的变量都已经正确定义，则不合法的表达式是（ ）</p><p>A.a&gt;4==6&lt;1;</p><p>B.’n’-3;</p><p>C.’a’=8;</p><p>D.’A’%6</p><p>正确答案是: C</p><p> \20. 假设a为已经声明并以赋初值的int类型变量，则对于a的赋值语句正确的是（ ）</p><p>A.int a=6;</p><p>B.a==3;</p><p>C.a=3.2f;</p><p>D.a+=a*3;</p><p>正确答案是: D</p><h3 id="编程题得分：40"><a href="#编程题得分：40" class="headerlink" title="编程题得分：40"></a>编程题得分：40</h3><h4 id="1-打印每月有几天-得分：10-10"><a href="#1-打印每月有几天-得分：10-10" class="headerlink" title="1.打印每月有几天  得分：10 / 10"></a>1.打印每月有几天  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月7日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isYeap</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span> != <span class="number">0</span> )</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (year%<span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> a = s.nextInt();</span><br><span class="line">        <span class="keyword">int</span> b = s.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> yeap[] = &#123;<span class="number">31</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> noyeap[] = &#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( isYeap(a) )</span><br><span class="line">            System.out.println(<span class="string">""</span>+a+<span class="string">"-"</span>+b+<span class="string">"-"</span>+yeap[b-<span class="number">1</span>]+<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">""</span>+a+<span class="string">"-"</span>+b+<span class="string">"-"</span>+noyeap[b-<span class="number">1</span>]+<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2-百分制成绩转换等级制成绩-得分：10-10"><a href="#4-3-2-百分制成绩转换等级制成绩-得分：10-10" class="headerlink" title="4-3-2 百分制成绩转换等级制成绩  得分：10 / 10"></a>4-3-2 百分制成绩转换等级制成绩  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月7日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> a = s.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a&lt;<span class="number">0</span> || a &gt; <span class="number">100</span>) System.out.printf(<span class="string">"Error input\n"</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> REa = a/<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (REa) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">System.out.printf(<span class="string">"%d -- %c\n"</span>,a,<span class="string">'D'</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">System.out.printf(<span class="string">"%d -- %c\n"</span>,a,<span class="string">'C'</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">System.out.printf(<span class="string">"%d -- %c\n"</span>,a,<span class="string">'B'</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">System.out.printf(<span class="string">"%d -- %c\n"</span>,a,<span class="string">'A'</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.printf(<span class="string">"%d -- %c\n"</span>,a,<span class="string">'E'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用if语句求解分段函数-得分：10-10"><a href="#用if语句求解分段函数-得分：10-10" class="headerlink" title="用if语句求解分段函数  得分：10 / 10"></a>用if语句求解分段函数  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月7日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">double</span> a = s.nextDouble();</span><br><span class="line"><span class="keyword">double</span> b=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a&lt;<span class="number">20</span>) b=a+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( a&gt;<span class="number">100</span> ) b=a-<span class="number">100</span>;</span><br><span class="line"><span class="keyword">else</span> b=a;</span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">"x=%.2f,y=%.2f\n"</span>,a,b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-混合类型数据格式化输入-得分：10-10"><a href="#2-2-混合类型数据格式化输入-得分：10-10" class="headerlink" title="2-2 混合类型数据格式化输入  得分：10 / 10"></a>2-2 混合类型数据格式化输入  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月7日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">double</span> d1 = s.nextDouble();</span><br><span class="line"><span class="keyword">int</span> i = s.nextInt();</span><br><span class="line">String ss = s.next();</span><br><span class="line"><span class="keyword">char</span> ch = ss.charAt( <span class="number">0</span> );</span><br><span class="line"><span class="keyword">double</span> d2 = s.nextDouble();</span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">"%c %d %.2f %.2f"</span>,ch,i,d1,d2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-1a-计算三位数的位数和-得分：10-10"><a href="#3-4-1a-计算三位数的位数和-得分：10-10" class="headerlink" title="3-4-1a 计算三位数的位数和  得分：10 / 10"></a>3-4-1a 计算三位数的位数和  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月7日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = s.nextInt();</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( n &lt; <span class="number">0</span>) n = -n; <span class="comment">// 保证绝对值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> left = n%<span class="number">10</span>;</span><br><span class="line">sum += left;</span><br><span class="line">n/= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">System.out.printf(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;选择题得分：60&quot;&gt;&lt;a href=&quot;#选择题得分：60&quot; class=&quot;headerlink&quot; title=&quot;选择题得分：60&quot;&gt;&lt;/a&gt;选择题得分：60&lt;/h3&gt;&lt;p&gt; \1. 设有如下定义语句： String s1=”My cat”; int m=s1.co
      
    
    </summary>
    
    
      <category term="java" scheme="https://nymrli.top/tags/java/"/>
    
      <category term="NJUPT" scheme="https://nymrli.top/tags/NJUPT/"/>
    
  </entry>
  
  <entry>
    <title>Linux下开机启动Python脚本</title>
    <link href="https://nymrli.top/2019/03/03/Linux%E4%B8%8B%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8Python%E8%84%9A%E6%9C%AC/"/>
    <id>https://nymrli.top/2019/03/03/Linux下开机启动Python脚本/</id>
    <published>2019-03-03T11:48:46.000Z</published>
    <updated>2019-03-03T12:00:19.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rc-local"><a href="#rc-local" class="headerlink" title="rc.local"></a>rc.local</h1><p>将脚本写在<code>/etc/rc.local</code>文件<br>输入命令：<code>sudo vi /etc/rc.local</code><br>在<code>exit 0</code>上一行输入：<code>python /usr/bin/python /home/pi/test.py</code><br>重启就可以看效果<code>sudo reboot</code></p><blockquote><p>当然，rc.local 文件需要有执行权限（默认没有）<br><code>$ sudo chmod +x /etc/rc.local</code><br>对于命令，最好是先which python查出命令路径，写命令时写绝对路径</p></blockquote><h1 id="etc-init-d"><a href="#etc-init-d" class="headerlink" title="/etc/init.d"></a>/etc/init.d</h1><p>写一个服务放到linux的<code>/etc/init.d</code>目录中</p><p>并且授权bash脚本<code>chmod 755 /etc/init.d/mypython</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 66 36</span></span><br><span class="line"><span class="comment"># /etc/rc.d/init.d/opt/python</span></span><br><span class="line"><span class="comment"># description: spython</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Starting python: "</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        date +<span class="string">"! %T %a %D : Starting python ."</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line"><span class="built_in">echo</span> start</span><br><span class="line">        <span class="built_in">cd</span>  /root/finmonAgent/bin</span><br><span class="line">./finmonAgent.py &amp;</span><br><span class="line"><span class="comment">#sh /root/finmonAgent/startpy</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Done."</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        date +<span class="string">"! %T %a %D : Finished."</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        touch /var/lock/subsys/python</span><br><span class="line">        ;;</span><br><span class="line">  stop)</span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Shutting Down python Listeners: "</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        date +<span class="string">"! %T %a %D : Shutting Down python."</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"python"</span></span><br><span class="line">        killall -9 finmonAgent.py</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Done."</span></span><br><span class="line">        rm -f /var/lock/subsys/python      </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Done."</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        date +<span class="string">"! %T %a %D : Finished."</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        ;;</span><br><span class="line">  *)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Usage: python &#123; start | stop | restart &#125;"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h1 id="ect-profile"><a href="#ect-profile" class="headerlink" title="/ect/profile"></a>/ect/profile</h1><blockquote><p> /ect/profile 文件是系统默认的主启动文件，系统上每个用户登录时都会执行；</p></blockquote><h2 id="linux-配置文件（启动文件、环境文件）启动顺序"><a href="#linux-配置文件（启动文件、环境文件）启动顺序" class="headerlink" title="linux 配置文件（启动文件、环境文件）启动顺序"></a><a href="https://www.cnblogs.com/GO-NO-1/p/9084713.html" target="_blank" rel="noopener">linux 配置文件（启动文件、环境文件）启动顺序</a></h2><h3 id="1、登录shell"><a href="#1、登录shell" class="headerlink" title="1、登录shell"></a>1、登录shell</h3><p>登录shell时，linux会按一定规则读取启动几个配置文件：</p><blockquote><p>/ect/profile</p><p>$HOME/.bash_profile</p><p>$HOME/.bashrc</p><p>$HOME/.bash_login</p><p>$HOME/.profile</p></blockquote><p>其中 /ect/profile 文件是系统默认的主启动文件，系统上每个用户登录时都会执行；</p><ul><li>a、命令行登录和ssh登录，shell会按照以下顺序，运行第一个被找到的文件，余下的会被忽略：</li></ul><blockquote><p>$HOME/.bash_profile</p><p>$HOME/.bash_login</p><p>$HOME/.profile</p></blockquote><p>上面没有 $HOME/.bashrc ，因为该文件一般通过其他文件运行。</p><ul><li>b、图形界面登录，只加载 <code>/ect/profile</code>和<code>$HOME/.profile</code>，其他的会被忽略。</li></ul><p>对于 no-login shell，即图形界面打开的shell，只会读入 $HOME/.bashrc 文件，不会检查 /etc/.profile 等其他登录shell文件。</p><hr><h3 id="2、交互式shell"><a href="#2、交互式shell" class="headerlink" title="2、交互式shell"></a>2、交互式shell</h3><p>不是登录系统时启动，提供命令行提示符来输入命令。（不会访问 /etc/profile 文件，会检查 $HOME/.bashrc 文件）</p><hr><h3 id="3、非交互式shell"><a href="#3、非交互式shell" class="headerlink" title="3、非交互式shell"></a>3、非交互式shell</h3><p>系统执行脚本时所用，没有命令行提示符。</p><h2 id="linux将指令加入开机启动或加入环境变量"><a href="#linux将指令加入开机启动或加入环境变量" class="headerlink" title="linux将指令加入开机启动或加入环境变量"></a><a href="https://www.cnblogs.com/usa007lhy/p/5517036.html" target="_blank" rel="noopener">linux将指令加入开机启动或加入环境变量</a></h2><p>（2）在profile中添加PATH，这种方法对所有用户都是永久生效。</p><p>a）打开profile文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`vim /etc/profile`</span><br></pre></td></tr></table></figure><p>b）在profile文件的PATH中添加mongo指令。在PATH后面添加“:/usr/local/webserver/mongo/bin”，＝ 等号两边不能有任何空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`PATH=``$PATH``:/usr/local/webserver/mongo/bin`</span><br></pre></td></tr></table></figure><p>c）执行指令，使profile修改立即生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`source profile`</span><br></pre></td></tr></table></figure><p>（3）在当前profile中添加PATH，这种方法对当前用户永久生效。与第二步类似，将profile替换为bash_profile。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`vim ~/.bash_profile`</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`PATH=``$PATH``:/usr/local/webserver/mongo/bin`</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`source ~/.bash_profile`</span><br></pre></td></tr></table></figure><p>2，linux将指令加入开机启动</p><p>在/etc/rc.local中添加指令即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`/usr/local/webserver/mongodb/bin/mongod --dbpath=/data0/mongodb/data --logpath=/data0/mongodb/logs --logappend  --port=27017`</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;rc-local&quot;&gt;&lt;a href=&quot;#rc-local&quot; class=&quot;headerlink&quot; title=&quot;rc.local&quot;&gt;&lt;/a&gt;rc.local&lt;/h1&gt;&lt;p&gt;将脚本写在&lt;code&gt;/etc/rc.local&lt;/code&gt;文件&lt;br&gt;输入命令：&lt;cod
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://nymrli.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>codeblocks中boost库安装</title>
    <link href="https://nymrli.top/2019/03/03/codeblocks%E4%B8%ADboost%E5%BA%93%E5%AE%89%E8%A3%85/"/>
    <id>https://nymrli.top/2019/03/03/codeblocks中boost库安装/</id>
    <published>2019-03-03T11:04:59.000Z</published>
    <updated>2019-03-03T11:41:42.704Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先要提出的是，boost在VS中是可以直接导入的，但是在CB中是不行的，所以写了下这篇文章。</p></blockquote><h3 id="安装boost"><a href="#安装boost" class="headerlink" title="安装boost"></a>安装boost</h3><p>1.首先先去<a href="https://www.baidu.com/link?url=-mzs9vDM5lBRhlkshrGvlpLVpJegtSzYal_mo09Rqim&amp;wd=&amp;eqid=822838e90004acef000000055c7bb4f8" target="_blank" rel="noopener">boost官网</a>下载boost的源码 ， 选择你要下载的版本。 </p><p>2.解压（可能会耗费一段时间，小文件比较多） </p><p>3.双击运行脚本文件<strong>bootstrap.bat</strong>（引导程序），之后就生成这两个可执行文件 </p><p>我们为了能直观的看到编译boost的细节信息，进入dos (<code>win +ｒ</code>快捷键　输入cmd )</p><p>4.cd 到解压boost库的目录下 </p><p>5.命令执行<code>bjam.exe</code></p><p>4-5是没必要的，要是不想看输出的东西的话，其实双击<code>bjam.exe</code>即可</p><p><img src="/2019/03/03/codeblocks中boost库安装/1.png" alt="1"></p><p>▲.编译的时间<strong>略久</strong>（你可以干一会其他事，喝个茶） </p><p>注:  安装boost貌似需要VS的某个模块，一开始在活动室电脑上装由于没有VS，所以没装成，最后在自己的电脑上装好的。</p><hr><h3 id="codeblocks设置"><a href="#codeblocks设置" class="headerlink" title="codeblocks设置"></a>codeblocks设置</h3><p>点击<strong>settings</strong>，选择下拉菜单中的 compiler选项 </p><p>注意这里选择Search directories第三项 最下面有一个add按钮，点击将boost解压路径添加即可。 </p><p><img src="/2019/03/03/codeblocks中boost库安装/3.jpg" alt="3"></p><p>之后你可以随便写一点程序进行测试</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/lambda/lambda.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> boost::lambda;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::istream_iterator&lt;<span class="keyword">int</span>&gt; in;</span><br><span class="line">    <span class="built_in">std</span>::for_each( in(<span class="built_in">std</span>::<span class="built_in">cin</span>), in(), <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (_1 * <span class="number">3</span>) &lt;&lt; <span class="string">" "</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;首先要提出的是，boost在VS中是可以直接导入的，但是在CB中是不行的，所以写了下这篇文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装boost&quot;&gt;&lt;a href=&quot;#安装boost&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>ACM_线性筛</title>
    <link href="https://nymrli.top/2019/03/03/ACM-%E7%BA%BF%E6%80%A7%E7%AD%9B/"/>
    <id>https://nymrli.top/2019/03/03/ACM-线性筛/</id>
    <published>2019-03-03T08:57:36.000Z</published>
    <updated>2019-03-03T10:11:26.861Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是线性筛"><a href="#什么是线性筛" class="headerlink" title="什么是线性筛?"></a>什么是线性筛?</h3><blockquote><p> 筛素数是为了求得一个区间内的所有素数，而把不是素数的筛去。</p></blockquote><p>最普通的办法——判断一个数是不是素数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 1000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> check[SIZE];</span><br><span class="line">    <span class="keyword">int</span> prime[SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> ; i &lt; SIZE ; i++)&#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span> ; j &lt; <span class="built_in">sqrt</span>(i) ; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) prime[pos++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>, (<span class="keyword">double</span>)clock()/CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="普通筛素数——将不是素数的筛掉"><a href="#普通筛素数——将不是素数的筛掉" class="headerlink" title="普通筛素数——将不是素数的筛掉"></a>普通筛素数——将不是素数的筛掉</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 1000</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> checked[SIZE] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 如果是1的话就是合数</span></span><br><span class="line">    <span class="keyword">int</span> prime[SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">2</span>;i &lt; SIZE ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> ( ! checked[i] )&#123;</span><br><span class="line">           prime[pos++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>( j = <span class="number">2</span>*i; j &lt; SIZE ; j += i ) checked[j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>;i&lt; SIZE ; i++)</span><br><span class="line">        <span class="keyword">if</span> (prime[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i<span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="comment">// 素数的个数</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output : 168</span></span><br></pre></td></tr></table></figure><h3 id="普通筛素数"><a href="#普通筛素数" class="headerlink" title="普通筛素数"></a>普通筛素数</h3><ul><li>基本思想<br> 一次循环筛掉当前素数的倍数</li><li>缺点<ul><li>存在重复筛选，比如6既可以被2筛掉，又可以被3筛掉。</li><li>原因：任意一个整数可以写成一些素数的乘积 $n=p_{1}^{a} <em> p_{2}^{b} </em> p_{3}^{c}​$，其中$p1&lt;p2&lt;p3​$，这样这个数n就能被p1,p2和p3筛掉</li></ul></li><li>解决方法：按照一个数的最小素因子筛去(也就是这里的p1)就可以啦，这也就有了线性筛素数</li></ul><p><img src="/2019/03/03/ACM-线性筛/1.png" alt="1"></p><h3 id="线性筛素数"><a href="#线性筛素数" class="headerlink" title="线性筛素数"></a>线性筛素数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 1000</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> check[SIZE] = &#123;<span class="number">0</span>&#125;;<span class="comment">//元素值为0代表是素数</span></span><br><span class="line">    <span class="keyword">int</span> prime[SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> ; i &lt; SIZE ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!check[i])<span class="comment">//如果是素数</span></span><br><span class="line">            prime[pos++] = i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ★.区别在于此</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; pos &amp;&amp; i*prime[j] &lt; SIZE ; j++)&#123;</span><br><span class="line"><span class="comment">/* cl觉得可以写成for (int j = 0 ;  i*prime[j] &lt; SIZE ; j++)j &lt; pos 是多余的,</span></span><br><span class="line"><span class="comment">如果i是个素数,比如7,那么prime[x]=7,当j=x的时候必然有if (i % prime[j] == 0), 此时x=pos - 1</span></span><br><span class="line"><span class="comment">如果是个合数,比如15,那么肯定有最小素因子使得(i % prime[j] == 0),此时j &lt; pos </span></span><br><span class="line"><span class="comment">如果i是个偶数,比如8,那么if (i % prime[j] == 0)  此时在2的时候就退出了。j=0 &lt; pos</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            </span><br><span class="line">            check[i*prime[j]] = <span class="number">1</span>;<span class="comment">//筛掉</span></span><br><span class="line">            <span class="comment">//标注一</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 通过这步可以找到最小素数因子,</span></span><br><span class="line">            <span class="comment">// 比如12,那么 prime[j] 最先== prime[0] == 2 , 即找到了最小的因子2,</span></span><br><span class="line">            <span class="comment">// 那12就不是个素数,就不用再判断它是不是能被3合成 </span></span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>, (<span class="keyword">double</span>)clock()/CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本思想<br> 当前数字是$n=p_{1}^{a} <em> p_{2}^{b} </em> p_{3}^{c}​$(p1&lt;p2&lt;p3且均为素数)，一次循环筛除<em>小于等于p1的素数乘以n得到的</em>数。比如p1之前有pi,pj和pk三个素数，则此次循环筛掉<code>pi*n,pj*n,pk*n</code>和<code>p1*n</code> ，实现见代码的<strong>标注一</strong>，<code>prime</code> 里的素数都是升序排列的，<code>break</code>时的<code>prime[j]</code> 就是这里的<code>p1</code>。</p><p>优点：没有重复筛同一个数</p><ul><li>原因：按照一个数的最小素因子筛选，比如6只按2筛去</li></ul><p><img src="/2019/03/03/ACM-线性筛/3.png" alt="3"></p><p>从图上我们看到，第一列筛掉的是最小素因子是2的数，第二列筛掉的是最小素因子为3的数，第三列最小素因子是prime[2]==5 ，依次类推，可以把所有的合数都筛掉。</p><p>由于每列筛掉的合数都是 它自身的平方 ， 即 一个素数最小的因子除了1就是它本身， 所以 <strong>素数的平方</strong>的<u>最小素因子</u>就是 <strong>它本身</strong> ， 而通过<code>i % prime[j] == 0</code>就可以控制不多筛。</p><p>因为是按照最小素因子筛选，所以可以保证每个数都只会被筛一遍 ==&gt; <code>18--9x2</code> </p><p>摘自：<a href="https://www.jianshu.com/p/f16d318efe9b" target="_blank" rel="noopener">这只菜鸟总算搞懂了线性筛素数</a></p><hr><p>素数的判别挺有意思的，剪枝的方法可以见我的另一篇博客 :  <a href="https://nymrli.top/2018/10/15/%E7%B4%A0%E6%95%B0%E5%88%A4%E5%88%AB/">素数判别</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是线性筛&quot;&gt;&lt;a href=&quot;#什么是线性筛&quot; class=&quot;headerlink&quot; title=&quot;什么是线性筛?&quot;&gt;&lt;/a&gt;什么是线性筛?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; 筛素数是为了求得一个区间内的所有素数，而把不是素数的筛去。&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
      <category term="线性筛" scheme="https://nymrli.top/tags/%E7%BA%BF%E6%80%A7%E7%AD%9B/"/>
    
  </entry>
  
  <entry>
    <title>flask+nginx如何获得真实IP</title>
    <link href="https://nymrli.top/2019/03/02/flask-nginx%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E7%9C%9F%E5%AE%9EIP/"/>
    <id>https://nymrli.top/2019/03/02/flask-nginx如何获得真实IP/</id>
    <published>2019-03-02T12:53:58.000Z</published>
    <updated>2019-03-02T13:00:42.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果是通过 flask 的 <code>request.remote_addr</code>获取的 ip 都是 <code>127.0.0.1</code></p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h2><h3 id="nginx-conf中添加"><a href="#nginx-conf中添加" class="headerlink" title="nginx.conf中添加"></a><strong>nginx.conf</strong>中添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># proxy_set_header Host $host:80; </span><br><span class="line"># proxy_set_header X-Real-IP $remote_addr; </span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br></pre></td></tr></table></figure><p>全文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8888;</span><br><span class="line">    server_name 0.0.0.0;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    client_max_body_size 75M;</span><br><span class="line">    location /static&#123;</span><br><span class="line">    alias /home/apollo3d/Documents/Cl/webenv/.../static;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    include uwsgi_params;</span><br><span class="line">    uwsgi_pass 127.0.0.1:8889;</span><br><span class="line">    uwsgi_param UWSGI_SCRIPT app:app;   # 启动flask的文件:Flask的实例</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if request.headers.getlist(&quot;X-Forwarded-For&quot;):</span><br><span class="line">    ip = request.headers.getlist(&quot;X-Forwarded-For&quot;)[0]</span><br><span class="line">else:</span><br><span class="line">    ip = request.remote_addr</span><br></pre></td></tr></table></figure><p>查自:<a href="http://neue.v2ex.com/t/294472" target="_blank" rel="noopener">V2EX</a></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展:"></a>拓展:</h2><p><strong>X-Forwarded-For</strong> 可能会有多个 IP ，如果浏览器使用了代理的话<br>正确的做法应该是抓 <code>X-Real-IP</code>，或者分隔 <code>X-Forwarded-For</code>取第 1 个值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;如果是通过 flask 的 &lt;code&gt;request.remote_addr&lt;/code&gt;获取的 ip 都是 &lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方
      
    
    </summary>
    
    
      <category term="flask" scheme="https://nymrli.top/tags/flask/"/>
    
      <category term="nginx" scheme="https://nymrli.top/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>frp结合nginx实现内网web服务和tcp的转发</title>
    <link href="https://nymrli.top/2019/03/02/frp%E7%BB%93%E5%90%88nginx%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91web%E6%9C%8D%E5%8A%A1%E5%92%8Ctcp%E7%9A%84%E8%BD%AC%E5%8F%91/"/>
    <id>https://nymrli.top/2019/03/02/frp结合nginx实现内网web服务和tcp的转发/</id>
    <published>2019-03-02T10:48:23.000Z</published>
    <updated>2019-03-18T04:56:10.636Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>服务端 - 阿里云服务器: Ubuntu 16.04</p><p>客户端 - 活动室电脑 : Ubuntu 16.04</p></blockquote><h2 id="配置server端"><a href="#配置server端" class="headerlink" title="配置server端"></a>配置server端</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim frps.ini</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[common]                 #必须有的配置段，在frpc.ini和frps.ini中都必须要有</span><br><span class="line">bind_port = 7000         #服务端服务的监听端口</span><br><span class="line">vhost_http_port = 16666  #自己设定的http访问端口</span><br><span class="line">vhost_https_port = 17777 #自己设定的https访问端口</span><br></pre></td></tr></table></figure><p>保存并且退出，使用如下服务命令启动frps服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup ./frps -c ./frps.ini &amp;</span></span><br></pre></td></tr></table></figure><h2 id="client端"><a href="#client端" class="headerlink" title="client端:"></a>client端:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim frpc.ini</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[common]                #必须有的配置段，在frpc.ini和frps.ini中都必须要有</span><br><span class="line">server_addr = x.x.x.x   #服务端的公网IP（外网IP）</span><br><span class="line">server_port = 7000      #服务端服务的监听端口</span><br><span class="line"></span><br><span class="line">[web]                   #自己定义的服务转发标签（自定义，非严格）</span><br><span class="line">type = http             #定义转发类型为http（严格）</span><br><span class="line">local_port = 8800       #定义所需要转发的本地web服务的端口为8800,跟nginx设置的一致</span><br><span class="line">custom_domains = node1.xxx.com #定义访问转发服务的域名（确保使用该域名访问可以解析到有公网IP的服务端）</span><br><span class="line"></span><br><span class="line">[ssh]                   #自己定义的服务转发标签（自定义，严格）</span><br><span class="line">type = tcp              #定义转发类型为tcp（严格）</span><br><span class="line">local_ip = 127.0.0.1    #由于转发代理的ssh服务在本地，因此填写本地地址</span><br><span class="line">local_port = 22         #ssh服务本地的监听端口</span><br><span class="line">remote_port = 6000      #实际开启ssh时连接时访问的端口</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup ./frps -c ./frps.ini &amp;</span></span><br></pre></td></tr></table></figure><h2 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明"></a>解释说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[common]中的server_addr填frp服务端的ip（也就是外网主机的IP），server_port填frp服务端的bind_prot(s和c必须一致)。</span><br><span class="line">[web]中，type转发类型为http，local_port填转发的web端口，custom_domains 填 能够使用的域名.</span><br><span class="line">说到这里，域名解析，服务端建议使用阿里云，直接填写A记录，三级子域名专门申请几个，备用.</span><br><span class="line">类似：node1.xxx.com、node2.xxx.com、node3.xxx.com</span><br></pre></td></tr></table></figure><p>阿里云设置A记录:</p><p>一开始以为一个IP不能写多个A记录，后来发现是可以的。如下</p><p><img src="/2019/03/02/frp结合nginx实现内网web服务和tcp的转发/1.jpg" alt="1"></p><p>这里还要注意几点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[web]上下文中，凡是type类型为http或者同一个类型，custom_domains中填写的域名必须为不同的域名，相同域名会报错</span><br><span class="line">不同类型的type，例如[test]中的type类型为tcp，则可以使用相同域名</span><br><span class="line">简单来说type类型相同，不能使用同一个域名</span><br><span class="line">type类型不同，可以使用相同的域名。</span><br></pre></td></tr></table></figure><h2 id="测试和访问"><a href="#测试和访问" class="headerlink" title="测试和访问"></a>测试和访问</h2><h3 id="web服务访问格式为：域名-端口-具体如下"><a href="#web服务访问格式为：域名-端口-具体如下" class="headerlink" title="web服务访问格式为：域名+端口,具体如下:"></a>web服务访问格式为：域名+端口,具体如下:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://node1.xxx.com:16666 页面转到内网客户端使用nginx反向代理的web服务8800</span><br><span class="line">http://node2.xxx.com:16666 页面转到内网客户端使用nginx反向代理的web服务8801</span><br><span class="line">http://node3.xxx.com:16666 页面转到内网客户端本地的web服务端口8088</span><br></pre></td></tr></table></figure><p>▲当然要记得去阿里云的防火墙将16666端口打开才行， 然后我测试了一下，通过IP访问好像是不行的，<strong>域名:port</strong>是可以的</p><p><img src="/2019/03/02/frp结合nginx实现内网web服务和tcp的转发/3.jpg" alt="3"></p><h3 id="ssh服务远程和连接"><a href="#ssh服务远程和连接" class="headerlink" title="ssh服务远程和连接"></a>ssh服务远程和连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -Port=6000 username@x.x.x.x</span><br><span class="line">注：x.x.x.x为服务端的公网IP</span><br></pre></td></tr></table></figure><p>摘自：<a href="https://www.jianshu.com/p/0c49556e8e15" target="_blank" rel="noopener">https://www.jianshu.com/p/0c49556e8e15</a></p><hr><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="一个Server-多个Client配置"><a href="#一个Server-多个Client配置" class="headerlink" title="一个Server,多个Client配置"></a>一个Server,多个Client配置</h3><p><strong>服务器端的配置都是一样的</strong>，只需要在新添加的客户端上修改<code>frpc.ini</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[common]                #必须有的配置段，在frpc.ini和frps.ini中都必须要有</span><br><span class="line">server_addr = x.x.x.x   #服务端的公网IP（外网IP）</span><br><span class="line">server_port = 7000      #服务端服务的监听端口</span><br><span class="line"></span><br><span class="line">[web_3]                   #▲自己定义的服务转发标签（自定义，非严格）</span><br><span class="line">type = http             #定义转发类型为http（严格）</span><br><span class="line">local_port = 8800       #定义所需要转发的本地web服务的端口为8800,跟nginx设置的一致</span><br><span class="line">custom_domains = node2.xxx.com #▲定义访问转发服务的域名（确保使用该域名访问可以解析到有公网IP的服务端）</span><br><span class="line"></span><br><span class="line">[ssh_3]                   #▲自己定义的服务转发标签（自定义，严格）</span><br><span class="line">type = tcp              #定义转发类型为tcp（严格）</span><br><span class="line">local_ip = 127.0.0.1    #由于转发代理的ssh服务在本地，因此填写本地地址</span><br><span class="line">local_port = 22         #ssh服务本地的监听端口</span><br><span class="line">remote_port = 8000      #▲实际开启ssh时连接时访问的端口</span><br></pre></td></tr></table></figure><p>▲1.注意上述有▲的地方，就是修改的地方，这个配置信息的头每个客户端必须不一样。即[web_3]与[web]不一样。</p><p>▲2.<strong>SSH的话</strong>：每个客户端要配置进入ssh的端口 , 比如<code>x.x.x.x:6000</code>进入1号,<code>x.x.x.x:8000</code>进入二号</p><p>▲3.<strong>WEB服务的话</strong>：每个客户端要配置进入web的域名 , 比如<code>a.nymrli.top:8888</code>进入1号,<code>b.nymrli.top:8888</code>进入二号</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;服务端 - 阿里云服务器: Ubuntu 16.04&lt;/p&gt;
&lt;p&gt;客户端 - 活动室电脑 : Ubuntu 16.04&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;配置server端&quot;&gt;&lt;a href=&quot;#配置server端&quot; class
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="linux" scheme="https://nymrli.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>构造一个能发数据的POST请求头</title>
    <link href="https://nymrli.top/2019/03/01/%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AA%E8%83%BD%E5%8F%91%E6%95%B0%E6%8D%AE%E7%9A%84POST%E8%AF%B7%E6%B1%82%E5%A4%B4/"/>
    <id>https://nymrli.top/2019/03/01/构造一个能发数据的POST请求头/</id>
    <published>2019-03-01T14:23:52.000Z</published>
    <updated>2019-03-02T03:38:31.153Z</updated>
    
    <content type="html"><![CDATA[<p>之前学<strong>请求</strong>、<strong>响应</strong>的时候只是过了一边，大致知道有这些东西。但这次真正要用的时候却又忘了到底该如何写，错误的请求头、请求体的格式导致<code>esp8266</code>一直发送不了数据到服务器上，又重新看了遍<strong>请求request</strong>的知识，才终于搞明白</p><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="最初的写法"><a href="#最初的写法" class="headerlink" title="最初的写法:"></a>最初的写法:</h3><p>由于在<strong>esp8266</strong>上已经选择、连接好了了<strong>httpbin.org</strong>的穿透，就以为Host可以不用加了，于是产生了 <em>最初的写法</em>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /post?= HTTP/1.1</span><br></pre></td></tr></table></figure><p>▲根据玩单片机的小伙伴说必须多出一行<code>\r\n</code>，所以这边是有一行空行的</p><h4 id="结果：-400-BAD-REQUEST"><a href="#结果：-400-BAD-REQUEST" class="headerlink" title="结果： 400 BAD_REQUEST"></a>结果： <code>400 BAD_REQUEST</code></h4><p>搜索过后得知 : <u>如果使用<strong>http 1.1</strong>协议的话主机名HOST字段是必须的</u></p><h3 id="第二次写法"><a href="#第二次写法" class="headerlink" title="第二次写法:"></a>第二次写法:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST /post?= HTTP/1.1 </span><br><span class="line">Host:httpbin.org</span><br></pre></td></tr></table></figure><p>可以注意到的是Host是顶层域名，<code>/post</code>只是其中的一个路由</p><h4 id="结果-成功，这样就算可以正常发送post请求了"><a href="#结果-成功，这样就算可以正常发送post请求了" class="headerlink" title="结果: 成功，这样就算可以正常发送post请求了"></a>结果: 成功，这样就算可以正常发送post请求了</h4><p>于是下一步就是研究如何<strong>上传数据</strong></p><h3 id="第三次写法："><a href="#第三次写法：" class="headerlink" title="第三次写法："></a>第三次写法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /post?= HTTP/1.1</span><br><span class="line">Host: httpbin.org</span><br><span class="line">tempt=57</span><br></pre></td></tr></table></figure><p>于是这次都没有返回值了.</p><p>想起了表单是有形式的，于是添加了</p><ul><li><code>Content-Type: application/x-www-form-urlencoded</code><ul><li>这个形式的参数应该写成<code>a=1&amp;b=..&amp;..</code></li><li>注.如果请求网页的<strong>表单</strong>中没设置 <code>enctype</code> 属性，那么最终就会默认以 <code>application/x-www-form-urlencoded</code> 方式提交数据。</li></ul></li><li><p>如果是<code>Content-Type: application/json</code></p><ul><li>则改写成<code>{&#39;a&#39;:1 , &#39;b&#39;=.. , ...}</code></li></ul></li><li><p><code>multipart/form-data</code>，我们使用表单<strong>上传文件</strong>时，必须让 form 的 <code>enctyped</code>等于这个值，请求示例</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1 </span><br><span class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA </span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA </span><br><span class="line">Content-Disposition: form-data; name=&quot;text&quot; </span><br><span class="line"></span><br><span class="line">title </span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA </span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot; </span><br><span class="line">Content-Type: image/png </span><br><span class="line"></span><br><span class="line">PNG ... content of chrome.png ... </span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure></li><li><p><strong>说明</strong>: 首先生成了一个<code>boundary</code> 用于分割不同的字段，为了避免与正文内容重复，boundary 很长很复杂。然后 Content-Type 里指明了数据是以<code>mutipart/form-data</code> 来编码，本次请求的 boundary 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 –boundary 开始，紧接着内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 –boundary– 标示结束。关于 <code>mutipart/form-data</code>的详细定义，请前往 rfc1867 查看。 </p></li></ul></li><li><p><code>text/xml</code>，XML-RPC 是一种使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范。典型的 XML-RPC 请求是这样的： </p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1 </span><br><span class="line">Content-Type: text/xml </span><br><span class="line"></span><br><span class="line">&lt;!--?xml version=&quot;1.0&quot;?--&gt; </span><br><span class="line">&lt;methodcall&gt; </span><br><span class="line">    &lt;methodname&gt;examples.getStateName&lt;/methodname&gt; </span><br><span class="line">    &lt;params&gt; </span><br><span class="line">        &lt;param&gt; </span><br><span class="line">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt; </span><br><span class="line">         </span><br><span class="line">    &lt;/params&gt; </span><br><span class="line">&lt;/methodcall&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>但是虽然能接受到返回的结果，但是响应数据中发现<code>form</code>一直是空的，那就是参数没传过去，于是想到是不是格式的错误</p><h3 id="第四次写法"><a href="#第四次写法" class="headerlink" title="第四次写法"></a>第四次写法</h3><p>后来上网找寻了一下结果发现我遗漏了模板中的<code>\r\n\r\n</code>这行，即<em>请求头</em> 和 <em>请求体</em> 之间<strong>至少有一行换行！！！</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /get HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Connection:close</span><br><span class="line"></span><br><span class="line">a=23&amp;b=34</span><br></pre></td></tr></table></figure><p>中间的空行不能省略 ， 这样httpbin.org那边才不返回 <code>ERROR</code>或是<code>BAD_REQUEST</code></p><p>但是数据还是发送不出</p><p>于是咨询了qk大佬以后，才发现原来请求头也必须要加上<code>Content-Length:8</code>…..</p><h3 id="最终完成版"><a href="#最终完成版" class="headerlink" title="最终完成版"></a>最终完成版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /get HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Connection:close</span><br><span class="line">Content-Length:8</span><br><span class="line"></span><br><span class="line">a=23&amp;b=34</span><br></pre></td></tr></table></figure><p>哎….本来很简单的事，竟然弄了一个多小时才搞定，真只能怪自己学艺不精了。幸好的是，还是调出来了。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录:"></a>附录:</h2><h3 id="HTTP请求报文解剖"><a href="#HTTP请求报文解剖" class="headerlink" title="HTTP请求报文解剖 :"></a><strong>HTTP请求报文解剖</strong> :</h3><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>HTTP请求报文由3部分组成（<strong>请求行+请求头+请求体</strong>）： </p><p><img src="/2019/03/01/构造一个能发数据的POST请求头/4.jpg" alt="4"></p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p><img src="/2019/03/01/构造一个能发数据的POST请求头/5.jpg" alt="5"></p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p><img src="/2019/03/01/构造一个能发数据的POST请求头/6.jpg" alt="6"></p><h3 id="HttpWatch"><a href="#HttpWatch" class="headerlink" title="HttpWatch"></a>HttpWatch</h3><p><a href="http://www.httpwatch.com/download/" target="_blank" rel="noopener">HttpWatch</a>是强大的网页数据分析工具，安装后将集成到Internet Explorer工具栏中。它不用代理服务器或一些复杂的网络监控工具，就能抓取请求及响应的完整信息，包括Cookies、消息头、查询参数、响应报文等，是Web应用开发人员的必备工具。</p><p>摘自<a href="https://blog.csdn.net/u010256388/article/details/68491509/" target="_blank" rel="noopener">HTTP请求行、请求头、请求体详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前学&lt;strong&gt;请求&lt;/strong&gt;、&lt;strong&gt;响应&lt;/strong&gt;的时候只是过了一边，大致知道有这些东西。但这次真正要用的时候却又忘了到底该如何写，错误的请求头、请求体的格式导致&lt;code&gt;esp8266&lt;/code&gt;一直发送不了数据到服务器上，又重新看了
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://nymrli.top/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="计算机网络知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>为了不跑操而Excel——Orz</title>
    <link href="https://nymrli.top/2019/03/01/%E4%B8%BA%E4%BA%86%E4%B8%8D%E8%B7%91%E6%93%8D%E8%80%8CExcel%E2%80%94%E2%80%94Orz/"/>
    <id>https://nymrli.top/2019/03/01/为了不跑操而Excel——Orz/</id>
    <published>2019-03-01T07:45:07.000Z</published>
    <updated>2019-03-07T04:37:29.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3月1日"><a href="#3月1日" class="headerlink" title="3月1日"></a>3月1日</h2><h3 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h3><ul><li><p>15、16、17、18级分类——筛选、开头是（?15通配符）、制不同表</p></li><li><p>获得50m、800-1000m、身高、肺活量……各年级数据和总的平均值</p><ul><li>有的单元框内容虽然看上去像数字(数值靠右)，但其实是文本(文本靠左)，需要做处理后才能进行<strong>公示计算</strong>——分列</li><li>复杂的重复公示最好还是指明地址</li><li>翻到下一个非空单元格——<code>Ctrl + ↓ 或 ↑</code></li></ul></li></ul><h2 id="3月4日"><a href="#3月4日" class="headerlink" title="3月4日"></a>3月4日</h2><p>文字排版不支持竖版，所以弄成图片后发布的</p><p><img src="/2019/03/01/为了不跑操而Excel——Orz/安排表.jpg" alt="安排表"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3月1日&quot;&gt;&lt;a href=&quot;#3月1日&quot; class=&quot;headerlink&quot; title=&quot;3月1日&quot;&gt;&lt;/a&gt;3月1日&lt;/h2&gt;&lt;h3 id=&quot;Excel&quot;&gt;&lt;a href=&quot;#Excel&quot; class=&quot;headerlink&quot; title=&quot;Excel&quot;&gt;
      
    
    </summary>
    
    
      <category term="NJUPT" scheme="https://nymrli.top/tags/NJUPT/"/>
    
  </entry>
  
  <entry>
    <title>Flask 本地局域网连接</title>
    <link href="https://nymrli.top/2019/02/28/Flask-%E6%9C%AC%E5%9C%B0%E5%B1%80%E5%9F%9F%E7%BD%91%E8%BF%9E%E6%8E%A5/"/>
    <id>https://nymrli.top/2019/02/28/Flask-本地局域网连接/</id>
    <published>2019-02-28T10:43:55.000Z</published>
    <updated>2019-02-28T10:56:37.424Z</updated>
    
    <content type="html"><![CDATA[<p>之前都是在活动室的电脑上配好web环境，但其实发现很多比赛只要截图就够了。所以这次看了下能不能用局域网访问。一查果然flask可以通过局域网进行访问</p><h2 id="使用pycharm的朋友要这样设定"><a href="#使用pycharm的朋友要这样设定" class="headerlink" title="- 使用pycharm的朋友要这样设定"></a>- 使用pycharm的朋友要这样设定</h2><h4 id="1-run-gt-Edit-Configurations"><a href="#1-run-gt-Edit-Configurations" class="headerlink" title="1.run-&gt;Edit Configurations"></a>1.run-&gt;Edit Configurations</h4><p><img src="/2019/02/28/Flask-本地局域网连接/1.jpg" alt="1"></p><h4 id="2-Additional-options"><a href="#2-Additional-options" class="headerlink" title="2.Additional options"></a>2.Additional options</h4><p><img src="/2019/02/28/Flask-本地局域网连接/3.jpg" alt="3"></p><h4 id="3-运行run（Ctrl-shift-F10）即可"><a href="#3-运行run（Ctrl-shift-F10）即可" class="headerlink" title="3.运行run（Ctrl+shift+F10）即可"></a>3.运行run（Ctrl+shift+F10）即可</h4><p><strong>注</strong>:如果没有这样设定   pycharm启动 是不会有作用的（就像这样）地址依旧会是127.0.0.1</p><h2 id="查看自己的IP地址"><a href="#查看自己的IP地址" class="headerlink" title="- 查看自己的IP地址"></a>- 查看自己的IP地址</h2><h3 id="1-命令行方式"><a href="#1-命令行方式" class="headerlink" title="1.命令行方式"></a>1.命令行方式</h3><p><code>cmd-&gt;ipconfig-&gt;IPv4</code></p><h3 id="2-查网络与共享中心"><a href="#2-查网络与共享中心" class="headerlink" title="2.查网络与共享中心"></a>2.查网络与共享中心</h3><h2 id="打开端口"><a href="#打开端口" class="headerlink" title="打开端口"></a>打开端口</h2><p>如果还不行的话就可能是  <strong>端口没有打开</strong></p><p>解决方案:</p><p>开始中搜索 <strong>windows防火墙</strong> ，<img src="/2019/02/28/Flask-本地局域网连接/4.jpg" alt="4"></p><p><img src="/2019/02/28/Flask-本地局域网连接/6.jpg" alt="6"></p><p><img src="/2019/02/28/Flask-本地局域网连接/7.png" alt="7"></p><p><img src="/2019/02/28/Flask-本地局域网连接/8.png" alt="8"></p><p><img src="/2019/02/28/Flask-本地局域网连接/9.png" alt="9"></p><p><img src="/2019/02/28/Flask-本地局域网连接/10.png" alt="10"></p><p><img src="/2019/02/28/Flask-本地局域网连接/11.png" alt="11"></p><p>这样就大功告成了！</p><p>然后通过 <code>局域网IP：PORT</code>就可以访问到网页啦</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前都是在活动室的电脑上配好web环境，但其实发现很多比赛只要截图就够了。所以这次看了下能不能用局域网访问。一查果然flask可以通过局域网进行访问&lt;/p&gt;
&lt;h2 id=&quot;使用pycharm的朋友要这样设定&quot;&gt;&lt;a href=&quot;#使用pycharm的朋友要这样设定&quot; cl
      
    
    </summary>
    
    
      <category term="flask" scheme="https://nymrli.top/tags/flask/"/>
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>eclipse使用</title>
    <link href="https://nymrli.top/2019/02/26/eclipse%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2019/02/26/eclipse使用/</id>
    <published>2019-02-26T05:18:25.000Z</published>
    <updated>2019-02-26T06:11:23.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h1><h2 id="选择工作路径"><a href="#选择工作路径" class="headerlink" title="选择工作路径"></a>选择工作路径</h2><p><img src="/2019/02/26/eclipse使用/1.jpg" alt="1"></p><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><h3 id="一-选择File-gt-New-gt-Project"><a href="#一-选择File-gt-New-gt-Project" class="headerlink" title="一.选择File-&gt;New-&gt;Project"></a>一.选择File-&gt;New-&gt;Project</h3><p><img src="/2019/02/26/eclipse使用/3.jpg" alt="3"></p><h3 id="二-Java-gt-Java-Project"><a href="#二-Java-gt-Java-Project" class="headerlink" title="二.Java-&gt;Java Project"></a>二.Java-&gt;Java Project</h3><p><img src="/2019/02/26/eclipse使用/4.jpg" alt="4"></p><h3 id="三-工程配置"><a href="#三-工程配置" class="headerlink" title="三.工程配置"></a>三.工程配置</h3><p><img src="/2019/02/26/eclipse使用/5.jpg" alt="5"></p><p>这步可以选择创建或者不创建，目前都没有什么影响</p><p><img src="/2019/02/26/eclipse使用/6.jpg" alt="6"></p><h3 id="四-是否打开导航视图窗口"><a href="#四-是否打开导航视图窗口" class="headerlink" title="四.是否打开导航视图窗口"></a>四.是否打开导航视图窗口</h3><blockquote><p>此类项目与Java透视图相关联。</p><p>此透视图旨在支持Java开发。它提供了包资源管理器、类型层次结构和特定于java的导航操作。</p><p>您现在想打开这个透视图吗?</p></blockquote><p><img src="/2019/02/26/eclipse使用/7.jpg" alt="7"></p><p>如果按了<code>create</code>的话，就会产生该文件</p><p><img src="/2019/02/26/eclipse使用/8.jpg" alt="8"></p><p><strong>▲注意</strong> 一个工作空间中只能有一个工程有<code>main</code></p><h3 id="五-新建class"><a href="#五-新建class" class="headerlink" title="五.新建class"></a>五.新建class</h3><p><img src="/2019/02/26/eclipse使用/9.jpg" alt="9"></p><p><img src="/2019/02/26/eclipse使用/11.jpg" alt="11"></p><h2 id="编写第一个程序"><a href="#编写第一个程序" class="headerlink" title="编写第一个程序"></a>编写第一个程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package java;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果编写完成后，选择工具栏的运行。如果运行按钮<strong>无法按下</strong>、或按下无效，请检查代码。</p><ul><li>类名是否和文件名一致（在IDE下应该不会产生这样的问题）</li><li>main是否写对</li><li><code>String []args</code>要写上,不能缺省</li></ul><p>注意 . 如果发生错误 ， 会产生如下弹窗 ， 此时应该再次检查语法</p><p><img src="/2019/02/26/eclipse使用/12.jpg" alt="12"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="自动添加注释"><a href="#自动添加注释" class="headerlink" title="自动添加注释"></a>自动添加注释</h3><p>一、新建class时自动添加注释<br>windows–&gt;preference进入选项卡。<br>然后选择Java–&gt;Code Style–&gt;Code Templates，如图：</p><p><img src="/2019/02/26/eclipse使用/注释.png" alt="1"></p><p>按下Edit，然后添加一行<code>@(随意) ${date}</code>即可，${date}为固定的宏，大小写写错无效</p><p><img src="/2019/02/26/eclipse使用/hexo\source\_posts\eclipse使用\13.jpg" alt="13"></p><p>保存配置后，选中类，使用快捷键<code>alt＋shift+j</code>可以快速添加注释。</p><h4 id="新建类自动添加注释"><a href="#新建类自动添加注释" class="headerlink" title="新建类自动添加注释"></a>新建类自动添加注释</h4><p>选择Code Templates选项卡内的Code—&gt;New Java files，编辑它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$&#123;filecomment&#125;</span><br><span class="line">$&#123;package_declaration&#125;</span><br><span class="line">/**</span><br><span class="line">* @author 作者</span><br><span class="line">* @version 创建时间：$&#123;date&#125; $&#123;time&#125;</span><br><span class="line">* 类说明</span><br><span class="line">*/</span><br><span class="line">$&#123;typecomment&#125;</span><br><span class="line">$&#123;type_declaration&#125;</span><br></pre></td></tr></table></figure><p>注释内容摘自<a href="https://blog.csdn.net/weixin_36893273/article/details/55194209" target="_blank" rel="noopener">eclipse自动添加作者、日期等注释</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Eclipse&quot;&gt;&lt;a href=&quot;#Eclipse&quot; class=&quot;headerlink&quot; title=&quot;Eclipse&quot;&gt;&lt;/a&gt;Eclipse&lt;/h1&gt;&lt;h2 id=&quot;选择工作路径&quot;&gt;&lt;a href=&quot;#选择工作路径&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="IDE" scheme="https://nymrli.top/tags/IDE/"/>
    
      <category term="java" scheme="https://nymrli.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学java程序设计作业在线编程第二次作业</title>
    <link href="https://nymrli.top/2019/02/26/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A/"/>
    <id>https://nymrli.top/2019/02/26/南京邮电大学java程序设计作业在线编程第二次作业/</id>
    <published>2019-02-26T04:52:41.000Z</published>
    <updated>2019-02-26T05:43:26.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总分：100"><a href="#总分：100" class="headerlink" title="总分：100"></a>总分：100</h2><h3 id="选择题得分：60"><a href="#选择题得分：60" class="headerlink" title="选择题得分：60"></a>选择题得分：60</h3><p> \1. 表达式<code>9==8&amp;&amp;3&lt;7</code>的运算结果是（ ）</p><p>A.1</p><p>B.0</p><p>C.true</p><p>D.false</p><p>正确答案是: D</p><p> \2. 表达式<code>(3&gt;2)?8:9</code>的运算结果是（ ）</p><p>A.3</p><p>B.2</p><p>C.8</p><p>D.9</p><p>正确答案是: C</p><p> \3. 表达式<code>9-7&lt;0||11&gt;8</code>的运算结果（ ）</p><p>A.true</p><p>B.false</p><p>C.1</p><p>D.0</p><p>正确答案是: A</p><p> \4. 表达式<code>48%9+5*5-4</code>的运算结果（ ）</p><p>A.24</p><p>B.26</p><p>C.-30</p><p>D.46</p><p>正确答案是: A</p><p> \5. 表达式<code>2&gt;=5</code>的运算结果是（ ）</p><p>A.2</p><p>B.5</p><p>C.true</p><p>D.false</p><p>正确答案是: D</p><p> \6. 表达式<code>15+4*5-12</code>的运算结果是（ ）</p><p>A.15</p><p>B.23</p><p>C.12</p><p>D.-133</p><p>正确答案是: B</p><p> \7. 以下（ ）不属于复合类型的数据类型</p><p>A.类</p><p>B.字符型</p><p>C.数组</p><p>D.接口</p><p>正确答案是: B</p><p> \8. 在Java中，不属于整数类型的是（ ）</p><p>A.double</p><p>B.long</p><p>C.int</p><p>D.byte</p><p>正确答案是: A</p><p> \9. 下列变量定义中，（ ）是错误的</p><p>A.float x;y;</p><p>B.float x,y=3.14f;</p><p>C.public int i=100,j=2,k;</p><p>D.int i=100;int j=200;</p><p>正确答案是: A</p><p> \10. 以下选项中，（ ）能正确表示Java语言中的一个整型常量。</p><p>A.-8.0</p><p>B.1,000,000</p><p>C.-30</p><p>D.”456”</p><p>正确答案是: C</p><p> \11. 下面程序段执行后的结论是（ ）<code>int m=2,n=2; m+=m-=m*m; n-=n*n; n=n+n;</code></p><p>A.m=n</p><p>B.m&gt;n</p><p>C.m&lt;n</p><p>D.m与n类型不同，不能比较</p><p>正确答案是: B</p><p> \12. 执行下列程序段： <code>int no; int a=19,b=8; no=(a%b&gt;5)?a+b:a-b; System.out.println(no);</code>输出结果是：</p><p>A.2</p><p>B.9</p><p>C.11</p><p>D.27</p><p>正确答案是: C</p><p> \13. 下列语句执行后的输出结果是：( ) <code>int e=Integer.parseInt(&quot;&quot;+3+3); System.out.println(e-2.5);</code></p><p>A.30.5</p><p>B.3.5</p><p>C.332.5</p><p>D.8.5</p><p>正确答案是: A</p><p> \14. 定义a为int类型的变量并且已被赋初值，则合法的赋值语句是（ ）</p><p>A.a+1==4;</p><p>B.a+=a*8;</p><p>C.a=6.6f;</p><p>D.int a=18;</p><p>正确答案是: B</p><p> \15. 设m、n、x、y为已赋值的int变量，下列（ ）的运算结果属于非逻辑值。</p><p>A.m!=n&amp;x%y&lt;m</p><p>B.m++==m+n+x+y</p><p>C.++m*b–+y</p><p>D.m+n&gt;=x+y</p><p>正确答案是: C</p><p> \16. 以下选项中的变量都已经正确定义并且赋初值，不合法的表达式是（ ）</p><p>A.m &gt;= 6 == n &gt; 1</p><p>B.’m’ + 6</p><p>C.’m’ = 8</p><p>D.’M’ % 8</p><p>正确答案是: C</p><p> \17. 以下标识符中，（ ）是不合法的</p><p>A.inter_net</p><p>B.i_nong</p><p>C.Helo</p><p>D.*member</p><p>正确答案是: D</p><p> \18. 以下字符常量中不合法的是（ ）</p><p>A.’#’</p><p>B.’&amp;’</p><p>C.”P”</p><p>D.’囧’</p><p>正确答案是: C</p><p> \19. 下面（ ）是Java数据类型中int类型的取值范围。</p><p>A.-2<sup>7</sup>~2<sup>7</sup>-1</p><p>B.0~2<sup>16</sup>-1</p><p>C.-2<sup>15</sup>-2<sup>15</sup>-1</p><p>D.-2<sup>31</sup>~2<sup>31</sup>-1</p><p>正确答案是: D</p><p> \20. 在Java语言中，下面（ ）类型可以表示整数基本数据类型。</p><p>A.single</p><p>B.byte</p><p>C.double</p><p>D.char</p><p>正确答案是: B</p><h3 id="编程题得分：40"><a href="#编程题得分：40" class="headerlink" title="编程题得分：40"></a>编程题得分：40</h3><h4 id="2-1-是不是太胖了-得分：10-10"><a href="#2-1-是不是太胖了-得分：10-10" class="headerlink" title="2-1 是不是太胖了  得分：10 / 10"></a>2-1 是不是太胖了  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> height = scanner.nextInt();</span><br><span class="line">    <span class="keyword">double</span> result = (height-<span class="number">100</span>)*<span class="number">0.9</span>*<span class="number">2</span>;</span><br><span class="line">        System.out.printf(<span class="string">"%.1f\n"</span> ,  result);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-Say-hello-to-integers-得分：10-10"><a href="#2-2-Say-hello-to-integers-得分：10-10" class="headerlink" title="2-2 Say hello to integers  得分：10 / 10"></a>2-2 Say hello to integers  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> one = scanner.nextInt();</span><br><span class="line">    <span class="keyword">int</span> two = scanner.nextInt();</span><br><span class="line">        System.out.printf(<span class="string">"Hello, %d and %d!\n"</span> ,one,two);</span><br><span class="line">        <span class="comment">//System.out.println( "Hello, "+one+" and "+two+"!");</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h4 id="2-3-求整数的平均值-得分：10-10"><a href="#2-3-求整数的平均值-得分：10-10" class="headerlink" title="2-3 求整数的平均值  得分：10 / 10"></a>2-3 求整数的平均值  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> one = scanner.nextInt();</span><br><span class="line">    <span class="keyword">int</span> two = scanner.nextInt();</span><br><span class="line">    <span class="keyword">int</span> thr = scanner.nextInt();</span><br><span class="line">    <span class="keyword">int</span> four = scanner.nextInt();</span><br><span class="line">    <span class="keyword">int</span> sum = one+two+thr+four;</span><br><span class="line">        System.out.printf(<span class="string">"Sum=%d;Average=%.1f\n"</span> ,sum,sum/<span class="number">4.0</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-整数四则运算-得分：10-10"><a href="#2-4-整数四则运算-得分：10-10" class="headerlink" title="2-4 整数四则运算  得分：10 / 10"></a>2-4 整数四则运算  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> a = scanner.nextInt();</span><br><span class="line">    <span class="keyword">int</span> b = scanner.nextInt();</span><br><span class="line">    </span><br><span class="line">        System.out.printf(<span class="string">"%d+%d=%d\n"</span> , a,b,a + b);</span><br><span class="line">        System.out.printf(<span class="string">"%d-%d=%d\n"</span> , a,b,a - b);</span><br><span class="line">        System.out.printf(<span class="string">"%d*%d=%d\n"</span> , a,b,a * b);</span><br><span class="line">        System.out.printf(<span class="string">"%d/%d=%d\n"</span> , a,b,a / b);</span><br><span class="line">        <span class="comment">// System.out.println(a+"+"+b+"="+(a+b));</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-华氏温度转换摄氏温度-得分：10-10"><a href="#2-3-华氏温度转换摄氏温度-得分：10-10" class="headerlink" title="2-3 华氏温度转换摄氏温度  得分：10 / 10"></a>2-3 华氏温度转换摄氏温度  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> Ftem = scanner.nextInt();</span><br><span class="line">    <span class="keyword">int</span> Ctem = <span class="number">5</span>*(Ftem-<span class="number">32</span>)/<span class="number">9</span>;</span><br><span class="line">        System.out.printf(<span class="string">"Celsius="</span>+Ctem+<span class="string">""</span> );</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总分：100&quot;&gt;&lt;a href=&quot;#总分：100&quot; class=&quot;headerlink&quot; title=&quot;总分：100&quot;&gt;&lt;/a&gt;总分：100&lt;/h2&gt;&lt;h3 id=&quot;选择题得分：60&quot;&gt;&lt;a href=&quot;#选择题得分：60&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="java" scheme="https://nymrli.top/tags/java/"/>
    
      <category term="NJUPT" scheme="https://nymrli.top/tags/NJUPT/"/>
    
  </entry>
  
</feed>
