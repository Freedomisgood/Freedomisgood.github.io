<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mrli&#39;s Blog</title>
  
  <subtitle>别装作很努力，结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2020-10-24T14:01:51.941Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>Mrli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python中import的细节</title>
    <link href="https://nymrli.top/2020/10/23/Python%E4%B8%ADimport%E7%9A%84%E7%BB%86%E8%8A%82/"/>
    <id>https://nymrli.top/2020/10/23/Python中import的细节/</id>
    <published>2020-10-23T13:01:21.000Z</published>
    <updated>2020-10-24T14:01:51.941Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>防忘系列…</p></blockquote><p>Pycharm并没有IDEA一样可以设置<strong>对import进行排序</strong>以及<strong>自动消除没用到的库</strong>（要用快捷键Ctrl + Alt + O）， 并且如果导入方式不正确会 1.找不到自定义包 2.Pycharm对指定内容报错（下划线或红线）</p><h2 id="python中模块包库概念"><a class="markdownIt-Anchor" href="#python中模块包库概念"></a> <a href="https://www.cnblogs.com/mlgjb/p/7875494.html" target="_blank" rel="noopener">Python中模块，包，库概念</a></h2><p><strong>模块</strong>：就是<u>.py文件</u>，里面定义了一些函数和变量，需要的时候就可以导入这些模块。</p><p><strong>包</strong>：在模块之上的概念，为了方便管理而将文件进行打包。包目录下第一个文件便是<code>__init__.py</code>，然后是一些模块文件和子目录，假如子目录中也有<code>__init__.py</code>，那么它就是这个包的<strong>子包</strong>了。</p><p><strong>库</strong>：具有相关功能模块、包的集合。这也是Python的一大特色之一，即具有强大的标准库、第三方库以及自定义模块。</p><p><strong>标准库</strong>：就是下载安装的python里那些自带的模块，要注意的是，里面有一些模块是看不到的比如像sys模块，这与linux下的cd命令看不到是一样的情况。</p><p><strong>第三方库</strong>：就是由其他的第三方机构，发布的具有特定功能的模块。</p><p><strong>自定义模块</strong>：用户自己可以自行编写模块，然后使用。</p><p>总结: 我们<code>pip install &lt;package&gt;</code>安装的是库，库下有很多包，我们在自己的项目文件中import有以下几种用法:</p><ul><li>import numpy as np</li><li>import urllib.parse import urlencode</li><li>from lxml import HTML</li></ul><p>之前大家应该碰到过，命名自己<code>pip install xx</code>安装的是叫xx的库，但是在用的时候写的却是<code>from yy import zz</code>，明显不对应嘛。因此，其实库和包的区别还可以通过<code>setup.py</code>打包成库来看。——<a href="https://blog.csdn.net/zyf_2014/article/details/83059874" target="_blank" rel="noopener">使用setup.py打包python文件</a>； <a href="https://www.jb51.net/article/190659.htm" target="_blank" rel="noopener">Python实现打包成库供别的模块调用</a></p><p>其中比较重要的就是<strong>5.编写:setup.py</strong>，</p><blockquote><p>注意：setup.py与要打包的test_package包同在bricewulib根目录下。</p></blockquote><p>其中比较重要的几项是:name,version,packages</p><ul><li>name:描述的是你打包的文件夹名。</li><li>version描述的是文件的版本号。</li><li>packages是所有要打包的包（package），这里需要打包的是test_package包以及test_package包下的test_package。输入<code>python setup.py sdist</code>然后就能创建bricewulib库，使用test_package包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setup(</span><br><span class="line">name = &quot;bricewulib&quot;,</span><br><span class="line">version = &quot;1.0&quot;,</span><br><span class="line">packages=[&quot;test_package&quot;,&quot;test_package.test_package2&quot;]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="import推荐顺序"><a class="markdownIt-Anchor" href="#import推荐顺序"></a> import推荐顺序</h2><p>我们推荐所有的模块在 Python 模块的开头部分导入。 而且最好按照这样的顺序:</p><ol><li>Python 标准库模块</li><li>Python 第三方模块</li><li>应用程序自定义模块</li></ol><p>通过空行来分割——<a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/background/" target="_blank" rel="noopener">(Python’s Style Guide)</a>, PEP8 。</p><h2 id="python的import机制"><a class="markdownIt-Anchor" href="#python的import机制"></a> Python的import机制</h2><p>运行、编写Python代码时，一定要注意的是脚本路径和脚本执行路径，以及相对路径和绝对路径</p><p><strong>如果在项目中运用了相对路径,则一定要注意脚本执行路径</strong></p><p>假设A是B的父目录, 如我们想在A目录调用B中模块, 而B中模板是又import了A下模板, 如login: <code>from login import ftSession</code>。<strong>命令行</strong>在A路径下输入<code>python B/main.py</code>时, 会报错。因为import其实就是在搜索目录下按相对路径找的。</p><p><strong>Pycharm的坑:</strong></p><p>借鉴: <a href="https://zhuanlan.zhihu.com/p/109036573" target="_blank" rel="noopener">Python的import机制坑在哪？</a></p><blockquote><p><strong>pycharm里打出来的路径是更多的，它把项目根目录加进去了。</strong>(也可以设置: 进入设置，找到Console下的Python Console，勾选选项**“Add source roots to PYTHONPAT”** )</p></blockquote><p>查看搜索路径:<code>print(sys.path)</code></p><p><img src="/2020/10/23/Python中import的细节/Python%E4%B8%ADimport%E7%9A%84%E7%BB%86%E8%8A%82%5Csettings.jpg" alt="settings"></p><p>What’s resource root?</p><p><img src="https://pic4.zhimg.com/80/v2-99d4cf12cb731bf457b3ee503dfd5d42_720w.jpg?source=1940ef5c" alt="img"></p><p>以上导致的问题就是:</p><p><strong>pycharm中，project folder是默认的source root</strong>，当你使用import语句导入模块时，Pycharm默认在project folder中寻找；所以当你在project folder下的某个subfolder导入某个同样定义在这个subfolder中的模块时，会出现导入错误。</p><blockquote><p><strong>pycharm中的第一个文件夹，即代表项目</strong>, 当在其中再次建立文件夹时，<strong>是按package处理的</strong></p><p>如果要在这些文件夹内<strong>import其他文件，需要将完整路径导入进来</strong></p></blockquote><p>所以最终在Pycharm中导入的方式有两种: <a href="https://www.zhihu.com/question/63028700" target="_blank" rel="noopener">burning回答</a></p><ul><li>从project folder开始相对导入</li><li>将module文件夹直接定义为source root</li></ul><p><strong>pycharm在同目录下import划红线但实际可以运行</strong></p><blockquote><p>解决方法: 右键将model所在的文件夹设置为source root</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;防忘系列…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pycharm并没有IDEA一样可以设置&lt;strong&gt;对import进行排序&lt;/strong&gt;以及&lt;strong&gt;自动消除没用到的库&lt;/strong&gt;（要用快捷键Ctrl + Alt + O）
      
    
    </summary>
    
    
      <category term="防忘系列" scheme="https://nymrli.top/tags/%E9%98%B2%E5%BF%98%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>emplace_back与push_back</title>
    <link href="https://nymrli.top/2020/10/18/emplace-back%E4%B8%8Epush-back/"/>
    <id>https://nymrli.top/2020/10/18/emplace-back与push-back/</id>
    <published>2020-10-18T15:14:49.000Z</published>
    <updated>2020-10-25T07:08:58.265Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前看<a href="https://leetcode-cn.com/problems/find-common-characters/" target="_blank" rel="noopener">1002. 查找常用字符</a>题解的时候，发现有人用了emplace_back，将char转型成了string塞进了<code>vector&lt;string&gt;</code>，感觉是个骚操作。<br>之前也看过emplace_back和push_back的区别， 只不过又忘记了， 因此本次也算个防忘系列把…</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; minFreq[i]; j++) &#123;</span><br><span class="line">       <span class="comment">// emplace_back 骚操作</span></span><br><span class="line">      ans.emplace_back(<span class="number">1</span>, <span class="string">'a'</span> + i);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>在STL中，进行插入元素的时候，有insert和push两种选择方式，而在有了<u>右值引用</u>和移动语义的时候，在C++11中就提出了更高效的插入方法：emplace_back</p><p>目前的趋势是希望：使用emplace_back()取代push_back()</p><p>据统计，emplace_back()函数要比push_back()函数要快一倍。</p></blockquote><p><img src="/2020/10/18/emplace-back与push-back/emplace_back.jpg" alt="emplace_back"></p><h2 id="empalce与push的区别"><a class="markdownIt-Anchor" href="#empalce与push的区别"></a> empalce与push的区别：</h2><ul><li>push_back()函数向容器中加入一个临时对象（右值元素）时， 首先会<u>调用构造函数</u>生成这个对象，然后调用<u>拷贝构造函数</u>将这个<strong>对象的拷贝</strong>放入容器中， 最后释放临时对象，这样造成的问题是临时变量申请的资源就浪费。但是emplace_back()函数向容器中中加入<strong>临时对象</strong>， 临时对象原地构造，只有转移的过程，没有赋值或拷贝的操作（不需要触发拷贝构造）。</li></ul><h2 id="emplace_back中调用构造函数"><a class="markdownIt-Anchor" href="#emplace_back中调用构造函数"></a> emplace_back中调用构造函数</h2><p><a href="https://en.cppreference.com/w/cpp/container/vector/emplace_back" target="_blank" rel="noopener">官网demo Code</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">President</span>&#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> country;</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    President(<span class="built_in">std</span>::<span class="built_in">string</span> p_name, <span class="built_in">std</span>::<span class="built_in">string</span> p_country, <span class="keyword">int</span> p_year)</span><br><span class="line">        : name(<span class="built_in">std</span>::move(p_name)), country(<span class="built_in">std</span>::move(p_country)), year(p_year)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"I am being constructed.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 转移构造函数</span></span><br><span class="line">    President(President&amp;&amp; other)</span><br><span class="line">        : name(<span class="built_in">std</span>::move(other.name)), country(<span class="built_in">std</span>::move(other.country)), year(other.year)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"I am being moved.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 拷贝赋值操作符</span></span><br><span class="line">    President&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> President&amp; other) = <span class="keyword">default</span>;</span><br><span class="line">    <span class="comment">// 拷贝构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;President&gt; elections;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"emplace_back:\n"</span>;</span><br><span class="line">    <span class="comment">// noted: 这边并没有写成President("Nelson Mandela", "South Africa", 1994)</span></span><br><span class="line">    elections.emplace_back(<span class="string">"Nelson Mandela"</span>, <span class="string">"South Africa"</span>, <span class="number">1994</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;President&gt; reElections;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\npush_back:\n"</span>;</span><br><span class="line">    reElections.push_back(President(<span class="string">"Franklin Delano Roosevelt"</span>, <span class="string">"the USA"</span>, <span class="number">1936</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\nContents:\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (President <span class="keyword">const</span>&amp; president: elections) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; president.name &lt;&lt; <span class="string">" was elected president of "</span></span><br><span class="line">                  &lt;&lt; president.country &lt;&lt; <span class="string">" in "</span> &lt;&lt; president.year &lt;&lt; <span class="string">".\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (President <span class="keyword">const</span>&amp; president: reElections) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; president.name &lt;&lt; <span class="string">" was re-elected president of "</span></span><br><span class="line">                  &lt;&lt; president.country &lt;&lt; <span class="string">" in "</span> &lt;&lt; president.year &lt;&lt; <span class="string">".\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲看到noted标出来的地方后, 就能知道Leetcode题解中的骚操作其实就是根据T类型判断出了调用构造函数。按如下代码得证</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">a</span><span class="params">(<span class="number">1</span>, <span class="string">'a'</span>+ <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// &gt;&gt;&gt; b</span></span><br></pre></td></tr></table></figure><hr><h3 id="引申什么是stdmove"><a class="markdownIt-Anchor" href="#引申什么是stdmove"></a> 引申：什么是std::move?</h3><p>借鉴:</p><p><a href="https://blog.csdn.net/p942005405/article/details/84644069/" target="_blank" rel="noopener">c++ 之 std::move 原理实现与用法总结</a></p><blockquote><p>在C++11中，标准库在<code>&lt;utility&gt;</code>中提供了一个有用的函数std::move，std::move并不能移动任何东西，它唯一的功能是将一个<u>左值强制转化为右值引用</u>，继而可以通过右值引用使用该值，以用于移动语义。从实现上讲，std::move基本等同于一个类型转换：static_cast&lt;T&amp;&amp;&gt;(lvalue);</p></blockquote><p><a href="https://blog.csdn.net/p942005405/article/details/84644101" target="_blank" rel="noopener">左值、左值引用、右值、右值引用概念</a></p><ul><li>左值的声明符号为”&amp;”， 为了和左值区分，右值的声明符号为”&amp;&amp;”。</li><li>临时对象是作为右值处理的</li></ul><h3 id="右值引用的意义"><a class="markdownIt-Anchor" href="#右值引用的意义"></a> 右值引用的意义</h3><p>直观意义：为临时变量续命，也就是为右值续命，<u>因为右值在表达式结束后就消亡了</u>，如果想继续使用右值，那就会动用昂贵的拷贝构造函数。（关于这部分，推荐一本书《深入理解C<ins>11》）<br>右值引用是用来支持转移语义的。<u>转移语义可以将资源 ( 堆，系统对象等 ) 从一个对象转移到另一个对象，这样能够减少不必要的临时对象的创建、拷贝以及销毁，能够大幅度提高 C</u></ins> 应用程序的性能。临时对象的维护 ( 创建和销毁 ) 对性能有严重影响。<br>转移语义是和拷贝语义相对的，可以类比文件的剪切与拷贝，当我们将文件从一个目录拷贝到另一个目录时，速度比剪切慢很多。<br>通过转移语义，临时对象中的资源能够转移其它的对象里。<br>在现有的 C++ 机制中，我们可以定义拷贝构造函数和赋值函数。要实现转移语义，需要定义转移构造函数，还可以定义转移赋值操作符。对于右值的拷贝和赋值会调用转移构造函数和转移赋值操作符。如果转移构造函数和转移拷贝操作符没有定义，那么就遵循现有的机制，拷贝构造函数和赋值操作符会被调用。<br>普通的函数和操作符也可以利用右值引用操作符实现转移语义。</p><p><strong>extra：</strong></p><ol><li>std::move执行一个无条件的转化到右值。它本身并不移动任何东西；</li><li>std::forward把其参数转换为右值，仅仅在那个参数被绑定到一个右值时；</li><li>std::move和std::forward在运行时（runtime）都不做任何事。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;之前看&lt;a href=&quot;https://leetcode-cn.com/problems/find-common-characters/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1002. 查找常用字符&lt;/a&gt;题解的时候，发
      
    
    </summary>
    
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="防忘系列" scheme="https://nymrli.top/tags/%E9%98%B2%E5%BF%98%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>AutoLianliankan笔记</title>
    <link href="https://nymrli.top/2020/10/13/AutoLianliankan%E7%AC%94%E8%AE%B0/"/>
    <id>https://nymrli.top/2020/10/13/AutoLianliankan笔记/</id>
    <published>2020-10-13T10:58:47.000Z</published>
    <updated>2020-10-14T04:35:38.806Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>近来无事，又研究其了之前看到过的<a href="https://github.com/TheThreeDog/Auto-Lianliankan" target="_blank" rel="noopener">自动连连看的代码</a>，碰到了一些问题， 因此做下笔记</p></blockquote><p><strong>pywin32</strong></p><ul><li>win32gui：定位窗体，操作窗体</li><li>win32api：提供API，操作鼠标、键盘</li><li>win32con：具体API事件</li></ul><p>==&gt;对于窗体的操作使用win32gui；而对键盘、鼠标操作可以用更高级封装的库pymouse、pykeyboard；剪切板使用win32clipboard</p><h2 id="程序的设计"><a class="markdownIt-Anchor" href="#程序的设计"></a> 程序的设计：</h2><ol><li><code>getWindowPosition</code>=&gt;先确定游戏窗口位置pos，并置顶</li><li><code>getScreenImage()</code>==&gt;在窗口置顶后再截图</li><li><code>getAllSquare()</code>=&gt;找到游戏边界，<code>pos[0]+100</code>, <code>pos[1]+100</code>,即中间所有图块部分。切割出所有图案；<code>getAllSquareTypes()</code>将所有图案进行比较分类，归纳出所有不同的种类</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ndarray的切片方法，[纵坐标起始位置：纵坐标结束为止，横坐标起始位置：横坐标结束位置]</span></span><br><span class="line">square = screen_image[game_y + y * SQUARE_HEIGHT :game_y + (y+<span class="number">1</span>) * SQUARE_HEIGHT,</span><br><span class="line">                      game_x + x * SQUARE_WIDTH:game_x + (x+<span class="number">1</span>) * SQUARE_WIDTH]</span><br><span class="line"><span class="comment"># np.shape(square) == (65, 65, 3)</span></span><br><span class="line"><span class="comment"># 因为有些图片的边缘不一致造成干扰（主要是空白区域的切图），所以把每张小方块向内缩小一部分再</span></span><br><span class="line"><span class="comment"># 对所有的方块进行处理屏蔽掉外边缘 然后返回</span></span><br><span class="line"><span class="keyword">return</span> [square[SUB_LT_Y:SUB_RB_Y, SUB_LT_X:SUB_RB_X] <span class="keyword">for</span> square <span class="keyword">in</span> all_square]</span><br></pre></td></tr></table></figure><ol start="4"><li><code>getAllSquareRecord()</code>==&gt;将不同种类的图案做映射，转换成相对应的数字矩阵。</li><li><code>autoRemove(result, board_pos)</code>==&gt;执行自动消除</li><li><code>Matcher类</code>==&gt;实现游戏规则: 横消，纵消， 单拐点消除，双拐点消除。需要注意跟QQ连连看不同的是没有实现更高阶的拐点消除。</li></ol><h2 id="附录-遇到的问题"><a class="markdownIt-Anchor" href="#附录-遇到的问题"></a> 附录: 遇到的问题</h2><h3 id="列表的清空"><a class="markdownIt-Anchor" href="#列表的清空"></a> <a href="https://www.cnblogs.com/BackingStar/p/10986775.html" target="_blank" rel="noopener">列表的清空</a></h3><p>代码中有一段，在line满了后，会将line清空，再添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> len(line) == V_NUM:</span><br><span class="line">    result.append(line)</span><br><span class="line">    line = []</span><br></pre></td></tr></table></figure><p>注意： 这边的写法<code>line = []</code>是可行的。而<code>line.clear()</code>是不行的。原因是涉及<strong>内存空间引用问题</strong></p><p>原因在于: <code>list.clear()</code>会清除当前变量指向的内存地址内容，而<code>line = []</code>其实是指向了另一块地址。因此导致了最终的结果是<code>line = []</code>的result为<code>[[1,2,3...], [2, 3, 4...]]</code>；而<code>list.clear()</code>的result全为空<code>[[],[],[]]]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a= [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(id(a))</span><br><span class="line"><span class="comment"># 1785191184200</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">print(id(a))</span><br><span class="line"><span class="comment"># 1785191276296</span></span><br><span class="line">a.clear()</span><br><span class="line">print(id(a))</span><br><span class="line"><span class="comment"># 1785191276296</span></span><br></pre></td></tr></table></figure><h3 id="图片的维度问题"><a class="markdownIt-Anchor" href="#图片的维度问题"></a> 图片的维度问题:</h3><p>开源代码提供的empty.png图片规格为: 25*21像素。而25对应的为y， 21对应的为x。而需要注意的是在代码中，表达为<code>img[0: 25, 0: 21]</code></p><h3 id="getwindowrect窗口大小有误"><a class="markdownIt-Anchor" href="#getwindowrect窗口大小有误"></a> GetWindowRect窗口大小有误</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取窗体坐标位置(左上)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getGameWindowPosition</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># FindWindow(lpClassName=None, lpWindowName=None)  窗口类名 窗口标题名</span></span><br><span class="line">    window = win32gui.FindWindow(<span class="keyword">None</span>,WINDOW_TITLE)</span><br><span class="line">    <span class="comment"># 没有定位到游戏窗体</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> window:</span><br><span class="line">        print(<span class="string">'定位游戏窗体失败，5秒后重试...'</span>)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        window = win32gui.FindWindow(<span class="keyword">None</span>,WINDOW_TITLE)</span><br><span class="line">    <span class="comment"># 定位到游戏窗体</span></span><br><span class="line">    win32gui.SetForegroundWindow(window) <span class="comment"># 将窗体顶置</span></span><br><span class="line">    pos = win32gui.GetWindowRect(window)</span><br><span class="line">    print(<span class="string">"定位到游戏窗体："</span> + str(pos))</span><br><span class="line">    <span class="keyword">return</span> (pos[<span class="number">0</span>],pos[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>如图操作下来, 发现返回的pos为(408, 172)，但用spy++抓到的窗口左上角坐标为(510, 215)，研究发现横、纵都是1.25倍， 以为是分辨率的问题，所以打开了“显示设置”，结果正好看到了缩放布局是125%，因此问题可能出现在这个设置上，果然修改为100%后，程序能够正常运行。</p><p>额外，百度也找到了这个问题——<a href="https://blog.csdn.net/snfdess/article/details/104169771?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">win32gui.GetWindowRect在win10上获取窗口宽高不正确的另一种可能</a>; <a href="https://blog.csdn.net/See_Star/article/details/103940462" target="_blank" rel="noopener">win32gui.GetWindowRect() 取值不准的解决方案</a>——亲测这个无效</p><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录:</h2><p>config.py中需要注意的设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方块宽度(算上了边界)</span></span><br><span class="line">SQUARE_WIDTH = <span class="number">65</span></span><br><span class="line"><span class="comment"># 方块高度(算上了边界)</span></span><br><span class="line">SQUARE_HEIGHT = <span class="number">65</span></span><br><span class="line"><span class="comment"># ==&gt; 所以每块的大小为(65, 65, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片处理时候的左上、右下坐标：</span></span><br><span class="line"><span class="comment"># 注意  这里要么保证是21*25(因为开源代码里的empty.png提供的是21*25像素的)。如果不是（比如四个数据是10,10,50,50；也就是40*40像素），那么就把empty.png图片替换成对应大小的一张图片（比如40*40）。图片可以没用，但程序中不能</span></span><br><span class="line">SUB_LT_X = <span class="number">5</span></span><br><span class="line">SUB_LT_Y = <span class="number">5</span></span><br><span class="line"><span class="comment"># 下面两个值得小于60, 因此还有5是边界</span></span><br><span class="line">SUB_RB_X = <span class="number">26</span></span><br><span class="line">SUB_RB_Y = <span class="number">30</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;近来无事，又研究其了之前看到过的&lt;a href=&quot;https://github.com/TheThreeDog/Auto-Lianliankan&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自动连连看的代码&lt;/a&gt;，碰到了一些问
      
    
    </summary>
    
    
      <category term="GitCode" scheme="https://nymrli.top/tags/GitCode/"/>
    
  </entry>
  
  <entry>
    <title>手撕操作系统中的页面置换算法</title>
    <link href="https://nymrli.top/2020/09/21/%E6%89%8B%E6%92%95%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95/"/>
    <id>https://nymrli.top/2020/09/21/手撕操作系统中的页面置换算法/</id>
    <published>2020-09-21T11:14:25.000Z</published>
    <updated>2020-09-22T07:32:16.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统基础-内存换页算法"><a class="markdownIt-Anchor" href="#操作系统基础-内存换页算法"></a> 操作系统基础 内存换页算法</h1><p><strong>公平算法：</strong></p><ul><li>随机算法、先来先出（FIFO）算法、第二次机会算法、时钟算法</li></ul><p><strong>非公平算法：</strong></p><ul><li>最优OPT算法、NRU算法、LRU算法、工作集算法、工作集时钟算法</li></ul><p>其中LRU算法会被面试的时候要求手撕， 因此本篇就稍微介绍一下LRU和LFU两个算法， 这两个算法除了在内存换页上会被使用到，</p><h2 id="简单介绍一些算法"><a class="markdownIt-Anchor" href="#简单介绍一些算法"></a> 简单介绍一些算法：</h2><h3 id="随机更换算法"><a class="markdownIt-Anchor" href="#随机更换算法"></a> 随机更换算法</h3><p>需要替换页面的时候，产生一个随机页面号，替换与该页面对应的物理页面。</p><h3 id="先来先出fifo算法"><a class="markdownIt-Anchor" href="#先来先出fifo算法"></a> 先来先出（FIFO）算法</h3><p>更换最早进入内存的页面。其中有Belady异常现象: 缺页率随内存块数增加而增加</p><h3 id="最优opt算法"><a class="markdownIt-Anchor" href="#最优opt算法"></a> 最优OPT算法：</h3><p>最佳置换算法是由Belady于1966年提出的一种理论上的算法。其所选择的被淘汰页面将是以后永不使用的，或许是在最长（未来）时间内不再被访问的页面。<br>采用最佳置换算法通常可保证获得<u>最低的缺页率</u>。</p><p>▲由于人们目前还无法预知，一个进程在内存的若干个页面中，哪一个页面是未来最长时间内不再被访问的，因而该算法是无法实现的。</p><p>Q： 既然无法实现， 那么他的价值是什么呢？</p><p>A： 他被作为评价一个内存换页算法效率的标榜</p><h3 id="nru算法"><a class="markdownIt-Anchor" href="#nru算法"></a> NRU算法</h3><p>最近未使用算法（Not Recently Used，NRU），就是选择一个最近没有被访问的页面来替换，在所有的最近没有使用的页面里，按照各个页面的修改位和访问位的组合来进行划分。相比LRU需要较多硬件支持， NRU算法在页表项设置两个状态位：引用位R和修改位M</p><h2 id="lru"><a class="markdownIt-Anchor" href="#lru"></a> LRU</h2><h3 id="q-什么是-lru-算法"><a class="markdownIt-Anchor" href="#q-什么是-lru-算法"></a> Q、什么是 LRU 算法?</h3><p>A: Least Recently Used最近最久未使用算法，本质一种缓存淘汰策略。</p><p>计算机的缓存容量有限，如果缓存满了就要删除一些内容，给新内容腾位置。但问题是，删除哪些内容呢？我们肯定希望删掉哪些没什么用的缓存，而把有用的数据继续留在缓存里，方便之后继续使用。那么，什么样的数据，我们判定为「有用的」的数据呢？</p><p>LRU 缓存淘汰算法就是一种常用策略。LRU 的全称是 Least Recently Used，也就是说我们认为最近使用过的数据应该是是「有用的」，很久都没用过的数据应该是无用的，内存满了就优先删那些很久没用过的数据。</p><p>▲同时它也是一种换页算法， 在内存换页上需要较多的硬件支持（计数器or栈）</p><h4 id="常见的缓存算法"><a class="markdownIt-Anchor" href="#常见的缓存算法"></a> 常见的缓存算法</h4><ul><li>LRU (Least recently used) 最近最少使用，如果数据最近被访问过，那么将来被访问的几率也更高。</li><li>LFU (Least frequently used) 最不经常使用，如果一个数据在最近一段时间内使用次数很少，那么在将来一段时间内被使用的可能性也很小。<ul><li>LFU由于涉及频率, 因此在代码实现上有个计数器来统计出现次数T，在需要换页（缓存更新的时候）将替换掉最低T的key</li></ul></li><li>FIFO (Fist in first out) 先进先出， 如果一个数据最先进入缓存中，则应该最早淘汰掉。</li></ul><h3 id="lru算法与opt算法比较"><a class="markdownIt-Anchor" href="#lru算法与opt算法比较"></a> LRU算法与OPT算法比较</h3><p>OPT是从“向后看”的观点出发的，即它是依据以后各页的使用情况进行判断，是理想状况；而LRU算法则是“向前看”的，即根据各页以前的使用情况来判断，而页面过去和未来的走向之间虽无必然的联系，但也有一定的预测关系。<br>总的来说，LRU算法是一种比较好的算法。</p><h3 id="q-算法要求"><a class="markdownIt-Anchor" href="#q-算法要求"></a> Q: 算法要求</h3><p>LRU 算法实际上是让你设计数据结构：首先要接收一个 capacity 参数作为缓存的最大容量，然后实现<strong>两个 API</strong>，一个是 put(key, val) 方法存入键值对，另一个是 get(key) 方法获取 key 对应的 val，如果 key 不存在则返回 -1。其中， get(key)的时候会把这个新查询的key放到最前端</p><p>由于性能要求，get 和 put 方法必须都是 O(1) 的时间复杂度。</p><ul><li>get需要O(1) --&gt; hash</li><li>put需要O(1) --&gt;链表</li></ul><h3 id="coding实现"><a class="markdownIt-Anchor" href="#coding实现"></a> Coding实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lru;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Integer key;</span><br><span class="line">        Integer val;</span><br><span class="line">        <span class="comment">// 双向列表: 前后向节点</span></span><br><span class="line">        Node nxt, prev;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> k, <span class="keyword">int</span> v) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = k;</span><br><span class="line">            <span class="keyword">this</span>.val = v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Node&#123;"</span> +</span><br><span class="line">                    <span class="string">"key="</span> + key +</span><br><span class="line">                    <span class="string">", val="</span> + val +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DoubleList</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">        <span class="comment">// 头尾空指针</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Node head;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Node tail;</span><br><span class="line"></span><br><span class="line">        DoubleList() &#123;</span><br><span class="line">            <span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">new</span> Node();</span><br><span class="line">            <span class="keyword">this</span>.tail = <span class="keyword">new</span> Node();</span><br><span class="line">            <span class="keyword">this</span>.head.nxt = tail;</span><br><span class="line">            <span class="keyword">this</span>.tail.prev = head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将节点到头部, head-&gt;nxt = node;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> node 待插入节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">            <span class="comment">// 4个指针关系</span></span><br><span class="line">            node.nxt = head.nxt;</span><br><span class="line">            node.prev = head;</span><br><span class="line">            head.nxt.prev = node;</span><br><span class="line">            head.nxt = node;</span><br><span class="line">            <span class="comment">// 记得增加当前容器Size</span></span><br><span class="line">            <span class="keyword">this</span>.size ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">            <span class="comment">// 略过当前节点, 调整前后指针</span></span><br><span class="line">            node.nxt.prev = node.prev;</span><br><span class="line">            node.prev.nxt = node.nxt;</span><br><span class="line">            <span class="comment">// 调整容器Size</span></span><br><span class="line">            <span class="keyword">this</span>.size--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Node <span class="title">removeLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 删除尾节点, 为tail.prev</span></span><br><span class="line">            Node node = tail.prev;</span><br><span class="line">            <span class="comment">// ▲笔误写错, 查了半小时</span></span><br><span class="line">            node.nxt= tail;</span><br><span class="line">            remove(node);</span><br><span class="line">            <span class="comment">// 删除的时候还要在mp中删除索引, 因此要返回值</span></span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"DoubleList&#123;"</span> +</span><br><span class="line">                    <span class="string">"size="</span> + size +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    Map&lt;Integer, Node&gt; mp;</span><br><span class="line">    DoubleList list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        list = <span class="keyword">new</span> DoubleList();</span><br><span class="line">        mp = <span class="keyword">new</span> HashMap&lt;Integer, Node&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问过的key对应的Node需要放到队首部(最近查询)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 有相应的key则返回对应Node的val, 无则返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( mp.containsKey( key) )&#123;</span><br><span class="line">            <span class="keyword">int</span> res = mp.get(key).val;</span><br><span class="line">            <span class="comment">// ★ 把当前访问的放到队首</span></span><br><span class="line">            put(key, res);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 如果已有key, 则删除容器中原有的Node, 将其放到队首</span></span><br><span class="line"><span class="comment">     * 2. 如果没有key,</span></span><br><span class="line"><span class="comment">     *      2.1 如果容器已满, 则将队尾的排出, 再将新Node加在队首</span></span><br><span class="line"><span class="comment">     *      2.2 如果容器未满, 则直接将新Node加在队首</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node(key, value);</span><br><span class="line">        <span class="keyword">if</span> (mp.containsKey(key))&#123;</span><br><span class="line">            list.remove(mp.get(key));</span><br><span class="line">            list.addFirst(node);</span><br><span class="line">            mp.put(key, node);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( list.getSize() == capacity )&#123;</span><br><span class="line">                Node last = list.removeLast();</span><br><span class="line">                mp.remove(last.key);</span><br><span class="line">            &#125;</span><br><span class="line">            list.addFirst(node);</span><br><span class="line">            mp.put(key, node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"LRUCache&#123;"</span> +</span><br><span class="line">                <span class="string">"capacity="</span> + capacity +</span><br><span class="line">                <span class="string">", mp="</span> + mp.toString() +</span><br><span class="line">                <span class="string">", list="</span> + list.toString() +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LeetCode代码检验 : <a href="https://leetcode-cn.com/problems/lru-cache/" target="_blank" rel="noopener">146. LRU缓存机制</a></p><p>算法实现参考： <a href="https://www.bilibili.com/video/BV18A411i7ui?from=search&amp;seid=15979179417437329877" target="_blank" rel="noopener">LRU算法：手把手带你实现一个干啥都快的快乐算法</a>， 思路挺清晰的， 只不过只有LRUCache的代码， 需要自己实现双向链表</p><h2 id="lfu"><a class="markdownIt-Anchor" href="#lfu"></a> LFU</h2><p>LFU (Least frequently used) 最不经常使用，如果一个数据在最近一段时间内使用次数很少，那么在将来一段时间内被使用的可能性也很小。</p><ul><li>LFU由于涉及频率, 因此在代码实现上有个计数器来统计出现次数T，在需要换页（缓存更新的时候）将替换掉最低T的ke</li></ul><blockquote><p>算法实现思路：</p><ul><li>O(1)查询： hash+</li><li>O(1)修改+频率排序：set</li></ul></blockquote><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><p>参考链接:</p><ul><li><a href="https://www.bilibili.com/video/BV1k54y1D7RB?from=search&amp;seid=6126947713407811317" target="_blank" rel="noopener">【1】简单易懂，包你学会！ | 操作系统 | 页面置换</a> ——  认知性了解</li><li><a href="https://www.bilibili.com/video/BV1xt4y1173x?from=search&amp;seid=6126947713407811317" target="_blank" rel="noopener">操作系统-页面置换<em>算法</em>（OPT、FIFO、LRU、</a>——换页过程</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;操作系统基础-内存换页算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#操作系统基础-内存换页算法&quot;&gt;&lt;/a&gt; 操作系统基础 内存换页算法&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;公平算法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机算
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>docsify使用记录</title>
    <link href="https://nymrli.top/2020/09/15/docsify%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://nymrli.top/2020/09/15/docsify使用记录/</id>
    <published>2020-09-15T02:30:43.000Z</published>
    <updated>2020-09-15T07:45:46.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docsify-是什么"><a class="markdownIt-Anchor" href="#docsify-是什么"></a> <em>Docsify</em> 是什么？</h2><p><em>Docsify</em> 一个神奇的<strong>动态生成文档网站的工具</strong>。<br>不同于 GitBook、Hexo 的地方是它不会生成将 <code>.md</code> 转成 <code>.html</code> 文件，所有转换工作都是<u>在运行时进行</u>。</p><p>较多使用的场景是GitHub中对某一开源程序的文档介绍，由于docsify的主题较为好看， 且轻量、易使用，因此使用也较为广泛。同时它也支持很多插件来丰富功能。但跟Hexo相比，个人感官上Hexo更适合做个人博客， 而docsify更适合专门来写程序的介绍文档</p><hr><blockquote><p>春招的时候背了很多的面经， 只不过秋招回头来看基本上又都记不太清了，于是想自己整理些面经笔记啥的。 之前也试过在个人博客上发表， 只不过感觉还是不适合阅读，因此正好想起来之前了解过Docsify，因此这次打算在写面经的时候顺便也练习、熟练下Docsify。</p></blockquote><p><a href="https://docsify.js.org/#/zh-cn/quickstart" target="_blank" rel="noopener">官方文档快速使用</a>介绍的很全了，先贴个官方文档。</p><h2 id="start-to-run-it"><a class="markdownIt-Anchor" href="#start-to-run-it"></a> Start to Run it</h2><p>1.安装docsify工具:<code>npm i docsify-cli -g</code><br>2.初始化项目: <code>docsify init [./docs]</code> , []中内容为指定生成目录, 不填默认为当前目录<br>初始化成功后，可以看到生成 目录下创建的几个文件</p><ul><li><code>index.html</code> 入口文件、插件等配置都写在这</li><li><code>README.md</code> 会做为<u>主页内容</u>渲染，编辑即可更新文档内容</li><li><code>.nojekyll</code> 用于阻止 GitHub Pages 忽略掉下划线开头的文件</li></ul><p>3.预览效果： <code>docsify serve [docs]</code>， 通过运行 <code>docsify serve</code> 启动一个本地服务器，可以方便地实时预览效果。默认访问地址 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000</a> 。</p><hr><h2 id="多页文档"><a class="markdownIt-Anchor" href="#多页文档"></a> <a href="https://docsify.js.org/#/zh-cn/more-pages?id=%E5%A4%9A%E9%A1%B5%E6%96%87%E6%A1%A3" target="_blank" rel="noopener">多页文档</a></h2><h2 id="定制化"><a class="markdownIt-Anchor" href="#定制化"></a> <a href="https://docsify.js.org/#/zh-cn/configuration" target="_blank" rel="noopener">定制化</a></h2><ul><li><p>自定义导航栏: 设置为 <code>true</code> 后会加载 <code>_navbar.md</code> 文件，也可以自定义文件名。</p></li><li><p>自定义侧边栏: 设置为 <code>true</code> 后会加载 <code>_sidebar.md</code> 文件，也可以自定义文件名。</p></li><li><p>启用<a href="https://docsify.js.org/#/zh-cn/cover" target="_blank" rel="noopener">封面页</a>: 开启后是加载 <code>_coverpage.md</code> 文件，也可以自定义文件名。</p></li><li><h3 id="markdown"><a class="markdownIt-Anchor" href="#markdown"></a> <a href="https://docsify.js.org/#/zh-cn/configuration?id=markdown" target="_blank" rel="noopener">markdown</a>配置</h3></li></ul><h2 id="插件"><a class="markdownIt-Anchor" href="#插件"></a> 插件</h2><p>index.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.$docsify = &#123;</span><br><span class="line">        name: <span class="string">'Java工程师成神之路'</span>,</span><br><span class="line">        repo: <span class="string">'https://github.com/hollischuang/toBeTopJavaer'</span>,</span><br><span class="line">          loadSidebar: <span class="literal">true</span>,</span><br><span class="line">        subMaxLevel: <span class="number">3</span>,</span><br><span class="line">        autoHeader: <span class="literal">true</span>,</span><br><span class="line">        search: &#123;</span><br><span class="line">            paths: <span class="string">'auto'</span>,</span><br><span class="line">            placeholder: <span class="string">'🔍 搜索 '</span>,</span><br><span class="line">            noData: <span class="string">'哎呀，没有找到呀！ '</span>,</span><br><span class="line">            <span class="comment">// Headline depth, 1 - 6</span></span><br><span class="line">            depth: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        copyCode: &#123;</span><br><span class="line">            buttonText : <span class="string">'复制'</span>,</span><br><span class="line">            errorText  : <span class="string">'Error'</span>,</span><br><span class="line">            successText: <span class="string">'OK!'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        pagination: &#123;</span><br><span class="line">            previousText: <span class="string">'上一章'</span>,</span><br><span class="line">            nextText: <span class="string">'下一章'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        coverpage: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="/</span><span class="regexp">/unpkg.com/</span>docsify/lib/docsify.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;!--代码块复制插件--&gt;</span></span><br><span class="line"><span class="string">&lt;script src="</span><span class="comment">//unpkg.com/docsify-copy-code"&gt;&lt;/script&gt;</span></span><br><span class="line">&lt;!-- 图片缩放插件 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cyc-1256109796.cos.ap-guangzhou.myqcloud.com/zoom-image.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!--搜索插件--&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/docsify/4.5.9/plugins/search.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!--语法高亮插件--&gt;</span><br><span class="line">&lt;script src=<span class="string">"//unpkg.com/prismjs/components/prism-java.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"//unpkg.com/prismjs/components/prism-bash.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!--分页插件--&gt;</span><br><span class="line">&lt;script src=<span class="string">"//unpkg.com/docsify-pagination/dist/docsify-pagination.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!--统计访问量插件--&gt;</span><br><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录：</h2><p><a href="https://github.com/hollischuang/toBeTopJavaer" target="_blank" rel="noopener">To Be Top Javaer - Java工程师成神之路</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;docsify-是什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#docsify-是什么&quot;&gt;&lt;/a&gt; &lt;em&gt;Docsify&lt;/em&gt; 是什么？&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Docsify&lt;/em&gt; 一个神奇的&lt;strong&gt;动态生成文
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据结构——单调栈</title>
    <link href="https://nymrli.top/2020/09/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <id>https://nymrli.top/2020/09/08/数据结构——单调栈/</id>
    <published>2020-09-08T11:25:38.000Z</published>
    <updated>2020-09-23T01:08:12.742Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>秋季PAT的第一题就是单调栈，之前没怎么学过， 因此这次专门学习做下笔记。</p></blockquote><h1 id="单调栈monotone-stack"><a class="markdownIt-Anchor" href="#单调栈monotone-stack"></a> 单调栈Monotone Stack</h1><h2 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念:</h2><p>从行为上看，它不仅仅是用存储与访问受限的栈，而是一种<strong>辅助工具</strong>，用于检测数据的单调性变化并<strong>作出反应</strong>（表现: 当入栈元素会影响栈总体单调性时，要出栈一些元素以维持单调性）</p><h2 id="场景"><a class="markdownIt-Anchor" href="#场景"></a> 场景：</h2><ul><li>向左or向右找到第一个稍大（小）的元素、其索引下标；</li><li>确定某条件（单调）下的<strong>最长区间</strong>；</li><li>确定<strong>区间</strong>构成的<strong>极值</strong>，如max f（la，b]）；</li></ul><h2 id="point"><a class="markdownIt-Anchor" href="#point"></a> Point：</h2><p>单调递增栈: 指栈内元素的<strong>出栈序列</strong><u>递增</u>（或递减），而<strong>栈内元素</strong>是递减（或递增），即当元素比栈顶小的时候入栈。因此需要输出下一个最大的元素。</p><p>当然也有人是直接根据栈内元素大小关系来区别， 比如栈内元素递减就叫做递减栈。</p><p>此外没有双向栈的存在。</p><h2 id="核心思想"><a class="markdownIt-Anchor" href="#核心思想"></a> 核心思想</h2><p>在元素Y入栈的时候会跟栈顶元素X<strong>比较</strong>， 如果Y比栈内所有元素Xs都大的话，就可以拿到栈里所有的元素即区间。关键是这个比较， 就可以找到第一个满足要求的数据。</p><p>e.g.有列表[1, 3, 2, 0, 7]，从左向右遍历，当遍历为7时栈里有[3, 2, 0]，此时入栈元素为7， 能得到==&gt;那么对于0来说，右边最大的就是当前入栈元素7， 左边最小的就是栈内下一个元素2。而对3来说，此时3上边的元素就都是比3小的元素们。</p><h2 id="code模板"><a class="markdownIt-Anchor" href="#code模板"></a> Code模板：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFirstMax</span><span class="params">(nums: List[int])</span>:</span></span><br><span class="line">    <span class="comment"># 站内元素递减栈， 输出序列递增</span></span><br><span class="line">    stack = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        val = nums[i]</span><br><span class="line">        <span class="keyword">if</span> stack <span class="keyword">and</span> val &gt; stack[<span class="number">-1</span>]:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="comment"># 入栈操作在之前逻辑都执行完之哦吼，最后再入栈</span></span><br><span class="line">        stack.append(val)</span><br></pre></td></tr></table></figure><p>这种写法， 主要是运用的stack.pop元素</p><h2 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h2><h3 id="leetcode496"><a class="markdownIt-Anchor" href="#leetcode496"></a> Leetcode#496：</h3><blockquote><p>单调栈</p></blockquote><h3 id="leetcode-496-下一个更大元素-i"><a class="markdownIt-Anchor" href="#leetcode-496-下一个更大元素-i"></a> <a href="https://leetcode-cn.com/problems/next-greater-element-i/" target="_blank" rel="noopener">Leetcode #496. 下一个更大元素 I</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        hash_dict = dict()</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums2:</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> i &gt; stack[<span class="number">-1</span>]:</span><br><span class="line">                <span class="comment"># 在原有序列中比栈顶元素大的就是当前入栈元素i</span></span><br><span class="line">                hash_dict[stack.pop()] = i</span><br><span class="line">            stack.append(i)</span><br><span class="line">        <span class="keyword">return</span> [hash_dict.get(i,<span class="number">-1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> nums1]</span><br></pre></td></tr></table></figure><h3 id="leetcode962-最大宽度坡"><a class="markdownIt-Anchor" href="#leetcode962-最大宽度坡"></a> Leetcode<a href="https://leetcode-cn.com/problems/maximum-width-ramp/" target="_blank" rel="noopener">#962. 最大宽度坡</a>：</h3><blockquote><p>单调栈</p><p>Q： 为什么想到了单调栈？</p><p>A：参看题解：首先把A数组中的以A[0]开头的递减序列抽取出来，我们最后要求的最大的宽度坡一定是以这个序列中的某一个i为坡底的，我们反证一下</p><p>假设存在某个元素位置k不存在于上面的递减序列中，且有最大宽度j-k，这也就说明k位置的元素一定是小于k前面所有的元素的，否则就会有更长的宽度，但是既然k小于前面所有的元素，那么k就一定会被加入到序列中，与假设矛盾，所以不存在k，解一定存在递减序列中</p><p>这样的话我们可以逆向遍历数组，每次遇到元素大于栈顶的就可以计算宽度，然后将栈顶弹出，因为是逆序遍历的，所以这个宽度一定是栈顶这个坡底i能形成的最大宽度了， 逆序遍历再往前的话即使大于这个栈顶，形成的宽度也只会减小，所以这个栈顶是可以直接pop出去的，我们遍历所有的坡底求最大值就行了，时间复杂度O(N)</p><p>作者：resolmi  <a href="https://leetcode-cn.com/problems/maximum-width-ramp/solution/java-dan-diao-zhan-er-fen-jie-fa-chang-shi-jie-shi/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-width-ramp/solution/java-dan-diao-zhan-er-fen-jie-fa-chang-shi-jie-shi/</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Mrli</span></span><br><span class="line"><span class="comment"> * @Date: 2020-09-14 10:16:57</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-09-14 11:03:29</span></span><br><span class="line"><span class="comment"> * @Description: </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxWidthRamp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt; <span class="keyword">int</span> &gt; st;</span><br><span class="line">    <span class="keyword">int</span> len = A.size();</span><br><span class="line">    <span class="comment">// 维护一个递减栈</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (st.empty() || A[i] &lt;= A[st.top()]) st.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>( i &gt; ans)&#123;</span><br><span class="line">        <span class="comment">// 根据单调栈的含义， 此时入栈A[i]， 可以得到 st.top() 右边比其大的为A[i]， 同时栈里也都是比A[i]小的元素</span></span><br><span class="line">        <span class="keyword">while</span>( !st.empty() &amp;&amp; A[st.top()] &lt;= A[i] )&#123;</span><br><span class="line">            <span class="comment">// printf("A[%d]:%d A[%d]:%d\n", st.top(), A[st.top()], i, A[i] );</span></span><br><span class="line">            ans = max(ans, i - st.top());</span><br><span class="line">            st.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        i --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A = &#123;<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> ans = maxWidthRamp(A);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="leetcode1124"><a class="markdownIt-Anchor" href="#leetcode1124"></a> Leetcode#1124：</h3><blockquote><p>前缀和+单调栈</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">longestWPI</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; hours)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = hours.size();</span><br><span class="line">    <span class="comment">// hash</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( hours[i] &gt; <span class="number">8</span>) hours[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> hours[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1, 1, -1, -1, -1, -1, 1</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sum(len + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++ )&#123;</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + hours[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">    <span class="comment">//  顺序生成单调栈，栈中元素从第一个元素开始严格单调递减，最后一个元素肯定是数组中的最小元素所在位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len; i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( st.empty() || sum[i] &lt; sum[st.top()]) </span><br><span class="line">            st.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/** 常规写法： */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span>( !st.empty() &amp;&amp; sum[st.top()] &lt; sum[i])&#123;</span><br><span class="line">            ans = max(ans, i - st.top());</span><br><span class="line">            st.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 写法二: */</span></span><br><span class="line">    <span class="keyword">int</span> i = len;</span><br><span class="line">    <span class="comment">//  倒序扫描数组，求最大长度坡</span></span><br><span class="line">    <span class="keyword">while</span>( i &gt; ans)&#123;</span><br><span class="line">        <span class="comment">// sum[st.top()] &lt; sum[i]实际就是找到 sum &gt; 0, 即后面索引j的sum - 前面索引i的sum &gt; 0</span></span><br><span class="line">        <span class="keyword">while</span>( !st.empty() &amp;&amp; sum[st.top()] &lt; sum[i])&#123;</span><br><span class="line">            ans = max(ans, i - st.top());</span><br><span class="line">            st.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        i -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A = &#123;<span class="number">9</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> ans = longestWPI(A);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此题单调栈具体怎么来的可以看题解： https://leetcode-cn.com/problems/longest-well-performing-interval/solution/can-kao-liao-ji-ge-da-shen-de-ti-jie-zhi-hou-zong-/</span></span><br></pre></td></tr></table></figure><p>参看：<a href="https://www.bilibili.com/video/BV1Pp4y1e7o5" target="_blank" rel="noopener">Bilibili【带写03】python前缀和与单调栈.mp4</a></p><h3 id="单调队列"><a class="markdownIt-Anchor" href="#单调队列"></a> 单调队列</h3><h4 id="p1886-滑动窗口-模板单调队列"><a class="markdownIt-Anchor" href="#p1886-滑动窗口-模板单调队列"></a> <a href="https://www.luogu.com.cn/problem/P1886" target="_blank" rel="noopener">P1886 滑动窗口 /【模板】单调队列</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个写法可以借鉴一下</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> id;        <span class="comment">// 下标</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1; <span class="comment">// 最小</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2; <span class="comment">// 最大</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">deque</span>&lt;node&gt; q1;</span><br><span class="line"><span class="built_in">deque</span>&lt;node&gt; q2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        node nd;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; nd.val;</span><br><span class="line">        nd.id = i;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 如果当前元素小于栈顶元素， 则栈顶元素出栈</span></span><br><span class="line">        <span class="comment">// --&gt;获得栈顶小于当前预算</span></span><br><span class="line">        <span class="keyword">while</span>( !q1.empty() &amp;&amp; nd.val &lt;= q1.back().val)&#123;</span><br><span class="line">             q1.pop_back();      </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>( !q2.empty() &amp;&amp; nd.val &gt;= q2.back().val) q2.pop_back();</span><br><span class="line">        q1.push_back(nd);</span><br><span class="line">        q2.push_back(nd);</span><br><span class="line">        <span class="keyword">if</span> ( i - q1.front().id + <span class="number">1</span> &gt; k) q1.pop_front();                 <span class="comment">// 如果栈底元素已经超出边界则出栈</span></span><br><span class="line">        <span class="keyword">if</span> ( i - q2.front().id + <span class="number">1</span> &gt; k) q2.pop_front();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k)&#123;        <span class="comment">// 当索引满足窗口大小的时候才进行操作</span></span><br><span class="line">            v1.push_back(q1.front().val);                  <span class="comment">// 栈底元素为当前k窗口中最小的</span></span><br><span class="line">            v2.push_back(q2.front().val);                  <span class="comment">// 栈底元素为当前k窗口中最大的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = v1.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; v1[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    len = v2.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; v2[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="holiday"><a class="markdownIt-Anchor" href="#holiday"></a> holiday</h4><p>题目描述</p><p>经过几个月辛勤的工作，FJ决定让奶牛放假。</p><p>假期可以在1…N天内任意选择一段（需要连续），每一天都有一个享受指数W。但是奶牛的要求非常苛刻，假期不能短于P天，否则奶牛不能得到足够的休息；假期也不能超过Q天，否则奶牛会玩的腻烦。</p><p>FJ想知道奶牛们能获得的最大享受指数。</p><p><strong>输入格式</strong></p><p>第一行：N,P,Q.</p><p>第二行：N个数字，中间用一个空格隔开。</p><p><strong>输出格式</strong></p><p>一个整数，奶牛们能获得的最大享受指数。</p><p>样例数据</p><p><em>input</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 2 4</span><br><span class="line">-9 -4 -3 8 -6</span><br></pre></td></tr></table></figure><p><em>output</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>Hint 选择第3-4天，享受指数为-3+8=5。</p><p><strong>数据规模与约定</strong></p><p>50% 1≤N≤10000，100% 1≤N≤100000</p><p>时间限制：1s， 空间限制：256MB</p><p>思路：</p><blockquote><p>用前缀和处理前i天的指数和<br>其实就是从P的位置开始枚举，每次把i-P压入队列，如果<strong>i-Q大于队首元素的位置</strong>，弹出队首<br>每次取出队首让ans=max（sum[i]-sum[Day.front()]）<br>最后输出ans</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 9999999999</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum[<span class="number">100300</span>];</span><br><span class="line"><span class="keyword">int</span> n,p,q;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=-INF;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; Day;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"holiday.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">// freopen("holiday.out","w",stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;p,&amp;q);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line">    <span class="comment">// 前缀和</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x);</span><br><span class="line">sum[i]=sum[i<span class="number">-1</span>]+x;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=p;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> nowIndex = i - p;</span><br><span class="line">        <span class="comment">// 指数和小的放前面</span></span><br><span class="line"><span class="keyword">while</span>(!Day.empty() &amp;&amp; sum[nowIndex] &lt; sum[Day.back()] ) Day.pop_back();</span><br><span class="line">Day.push_back(nowIndex);</span><br><span class="line">        <span class="comment">// 实际上应该理解为 当前日期i - 队首的日期 &gt; Q天, 则让pop_front </span></span><br><span class="line"><span class="keyword">while</span>(!Day.empty() &amp;&amp; i - q &gt; Day.front())  Day.pop_front();</span><br><span class="line">        <span class="comment">// sum[i] - sum[Day.front()]  为索引i~Day.front()这几天的指数和</span></span><br><span class="line">ans=max(ans, sum[i]-sum[Day.front()]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结: <strong>单调队列</strong>对于处理线性<strong>滑动区间最值</strong>可谓游刃有余</p><p>借鉴: <a href="https://blog.csdn.net/jwg2732/article/details/107879262?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-1-107879262.nonecase&amp;utm_term=%E4%BB%80%E4%B9%88%E5%8F%AB%E5%81%9A%E5%8D%95%E8%B0%83%E6%A0%88#1.%E5%8D%95%E8%B0%83%E6%A0%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener">数据结构之单调队列与单调栈</a></p><h3 id="单调栈"><a class="markdownIt-Anchor" href="#单调栈"></a> 单调栈</h3><h4 id="p2866-usaco06novbad-hair-day-s"><a class="markdownIt-Anchor" href="#p2866-usaco06novbad-hair-day-s"></a> <a href="https://www.luogu.com.cn/problem/P2866" target="_blank" rel="noopener">P2866 [USACO06NOV]Bad Hair Day S</a></h4><p>根据题目细品: 第N头牛站最前面, 第1头站最后面, 然后如果Hi &gt; Hn, 则能看到。要求累加第i头牛能看到前面牛的头发数， 即可以理解为第i头牛往前看， 找到比它大的Hi或者边界（边界可以看做为Hi=0的）。===&gt; 输入样例从左往右找比当前元素大的第一个元素，单调递减栈–&gt;正常for i = 0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cow</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">stack</span>&lt;cow&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// C_i的高度</span></span><br><span class="line">       <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">       <span class="comment">// 找到比当前元素大的一个元素， 期间小的都累计</span></span><br><span class="line">       <span class="keyword">while</span>( !st.empty() &amp;&amp; tmp &gt;= st.top().height ) &#123;</span><br><span class="line">           ans += ( i - st.top().id - <span class="number">1</span>);</span><br><span class="line">           st.pop();</span><br><span class="line">       &#125;</span><br><span class="line">       st.push(&#123;i, tmp&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 到最后的时候， 剩下的递减的都是前面没有比自己高的牛了， 如样例最后剩5&lt;-6， 那么6(2)前面没数字了， 所以为0， 5前面(12)只有6了，且6的2高&lt;5的12高， 因此6-5=1有1头牛</span></span><br><span class="line">    <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> now = st.top().id;</span><br><span class="line">        st.pop();</span><br><span class="line">        ans += (n - now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路2：</p><ol><li>每次输入一头牛的身高，找比这头牛矮的，出栈</li><li><strong>剩下的牛皆可以看到这只牛</strong></li><li>ans值加等于栈中牛的个数</li><li>这头牛入栈</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,t;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans; <span class="comment">//注意要开long long </span></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">        <span class="comment">// 将栈内删到全都是比t的高的</span></span><br><span class="line"><span class="keyword">while</span> (!a.empty() &amp;&amp; t &gt;= a.top() )  </span><br><span class="line">a.pop();</span><br><span class="line"><span class="comment">// 那么栈里的元素都能看到i</span></span><br><span class="line">ans+=a.size();</span><br><span class="line">        <span class="comment">// 注意： 先size后push</span></span><br><span class="line">a.push(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="气温-列表"><a class="markdownIt-Anchor" href="#气温-列表"></a> <a href="https://blog.csdn.net/fyydhsw/article/details/102830770" target="_blank" rel="noopener">气温 列表</a> <a href="https://leetcode-cn.com/problems/daily-temperatures/" target="_blank" rel="noopener">#739 每日温度</a></h4><p>从左往右找比当前元素大的–&gt;如果当前元素比栈顶元素大，那么栈顶元素右边比其第一个大的元素就是当前入栈元素—&gt;单调递减栈（从栈底到栈顶递减）–&gt;<code>val &gt; st.top()</code>，正常for i = 0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ans[maxn];  <span class="comment">// 答案</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">temperature</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">73 74 75 71 69 72 76 73</span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">1 1 4 2 1 1 0 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;temperature&gt; st;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">       <span class="built_in">cin</span> &gt;&gt; val ;</span><br><span class="line">       <span class="keyword">while</span> ( !st.empty() &amp;&amp; val &gt; st.top().tmp )&#123;</span><br><span class="line">           ans[st.top().id] = i - st.top().id ; </span><br><span class="line">           st.pop();</span><br><span class="line">       &#125;</span><br><span class="line">       st.push(&#123;i, val&#125;);      <span class="comment">// 塞进去的是索引</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt;ans[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆序写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ans[maxn];  <span class="comment">// 答案</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">temperature</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    temperature()&#123;&#125;</span><br><span class="line">    temperature(<span class="keyword">int</span> _id, <span class="keyword">int</span> _tmp): id(_id), tmp(_tmp)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">73 74 75 71 69 72 76 73</span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">1 1 4 2 1 1 0 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;temperature&gt; st;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">       <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = v[i];</span><br><span class="line">       <span class="keyword">while</span>( !st.empty() &amp;&amp; val &gt;= st.top().tmp) st.pop();</span><br><span class="line">        ans[i] = st.empty()? <span class="number">0</span> : st.top().id - i;</span><br><span class="line">        st.push(temperature(i, val));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt;ans[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="p5788-模板单调栈"><a class="markdownIt-Anchor" href="#p5788-模板单调栈"></a> <a href="https://www.luogu.com.cn/problem/P5788" target="_blank" rel="noopener">P5788 【模板】单调栈</a></h4><blockquote><p>模板写法</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ▲不知道为啥必须点开洛谷的O2优化才不会被卡后面4个点</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    v.resize(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">stack</span>&lt; pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; st;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v[i]);</span><br><span class="line">       <span class="keyword">while</span>( !st.empty() &amp;&amp; v[i] &gt; v[st.top().first])&#123;</span><br><span class="line">           ans[ st.top().first ] = i;</span><br><span class="line">           st.pop();</span><br><span class="line">       &#125;</span><br><span class="line">       st.push(&#123;i, v[i]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 遍历完的时候栈里其实还有元素</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "size: "&lt;&lt;st.size() &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( i == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for遍历倒着写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span> ; i--) &#123;</span><br><span class="line">    <span class="keyword">while</span>( !st.empty() &amp;&amp; v[i] &gt;= v[st.top().first])&#123;</span><br><span class="line">        st.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    ans[ i ] = st.empty() ? <span class="number">0</span>: st.top().first;</span><br><span class="line">    st.push(&#123;i, v[i]&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>// 找的题解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">3000001</span>],b[<span class="number">3000001</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; q;<span class="comment">//开一个STL的栈 栈里面存的是数的下标即位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)   <span class="built_in">cin</span>&gt;&gt;a[i];<span class="comment">//输入</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty() <span class="keyword">and</span> a[q.top()]&lt;=a[i])<span class="comment">//查找第一个大于a[i]的数 </span></span><br><span class="line">q.pop();         <span class="comment">//否则就直接出栈</span></span><br><span class="line"><span class="keyword">if</span>(q.empty())        <span class="comment">//如果最后没有比a[i]大的数</span></span><br><span class="line">   b[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        b[i]=q.top();        <span class="comment">//否则就记录下来</span></span><br><span class="line">        q.push(i);           <span class="comment">//将i入栈</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cout</span>&lt;&lt;b[i]&lt;&lt;<span class="string">" "</span>;<span class="comment">//输出答案 结束</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区别在于： 站内元素是栈顶元素的右边； 而顺着写， 那么栈内元素是栈顶元素的左边， 即栈顶元素为站内元素的右边；同时还有一个区别是： 顺着先能边读边写， 而倒着写必须读完再写</p><p>不用v[]的写法, 其实直接可以用<code>stack&lt; pair&lt;int, int&gt; &gt;st</code>来写，可能会更直观一些</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">stack</span>&lt; pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; st;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val);</span><br><span class="line">       <span class="keyword">while</span>( !st.empty() &amp;&amp; val &gt; st.top().second )&#123;</span><br><span class="line">           ans[ st.top().first ] = i;</span><br><span class="line">           st.pop();</span><br><span class="line">       &#125;</span><br><span class="line">       st.push(&#123;i, val&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( i == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>单调栈可利用的点:</p><ul><li>剩下的元素 跟 当前元素的关系；弹出元素的个数；剩余元素的个数</li><li>栈顶 和 当前元素的关系==&gt; 找到第一个比数大、小的</li></ul><p>递减栈的while中条件写 val &gt; st.top()的时候pop，正着写和反着写都一样， 但是要注意等于号的区别；顺着写判断条件完全满足题意（利用pop的动作做处理），而逆着则要考虑先后，如气温题，找第一个反而要加等号， 要pop掉直到左边第一个出现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;秋季PAT的第一题就是单调栈，之前没怎么学过， 因此这次专门学习做下笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;单调栈monotone-stack&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#单调栈mo
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>扇区、块/簇</title>
    <link href="https://nymrli.top/2020/09/06/%E6%89%87%E5%8C%BA%E3%80%81%E5%9D%97-%E7%B0%87/"/>
    <id>https://nymrli.top/2020/09/06/扇区、块-簇/</id>
    <published>2020-09-06T06:29:31.000Z</published>
    <updated>2020-09-06T07:04:38.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="扇区"><a class="markdownIt-Anchor" href="#扇区"></a> 扇区</h2><p><strong>概念：</strong> 扇区，顾名思义，每个磁盘有多条同心圆似的磁道，磁道被分割成多个部分。每部分的弧长加上到圆心的两个半径，恰好形成一个扇形，所以叫做扇区。<strong>扇区是磁盘中最小的物理存储单位。</strong></p><h3 id="扇区大小-512b-4kb"><a class="markdownIt-Anchor" href="#扇区大小-512b-4kb"></a> 扇区大小: 512B -&gt; 4KB</h3><p>扇区(Sector)大小是固定的，默认情况下，每个扇区（Sector）为512字节，2009年后，硬盘厂商开始发布4KB字节扇区的硬盘了，4KB扇区硬盘已经在消费级市场广泛应用。但是<strong>同一块硬盘上的扇区大小一定是一致的</strong>。不可能存在多种不同大小的扇区。</p><h3 id="逻辑扇区-物理扇区"><a class="markdownIt-Anchor" href="#逻辑扇区-物理扇区"></a> 逻辑扇区、物理扇区</h3><p>物理扇区是磁盘上真实存在对应的扇区；</p><p>逻辑扇区是由于扇区大小由512B变成4KB后， 为了与老系统兼容，操作系统层面上提出来的一个概念，是为了方便操作系统读取写入硬盘数据而设置的， 给系统进行识别后，可以通过一定的公式与物理地址对应再找到到指定的物理扇区上去。</p><h4 id="由来"><a class="markdownIt-Anchor" href="#由来"></a> 由来</h4><p>关于物理扇区（physical setctor）与逻辑扇区，这个还得扯上<strong>扇区大小</strong>，由于近年来，随着对硬盘容量的要求不断增加，为了提高数据记录密度，硬盘厂商往往采用增大扇区大小的方法，于是出现了扇区大小为4096字节的硬盘。我们将这样的扇区称之为“物理扇区”。但是这样的<strong>大扇区会有兼容性问题</strong>，有的系统或软件无法适应。为了解决这个问题，硬盘内部将物理扇区在逻辑上划分为多个扇区片段并将其作为普通的扇区（一般为512字节大小）报告给操作系统及应用软件。这样的扇区片段我们称之为“逻辑扇区”。实际读写时由硬盘内的程序（固件）负责在逻辑扇区与物理扇区之间进行转换，<strong>上层程序“感觉”不到物理扇区的存在</strong>。</p><p><u>逻辑扇区是硬盘可以接受读写指令的最小操作单元，是操作系统及应用程序可以访问的扇区</u>，多数情况下其大小为512字节。<u>我们通常所说的扇区一般就是指的逻辑扇区。物理扇区是硬盘底层硬件意义上的扇区</u>，是实际执行读写操作的最小单元。是只能由硬盘直接访问的扇区，操作系统及应用程序一般无法直接访问物理扇区。一个物理扇区可以包含一个或多个逻辑扇区（比如多数硬盘的物理扇区包含了8个逻辑扇区）。当要读写某个逻辑扇区时，硬盘底层在实际操作时都会读写逻辑扇区所在的整个物理扇区。</p><p>参考： <a href="https://www.cnblogs.com/kerrycode/p/12701772.html" target="_blank" rel="noopener">存储基础知识：扇区与块/簇</a>——带物理结构图</p><h2 id="块簇"><a class="markdownIt-Anchor" href="#块簇"></a> 块/簇</h2><p>**概念：**块（Block）/簇（Cluster）是逻辑上的概念，或者说是虚拟出来的概念（逻辑概念）。 分别对应Linux与Windows操作系统中的概念。</p><p>通俗的来讲，在Windows下如NTFS等文件系统中叫做簇；在Linux下如Ext4等文件系统中叫做块（block）。每个簇或者块可以包括2、4、8、16、32、64…2048、4096等2的n次方个扇区。</p><h3 id="为什么要用磁盘块簇"><a class="markdownIt-Anchor" href="#为什么要用磁盘块簇"></a> <strong>为什么要用磁盘块/簇？</strong></h3><p>A：</p><ul><li>读取方便：由于扇区的Size比较小，数目众多时寻址时比较困难，所以操作系统就将相邻的扇区组合在一起，形成一个块，再对块进行整体的操作。(操作系统通过操作块， 来间接操作底层磁盘对扇区的读取，先找街道再找门户)</li><li>分离对底层的依赖：操作系统忽略对底层物理存储结构的设计。通过虚拟出来磁盘块的概念，在系统中认为块是最小的单位。</li></ul><h2 id="扇区与块簇的区别"><a class="markdownIt-Anchor" href="#扇区与块簇的区别"></a> 扇区与块/簇的区别</h2><p><strong>磁盘的读写基本单位</strong>是扇区。</p><ul><li><strong>磁盘</strong>的原理，物理实现，磁盘控制器是<strong>按照扇区这个单位读取等操作数据</strong>的。</li></ul><p>文件系统就是操作系统的一部分，所以**文件系统读写(操作文件)**的最小单位是块。</p><ul><li><strong>操作系统</strong>是通过<strong>块/簇来做为单位读取等操作数据</strong>的。</li></ul><p>and</p><p>从磁盘的物理结构来看存取信息的最小单位是扇区，一个扇区是512字节；</p><p>从操作系统对硬盘的存取管理来看，存取信息的最小单位是簇，簇是一个<strong>逻辑概念</strong>，一个簇可以是2、4、8、16、32或64个连续的扇区。</p><p><strong>一个簇只能被一个文件占用</strong>，哪怕是只有1个字节的文件，在磁盘上存储时也要占用一个簇，这个簇里剩下的扇区是无用的。例如用NTFS文件系统格式化的时候默认是<strong>8个扇区组成一个簇</strong>，即4096字节。所以你如果保存了一个只有1字节的文件（例如字母N），它在磁盘上实际也要占用4096字节（4K），所以“簇”也可以理解为操作系统存取信息的最小单位。</p><h3 id="qa"><a class="markdownIt-Anchor" href="#qa"></a> QA:</h3><h4 id="q-为什么磁盘块大小必须是扇区大小的整数倍呢"><a class="markdownIt-Anchor" href="#q-为什么磁盘块大小必须是扇区大小的整数倍呢"></a> <strong>Q、为什么磁盘块大小必须是扇区大小的整数倍呢？</strong></h4><p>A: 磁盘读取数据的基本单位就是一个扇区的大小，一个块的大小对于磁盘来说就是一次获取数据读取的扇区数*扇区大小，如果是整数倍的扇区数对于磁盘的IO更好，速度更快，也会更合理的利用资源。否则会对扇区进行分割。</p><h4 id="q-那么分成大簇和小簇有什么区别呢"><a class="markdownIt-Anchor" href="#q-那么分成大簇和小簇有什么区别呢"></a> Q、那么分成“大簇”和“小簇”有什么区别呢？</h4><p>A：我如果硬盘下很多小文件，那么每一个小文件，都会占用一个“簇”。虽然这些小文件都小于一个“簇”。<br>“大簇”和“小簇”当然有很多区别，但是最大的区别是：“小簇”会节省空间，而“大簇”则反之。“大簇”的优势在于有益于文件的读取存取，简单而不严谨的说就是提升硬盘性能。<br>“大簇”——读取存取速度快，占用空间大<br>“小簇”——读取存取速度慢，占用空间小<br>而现在TB时代，即便是“大簇”大家完全也HOLD住，即便你全部是几KB、几字节的小文件。“大簇”盘也不会“小簇”盘多占出太多空间，但是性能的提升确是最少几倍的，特别是面对大型程序或者游戏的时候。</p><h2 id="4k"><a class="markdownIt-Anchor" href="#4k"></a> 4K</h2><blockquote><p><strong>4K对齐</strong>的意思是对齐到磁盘开头的4K这个数值。和<strong>按4K来格式化</strong>不是一回事。</p></blockquote><p>Ans1: 4K对齐</p><p>随着时代发展，硬盘容量不断扩展，使得之前定义的每个扇区512字节不再是那么的合理，于是将每个扇区512字节改为每个扇区4096 个字节，也就是现在常说的“4K扇区”。随着<strong>NTFS</strong>成为了标准的硬盘文件系统，其文件系统的默认分配单元大小（簇）也是<strong>4096字节</strong>，为了使簇与扇区相对应，即使物理硬盘分区与计算机使用的逻辑分区对齐，保证硬盘读写效率，所以就有了“4K对齐”的概念。</p><p>新标准的”4K扇区”的硬盘在厂商为了保证与操作系统兼容的前提下，也将<strong>扇区模拟成512B</strong>（逻辑扇区），会<u>默认</u>定义为4096字节大小为一个簇，但因为其引导区占用了一个磁道共63个扇区，真正的文件系统在63号扇区之后。<br>我们通过计算得出前63个扇区大小为：512Bx63=32256B。并按照默认簇大小得出63扇区为：32256B÷4096B=7.875簇<br>即<strong>从第63个扇区结束，往后的每一个簇都会跨越两个物理单元，占据前一个单元的一小部分和后一个单元的一大部分</strong>。</p><p>而“4K对齐”主要是将硬盘的模拟扇区(512B)对齐到8的整数倍个“实际”4K扇区，即4096B*8=32768B，其正好跨过了63扇区的特性，从第64个扇区对齐。</p><p>Ans2: 4K格式化</p><p>4k对齐是硬盘分区中的一个专业术语，4K对齐就是符合<strong>4K扇区定义格式化</strong>过的硬盘，并且按照<strong>4K扇区的规则写入数据</strong>。一般来说，在给固态硬盘进行分区的时候，一定要勾选上4K对齐，否则会影响到SSD固态硬盘的性能与寿命。通俗的说，<u>如果SSD不进行4K对齐，写入数据的写入点正好会介于两个4K扇区的之间</u>，也就是说即使是写入最小量的数据，也会使用到两个4K扇区，这样会造成跨区读写，读写次数放大，从而影响磁盘性能。</p><p>SSD中的4K对齐的4K指4096字节，其中<strong>1个扇区为512字节</strong>。固态硬盘4K对齐中的<strong>2048是指2048个扇区</strong>，即<br>512B*2048=1048576B=1024KB，即<strong>1M对齐</strong>（4096就是2MB对齐），并满足4K对齐，该值只要是<strong>4096B的倍数</strong>就是4K对齐，理论上4K对齐只要是4096整数倍就可以，不过标准的一般都是选择4096。从实测来看，固态硬盘4K对齐选2048还是4096，性能区别并不大，小容量固态硬盘4K对齐，选择2048扇区对齐是可以的。而在<u>Win10</u>或者<u>大容量SSD</u>场景下，建议还是选默认的4096扇区对齐。</p><h2 id="分区操作"><a class="markdownIt-Anchor" href="#分区操作"></a> 分区操作</h2><p><img src="/2020/09/06/扇区、块-簇/1.png" alt="1"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;扇区&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#扇区&quot;&gt;&lt;/a&gt; 扇区&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;概念：&lt;/strong&gt; 扇区，顾名思义，每个磁盘有多条同心圆似的磁道，磁道被分割成多个部分。每部分的弧长加上到圆心的两个半径，
      
    
    </summary>
    
    
      <category term="计算机基础知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>SQL练习</title>
    <link href="https://nymrli.top/2020/09/04/SQL%E7%BB%83%E4%B9%A0/"/>
    <id>https://nymrli.top/2020/09/04/SQL练习/</id>
    <published>2020-09-04T07:54:57.000Z</published>
    <updated>2020-09-14T15:12:09.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql练习"><a class="markdownIt-Anchor" href="#sql练习"></a> SQL练习</h1><blockquote><p>鉴于同学被字节狂问SQL题，因此也激发了我的危机感。 作为非科班的， 写SQL还是比较慌的， 因此做下专题训练。</p></blockquote><h2 id="理论知识"><a class="markdownIt-Anchor" href="#理论知识"></a> 理论知识:</h2><p>SQL语句执行顺序</p><h3 id="1sql执行顺序"><a class="markdownIt-Anchor" href="#1sql执行顺序"></a> 1.<a href="https://www.cnblogs.com/yyjie/p/7788428.html" target="_blank" rel="noopener">sql执行顺序 </a></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(1) from </span><br><span class="line">(3) join </span><br><span class="line">(2) on </span><br><span class="line">(4) where </span><br><span class="line">(5) group by(开始使用<span class="keyword">select</span>中的别名，后面的语句中都可以使用)</span><br><span class="line">(<span class="number">6</span>) <span class="keyword">avg</span>,sum.... </span><br><span class="line">(<span class="number">7</span>) <span class="keyword">having</span> </span><br><span class="line">(<span class="number">8</span>) <span class="keyword">select</span> </span><br><span class="line">(<span class="number">9</span>) <span class="keyword">distinct</span> </span><br><span class="line">(<span class="number">10</span>) <span class="keyword">order</span> <span class="keyword">by</span></span><br></pre></td></tr></table></figure><p>2.<a href="https://blog.csdn.net/u013887008/article/details/93377939" target="_blank" rel="noopener">sql语句执行顺序</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(8) <span class="keyword">SELECT</span> (<span class="number">9</span>)<span class="keyword">DISTINCT</span>&lt;select_list&gt;</span><br><span class="line">(<span class="number">1</span>) <span class="keyword">FROM</span> &lt;left_table&gt;</span><br><span class="line">(<span class="number">3</span>) &lt;join_type&gt; <span class="keyword">JOIN</span> &lt;right_table&gt;</span><br><span class="line">(<span class="number">2</span>)         <span class="keyword">ON</span> &lt;join_condition&gt;</span><br><span class="line">(<span class="number">4</span>) <span class="keyword">WHERE</span> &lt;where_condition&gt;</span><br><span class="line">(<span class="number">5</span>) <span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;group_by_list&gt;</span><br><span class="line">(<span class="number">6</span>) <span class="keyword">WITH</span> &#123;<span class="keyword">CUBE</span>|<span class="keyword">ROLLUP</span>&#125;</span><br><span class="line">(<span class="number">7</span>) <span class="keyword">HAVING</span> &lt;having_condition&gt;</span><br><span class="line">(<span class="number">10</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;order_by_list&gt;</span><br><span class="line">(<span class="number">11</span>) <span class="keyword">LIMIT</span> &lt;limit_number&gt;</span><br></pre></td></tr></table></figure><h3 id="用group-by需要注意的"><a class="markdownIt-Anchor" href="#用group-by需要注意的"></a> 用<code>group by</code>需要注意的:</h3><ul><li>在select<strong>指定的字段</strong><ul><li>要么就要<strong>包含在Group By语句</strong>的后面，作为分组的依据；</li><li>要么就要<strong>被包含在聚合函数</strong>中。</li></ul></li></ul><h3 id="sql查询语句中的-limit-与-offset-的区别"><a class="markdownIt-Anchor" href="#sql查询语句中的-limit-与-offset-的区别"></a> SQL查询语句中的 limit 与 offset 的区别：</h3><ul><li><code>limit y</code> 分句表示: 读取 y 条数据</li><li><code>limit x, y</code> 分句表示: 跳过 x 条数据，读取 y 条数据</li><li><code>limit y offset x</code> 分句表示: 跳过 x 条数据，读取 y 条数据</li></ul><h4 id="分页操作"><a class="markdownIt-Anchor" href="#分页操作"></a> 分页操作</h4><p>语法：limit开始索引，每页查询的记录数<br>注：索引从0开始<br><code>公式：开始索引=（当前页码-1）*每页查询的记录数</code>即 <code>index = (nowPageNum - 1) * pageSize</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span> </span><br><span class="line"><span class="keyword">WHERE</span> 查询条件 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序条件 </span><br><span class="line"><span class="keyword">LIMIT</span> ((页码<span class="number">-1</span>)*页大小),页大小;</span><br><span class="line"><span class="comment">-- LIMIT (pageNum-1)*pageSize, pageSize</span></span><br><span class="line"><span class="comment">-- 第一个参数是偏移量， 第二个是所取数据数</span></span><br></pre></td></tr></table></figure><hr><p>题目</p><h2 id="1-查找最晚入职员工的所有信息入门题"><a class="markdownIt-Anchor" href="#1-查找最晚入职员工的所有信息入门题"></a> 1<a href="https://www.nowcoder.com/practice/218ae58dfdcd4af195fff264e062138f?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 查找最晚入职员工的所有信息</a>(入门题)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="2查找入职员工时间排名倒数第三的员工所有信息"><a class="markdownIt-Anchor" href="#2查找入职员工时间排名倒数第三的员工所有信息"></a> 2<a href="https://www.nowcoder.com/practice/ec1ca44c62c14ceb990c3c40def1ec6c?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">查找入职员工时间排名倒数第三的员工所有信息</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span> <span class="comment">-- 递减排序</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">2</span>,<span class="number">1</span> ;<span class="comment">-- offset 2， 取1</span></span><br></pre></td></tr></table></figure><h3 id="sql查询语句中的-limit-与-offset-的区别-2"><a class="markdownIt-Anchor" href="#sql查询语句中的-limit-与-offset-的区别-2"></a> SQL查询语句中的 limit 与 offset 的区别：</h3><ul><li><code>limit y</code> 分句表示: 读取 y 条数据</li><li><code>limit x, y</code> 分句表示: 跳过 x 条数据，读取 y 条数据</li><li><code>limit y offset x</code> 分句表示: 跳过 x 条数据，读取 y 条数据</li></ul><h2 id="3-查找各个部门当前领导当前薪水详情以及其对应部门编号dept_no"><a class="markdownIt-Anchor" href="#3-查找各个部门当前领导当前薪水详情以及其对应部门编号dept_no"></a> 3<a href="https://www.nowcoder.com/practice/c63c5b54d86e4c6d880e4834bfd70c3b?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 查找各个部门当前领导当前薪水详情以及其对应部门编号dept_no</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.*, d.dept_no </span><br><span class="line"><span class="keyword">from</span> salaries <span class="keyword">as</span> s</span><br><span class="line"><span class="keyword">join</span> dept_manager <span class="keyword">as</span> d</span><br><span class="line"><span class="keyword">on</span> s.emp_no = d.emp_no</span><br><span class="line"><span class="keyword">where</span> d.to_date=<span class="string">'9999-01-01'</span> <span class="keyword">and</span> s.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> s.emp_no;</span><br></pre></td></tr></table></figure><h2 id="4-查找所有已经分配部门的员工的last_name和first_name"><a class="markdownIt-Anchor" href="#4-查找所有已经分配部门的员工的last_name和first_name"></a> 4<a href="https://www.nowcoder.com/practice/6d35b1cd593545ab985a68cd86f28671?tpId=82&amp;rp=1&amp;ru=%2Fta%2Fsql&amp;qru=%2Fta%2Fsql%2Fquestion-ranking" target="_blank" rel="noopener"> 查找所有已经分配部门的员工的last_name和first_name</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.last_name, e.first_name, d.dept_no </span><br><span class="line"><span class="keyword">from</span> employees e </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> dept_emp d </span><br><span class="line"><span class="keyword">on</span> e.emp_no = d.emp_no;</span><br></pre></td></tr></table></figure><h2 id="5查找所有员工的last_name和first_name以及对应部门编号dept_no"><a class="markdownIt-Anchor" href="#5查找所有员工的last_name和first_name以及对应部门编号dept_no"></a> 5<a href="https://www.nowcoder.com/practice/dbfafafb2ee2482aa390645abd4463bf?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">查找所有员工的last_name和first_name以及对应部门编号dept_no</a></h2><blockquote><p>暂时没有分配具体部门的员工==&gt; employees有信息, 而dept_emp表中可能还没有信息；两表联合查询时以employees为准， 匹配不到dept_emp的数据用null填充—&gt;所以用外部联结的左联结</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.last_name, e.first_name, d.dept_no </span><br><span class="line"><span class="keyword">from</span> employees e</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept_emp d</span><br><span class="line"><span class="keyword">on</span> e.emp_no = d.emp_no</span><br></pre></td></tr></table></figure><h3 id="join"><a class="markdownIt-Anchor" href="#join"></a> join</h3><p>left join(左联接) 返回包括<strong>左表中的所有记录和右表</strong>中<u>联结字段相等</u>的记录<br>right join(右联接) 返回包括<strong>右表中的所有记录和左表</strong>中<u>联结字段相等</u>的记录<br>inner join(等值连接) 只返回两个表中<u>联结字段相等</u>的行</p><p><img src="https://images0.cnblogs.com/i/407365/201405/241947220904425.jpg" alt=""></p><p>总结:</p><ul><li>inner join是两集合取交集</li><li><strong>FULL [OUTER] JOIN</strong>: 两集合取并集</li><li>left [outer] join: 产生表A的完全集, B中有匹配则有值, 没匹配则为null<ul><li>left join是以A表的记录为基础的,A可以看成左表,B可以看成右表,left join是以左表为准的.换句话说,左表(A)的记录将会全部表示出来,而右表(B)只会显示符合搜索条件的记录(例子中为: A.aID = B.bID).<br>B表记录不足的地方均为NULL填充.</li></ul></li></ul><p>Q: 最上层的两张图分别是全A和全B，那么left join和right join的作用是什么呢?</p><p>A: 联表查询, 拓展字段</p><h2 id="6-查找所有员工入职时候的薪水情况"><a class="markdownIt-Anchor" href="#6-查找所有员工入职时候的薪水情况"></a> 6<a href="https://www.nowcoder.com/practice/23142e7a23e4480781a3b978b5e0f33a?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 查找所有员工入职时候的薪水情况</a></h2><blockquote><p>两表并列查找，题目重点在于: <em>有多条薪水信息中找出入职时候的薪水情况</em></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.emp_no, s.salary </span><br><span class="line"><span class="keyword">from</span> employees e, salaries s</span><br><span class="line"><span class="keyword">where</span> e.emp_no = s.emp_no <span class="keyword">and</span> e.hire_date = s.from_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> e.emp_no <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><blockquote><p>联表查询</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.emp_no,s.salary </span><br><span class="line"><span class="keyword">from</span> employees e</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> salaries s</span><br><span class="line"><span class="keyword">where</span> e.emp_no= s.emp_no <span class="keyword">and</span> e.hire_date = s.from_date </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> e.emp_no <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h2 id="7查找薪水涨幅超过15次的员工号emp_no以及其对应的涨幅次数t"><a class="markdownIt-Anchor" href="#7查找薪水涨幅超过15次的员工号emp_no以及其对应的涨幅次数t"></a> 7<a href="https://www.nowcoder.com/practice/6d4a4cff1d58495182f536c548fee1ae?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">查找薪水涨幅超过15次的员工号emp_no以及其对应的涨幅次数t</a></h2><blockquote><ul><li>将select出来的数据重命名</li><li>having用法</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.emp_no, <span class="keyword">count</span>(s.emp_no) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> salaries s</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.emp_no</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(salary) &gt; <span class="number">15</span> </span><br><span class="line"><span class="comment">-- 由于吧count(s.emp_no)替换成t了, 因此这边可以写成 having t &gt; 15</span></span><br></pre></td></tr></table></figure><h3 id="question"><a class="markdownIt-Anchor" href="#question"></a> Question:</h3><p><code>select count(s.emp_no) as t</code>的执行顺序在<code>having t &gt; 15</code>之前吗?</p><h3 id="sql-别名-as"><a class="markdownIt-Anchor" href="#sql-别名-as"></a> <strong>SQL 别名: AS</strong></h3><ul><li>SQL 别名用于为 表 或 表中的列 提供临时名称。</li><li>SQL 别名通常用于使 表名 或 列名 更具可读性。</li><li>SQL 一个别名只存在于查询期间。</li></ul><p>别名使用 AS 关键字赋予。</p><h4 id="什么情况下需要给表起别名"><a class="markdownIt-Anchor" href="#什么情况下需要给表起别名"></a> 什么情况下需要给表起别名？</h4><p>1.表名比较长<br>2.当需要在多个表中进行查询并把查询内容同时输出的时候<br>3.当需要进行表连接的时候（其实和2一个意思，一般情况下多个表进行连接主要目的就是为了从多个表中查询所需要的内容）</p><h3 id="having"><a class="markdownIt-Anchor" href="#having"></a> having</h3><p>在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与<u>聚合函数</u>一起使用。</p><p>HAVING 子句可以让我们筛选分组后的各组数据。</p><h3 id="聚合函数"><a class="markdownIt-Anchor" href="#聚合函数"></a> 聚合函数</h3><blockquote><p>聚合函数对一组值执行计算并返回单一的值</p></blockquote><h4 id="聚合函数有什么特点"><a class="markdownIt-Anchor" href="#聚合函数有什么特点"></a> 聚合函数有什么特点？</h4><ol><li>除了 COUNT 以外，聚合函数忽略空值。</li><li>聚合函数经常与 SELECT 语句的 <strong>GROUP BY</strong> 子句一同使用。</li><li>所有聚合函数都具有确定性。任何时候用一组给定的输入值调用它们时，都返回相同的值。</li><li>标量函数：只能对单个的数字或值进行计算。主要包括字符函数、日期/时间函数、数值函数和转换函数这四类。</li></ol><h2 id="8-找出所有员工当前具体的薪水salary情况"><a class="markdownIt-Anchor" href="#8-找出所有员工当前具体的薪水salary情况"></a> 8<a href="https://www.nowcoder.com/practice/ae51e6d057c94f6d891735a48d1c2397?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 找出所有员工当前具体的薪水salary情况</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> salary </span><br><span class="line"><span class="keyword">from</span> salaries</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">to_date</span> = <span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></span><br><span class="line"><span class="comment">-- 或者使用group by</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> salary</span><br><span class="line"><span class="keyword">from</span> salaries</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>说明：<br>对于distinct与group by的使用：<br>1.当对系统的性能高并且数据量大时使用group by<br>2.当对系统的性能不高时或者使用数据量少时两者借口<br>3.尽量使用group by</p><h2 id="9获取所有部门当前manager的当前薪水情况"><a class="markdownIt-Anchor" href="#9获取所有部门当前manager的当前薪水情况"></a> 9<a href="https://www.nowcoder.com/practice/4c8b4a10ca5b44189e411107e1d8bec1?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">获取所有部门当前manager的当前薪水情况</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用where连接并列查询的两表</span></span><br><span class="line"><span class="keyword">select</span> d.dept_no, s.emp_no, s.salary </span><br><span class="line"><span class="keyword">from</span> dept_manager <span class="keyword">as</span> d, salaries <span class="keyword">as</span> s</span><br><span class="line"><span class="keyword">where</span> d.emp_no = s.emp_no <span class="keyword">and</span> d.to_date=<span class="string">'9999-01-01'</span> <span class="keyword">and</span> s.to_date=<span class="string">'9999-01-01'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用inner join合并两表</span></span><br><span class="line"><span class="keyword">select</span> d.dept_no, s.emp_no, s.salary</span><br><span class="line"><span class="keyword">from</span> dept_manager <span class="keyword">as</span> d</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> salaries <span class="keyword">as</span> s</span><br><span class="line"><span class="keyword">on</span> d.to_date = <span class="string">'9999-01-01'</span> <span class="keyword">and</span> s.to_date = <span class="string">'9999-01-01'</span> <span class="keyword">and</span> d.emp_no = s.emp_no;</span><br></pre></td></tr></table></figure><h2 id="10-获取所有非manager的员工emp_no"><a class="markdownIt-Anchor" href="#10-获取所有非manager的员工emp_no"></a> 10<a href="https://www.nowcoder.com/practice/32c53d06443346f4a2f2ca733c19660c?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 获取所有非manager的员工emp_no</a></h2><blockquote><p>把在dept_manager中的都筛选掉, 之前join的练习: A - A∩B</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- LEFT JOIN左连接 + IS NULL</span></span><br><span class="line"><span class="keyword">select</span> e.emp_no</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">as</span> e</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept_manager d</span><br><span class="line"><span class="keyword">on</span> e.emp_no = d.emp_no </span><br><span class="line"><span class="keyword">where</span> d.emp_no <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line"><span class="comment">-- where d.emp_no isnull 中 isnull是个关键字, 正确用法是</span></span><br><span class="line"><span class="comment">-- ISNULL ( check_expression , replacement_value )将被检查是否为 NULL的表达式替换为replacement_value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- NOT IN+子查询</span></span><br><span class="line"><span class="keyword">select</span> emp_no</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">where</span> emp_no </span><br><span class="line"><span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> emp_no <span class="keyword">from</span> dept_manager)</span><br></pre></td></tr></table></figure><p>使用见: <a href="#join">#join</a></p><ul><li>只有left join的效果</li></ul><p><img src="/2020/09/04/SQL练习/left_join.jpg" alt="left_join"></p><ul><li>加上is null的效果 ==&gt; 找出B表中emp_no不匹配的(他们填充的数据都是null)</li></ul><p><img src="/2020/09/04/SQL练习/isnull.jpg" alt="isnull"></p><h2 id="11-获取所有员工当前的manager"><a class="markdownIt-Anchor" href="#11-获取所有员工当前的manager"></a> 11<a href="https://www.nowcoder.com/practice/e50d92b8673a440ebdf3a517b5b37d62?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 获取所有员工当前的manager</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- my</span></span><br><span class="line"><span class="keyword">select</span> de.emp_no, dm.emp_no <span class="keyword">as</span> manager_no</span><br><span class="line"><span class="keyword">from</span> dept_emp <span class="keyword">as</span> de</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span>  dept_manager dm</span><br><span class="line"><span class="keyword">on</span> de.dept_no = dm.dept_no</span><br><span class="line"><span class="keyword">where</span> dm.to_date =<span class="string">'9999-01-01'</span> <span class="keyword">and</span> dm.emp_no != de.emp_no</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 题解: INNER JOIN+不等于; 不等于可以用&lt;&gt;或者!=表示</span></span><br><span class="line"><span class="keyword">SELECT</span> de.emp_no, dm.emp_no <span class="keyword">AS</span> manager_no </span><br><span class="line"><span class="keyword">FROM</span> dept_emp <span class="keyword">AS</span> de <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept_manager <span class="keyword">AS</span> dm</span><br><span class="line"><span class="keyword">ON</span> de.dept_no = dm.dept_no </span><br><span class="line"><span class="keyword">WHERE</span> dm.to_date = <span class="string">'9999-01-01'</span> <span class="keyword">AND</span> de.to_date = <span class="string">'9999-01-01'</span> <span class="keyword">AND</span> de.emp_no &lt;&gt; dm.emp_no</span><br></pre></td></tr></table></figure><h2 id="12-获取所有部门中当前员工薪水最高的相关信息"><a class="markdownIt-Anchor" href="#12-获取所有部门中当前员工薪水最高的相关信息"></a> 12<a href="https://www.nowcoder.com/practice/4a052e3e1df5435880d4353eb18a91c6?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 获取所有部门中当前员工薪水最高的相关信息</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> de.dept_no, de.emp_no, <span class="keyword">max</span>(s.salary) </span><br><span class="line"><span class="keyword">from</span> dept_emp <span class="keyword">as</span> de </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> salaries <span class="keyword">as</span> s</span><br><span class="line"><span class="keyword">on</span> s.emp_no = de.emp_no <span class="keyword">and</span> de.to_date = <span class="string">'9999-01-01'</span> <span class="keyword">and</span> s.to_date = <span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> de.dept_no</span><br></pre></td></tr></table></figure><p>使用GROUP BY子句时，SELECT子句中只能有聚合键、聚合函数、常数。</p><h2 id="13-从titls表获取按照title进行分组"><a class="markdownIt-Anchor" href="#13-从titls表获取按照title进行分组"></a> 13<a href="https://www.nowcoder.com/practice/72ca694734294dc78f513e147da7821e?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 从titls表获取按照title进行分组</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> title, <span class="keyword">count</span>(title) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> titles</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> title</span><br><span class="line"><span class="keyword">having</span> t &gt;= <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="14-从titles表获取按照title进行分组注意对于重复的emp_no进行忽略"><a class="markdownIt-Anchor" href="#14-从titles表获取按照title进行分组注意对于重复的emp_no进行忽略"></a> 14 <a href="https://www.nowcoder.com/practice/c59b452f420c47f48d9c86d69efdff20?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 从titles表获取按照title进行分组，注意对于重复的emp_no进行忽略</a></h2><blockquote><p>忽略重复的emp_no， 上题的count(title) 其实可以写成count(emp_no) , 即有一条包含title的条目就++，而emp_no是其主键, 因此可以用emp_no的数目来代替title的数目。因此这题要求的不重复emp_no直接加个distinct即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select title, count(distinct emp_no) as t</span><br><span class="line">from titles</span><br><span class="line">group by title</span><br><span class="line">having t &gt;= 2</span><br></pre></td></tr></table></figure><h2 id="15-查找employees表所有emp_no为奇数"><a class="markdownIt-Anchor" href="#15-查找employees表所有emp_no为奇数"></a> 15<a href="https://www.nowcoder.com/practice/a32669eb1d1740e785f105fa22741d5c?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 查找employees表所有emp_no为奇数</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> emp_no, birth_date, first_name, last_name, gender, hire_date</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> emp_no % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">and</span> last_name != <span class="string">'Mary'</span> </span><br><span class="line"><span class="comment">-- 补充：emp_no % 2=1也可以改成MOD(emp_no, 2)=1，但是某些sql版本可能不支持后者(比如题库就不支持)</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h2 id="16-统计出当前各个title类型对应的员工当前薪水对应的平均工资"><a class="markdownIt-Anchor" href="#16-统计出当前各个title类型对应的员工当前薪水对应的平均工资"></a> 16<a href="https://www.nowcoder.com/practice/c8652e9e5a354b879e2a244200f1eaae?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 统计出当前各个title类型对应的员工当前薪水对应的平均工资</a></h2><blockquote><p>通过t.title来进行分组</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.title, <span class="keyword">avg</span>(s.salary)</span><br><span class="line"><span class="keyword">from</span> titles <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> salaries <span class="keyword">as</span> s</span><br><span class="line"><span class="keyword">on</span> t.emp_no = s.emp_no <span class="keyword">and</span> t.to_date =<span class="string">'9999-01-01'</span> <span class="keyword">and</span> s.to_date = <span class="string">'9999-01-01'</span></span><br><span class="line"><span class="comment">--  on t.emp_no=s.emp_no where t.to_date='9999-01-01' and s.to_date='9999-01-01' 也行, 表示在on执行后生成的虚拟表上再执行where</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t.title</span><br></pre></td></tr></table></figure><p>注意：AVG(*)是自动命名为avg的，所以不用重命名</p><h2 id="17-获取当前薪水第二多的员工的emp_no以及其对应的薪水"><a class="markdownIt-Anchor" href="#17-获取当前薪水第二多的员工的emp_no以及其对应的薪水"></a> 17 <a href="https://www.nowcoder.com/practice/8d2c290cc4e24403b98ca82ce45d04db?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 获取当前薪水第二多的员工的emp_no以及其对应的薪水</a></h2><blockquote><p>考验limit用法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> emp_no, salary </span><br><span class="line"><span class="keyword">from</span> salaries</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span>, <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="18-查找当前薪水排名第二多的员工编号emp_no"><a class="markdownIt-Anchor" href="#18-查找当前薪水排名第二多的员工编号emp_no"></a> 18<a href="https://www.nowcoder.com/practice/c1472daba75d4635b7f8540b837cc719?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 查找当前薪水排名第二多的员工编号emp_no</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用MAX函数，先查出最大salary，再利用&lt;得到不含最大salary的子表，在子表上再求最大值</span></span><br><span class="line"><span class="keyword">select</span> e.emp_no, <span class="keyword">max</span>(s.salary), e.last_name, e.first_name</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">as</span> e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> salaries <span class="keyword">as</span> s</span><br><span class="line"><span class="keyword">on</span> e.emp_no = s.emp_no</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">to_date</span> = <span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> salary &lt; ( <span class="keyword">select</span> <span class="keyword">max</span>(salary) <span class="keyword">from</span> salaries <span class="keyword">as</span> s <span class="keyword">where</span> s.to_date = <span class="string">'9999-01-01'</span>)</span><br></pre></td></tr></table></figure><h2 id="19查找所有员工的last_name和first_name以及对应的dept_name"><a class="markdownIt-Anchor" href="#19查找所有员工的last_name和first_name以及对应的dept_name"></a> 19<a href="https://www.nowcoder.com/practice/5a7975fabe1146329cee4f670c27ad55?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">查找所有员工的last_name和first_name以及对应的dept_name</a></h2><blockquote><ol><li>列出<code>employees</code>表里所有员工last_name, first_name,</li><li>根据<code>employees</code>中emp_no对应<code>dept_emp</code>中的dept_no,没有分配的员工找不到对应–&gt;采用<code>LEFT JOIN</code></li><li>再根据dept_no对应<code>departments</code>表中的dept_name,没有分配的员工找不到对应–&gt;采用<code>LEFT JOIN</code></li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.last_name, e.first_name, dm.dept_name</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">as</span> e</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept_emp <span class="keyword">as</span> de<span class="comment">-- 这边使用left join因为要针对没有分配部门的员工</span></span><br><span class="line"><span class="keyword">on</span> e.emp_no = de.emp_no</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> departments <span class="keyword">as</span> dm</span><br><span class="line"><span class="keyword">on</span> de.dept_no = dm.dept_no</span><br></pre></td></tr></table></figure><h2 id="20查找员工编号emp_now为10001其自入职以来的薪水salary涨幅值growth"><a class="markdownIt-Anchor" href="#20查找员工编号emp_now为10001其自入职以来的薪水salary涨幅值growth"></a> 20<a href="https://www.nowcoder.com/practice/c727647886004942a89848e2b5130dc2?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">查找员工编号emp_now为10001其自入职以来的薪水salary涨幅值growth</a></h2><blockquote><p>最大值-最小值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 题解, sum的结果默认为growth</span></span><br><span class="line"><span class="keyword">select</span> (<span class="keyword">max</span>(salary)-<span class="keyword">min</span>(salary)) <span class="keyword">as</span> growth</span><br><span class="line"><span class="keyword">from</span> salaries</span><br><span class="line"><span class="keyword">where</span> emp_no=<span class="string">'10001'</span>;</span><br></pre></td></tr></table></figure><h2 id="21-查找所有员工自入职以来的薪水涨幅情况"><a class="markdownIt-Anchor" href="#21-查找所有员工自入职以来的薪水涨幅情况"></a> 21<a href="https://www.nowcoder.com/practice/fc7344ece7294b9e98401826b94c6ea5?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 查找所有员工自入职以来的薪水涨幅情况</a></h2><blockquote><p>这题比较有难度</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> la.emp_no, (now.salary - la.salary) <span class="keyword">as</span> growth</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> e.emp_no, s.salary</span><br><span class="line">     <span class="keyword">from</span> employees <span class="keyword">as</span> e</span><br><span class="line">     <span class="keyword">left</span> <span class="keyword">join</span> salaries <span class="keyword">as</span> s</span><br><span class="line">     <span class="keyword">on</span> e.emp_no = s.emp_no <span class="keyword">and</span> e.hire_date = s.from_date ) <span class="keyword">as</span> la    <span class="comment">-- 入职时的工资表</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">    (<span class="keyword">select</span> e.emp_no, s.salary</span><br><span class="line">    <span class="keyword">from</span> employees <span class="keyword">as</span> e</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> salaries <span class="keyword">as</span> s</span><br><span class="line">    <span class="keyword">on</span> e.emp_no = s.emp_no </span><br><span class="line">    <span class="keyword">where</span> s.to_date = <span class="string">'9999-01-01'</span>) <span class="keyword">as</span> <span class="keyword">now</span>      <span class="comment">-- 现在的工资表</span></span><br><span class="line"><span class="keyword">on</span> la.emp_no = now.emp_no</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> growth <span class="keyword">asc</span><span class="comment">-- order by 默认asc</span></span><br></pre></td></tr></table></figure><h2 id="22统计各个部门的工资记录数"><a class="markdownIt-Anchor" href="#22统计各个部门的工资记录数"></a> 22<a href="https://www.nowcoder.com/practice/6a62b6c0a7324350a6d9959fa7c21db3?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">统计各个部门的工资记录数</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- my</span></span><br><span class="line"><span class="keyword">select</span> d.dept_no, d.dept_name, <span class="keyword">count</span>(d.emp_no) <span class="keyword">as</span> <span class="string">`sum`</span></span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line">    (<span class="keyword">select</span> * <span class="keyword">from</span> dept_emp <span class="keyword">as</span> de</span><br><span class="line">    <span class="keyword">inner</span> <span class="keyword">join</span> departments <span class="keyword">as</span> dm</span><br><span class="line">    <span class="keyword">on</span> de.dept_no = dm.dept_no) <span class="keyword">as</span> d</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> salaries <span class="keyword">as</span> s</span><br><span class="line"><span class="keyword">on</span> d.emp_no = s.emp_no</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.dept_no<span class="comment">-- 根据题目要求（统计各个部门的工资记录数）确定group by对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 题解</span></span><br><span class="line"><span class="keyword">select</span> dm.dept_no, dm.dept_name, <span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">from</span>  departments <span class="keyword">as</span> dm</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> </span><br><span class="line">    (<span class="keyword">select</span> * <span class="keyword">from</span> dept_emp <span class="keyword">as</span> de</span><br><span class="line">     <span class="comment">--    (dept_emp as de也可以</span></span><br><span class="line">    <span class="keyword">inner</span> <span class="keyword">join</span> salaries <span class="keyword">as</span> s</span><br><span class="line">    <span class="keyword">on</span> de.emp_no = s.emp_no) <span class="keyword">as</span> d</span><br><span class="line"><span class="keyword">on</span> dm.dept_no = d.dept_no</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.dept_no</span><br></pre></td></tr></table></figure><h2 id="23对所有员工的当前薪水按照salary进行按照1-n的排名"><a class="markdownIt-Anchor" href="#23对所有员工的当前薪水按照salary进行按照1-n的排名"></a> 23<a href="https://www.nowcoder.com/practice/b9068bfe5df74276bd015b9729eec4bf?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">对所有员工的当前薪水按照salary进行按照1-N的排名</a></h2><blockquote><p>SQL窗口函数（OLAP函数）中用于排序的专用窗口函数用法: RANK函数的使用 -&gt;mysql不支持</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> emp_no, salary, <span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">from</span> salaries</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">to_date</span> = <span class="string">'9999-01-01'</span></span><br></pre></td></tr></table></figure><p>下面介绍三种用于进行排序的专用窗口函数：</p><p>1、RANK()</p><p>在计算排序时，若存在相同位次，会跳过之后的位次。</p><p>例如，有3条排在第1位时，排序为：1，1，1，4······</p><p>2、DENSE_RANK()</p><p>这就是题目中所用到的函数，在计算排序时，若存在相同位次，不会跳过之后的位次。</p><p>例如，有3条排在第1位时，排序为：1，1，1，2······</p><p>3、ROW_NUMBER()</p><p>这个函数赋予唯一的连续位次。</p><p>例如，有3条排在第1位时，排序为：1，2，3，4······</p><p>窗口函数用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;开窗函数&gt; over ([partition by &lt;列清单&gt;] order by &lt;排序用列清单&gt;)</span><br></pre></td></tr></table></figure><p><strong>开窗函数大体可以分为以下两种：</strong></p><p>1.能够作为开窗函数的聚合函数（sum，avg，count，max，min）<br>2.rank，dense_rank。row_number等专用开窗函数。</p><h2 id="14-开窗函数和聚合函数的区别"><a class="markdownIt-Anchor" href="#14-开窗函数和聚合函数的区别"></a> 1.4 开窗函数和聚合函数的区别</h2><p>（1）SQL 标准允许将所有聚合函数用作开窗函数，用OVER 关键字区分开窗函数和聚合函数。<br>（2）聚合函数每组只返回一个值，开窗函数每组可返回多个值。</p><h2 id="24-获取所有非manager员工当前的薪水情况"><a class="markdownIt-Anchor" href="#24-获取所有非manager员工当前的薪水情况"></a> 24<a href="https://www.nowcoder.com/practice/8fe212a6c71b42de9c15c56ce354bebe?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 获取所有非manager员工当前的薪水情况</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方法1：多表联查+NOT IN</span></span><br><span class="line"><span class="keyword">SELECT</span> de.dept_no, de.emp_no, s.salary</span><br><span class="line"><span class="keyword">FROM</span> dept_emp <span class="keyword">AS</span> de, employees <span class="keyword">AS</span> e, salaries <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">WHERE</span> de.emp_no=e.emp_no</span><br><span class="line"><span class="keyword">AND</span> de.emp_no=s.emp_no</span><br><span class="line"><span class="keyword">AND</span> s.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">AND</span> e.emp_no <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> emp_no</span><br><span class="line"><span class="keyword">FROM</span> dept_manager</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span>)</span><br></pre></td></tr></table></figure><h2 id="25-获取员工其当前的薪水比其manager当前薪水还高的相"><a class="markdownIt-Anchor" href="#25-获取员工其当前的薪水比其manager当前薪水还高的相"></a> 25<a href="https://www.nowcoder.com/practice/f858d74a030e48da8e0f69e21be63bef?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 获取员工其当前的薪水比其manager当前薪水还高的相</a></h2><h2 id="26-汇总各个部门当前员工的title类型的分配数目"><a class="markdownIt-Anchor" href="#26-汇总各个部门当前员工的title类型的分配数目"></a> 26<a href="https://www.nowcoder.com/practice/4bcb6a7d3e39423291d2f7bdbbff87f8?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"> 汇总各个部门当前员工的title类型的分配数目</a></h2><hr><h2 id="牛客每个人最近的登录日期一"><a class="markdownIt-Anchor" href="#牛客每个人最近的登录日期一"></a> <a href="https://www.nowcoder.com/practice/ca274ebe6eac40ab9c33ced3f2223bb2?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">牛客每个人最近的登录日期(一)</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(<span class="built_in">date</span>)</span><br><span class="line"><span class="keyword">from</span> login</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_id</span><br></pre></td></tr></table></figure><h2 id="牛客每个人最近的登录日期二"><a class="markdownIt-Anchor" href="#牛客每个人最近的登录日期二"></a> <a href="https://www.nowcoder.com/practice/7cc3c814329546e89e71bb45c805c9ad?tpId=82&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">牛客每个人最近的登录日期(二)</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user.name,client.name,<span class="keyword">max</span>(login.date)</span><br><span class="line"><span class="keyword">from</span> login</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">user</span> <span class="keyword">on</span> login.user_id = user.id</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">client</span> <span class="keyword">on</span> login.client_id = client.id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> user.name;</span><br></pre></td></tr></table></figure><p>用<code>group by</code>需要注意的:</p><ul><li>在select<strong>指定的字段</strong><ul><li>要么就要<strong>包含在Group By语句</strong>的后面，作为分组的依据；</li><li>要么就要<strong>被包含在聚合函数</strong>中。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sql练习&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sql练习&quot;&gt;&lt;/a&gt; SQL练习&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;鉴于同学被字节狂问SQL题，因此也激发了我的危机感。 作为非科班的， 写SQL还是比较慌的， 因此做
      
    
    </summary>
    
    
      <category term="后端" scheme="https://nymrli.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="SQL" scheme="https://nymrli.top/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发</title>
    <link href="https://nymrli.top/2020/07/11/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <id>https://nymrli.top/2020/07/11/IDEA插件开发/</id>
    <published>2020-07-11T07:50:42.000Z</published>
    <updated>2020-07-11T12:02:09.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建idea-插件工程"><a class="markdownIt-Anchor" href="#新建idea-插件工程"></a> 新建IDEA 插件工程</h2><p>File -&gt; new -&gt; Project -&gt; Plugin即可</p><p>初始会生成一个项目xml配置文件, 以下是我进行修改后的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">idea-plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>top.nymrli.privatesee<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>privateSee<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vendor</span> <span class="attr">email</span>=<span class="string">"nymrli99@163.com"</span> <span class="attr">url</span>=<span class="string">"http://nymrli.top"</span>&gt;</span>Mrli<span class="tag">&lt;/<span class="name">vendor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">      Highlight when private methods are called.</span><br><span class="line">    ]]&gt;<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">change-notes</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">      &lt;br&gt;</span><br><span class="line">      &lt;em&gt;First created. This time will be tried&lt;/em&gt;</span><br><span class="line">      &lt;br&gt;</span><br><span class="line">    ]]&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">change-notes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">idea-version</span> <span class="attr">since-build</span>=<span class="string">"173.0"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html</span></span><br><span class="line"><span class="comment">       on how to target different products --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">depends</span>&gt;</span>com.intellij.modules.platform<span class="tag">&lt;/<span class="name">depends</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">extensions</span> <span class="attr">defaultExtensionNs</span>=<span class="string">"com.intellij"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Add your extensions here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">actions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Add your actions here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">id</span>=<span class="string">"FirstPluginActionId"</span> <span class="attr">class</span>=<span class="string">"top.nymrli.privatesee.FirstPluginAction"</span> <span class="attr">text</span>=<span class="string">"测试"</span> <span class="attr">description</span>=<span class="string">"测试描述"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add-to-group</span> <span class="attr">group-id</span>=<span class="string">"ToolsMenu"</span> <span class="attr">anchor</span>=<span class="string">"first"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">keyboard-shortcut</span> <span class="attr">keymap</span>=<span class="string">"$default"</span> <span class="attr">first-keystroke</span>=<span class="string">"ctrl I"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">actions</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">idea-plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="新建action"><a class="markdownIt-Anchor" href="#新建action"></a> 新建action</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstPluginAction</span> <span class="keyword">extends</span> <span class="title">AnAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(AnActionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> insert action logic here</span></span><br><span class="line">        NotificationGroup notificationgroup = <span class="keyword">new</span> NotificationGroup(<span class="string">"flugin_id"</span>, NotificationDisplayType.BALLOON, <span class="keyword">true</span>);</span><br><span class="line">        Notification notification = notificationgroup.createNotification(<span class="string">"点击测试"</span>, MessageType.INFO);</span><br><span class="line">        Notifications.Bus.notify(notification);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试: edit configuration选择plugin, 然后选择运行</p><h2 id="启动初始化"><a class="markdownIt-Anchor" href="#启动初始化"></a> 启动初始化</h2><p>新建一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationComponent</span> <span class="keyword">implements</span> <span class="title">ApplicationComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"插件初始化"</span>);</span><br><span class="line">        TanChuanDialog dialog = <span class="keyword">new</span> TanChuanDialog();</span><br><span class="line">        dialog.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在xml配置指定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application-components</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">implementation-class</span>&gt;</span></span><br><span class="line">        top.nymrli.privatesee.MyApplicationComponent</span><br><span class="line">      <span class="tag">&lt;/<span class="name">implementation-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application-components</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="弹窗效果"><a class="markdownIt-Anchor" href="#弹窗效果"></a> 弹窗效果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TanChuanDialog</span> <span class="keyword">extends</span> <span class="title">DialogWrapper</span> </span>&#123;</span><br><span class="line">    JPanel jPanel;</span><br><span class="line">    JLabel label;</span><br><span class="line">    JButton btn;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TanChuanDialog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置弹窗的标题</span></span><br><span class="line">        setTitle(<span class="string">"启动弹窗"</span>);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置弹窗中间展示内容</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> JComponent <span class="title">createCenterPanel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jPanel = <span class="keyword">new</span> JPanel();</span><br><span class="line">        label = <span class="keyword">new</span> JLabel(<span class="string">"显示内容"</span>);</span><br><span class="line">        jPanel.add(label);</span><br><span class="line">        <span class="keyword">return</span> jPanel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义设置底部的按钮</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> JComponent <span class="title">createSouthPanel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jPanel = <span class="keyword">new</span> JPanel();</span><br><span class="line">         btn = <span class="keyword">new</span> JButton(<span class="string">"再干一杯"</span>);</span><br><span class="line">         btn.addActionListener(e-&gt;&#123;</span><br><span class="line">             label.setText(<span class="string">"被点击了哦"</span>);</span><br><span class="line">         &#125;);</span><br><span class="line">        jPanel.add(btn);</span><br><span class="line">        <span class="keyword">return</span> jPanel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新建idea-插件工程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#新建idea-插件工程&quot;&gt;&lt;/a&gt; 新建IDEA 插件工程&lt;/h2&gt;
&lt;p&gt;File -&amp;gt; new -&amp;gt; Project -&amp;gt; Plugin即可&lt;/
      
    
    </summary>
    
    
      <category term="Java" scheme="https://nymrli.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>getBargains的record和Solution</title>
    <link href="https://nymrli.top/2020/05/24/getBargains%E7%9A%84record%E5%92%8CSolution/"/>
    <id>https://nymrli.top/2020/05/24/getBargains的record和Solution/</id>
    <published>2020-05-24T08:44:25.000Z</published>
    <updated>2020-05-31T11:38:26.323Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>该篇为**<a href="https://github.com/Freedomisgood/getBargains" target="_blank" rel="noopener">getBargains</a>**仓库README.md直接搬运，记录一些appnium和andriod 10碰到的问题</p></blockquote><h2 id="自动拿券"><a class="markdownIt-Anchor" href="#自动拿券"></a> 自动拿券</h2><blockquote><p>通过别人发的口令, 打开淘宝APP进行抢券</p></blockquote><h3 id="1itchat接收群消息"><a class="markdownIt-Anchor" href="#1itchat接收群消息"></a> 1.itchat接收群消息</h3><h3 id="2将口令复制到剪贴板"><a class="markdownIt-Anchor" href="#2将口令复制到剪贴板"></a> 2.将口令复制到剪贴板</h3><h3 id="3打开淘宝app点击抢券"><a class="markdownIt-Anchor" href="#3打开淘宝app点击抢券"></a> 3.打开淘宝APP点击抢券</h3><h2 id="碰到的问题"><a class="markdownIt-Anchor" href="#碰到的问题"></a> 碰到的问题:</h2><ol><li><p>出现如下警告:<code>Warning: Activity not started, its current task has been brought to the front</code> or <code>Warning: Activity not started, intent has been delivered to currently running top-most instance.</code></p><ul><li>A: 不用管他就行, 只是个警告, 提示你有应用切到了顶层</li></ul></li><li><p>出现提示: <code>/system/bin/sh: adb: inaccessible or not found</code></p><ul><li>A: 已经在adb shell中输入的命令不需要再加上<code>adb shell</code>前缀<br>e.g.<code>umi:/ $ adb shell am start ca.zgrs.clipper/.Main</code> (umi:/)提示已经在adb shell中了</li></ul></li><li><p>查找app包名和Activity活动页面(Andriod 10)</p><ul><li>A: 原本的<code>adb shell dumpsys activity | find &quot;mFocusedActivity&quot;</code>在andriod 10上好像检测不出来</li></ul></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看包名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> adb shell pm list packages</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看Activity</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> $ adb shell dumpsys activity com.taobao.taobao | grep ACTIVITY</span></span><br></pre></td></tr></table></figure><ol start="4"><li>adb打开应用的命令?</li></ol><ul><li>A: <code>adb shell am start -n package/launch activity</code></li></ul><ol start="5"><li><p>appnium声明driver的时候是打开指定app程序, 但如果每次都是重新打开, 那么加载淘宝的速度会很慢。应该使用切换后台</p><ul><li>A: 使用<code>driver.start_activity('com.taobao.taobao', 'com.taobao.tao.TBMainActivity')</code></li></ul><p><a href="https://blog.csdn.net/jianglianye21/article/details/89850033" target="_blank" rel="noopener">appium：一个手机运行两个APP，APP之间相互切换</a></p></li><li><p>ADB滑动解锁问题: 在一个位置按住</p><ul><li>A: 暂时还没解决, appnium可以, 但ADB好像没有找到解决方案</li></ul></li><li><p>桌面的activity:</p><ul><li>A: <code>.launcher.Launcher</code></li></ul></li><li><p>报错<code>selenium.common.exceptions.InvalidSessionIdException: Message: A session is either terminated or not started</code></p><ul><li>A: 原因是driver长时间没收到command自动关闭了, 与使用<code>driver.quit()</code>后再用driver执行操作报相同的错误。</li><li>-&gt;解决方案: 在desirable_caps中将<code>newCommandTimeout</code>设置大一点: <code>'newCommandTimeout': 1800</code></li></ul></li></ol><p>附录：</p><ul><li><p><a href="https://blog.csdn.net/lollipop666/article/details/82480403" target="_blank" rel="noopener">python3使用appnium运行手机上的APP</a></p></li><li><p><a href="https://github.com/majido/clipper/issues/9" target="_blank" rel="noopener">clipper - Broken on Android 10 (Android Q) #9</a></p></li><li><p><a href="https://testerhome.com/topics/3711" target="_blank" rel="noopener">Appium Python API 中文版 By-HZJ</a></p></li><li><p><a href="https://blog.csdn.net/u012002125/article/details/80870549" target="_blank" rel="noopener">Appium配置desired_capability详解</a></p></li><li><p>查看包名和activity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  # 在米6(Andriod 10)上尝试可行</span><br><span class="line">  $ adb shell dumpsys window windows | findstr mFocusedApp</span><br><span class="line">  $ adb shell dumpsys window windows | findstr &quot;Current&quot;</span><br><span class="line">  </span><br><span class="line"># 下失效</span><br><span class="line">  $ adb shell dumpsys activity | find  mFocusedActivity</span><br></pre></td></tr></table></figure><ul><li><p>如果在有apk的情况下, <code>aapt dump badging d:\\test.apk</code></p></li><li><p>打开APP-&gt;<code>adb logcat &gt; D:/log.txt</code>  -&gt; 胡乱的对APP做一些操作-&gt;Ctrl+c 结束adb命令-&gt;打开log.txt文件，搜索：Displayed</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;该篇为**&lt;a href=&quot;https://github.com/Freedomisgood/getBargains&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;getBargains&lt;/a&gt;**仓库README.md直接搬运，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IDEA配置——自定义快捷键、生成注释</title>
    <link href="https://nymrli.top/2020/05/15/IDEA%E9%85%8D%E7%BD%AE%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E9%94%AE%E3%80%81%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A/"/>
    <id>https://nymrli.top/2020/05/15/IDEA配置——自定义快捷键、生成注释/</id>
    <published>2020-05-15T02:22:20.000Z</published>
    <updated>2020-09-06T08:18:25.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="idea配置自定义快捷键-生成注释"><a class="markdownIt-Anchor" href="#idea配置自定义快捷键-生成注释"></a> IDEA配置——自定义快捷键、生成注释</h1><blockquote><p>以前因为上JAVA课，还是不常用Java， 所以安装了个Eclipse， 但是现在要经常使用java的话， 感觉还是IDEA的支持做的可能更加到位一点</p></blockquote><h2 id="maven换源"><a class="markdownIt-Anchor" href="#maven换源"></a> Maven换源:</h2><blockquote><p>因为有段时间写SpringBoot被依赖给坑过，所以把Maven换源写在最前面。</p></blockquote><p>IDEA是会有默认的Maven工具的， 因此之前如果修改过Maven配置， 还需要在IDEA中指定具体使用的是哪一个MAVEN，使用哪一个配置文件。</p><p>▲(Ctrl + Alt + S修改的是当前工程)， 如果需要对新工程进行修改， 则点击<code>File-&gt;New Projects Settings-&gt;Settings for new Projects</code></p><p><img src="/2020/05/15/IDEA配置——自定义快捷键、生成注释/maven_idea.jpg" alt="maven_idea"></p><p>其中<code>User settings file</code>选择之前配置过的Maven_settings就行了，换源在里面修改。注意， mirror标签要放在mirrors标签内才能生效, 跟dependencies一样， 我后来才发现我竟然没放进去。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">   | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">    &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">    &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">    &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">  &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>补充:</p><p>还可以在pom.xml文件中指定改源, 填下下列字段:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自动补全提示"><a class="markdownIt-Anchor" href="#自动补全提示"></a> 自动补全提示:</h2><p>菜单栏Settings(快捷键ctrl + alt + s)-&gt;Editr-&gt;General-&gt;Code Completion-&gt; 取消选中&quot;Match case&quot;</p><h2 id="idea自定义快捷键"><a class="markdownIt-Anchor" href="#idea自定义快捷键"></a> IDEA自定义快捷键</h2><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">英文描述</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">回退上一次光标位置</td><td style="text-align:center">back</td><td style="text-align:center">Ctrl +alt + ←</td></tr><tr><td style="text-align:center">前进到下一次光标位置</td><td style="text-align:center">forward</td><td style="text-align:center">Ctrl +alt + →</td></tr><tr><td style="text-align:center">选中当前部分</td><td style="text-align:center">extend selection</td><td style="text-align:center">Ctrl + D</td></tr><tr><td style="text-align:center">复制当前行↑</td><td style="text-align:center">Duplicate Line or Selection</td><td style="text-align:center">shift + alt + ↑</td></tr><tr><td style="text-align:center">复制当前行↓</td><td style="text-align:center">Duplicate Entire Lines</td><td style="text-align:center">shift + alt + ↓</td></tr><tr><td style="text-align:center">切换到上行</td><td style="text-align:center">Move Line Up</td><td style="text-align:center">alt+↑</td></tr><tr><td style="text-align:center">切换到下行</td><td style="text-align:center">Move Line Down</td><td style="text-align:center">alt+↓</td></tr><tr><td style="text-align:center">下一个方法</td><td style="text-align:center">next Method</td><td style="text-align:center">ctrl + alt+ ↓</td></tr><tr><td style="text-align:center">上一个方法</td><td style="text-align:center">Previous Method</td><td style="text-align:center">ctrl + alt+ ↑</td></tr><tr><td style="text-align:center">生成getter等方法</td><td style="text-align:center">generate</td><td style="text-align:center">ctrl + L</td></tr><tr><td style="text-align:center">在下生成空白一行</td><td style="text-align:center">Start New Line</td><td style="text-align:center">Shift + Enter</td></tr><tr><td style="text-align:center">在上生成空白一行</td><td style="text-align:center">Start New Line Before Current</td><td style="text-align:center">Ctrl+ Shift + Ctrl</td></tr><tr><td style="text-align:center">完成该行——添加末尾分号+换到下行</td><td style="text-align:center">Complete Current Statement</td><td style="text-align:center">ctrl + shift + enter</td></tr><tr><td style="text-align:center">剪切改行（可当成删除改行使用）</td><td style="text-align:center">Cut</td><td style="text-align:center">ctrl + X</td></tr><tr><td style="text-align:center">工程中跳转指定class</td><td style="text-align:center">Navigate-class</td><td style="text-align:center">Ctrl + M</td></tr><tr><td style="text-align:center">新建</td><td style="text-align:center">Main Menu-File-New</td><td style="text-align:center">Ctrl + N</td></tr><tr><td style="text-align:center">关闭当前标签页</td><td style="text-align:center">Editor Tabs - Close</td><td style="text-align:center">Ctrl + W</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>未改变的快捷键设置</p><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">英文描述</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">格式化代码</td><td style="text-align:center">Reformat Code</td><td style="text-align:center">ctrl + alt + L</td></tr><tr><td style="text-align:center">根据上下文完成动作（导包）</td><td style="text-align:center">Show Context Actions</td><td style="text-align:center">Alt + enter</td></tr><tr><td style="text-align:center">优化import导入</td><td style="text-align:center">Optimize lmports</td><td style="text-align:center">Shift + Ctrl + O</td></tr><tr><td style="text-align:center">插入生成模板(psvm)</td><td style="text-align:center">Insert Live Template</td><td style="text-align:center">Ctrl + J</td></tr><tr><td style="text-align:center">打开设置面板</td><td style="text-align:center">open settings</td><td style="text-align:center">Ctrl + alt + s</td></tr><tr><td style="text-align:center">统一修改变量名</td><td style="text-align:center">Main Menu - Refactor- Rename</td><td style="text-align:center">Shift + F6</td></tr><tr><td style="text-align:center">搜索指定Class</td><td style="text-align:center">Main Menu-Navigate-class</td><td style="text-align:center">Ctrl + M</td></tr><tr><td style="text-align:center">重写方法</td><td style="text-align:center">override Methods</td><td style="text-align:center">Ctrl + o</td></tr><tr><td style="text-align:center">查看类继承关系</td><td style="text-align:center"></td><td style="text-align:center">ctrl+H</td></tr><tr><td style="text-align:center">查看类继承关系图</td><td style="text-align:center"></td><td style="text-align:center">ctrl+alt+H</td></tr></tbody></table><p>▲、以上以windows设置为模板修改</p><h2 id="生成类注释-文件注释"><a class="markdownIt-Anchor" href="#生成类注释-文件注释"></a> <a href="%5Bhttps://blog.csdn.net/qq_34581118/article/details/78409782#%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A%5D(https://blog.csdn.net/qq_34581118/article/details/78409782#%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A)">生成类注释、文件注释</a></h2><blockquote><p>没弄图， 主要是按照<a href="%5Bhttps://blog.csdn.net/qq_34581118/article/details/78409782#%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A%5D(https://blog.csdn.net/qq_34581118/article/details/78409782#%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A)">idea生成类注释和方法注释的正确方法</a>配置的</p></blockquote><h3 id="生成类注释"><a class="markdownIt-Anchor" href="#生成类注释"></a> 生成类注释</h3><ol><li>打开Preferences</li><li>Editor -&gt; File and Code Templates -&gt; Files -&gt; Class</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != "")package $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line">#parse("File Header.java")</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@program</span>: $&#123;PROJECT_NAME&#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span>: $&#123;description&#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>: MrLi</span></span><br><span class="line"><span class="comment">* <span class="doctag">@create</span>: $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;HOUR&#125;:$&#123;MINUTE&#125;</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;NAME&#125; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成方法注释"><a class="markdownIt-Anchor" href="#生成方法注释"></a> 生成方法注释</h3><ol><li>打开Preferences</li><li>Editor -&gt; Live Templates -&gt; 点击右边加号为自己添加一个Templates Group -&gt; 然后选中自己的Group-&gt;再次点击加号添加Live Templates</li><li><a href="http://xn--c1h978l9vlkycv0b31ip06ax0emv6bxteeq1b.No" target="_blank" rel="noopener">记得要把最下面的提示▲.No</a> applicable contexts yet.Define-&gt;设置为java</li><li>然后在Edit variables里面添加参数和返回值的自动取值</li></ol><p>按上述步骤设置完后就可以使用了： 在方法上面直接输入<code>/ + 你设置的Abbreviation快捷键 + tab</code>键就直接生成了 （我设置的是<code>/ + q + tab</code>）</p><p>神秘密码(Template text中填的):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">** </span><br><span class="line">* @Description: $description$ </span><br><span class="line">* @Param: $params$ </span><br><span class="line">* @Return: $returns$ </span><br><span class="line">* @Author: MrLi</span><br><span class="line">* @Date: $date$ </span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="删除没有用到的包"><a class="markdownIt-Anchor" href="#删除没有用到的包"></a> 删除没有用到的包</h2><p>1.手动快捷键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Alt + O1</span><br></pre></td></tr></table></figure><p>2.配置自动清理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Alt + S 打开设置-&gt;editor-&gt;auto import</span><br></pre></td></tr></table></figure><p><img src="/2020/05/15/IDEA配置——自定义快捷键、生成注释/import.jpg" alt="import"></p><h2 id="intellij-idea-报错error-java-不支持发行版本5"><a class="markdownIt-Anchor" href="#intellij-idea-报错error-java-不支持发行版本5"></a> Intellij idea 报错：Error : java 不支持发行版本5</h2><p>解决方案： <a href="https://blog.csdn.net/qq_22076345/article/details/82392236" target="_blank" rel="noopener">https://blog.csdn.net/qq_22076345/article/details/82392236</a></p><h2 id="intellij-idea-神器居然还有这些小技巧"><a class="markdownIt-Anchor" href="#intellij-idea-神器居然还有这些小技巧"></a> <a href="https://blog.csdn.net/kl28978113/article/details/80305974" target="_blank" rel="noopener">Intellij IDEA 神器居然还有这些小技巧</a>[转]</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;idea配置自定义快捷键-生成注释&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#idea配置自定义快捷键-生成注释&quot;&gt;&lt;/a&gt; IDEA配置——自定义快捷键、生成注释&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;以前因为上JAVA课，还
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>重拾Java笔记</title>
    <link href="https://nymrli.top/2020/05/15/%E9%87%8D%E6%8B%BEJava%E7%AC%94%E8%AE%B0/"/>
    <id>https://nymrli.top/2020/05/15/重拾Java笔记/</id>
    <published>2020-05-15T02:22:04.000Z</published>
    <updated>2020-08-04T16:20:06.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重拾java笔记"><a class="markdownIt-Anchor" href="#重拾java笔记"></a> 重拾Java笔记</h1><blockquote><p>工作主要用Java, 因此开始准备Java基础再补补。根据<a href="http://www.monkey1024.com/javaseroute" target="_blank" rel="noopener">小猴子1024-JAVA基础</a>整理笔记</p></blockquote><h2 id="命名规范"><a class="markdownIt-Anchor" href="#命名规范"></a> <a href="https://www.jianshu.com/p/511cc270400f" target="_blank" rel="noopener">命名规范:</a></h2><blockquote><p>没怎么写， 所以一直忘， 这次写在最前面， 便于翻阅。</p></blockquote><p>大驼峰命名（UpperCamelCase）：<strong>每个单词的第一个字母大写</strong>，其他字母小写。e.g.MyException</p><p>小驼峰命名（lowerCamelCase）：如果仅有一个单词，那么所有字母全部小写，如果是两个及以上的单词组成的名称，那么除了第一个单词是全部小写外，其他都是的首字母大写，其他字母小写。e.g.getMyName</p><hr><p>1.1 包的命名</p><p>包的命名由全部小写的单词组成。一般使用公司的域名的作为自己程序包的唯一前缀，使用倒域名规则，例如：com.baidu.项目名，然后针对每个具体的模块在区分每个模块包名，例如：论坛模块的整体包名：<code>com.baidu.项目名.tribune</code>(域名倒写)</p><p>1.2 类的命名</p><p>类的命名遵循大驼峰命名的规则</p><p>1.3 接口的命名</p><p>接口命名遵循大驼峰命名的规则，以大写的I开头，表示这是一个接口，以able或ible截尾。</p><p>1.4 变量命名</p><p>变量的命名遵循小驼峰命名的规则，其中控件的变量建议使用控件缩写+逻辑名称的格式，例如：</p><p>1.5 常量的命名</p><p>常量名称的每个单词都大写，并且每个单词之间通过下划线（_）连接，例如：</p><p>1.6 方法的命名</p><p>方法的命名遵循小驼峰命名的规则，以动词+名词的方式组成，例如初始化view：initView()。</p><p>1.7 资源文件命名</p><p>全部小写，并通过下划线连接。</p><p>1.7.1 布局文件的命名</p><p>作者：summer_七七<br>链接：<a href="https://www.jianshu.com/p/511cc270400f" target="_blank" rel="noopener">https://www.jianshu.com/p/511cc270400f</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><hr><h2 id="class与文件名"><a class="markdownIt-Anchor" href="#class与文件名"></a> class与文件名:</h2><blockquote><p>在一个Java文件里面，可以声明多个class，但是只能声明一个public class</p></blockquote><ul><li>如果使用class来声明类，文件名可以是任何合法的文件名称，文件名不需要和Class类一致</li><li>如果采用public class来声明class，那么文件名必须和类名一致</li></ul><p>结论: 使用javac命令所编译出的<strong>class文件</strong>的名称<strong>跟java的文件名没有关系</strong>，而是<strong>跟类名一致</strong>。</p><h2 id="函数传参"><a class="markdownIt-Anchor" href="#函数传参"></a> 函数传参:</h2><ul><li>如果参数是基本数据类型, 是会生成一个新的形参</li><li>如果参数是引用数据类型(不包括封装数据类型), 那么会生成该对象的引用（类、 接口类型、 <u>数组类型</u>、 枚举类型、 注解类型、 字符串型）==&gt;引用数据类型变量，调用方法时作为参数是按<strong>引用传递</strong>的</li></ul><p>参看: <a href="https://www.cnblogs.com/maskwolf/p/9972982.html" target="_blank" rel="noopener">Java中的基本数据类型和引用数据类型的区别</a></p><h2 id="代码块的分类"><a class="markdownIt-Anchor" href="#代码块的分类"></a> 代码块的分类</h2><p>使用{}括起来的代码被称为代码块，根据其位置和声明的不同可以分为下面4种：</p><ul><li><strong>局部代码块</strong>，在方法中出现，限定变量生命周期，及早释放，提高内存利用率</li><li><strong>构造代码块</strong>，在类中方法外出现；多个构造方法方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行</li><li><strong>静态代码块</strong>， 在类中方法外出现，并加上static修饰；用于给<strong>类进行初始化，在加载的时候就执行</strong>，并且只执行一次。一般用于加载驱动。</li><li><strong>同步代码块</strong>(后面多线程部分会讲解)</li></ul><h3 id="执行顺序"><a class="markdownIt-Anchor" href="#执行顺序"></a> 执行顺序:</h3><p>1.<strong>静态代码块</strong>，随着类加载而加载,且只执行一次<br>2.<strong>构造代码块</strong>，每创建一个对象就会执行一次，优先于构造方法执行<br>3.<strong>构造方法</strong>，每创建一个对象就会执行一次</p><h2 id="this指针"><a class="markdownIt-Anchor" href="#this指针"></a> this指针</h2><p>▲注意点: 在构造函数中调用该对象的另一个构造方法时,  this(实参)必须写在最前面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//构造方法</span><br><span class="line">//需求：在创建日期对象的时候，默认的日期是:1970-1-1</span><br><span class="line">MyDate()&#123;</span><br><span class="line">    //通过this调用有参的构造方法</span><br><span class="line">    this(1970,1,1);//必须出现在第一行，否则将编译报错</span><br><span class="line">    //构造方法不能这样调用</span><br><span class="line">    //MyDate(1970,1,1);Error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承问题"><a class="markdownIt-Anchor" href="#继承问题"></a> 继承问题：</h2><p>静态代码块Fu<br>静态代码块Zi<br>构造代码块Fu<br>构造方法Fu<br>构造代码块Zi<br>构造方法Zi</p><p>分析：<br>1.系统将Fu.class和Zi.class分别加载到方法区的内存里面，<strong>静态代码</strong>会随着.class文件一块<strong>加载到方法区</strong>里面，所以先打印出了静态代码块中的内容。<br>2.<strong>构造代码块优先于构造方法执行</strong>，父类初始化之前，所以打印出父类中的构造代码块和构造方法中的内容。</p><h2 id="多态"><a class="markdownIt-Anchor" href="#多态"></a> 多态：</h2><blockquote><p>在工作当中尽量面向抽象编程，不要面向具体编程，即合理利用多态——<strong>SOLID原则</strong>中依赖倒置：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。换言之，要针对接口编程，而不是针对实现编程。</p></blockquote><p><strong>多态的优点</strong></p><ul><li>提高程序的扩展性</li><li>降低代码之间的耦合</li></ul><p><strong>用法</strong></p><ul><li>向上转型：上面代码中子类向父类型进行转换，是<strong>自动类型转换</strong>。</li><li>向下转型： 父类向子类型转换，是<strong>强制类型转换</strong>。</li></ul><h2 id="重写"><a class="markdownIt-Anchor" href="#重写"></a> 重写</h2><p>重写，也叫做覆盖，当父类中的方法无法满足子类需求时，子类可以将父类的方法进行重写编写来满足需求。比如孩子继承了父亲的房子，可以将房子重新装修。<br>方法重写的条件：</p><ul><li>两个类必须是继承关系</li><li>必须具有相同的方法名，相同的返回值类型，相同的参数列表.</li><li>重写的方法不能比被重写的方法拥有更低的访问权限。</li><li>重写的方法不能比被重写的方法抛出更宽泛的异常。(关于异常后面的章节再讲。)</li><li>私有的方法不能被重写。</li><li>构造方法无法被重写，因为构造方法无法被继承。</li><li>静态的方法不存在重写。</li><li>重写指的是成员方法，和成员变量无关。</li></ul><h2 id="super关键字"><a class="markdownIt-Anchor" href="#super关键字"></a> Super关键字:</h2><p>什么时候使用super？</p><ul><li>子类和父类中都有某个数据，例如，子类和父类中都有name这个属性。如果要再子类中访问父类中的name属性，需要使用super。例1</li><li>子类重写了父类的某个方法（假设这个方法名叫m1），如果在子类中需要调用父类中的m1方法时，需要使用super。例1</li><li>子类调用父类中的构造方法时，需要使用super。</li></ul><h2 id="object类之finalize方法"><a class="markdownIt-Anchor" href="#object类之finalize方法"></a> Object类之finalize方法</h2><blockquote><p>java对象如果没有更多的引用指向它（引用技术），则该java对象成为垃圾数据，等待垃圾回收器的回收，垃圾回收器在回收这个java对象之前会自动调用该对象的finalize方法==&gt;可以理解为解析函数</p></blockquote><h2 id="访问控制权限"><a class="markdownIt-Anchor" href="#访问控制权限"></a> 访问控制权限</h2><p><strong>方法访问控制权限</strong></p><table><thead><tr><th><strong>修饰词</strong></th><th><strong>本类</strong></th><th><strong>同一个包的类</strong></th><th><strong>子类</strong></th><th><strong>任何地方</strong></th></tr></thead><tbody><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>default（默认）</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p><strong>方法访问控制权限</strong></p><p>▲。注意以上对类的修饰只有：public和default，内部类除外(只有内部类可以设置为protected/private)</p><p>priavte和public都比较好理解和记忆，这里就不演示了，主要演示一下不同包下的两个具有父子关系的类里面使用protected和default的区别。</p><h3 id="构造函数的权限问题"><a class="markdownIt-Anchor" href="#构造函数的权限问题"></a> 构造函数的权限问题:</h3><p>public是一个<a href="https://www.baidu.com/s?wd=%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">访问权限</a>（访问修复饰符）。一般<a href="https://www.baidu.com/s?wd=%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">构造函数</a>可加可不加public。</p><ul><li>如果加上制public,就代表此类可以对外开放,其他的类可以继承它,外部也可以实例化该对象。</li><li>如果不加public,则默认的修饰词是default,表示可以被这个类的子类或者和这个类同包的类调用。</li></ul><p>除了这两个,你还可以添加private和default</p><p><strong>记录一下默认修饰符</strong>：</p><ul><li>类（class）: ****缺省****就是没有修饰符，在同一个包中的类中可见，在其他包中不能用import导入。</li><li>变量（variable）: <strong>缺省</strong>在同一个包中可见，子类不在一个包中，子类中也不可见</li><li>方法(method)：<strong>缺省</strong>在同一个包中可见，子类不在一个包中，子类中也不可见</li><li>接口（interface）： <strong>缺省</strong>同一个包中可见<ul><li>Java的interface中，成员变量的默认修饰符为：public static final；方法的默认修饰符，方法的默认修饰符是：public abstract（接口中的方法只能使用<strong>public</strong>和<strong>abstract</strong>修饰符 ）==&gt; <strong>接口只是对一类事物属性和行为的更高次抽象；对修改关闭，对扩展开放，可以说是java中开闭原则的一种体现吧。</strong></li></ul></li></ul><h2 id="final关键字"><a class="markdownIt-Anchor" href="#final关键字"></a> <strong>Final关键字:</strong></h2><blockquote><p>特点为确定不可变</p></blockquote><ul><li>final修饰的类无法被继承。</li><li>final修饰的方法无法被重写。</li><li>final修饰的局部变量，一旦赋值，不可再改变。</li><li>final修饰的成员变量必须初始化值。</li></ul><h2 id="static关键字"><a class="markdownIt-Anchor" href="#static关键字"></a> static关键字</h2><h3 id="static的作用"><a class="markdownIt-Anchor" href="#static的作用"></a> static的作用</h3><ul><li>static可以修饰变量，被static修饰的变量叫做静态变量，<u>静态变量在类加载阶段赋值，并且只赋值一次</u>。请看例1</li><li>static可以修饰方法，被static修饰的方法叫做静态方法，<strong>不用创建对象就能能直接访问该方法</strong>，即使用类名.静态方法名的方式。静态方法不能访问非静态的数据，静态方法不能使用this。请看例2</li><li>static可以定义静态语句块，<u>静态语句块在类加载阶段执行，并且只执行一次，并且是自上而下的顺序执行，在构造方法之前执行</u>。请看例3</li></ul><p>static修饰的变量、方法、代码块都是隶属于**类(class)**级别的,跟对象无关。某一类物体如果可以被多个其他物体所共享，那么可以将这类物体使用static修饰。<br>比如wifi，多个人可以共同使用同一个wifi，所以wifi可以使用static修饰。手机是每人使用自己的，就不能用static修饰。</p><h2 id="抽象类的特点"><a class="markdownIt-Anchor" href="#抽象类的特点"></a> 抽象类的特点</h2><ul><li>抽象类无法被实例化，无法创建抽象类的对象。</li><li>虽然抽象类没有办法实例化，但是<strong>抽象类也有构造方法</strong>，该构造方法是给子类创建对象用的。这也算是多态的一种。</li><li>抽象类中不一定有抽象方法，但抽象方法必须出现在抽象类中。</li><li>抽象类中的子类可以是抽象类，如果不是抽象类的话必须对抽象类中的抽象方法进行重写。</li><li>抽象类和抽象方法不能被final修饰</li></ul><h2 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口：</h2><ul><li>接口中只能出现常量和抽象方法（jdk8之后可以有default方法）</li><li>接口里面<strong>没有构造方法</strong>，无法创建接口的对象</li><li>接口和接口之间支持多继承，即一个接口可以有多个父接口</li><li>一个类可以实现多个接口，即一个类可以有多个父接口</li><li>一个类如果实现了接口，那么这个类需要重写接口中所有的抽象方法（建议），如果不重写则这个类需要声明为抽象类（不建议）</li></ul><h2 id="equals"><a class="markdownIt-Anchor" href="#equals"></a> equals</h2><blockquote><p>== 两边如果是引用类型，则比较内存地址，地址相同则是true,反之则false.</p></blockquote><ul><li>Object中的equals方法比较的是两个引用的内存地址。</li><li>但是在现实的业务逻辑当中，不应该比较内存地址，<strong>应该比较地址里面的内容</strong>，所以需要对equals方法进行重写。</li></ul><p>==&gt;▲注意：在使用自己创建的类进行equals比较时，一定要先重写equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据需求规定重写equals方法</span></span><br><span class="line"><span class="comment">//s1.equals(s2);</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>==obj)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Star)&#123;</span><br><span class="line">        Star s = (Star)obj;</span><br><span class="line">        <span class="keyword">if</span>(s.id == id &amp;&amp; s.name.equals(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类的分类"><a class="markdownIt-Anchor" href="#内部类的分类"></a> 内部类的分类</h2><p>内部类，顾名思义就是在一个类的内部声明一个类。内部类主要分为：</p><ul><li>静态内部类</li><li>匿名内部类</li><li>成员内部类</li><li>局部内部类</li></ul><h2 id="异常的分类"><a class="markdownIt-Anchor" href="#异常的分类"></a> 异常的分类</h2><blockquote><p>异常: 指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止——JVM处理异常的方式是中断处理。</p></blockquote><p>异常主要分为：Error、一般性异常、RuntimeException</p><ul><li>Error(强制中断错误)：如果程序出现了Error，那么将无法恢复，只能重新启动程序，最典型的Error的异常是：OutOfMemoryError</li><li>Exception（一般性异常（<strong>编译时</strong>异常）：出现了这种异常必须在程序里面显示的处理，否则程序无法编译通过</li><li>RuntimeException（<strong>运行时</strong>异常）：此种异常可以不用显示的处理，例如被0除异常，java没有要求我们一定要处理。</li></ul><p><img src="http://www.monkey1024.com/wp-content/uploads/2017/04/1%E5%BC%82%E5%B8%B8%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="å¼å¸¸ç»§æ¿ç»æå¾"></p><h3 id="jvm是如何处理异常的"><a class="markdownIt-Anchor" href="#jvm是如何处理异常的"></a> JVM是如何处理异常的</h3><ul><li>main方法自己将该问题处理,然后继续运行</li><li>自己没有针对的处理方式,只有交给调用main的jvm来处理，jvm有一个默认的异常处理机制。例如上面出现的ArithmeticException，jvm在控制台里面打印出来了异常信息。</li></ul><p>大致流程: native method自己解决-&gt;交给Main解决-&gt;交给JVM解决</p><p>更好的讲解: <a href="https://www.bilibili.com/video/BV1A4411K7Gx?p=282" target="_blank" rel="noopener">B站视频</a></p><h3 id="throw和throws"><a class="markdownIt-Anchor" href="#throw和throws"></a> throw和throws</h3><p>throws</p><ul><li>用在方法声明后面，跟的是<strong>异常类名</strong>    <code>public void m1() throws Exception</code></li><li>可以跟多个异常类名，用逗号隔开</li><li>表示抛出异常，由<strong>该方法的调用者来处理</strong> (<strong>向上抛出指定异常</strong>)</li></ul><p>throw</p><ul><li>用在方法体内，跟的是<strong>异常对象名</strong>    ==&gt; <code>throw new Exception()</code></li><li>只能抛出一个异常对象名</li><li>表示抛出异常，由方法体内的语句处理，<strong>需要直接在此处解决异常</strong>(在当前语句抛出指定异常)</li></ul><h3 id="自定义异常"><a class="markdownIt-Anchor" href="#自定义异常"></a> 自定义异常</h3><p>1.自定义异常类一般都是以Exception结尾，说明该类是一个异常类<br>2.自定义异常类，必须的继承Exception或者RuntimeException<br>- 继承Exception：那么自定义的异常类就是一个编译期异常，如果方法内部抛出了编译期异常，就必须处理这个异常，要么throws，要么try…catch<br>- 继承RuntimeException：那么自定义的异常类就是一个运行期异常，无需处理，交给虚拟机处理（中断处理）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个空参数的构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个带异常信息的构造方法</span></span><br><span class="line"><span class="comment">     * 查看源码发现，所有的异常类都会有一个带异常信息的构造方法，方法内部会调用父类带异常信息的构造方法，让父类来处理这个异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="catch"><a class="markdownIt-Anchor" href="#catch"></a> catch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span> (ArithmeticException | ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="comment">// 出现多个异常,采取同样的处理措施</span></span><br><span class="line">            <span class="comment">// 多个异常见用 | 隔开</span></span><br><span class="line">            <span class="comment">// 多个异常必须是平级关系</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串的不可变性"><a class="markdownIt-Anchor" href="#字符串的不可变性"></a> 字符串的不可变性</h2><h3 id="string类不能被继承"><a class="markdownIt-Anchor" href="#string类不能被继承"></a> String类不能被继承</h3><p>通过源码可以看到String类前面加了final修饰，因此String类是不能够被继承的。将其设置为不能被继承的原因是为了减少歧义。</p><h3 id="字符串string的不可变性"><a class="markdownIt-Anchor" href="#字符串string的不可变性"></a> 字符串（String）的不可变性</h3><p>String创建好之后值是不可以被改变的，这里指的是<strong>在堆中的字符串的值</strong>是不可以被改变。</p><p>String不可变的主要原因是其底层使用了一个final修饰的byte数组(jdk9之后版本中)，final修饰的变量是不能被改变的。在jdk8版本中，String底层使用的是final修饰的char数组。这个版本之间的变化。</p><h3 id="string-stringbuffer-stringbuilder"><a class="markdownIt-Anchor" href="#string-stringbuffer-stringbuilder"></a> String、StringBuffer、StringBuilder</h3><ul><li><p>拼接执行效率: <code>String &lt; StringBuffer &lt; StringBuilder</code></p></li><li><p>线程安全:</p><table><thead><tr><th></th><th>线程安全</th><th>原因</th></tr></thead><tbody><tr><td>String</td><td>安全</td><td>常量无线程安全问题</td></tr><tr><td>stringBuffer</td><td>安全</td><td>方法全为syncronized关键字修饰</td></tr><tr><td>stringbuilder</td><td>不安全</td><td>无</td></tr></tbody></table></li></ul><h3 id="字符串常量池"><a class="markdownIt-Anchor" href="#字符串常量池"></a> 字符串常量池</h3><p>我们声明的字符串会放到一个叫做字符串常量池的地方，这样可以减少内存的使用，字符串常量池是堆的一部分。</p><p>如果用<code>new String(&quot;monkey&quot;)</code>会在字符串常量池中再建一个monkey, 其实是浪费了内存。所以开发中建议使用String s = “monkey1024”;这种方式创建字符串对象，可以减少堆内存的使用。==&gt;<strong>比较两个字符串是否一致最好使用equals方法</strong>(看引用的内存地址是否一致)</p><p>详细请看: <a href="http://www.monkey1024.com/javase/481" target="_blank" rel="noopener">http://www.monkey1024.com/javase/481</a></p><p><img src="/2020/05/15/重拾Java笔记/JVM%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="JVM内存图"></p><h2 id="string-stringbuffer-stringbuilder-2"><a class="markdownIt-Anchor" href="#string-stringbuffer-stringbuilder-2"></a> String、StringBuffer、StringBuilder</h2><ul><li>如果需要对字符串进行频繁拼接的话，建议使用StringBuffer或者StringBuilder</li></ul><h3 id="stringbuffer"><a class="markdownIt-Anchor" href="#stringbuffer"></a> StringBuffer</h3><ul><li>StringBuffer是一个字符串缓冲区，如果需要频繁的对字符串进行拼接时，建议使用StringBuffer。</li><li>StringBuffer的底层是byte数组（jdk9之后），jdk8中底层是char数组，如果没有明确设定，则系统会默认创建一个长度为16的byte类型数组，在使用时如果数组容量不够了，则会通过数组的拷贝对数组进行扩容，所以在使用StringBuffer时最好预测并手动初始化长度，这样能够减少数组的拷贝，从而提高效率。</li></ul><h3 id="stringbuilder和stringbuffer的区别"><a class="markdownIt-Anchor" href="#stringbuilder和stringbuffer的区别"></a> StringBuilder和StringBuffer的区别</h3><p>通过API可以看到StringBuilder和StringBuffer里面的方法是一样的，那他们有什么区别呢？<br>StringBuffer是jdk1.0版本中加入的，是<strong>线程安全的</strong>，效率低<br>StringBuilder是jdk5版本加入的，是<strong>线程不安全的</strong>，效率高</p><h2 id="什么是自动拆箱和自动装箱"><a class="markdownIt-Anchor" href="#什么是自动拆箱和自动装箱"></a> 什么是自动拆箱和自动装箱？</h2><ul><li>自动装箱：把基本类型转换为包装类类型</li><li>自动拆箱：把包装类类型转换为基本类型</li></ul><h2 id="集合"><a class="markdownIt-Anchor" href="#集合"></a> 集合</h2><blockquote><p>接口Collection: 由三个接口组成——List / Set / Queue</p></blockquote><h3 id="集合的由来"><a class="markdownIt-Anchor" href="#集合的由来"></a> 集合的由来</h3><p>数组长度是固定,如果要改变数组的长度需要创建新的数组将旧数组里面的元素拷贝过去，使用起来不方便。<br>java给开发者提供了一些集合类，能够存储任意长度的对象，长度可以随着元素的增加而增加,随着元素的减少而减少，使用起来方便一些。</p><h3 id="集合类的一些特点"><a class="markdownIt-Anchor" href="#集合类的一些特点"></a> 集合类的一些特点</h3><ul><li>List：里面存放的数据是有顺序的，可以存放重复的数据。</li><li>Set：里面存放的数据是没有顺序的，不能存放重复的数据。</li><li>Queue：是一个队列，里面的数据是先进先出，可以存放重复的数据。</li></ul><h3 id="区别"><a class="markdownIt-Anchor" href="#区别"></a> 区别</h3><ul><li>区别1:<ul><li>数组既可以存储基本数据类型,又可以存储引用数据类型,基本数据类型存储的是值,引用数据类型存储的是地址值</li><li>集合只能存储引用数据类型(对象)，如果存储基本数据类型时，会自动装箱变成相应的包装类</li></ul></li><li>区别2:<ul><li>数组长度是固定的,不能自动增长</li><li>集合的长度的是可变的,可以根据元素的增加而自动增长</li></ul></li></ul><h2 id="list两个子类的特点"><a class="markdownIt-Anchor" href="#list两个子类的特点"></a> List两个子类的特点</h2><p>ArrayList:</p><ul><li>底层数据结构是数组，查询快，增删慢。</li></ul><p>LinkedList:</p><ul><li>底层数据结构是链表，查询慢，增删快。</li></ul><p>ArrayList和LinkedList的区别</p><ul><li>ArrayList底层是数组结果,查询和修改快</li><li>LinkedList底层是链表结构的,增和删比较快,查询和修改比较慢</li><li>共同点:都是<strong>线程不安全的</strong></li></ul><h3 id="arraylist线程安全的方案"><a class="markdownIt-Anchor" href="#arraylist线程安全的方案"></a> ArrayList线程安全的方案</h3><p>如果使用ArrayList需要考虑线程安全的问题，有两种方案：</p><ul><li><p>可以使用Collections工具类中的synchronizedList方法可以将ArrayList变成线程安全的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list = Collections.synchronizedList(new ArrayList());</span><br></pre></td></tr></table></figure></li><li><p>使用java.util.concurrent包下面的CopyOnWriteArrayList，使用方式跟ArrayList一样</p></li></ul><h2 id="集合数组的互转"><a class="markdownIt-Anchor" href="#集合数组的互转"></a> <a href="http://www.monkey1024.com/javase/565" target="_blank" rel="noopener">集合数组的互转</a></h2><p>集合转数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line">list.add(<span class="string">"c"</span>);</span><br><span class="line">list.add(<span class="string">"d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当集合转换数组时,数组长度如果是&lt;=集合的size时,转换后的数组长度等于集合的size</span></span><br><span class="line"><span class="comment">//如果数组的长度大于了size,分配的数组长度就和你指定的长度一样</span></span><br><span class="line">String[] array = list.toArray(<span class="keyword">new</span> String[<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">for</span>(String s : array)&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组转集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意转换后的集合不能调用其add方法向里面添加数据，否则会报出UnsupportedOperationException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组转集合</span></span><br><span class="line">String[] arr = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line"><span class="comment">//将数组转换成集合</span></span><br><span class="line">List&lt;String&gt; listArray = Arrays.asList(arr);                </span><br><span class="line"><span class="comment">//不能添加</span></span><br><span class="line"><span class="comment">//listArray.add("d");                                    </span></span><br><span class="line">System.out.println(listArray);</span><br><span class="line"><span class="comment">//通过这种方式将listArray转换成真正的ArrayList</span></span><br><span class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;String&gt;(listArray);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Arrays.asList((T… a))的源码可以看到，这里面返回的ArrayList是在Arrays类里面定义的一个内部类，并非java.util包下的ArrayList。</span></span><br></pre></td></tr></table></figure><p>基本数据类型的数组转换成集合,会将整个数组当作一个对象转换，下面程序将会打印出list的对象地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;            </span><br><span class="line">List&lt;<span class="keyword">int</span>[]&gt; list = Arrays.asList(arr);            </span><br><span class="line">System.out.println(list);</span><br><span class="line"><span class="comment">// ==&gt;[[I@282ba1e]</span></span><br></pre></td></tr></table></figure><p>==&gt;▲.将数组转换成集合,数组中的数据必须是引用数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;                    </span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(arr);</span><br><span class="line">System.out.println(list);</span><br><span class="line"><span class="comment">// ==&gt;[11, 22, 33, 44, 55]</span></span><br></pre></td></tr></table></figure><h2 id="collection集合"><a class="markdownIt-Anchor" href="#collection集合"></a> Collection集合</h2><h3 id="set的特点"><a class="markdownIt-Anchor" href="#set的特点"></a> Set的特点</h3><p>Set里面存储的元素不能重复，没有索引，存取顺序不一致。</p><p><strong>▲.这里需要注意：在向HashSet中存放自定义类型对象时，一定要<a href="###HashCode%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%9C%E7%94%A8">重写hashCode和equals方法</a></strong>，原因是无重复的话需要比较， 所以得。</p><h3 id="treeset简介"><a class="markdownIt-Anchor" href="#treeset简介"></a> TreeSet简介</h3><p>TreeSet的特点是可以对存放进去的元素<strong>进行排序</strong>。</p><p>∴ 使用TreeSet存储自定义类型。这里还是存储之前定义的Person对象，<strong>需要实现Comparable接口并且重写compareTo方法</strong>，先根据name的字典顺序排序，然后再根据年龄进行排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nymrli.day07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.scene.PerspectiveCamera;</span><br><span class="line"><span class="keyword">import</span> javafx.util.converter.PercentageStringConverter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: testIDEA</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Set测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MrLi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span>: 2020-05-16 09:09</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">day07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        HashSet&lt;String&gt; hs = new HashSet&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        boolean b1 = hs.add("a");</span></span><br><span class="line"><span class="comment">//        System.out.println(hs);</span></span><br><span class="line"><span class="comment">//        boolean c1 = hs.add("b");</span></span><br><span class="line"><span class="comment">//        System.out.println(hs);</span></span><br><span class="line"><span class="comment">//        for (String s : hs) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(s);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Q1:</span></span><br><span class="line"><span class="comment">//        HashSet&lt;Integer&gt; hashSet = new HashSet&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        Random random = new Random();</span></span><br><span class="line"><span class="comment">//        while (hashSet.size() &lt; 10) &#123;</span></span><br><span class="line"><span class="comment">//            int num = random.nextInt(20);</span></span><br><span class="line"><span class="comment">//            hashSet.add(num);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        for (Integer i : hashSet) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(i);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Q2;Treeset</span></span><br><span class="line">        TreeSet&lt;Person&gt; ts = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        ts.add(<span class="keyword">new</span> Person(<span class="string">"cl"</span>, <span class="number">30</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> Person(<span class="string">"qsy"</span>, <span class="number">25</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> Person(<span class="string">"sxh"</span>, <span class="number">30</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> Person(<span class="string">"ll"</span>, <span class="number">15</span>));</span><br><span class="line">        <span class="keyword">for</span> (Person p : ts) &#123;</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(getName(), person.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(getName(), age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nameSame = <span class="keyword">this</span>.name.compareTo(o.name);</span><br><span class="line">        <span class="keyword">if</span> (nameSame != <span class="number">0</span>)&#123;     <span class="comment">// 如果name不相等</span></span><br><span class="line">            <span class="comment">// 当compareTo方法返回正数的时候，系统将元素存储到右边，所以集合存取顺序一致</span></span><br><span class="line">            <span class="keyword">return</span> nameSame;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.age - o.age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map接口概述"><a class="markdownIt-Anchor" href="#map接口概述"></a> Map接口概述</h3><blockquote><p>map中的元素是以键-值的方式存在的，通过键可以获取到值，键是不可以重复的，跟地图比较像，通过一个坐标就可以找到具体的位置。该接口由三个类实现: <code>HashMap / HashTable / AbstractMap</code></p></blockquote><p>▲与前两个相比，添加元素的函数由<code>add =&gt; put</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">day08_Map</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; hashmap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        hashmap.put(<span class="string">"Cl"</span>, <span class="number">18</span>);</span><br><span class="line">        hashmap.put(<span class="string">"GJQ"</span>, <span class="number">15</span>);</span><br><span class="line">        hashmap.put(<span class="string">"SXH"</span>, <span class="number">10</span>);</span><br><span class="line">        hashmap.put(<span class="string">"HSR"</span>, <span class="number">12</span>);</span><br><span class="line">        System.out.println(hashmap);</span><br><span class="line">        System.out.println(hashmap.containsValue(<span class="string">"CL"</span>));</span><br><span class="line">        System.out.println(hashmap.containsKey(<span class="string">"GJQ"</span>));</span><br><span class="line">        System.out.println(<span class="string">"------"</span>);</span><br><span class="line">        Collection&lt;Integer&gt; values = hashmap.values();</span><br><span class="line">        System.out.println(values);</span><br><span class="line">        System.out.println(<span class="string">"----------"</span>);</span><br><span class="line">        Integer res = hashmap.remove(<span class="string">"SXH"</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Map的遍历</span></span><br><span class="line">        <span class="comment">// 方法一</span></span><br><span class="line">        Set&lt;String&gt; keySet = hashmap.keySet();</span><br><span class="line">        Iterator&lt;String&gt; iterator = keySet.iterator();</span><br><span class="line">        System.out.println(keySet);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            String key = iterator.next();</span><br><span class="line">            System.out.println(<span class="string">"Key: "</span> + key + <span class="string">" value: "</span> + hashmap.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">        <span class="comment">// 上述的代替写法</span></span><br><span class="line"><span class="comment">//        for (String key : keySet) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println("Key:" + key + "value: " + hashmap.get(key));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法二</span></span><br><span class="line">        <span class="comment">// Map中的键和值被封装成了Entry对象,并存储在Set集合中，通过entrySet()可以获取到这个Set集合。</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = hashmap.entrySet();</span><br><span class="line"><span class="comment">//        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; entriesIterator = entries.iterator();</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; en : entries) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Key:"</span> + en.getKey() + <span class="string">" value: "</span> + en.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"_______________"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LinkedHashMap</strong></p><ul><li>LinkedHashMap的特点：存取顺序一致</li></ul><p><strong>TreeMap</strong></p><ul><li>TreeMap的特点：可以对存储的元素进行排序</li></ul><h4 id="hashmap和hashtable的区别"><a class="markdownIt-Anchor" href="#hashmap和hashtable的区别"></a> HashMap和Hashtable的区别</h4><ul><li>Hashtable是JDK1.0版本出现的,是线程安全的,效率低，不可以存储null键和null值</li><li>HashMap是JDK1.2版本出现的，是线程不安全,效率高，可以存储null键和null值</li></ul><h3 id="collection工具"><a class="markdownIt-Anchor" href="#collection工具"></a> Collection工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(list);</span><br><span class="line">Collections.shuffle(list);</span><br><span class="line">Collections.reverse(list);</span><br><span class="line">Collections.binarySearch(list, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><h3 id="collection总结"><a class="markdownIt-Anchor" href="#collection总结"></a> Collection总结</h3><ul><li><p><strong>List(存取有序,有索引,可以重复)</strong></p><ul><li>ArrayList<br>底层是数组实现的,线程不安全,查找和修改快,增和删比较慢</li><li>LinkedList<br>底层是链表实现的,线程不安全,增和删比较快,查找和修改比较慢</li><li>Vector<br>底层是数组实现的,线程安全的,无论增删改查都慢</li></ul></li></ul><p>如果查找和修改多,用ArrayList<br>如果增和删多,用LinkedList<br>如果都多,用ArrayList</p><ul><li><p><strong>Set(存取无序,无索引,不可以重复)</strong></p><ul><li>HashSet<br>底层是哈希算法实现</li><li>LinkedHashSet<br>底层是链表实现,可以保证元素唯一,存取顺序一致</li><li>TreeSet<br>底层是二叉树算法实现，可以排序，存储自定义类型时需要注意实现Comparable接口并重写compareTo方法</li></ul><p>一般在开发的时候不需要对存储的元素排序,所以在开发的时候大多用HashSet,HashSet的效率比较高.TreeSet在面试的时候比较多</p></li><li><p><strong>Map</strong></p><ul><li>HashMap<br>底层是哈希算法</li><li>LinkedHashMap<br>底层是链表，存取顺序一致</li><li>TreeMap<br><strong>底层是二叉树算法</strong>，可以排序</li></ul><p>开发中用HashMap比较多</p></li></ul><h2 id="hashcode"><a class="markdownIt-Anchor" href="#hashcode"></a> HashCode</h2><h3 id="hashcode方法的作用"><a class="markdownIt-Anchor" href="#hashcode方法的作用"></a> HashCode方法的作用</h3><p>在HashSet中的元素是不能重复的，jvm可以通过equals方法来判断两个对象是否相同，假设自定义一个Person类里面有10个成员变量，每调用一次equals方法需要做10次if判断分别比较这10个成员变量是否相等，如果想HashSet中存放100个对象，那就会做1000次if判断，数据量大的话会严重影响性能。<br>要解决这个问题的话可以这样做，将一些特征相似或相近的对象归类放到一起给他们一个编号，在做equals判断时，先比较这些编号，编号相同的话再去比较equals，这样可以减少一些比较次数。这个编号可以通过HashCode方法获得。<strong>HashCode方法的作用就是将对象进行分类，然后获取到编号值。</strong><br>举个例子，图书馆里面的书都是分好类的，想找《java编程思想》这本书，先找到计算机类的书架，然后再去找就行，倘若图书馆里面的书籍没有分类，那找起来就如大海捞针。</p><h3 id="如何重写hashcode"><a class="markdownIt-Anchor" href="#如何重写hashcode"></a> 如何重写HashCode</h3><p>HashCode算法决定了对象的归类，如果算法编写的不好可能不会对性能有所提升。在编写时最好可以让对象均匀的散列开，这里假设可以将对象分为10个种类，那么每个种类中存放的对象的数量最好不要相差太多。</p><p>将Person的name和age属性都加上了，可以将Person进行细分，开发中建议使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">    result = prime * result + age;</span><br><span class="line">    result = prime * result + ((name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么上面的prime的值是31？其实这个值改成别的也可以，只不过定义为31之后有一些好处：</p><ul><li>31是一个质数,质数是能被1和自己本身整除的数，并且这个数不大也不小</li><li>31这个数好算,2的五次方-1,2向左移动5位</li></ul><h3 id="关于重写hashcode方法的一些说明"><a class="markdownIt-Anchor" href="#关于重写hashcode方法的一些说明"></a> 关于重写HashCode方法的一些说明</h3><ul><li>任何时候对同一对象多次调用 hashCode 方法，都必须一直返回同样的整数。</li><li>如果两个对象通过 equals(Object) 方法来比较相等，那么这两个对象的 hashCode的值必须相等。</li><li>如果两个对象通过 equals(Object) 方法比较结果不等，可以相等也可以不相等。</li></ul><h2 id="properties类"><a class="markdownIt-Anchor" href="#properties类"></a> Properties类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(<span class="keyword">new</span> FileReader(<span class="string">"store.txt"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = properties.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String k : set) &#123;</span><br><span class="line">            String value = properties.getProperty(k);</span><br><span class="line">            System.out.println(k + <span class="string">"="</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">storeInto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileWriter fileWriter = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.setProperty(<span class="string">"陈力"</span>, <span class="string">"18"</span>);</span><br><span class="line">            properties.setProperty(<span class="string">"SQY"</span>, <span class="string">"19"</span>);</span><br><span class="line">            properties.store(fileWriter, <span class="string">"Save data"</span>);</span><br><span class="line">            fileWriter = <span class="keyword">new</span> FileWriter(<span class="string">"store.txt"</span>);</span><br><span class="line">            fileWriter.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型的概念"><a class="markdownIt-Anchor" href="#泛型的概念"></a> 泛型的概念</h2><p>在编写集合相关代码时在eclipse里面总有一些黄色警告，在不使用注解的情况下，使用泛型之后，就不会有这些黄色警告了。<br>通过API可以看到Collection,List,ArrayList,这几个类里面都有,这个就是泛型，里面的E可以是任何引用数据类型，使用泛型指明了数据类型之后，这个集合里面只能存储这种数据类型的对象。</p><p>不使用泛型时，要进行多次类型强制转换。如<code>List list = new ArrayList();</code></p><p>使用泛型: <code>List&lt;Person&gt; list = new ArrayList&lt;Person&gt;();</code></p><h3 id="泛型的优点"><a class="markdownIt-Anchor" href="#泛型的优点"></a> <strong>泛型的优点</strong></h3><ul><li>可以统一集合中的数据类型，提高安全性</li><li>可以减少强制类型转换</li></ul><h3 id="自定义泛型"><a class="markdownIt-Anchor" href="#自定义泛型"></a> 自定义泛型</h3><p>通过JDK的源码可以看到，泛型一般写的都是或者，里面的T和E就是表示使用者指定的类型。可以自己定义一个使用泛型的类</p><h3 id="泛型通配符"><a class="markdownIt-Anchor" href="#泛型通配符"></a> 泛型通配符</h3><p>在实际工作当中，有可能通过调用某个方法来接受一个返回值List的数据，这样就不<strong>太好确定返回值中的数据类型</strong>，这样可以使用泛型通配符&lt;?&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;?&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();<span class="comment">//=号右边可能是通过调用某个方法返回的List</span></span><br></pre></td></tr></table></figure><p>使用泛型通配符限定子类或者父类</p><ul><li><code>? extends E</code><br>向下限定，E及其子类，可以存储当前类型的子类</li><li><code>? super E</code><br>向上限定，E及其父类，可以存储当前类型的父类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ? extends E 向下限定，E及其子类，可以存储当前类型的子类 </span></span><br><span class="line"><span class="comment"> * ? super E 向上限定，E及其父类，可以存储当前类型的父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Student&gt; studentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//因为studentList中存放的Student是Person类的子类，所以可以将studentList放入personList中</span></span><br><span class="line">        personList.addAll(studentList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合框架中的三种迭代方式删除数据"><a class="markdownIt-Anchor" href="#集合框架中的三种迭代方式删除数据"></a> 集合框架中的三种迭代方式删除数据</h2><ul><li><p>普通for循环,可以删除,注意让索引做自减运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1,普通for循环删除,索引做自减运算</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"b"</span>.equals(list.get(i))) &#123;</span><br><span class="line">        list.remove(i);        </span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>迭代器,可以删除,但是必须使用迭代器自身的remove方法,否则会出现并发修改异常</p></li><li><p>增强for循环不能删除</p></li></ul><h2 id="可变参数"><a class="markdownIt-Anchor" href="#可变参数"></a> 可变参数</h2><blockquote><p><strong>注意：如果一个方法有可变参数，并且有多个参数，那么，可变参数肯定是最后一个。</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修饰符 返回值类型 方法名(数据类型…  变量名)&#123;&#125;</span></span><br><span class="line"><span class="comment">//可变参数其实是一个数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> ... arr)</span> </span>&#123;            </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解"><a class="markdownIt-Anchor" href="#注解"></a> 注解:</h2><blockquote><p>之前也看过一些Java-Spring Boot的视频, 有些讲的详细的会去讲源码，然后当时就是看到有很多注解， 就不懂是什么意思， 形成了理解障碍。 所以这次特地又去了解了一下</p></blockquote><p>Spring-Boot的入口函数是由<code>@SpringBootApplication</code>注解的main，无疑<code>@SpringBootApplication</code>这个注解是非常重要的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), <span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述一共七个注解，一共可以分成三类： 元注解、配置注解、Component组件注解。之前学的时候就是被这么多注解给吓到了，而且课上对注解的讲解也特别小， 所以一直感觉注解是个高深莫测的东西。</p><ul><li><p>元注解讲解： <a href="https://www.cnblogs.com/kingsonfu/p/10634174.html" target="_blank" rel="noopener">Java 元注解</a></p><ul><li><code>@Inherited</code>使用该注解的注解父类的子类可以继承父类的注解。请注意，<u>如果使用注释类型来注释除类之外的任何内容，则此元注释类型不起作用</u>。 还要注意，这个元注释只会导致从超类继承注释; 已实现的接口上的注释无效。</li></ul></li><li><p>配置注解源码讲解: <a href="https://www.bilibili.com/video/BV1gW411W76m/?p=7&amp;t=428" target="_blank" rel="noopener">尚硅谷SpringBoot顶尖教程(springboot之idea版spring boot)</a></p><ul><li><p><code>@AutoConfigurationPackage</code>由<code>@Import({Registrar.class})</code>注解，其中<code>Registrar</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    AutoConfigurationPackages.register(registry, (String[])(<span class="keyword">new</span> AutoConfigurationPackages.PackageImports(metadata)).getPackageNames().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));<span class="comment">// 后面第二个参数的结果是metadata中的所有包==&gt;即获得主配置类所在包及以下子包</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将主配置类(<code>@SpringBootApplication</code>标注的类)所在包及下面子包里面的所有组件扫描到Spring容器中</p></li></ul></li></ul><p>注解（Annontion）是Java5开始引入的新特征。它提供了一种<strong>安全的类似注释的机制</strong>，用来将<strong>任何的信息或元数据</strong>（metadata）与程序元素（类、方法、成员变量等）进行关联。==&gt;类似注释，但能将内容传递给程序，对修饰对象有约束作用。</p><h2 id="io流"><a class="markdownIt-Anchor" href="#io流"></a> IO流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每次调用的时候会读取一个字节的数据，如果read返回结果是-1，则说明读取完毕</span></span><br><span class="line"><span class="keyword">int</span> temp;<span class="comment">//保存当前读取的字节数据</span></span><br><span class="line"><span class="comment">//将读取的数据赋值给temp，然后再判断</span></span><br><span class="line"><span class="keyword">while</span> ((temp = f.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.print((<span class="keyword">char</span>)temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用fileseparator解决不同系统的路径问题"><a class="markdownIt-Anchor" href="#使用fileseparator解决不同系统的路径问题"></a> 使用File.separator解决不同系统的路径问题</h3><p>在windos中的文件路径是以&quot;“来分隔<br>在linux中的文件路径是以”/&quot;来分隔<br>如果将上面代码部署到linux中会读取不到文件，为了保证编写的代码跨平台需要使用java.io包下的File.separator来替代文件路径的分隔符，如下：<code>fis = new FileInputStream(&quot;file&quot; + File.separator + &quot;monkey.txt&quot;);</code></p><h3 id="文件io读写fileinputstream"><a class="markdownIt-Anchor" href="#文件io读写fileinputstream"></a> 文件IO读写FileInputStream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">copy_io</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\10630\\Desktop\\TODO\\ok.yml"</span>);</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"good.txt"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> newFile = file.createNewFile();</span><br><span class="line">                System.out.println(<span class="string">"Yes, Create it~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"good.txt"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] arr= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> length;</span><br><span class="line">            <span class="keyword">while</span> ((length = fis.read(arr)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// f.read(arr)和f.read()不一样， </span></span><br><span class="line">                <span class="comment">// f.read(arr)会一次性读取arr大小的数据， 然后长度用length来记录读取了多少字符</span></span><br><span class="line">                <span class="comment">// write写的时候， 将数组arr中length写入文件</span></span><br><span class="line">                <span class="comment">// 在while中输出了length的大小， 为1024， 842</span></span><br><span class="line">                fos.write(arr, <span class="number">0</span>, length);</span><br><span class="line">                System.out.println(length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用缓冲流进行文件拷贝bufferedinputstream"><a class="markdownIt-Anchor" href="#使用缓冲流进行文件拷贝bufferedinputstream"></a> 使用缓冲流进行文件拷贝BufferedInputStream</h3><p>Java中提供了<code>BufferedInputStream</code>和<code>BufferedOutputStream</code>缓冲流用来读取和写出， <code>BufferedInputStream</code>读取时会创建一个长度为8192的byte类型数组，程序一次读取8192个字节数据到数组中 使用缓冲流之后就不用再自定义byte类型数组了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">bufferStream_io</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream ` = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\10630\\Desktop\\TODO\\ok.yml"</span>));</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">            <span class="comment">// 其实不存在会自动创建, 不需要下面的代码</span></span><br><span class="line">            File f = <span class="keyword">new</span> File(<span class="string">"text.txt"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!f.exists()) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> newFile = f.createNewFile();</span><br><span class="line">                System.out.println(<span class="string">"创建成功~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> tmp;</span><br><span class="line">            <span class="keyword">while</span> ((tmp = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                bis.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                bos.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.monkey1024.com/javase/608" target="_blank" rel="noopener">使用自定义数组和buffer的图解</a></p><h3 id="jdk7的新写法"><a class="markdownIt-Anchor" href="#jdk7的新写法"></a> jdk7的新写法</h3><p>在jdk7中新加入了AutoCloseable接口，IO流中的类都实现了这个接口，这样在读取或者写出操作结束之后，系统会自动close相关资源，开发者不需要再手动close了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\10630\\Desktop\\TODO\\ok.yml"</span>)); BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"auto.txt"</span>));) &#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">while</span> ((tmp = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        bos.write(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用字符流解决乱码问题filereader"><a class="markdownIt-Anchor" href="#使用字符流解决乱码问题filereader"></a> 使用字符流解决乱码问题FileReader</h2><blockquote><p>字符流FileReader主要用来读取字符的IO流，使用字符流读取文本文件可以解决乱码问题。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReader_io</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileReader fileReader = <span class="keyword">new</span> FileReader(<span class="string">"G:\\C与C++、\\java\\testIDEA\\src\\testForChinests.txt"</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> c;</span><br><span class="line">            <span class="keyword">while</span> ((c = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用缓冲流bufferedreader可以一次读取一行的文字"><a class="markdownIt-Anchor" href="#使用缓冲流bufferedreader可以一次读取一行的文字"></a> 使用缓冲流<strong>BufferedReader</strong>可以一次读取一行的文字：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line"><span class="keyword">try</span> (BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"G:\\C与C++、\\java\\testIDEA\\src\\testForChinests.txt"</span>))) &#123;</span><br><span class="line">          String s;</span><br><span class="line">          <span class="keyword">while</span> ((s = bufferedReader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">              System.out.print(s);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 写入</span></span><br><span class="line">      <span class="keyword">try</span>(FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"newword.txt"</span>);)&#123;</span><br><span class="line">          fw.write(<span class="string">"我喜欢学习java"</span>);</span><br><span class="line">          fw.write(<span class="number">32</span>);       <span class="comment">// 空格</span></span><br><span class="line">          fw.write(<span class="number">97</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span>(BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"newword.txt"</span>));)&#123;</span><br><span class="line">          bw.write(<span class="string">"我喜欢打篮球"</span>);</span><br><span class="line">          bw.newLine();<span class="comment">//换行</span></span><br><span class="line">          bw.write(<span class="string">"我喜欢踢足球"</span>);</span><br><span class="line">          bw.flush();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li>BufferedWriter、BufferedInputStream内的参数都是原有的FileWrite、FileInputStream，实际上使用了装饰模式（设计模式）</li><li>BufferedWriter、BufferedReader多了writeLine、readLine方法</li></ul><p><strong>装饰者设计模式的优点：</strong><br>不用修改被装饰对象的源码，装饰者与被装饰者耦合度不高。</p><h3 id="转换流"><a class="markdownIt-Anchor" href="#转换流"></a> <a href="http://www.monkey1024.com/javase/624" target="_blank" rel="noopener">转换流</a>——编码格式转换InputStreamReader：</h3><blockquote><p>字节-&gt;字符</p></blockquote><p>如果要解决上面问题，需要使用InputStreamReader和OutputStreamWriter指明文本文件的编码，这两个类都属于字符流，可以将字节流输出为字符流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用FileInputStream读取文本内容，然后通过InputStreamReader和指定的编码将字符转换为字节</span></span><br><span class="line">    <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"utf-8.txt"</span>), <span class="string">"utf-8"</span>));</span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(</span><br><span class="line">                    <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"gbk.txt"</span>), <span class="string">"gbk"</span>));) &#123;</span><br><span class="line">        String msg;</span><br><span class="line">        <span class="keyword">while</span>((msg = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            bw.write(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        bw.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException | FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">        e1.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中再FileInputStream对象上使用了InputStreamReader装饰，从而将字节转换为字符，之后再InputStreamReader对象上又使用了BufferedReader将字符进行缓冲，从而提高。==&gt;都有reader</p><h2 id="输出指定目录下的所有文件名称"><a class="markdownIt-Anchor" href="#输出指定目录下的所有文件名称"></a> 输出指定目录下的所有文件名称</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputAllFiles</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> File file = getFile();</span><br><span class="line">        getListFiles(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getListFiles</span><span class="params">(File f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> File[] files = f.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">'\t'</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(files[i]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (files[i].isDirectory()) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                getListFiles(files[i]);</span><br><span class="line">                cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"请输入要遍历的目录: "</span>);</span><br><span class="line">        <span class="keyword">final</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> String next = scanner.nextLine();</span><br><span class="line">            <span class="comment">//　next()不会吸取字符前/后的空格/Tab键，只吸取字符，开始吸取字符（字符前后不算）直到遇到空格/Tab键/回车截止吸取；</span></span><br><span class="line">            <span class="comment">//　nextLine()吸取字符前后的空格/Tab键，回车键截止。</span></span><br><span class="line">            <span class="keyword">final</span> File file = <span class="keyword">new</span> File(next);</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"输出的路径错误, 请重新输入"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"请输入一个文件夹路径"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> file;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化和反序列化"><a class="markdownIt-Anchor" href="#序列化和反序列化"></a> 序列化和反序列化</h2><blockquote><ul><li>在工作中有可能遇到多台机器远程通信的情况，如果要将机器A中的某个java对象传输到机器B上面，需要将这个java对象转换为字节序列然后进行传输。将对象转换为字节序列的过程叫做序列化，反之叫做反序列化。</li><li>使用序列化还可以将一个对象保存到硬盘中，然后再通过反序列化将该对象读取到内存里面。</li></ul><p>一个对象如果支持序列化，需要实现Serializable的接口，<u>这个接口中没有任何方法</u>，实现该接口后，JVM会给这个对象做特殊待遇</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Student s = <span class="keyword">new</span> Student(<span class="string">"张三"</span>);</span><br><span class="line">        <span class="keyword">try</span> (ObjectOutputStream zhangsan = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"zhangsan"</span>))) &#123;</span><br><span class="line">            <span class="comment">// try()括号中，如果是多句， 则加;， 单句不需要加;</span></span><br><span class="line">            <span class="comment">// ObjectOutputStream也是一个装饰模式</span></span><br><span class="line">            zhangsan.writeObject(s);</span><br><span class="line">            zhangsan.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一个类实现Serializable接口后，系统会给每个对象一个序列化版本号，当这个类的源码被修改后，系统会重新分配一个新的序列化版本号，这样做的好处就是保证序列化和反序列化的对象内容一致。例如将一个对象序列化到硬盘之后，修改这个对象所对应类的源码，在进行反序列化是就会报出InvalidClassException异常。如果手动编写序列化版本号之后，就不会出现这个异常了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动生成序列化版本号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">716323668524282676L</span>;</span><br></pre></td></tr></table></figure><h3 id="transient关键字"><a class="markdownIt-Anchor" href="#transient关键字"></a> transient关键字</h3><p>如果不希望将Student类中的age属性序列化，可以使用transient声明该属性，在序列化时将忽略这个属性。<code>transient private int age;</code></p><h2 id="多线程"><a class="markdownIt-Anchor" href="#多线程"></a> 多线程</h2><h3 id="三种创建方式"><a class="markdownIt-Anchor" href="#三种创建方式"></a> 三种创建方式</h3><ul><li><p>继承Thread类， 重写run方法</p><ul><li>优点:可以直接使用Thread类中的方法,代码简单</li><li>缺点:继承Thread类之后就不能继承其他的类</li></ul></li><li><p>实现runnable接口， 重写run方法</p><ul><li>优点:即时自定义类已经有父类了也不受影响，因为可以实现多个接口</li><li>缺点:在run方法内部需要获取到当前线程的Thread对象后才能使用Thread中的方法</li></ul></li><li><p>实现Callable接口创建线程</p><ul><li><p>优点：可以获取返回值，可以抛出异常</p></li><li><p>缺点：代码编写较为复杂</p><p>1.自定义一个类实现java.util.concurrent包下的Callable接口<br>2.重写call方法<br>3.将要在线程中执行的代码编写在call方法中<br>4.创建<code>ExecutorService</code>线程池<br>5.将自定义类的对象放入线程池里面<br>6.获取线程的返回结果<br>7.关闭线程池，不再接收新的线程，未执行完的线程不会被关闭</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义一个类实现Callable&lt;V&gt;接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 2.重写call方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 3.将要执行的代码写在call方法中</span></span><br><span class="line">        <span class="comment">//返回一个随机数</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> num = r.nextInt(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThread_callable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//4.创建ExecutorService线程池</span></span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.将自定义类的对象放入线程池里面</span></span><br><span class="line">        <span class="comment">//开启两个线程</span></span><br><span class="line">        Future&lt;Integer&gt; result1 = exec.submit(<span class="keyword">new</span> MyCallable());</span><br><span class="line">        Future&lt;Integer&gt; result2 = exec.submit(<span class="keyword">new</span> MyCallable());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断线程是否计算完毕</span></span><br><span class="line">        <span class="keyword">while</span> (!result1.isDone() &amp;&amp; !result2.isDone()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"等待线程计算完毕"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.获取线程的返回结果</span></span><br><span class="line">        Integer i1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i1 = result1.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Integer i2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i2 = result2.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(i1);</span><br><span class="line">        System.out.println(i2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.关闭线程池，不再接收新的线程，未执行完的线程不会被关闭</span></span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="线程池"><a class="markdownIt-Anchor" href="#线程池"></a> 线程池</h3><p>线程池是初始化一个多线程应用程序过程中创建一个<strong>线程集合</strong>，即一次创建多个线程，然后在需要执行新的任务时直接去这个线程集合中获取，而不是重新创建一个线程。任务执行结束后，线程放回到池子中等待下一次的分配。</p><p><strong>线程池的作用</strong></p><p>解决创建单个线程耗费时间和资源的问题。</p><p><strong>创建线程池</strong></p><p>上面代码中演示了两种方式创建线程池</p><ul><li><code>Executors.newFixedThreadPool(int nThreads);</code><br>通过传入的int类型参数来指定创建线程池中的线程数，如果任务数量大于线程数量，则任务会进行等待。</li><li><code>Executors.newCachedThreadPool();</code><br>会根据需要创建新线程的线程池，如果线程池中的线程数量小于任务数时，会创建新的线程，线程池中的线程最大数量是Integer.MAX_VALUE，int类型的最大值。如果线程的处理速度小于任务的提交速度时，会不断创建新的线程来执行任务，这样有可能会因为创建过多线程而耗尽CPU 和内存资源。</li></ul><p>匿名内部类、labmbda表达式创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewWayCreateThread</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 匿名内部类</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: MrLi        </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: [args] </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/5/18 </span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                    System.out.println( Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line">                    System.out.println( getClass() + <span class="string">" "</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"main"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: labmbda表达式</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: MrLi</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: [args]</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/5/18</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"main "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="synchronized同步方法与同步代码块"><a class="markdownIt-Anchor" href="#synchronized同步方法与同步代码块"></a> synchronized同步方法与同步代码块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> begin1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> end1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> begin2;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> end2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LongTask ts = <span class="keyword">new</span> LongTask();</span><br><span class="line">        Thread t1 =<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            begin1 = System.currentTimeMillis();</span><br><span class="line">            ts.add();</span><br><span class="line">            end1 = System.currentTimeMillis();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"><span class="comment">//        new Thread(syncValue::add).start();</span></span><br><span class="line">             begin2 = System.currentTimeMillis();</span><br><span class="line">            ts.add();</span><br><span class="line">             end2 = System.currentTimeMillis();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> end = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(begin1 &gt; begin2)&#123;</span><br><span class="line">            begin = begin2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            begin = begin1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(end1 &gt; end2)&#123;</span><br><span class="line">            end = end1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            end = end2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"两个线程总共耗时："</span> + (end -begin) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LongTask</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public synchronized void add() &#123;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            Thread.sleep(3000L);</span></span><br><span class="line"><span class="comment">//            System.out.println("执行耗时任务");</span></span><br><span class="line"><span class="comment">//        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        num++;</span></span><br><span class="line"><span class="comment">//        System.out.println(num);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//两个线程总共耗时：6001ms</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000L</span>);</span><br><span class="line">            System.out.println(<span class="string">"执行耗时任务"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">            num++;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两个线程总共耗时：3001ms</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后将需要同步的代码放到synchronized代码块中，再次运行SynchronizedTest02类，打印结果是3秒，因为那段耗时较长的代码是在异步情况下运行，所以节省了一些时间。</p><p><strong>注意：多个线程在执行synchronized同步代码块时，代码块括号里面可以传入任意对象，但一定要保证多个线程访问的是同一个对象。</strong>(这里代码只有一个实例, 这个实例的obj是相同的)</p><h2 id="单例模式"><a class="markdownIt-Anchor" href="#单例模式"></a> 单例模式</h2><h3 id="饿汉式"><a class="markdownIt-Anchor" href="#饿汉式"></a> 饿汉式</h3><ul><li>构造方法私有化</li><li>创建当前类对象</li><li>对外提供公共的访问方法将SingletonHungary对象暴露给外部</li></ul><h3 id="懒汉式"><a class="markdownIt-Anchor" href="#懒汉式"></a> 懒汉式</h3><ul><li>构造方法私有化</li><li>创建当前类的引用</li><li>对外提供公共的访问方法将SingletonHungary对象暴露给外部</li></ul><h3 id="单例模式的案例runtime"><a class="markdownIt-Anchor" href="#单例模式的案例runtime"></a> 单例模式的案例Runtime</h3><p>java.lang包下的Runtime类使用了单例模式，使用该类可以执行windows系统里面的一些命令，例如：mspaint（打开画图软件），shutdown（关机）等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Runtime rt = Runtime.getRuntime();</span><br><span class="line">    rt.exec(<span class="string">"mspaint"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用timer类来实现定时任务"><a class="markdownIt-Anchor" href="#使用timer类来实现定时任务"></a> 使用Timer类来实现定时任务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Timer t = <span class="keyword">new</span> Timer();</span><br><span class="line"><span class="comment">//        t.schedule(new TimerTask() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void run() &#123;</span></span><br><span class="line"><span class="comment">//                final Date date = new Date();</span></span><br><span class="line"><span class="comment">//                System.out.println(date);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;, new SimpleDateFormat("yyyy-MM-dd hh:mm:ss SSS").parse("2017-07-03 18:09:00 000"), 5000);</span></span><br><span class="line">        <span class="comment">//第一个参数接收TimerTask对象，即上面创建的MyTimerTask</span></span><br><span class="line">        <span class="comment">//第二参数的Date类型是定时任务执行的开始时间</span></span><br><span class="line">        <span class="comment">//第三个参数指定定时任务每隔多少毫秒执行一次</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        t.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda表达式和匿名内部类"><a class="markdownIt-Anchor" href="#lambda表达式和匿名内部类"></a> Lambda表达式和匿名内部类</h2><blockquote><p>使用lambda表达式的前提是： 必须为<strong>函数式接口</strong>（有且只有一个抽象方法的接口，可以用<code>@FunctionalInterface</code>,接口中可以包含默认、静态、私有方法）</p></blockquote><ul><li>匿名内部类会生成一个<code>xxxx$1.class</code>文件， 而lambda表达式不会生成</li><li>lambda 有延迟加载的效果，从而不存在性能浪费——优化日志</li></ul><p>From: <a href="https://www.bilibili.com/video/BV1A4411K7Gx?p=417" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1A4411K7Gx?p=417</a></p><h2 id="反射"><a class="markdownIt-Anchor" href="#反射"></a> 反射</h2><p>获得字节码class的三种方式</p><ul><li>Source源代码阶段=&gt;<code>Class.forName(&quot;全类名&quot;)</code><ul><li>多用于配i文件，捋类名定义在配文件中。读取文件，加载类</li></ul></li><li>Class类对象阶段=&gt;<code>类名.class</code><ul><li>多用于参数的传递</li></ul></li><li>Runtime运行阶段=&gt;<code>对象.getClass()</code><ul><li>多用于对象的获取字节码的方式</li></ul></li></ul><p>▲结论: 同一个字节码文件（*.class）在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// way1： Class.forName</span></span><br><span class="line">Class cls1 = Class.forName(<span class="string">"top.nymrli.day17_reflect.Person"</span>);</span><br><span class="line">System.out.println(cls1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// way2:</span></span><br><span class="line">Class&lt;Person&gt; cls2 = Person.class;</span><br><span class="line">System.out.println(cls2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// way3:</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">Class cls3 = person.getClass();</span><br><span class="line">System.out.println(cls3);</span><br><span class="line"></span><br><span class="line">System.out.println(cls3 == cls2);</span><br><span class="line">System.out.println(cls1 == cls2);</span><br></pre></td></tr></table></figure><h3 id="class对象功能"><a class="markdownIt-Anchor" href="#class对象功能"></a> Class对象功能:</h3><p>获取功能:</p><ol><li><p>获得成员变量</p><ul><li><p><code>Filed[] getFields()</code>——获得public修饰的字段</p></li><li><p><code>Field getField(String name)</code>——获得所有字段，无视修饰符</p></li><li><p><code>Field[] getDeclaredFields()</code></p></li><li><p><code>Field getDeclaredField(String name)</code></p></li></ul></li><li><p>获得构造方法</p><ul><li><p><code>Constructor constructor = cls1.getConstructor(String name);</code></p></li><li><p><code>Constructor[] constructors = cls1.getConstructors();</code></p></li><li><p><code>Constructor declaredConstructor = cls1.getDeclaredConstructor(String name);</code></p></li><li><p><code>Constructor[] declaredConstructors = cls1.getDeclaredConstructors();</code></p></li></ul></li><li><p>获得成员方法</p><ul><li><p><code>Method method = cls1.getMethod(String name);</code></p></li><li><p><code>Method[] methods = cls1.getMethods();</code></p></li><li><p><code>Method declaredMethod = cls1.getDeclaredMethod(String name);</code></p><p><code>Method[] declaredMethods = cls1.getDeclaredMethods();</code></p></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">"top.nymrli.day17_reflect.Person"</span>);</span><br><span class="line">System.out.println(cls1);</span><br><span class="line"></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Field name = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    name = cls1.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">Object o = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    name.setAccessible(<span class="keyword">true</span>);<span class="comment">// private私有方法, 暴力反射</span></span><br><span class="line">    o = name.get(p);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(o);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    name.set(p, <span class="string">"cl"</span>);</span><br><span class="line">    o = name.get(p);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(o);</span><br></pre></td></tr></table></figure><h3 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例：</h3><p>*需求：写一个“框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法</p><p><strong>实现：</strong><br>1.配置文件<br>2.反射</p><p><strong>步骤</strong><br>1.捋需要创建的对象的全类名和需要执行的方法定义在配置文件中<br>2.在程序中加载读取配置文件<br>3.使用反射技术来加载类文件进内存<br>4.创建对象<br>5.执行方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"><span class="comment">//    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        ClassLoader classLoader = Example.class.getClassLoader();</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">"prop.properties"</span>);</span><br><span class="line">        properties.load(is);</span><br><span class="line"></span><br><span class="line">        String className = properties.getProperty(<span class="string">"className"</span>);</span><br><span class="line">        String classMethod = properties.getProperty(<span class="string">"classMethod"</span>);</span><br><span class="line"></span><br><span class="line">        Class cls = Class.forName(className);</span><br><span class="line">        <span class="comment">// 直接newInstance在java 9已被弃用</span></span><br><span class="line">        Object o = cls.getDeclaredConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">        Method method = cls.getMethod(classMethod);</span><br><span class="line">        method.invoke(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类的加载与初始化"><a class="markdownIt-Anchor" href="#类的加载与初始化"></a> 类的加载与初始化</h2><p><strong>类的加载过程</strong>：</p><p>加载–&gt;链接（验证、准备（为静态量开辟空间并赋予初始值）、解析（将class中的符号引用转变为运行时的地址的直接引用））–&gt;初始化</p><p>为类的静态变量赋值，然后执行类的初始化（static）语句<br><strong>初始化的详细过程</strong>：</p><ul><li>如果类还没有被加载和链接，那就先进行加载和链接</li><li>如果类存在父类，并且父类还没有初始化，那就先初始化直接父类</li><li>如果类中存在初始化语句，顺序执行初始化语句</li></ul><p><strong>class初始化时机</strong></p><ul><li>创建类的实例（四种方式）</li><li>访问类中的某个静态变量，或者对静态变量进行赋值</li><li>主动调用类的静态方法</li><li>Class.forName（“包类名&quot;）完成子类的初始化，也会完成对本类的初始化（接口例外）</li><li>该类是程序引导入口（mian入口或者test入口）</li></ul><p><strong>双亲委派机制</strong></p><blockquote><p>bootstrap的加载过程是用c来完成的，在java中输出bootstrap加载器结果为null</p></blockquote><p>加载类的过程： 不断将加载任务交给父类加载器，是个递归的过程。如果父类能够加载，那么就加载，如果不能加载，那么就交给子类去加载。</p><ul><li>bootstrap：提供核心环境 、extension classloader负责拓展内容、application classloader负责程序运行期间自己写的class对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 这边是递归的过程，会去找父加载器， 直至parent为null即用bootstrap加载</span></span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                    c = findClass(name);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                    PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/15/重拾Java笔记/%E7%B1%BB%E5%8A%A0%E8%BD%BD.jpg" alt="类加载"></p><p>作用：</p><ul><li>避免类的重复加载</li><li>保护程序安全，防止核心的JAVA语言环境遭受破坏</li></ul><h2 id="正则匹配"><a class="markdownIt-Anchor" href="#正则匹配"></a> 正则匹配</h2><p><img src="/2020/05/15/重拾Java笔记/java%E6%AD%A3%E5%88%99.jpg" alt="java正则"></p><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除&quot;\r\n&quot;之外的任何单个字符。若要匹配包括&quot;\r\n&quot;在内的任意字符，请使用诸如&quot;[\s\S]&quot;之类的模式。</td></tr><tr><td>*</td><td>零次或多次匹配前面的字符或子表达式。例如，zo* 匹配&quot;z&quot;和&quot;zoo&quot;。* 等效于 {0,}。</td></tr><tr><td>+</td><td>一次或多次匹配前面的字符或子表达式。例如，&quot;zo+&quot;与&quot;zo&quot;和&quot;zoo&quot;匹配，但与&quot;z&quot;不匹配。+ 等效于 {1,}。</td></tr><tr><td>?</td><td>零次或一次匹配前面的字符或子表达式。例如，&quot;do(es)?“匹配&quot;do&quot;或&quot;does&quot;中的&quot;do”。? 等效于 {0,1}。</td></tr></tbody></table><p><strong>方法说明：</strong></p><ul><li><strong>matches</strong> ：尝试将<u>整个</u>区域与模式匹配。</li><li><strong>lookingAt</strong>： 方法虽然不需要整句都匹配，但是需要从<em>第一个字符</em>开始匹配。</li><li><strong>find</strong>： 尝试查找与该模式匹配的输入序列的下一个子序列。</li><li><strong>find(int start）</strong>：重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。</li><li>替换： replaceFirst 替换首次匹配，replaceAll 替换所有匹配。</li></ul><p>▲强调: 使用<code>group()</code>之前一定得指定个以上的匹配方法</p><p><strong>匹配模式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Pattern compile = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    private static final int ALL_FLAGS = CASE_INSENSITIVE | MULTILINE |</span></span><br><span class="line"><span class="comment">            DOTALL | UNICODE_CASE | CANON_EQ | UNIX_LINES | LITERAL |</span></span><br><span class="line"><span class="comment">            UNICODE_CHARACTER_CLASS | COMMENTS;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><h2 id="qjava-定义long和float为什么要加l和f"><a class="markdownIt-Anchor" href="#qjava-定义long和float为什么要加l和f"></a> Q:java 定义long和float为什么要加L和F？</h2><p>A:整形默认值为int，如果定义long 必须要加L来区分，浮点型默认值为double双精度，定义单精度float要加F来区分。</p><h2 id="java中suppresswarnings的作用"><a class="markdownIt-Anchor" href="#java中suppresswarnings的作用"></a> <a href="https://www.cnblogs.com/huanglog/p/11587077.html" target="_blank" rel="noopener">Java中@SuppressWarnings的作用</a></h2><p>A:作用：告诉编译器忽略指定的警告，不用在编译完成后出现警告信息。如<code>@SuppressWarnings(&quot;unchecked&quot;, &quot;deprecation&quot;)</code>等同于@SuppressWarnings(“unchecked”, “deprecation”)</p><h2 id="输出变量类型python中type关键字"><a class="markdownIt-Anchor" href="#输出变量类型python中type关键字"></a> 输出变量类型——Python中type关键字</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getType</span><span class="params">(Object o)</span></span>&#123;  <span class="comment">//通过反射来获取变量类型方法</span></span><br><span class="line"><span class="keyword">return</span> o.getClass().toString(); <span class="comment">//使用int类型的getClass()方法</span></span><br><span class="line">    <span class="comment">// return o.getClass().getName(); //使用int类型的getClass()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲. 基本数据类型无效， 如int， 但可以查看包装数据类型。</p><h2 id="jdbc链接mysql"><a class="markdownIt-Anchor" href="#jdbc链接mysql"></a> JDBC链接MYSQL</h2><h3 id="maven的pomxml中的配置"><a class="markdownIt-Anchor" href="#maven的pomxml中的配置"></a> Maven的pom.xml中的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>top.nymrli.jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入mysql驱动jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="java文件内容"><a class="markdownIt-Anchor" href="#java文件内容"></a> java文件内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 1.加载驱动程序， 这个包名是固定的</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">// 2.创建连接</span></span><br><span class="line">        String url=<span class="string">"jdbc:mysql://localhost:3306/fortest?useSSL=false&amp;serverTimezone=UTC"</span>;</span><br><span class="line">        String username=<span class="string">"root"</span>;</span><br><span class="line">        String userpwd=<span class="string">"cl123123"</span>;</span><br><span class="line">        Connection conn = DriverManager.getConnection(url,username,userpwd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.定义SQL语句</span></span><br><span class="line">        String table = <span class="string">"stu"</span>;</span><br><span class="line"><span class="comment">//        String sql = String.format("SELECT * FROM %s;", table);</span></span><br><span class="line">        String sql = String.format(<span class="string">"UPDATE %s set age = 50 where name = 'cl';"</span>, table);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 获取执行sql的对象</span></span><br><span class="line">        Statement stat = conn.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.执行SQL语句</span></span><br><span class="line"><span class="comment">//        ResultSet resultSet = stat.executeQuery(sql);</span></span><br><span class="line">        <span class="keyword">int</span> res = stat.executeUpdate(sql);</span><br><span class="line"><span class="comment">//        System.out.println(resultSet);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 查看执行结果</span></span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.释放资源</span></span><br><span class="line">        stat.close();</span><br><span class="line">        conn.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DriverManager：驱动管理对象<br>Connection：数据库连接对象<br>statement：执行sql的对象<br>Resultset：结果集对象<br>Preparedstatement：执行sq1的对象roper</p><h2 id="sql操作"><a class="markdownIt-Anchor" href="#sql操作"></a> SQL操作</h2><h3 id="分页操作"><a class="markdownIt-Anchor" href="#分页操作"></a> 分页操作</h3><p>语法：limit开始索引，每页查询的记录数<br>注：索引从0开始<br><code>公式：开始索引=（当前页码-1）*每页查询的记录数</code>即 <code>index = (nowPageNum - 1) * pageSize</code></p><h3 id="插入语句"><a class="markdownIt-Anchor" href="#插入语句"></a> 插入语句：</h3><p><code>insert into `train`.`student` (`name`, `age`) values (&quot;gb&quot;, 19);</code></p><p>▲注意这边是<code>`train`.`student`</code>，如果写成<code>`train.student`</code>是会找不到表的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;重拾java笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#重拾java笔记&quot;&gt;&lt;/a&gt; 重拾Java笔记&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;工作主要用Java, 因此开始准备Java基础再补补。根据&lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="java" scheme="https://nymrli.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>华为春招4.29笔试题</title>
    <link href="https://nymrli.top/2020/04/29/%E5%8D%8E%E4%B8%BA%E6%98%A5%E6%8B%9B4-29%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <id>https://nymrli.top/2020/04/29/华为春招4-29笔试题/</id>
    <published>2020-04-29T14:43:54.000Z</published>
    <updated>2020-04-29T14:47:07.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="429三道笔试题"><a class="markdownIt-Anchor" href="#429三道笔试题"></a> 4.29三道笔试题：</h1><blockquote><p>做了其他大厂的笔试题后，好像确实华为的稍微简单点。只不过其他的笔试题是有模拟题的，华为的这三道题基本上都是DFS</p></blockquote><h2 id="a"><a class="markdownIt-Anchor" href="#a"></a> A：</h2><blockquote><p>带有重复元素的全排列问题，求不重复的排列数。以下做法50%, TLE了。正确做法是直接用公式计算</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Author: Mrli</span></span><br><span class="line"><span class="string">@Date: 2020-04-29 20:23:34</span></span><br><span class="line"><span class="string">@LastEditTime: 2020-04-29 21:24:40</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">s = input().strip()</span><br><span class="line">ans = list(s)</span><br><span class="line">sz = len(s)</span><br><span class="line">res = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(depth)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> depth &gt; sz<span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span> depth == sz<span class="number">-1</span>:</span><br><span class="line">        enter = <span class="string">''</span>.join(ans)</span><br><span class="line">        <span class="keyword">if</span> enter <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">            res.add(enter)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(sz):</span><br><span class="line">        swap(i, depth)</span><br><span class="line">        dfs(depth+<span class="number">1</span>)</span><br><span class="line">        swap(i, depth)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    tmp = ans[x]</span><br><span class="line">    ans[x] = ans[y]</span><br><span class="line">    ans[y] = tmp</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">0</span>)</span><br><span class="line">print(len(res))</span><br></pre></td></tr></table></figure><h2 id="b"><a class="markdownIt-Anchor" href="#b"></a> B</h2><blockquote><p>求去掉K个字母，留下字典序最小的字符串。当时</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Author: Mrli</span></span><br><span class="line"><span class="string">@Date: 2020-04-29 19:01:55</span></span><br><span class="line"><span class="string">@LastEditTime: 2020-04-29 22:31:07</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 看错题, 以为是从开头去掉k个。一分钟写的过了40%</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># s = input().strip()</span></span><br><span class="line"><span class="comment"># n = int(input().strip())</span></span><br><span class="line"><span class="comment"># print( s[n:])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"># 第一次尝试, ''-&gt;加n-k个-&gt;   过10%</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 选择移除K个字母, 要使留下来的字符串字典序最小</span></span><br><span class="line"><span class="comment"># s = input().strip()</span></span><br><span class="line"><span class="comment"># n = int(input().strip())</span></span><br><span class="line"><span class="comment"># fans = s</span></span><br><span class="line"><span class="comment"># def dfs(ans, index, depth):</span></span><br><span class="line"><span class="comment">#     global fans</span></span><br><span class="line"><span class="comment">#     if index &gt;= len(s): return </span></span><br><span class="line"><span class="comment">#     if depth &gt; n: return</span></span><br><span class="line"><span class="comment">#     if depth == n:</span></span><br><span class="line"><span class="comment">#         if ans &lt;= fans:</span></span><br><span class="line"><span class="comment">#             fans = ans</span></span><br><span class="line"><span class="comment">#     print(ans + s[index])</span></span><br><span class="line"><span class="comment">#     dfs(ans + s[index], index+1, depth + 1)</span></span><br><span class="line"><span class="comment">#     dfs(ans, index+1, depth)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># dfs('', 0, 0)</span></span><br><span class="line"><span class="comment"># print(fans)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">当时dfs('', 0, 0)的写法报了点错, 以为不能这么写, 于是换成s中去k个</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># s = input().strip()</span></span><br><span class="line"><span class="comment"># sz = len(s)</span></span><br><span class="line"><span class="comment"># n = int(input().strip())</span></span><br><span class="line"><span class="comment"># fans = ''.join('z' for i in range(sz))</span></span><br><span class="line"><span class="comment"># def dfs(ans, index, depth):</span></span><br><span class="line"><span class="comment">#     global fans</span></span><br><span class="line"><span class="comment">#     if index &gt;= sz: return </span></span><br><span class="line"><span class="comment">#     if depth == n:</span></span><br><span class="line"><span class="comment">#         if ans &lt;= fans:</span></span><br><span class="line"><span class="comment">#             fans = ans</span></span><br><span class="line"><span class="comment">#     # print(ans[0:index] + ans[index+1:])</span></span><br><span class="line"><span class="comment">#     dfs(ans[0:index] + ans[index+1:], index+1, depth + 1)</span></span><br><span class="line"><span class="comment">#     dfs(ans, index+1, depth)</span></span><br><span class="line"><span class="comment"># dfs(s, 0, 0)</span></span><br><span class="line"><span class="comment"># print(fans)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">第三次尝试, 重新接回第一种到n-k个数时结束的写法. 考完以后写出来的. 但不知道能不能过全部样例</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">s = input().strip()</span><br><span class="line">sz = len(s)</span><br><span class="line">n = int(input().strip())</span><br><span class="line"></span><br><span class="line">fans = <span class="string">''</span>.join(<span class="string">'z'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(sz))<span class="comment"># 初始化为最大</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(ans, index)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> fans</span><br><span class="line">    <span class="keyword">if</span> index == sz: <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span> len(ans) == sz-n:</span><br><span class="line">        <span class="comment"># print(ans, fans, ans &lt;= fans)</span></span><br><span class="line">        <span class="keyword">if</span> ans &lt;= fans:</span><br><span class="line">            fans = ans</span><br><span class="line">    </span><br><span class="line">    dfs(ans + s[index], index+<span class="number">1</span>)</span><br><span class="line">    dfs(ans, index+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">dfs(<span class="string">''</span>, <span class="number">0</span>)</span><br><span class="line">print(fans)</span><br></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C:</h2><blockquote><p>k, n, r： 有k个硬币， n个城市， r条单向边</p><p>要求在硬币足够的情况下的最短距离</p><p>▲一开始以为是<strong>dijistra+硬币数(第二指标)<strong>判断，但是实际情况并不是在求</strong>最短距离的情况下的硬币数</strong>，而是在硬币充足的情况下最短距离是多少===&gt;实际就变成了一个非常简单的DFS</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Mrli</span></span><br><span class="line"><span class="comment"> * @Date: 2020-04-29 19:05:27</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-04-29 21:12:04</span></span><br><span class="line"><span class="comment"> * @Description: </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dist[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> T[MAXN][MAXN];</span><br><span class="line"><span class="keyword">bool</span> visited[MAXN] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int d[MAXN];</span></span><br><span class="line"><span class="comment">// int cost[MAXN];</span></span><br><span class="line"><span class="keyword">int</span> mans = INF;</span><br><span class="line"><span class="keyword">bool</span> haveans = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k, n ,r;        <span class="comment">// 硬币数、城市数、道路数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* dijistra做法的尝试 */</span></span><br><span class="line"><span class="comment">// void dijistra(int s)&#123;</span></span><br><span class="line"><span class="comment">//     d[s] = 0;</span></span><br><span class="line"><span class="comment">//     cost[s] = 0;</span></span><br><span class="line"><span class="comment">//     for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line"><span class="comment">//        int u = -1, MIN = INF;</span></span><br><span class="line"><span class="comment">//        for (int j = 1; j &lt;= n; j++) &#123;</span></span><br><span class="line"><span class="comment">//           if (visited[j] == false &amp;&amp; d[j] &lt; MIN)&#123;</span></span><br><span class="line"><span class="comment">//               u = j;</span></span><br><span class="line"><span class="comment">//               MIN = d[j];</span></span><br><span class="line"><span class="comment">//           &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if ( u == -1) return;</span></span><br><span class="line"><span class="comment">//        visited[u] = true;</span></span><br><span class="line"><span class="comment">//         // 保证路径最短, 再确定硬币</span></span><br><span class="line"><span class="comment">//     //    for (int v = 1; v &lt;= n; v++) &#123;</span></span><br><span class="line"><span class="comment">//     //       if (visited[v] == false &amp;&amp; dist[u][v] != INF)&#123;</span></span><br><span class="line"><span class="comment">//     //           if ( dist[u][v] + d[u] &lt; d[v] )&#123;</span></span><br><span class="line"><span class="comment">//     //               d[v] = dist[u][v] + d[u];</span></span><br><span class="line"><span class="comment">//     //               cost[v] = T[u][v] + cost[u]; </span></span><br><span class="line"><span class="comment">//     //           &#125;else if (dist[u][v] + d[u] == d[v])&#123;</span></span><br><span class="line"><span class="comment">//     //               if( cost[u] + T[u][v] &lt; cost[v] )&#123;</span></span><br><span class="line"><span class="comment">//     //                   cost[v] = cost[u] + T[u][v];</span></span><br><span class="line"><span class="comment">//     //               &#125;</span></span><br><span class="line"><span class="comment">//     //           &#125;</span></span><br><span class="line"><span class="comment">//     //       &#125;</span></span><br><span class="line"><span class="comment">//     //    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         // 保证硬币足够的情况下</span></span><br><span class="line"><span class="comment">//         for (int v = 1; v &lt;= n; v++) &#123;</span></span><br><span class="line"><span class="comment">//           if (visited[v] == false &amp;&amp; dist[u][v] != INF)&#123;</span></span><br><span class="line"><span class="comment">//               if ( T[u][v] + cost[u] &lt; cost[v] )&#123;   </span></span><br><span class="line"><span class="comment">//                   if ( dist[u][v] + d[u] &lt; d[v] )&#123;</span></span><br><span class="line"><span class="comment">//                        d[v] = dist[u][v] + d[u];</span></span><br><span class="line"><span class="comment">//                   &#125;</span></span><br><span class="line"><span class="comment">//                   cost[v] = T[u][v] + cost[u]; </span></span><br><span class="line"><span class="comment">//               &#125;else if ( T[u][v] + cost[u] == cost[v] )&#123;</span></span><br><span class="line"><span class="comment">//                   if( dist[u][v] + d[u] &lt; d[v] )&#123;</span></span><br><span class="line"><span class="comment">//                         d[v] = dist[u][v] + d[u];</span></span><br><span class="line"><span class="comment">//                         // cost[v] = T[u][v] + cost[u]; </span></span><br><span class="line"><span class="comment">//                   &#125;</span></span><br><span class="line"><span class="comment">//               &#125;</span></span><br><span class="line"><span class="comment">//           &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 思考过用BFS */</span></span><br><span class="line"><span class="comment">// void bfs(int s)&#123;</span></span><br><span class="line"><span class="comment">//     queue&lt;int&gt; q;</span></span><br><span class="line"><span class="comment">//     q.push(s);</span></span><br><span class="line"><span class="comment">//     visited[s] = true;</span></span><br><span class="line"><span class="comment">//     while (!q.empty())&#123;</span></span><br><span class="line"><span class="comment">//         int u = q.front();</span></span><br><span class="line"><span class="comment">//         q.pop();</span></span><br><span class="line"><span class="comment">//         for (int v = 0; v &lt; n; v++) &#123;</span></span><br><span class="line"><span class="comment">//            if ( visited[v] == false &amp;&amp; dist[u][v] != INF)&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> ans, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( u == n )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( q &lt;= k)&#123;</span><br><span class="line">            <span class="keyword">if</span> (ans &lt;= mans)&#123;</span><br><span class="line">                mans = ans;</span><br><span class="line">            &#125;</span><br><span class="line">            haveans = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">2</span>; v &lt;= n; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( visited[v] == <span class="literal">false</span> &amp;&amp; dist[u][v] != INF)&#123;</span><br><span class="line">            visited[v] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "next: " &lt;&lt;v &lt;&lt;endl; </span></span><br><span class="line">            dfs(v, ans + dist[u][v], q + T[u][v]);</span><br><span class="line">            visited[v] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fill(dist[<span class="number">0</span>], dist[<span class="number">0</span>] + MAXN* MAXN, INF);</span><br><span class="line">    fill(T[<span class="number">0</span>], T[<span class="number">0</span>] + MAXN* MAXN, INF);</span><br><span class="line">    <span class="comment">// fill(d, d+MAXN, INF);</span></span><br><span class="line">    <span class="comment">// fill(cost, cost+MAXN, INF);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k &gt;&gt; n &gt;&gt; r;</span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++) &#123;</span><br><span class="line">       <span class="keyword">int</span> s, d, w, cost;</span><br><span class="line">       <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; d &gt;&gt; w &gt;&gt; cost;</span><br><span class="line">       dist[s][d] = w;</span><br><span class="line">       T[s][d] = cost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (haveans) <span class="built_in">cout</span> &lt;&lt; mans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">    <span class="comment">//    for (int j = 1; j &lt;= n; j++) &#123;</span></span><br><span class="line">    <span class="comment">//       cout &lt;&lt; dist[i][j] &lt;&lt;" ";</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//    cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// visited[1] = true;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">    <span class="comment">//    for (int j = 1; j &lt;= n; j++) &#123;</span></span><br><span class="line">    <span class="comment">//       cout &lt;&lt; T[i][j] &lt;&lt;" ";</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//    cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// dijistra(1);</span></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; d[i] &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt;"---" &lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; cost[i] &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; d[n] &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// if ( cost[n] &lt;= k)&#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; d[n] &lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// &#125;else&#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; -1 &lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="牛客网华为练习题"><a class="markdownIt-Anchor" href="#牛客网华为练习题"></a> <a href="https://www.nowcoder.com/ta/huawei?page=0" target="_blank" rel="noopener">牛客网华为练习题</a></h1><h2 id="合并表记录"><a class="markdownIt-Anchor" href="#合并表记录"></a> <a href="https://www.nowcoder.com/practice/de044e89123f4a7482bd2b214a685201?tpId=37&amp;tqId=21231&amp;tPage=1&amp;rp=&amp;ru=/ta/huawei&amp;qru=/ta/huawei/question-ranking" target="_blank" rel="noopener">合并表记录</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">odict = dict()</span><br><span class="line">n = int(input().strip())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    ids, val = map(int, input().split())</span><br><span class="line">    odict[ids]  = odict.setdefault(ids, <span class="number">0</span>) + val</span><br><span class="line">slist = sorted(odict.items(), key= <span class="keyword">lambda</span> d: d[<span class="number">0</span>], reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> odict.items():</span><br><span class="line">    print(k, v)</span><br></pre></td></tr></table></figure><p>Python 中字典的有序无序针对的是<strong>插入顺序而不是键值大小顺序</strong>,要想根据key或value排序可以直接用sort后再输出。而如果输出要保持输入的顺序，则使用 collections下的 OrderedDict(‘记住插入顺序的字典’)</p><p><strong>Python逆序输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reverse</span></span><br><span class="line">n = input().strip()</span><br><span class="line"><span class="comment"># for i in range()</span></span><br><span class="line">rev = reversed(n)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rev:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># range(-1)</span></span><br><span class="line">s = <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">    print(s[i])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;429三道笔试题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#429三道笔试题&quot;&gt;&lt;/a&gt; 4.29三道笔试题：&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;做了其他大厂的笔试题后，好像确实华为的稍微简单点。只不过其他的笔试题是有模拟题
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>剑指Offer_leetcode刷题记录</title>
    <link href="https://nymrli.top/2020/04/20/%E5%89%91%E6%8C%87Offer-leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://nymrli.top/2020/04/20/剑指Offer-leetcode刷题记录/</id>
    <published>2020-04-20T05:10:13.000Z</published>
    <updated>2020-09-08T06:48:08.250Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于临近春招末期，时间比较紧，就不记录思考过程了，直接贴AC代码。以后有空补上</p><p>代码大多用C++，仅是过而已，没有进行优化。</p></blockquote><h4 id="面试题03-数组中重复的数字"><a class="markdownIt-Anchor" href="#面试题03-数组中重复的数字"></a> <a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/" target="_blank" rel="noopener">面试题03. 数组中重复的数字</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">int</span> size = nums.size();</span><br><span class="line">        <span class="keyword">if</span> (size &lt;<span class="number">0</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr(size);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">            arr[nums[i]] += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[nums[i]] &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题04-二维数组中的查找"><a class="markdownIt-Anchor" href="#面试题04-二维数组中的查找"></a> <a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/" target="_blank" rel="noopener">面试题04. 二维数组中的查找</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> column = matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> row = matrix.size();</span><br><span class="line">        <span class="keyword">if</span> (column &lt;= <span class="number">0</span> || row &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">int</span> c = column - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>( r &lt; row &amp;&amp; c &gt;= <span class="number">0</span>  )&#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[r][c] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(matrix[r][c] &gt; target)&#123;</span><br><span class="line">                c --;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题05-替换空格"><a class="markdownIt-Anchor" href="#面试题05-替换空格"></a> <a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/" target="_blank" rel="noopener">面试题05. 替换空格</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)</span><br></pre></td></tr></table></figure><h4 id="面试题06-从尾到头打印链表"><a class="markdownIt-Anchor" href="#面试题06-从尾到头打印链表"></a> <a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/" target="_blank" rel="noopener">面试题06. 从尾到头打印链表</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; reversePrint(ListNode* head) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="keyword">while</span>( p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            ans.insert(ans.begin(), p-&gt;val);</span><br><span class="line">            <span class="comment">// or : ans.push_back();</span></span><br><span class="line">            <span class="comment">// then : return reverse(ans.begin(), ans.end());</span></span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>顺便重新再写遍链表吧:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="面试题07-重建二叉树"><a class="markdownIt-Anchor" href="#面试题07-重建二叉树"></a> <a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/" target="_blank" rel="noopener">面试题07. 重建二叉树</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preorder.empty() &amp;&amp; inorder.empty()) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        TreeNode *root = createTree(preorder, inorder, <span class="number">0</span>, preorder.size()<span class="number">-1</span>, <span class="number">0</span>, inorder.size()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode *<span class="title">createTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder, <span class="keyword">int</span> preL, <span class="keyword">int</span> preR, <span class="keyword">int</span> inL, <span class="keyword">int</span> inR)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preL&gt; preR) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="keyword">for</span>( k=inL; k&lt;=inR; k++)&#123;<span class="comment">// ▲写的挺熟练了, 就是多了个int被恶心坏了</span></span><br><span class="line">            <span class="keyword">if</span> (preorder[preL] == inorder[k])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode *root= <span class="keyword">new</span> TreeNode(preorder[preL]);   </span><br><span class="line">        <span class="keyword">int</span> numLeft = k - inL;</span><br><span class="line">        root-&gt;left = createTree(preorder, inorder, preL+<span class="number">1</span>, preL + numLeft, inL, k<span class="number">-1</span>);</span><br><span class="line">        root-&gt;right = createTree(preorder, inorder, preL +numLeft + <span class="number">1</span>, preR, k+<span class="number">1</span>, inR);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题09-用两个栈实现队列"><a class="markdownIt-Anchor" href="#面试题09-用两个栈实现队列"></a> <a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/" target="_blank" rel="noopener">面试题09. 用两个栈实现队列</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CQueue() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        s1.push(value);    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans;</span><br><span class="line">        <span class="keyword">if</span>(s1.empty() &amp;&amp; s2.empty() )<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s2.empty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!s1.empty())&#123;</span><br><span class="line">                s2.push(s1.top());</span><br><span class="line">                s1.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ans = s2.top();</span><br><span class="line">        s2.pop();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * CQueue* obj = new CQueue();</span></span><br><span class="line"><span class="comment"> * obj-&gt;appendTail(value);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;deleteHead();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="面试题10-i-斐波那契数列"><a class="markdownIt-Anchor" href="#面试题10-i-斐波那契数列"></a> <a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/" target="_blank" rel="noopener">面试题10- I. 斐波那契数列</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)&#123;</span><br><span class="line">            arr[n] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> arr[n];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">            arr[n] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> arr[n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( arr[n] )&#123;</span><br><span class="line">            <span class="keyword">return</span> arr[n];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 这边是递归而不是arr[n-1] + arr[n-2]</span></span><br><span class="line">            arr[n] = (fib(n<span class="number">-1</span>)%MOD + fib(n<span class="number">-2</span>)%MOD)%MOD;</span><br><span class="line">            <span class="keyword">return</span> arr[n];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题10-ii-青蛙跳台阶问题"><a class="markdownIt-Anchor" href="#面试题10-ii-青蛙跳台阶问题"></a> <a href="https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/" target="_blank" rel="noopener">面试题10- II. 青蛙跳台阶问题</a></h4><blockquote><p>问题实质就是fib</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">            arr[n] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> arr[n];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>)&#123;</span><br><span class="line">            arr[n] = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> arr[n];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (n==<span class="number">0</span>)&#123;<span class="comment">// 比上题多了个范围</span></span><br><span class="line">            arr[n] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> arr[n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( arr[n] )&#123;</span><br><span class="line">            <span class="keyword">return</span> arr[n];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 这边是递归而不是arr[n-1] + arr[n-2]</span></span><br><span class="line">            arr[n] = (numWays(n<span class="number">-1</span>)%MOD + numWays(n<span class="number">-2</span>)%MOD)%MOD;</span><br><span class="line">            <span class="keyword">return</span> arr[n];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题15-二进制中1的个数"><a class="markdownIt-Anchor" href="#面试题15-二进制中1的个数"></a> <a href="https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/" target="_blank" rel="noopener">面试题15. 二进制中1的个数</a></h4><blockquote><p><code>n &amp; (n-1)</code>结果为 n &lt;- 将n最右边的1改成0的数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">uint32_t</span> tmp = n;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(tmp)&#123;</span><br><span class="line">            ans ++;</span><br><span class="line">            tmp = tmp &amp; (tmp<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题16-数值的整数次方"><a class="markdownIt-Anchor" href="#面试题16-数值的整数次方"></a> <a href="https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/" target="_blank" rel="noopener">面试题16. 数值的整数次方</a></h4><blockquote><p>快速幂， 对负数判断一下</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">bool</span> fu = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;<span class="number">0</span>) fu = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="built_in">abs</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(tmp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp&amp;<span class="number">1</span>) res = res * base; </span><br><span class="line">        <span class="comment">// cout &lt;&lt; res &lt;&lt; " " ;</span></span><br><span class="line">        base = base * base;</span><br><span class="line">        tmp &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fu) <span class="keyword">return</span> <span class="number">1</span>/res;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="面试题17-打印从1到最大的n位数"><a class="markdownIt-Anchor" href="#面试题17-打印从1到最大的n位数"></a> <a href="https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/" target="_blank" rel="noopener">面试题17. 打印从1到最大的n位数</a></h4><blockquote><p>因为n的范围没给， 所以其实需要考虑大数的，只不过不考虑好像也能过。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            res *= base;;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; printNumbers(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i &lt; n ; i++)&#123;</span><br><span class="line">            ans += <span class="number">9</span>*<span class="built_in">pow</span>(<span class="number">10</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= ans; i ++) </span><br><span class="line">            v.push_back(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>写了个奇怪的东西</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; printNumbers(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10005</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; n;i++) <span class="comment">//cout &lt;&lt; a &lt;&lt; " ";</span></span><br><span class="line">        arr[i] = i;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">     <span class="built_in">string</span> ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        ans += <span class="string">'0'</span>+arr[i];</span><br><span class="line">        res.push_back(atoi(ans.c_str()));</span><br><span class="line">    &#125;<span class="keyword">while</span>(next_permutation(arr, arr+n));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = printNumbers(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="面试题18-删除链表的节点"><a class="markdownIt-Anchor" href="#面试题18-删除链表的节点"></a> <a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/" target="_blank" rel="noopener">面试题18. 删除链表的节点</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteNode</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (head-&gt;val == val &amp;&amp; head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (head-&gt;val == val) <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">        ListNode *pre = head;</span><br><span class="line">        ListNode *p = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;val == val)&#123;</span><br><span class="line">                pre-&gt;next = p-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span>(p);</span><br><span class="line">                p = pre-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题22-链表中倒数第k个节点"><a class="markdownIt-Anchor" href="#面试题22-链表中倒数第k个节点"></a> <a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/" target="_blank" rel="noopener">面试题22. 链表中倒数第k个节点</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// int (k == 0 ) ; return head;// 把0删了就可以了</span></span><br><span class="line"></span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode *jnode = head;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            jnode = jnode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jnode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题24-反转链表"><a class="markdownIt-Anchor" href="#面试题24-反转链表"></a> <a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/" target="_blank" rel="noopener">面试题24. 反转链表</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// pre这个NULL卡了很久，如果反转的话，第一个节点需要指向NULL</span></span><br><span class="line">        ListNode *pre = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        ListNode *ans = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            ListNode *next = p-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="literal">NULL</span>) ans = p;</span><br><span class="line">            p-&gt;next = pre;</span><br><span class="line">            pre = p;</span><br><span class="line">            p = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题25-合并两个排序的链表"><a class="markdownIt-Anchor" href="#面试题25-合并两个排序的链表"></a> <a href="https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/" target="_blank" rel="noopener">面试题25. 合并两个排序的链表</a></h4><blockquote><p>大晚上感觉思路还行, 就是细节过不了.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="literal">NULL</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span>(l2 == <span class="literal">NULL</span>) <span class="keyword">return</span> l1;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">NULL</span> &amp;&amp; l2 == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        ListNode *head =<span class="keyword">new</span> ListNode(<span class="number">0</span>);<span class="comment">// 随便生成一个表头, 最后忽略这个就行了</span></span><br><span class="line">        ListNode *newlist = head;</span><br><span class="line">        <span class="keyword">while</span>( l1 &amp;&amp; l2)&#123;</span><br><span class="line">                <span class="keyword">if</span> ( l1-&gt;val &lt; l2-&gt;val )&#123;</span><br><span class="line">                    newlist-&gt;next = l1;</span><br><span class="line">                    l1 = l1-&gt;next;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    newlist-&gt;next = l2;</span><br><span class="line">                    l2 = l2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                newlist = newlist-&gt;next;<span class="comment">// 指针也要往后</span></span><br><span class="line">        &#125;</span><br><span class="line">        newlist-&gt;next = l1 ? l1 : l2;<span class="comment">// 最后只剩一个</span></span><br><span class="line">        <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题26-树的子结构"><a class="markdownIt-Anchor" href="#面试题26-树的子结构"></a> <a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/" target="_blank" rel="noopener">面试题26. 树的子结构</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *left;</span><br><span class="line"> *     TreeNode *right;</span><br><span class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isSubStructure(TreeNode* A, TreeNode* B) &#123;</span><br><span class="line">        bool notsub = false;</span><br><span class="line">        // if(A == NULL || B == NULL) return false;</span><br><span class="line">        if ( A &amp;&amp; B)&#123;</span><br><span class="line">            if ( A-&gt;val == B-&gt;val )        // 找到根节点</span><br><span class="line">                // notsub = isSubStructure(A, B);</span><br><span class="line">                notsub = same(A,B);</span><br><span class="line"></span><br><span class="line">            if (!notsub)&#123;</span><br><span class="line">                // notsub = same(A-&gt;left,B);</span><br><span class="line">                notsub = isSubStructure(A-&gt;left,B);</span><br><span class="line">            &#125;</span><br><span class="line">            if (!notsub)&#123;</span><br><span class="line">                // notsub = same(A-&gt;right, B);</span><br><span class="line">                notsub = isSubStructure(A-&gt;right, B);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return notsub;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bool same(TreeNode* A, TreeNode* B)&#123;</span><br><span class="line">        if (B == NULL) return true;</span><br><span class="line">        if (A==NULL) return false;</span><br><span class="line">        if( A-&gt;val != B-&gt;val) return false;</span><br><span class="line"></span><br><span class="line">        return same(A-&gt;left,B-&gt;left) &amp;&amp; same(A-&gt;right, B-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题30-包含min函数的栈"><a class="markdownIt-Anchor" href="#面试题30-包含min函数的栈"></a> <a href="https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/" target="_blank" rel="noopener">面试题30. 包含min函数的栈</a></h4><blockquote><p>同时维护一个存储最小值的栈</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; common;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; assist;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    MinStack() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        common.push(x);</span><br><span class="line">        <span class="keyword">if</span> (assist.empty()) assist.push(x);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> top = assist.top();</span><br><span class="line">            <span class="keyword">if</span> ( x &lt; top ) assist.push(x);</span><br><span class="line">            <span class="keyword">else</span> assist.push(top);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// int tmp = common.top();</span></span><br><span class="line">        common.pop();</span><br><span class="line">        assist.pop();</span><br><span class="line">        <span class="comment">// return tmp;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = common.top();</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = assist.top();</span><br><span class="line">        <span class="comment">// assist.pop();</span></span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack* obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj-&gt;min();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="面试题31-栈的压入-弹出序列"><a class="markdownIt-Anchor" href="#面试题31-栈的压入-弹出序列"></a> <a href="https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/" target="_blank" rel="noopener">面试题31. 栈的压入、弹出序列</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">validateStackSequences</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; pushed, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; popped)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">int</span> n = popped.size();</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pushed.size(); ++i)&#123;</span><br><span class="line">            st.push(pushed[i]);</span><br><span class="line">            <span class="keyword">while</span>(!st.empty() &amp;&amp; j &lt; n &amp;&amp; st.top() == popped[j])&#123;</span><br><span class="line">            <span class="comment">// 注意逻辑短路问题， 判断是否为空 必须在top之前</span></span><br><span class="line">                st.pop();</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.empty();</span><br><span class="line">        <span class="comment">// return (j == sz);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题32-i-从上到下打印二叉树"><a class="markdownIt-Anchor" href="#面试题32-i-从上到下打印二叉树"></a> <a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/" target="_blank" rel="noopener">面试题32 - I. 从上到下打印二叉树</a></h4><blockquote><p>BFS层次遍历</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; levelOrder(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode *&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            TreeNode *now = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            ans.push_back(now-&gt;val);</span><br><span class="line">            <span class="keyword">if</span> (now-&gt;left) q.push(now-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (now-&gt;right) q.push(now-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题32-ii-从上到下打印二叉树-ii"><a class="markdownIt-Anchor" href="#面试题32-ii-从上到下打印二叉树-ii"></a> <a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/" target="_blank" rel="noopener">面试题32 - II. 从上到下打印二叉树 II</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root) &#123;</span><br><span class="line">         <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt; <span class="keyword">int</span>&gt; &gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode *&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> sz = q.size();<span class="comment">// 统计当层的节点数</span></span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; row;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">                TreeNode *now = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                row.push_back(now-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> (now-&gt;left) q.push(now-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (now-&gt;right) q.push(now-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题32-iii-从上到下打印二叉树-iii"><a class="markdownIt-Anchor" href="#面试题32-iii-从上到下打印二叉树-iii"></a> <a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/" target="_blank" rel="noopener">面试题32 - III. 从上到下打印二叉树 III</a></h4><blockquote><p>控制an.push_back的内容</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; ans ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root== <span class="literal">NULL</span>) <span class="keyword">return</span> ans;</span><br><span class="line">         <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">1</span>;          <span class="comment">// 基层从前往后， 偶层从后往前</span></span><br><span class="line">        q.push(root);           <span class="comment">// 第一层</span></span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> n = q.size();</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; line;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">                TreeNode *now = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                line.push_back(now-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> ( now-&gt;left != <span class="literal">NULL</span>) q.push(now-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> ( now-&gt;right != <span class="literal">NULL</span> ) q.push(now-&gt;right);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( level % <span class="number">2</span> == <span class="number">1</span>)  ans.push_back(line);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                reverse(line.begin(), line.end());</span><br><span class="line">                ans.push_back(line);</span><br><span class="line">            &#125;</span><br><span class="line">            level ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">verifyPostorder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (postorder.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> sz = postorder.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(postorder, <span class="number">0</span>, sz<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">helper</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; postorder, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sz = postorder.size();</span><br><span class="line">        <span class="keyword">int</span> rootkey = postorder[sz<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> smallp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>( postorder[smallp] &lt; rootkey) smallp++;</span><br><span class="line">        <span class="comment">// 之后smallp 为第一个 &gt;= rootkey的索引， 即右子树的第一个</span></span><br><span class="line">        <span class="keyword">int</span> bigp = smallp;</span><br><span class="line">        <span class="keyword">while</span>( bigp &lt; sz<span class="number">-1</span> )&#123;   <span class="comment">// 检测右子树是不是符合全部大于key</span></span><br><span class="line">            <span class="keyword">if</span>(postorder[bigp] &lt; rootkey) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> left = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> ( smallp &gt; <span class="number">0</span> )</span><br><span class="line">         left =  helper(postorder, l, smallp<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">bool</span> right = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> ( bigp &gt; <span class="number">0</span>)</span><br><span class="line">             right =  helper(postorder, smallp, r<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> (left &amp;&amp; right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="剑指-offer-41-数据流中的中位数"><a class="markdownIt-Anchor" href="#剑指-offer-41-数据流中的中位数"></a> <a href="https://leetcode-cn.com/problems/shu-ju-liu-zhong-de-zhong-wei-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 41. 数据流中的中位数</a></h4><blockquote><p><a href="https://www.cnblogs.com/Elliott-Su-Faith-change-our-life/p/7472265.html" target="_blank" rel="noopener">Java中priorityQueue的使用——借用堆完成</a><br>add+offer（push）、element+peek（front-top）、remove+poll（pop）</p><p><a href="https://www.cnblogs.com/huashanqingzhu/p/11040390.html" target="_blank" rel="noopener">c++优先队列(priority_queue)用法详解</a></p><ul><li>参数缺省的话，优先队列就是大顶堆，队头元素最大。最小堆可以用仿函数less指定</li><li>如果是自定义类型, 则需要自己<strong>重载operator&lt;</strong> 或者 自己<strong>写仿函数</strong>()<ul><li>仿函数: （functor）又称为函数对象（function object）是一个能行使函数功能的<u>类</u>。仿函数的语法几乎和我们普通的函数调用一样，不过作为仿函数的类，<u>都必须重载operator()运算符</u></li></ul></li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// priority_queue&lt;Type, Container, Functional&gt;, 其中Functional为仿函数, 如greater, less</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof" target="_blank" rel="noopener">数组中数字出现的次数</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findFirst1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"enter"</span> &lt;&lt; n;</span><br><span class="line">        <span class="comment">//  &amp;&amp; (i &lt; sizeof(int) * 8)</span></span><br><span class="line">        <span class="keyword">while</span>( ( n &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;<span class="comment">//▲最后排查出来时这边括号没加</span></span><br><span class="line">            n = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "findFirst1" &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span> i; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isbit1</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        n = n &gt;&gt; index;</span><br><span class="line">        <span class="keyword">return</span> (n &amp; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v, <span class="keyword">int</span> &amp;one, <span class="keyword">int</span> &amp;two)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sz = v.size();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sz &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> firstXOR = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "begin" ;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;sz; i++) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; v[i];</span><br><span class="line">            firstXOR ^= v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; "firstXOR" &lt;&lt; firstXOR &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">int</span> index = findFirst1(firstXOR);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; index &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz;i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( isbit1(v[i], index) )&#123;</span><br><span class="line">                one ^= v[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                two ^= v[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; singleNumbers(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums.empty()) <span class="keyword">return</span> v;</span><br><span class="line">        solve(nums, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(arr, arr+ <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans = singleNumbers(v);;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; ans[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="面试题47-礼物的最大价值"><a class="markdownIt-Anchor" href="#面试题47-礼物的最大价值"></a> <a href="https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof/" target="_blank" rel="noopener">面试题47. 礼物的最大价值</a>-dp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxValue</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        row, col = len(grid), len(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># print(row, col )</span></span><br><span class="line">        <span class="comment"># 初始化第一列</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> range(<span class="number">1</span>, row):</span><br><span class="line">            grid[r][<span class="number">0</span>] += grid[r<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 初始化第一行</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>, col):</span><br><span class="line">            grid[<span class="number">0</span>][c] += grid[<span class="number">0</span>][c - <span class="number">1</span>]</span><br><span class="line">        <span class="comment"># dp状态更新</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, row):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, col):</span><br><span class="line">                grid[i][j] += max(grid[i<span class="number">-1</span>][j], grid[i][j - <span class="number">1</span>])</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> grid[row - <span class="number">1</span>][col - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="面试题49-丑数"><a class="markdownIt-Anchor" href="#面试题49-丑数"></a> <a href="https://leetcode-cn.com/problems/chou-shu-lcof/" target="_blank" rel="noopener">面试题49. 丑数</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nthUglyNumber</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        dp, a, b, c = [<span class="number">1</span>] * n, <span class="number">0</span> , <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            n2, n3, n4 = dp[a] * <span class="number">2</span>, dp[b] * <span class="number">3</span>, dp[c] * <span class="number">5</span></span><br><span class="line">            dp[i] = min(n2, n3, n4)</span><br><span class="line">            <span class="keyword">if</span> dp[i] == n2: a+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> dp[i] == n3: b+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> dp[i] == n4: c+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h4 id="面试题50-第一个只出现一次的字符"><a class="markdownIt-Anchor" href="#面试题50-第一个只出现一次的字符"></a> <a href="https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/" target="_blank" rel="noopener">面试题50. 第一个只出现一次的字符</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">firstUniqChar</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        hashtable = OrderedDict()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            hashtable[i] = hashtable.setdefault(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> hashtable.items():</span><br><span class="line">            <span class="keyword">if</span> v == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> k</span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span></span><br></pre></td></tr></table></figure><h4 id="剑指-offer-53-i-在排序数组中查找数字-i"><a class="markdownIt-Anchor" href="#剑指-offer-53-i-在排序数组中查找数字-i"></a> <a href="https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/" target="_blank" rel="noopener">剑指 Offer 53 - I. 在排序数组中查找数字 I</a></h4><blockquote><p>看到&quot;<strong>在排序数组中查询</strong>&quot;==&gt; 二分查找</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRight(nums, target) - getLeft(nums, target) + <span class="number">1</span>;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到和target相等的最边界(target 最小的下标)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getLeft</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = v.size();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = len<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>( l &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ( v[m] &lt; target)&#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;              <span class="comment">// 如果相等的话缩小右边边界</span></span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 找到和target的最右界(比target大的最小下标)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getRight</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = v.size();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = len<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>( l &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ( v[m] &lt;= target)&#123;<span class="comment">// 如果相等的话, 说明之前都是正确的, 那么就需要缩小左边界的范围</span></span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="剑指-offer-53-ii-0~n-1中缺失的数字"><a class="markdownIt-Anchor" href="#剑指-offer-53-ii-0~n-1中缺失的数字"></a> [剑指 Offer 53 - II. 0～n-1中缺失的数字</h3><blockquote><p>一个长度为n-1的<strong>递增排序数组</strong>中的所有数字都是唯一的==&gt;二分</p><p><a href="https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/solution/mian-shi-ti-53-ii-0n-1zhong-que-shi-de-shu-zi-er-f/" target="_blank" rel="noopener">为什么最后return l解析</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.size();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>( l &lt;= r) &#123;<span class="comment">// 当 arr[r - l] 为空时跳出</span></span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ( nums[mid] == mid)&#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( nums[mid] &gt; mid)&#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 当 r == l == mid时,还会再进行一轮, 此时有arr[mid] != mid 那么就是当前数字出了问题, return谁都可以, 但由于mid是在while里声明的, 因此只考虑return l or r, 由于不相等的情况下该轮while结束后r := mid - 1, 因此就偏离了。 最终就选取l了.</span></span><br><span class="line">        <span class="keyword">return</span> l;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题52-两个链表的第一个公共节点"><a class="markdownIt-Anchor" href="#面试题52-两个链表的第一个公共节点"></a> <a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/" target="_blank" rel="noopener">面试题52. 两个链表的第一个公共节点</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span><span class="params">(self, headA: ListNode, headB: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        node1, node2 = headA, headB</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> node1 != node2:</span><br><span class="line">            node1 = node1.next <span class="keyword">if</span> node1 <span class="keyword">else</span> headB</span><br><span class="line">            node2 = node2.next <span class="keyword">if</span> node2 <span class="keyword">else</span> headA</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node1</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># # Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def getListLength(head):</span></span><br><span class="line"><span class="comment">#     if head == None:</span></span><br><span class="line"><span class="comment">#         return -1</span></span><br><span class="line"><span class="comment">#     ans = 0</span></span><br><span class="line"><span class="comment">#     while head != None:</span></span><br><span class="line"><span class="comment">#         ans += 1</span></span><br><span class="line"><span class="comment">#         head = head.next</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     return ans</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def getIntersectionNode(headA: ListNode, headB: ListNode) -&gt; ListNode:</span></span><br><span class="line"><span class="comment">#     # print(headA, headB)</span></span><br><span class="line"><span class="comment">#     lena = getListLength(headA)</span></span><br><span class="line"><span class="comment">#     lenb = getListLength(headB)</span></span><br><span class="line"><span class="comment">#     print(lena, lenb)</span></span><br><span class="line"><span class="comment">#     diff = lena - lenb </span></span><br><span class="line"><span class="comment">#     if diff&gt;0:</span></span><br><span class="line"><span class="comment">#         flagalong = True</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         flagalong = False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#     if flagalong:</span></span><br><span class="line"><span class="comment">#         listLong = headA</span></span><br><span class="line"><span class="comment">#         listShort = headB</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         listLong = headB</span></span><br><span class="line"><span class="comment">#         listShort = headA</span></span><br><span class="line"><span class="comment">#         diff = -diff</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     # print(diff)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     for i in range(diff):</span></span><br><span class="line"><span class="comment">#         listLong = listLong.next</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#     # print(listLong.val, listShort.val)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     while listLong != None and listShort != None and listLong.val != listShort.val:</span></span><br><span class="line"><span class="comment">#         listShort = listShort.next</span></span><br><span class="line"><span class="comment">#         listLong = listLong.next</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     return listLong</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># headA2 = ListNode(4)</span></span><br><span class="line"><span class="comment"># headA1 = ListNode(3)</span></span><br><span class="line"><span class="comment"># HeadA = ListNode(1)</span></span><br><span class="line"><span class="comment"># headA1.next = headA2</span></span><br><span class="line"><span class="comment"># HeadA.next = headA1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># headB2 = ListNode(4)</span></span><br><span class="line"><span class="comment"># headB1 = ListNode(3)</span></span><br><span class="line"><span class="comment"># HeadB = ListNode(2)</span></span><br><span class="line"><span class="comment"># headB1.next = headB2</span></span><br><span class="line"><span class="comment"># HeadB.next = headB1</span></span><br></pre></td></tr></table></figure><h4 id="面试题54-二叉搜索树的第k大节点"><a class="markdownIt-Anchor" href="#面试题54-二叉搜索树的第k大节点"></a> <a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/" target="_blank" rel="noopener">面试题54. 二叉搜索树的第k大节点</a></h4><blockquote><p>中序遍历, 从右往左的顺序就是从大往小</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kthLargest</span><span class="params">(TreeNode* root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        help(root,k);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">(TreeNode* root,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        help(root-&gt;right,k);</span><br><span class="line">        visit(root,k);</span><br><span class="line">        help(root-&gt;left,k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(TreeNode* root,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        th++;</span><br><span class="line">        <span class="keyword">if</span>(th==k) ans=root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> th=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题57-和为s的两个数字"><a class="markdownIt-Anchor" href="#面试题57-和为s的两个数字"></a> <a href="https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/" target="_blank" rel="noopener">面试题57. 和为s的两个数字</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            sums = nums[l] + nums[r]</span><br><span class="line">            <span class="keyword">if</span> sums &gt; target:</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> sums &lt; target:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">else</span>:<span class="keyword">return</span> nums[l], nums[r]</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><h4 id="面试题58-i-翻转单词顺序"><a class="markdownIt-Anchor" href="#面试题58-i-翻转单词顺序"></a> <a href="https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/" target="_blank" rel="noopener">面试题58 - I. 翻转单词顺序</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        res = s.split()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join(reversed(res))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        res = s.split()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join(reversed(res))</span><br></pre></td></tr></table></figure><h4 id="面试题58-ii-左旋转字符串"><a class="markdownIt-Anchor" href="#面试题58-ii-左旋转字符串"></a> <a href="https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/" target="_blank" rel="noopener">面试题58 - II. 左旋转字符串</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseLeftWords</span><span class="params">(self, s: str, n: int)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> s[n:] + s[:n]</span><br></pre></td></tr></table></figure><h4 id="面试题59-i-滑动窗口的最大值"><a class="markdownIt-Anchor" href="#面试题59-i-滑动窗口的最大值"></a> <a href="https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/" target="_blank" rel="noopener">面试题59 - I. 滑动窗口的最大值</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSlidingWindow</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; List[int]:</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - k + <span class="number">1</span>):</span><br><span class="line">            ans.append(max(nums[i: i + k]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h4 id="面试题59-ii-队列的最大值"><a class="markdownIt-Anchor" href="#面试题59-ii-队列的最大值"></a> <a href="https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/" target="_blank" rel="noopener">面试题59 - II. 队列的最大值</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> deque, Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxQueue</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.queue = Queue()</span><br><span class="line">        self.deque = deque()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_value</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.deque[<span class="number">0</span>] <span class="keyword">if</span> self.deque <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push_back</span><span class="params">(self, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.deque <span class="keyword">and</span> value &gt; self.deque[<span class="number">-1</span>]: </span><br><span class="line">            self.deque.pop()</span><br><span class="line">        self.deque.append(value)</span><br><span class="line">        self.queue.put(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop_front</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.deque: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        ans = self.queue.get()</span><br><span class="line">        <span class="keyword">if</span> ans == self.deque[<span class="number">0</span>]:</span><br><span class="line">            self.deque.popleft()</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h4 id="面试题60-n个骰子的点数"><a class="markdownIt-Anchor" href="#面试题60-n个骰子的点数"></a> <a href="https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof/" target="_blank" rel="noopener">面试题60. n个骰子的点数</a>-dp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; twoSum(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span> dp[<span class="number">15</span>][<span class="number">70</span>];</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i ++) &#123;</span><br><span class="line">            dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= <span class="number">6</span>*i; j ++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> cur = <span class="number">1</span>; cur &lt;= <span class="number">6</span>; cur ++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j - cur &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dp[i][j] += dp[i<span class="number">-1</span>][j-cur];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> all = <span class="built_in">pow</span>(<span class="number">6</span>, n);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt;= <span class="number">6</span> * n; i ++) &#123;</span><br><span class="line">            ret.push_back(dp[n][i] * <span class="number">1.0</span> / all);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="面试题61-扑克牌中的顺子"><a class="markdownIt-Anchor" href="#面试题61-扑克牌中的顺子"></a> <a href="https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/" target="_blank" rel="noopener">面试题61. 扑克牌中的顺子</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isStraight</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        sort_list = sorted(nums)</span><br><span class="line">        anything = <span class="number">0</span></span><br><span class="line">        <span class="comment"># if sort_list[-1] - sort_list[0] == 4:</span></span><br><span class="line">        gap = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(len(sort_list) - <span class="number">1</span>):</span><br><span class="line">            now_val = sort_list[index]</span><br><span class="line">            next_val = sort_list[index+<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># print(now_val, next_val)</span></span><br><span class="line">            <span class="keyword">if</span> now_val == <span class="number">0</span>: anything += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> now_val &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 出现对子</span></span><br><span class="line">                <span class="keyword">if</span> now_val == next_val: <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    gap += next_val - now_val <span class="number">-1</span> </span><br><span class="line">        <span class="comment"># print(gap, anything)</span></span><br><span class="line">        <span class="keyword">if</span> gap &gt; anything:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h4 id="面试题62-圆圈中最后剩下的数字"><a class="markdownIt-Anchor" href="#面试题62-圆圈中最后剩下的数字"></a> <a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/" target="_blank" rel="noopener">面试题62. 圆圈中最后剩下的数字</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n, m)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    x = f(n - <span class="number">1</span>, m)</span><br><span class="line">    <span class="keyword">return</span> (m + x) % n</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lastRemaining</span><span class="params">(self, n: int, m: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> f(n, m)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># # Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def getListLength(head):</span></span><br><span class="line"><span class="comment">#     if head == None:</span></span><br><span class="line"><span class="comment">#         return -1</span></span><br><span class="line"><span class="comment">#     ans = 0</span></span><br><span class="line"><span class="comment">#     while head != None:</span></span><br><span class="line"><span class="comment">#         ans += 1</span></span><br><span class="line"><span class="comment">#         head = head.next</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     return ans</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def getIntersectionNode(headA: ListNode, headB: ListNode) -&gt; ListNode:</span></span><br><span class="line"><span class="comment">#     # print(headA, headB)</span></span><br><span class="line"><span class="comment">#     lena = getListLength(headA)</span></span><br><span class="line"><span class="comment">#     lenb = getListLength(headB)</span></span><br><span class="line"><span class="comment">#     print(lena, lenb)</span></span><br><span class="line"><span class="comment">#     diff = lena - lenb </span></span><br><span class="line"><span class="comment">#     if diff&gt;0:</span></span><br><span class="line"><span class="comment">#         flagalong = True</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         flagalong = False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#     if flagalong:</span></span><br><span class="line"><span class="comment">#         listLong = headA</span></span><br><span class="line"><span class="comment">#         listShort = headB</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         listLong = headB</span></span><br><span class="line"><span class="comment">#         listShort = headA</span></span><br><span class="line"><span class="comment">#         diff = -diff</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     # print(diff)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     for i in range(diff):</span></span><br><span class="line"><span class="comment">#         listLong = listLong.next</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#     # print(listLong.val, listShort.val)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     while listLong != None and listShort != None and listLong.val != listShort.val:</span></span><br><span class="line"><span class="comment">#         listShort = listShort.next</span></span><br><span class="line"><span class="comment">#         listLong = listLong.next</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#     return listLong</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># headA2 = ListNode(4)</span></span><br><span class="line"><span class="comment"># headA1 = ListNode(3)</span></span><br><span class="line"><span class="comment"># HeadA = ListNode(1)</span></span><br><span class="line"><span class="comment"># headA1.next = headA2</span></span><br><span class="line"><span class="comment"># HeadA.next = headA1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># headB2 = ListNode(4)</span></span><br><span class="line"><span class="comment"># headB1 = ListNode(3)</span></span><br><span class="line"><span class="comment"># HeadB = ListNode(2)</span></span><br><span class="line"><span class="comment"># headB1.next = headB2</span></span><br><span class="line"><span class="comment"># HeadB.next = headB1</span></span><br></pre></td></tr></table></figure><h4 id="最长公共前缀"><a class="markdownIt-Anchor" href="#最长公共前缀"></a> 最长公共前缀</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> len(strs) == <span class="number">0</span>: <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> len(strs) == <span class="number">1</span>: <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br><span class="line">        strs = sorted(strs)</span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        minlen = min(len(strs[<span class="number">0</span>]), len(strs[<span class="number">-1</span>]))</span><br><span class="line">        print( strs[<span class="number">0</span>],  strs[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">while</span> idx &lt; minlen:</span><br><span class="line">            <span class="keyword">if</span> strs[<span class="number">0</span>][idx] != strs[<span class="number">-1</span>][idx]:</span><br><span class="line">                <span class="keyword">return</span> strs[<span class="number">0</span>][:idx]</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> len(strs[<span class="number">0</span>])  <span class="keyword">if</span> len(strs[<span class="number">0</span>]) &lt; len(strs[<span class="number">-1</span>]) <span class="keyword">else</span> len(strs[<span class="number">-1</span>]) </span><br><span class="line">        <span class="comment"># </span></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.longestCommonPrefix([<span class="string">'abcd'</span>, <span class="string">'abdd'</span>, <span class="string">'aad'</span>]))</span><br></pre></td></tr></table></figure><h4 id="模拟队列"><a class="markdownIt-Anchor" href="#模拟队列"></a> 模拟队列</h4><blockquote><p>腾讯笔试题第一题，第四题为“两个栈模拟队列”</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Mrli</span></span><br><span class="line"><span class="comment"> * @Date: 2020-04-26 19:58:20</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-04-27 22:58:50</span></span><br><span class="line"><span class="comment"> * @Description: </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="comment">//命名空间</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> arr[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="comment">//取消输入输出流等待同步</span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;      <span class="comment">// n个操作</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;n;</span><br><span class="line">        fill(arr, arr+MAXN, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> di = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start = di;</span><br><span class="line">        <span class="keyword">int</span> p = di; <span class="comment">// 栈底为-1 尾指针</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">            <span class="built_in">string</span> operate;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; operate;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "p:" &lt;&lt; p  &lt;&lt; start &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span> (operate == <span class="string">"PUSH"</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> num;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">                arr[p++] = num;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (operate == <span class="string">"TOP"</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> ( p == start) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; arr[start] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (operate == <span class="string">"POP"</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (p == start) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">else</span> start++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (operate == <span class="string">"SIZE"</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; p - start &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (operate == <span class="string">"CLEAR"</span>)&#123;</span><br><span class="line">                p = di;</span><br><span class="line">                start = di;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// PUSH 1</span></span><br><span class="line"><span class="comment">// PUSH 2</span></span><br><span class="line"><span class="comment">// TOP</span></span><br><span class="line"><span class="comment">// POP</span></span><br><span class="line"><span class="comment">// TOP</span></span><br><span class="line"><span class="comment">// POP</span></span><br><span class="line"><span class="comment">// POP</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// PUSH 1</span></span><br><span class="line"><span class="comment">// PUSH 2</span></span><br><span class="line"><span class="comment">// SIZE</span></span><br><span class="line"><span class="comment">// POP</span></span><br><span class="line"><span class="comment">// SIZE</span></span><br></pre></td></tr></table></figure><h4 id="记一下二维vector的初始化"><a class="markdownIt-Anchor" href="#记一下二维vector的初始化"></a> 记一下二维vector的初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; v(<span class="number">3</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">5</span>,<span class="number">4</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size() ; i ++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; v[<span class="number">0</span>].size(); j++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v[i][j] ; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和通过数组来初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans(arr, arr + <span class="keyword">sizeof</span>(arr));</span><br></pre></td></tr></table></figure><p>华为2016年秋招题：</p><p>A:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:<span class="comment"># try一定要最后加， 不然不好debug</span></span><br><span class="line">        n, m = map(int, input().split())</span><br><span class="line">        grades = list(map(int, input().split()))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            opt, (ids), (val) = input().strip().split()</span><br><span class="line">            ids = int(ids)</span><br><span class="line">            val = int(val)</span><br><span class="line">            <span class="keyword">if</span> opt == <span class="string">'U'</span>:</span><br><span class="line">                grades[ids<span class="number">-1</span>] = val</span><br><span class="line">            <span class="keyword">elif</span> opt == <span class="string">'Q'</span>:</span><br><span class="line">                start, end = sorted([ids, val])</span><br><span class="line">                print(max( grades[start<span class="number">-1</span>: end]))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># print("a" &lt; "b" , "3" &lt; "4")</span></span><br><span class="line"><span class="comment"># print('a' &lt; 'b' , '3' &lt; '4')</span></span><br><span class="line"><span class="comment"># print('A' &lt; 'b' , 'A' &lt; '2')</span></span><br></pre></td></tr></table></figure><p>B[编程题]简单错误记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Author: Mrli</span></span><br><span class="line"><span class="string">@Date: 2020-04-28 21:47:46</span></span><br><span class="line"><span class="string">@LastEditTime: 2020-04-28 22:22:20</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="comment"># import sys</span></span><br><span class="line">rec_dict = collections.OrderedDict()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一种输入方式</span></span><br><span class="line"><span class="comment"># for line in sys.stdin:</span></span><br><span class="line"><span class="comment">#     ele = line.split('\\')[-1].strip('\n')</span></span><br><span class="line"><span class="comment">#     if ele not in lst:</span></span><br><span class="line"><span class="comment">#         lst.append(ele)</span></span><br><span class="line"><span class="comment">#     if ele in dct:</span></span><br><span class="line"><span class="comment">#         dct[ele] = dct[ele] + 1</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         dct[ele] = 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ins = input().strip()</span><br><span class="line">        path = ins.split(<span class="string">'\\'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> path <span class="keyword">not</span> <span class="keyword">in</span> rec_dict:</span><br><span class="line">            rec_dict[path] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rec_dict[path] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># print(rec_dict)</span></span><br><span class="line">sort_res = sorted(rec_dict.items(), key = <span class="keyword">lambda</span> d: d[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># print(rec_dict)</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> sort_res[:<span class="number">8</span>]:</span><br><span class="line">    path, linenum = k.split()</span><br><span class="line">    print(path[<span class="number">-16</span>:], linenum, v)</span><br></pre></td></tr></table></figure><p>Tips: 两种输入方式的推出都为：<code>ctrl + z</code></p><blockquote><p>EOF是一个计算机术语，为End Of File的缩写，在操作系统中表示资料源无更多的资料可读取。资料源通常称为档案或串流。</p><p>而在不同系统的EOF所代表的值是不一样的，在Visual Studio 2017下为ctrl+c，windows下为ctrl+z，linux/unix下为ctrl+c或ctrl+d；</p><p>运用这个小技巧可以在调试的时候手动结束，很方便。</p></blockquote><h4 id="两路合并算法"><a class="markdownIt-Anchor" href="#两路合并算法"></a> 两路合并算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> begin1, begin2;</span><br><span class="line">    begin1 = l;</span><br><span class="line">    begin2 = mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> index; <span class="comment">// 新数组添加元素的索引值</span></span><br><span class="line">    <span class="comment">// int *newarr = (int *)malloc((r-l+1)*sizeof(int));</span></span><br><span class="line">    <span class="keyword">int</span> *newarr = <span class="keyword">new</span> <span class="keyword">int</span>[r-l+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(index = <span class="number">0</span>; begin1 &lt;= mid &amp;&amp; begin2 &lt;= r; )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( arr[begin1] &lt; arr[begin2] )&#123;</span><br><span class="line">            newarr[index++] = arr[begin1++];</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            newarr[index++] = arr[begin2++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"lmr: "</span> &lt;&lt; l &lt;&lt;<span class="string">" "</span> &lt;&lt;mid &lt;&lt; <span class="string">" "</span> &lt;&lt; r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "res:" &lt;&lt; (begin1 &lt;= mid) &lt;&lt; (begin2 &lt;= r) &lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// while (begin1 &lt;= mid)&#123;</span></span><br><span class="line">    <span class="comment">//     newarr[index++] = arr[begin1++];</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// while(begin2 &lt;= r)&#123;</span></span><br><span class="line">    <span class="comment">//     newarr[index++] = arr[begin2++];</span></span><br><span class="line">    <span class="comment">// &#125;   </span></span><br><span class="line">    <span class="keyword">if</span> (begin1 &lt;= mid)&#123;</span><br><span class="line">        newarr[index++] = arr[begin1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        newarr[index++] = arr[begin2++];</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">int</span> start = l;      <span class="comment">// arr开始更新的地方</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;          <span class="comment">// 新数组</span></span><br><span class="line">    <span class="comment">// while( start &lt;= r)&#123;  // 将新数组全部拷贝进 arr[l] -&gt; arr[r]</span></span><br><span class="line">    <span class="comment">//     arr[start++] = newarr[k++]; //copy排好序的数。</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; newarr[k];</span><br><span class="line">        arr[i] = newarr[k++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + ((r-l) &gt;&gt;<span class="number">1</span>);<span class="comment">// ▲位运算一定要加括号</span></span><br><span class="line">        <span class="comment">// int mid = (l+r)/2;</span></span><br><span class="line">        mergesort(arr, l, mid);</span><br><span class="line">        mergesort(arr, mid+<span class="number">1</span>, r);</span><br><span class="line">        merge(arr, l, mid, r);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"arr: "</span> &lt;&lt; l &lt;&lt;<span class="string">" "</span> &lt;&lt;mid &lt;&lt; <span class="string">" "</span> &lt;&lt; r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (s &lt; t)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">int</span> m = (s + t) / <span class="number">2</span>;</span><br><span class="line">  mergeSort(arr, s, m);</span><br><span class="line">  mergeSort(arr, m + <span class="number">1</span>, t);</span><br><span class="line">  merge(arr, s, m, t);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// srand( (unsigned)time( NULL ) );  </span></span><br><span class="line">    <span class="comment">// Random(N);</span></span><br><span class="line">    <span class="keyword">int</span> a[N] = &#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; N; i++) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="comment">// // mergeSort(a, 0, N-1);//  改</span></span><br><span class="line">    mergesort(a, <span class="number">0</span>, N<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"after sort:"</span> &lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; N; i++) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="comment">// for(int i= 0; i &lt; 10 ;i ++)&#123;</span></span><br><span class="line">    <span class="comment">//     for( int j = 0; j &lt; 5; j ++)&#123;</span></span><br><span class="line">    <span class="comment">//         cout &lt;&lt; ( i + j)/ 2  &lt;&lt;" " &lt;&lt; (i + (j-2))</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快排"><a class="markdownIt-Anchor" href="#快排"></a> 快排</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partion</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">8</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n = (<span class="keyword">sizeof</span>(a) / <span class="number">4</span>)<span class="number">-1</span>;</span><br><span class="line">quickSort(a, m,n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q = partion(a, m, n);</span><br><span class="line">quickSort(a, m, q );</span><br><span class="line">quickSort(a, q + <span class="number">1</span>, n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partion</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key=m;</span><br><span class="line"><span class="keyword">int</span> j= n,i=m;</span><br><span class="line"><span class="keyword">int</span> temp1, temp2;</span><br><span class="line"><span class="keyword">while</span> (i != j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (a[j] &gt; a[key] &amp;&amp; i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">--j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((a[i] &lt; a[key]) &amp;&amp; (i &lt; j))</span><br><span class="line">&#123;</span><br><span class="line">++i;</span><br><span class="line">&#125;<span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">temp1 = a[j];</span><br><span class="line">a[j] = a[i];</span><br><span class="line">a[i] = temp1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp2 = a[key];</span><br><span class="line">a[key] = a[i];</span><br><span class="line">a[i] = temp2;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> i = l, j = r;</span><br><span class="line">    <span class="keyword">int</span> key = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x = arr[key];</span><br><span class="line">    <span class="keyword">while</span> ( i &lt; j)&#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[j] &gt; x ) j --;</span><br><span class="line">        <span class="keyword">while</span> (arr[i] &lt; x) i++;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j)&#123;</span><br><span class="line">            swap(arr, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(arr, l, j);</span><br><span class="line">        quickSort(arr, j+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述两种有重复元素就爬了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(q, l, j), quick_sort(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="记录下c的split写法"><a class="markdownIt-Anchor" href="#记录下c的split写法"></a> 记录下C++的split写法：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    getline(<span class="built_in">cin</span>, s);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; s &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">int</span> dindex = s.find(<span class="string">'-'</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dindex&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">string</span> a = s.substr(<span class="number">0</span>, dindex);</span><br><span class="line">    <span class="built_in">string</span> b = s.substr(dindex+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">"*"</span> &lt;&lt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">set</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/6763801.html" target="_blank" rel="noopener">C/C++中substr函数的应用(简单讲解)</a></p><p><a href="https://blog.csdn.net/patrick_star_cowboy/article/details/79199596" target="_blank" rel="noopener">C++如何保留两位有效数字！！！！</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def removeElement(nums, val):</span><br><span class="line">    # print(nums)</span><br><span class="line">    nums = list(map(str, nums))</span><br><span class="line">    st = &apos;&apos;.join(nums)</span><br><span class="line">    st = st.replace(str(val), &apos;&apos;)</span><br><span class="line">    return list(map(int, st))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">firstUniqChar</span><span class="params">( s: str)</span> -&gt; str:</span></span><br><span class="line">        hashtable = OrderedDict()</span><br><span class="line">        ans = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            hashtable[i] = hashtable.setdefault(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> hashtable.items():</span><br><span class="line">            <span class="keyword">if</span> v == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = Solution.firstUniqChar(<span class="string">"abaccdeff"</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h4 id="sum为m-拆成n个数-有哪些情况非连续"><a class="markdownIt-Anchor" href="#sum为m-拆成n个数-有哪些情况非连续"></a> Sum为m, 拆成n个数, 有哪些情况?(非连续)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printRes</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i: ans)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// way1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">        ans.push_back(val);</span><br><span class="line">        idx ++;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case:"</span> &lt;&lt; idx &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        printRes();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"=========="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        ans.pop_back();</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去重</span></span><br><span class="line">    <span class="keyword">int</span> last;</span><br><span class="line">    <span class="keyword">if</span> ( ans.empty() ) last = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        last = ans.back();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = last; i &lt;= val/<span class="number">2</span> ; i++) &#123;</span><br><span class="line">        ans.push_back(i);</span><br><span class="line">        func(val-i, n<span class="number">-1</span>);</span><br><span class="line">        ans.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// way2</span></span><br><span class="line"><span class="comment">// void func(int val, int n, int start)&#123;</span></span><br><span class="line"><span class="comment">//     if (n == 1)&#123;</span></span><br><span class="line"><span class="comment">//         ans.push_back(val);</span></span><br><span class="line"><span class="comment">//         idx ++;</span></span><br><span class="line"><span class="comment">//         cout &lt;&lt; "Case:" &lt;&lt; idx &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//         printRes();</span></span><br><span class="line"><span class="comment">//         cout &lt;&lt; "==========" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//         ans.pop_back();</span></span><br><span class="line"><span class="comment">//         return ;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     for (int i = start; i &lt;= val/2 ; i++) &#123;</span></span><br><span class="line"><span class="comment">//         ans.push_back(i);</span></span><br><span class="line"><span class="comment">//         func(val-i, n-1, i);</span></span><br><span class="line"><span class="comment">//         ans.pop_back();</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// way1</span></span><br><span class="line">    func(<span class="number">20</span>, <span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// way2</span></span><br><span class="line">    <span class="comment">// func(20, 4, 1);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sum为m-拆成n个数-有哪些情况连续"><a class="markdownIt-Anchor" href="#sum为m-拆成n个数-有哪些情况连续"></a> Sum为m, 拆成n个数, 有哪些情况?(连续)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subarraySum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// hash</span></span><br><span class="line">        <span class="comment">// 记录合适的连续字符串数量</span></span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 记录前面数字相加之和</span></span><br><span class="line">        <span class="keyword">int</span> pre=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// map记录前几个数字之和为K出现相同和的次数为V</span></span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        map.put(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            pre+= nums[i];</span><br><span class="line">            <span class="comment">// 如果前面数字之和加上这个数字正好等于K（存在一个数字加上nums[i]结果为K</span></span><br><span class="line">            <span class="comment">// 说明找到了</span></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(pre-k))&#123;</span><br><span class="line">                <span class="comment">// 累计</span></span><br><span class="line">                count+=map.get(pre-k);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 计算新的和放入map</span></span><br><span class="line">            map.put(pre,map.getOrDefault(pre,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于临近春招末期，时间比较紧，就不记录思考过程了，直接贴AC代码。以后有空补上&lt;/p&gt;
&lt;p&gt;代码大多用C++，仅是过而已，没有进行优化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;面试题03-数组中重复的数字&quot;&gt;&lt;a class=&quot;ma
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VsCode环境、配置Latex(texLive)</title>
    <link href="https://nymrli.top/2020/03/23/VsCode%E9%85%8D%E7%BD%AELatex(texLive)%E7%8E%AF%E5%A2%83/"/>
    <id>https://nymrli.top/2020/03/23/VsCode配置Latex(texLive)环境/</id>
    <published>2020-03-23T07:04:53.000Z</published>
    <updated>2020-09-17T02:00:15.623Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写在前面: 除了配置VsCode以外， 我还配置了Sublime，一开始是不想用<a href="https://www.sumatrapdfreader.org/download-free-pdf-viewer.html" target="_blank" rel="noopener">SumatraPDF</a>，以为能省的。事实上，Vscode也确实提供了三种方法：在web browser、编辑器tab、外部PDF阅读器，共三种办法。个人感觉tab界面太小、浏览器查看毕竟还是没有PDF舒服，最后都体验下来还是选择了外部阅读器，而且SumatraPDF支持正向、反向搜索，挺香的。当然，还有种做法是把PDF编译出来以后，再用日常使用的阅读器打开PDF阅读也是可以的，我个人平时用福昕PDF阅读器会多一点</p><p>SumatraPDF阅读器是个非常轻量级的PDF阅读器，开源轻巧，免安装，共14.6MB。要想配套使用PDF阅读器，网上教程基本上推荐的都是SumatraPDF，应该是SumatraPDF在适配Latex上做的比较好。我试了试指定福昕失败了。</p></blockquote><h1 id="安装texlive"><a class="markdownIt-Anchor" href="#安装texlive"></a> 安装Texlive</h1><p>上Texlive的官网， 有<em>在线安装</em>和<em>DVD安装</em>两种方式，我们选择后者。在http://mirrors.sjtug.sjtu.edu.cn/ctan/systems/texlive/Images/中下载<code>texlive2019.iso</code>的镜像，之后解压，选择<code>install-tl-advanced.bat</code>配置高级版(最好右键<strong>管理员身份运行</strong>)。</p><p>可以点击“Advanced”进入高级安装来修改安装位置、取消你不需要安装的宏包。其中<em>TeXworks 前端</em>就是它自带的编辑器，不需要的可以取消。语言我基本就只选了<code>Chinese, Chinese/Janpanse/Korean, English</code></p><p><img src="https://pic4.zhimg.com/80/v2-e4af1253d81437690bea363d923bddeb_hd.jpg" alt=""></p><p>点击“Customize”来取消勾选不需要的宏包。</p><p><img src="https://pic4.zhimg.com/80/v2-f3e77646f2b270dd94ea6463a8c7d2ab_hd.jpg" alt=""></p><p>很多宏包和功能我个人并不需要，因此我在这里取消勾选，大家可以根据需要勾选自己需要的功能，如果嫌麻烦全部安装也可以，并不消耗多少空间。</p><p>设置完安装路径等选项之后点击“安装”，之后静坐 20 分钟等待安装完成。</p><h1 id="安装vscode"><a class="markdownIt-Anchor" href="#安装vscode"></a> 安装VsCode</h1><p>略, 基本安装就行了。用了很久的Sublime， 突然间想换个新的了， 而且VsCode确实也非常好看。</p><h1 id="安装vscode中latex插件-latex-workshop"><a class="markdownIt-Anchor" href="#安装vscode中latex插件-latex-workshop"></a> 安装VsCode中Latex插件—— LaTeX Workshop</h1><p><img src="https://pic2.zhimg.com/80/v2-9f0a10a9f3fc21f1c67d0a33c9cdfb09_hd.jpg" alt=""></p><p>此时导入Latex工程，查看tex文件就可以看到关键字高亮了。</p><h2 id="配置latex-workshop-插件"><a class="markdownIt-Anchor" href="#配置latex-workshop-插件"></a> 配置LaTeX Workshop 插件</h2><p>菜单栏&quot;File-&gt;Preference-&gt;Settings&quot;然后选择右上角三个按钮中最左边的(Open settings(JSON)), 然后将括号里的内容填充到大括号里就行了，下面已经是我JSON配置的安装文件，可复制直接替换。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "latex-workshop.showContextMenu":true, //右键菜单</span><br><span class="line">    "latex-workshop.latex.tools": [</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"latexmk"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"latexmk"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">        <span class="string">"-synctex=1"</span>,</span><br><span class="line">        <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">        <span class="string">"-file-line-error"</span>,</span><br><span class="line">        <span class="string">"-pdf"</span>,</span><br><span class="line">        <span class="string">"%DOC%"</span></span><br><span class="line">        ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">        <span class="string">"-synctex=1"</span>,</span><br><span class="line">        <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">        <span class="string">"-file-line-error"</span>,</span><br><span class="line">        <span class="string">"%DOC%"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,          </span><br><span class="line">        &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">        <span class="string">"-synctex=1"</span>,</span><br><span class="line">        <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">        <span class="string">"-file-line-error"</span>,</span><br><span class="line">        <span class="string">"%DOC%"</span></span><br><span class="line">        ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"bibtex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"bibtex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">        <span class="string">"%DOCFILE%"</span></span><br><span class="line">        ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">"latex-workshop.latex.recipes": [</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">        <span class="string">"xelatex"</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"latexmk"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">        <span class="string">"latexmk"</span></span><br><span class="line">                    ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"pdflatex -&gt; bibtex -&gt; pdflatex*2"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">        <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="string">"bibtex"</span>,</span><br><span class="line">        <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="string">"pdflatex"</span></span><br><span class="line">                    ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">"latex-workshop.view.pdf.viewer": "browser",  </span><br><span class="line">//"latex-workshop.view.pdf.viewer": "external",</span><br><span class="line">//"latex-workshop.view.pdf.ref.viewer":"external",</span><br><span class="line"></span><br><span class="line">//"latex-workshop.view.pdf.external.viewer.command": "E:\\a常用工具\\SumatraPDF-3.2-64\\SumatraPDF-3.2-64.exe", // 注意修改路径</span><br><span class="line">//"latex-workshop.view.pdf.external.synctex": &#123;</span><br><span class="line">//    "command": "E:\\a常用工具\\SumatraPDF-3.2-64\\SumatraPDF-3.2-64.exe",</span><br><span class="line">//    "args": [</span><br><span class="line">//        "-forward-search",</span><br><span class="line"> //       "%TEX%",</span><br><span class="line">//        "%LINE%",</span><br><span class="line">//        "%PDF%"</span><br><span class="line">//    ]</span><br><span class="line">//&#125;,</span><br><span class="line">"latex-workshop.latex.clean.fileTypes": [</span><br><span class="line">    "*.aux",</span><br><span class="line">    "*.bbl",</span><br><span class="line">    "*.blg",</span><br><span class="line">    "*.idx",</span><br><span class="line">    "*.ind",</span><br><span class="line">    "*.lof",</span><br><span class="line">    "*.lot",</span><br><span class="line">    "*.out",</span><br><span class="line">    "*.toc",</span><br><span class="line">    "*.acn",</span><br><span class="line">    "*.acr",</span><br><span class="line">    "*.alg",</span><br><span class="line">    "*.glg",</span><br><span class="line">    "*.glo",</span><br><span class="line">    "*.gls",</span><br><span class="line">    "*.ist",</span><br><span class="line">    "*.fls",</span><br><span class="line">    "*.log",</span><br><span class="line">    <span class="string">"*.fdb_latexmk"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲保存后，一定要重启VsCode，不然无法生效。我当时就是直接去编译了，报了<code>Recipe terminated with fatal error: spawn pdflatex ENOENT.</code>的错误提示。</p><p>其中需要指出的是：<code>&quot;latex-workshop.view.pdf.viewer&quot;: &quot;browser&quot;,</code>设置的是默认阅览PDF的方式，一共有3种：web browser、编辑器tab、外部PDF阅读器。我注释掉的是设置SumatraPDF的方式。这个设置好后，再在Vscode中选择<code>View Latex PDF</code>时就会根据这个配置打开默认阅读PDF的方式，当然也可以点开<code>View Latex PDF</code>的下拉选项，进行指定方式的查阅。</p><h4 id="正向搜索"><a class="markdownIt-Anchor" href="#正向搜索"></a> 正向搜索</h4><blockquote><p>查看code中选中的内容在PDF中什么位置。</p></blockquote><p>选择外部阅读器后，可以通过加入下列实现正向搜索功能。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">"latex-workshop.view.pdf.external.synctex": &#123;</span><br><span class="line">    "command": "E:/Programs/SumatraPDF/SumatraPDF.exe",// 修改SumatraPDF路径</span><br><span class="line">    "args": [</span><br><span class="line">        "-forward-search",</span><br><span class="line">        "%TEX%",</span><br><span class="line">        "%LINE%",</span><br><span class="line">        <span class="string">"%PDF%"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>正向搜索的使用</strong>：将光标移动到TeX文件的正文。<code>ctrl+alt+x</code>，找到&quot;navigator,select and edit&quot;，点击第一项<code>syncTeX from cursor</code>(或右键选择，或<strong>快捷键</strong><code>ctrl+alt+j</code>)，会切换到PDF文件的相应位置。——设置“Latex右键菜单”后也可以右键选择<code>syncTeX from cursor</code></p><h4 id="反向搜索"><a class="markdownIt-Anchor" href="#反向搜索"></a> 反向搜索</h4><blockquote><p>查看PDF中选中的内容在code中什么位置。</p></blockquote><p>选择&quot;设置-&gt;选项&quot;</p><p><img src="/2020/03/23/VsCode配置Latex(texLive)环境/E:%5Chexo%5Csource_posts%5CVsCode%E9%85%8D%E7%BD%AELatex(texLive)%E7%8E%AF%E5%A2%83%5C1.jpg" alt="1"></p><p><img src="https://pic1.zhimg.com/80/v2-2df9b5aacaeb4a26e216a951f98b893c_hd.jpg" alt=""></p><p>将下列内容填入箭头所指位置，路径修改下即可（为一行内容）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Users\Marvey\AppData\Local\Programs\Microsoft VS Code\Code.exe&quot; &quot;C:\Users\Marvey\AppData\Local\Programs\Microsoft VS Code\resources\app\out\cli.js&quot; -g &quot;%f&quot;:&quot;%l&quot;</span><br></pre></td></tr></table></figure><p>感谢 <a href="https://www.zhihu.com/people/f5b398ec143be394e91c762ed6cda2f9" target="_blank" rel="noopener">@Macrofuns</a>指出，如果不加双引号，在文件路径有空格的情况下会导致无法反向搜索）</p><h4 id="其他设置"><a class="markdownIt-Anchor" href="#其他设置"></a> 其他设置</h4><ul><li>LaTeX Workshop 默认保存的时候自动编译，如果不喜欢这个设置，可以添加以下代码进入设置区：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"latex-workshop.showContextMenu":true, //右键菜单 </span><br><span class="line">"latex-workshop.intellisense.package.enabled": true, //根据加载的包，自动完成命令或包 </span><br><span class="line">"latex-workshop.latex.autoBuild.run": "never", //禁止保存文件时自动build</span><br></pre></td></tr></table></figure><p>借鉴From： <a href="https://www.liangzl.com/get-article-detail-136508.html" target="_blank" rel="noopener">使用VSCode编写LaTeX(latex+vscode+SumatraPDF)</a></p><p>最后推荐两个配置视频：</p><ul><li><a href="https://www.bilibili.com/video/BV1Et411f7GV?t=581" target="_blank" rel="noopener">使用 Sublime Text +TexLive 搭建 LaTeX 编写环境</a>——用sublime看这个视频基本就够了</li><li><a href="https://www.bilibili.com/video/BV1JE411K7ij" target="_blank" rel="noopener">为VSCode配置LaTex编译环境(TeXLive)</a></li></ul><hr><h1 id="vscode其他配置"><a class="markdownIt-Anchor" href="#vscode其他配置"></a> VsCode其他配置</h1><blockquote><p>不准备单独再开一篇文章介绍我怎么配置的了， 就在此篇文章里略微提及下把。</p></blockquote><h2 id="插件"><a class="markdownIt-Anchor" href="#插件"></a> 插件</h2><ul><li>Code run</li></ul><blockquote><p>能够让你的IDE基本上运行大多数代码，只好安装编程语言时Path设置正确，默认配置就可以直接运行。</p><p>默认编译运行的快捷键是<code>ctrl + Alt + N</code>，由于之前用的都是Sublime， 里面编译是<code>Ctrl+B</code>， 因此用习惯后有点不想改就直接修改掉了。方法为：<code>Ctrl + Shift + P</code>打开输入框，输入<code>Keyboard Shortcuts</code>, 就会弹出目前所有的快捷键，然后再将原来的<code>Ctrl +B</code>的快捷键取消(直接输入<code>Ctrl +B</code>就能找到目前谁的快捷键是<code>Ctrl +B</code>)，然后再输入<code>Code run</code>，将其快捷键设置为<code>Ctrl +B</code>即可。</p></blockquote><p>在运行Python代码的过程中，一直报错: <code>The environment variable 'Path' seems to have some paths containing the '&quot;' character. The existence of such a character is known to have caused the Python extension to not load. If the extension fails to load please modify your paths to remove this '&quot;' character.</code>后来在找到<a href="https://blog.csdn.net/liao1049164366/article/details/102988435" target="_blank" rel="noopener">解决方案</a>😗* 是因为你在添加其他环境变量时，加了; 分号—&gt;删掉就好了**</p><ul><li>open in browser</li></ul><blockquote><p>编写html页面调试时比较方便</p></blockquote><ul><li>koroFileHeader</li></ul><blockquote><p>自动生成头部注释和函数注释的，测试了一下，除了html以外基本上都能用，挺好使的。</p></blockquote><p>如果不满意默认配置， 可以自己再稍微调一调，展示下我的设置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @description: Latex相关配置</span><br><span class="line">     */    </span><br><span class="line">    "latex-workshop.showContextMenu":true, //右键菜单</span><br><span class="line">    // ...Latex的太多了, 就不一一展示了.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @description: koroFileHeader相关配置</span><br><span class="line">     * ctrl+alt+i,添加文件头注释, ctrl+alt+t,添加函数注释</span><br><span class="line">     * "Do not edit"的内容会自动添加</span><br><span class="line">     */</span><br><span class="line">    "fileheader.customMade": &#123;         //文件头部注释</span><br><span class="line">        "Author": "Mrli",</span><br><span class="line">        "Date": "Do not edit",              // 文件创建事件</span><br><span class="line">        "LastEditTime": "Do not edit",      // 文件最后编辑时间</span><br><span class="line">        "Description": "",</span><br><span class="line">    &#125;,</span><br><span class="line">    "fileheader.cursorMode": &#123;          // 函数注释 </span><br><span class="line">        "Author": "Mrli",</span><br><span class="line">        "Date": "Do not edit",              // 当前时间, 函数的开始编写、完成编写时间</span><br><span class="line">        "Description": "",</span><br><span class="line">        "param": "",</span><br><span class="line">        "return": "",</span><br><span class="line">    &#125;,</span><br><span class="line">    "editor.fontFamily": "Monaco, 'Courier New', monospace"</span><br><span class="line">&#125;// 好用插件推荐 https://blog.csdn.net/qq_41139830/article/details/85221330</span><br></pre></td></tr></table></figure><p>用户对插件的自定义配置基本上都是写在这个settings.json下。当然，可以对某个项目单独设置配置，即会在项目文件夹下生成<code>.vscode</code>文件夹，里面会有个<code>settings.json</code>来进行配置.</p><ul><li>Bracket Pair Colorizer</li></ul><blockquote><p>编写JS代码时我是感觉真的好用，JS里大括号和括号有时真的很难记得匹配次序。</p></blockquote><ul><li>Anaconda Extension Pack</li></ul><blockquote><p>就图他的关键字提醒补全。</p></blockquote><p>插件比较大， 安装了挺久的，好像还自带一个Python Extension插件。</p><ul><li>Autopep8</li></ul><p>测试自动规范代码(<code>Alt + Shift + F</code>)时，提示要安装Autopep8，那就安装咯。但这个应该只能算Python的插件，<code>python.exe -m pip install -U autopep8 --user</code></p><ul><li><h3 id="path-autocomplete"><a class="markdownIt-Anchor" href="#path-autocomplete"></a> Path Autocomplete</h3></li></ul><blockquote><p>有时候程序需要读取文件，自己手动去复制文件路径还是比较麻烦的，不过有了这个插件就方便多了，它能自动感知当前目录下所有的文件，只需要你自己选择就好了。</p></blockquote><ul><li>windows opacity</li></ul><blockquote><p>设置窗口透明度的，一开始以为挺好用， 用了后发现自己还想不太喜欢， 真的是太透明了，可以设置0-255， 240我用着差不多。（0的话会消失的）</p></blockquote><p>还有些可以网上再找找，推个挺不错的博客：</p><ul><li><a href="https://blog.csdn.net/hnshhshjq/article/details/80140401" target="_blank" rel="noopener">https://blog.csdn.net/hnshhshjq/article/details/80140401</a></li><li>★  <a href="https://mp.weixin.qq.com/s?__biz=MzAxOTcxNTIwNQ==&amp;mid=2457918435&amp;idx=2&amp;sn=78a94468973f701e674246f1d520434b&amp;chksm=8cb6be09bbc1371fc6582cc7eda6791278165c6527e385f49ee56ceea94e9ca2e3f45efce368&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzAxOTcxNTIwNQ==&amp;mid=2457918435&amp;idx=2&amp;sn=78a94468973f701e674246f1d520434b&amp;chksm=8cb6be09bbc1371fc6582cc7eda6791278165c6527e385f49ee56ceea94e9ca2e3f45efce368&amp;scene=21#wechat_redirect</a></li></ul><h2 id="用户自定义快捷代码段"><a class="markdownIt-Anchor" href="#用户自定义快捷代码段"></a> 用户自定义快捷代码段：</h2><p>File -&gt; Preferences -&gt; User snippets， 附一段我的C++设置 -&gt; cpp.sjon</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and </span><br><span class="line">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span><br><span class="line">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span><br><span class="line">// same ids are connected.</span><br><span class="line">// Example:</span><br><span class="line">// "Print to console": &#123;</span><br><span class="line">// "prefix": "log",</span><br><span class="line">// "body": [</span><br><span class="line">// "console.log('$1');",</span><br><span class="line">// "$2"</span><br><span class="line">// ],</span><br><span class="line">// "description": "Log output to console"</span><br><span class="line">// &#125;</span><br><span class="line">"Print out fori": &#123;</span><br><span class="line">        "prefix": "fori",</span><br><span class="line">        "body": [</span><br><span class="line">            "for (int i = 0; i &lt; $1; i++) &#123;",</span><br><span class="line">            "   $0",</span><br><span class="line">            <span class="string">"&#125;"</span></span><br><span class="line">        ],</span><br><span class="line">        "description": "Output Loop 'fori'"</span><br><span class="line">&#125;,</span><br><span class="line">"Print out forj": &#123;</span><br><span class="line">        "prefix": "forj",</span><br><span class="line">        "body": [</span><br><span class="line">            "for (int j = 0; j &lt; $1; j++) &#123;",</span><br><span class="line">            "   $0",</span><br><span class="line">            <span class="string">"&#125;"</span></span><br><span class="line">        ],</span><br><span class="line">        "description": "Output Loop 'forj'"</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">"Common template": &#123;</span><br><span class="line">"prefix": "qqq",</span><br><span class="line">"body": [</span><br><span class="line">"#include &lt;bits/stdc++.h&gt;",</span><br><span class="line">"using namespace std;",</span><br><span class="line">"const int INF = 0x3f3f3f3f;",</span><br><span class="line">"int n;",</span><br><span class="line">"",</span><br><span class="line">"",</span><br><span class="line">"int main()&#123;",</span><br><span class="line">"    ios::sync_with_stdio(false);",</span><br><span class="line">"    cin.tie(0);",</span><br><span class="line">"    ",</span><br><span class="line">"    $0",</span><br><span class="line">"    ",</span><br><span class="line">"    return 0;",</span><br><span class="line"><span class="string">"&#125;"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>快捷键: <a href="https://www.cnblogs.com/schut/p/10461840.html" target="_blank" rel="noopener">https://www.cnblogs.com/schut/p/10461840.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;写在前面: 除了配置VsCode以外， 我还配置了Sublime，一开始是不想用&lt;a href=&quot;https://www.sumatrapdfreader.org/download-free-pdf-viewer.html&quot; target=&quot;_bl
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记Codeup题解</title>
    <link href="https://nymrli.top/2020/03/04/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0Codeup%E9%A2%98%E8%A7%A3/"/>
    <id>https://nymrli.top/2020/03/04/算法笔记Codeup题解/</id>
    <published>2020-03-04T06:21:49.000Z</published>
    <updated>2020-03-04T14:22:59.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="100000612-算法笔记93小节数据结构专题2-树的遍历"><a class="markdownIt-Anchor" href="#100000612-算法笔记93小节数据结构专题2-树的遍历"></a> <a href="http://codeup.cn/contest.php?cid=100000612" target="_blank" rel="noopener">100000612 - 《算法笔记》9.3小节——数据结构专题(2)-&gt;树的遍历</a></h2><h3 id="问题-a-树查找"><a class="markdownIt-Anchor" href="#问题-a-树查找"></a> 问题 A: 树查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> arr[MAXN];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">fast_pow</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> base)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = d;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>( n &amp; <span class="number">1</span>) res = res*base;</span><br><span class="line">        base = base * base;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, d;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">           <span class="built_in">cin</span> &gt;&gt; arr[i]; </span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;d;</span><br><span class="line">        <span class="keyword">if</span> ( n &lt; fast_pow(d, <span class="number">2</span>) )&#123;      <span class="comment">// d层没有节点</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"EMPTY"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> beginn = fast_pow(d<span class="number">-1</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">int</span> endn = fast_pow(d, <span class="number">2</span>);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; beginn;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = beginn+ <span class="number">1</span>; i &lt; n &amp;&amp; i&lt; endn; ++i)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt; <span class="string">" "</span> &lt;&lt; i ;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题-b-树的高度"><a class="markdownIt-Anchor" href="#问题-b-树的高度"></a> 问题 B: 树的高度</h3><blockquote><p>题目要求我们练习树的静态写法。但其实这道题直接计算每个节点的高度就行了。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> height;  </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; child;</span><br><span class="line">&#125;Nodearr[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Nodearr[i].height &gt; m)</span><br><span class="line">            m = Nodearr[i].height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    Nodearr[<span class="number">1</span>].height = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b)!=EOF)&#123;</span><br><span class="line">        <span class="comment">// Nodearr[a].child.push_back(b);</span></span><br><span class="line">        Nodearr[b].height = Nodearr[a].height +<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; getHeight() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正规写法：先构建树， 然后再层次遍历计算高度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> m=<span class="number">10010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> layer;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; child;</span><br><span class="line">&#125;tree[m];</span><br><span class="line"><span class="keyword">int</span> MaxHigh;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 树的静态写法的层次遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span></span>&#123;</span><br><span class="line">MaxHigh=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">tree[root].layer =<span class="number">1</span>;</span><br><span class="line">q.push(root);</span><br><span class="line"><span class="keyword">if</span>(tree[root].layer&gt;MaxHigh) MaxHigh=tree[root].layer;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> front=q.front() ;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tree[front].child.size();i++)&#123;</span><br><span class="line"><span class="keyword">int</span> child=tree[front].child[i];</span><br><span class="line">tree[child].layer =tree[front].layer +<span class="number">1</span>;</span><br><span class="line">q.push(child);</span><br><span class="line"><span class="keyword">if</span>(tree[child].layer&gt;MaxHigh) MaxHigh=tree[child].layer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,a,b;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b)!=EOF)&#123;</span><br><span class="line">tree[a].child.push_back(b);</span><br><span class="line">&#125;</span><br><span class="line">BFS(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,MaxHigh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="100000613-算法笔记94小节数据结构专题2-二叉查找树bst"><a class="markdownIt-Anchor" href="#100000613-算法笔记94小节数据结构专题2-二叉查找树bst"></a> 100000613 - 《算法笔记》9.4小节——数据结构专题(2)-&gt;二叉查找树（BST）</h2><h3 id="问题-a-二叉排序树"><a class="markdownIt-Anchor" href="#问题-a-二叉排序树"></a> 问题 A: 二叉排序树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> data[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    Node *lc, *rc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    Node *now = <span class="keyword">new</span> Node;</span><br><span class="line">    now-&gt;v = x;</span><br><span class="line">    now-&gt;lc = now-&gt;rc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node* &amp;root, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)&#123;   </span><br><span class="line">        root = newNode(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;v == x) <span class="keyword">return</span>; <span class="comment">// 已存在</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; root-&gt;v ) insert(root-&gt;lc, x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; root-&gt;v ) insert(root-&gt;rc, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">createTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Node *root = <span class="literal">NULL</span>;  <span class="comment">// ▲注意此处是NULL， 而不是new Node</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        insert(root, data[i]);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node *root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span> ) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; root-&gt;v &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    preOrder(root-&gt;lc);</span><br><span class="line">    preOrder(root-&gt;rc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(Node *root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span> ) <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root-&gt;lc);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; root-&gt;v &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    inOrder(root-&gt;rc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node *root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span> ) <span class="keyword">return</span>;</span><br><span class="line">    postOrder(root-&gt;lc);</span><br><span class="line">    postOrder(root-&gt;rc);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; root-&gt;v &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; data[i];</span><br><span class="line">        Node* root = createTree();</span><br><span class="line">        preOrder(root);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        inOrder(root);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        postOrder(root);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题-b-二叉搜索树"><a class="markdownIt-Anchor" href="#问题-b-二叉搜索树"></a> 问题 B: 二叉搜索树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> data[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> v;</span><br><span class="line">    Node *lc, *rc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">newNode</span><span class="params">(<span class="keyword">char</span> x)</span></span>&#123;</span><br><span class="line">    Node *now = <span class="keyword">new</span> Node;</span><br><span class="line">    now-&gt;v = x;</span><br><span class="line">    now-&gt;lc = now-&gt;rc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node* &amp;root, <span class="keyword">char</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        root = newNode(x);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == root-&gt;v ) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; root-&gt;v ) insert(root-&gt;lc, x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; root-&gt;v ) insert(root-&gt;rc, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">createTree</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    Node *root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class="line">        insert(root, s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node *root, <span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span> ) <span class="keyword">return</span>;</span><br><span class="line">    s += root-&gt;v;</span><br><span class="line">    preOrder(root-&gt;lc, s);</span><br><span class="line">    preOrder(root-&gt;rc, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(Node *root, <span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span> ) <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root-&gt;lc, s);</span><br><span class="line">    s += root-&gt;v;</span><br><span class="line">    inOrder(root-&gt;rc, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node *root, <span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span> ) <span class="keyword">return</span>;</span><br><span class="line">    postOrder(root-&gt;lc, s);</span><br><span class="line">    postOrder(root-&gt;rc, s);</span><br><span class="line">    s += root-&gt;v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n)&#123;</span><br><span class="line">        <span class="built_in">string</span> target;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; target;</span><br><span class="line">        <span class="built_in">string</span> preans, postans;</span><br><span class="line">        Node *ans = createTree(target);</span><br><span class="line">        preOrder(ans, preans);</span><br><span class="line">        postOrder(ans, postans);</span><br><span class="line">        <span class="comment">// inOrder(root, in);     // 由于中序遍历的结果就是排序的结果, 因此都一样</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            <span class="built_in">string</span> in, pre, post;</span><br><span class="line">            Node *root = createTree(s);</span><br><span class="line">            preOrder(root, pre);</span><br><span class="line">            <span class="keyword">if</span> (pre == preans)&#123;</span><br><span class="line">                postOrder(root, post);</span><br><span class="line">                <span class="keyword">if</span> (post == postans) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">else</span>  <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>  <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">         &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;100000612-算法笔记93小节数据结构专题2-树的遍历&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#100000612-算法笔记93小节数据结构专题2-树的遍历&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://codeup.cn/c
      
    
    </summary>
    
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="Algorithm" scheme="https://nymrli.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>PAT冲冲冲——乙级</title>
    <link href="https://nymrli.top/2020/02/02/PAT%E5%86%B2%E5%86%B2%E5%86%B2%E2%80%94%E2%80%94%E4%B9%99%E7%BA%A7/"/>
    <id>https://nymrli.top/2020/02/02/PAT冲冲冲——乙级/</id>
    <published>2020-02-02T08:26:41.000Z</published>
    <updated>2020-09-05T04:45:09.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pat冲冲冲乙级"><a class="markdownIt-Anchor" href="#pat冲冲冲乙级"></a> PAT冲冲冲——乙级</h1><blockquote><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/type/7?page=1" target="_blank" rel="noopener">PAT甲级练习题 ——PAT (Advanced Level) Practice </a><br><a href="https://www.nowcoder.com/pat/5/problems?page=1" target="_blank" rel="noopener">PAT甲级(Advanced Level)真题</a><br><a href="https://www.liuchuo.net/archives/8091" target="_blank" rel="noopener">柳婼 の blog经验</a><br><a href="https://saquarius.com/2019/08/pat%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">saquarius’s blog</a></p><p><a href="https://blog.csdn.net/a617976080/article/details/89676670" target="_blank" rel="noopener">PAT甲级题目及分类总结</a><br><a href="https://blog.csdn.net/richenyunqi/article/details/79958195" target="_blank" rel="noopener">pat甲级题解目录</a></p></blockquote><p>▲报名费256，可以刷<a href="https://www.nowcoder.com/pat" target="_blank" rel="noopener">牛客网</a>的题来获得-50的优惠券，该练习场下的所有题目只要通过都算</p><h2 id="乙级练习题"><a class="markdownIt-Anchor" href="#乙级练习题"></a> 乙级练习题</h2><h3 id="nowcoder数列"><a class="markdownIt-Anchor" href="#nowcoder数列"></a> <a href="https://www.nowcoder.com/pat/2/problem/250" target="_blank" rel="noopener">NowCoder数列</a></h3><blockquote><p>没想到第二题就是考了个数据范围，由于0≤n≤1000000，所以F(n)必然比long long大，而判断3的倍数可表示为===&gt; F(n) % 3 —&gt; (F(n-1)%3 + F(n-2)%3) % 3</p><p>求余运算性质：a = b+c --&gt;  a%d = (b%d+c%d) % d</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[<span class="number">1000000</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">7</span>;</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">11</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">        f[i]=(f[i<span class="number">-1</span>]%<span class="number">3</span>+f[i<span class="number">-2</span>]%<span class="number">3</span>)%<span class="number">3</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[n]!=<span class="number">0</span>)</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="养兔子"><a class="markdownIt-Anchor" href="#养兔子"></a> <a href="https://www.nowcoder.com/pat/2/problem/251" target="_blank" rel="noopener">养兔子</a></h3><blockquote><p>非常经典的斐波那契数列题</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 90+5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] + arr[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[n] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客似云来"><a class="markdownIt-Anchor" href="#客似云来"></a> <a href="https://www.nowcoder.com/pat/2/problem/252" target="_blank" rel="noopener">客似云来</a></h3><blockquote><p>斐波那契数列的拓展题，将其中某个区间的值累加输出（需要特判是否为某个点）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 80+5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> from, to;</span><br><span class="line"></span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] + arr[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; from &gt;&gt; to)&#123;</span><br><span class="line">        ll tmp = <span class="number">0</span> ;</span><br><span class="line">        <span class="comment">// 注意需要特判是否相等</span></span><br><span class="line">        <span class="keyword">if</span> (from == to) tmp = arr[from];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=from; i&lt;= to;i++)&#123;</span><br><span class="line">                tmp += arr[i] ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; tmp &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="斐波那契凤尾"><a class="markdownIt-Anchor" href="#斐波那契凤尾"></a> <a href="https://www.nowcoder.com/pat/2/problem/253" target="_blank" rel="noopener">斐波那契凤尾</a></h3><blockquote><p>一遍还挺难过的，有不少的坑点</p><p>1.虽然也是斐波那契数列，但是一定要注意前两项的取值<br>2.输出末尾的6位，那么就是%1e6，但是如果有前置0，需要补零，我是使用iomanip中的setw和setfill实现的<br>3.怎么判断超过6位：找出超过6位的n应该算比较简单的方法了吧</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000 + 5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        用来找到超过1e6的n</span></span><br><span class="line"><span class="comment">        arr[i] = (arr[i-1] + arr[i-2]);</span></span><br><span class="line"><span class="comment">        if (arr[i] &gt; 1000000)&#123;</span></span><br><span class="line"><span class="comment">             cout &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">             break;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        arr[i] = (arr[i<span class="number">-1</span>]%<span class="number">1000000</span> + arr[i<span class="number">-2</span>]%<span class="number">1000000</span>)%<span class="number">1000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">if</span> (n&gt;= <span class="number">30</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">6</span>)&lt;&lt;setfill(<span class="string">'0'</span>) &lt;&lt; arr[n] &lt;&lt;<span class="built_in">endl</span>;    </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; arr[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Po个C的代码，使用printf的格式化输出的特性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    a[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">100000</span>;i++)</span><br><span class="line">      a[i]=(a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>])%<span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;=<span class="number">30</span>)</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%06d\n"</span>,a[n]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="星际密码"><a class="markdownIt-Anchor" href="#星际密码"></a> <a href="https://www.nowcoder.com/pat/2/problem/254" target="_blank" rel="noopener"> 星际密码</a></h3><blockquote><p>说实话，一开始没看懂题，因为输入的n跟题目里提到的n不是同一个东西：矩阵X为[[1 1],[0 1]]，题目中的n是指多少次幂；而输入里的n是指有多少个密码，真正的n其实是第二行的输入Xi</p><p>那么分析下思路，Xi=1时<mark>1，Xi=2时</mark>2，Xi=3时==3</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000 + 5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initFib</span><span class="params">()</span></span>&#123;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = (arr[i<span class="number">-1</span>]%<span class="number">10000</span> + arr[i<span class="number">-2</span>]%<span class="number">10000</span>)%<span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> input[<span class="number">100</span>+<span class="number">5</span>];</span><br><span class="line">    initFib();</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>)&lt;&lt;setfill(<span class="string">'0'</span>) &lt;&lt; arr[tmp] ;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/02/PAT冲冲冲——乙级/Fib.jpg" alt="Fib"></p><h3 id="母牛的故事"><a class="markdownIt-Anchor" href="#母牛的故事"></a> <a href="https://www.nowcoder.com/pat/2/problem/255" target="_blank" rel="noopener"> 母牛的故事</a></h3><blockquote><p>变形的Fib，公式更新为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n) = f(n-1) + f(n-3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span></p><p>最主要的就是确定前几项，比较好的是样例都给出了2==&gt;2,4==&gt;4,5==&gt;6，这样就比较好确定<strong>每头小母牛从第四个年头开始，每年年初也生一头小母牛</strong>到底是什么意思了</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000 + 5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initFib</span><span class="params">()</span></span>&#123;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;arr[<span class="number">3</span>]=<span class="number">3</span>;arr[<span class="number">4</span>]=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">5</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] + arr[i<span class="number">-3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    initFib();</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="童年生活二三事"><a class="markdownIt-Anchor" href="#童年生活二三事"></a> <a href="https://www.nowcoder.com/pat/2/problem/256" target="_blank" rel="noopener">童年生活二三事</a></h3><blockquote><p>Fib数列的板子题，只不过需要理解一下</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 90 + 5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initFib</span><span class="params">()</span></span>&#123;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] + arr[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    initFib();</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[n]  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蜜蜂寻路"><a class="markdownIt-Anchor" href="#蜜蜂寻路"></a> <a href="https://www.nowcoder.com/pat/2/problem/257" target="_blank" rel="noopener">蜜蜂寻路</a></h3><blockquote><p>如果固定起点为1，计算到某个位置的走法数的话，跟走阶梯其实是一种思路，就是f(n) = f(n-1) + f(n-2)，即第n个位置的走法数=第n-1位置走法数 + 第n-2位置走法数</p></blockquote><table><thead><tr><th>1-&gt;2</th><th>1</th><th>2-&gt;3</th><th>1</th><th>3-&gt;4</th><th>1</th></tr></thead><tbody><tr><td>1-&gt;3</td><td>2</td><td>2-&gt;4</td><td>2</td><td>3-&gt;5</td><td>2</td></tr><tr><td>1-&gt;4</td><td>3</td><td>2-&gt;5</td><td>3</td><td>3-&gt;6</td><td>3</td></tr><tr><td>1-&gt;5</td><td>5</td><td>2-&gt;6</td><td>5</td><td>3-&gt;7</td><td>5</td></tr><tr><td>1-&gt;6</td><td>8</td><td>2-&gt;7</td><td>8</td><td>3-&gt;8</td><td>8</td></tr></tbody></table><p>可以发现其中的规律：走法数一直是Fib数列，而值为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><msub><mi>N</mi><mrow><mi>t</mi><mi>o</mi></mrow></msub><mo>−</mo><msub><mi>N</mi><mrow><mi>f</mi><mi>r</mi><mi>o</mi><mi>m</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fib(N_{to} - N_{from})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>▲但这题还有一个难点在于用例的范围(0 &lt; a &lt; b &lt; 2<sup>31)，即b-a~=2</sup>32-1，为int最大范围，会导致的问题有两个</p><ol><li><p>fib数列通常使用数组来存储，但是无法开个2^32大小的数组</p><p>==&gt;滚动数组、递推（不用数组）</p></li><li><p>输出的Fib(n)就远远超过long long了，因此要么模拟大数相加，那么另寻他法。</p><p>==&gt;△还需要注意到的一点是,<strong>输出数据结果范围是 [0, 2^63)</strong>，那么意思是题目要求的输出其实是在long long 范围内的，那么就可以考虑截取输出了</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">// ll credit = 9.2e18;开的足够大能过样例就行</span></span><br><span class="line">ll credit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 幂计算</span></span><br><span class="line"><span class="comment"> * @author mrli 2019-10-27</span></span><br><span class="line"><span class="comment"> * @param  n [less than 63]</span></span><br><span class="line"><span class="comment"> * @return   [long long type]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        ans *= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Fib</span><span class="params">(<span class="keyword">int</span> del)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (del == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(del == <span class="number">2</span>)  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ll f1 = <span class="number">1</span>; ll f2=<span class="number">2</span>;</span><br><span class="line">        ll ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=del;i++)&#123;</span><br><span class="line"><span class="comment">// ans = f1 + f2 ;也过了</span></span><br><span class="line">            ans = ( f1%(credit) + f2%(credit) )%credit;</span><br><span class="line">            f1 = f2;</span><br><span class="line">            f2 = ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    credit = <span class="built_in">pow</span>(<span class="number">63</span>)<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>( n-- )&#123;</span><br><span class="line">        <span class="keyword">int</span> from, to;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; from &gt;&gt; to;</span><br><span class="line">        ll ans;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; Fib(to-from) &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了别人的题解后,发现想多了。题目的意思是<strong>得分点的输出值都在long long 范围内，而不是需要你把输出值压缩在long long范围内</strong>，果然去掉 %运算也过了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//蜜蜂寻路</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(x, n) memset(x,n,sizeof(x));</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL maxn = <span class="number">2147483648</span>+<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line">LL dp[<span class="number">3</span>]; <span class="comment">//滚动数组</span></span><br><span class="line"><span class="keyword">int</span> n, a, b;</span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ms(dp, <span class="number">0</span>);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>, dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; b-a+<span class="number">1</span>; i++)</span><br><span class="line">        dp[i%<span class="number">3</span>] = dp[<span class="number">0</span>]+dp[<span class="number">1</span>]+dp[<span class="number">2</span>]-dp[i%<span class="number">3</span>]; <span class="comment">//即dp[i]=dp[i-1]+dp][i-2]</span></span><br><span class="line"> </span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        ans = max(dp[i], ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; solve() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//从1到4和从2到5答案是一样的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分数运算"><a class="markdownIt-Anchor" href="#分数运算"></a> <a href="https://www.nowcoder.com/pat/2/problem/261" target="_blank" rel="noopener"> 分数运算</a></h3><blockquote><p>牛客网周赛做到过一次，感觉当时写的比现在的简单。难点在<strong>使用GCD进行约分</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 辗转相除法,求最大公约数</span></span><br><span class="line"><span class="comment"> * @author mrli 2019-10-28</span></span><br><span class="line"><span class="comment"> * @param  a [description]</span></span><br><span class="line"><span class="comment"> * @param  b [description]</span></span><br><span class="line"><span class="comment"> * @return   [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1,a2,b1,b2;</span><br><span class="line">    <span class="keyword">char</span> op3;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">scanf</span>(<span class="string">"%d/%d %d/%d %c"</span>, &amp;a1, &amp;a2, &amp;b1, &amp;b2, &amp;op3) != EOF)&#123;</span><br><span class="line">        <span class="keyword">int</span> fenmu;</span><br><span class="line">        <span class="keyword">int</span> fenzi;</span><br><span class="line">        <span class="keyword">if</span> (op3 == <span class="string">'+'</span>)&#123;</span><br><span class="line">            fenmu = a2*b2;</span><br><span class="line">            fenzi = a1*b2+a2*b1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op3 == <span class="string">'-'</span>)&#123;</span><br><span class="line">            fenmu = a2*b2;</span><br><span class="line">            fenzi = a1*b2-a2*b1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op3 == <span class="string">'*'</span>)&#123;</span><br><span class="line">            fenmu = a2*b2;</span><br><span class="line">            fenzi = a1*b1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">//if (op3 == '*')&#123;</span></span><br><span class="line">            fenmu = a2*b1;</span><br><span class="line">            fenzi = a1*b2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找出最大公因子,约分</span></span><br><span class="line">        <span class="keyword">int</span> common = gcd(fenmu,fenzi);</span><br><span class="line">        <span class="keyword">int</span> res_zi = fenzi/common;</span><br><span class="line">        <span class="keyword">int</span> res_mu = fenmu/common;</span><br><span class="line">        <span class="keyword">if</span> ( res_mu * res_zi &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">abs</span>(fenzi/common) &lt;&lt; <span class="string">'/'</span> &lt;&lt; <span class="built_in">abs</span>(fenmu/common) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">'-'</span> &lt;&lt;<span class="built_in">abs</span>(fenzi/common) &lt;&lt; <span class="string">'/'</span> &lt;&lt; <span class="built_in">abs</span>(fenmu/common) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分解因数"><a class="markdownIt-Anchor" href="#分解因数"></a> <a href="https://www.nowcoder.com/pat/2/problem/262" target="_blank" rel="noopener"> 分解因数</a></h3><blockquote><p>使用小学的短除法，我们很清楚的知道，要想求出它的每一个质因数，我们需要用质数去试除。<code>90</code>能被<code>2</code>整除，那就拿商继续除以<code>2</code>，除不尽就换<code>3</code>，一直到除到质数为止。基础代码框架类似判断质数，只是被判断的数字在过程中不断被除，最终循环结束的时候，那个被处理过的数字，就是最后一个质因数。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> tmpn = n;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">" = "</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(n); ++i)&#123;</span><br><span class="line">            <span class="keyword">while</span> ( tmpn%i == <span class="number">0</span> &amp;&amp; tmpn != i)&#123;</span><br><span class="line">                tmpn /= i;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" * "</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; tmpn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的第一次做法：</p><blockquote><p>一直TLE，估计这种的话，必须得线性筛，我搜了几个题解的结果也证明除了上述题解，其他的都是线性筛，上面的就比较巧妙</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">( <span class="keyword">int</span> num )</span></span>&#123;</span><br><span class="line">     <span class="comment">//两个较小数另外处理</span></span><br><span class="line">     <span class="keyword">if</span> (num==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">if</span>(num ==<span class="number">2</span>|| num==<span class="number">3</span> )</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">     <span class="comment">//不在6的倍数两侧的一定不是质数</span></span><br><span class="line">     <span class="keyword">if</span>(num %<span class="number">6</span>!= <span class="number">1</span>&amp;&amp;num %<span class="number">6</span>!= <span class="number">5</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     <span class="comment">//在6的倍数两侧的也可能不是质数</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">5</span>;i &lt;= <span class="built_in">sqrt</span>( num); i+=<span class="number">6</span> )</span><br><span class="line">         <span class="keyword">if</span>(num %i== <span class="number">0</span>||num %(i+ <span class="number">2</span>)==<span class="number">0</span> )</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">     <span class="comment">//排除所有，剩余的是质数</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">" = "</span> ;</span><br><span class="line">        <span class="keyword">int</span> tmpn = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tmpn;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> ( isPrime(i) &amp;&amp; n%i == <span class="number">0</span>)&#123;</span><br><span class="line">                n /= i;</span><br><span class="line">                <span class="keyword">if</span> (first) &#123;</span><br><span class="line">                    first = <span class="literal">false</span>;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; i ; </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt;  <span class="string">" * "</span> &lt;&lt; i ; </span><br><span class="line">                <span class="keyword">if</span> (n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="因子个数"><a class="markdownIt-Anchor" href="#因子个数"></a> <a href="https://www.nowcoder.com/pat/2/problem/264" target="_blank" rel="noopener">因子个数</a></h3><blockquote><p>用到了上题的结论，<strong>一个正整数总可以分解成一个或多个素数的积</strong>，一开始理解错题目了，以为是所有因数的个数，其实是<strong>因数的种数</strong>，比如20-&gt;2是因为2，2，5；30-&gt;3是因为2，3，5。</p><p>因此这边还是需要素数判别，卡的点也在这，要用线性筛，其实就是上题的回答方式不同罢了</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (tmp%i==<span class="number">0</span>)&#123;</span><br><span class="line">                tmp/=i;</span><br><span class="line">                <span class="keyword">if</span> (first)&#123;</span><br><span class="line">                    first = !first;</span><br><span class="line">                    ans ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    while( cin &gt;&gt; n)&#123;</span><br><span class="line">        int ans=0;</span><br><span class="line">        int tmp = n;</span><br><span class="line"></span><br><span class="line">        for (int i = 2; i &lt;= sqrt(n); ++i)&#123;</span><br><span class="line">            // bool first = true;</span><br><span class="line">            if (tmp%i==0)&#123;</span><br><span class="line">                while (tmp%i==0)&#123;</span><br><span class="line">                   tmp/=i;</span><br><span class="line">                &#125;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (tmp!=1) ans++;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skew数"><a class="markdownIt-Anchor" href="#skew数"></a> <a href="https://www.nowcoder.com/pat/2/problem/266" target="_blank" rel="noopener"> skew数</a></h3><blockquote><p>模拟题、实现一个幂运算</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        ans *= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; s )&#123;</span><br><span class="line">        <span class="keyword">int</span> size = s.size();</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i)&#123;</span><br><span class="line">            <span class="comment">/* code */</span></span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'2'</span>)&#123;</span><br><span class="line">                ans += <span class="number">2</span>*(pow2(size-i)<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += (s[i]-<span class="string">'0'</span>)*(pow2(size-i)<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一的个数"><a class="markdownIt-Anchor" href="#一的个数"></a> <a href="https://www.nowcoder.com/pat/2/problem/267" target="_blank" rel="noopener"> 一的个数</a></h3><blockquote><p>非常基础的一道题：r进制表示</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, r;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            <span class="keyword">if</span> (n%r==<span class="number">1</span>) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            n /= r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外星人的语言"><a class="markdownIt-Anchor" href="#外星人的语言"></a> <a href="https://www.nowcoder.com/pat/2/problem/268" target="_blank" rel="noopener"> 外星人的语言</a></h3><blockquote><p>r进制的拓展，需要将各位输出出来，由于是逆序的，所以需要一1.个栈来反转一下、或是2.使用string的反转功能</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, r;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            <span class="comment">// 0-9</span></span><br><span class="line">            <span class="keyword">char</span> c = n%r+<span class="number">48</span>;</span><br><span class="line">            <span class="keyword">if</span> (n%r&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">                <span class="comment">// A-F</span></span><br><span class="line">                c = n%r<span class="number">-10</span>+<span class="number">65</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n /= r;</span><br><span class="line">            <span class="comment">// 不直接cout，而是存栈</span></span><br><span class="line">            s.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">            <span class="comment">// 取出栈里的内容</span></span><br><span class="line">            <span class="keyword">char</span> c = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数位和"><a class="markdownIt-Anchor" href="#数位和"></a> <a href="https://www.nowcoder.com/pat/2/problem/270" target="_blank" rel="noopener"> 数位和</a></h3><blockquote><p>代码为<a href="#%E4%B8%80%E7%9A%84%E4%B8%AA%E6%95%B0">一的个数</a>+<a href="#%E5%A4%96%E6%98%9F%E4%BA%BA%E7%9A%84%E8%AF%AD%E8%A8%80">外星人的语言</a>的结合版。</p><p>题目要求，将数n，先表示成r进制的形式，然后再计算r进制下n的位数和，然后再用r进制来表示位数和的结果</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// ACM比赛中cin,的使用比较耗时,因为默认的时候，cin与stdin总是保持同步的，使用这句可以使cin达到和scanf相差无几的输入效率。</span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n, r;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            ans += n%r;</span><br><span class="line">            n /= r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">stack</span> &lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line">        <span class="keyword">while</span>(ans)&#123;</span><br><span class="line">            <span class="comment">// 0-9</span></span><br><span class="line">            <span class="keyword">char</span> c = ans%r+<span class="number">48</span>;</span><br><span class="line">            <span class="keyword">if</span> (ans%r&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">                <span class="comment">// A-F</span></span><br><span class="line">                c = ans%r<span class="number">-10</span>+<span class="number">65</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans /= r;</span><br><span class="line">            <span class="comment">// 不直接cout，而是存栈</span></span><br><span class="line">            s.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">            <span class="comment">// 取出栈里的内容</span></span><br><span class="line">            <span class="keyword">char</span> c = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进制回文数"><a class="markdownIt-Anchor" href="#进制回文数"></a> <a href="https://www.nowcoder.com/pat/2/problem/272" target="_blank" rel="noopener">进制回文数</a></h3><blockquote><p>还是r进制的拓展，</p><p>1.r需要用个2-16的循环<br>2.判断字符串的镜像对称s[i] != s[ssize-i-1]<br>3.踩了个坑,n每次都会被除到很小,因此需要用个临时变量来处理</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; N)&#123;</span><br><span class="line">        <span class="keyword">bool</span> yes=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">2</span>; r &lt;= <span class="number">16</span>; ++r)&#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="keyword">int</span> n = N;</span><br><span class="line">            <span class="keyword">while</span>(n)&#123;</span><br><span class="line">                <span class="keyword">char</span> c = n%r+<span class="number">48</span>;</span><br><span class="line">                <span class="keyword">if</span> (n%r&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">                    c = n%r<span class="number">-10</span>+<span class="number">65</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                n /= r;</span><br><span class="line">                s += c;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检测出r进制变换时,n已经被除的很小了,因此需要用个临时变量</span></span><br><span class="line">            <span class="comment">// cout &lt;&lt; r &lt;&lt; "进制：" &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">// for (int i = 0; i &lt; s.size(); ++i)</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     cout &lt;&lt; s[i] &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">//     /* code */</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="keyword">bool</span> mirror = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">int</span> ssize = s.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= ssize/<span class="number">2</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] != s[ssize-i<span class="number">-1</span>])&#123;</span><br><span class="line">                    mirror = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mirror)&#123;</span><br><span class="line">                 yes=<span class="literal">true</span>;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (yes) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发邮件"><a class="markdownIt-Anchor" href="#发邮件"></a> <a href="https://www.nowcoder.com/pat/2/problem/274" target="_blank" rel="noopener"> 发邮件</a></h3><blockquote><p>一道数学题，递推公式为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">[</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f(n) = (n-1)*[f(n-1)+f(n-2)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></p><p>坑点:超出了int，需要用longlong</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">email</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n<span class="number">-1</span>)*(email(n<span class="number">-1</span>)+email(n<span class="number">-2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; email(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="说反话-20"><a class="markdownIt-Anchor" href="#说反话-20"></a> <a href="https://www.nowcoder.com/pat/2/problem/4075" target="_blank" rel="noopener"> 说反话 (20)</a></h3><blockquote><p>考查了：对行的读取、字符串的切割。</p><p>本来还以为考了个string的反转，结果比想象中的更简单一点</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( getline(<span class="built_in">cin</span>, s) )&#123;</span><br><span class="line">        <span class="built_in">stringstream</span> strings;</span><br><span class="line">        <span class="built_in">string</span> tmps;</span><br><span class="line">        strings &lt;&lt; s;</span><br><span class="line">        <span class="keyword">while</span>( getline(strings, tmps, <span class="string">' '</span>) )&#123;</span><br><span class="line">            ss.push(tmps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!ss.empty())&#123;</span><br><span class="line">            <span class="built_in">string</span> couts = ss.top();</span><br><span class="line">            ss.pop();</span><br><span class="line">            <span class="keyword">if</span> (!ss.empty())</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; couts &lt;&lt;<span class="string">' '</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; couts ;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补充string的反转"><a class="markdownIt-Anchor" href="#补充string的反转"></a> 补充——string的反转：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*法一:使用string::reverse_iterator迭代器,直接用iterator会报错*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">string</span>::reverse_iterator it=couts.rbegin(); it != couts.rend() ; ++it)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*法二:使用algorithm算法中的reverse函数*/</span></span><br><span class="line"><span class="comment">// 会修改str中的内容</span></span><br><span class="line">reverse(str.begin(),str.end());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*法三:使用使用string.h中的strrev函数</span></span><br><span class="line"><span class="comment">△只能处理char[],不支持string类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">char</span> s[]=<span class="string">"hello"</span>;</span><br><span class="line">strrev(s);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*法四:自己编写*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=n<span class="number">-1</span>;i&lt;j;i++,j--)&#123;</span><br><span class="line">        <span class="keyword">char</span> c=s[i];</span><br><span class="line">        s[i]=s[j];</span><br><span class="line">        s[j]=c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一元多项式求导-25"><a class="markdownIt-Anchor" href="#一元多项式求导-25"></a> <a href="https://www.nowcoder.com/pat/2/problem/4076" target="_blank" rel="noopener">一元多项式求导 (25)</a></h3><blockquote><p>被读取方式卡了会</p><p>这边有个坑点: 忽略了常数项的问题<br>比如 输入 2 0<br>应该输出 0 0</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">exp</span>,coe;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;coe,&amp;<span class="built_in">exp</span>)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>,coe*<span class="built_in">exp</span>,<span class="built_in">exp</span><span class="number">-1</span>);</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="literal">false</span>) <span class="built_in">printf</span>(<span class="string">"0 0\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>别人的处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> coef;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">&#125;<span class="keyword">typedef</span> poly;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> coef;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;poly&gt; q;</span><br><span class="line">    <span class="comment">// scanf和getchar合用比较方便,cin再用getchar无效</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;coef, &amp;index) != EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span> (index!=<span class="number">0</span>)&#123;</span><br><span class="line">            poly *p = <span class="keyword">new</span> poly();</span><br><span class="line">            p-&gt;coef = coef*index;</span><br><span class="line">            p-&gt;index = index<span class="number">-1</span> ;</span><br><span class="line">            q.push(*p);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 放最后能过,放最初的时候有些过不了</span></span><br><span class="line">        <span class="keyword">if</span> (getchar()==<span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (q.size()==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"0 0\n"</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            poly p = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">if</span> (p.coef != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (q.empty())</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, p.coef, p.index );</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d "</span>, p.coef, p.index );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷完了牛客网PAT乙级练习题的第一、第三页。大多都是些模拟题、简单题，相当于弱一点的蓝桥杯省赛。由于报名考的是甲级，所以就没继续做下去了…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pat冲冲冲乙级&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pat冲冲冲乙级&quot;&gt;&lt;/a&gt; PAT冲冲冲——乙级&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sshpass——shell脚本实现SSH连接其他主机并执行终端命令</title>
    <link href="https://nymrli.top/2019/12/25/sshpass%E2%80%94%E2%80%94shell%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0SSH%E8%BF%9E%E6%8E%A5%E5%85%B6%E4%BB%96%E4%B8%BB%E6%9C%BA%E5%B9%B6%E6%89%A7%E8%A1%8C%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
    <id>https://nymrli.top/2019/12/25/sshpass——shell脚本实现SSH连接其他主机并执行终端命令/</id>
    <published>2019-12-25T09:29:08.000Z</published>
    <updated>2019-12-25T10:16:16.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sshpass"><a class="markdownIt-Anchor" href="#sshpass"></a> sshpass</h1><blockquote><p>ssh登陆不能在命令行中指定密码。sshpass的出现，解决了这一问题。即sshpass可以用于非交互SSH的密码验证，<strong>一般用在sh脚本中，无须再次输入密码</strong>。</p></blockquote><p>sshpass允许用<code>-p</code>参数指定明文密码，然后直接登录远程服务器。(支持密码从命令行、文件、环境变量中读取)</p><p>1.安装<code>sudo apt install sshpass</code></p><p>2.使用说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -p 直接指定密码</span></span><br><span class="line">sshpass -p '123456' ssh user_name@host_ip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> -f: -f filename <span class="comment">#后跟保存密码的文件名，密码是文件内容的第一行。</span></span></span><br><span class="line">[root@zhu ~]# cat 1.txt</span><br><span class="line">123456</span><br><span class="line">[root@zhu ~]# sshpass -f 1.txt  ssh root@192.168.56.102</span><br><span class="line">Last login: Fri Apr 18 13:48:20 2014 from 192.168.56.101</span><br><span class="line">[root@jiang ~]# exit</span><br><span class="line">logout</span><br><span class="line">Connection to 192.168.56.102 closed.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> -e <span class="comment">#将环境变量SSHPASS作为密码</span></span></span><br><span class="line">[root@zhu ~]# export SSHPASS=123456</span><br><span class="line">[root@zhu ~]# sshpass -e  ssh root@192.168.56.102</span><br><span class="line">Last login: Fri Apr 18 13:51:45 2014 from 192.168.56.101</span><br><span class="line">[root@jiang ~]# exit</span><br><span class="line">logout</span><br><span class="line">Connection to 192.168.56.102 closed.</span><br></pre></td></tr></table></figure><h1 id="shell脚本实现ssh连接其他主机并执行终端命令"><a class="markdownIt-Anchor" href="#shell脚本实现ssh连接其他主机并执行终端命令"></a> shell脚本实现SSH连接其他主机并执行终端命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">command</span> -v &lt;the_command&gt; 检测命令是否存在返回命令所在路径,等价于<span class="built_in">which</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> [ -x file ] 如果文件存在且可执行</span></span><br><span class="line">if ! [ -x "$(command -v sshpass)" ]; then</span><br><span class="line">  sudo apt-get install sshpass</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">port=20005</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> -e 会进行转义</span></span><br><span class="line">echo -e "\n请输入用户名！\n"</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">read</span>-将交互输入保存在变量中</span></span><br><span class="line">read name</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获得当前脚本的工作路径</span></span><br><span class="line">dir=$(cd $(dirname $0);pwd)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 分割-&gt;获得文件名</span></span><br><span class="line">file_name="$&#123;dir##*/&#125;"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 传输文件</span></span><br><span class="line">echo -e "\n[开始传输文件]\n"</span><br><span class="line">sshpass -p "$key" scp -r -P  $port $dir username@IP_address:/data/cluster/$name</span><br><span class="line">if [ $pool -eq 1 ]||[ $pool -eq 2 ]||[ $pool -eq 3 ]</span><br><span class="line">then </span><br><span class="line">    # remotessh为标记符,下面的内容全部重定向到ssh连接的终端中, 一定要保证下面的全是以字符串的形式</span><br><span class="line">    # 由于shell会进行预转换,所以shell特殊的量需要额外注意,否则结果将只会是当前主机的。因此需要加\</span><br><span class="line">    # man sshpass中提示:多个-t选项强制分配tty，即使ssh没有本地tty,所以使用-tt参数来强制伪终端分配(表示为这个连接分配TTY)，即使标准输入不是终端，否则退出后会提示`Pseudo-terminal will not be allocated because stdin is not a terminal的错`。 即指明是来自脚本的调用</span><br><span class="line">    # 控制终端（/dev/tty）就是当前进程的控制终端的设备特殊文件，可以进行写入写出</span><br><span class="line">    sshpass -p "$key" ssh -tt -p $(($port+$pool)) username@IP_address &lt;&lt; remotessh</span><br><span class="line">Condor_number=\`condor_q | grep jobs | awk '&#123;print \$1&#125;'\`</span><br><span class="line">if [ \$Condor_number -le 1 ]</span><br><span class="line">then echo -e "\n创建任务失败！\n"</span><br><span class="line">else echo -e "\n创建任务成功！\n"</span><br><span class="line">fi</span><br><span class="line">exit</span><br><span class="line">remotessh</span><br><span class="line">else</span><br><span class="line">echo -e "没有该资源池\n"</span><br><span class="line">exit</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><code>man sshpass</code>中关于-t参数的说明</p><blockquote><p>Force pseudo-terminal allocation.  This can be used to execute arbitrary screen-based programs on a remote machine, which can be very useful, e.g. when implementing menu services.  Multiple -t options force tty allocation, even if ssh has no local tty.</p></blockquote><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h1><p>所以实现的方法主要是:</p><ul><li>SSHpass非交互式登录</li><li>SSH终端执行多条命令</li></ul><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><p><a href="https://blog.csdn.net/wyl9527/article/details/72770455" target="_blank" rel="noopener">ssh@host:ssh切换到其他机器上执行多条命令</a><br><a href="https://blog.csdn.net/qq_39584315/article/details/87189114" target="_blank" rel="noopener">Shell表达式，${file##*/} 取后缀</a><br><a href="https://blog.csdn.net/liyyzz33/article/details/84836255" target="_blank" rel="noopener">shell-if表达式（-f,-d,-s,-r,-w,-x,-eq,-ne,-ge,-gt,-le,-lt ）</a><br><a href="https://majing.io/posts/10000009411212" target="_blank" rel="noopener">Linux检测命令是否存在</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sshpass&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sshpass&quot;&gt;&lt;/a&gt; sshpass&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh登陆不能在命令行中指定密码。sshpass的出现，解决了这一问题。即sshpass
      
    
    </summary>
    
    
      <category term="运维" scheme="https://nymrli.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Linux" scheme="https://nymrli.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>树莓派初始化操作</title>
    <link href="https://nymrli.top/2019/12/12/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C/"/>
    <id>https://nymrli.top/2019/12/12/树莓派初始化操作/</id>
    <published>2019-12-12T10:59:06.000Z</published>
    <updated>2019-12-12T11:21:49.504Z</updated>
    
    <content type="html"><![CDATA[<p>安装系统镜像:</p><p><a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener">官网下载镜像</a>，解压下载好的Zip文件会得到.img镜像文件。下载win32DiskImage</p><p>方式:</p><ul><li>SSH</li><li>VNC</li><li>Xrdp</li></ul><p>系统设置:</p><p>$ sudo raspi-reconfig</p><p>1.安装字体</p><blockquote><p>默认安装的是英文字体，如果时区选择中文，将会乱码，因此需要安装中文字体进行汉化。</p></blockquote><p><code>sudo apt-get install ttf-wqy-zenhei</code></p><p>2.安装中文输入发</p><p>3.修改键盘布局</p><blockquote><p>键盘布局默认是英标的，需要将其改成美标</p></blockquote><p>输入<code>sudo dpkg-reconfigure keyboard-configuration</code>后选择通用的104键PC键盘(Generic 104 Key PC),在Layout中选择Ohter,然后在选项中选择English(US)，然后不断选择OK退出即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装系统镜像:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/downloads/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网下载镜像&lt;/a&gt;，解压下载好的Zip文件会得到.img镜像文件。下载win32D
      
    
    </summary>
    
    
      <category term="嵌入式" scheme="https://nymrli.top/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ACM-网络流</title>
    <link href="https://nymrli.top/2019/12/08/ACM-%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    <id>https://nymrli.top/2019/12/08/ACM-网络流/</id>
    <published>2019-12-08T11:03:34.000Z</published>
    <updated>2019-12-08T11:48:50.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最大流"><a class="markdownIt-Anchor" href="#最大流"></a> 最大流</h1><h2 id="ff算法"><a class="markdownIt-Anchor" href="#ff算法"></a> FF算法</h2><blockquote><p>最基本找増广路的算法</p></blockquote><h3 id="dinic实现基础的ff算法"><a class="markdownIt-Anchor" href="#dinic实现基础的ff算法"></a> dinic实现(基础的FF算法)</h3><blockquote><p><strong>反边</strong>：我们知道，当我们在寻找增广路的时候，在前面找出的不一定是最优解，如果我们在减去残量网络中正向边的同时将相对应的反向边加上对应的值，我们就相当于可以反悔从这条边流过。</p></blockquote><p>技巧：flow[u]正边，flow[u^1]反边<br>建边的时候是同时建的，比如1的反边为2，2的反边为1，▲边不能从0开始</p><p>主要思路：</p><ul><li>求增广路</li><li>分层图</li></ul><h4 id="dinic的优化"><a class="markdownIt-Anchor" href="#dinic的优化"></a> dinic的优化</h4><ul><li><p>当前弧优化(作用不明显)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最原始</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> fl)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(now==aim)<span class="keyword">return</span> fl;</span><br><span class="line">    <span class="keyword">int</span> f=e;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=fir[now];u &amp;&amp; fl;u=nxt[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(flow[uj&amp;&amp;deep[to[u]]==deep[now]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=dfs(to[u],min(fl,flow[u]));</span><br><span class="line">            flow[u]-=x;flow[u^<span class="number">1</span>]+=x;fl-=x;f+=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(lf)deep[now]=<span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当前弧优化</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> fl)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(now==aim) <span class="keyword">return</span> fl;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 修改为curfir[now]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=curfir[now];u&amp;&amp;fl;u=nxt[u])&#123;</span><br><span class="line">        curfir=u;<span class="comment">// 加了此处</span></span><br><span class="line">        <span class="keyword">if</span>(flow[u]&amp;&amp;deep[to[u]]==deep[now]+<span class="number">1</span>)&#123;</span><br><span class="line">            int dfs(to[u],min(fl,flow[u]));</span><br><span class="line">            flow[u]-=x;flow[u^<span class="number">1</span>]+=x;fl-=x;f+=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!f)deep[now]=<span class="number">-2</span>;<span class="comment">// 炸点优化</span></span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多路增广</p></li><li><p>炸点</p></li></ul><p><strong>最大流最小割定理</strong>：最小割总和的权值==最大流的值，对于每张图都是成立的。（网络流的对称形式）</p><p>具体代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;<span class="comment">// 外层循环</span></span><br><span class="line">aim = T;<span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(bfs(s, t))&#123;</span><br><span class="line">ret += dfs(s, <span class="number">1</span>&lt;&lt;<span class="number">30</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;<span class="comment">// 建立分层图</span></span><br><span class="line"><span class="built_in">memset</span>(deep,<span class="number">0</span>,(tot+<span class="number">2</span>)&lt;&lt;<span class="number">2</span>);</span><br><span class="line">    deep[S]=<span class="number">1</span>;d1[<span class="number">1</span>]=S;<span class="keyword">int</span> head=<span class="number">0</span>,tail=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(head!=tail)&#123;</span><br><span class="line">    <span class="keyword">int</span> v=dl[++head];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=fir[v];u;u=nxt[u])&#123;</span><br><span class="line">            <span class="keyword">if</span>(flow[u]&amp;&amp;!deep[to[u]])&#123;</span><br><span class="line">            deep[to[u]]=deep[v]+<span class="number">1</span>;</span><br><span class="line">            d1[++tail]=to[u];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> deep[T];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> fl)</span></span>&#123;<span class="comment">// dfs找増广路</span></span><br><span class="line">    <span class="keyword">if</span>(now==aim) <span class="keyword">return</span> fl;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// // 当前弧优化,修改为curfir[now]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=curfir[now];u&amp;&amp;fl;u=nxt[u])&#123;</span><br><span class="line">        curfir=u;<span class="comment">// 加了此处</span></span><br><span class="line">        <span class="keyword">if</span>(flow[u]&amp;&amp;deep[to[u]]==deep[now]+<span class="number">1</span>)&#123;</span><br><span class="line">            int dfs(to[u],min(fl,flow[u]));</span><br><span class="line">            flow[u]-=x;flow[u^<span class="number">1</span>]+=x;fl-=x;f+=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!f)deep[now]=<span class="number">-2</span>;<span class="comment">// 炸点优化</span></span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ek算法"><a class="markdownIt-Anchor" href="#ek算法"></a> EK算法</h2><blockquote><p>引入了反相边：在原有的有向图上引入了反向的边，且容量相等</p></blockquote><p><strong>执行过程：</strong><br>BFS找増广路</p><ul><li>找到的话，更新最大流、残余网路</li><li>找不到则走完了</li></ul><p>两者的思想都是：找増广路，找到找不到为止</p><p>参考:</p><p><a href="https://www.bilibili.com/video/av18567992?p=1" target="_blank" rel="noopener">最大流（最小割）的EK算法</a></p><h1 id="最小费用最大流"><a class="markdownIt-Anchor" href="#最小费用最大流"></a> 最小费用最大流</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最大流&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#最大流&quot;&gt;&lt;/a&gt; 最大流&lt;/h1&gt;
&lt;h2 id=&quot;ff算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ff算法&quot;&gt;&lt;/a&gt; FF算法&lt;/h2&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
