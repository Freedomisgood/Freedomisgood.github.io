<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>果粒橙的博客</title>
  
  <subtitle>别装作很努力，因为结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2018-11-24T06:04:46.094Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>果粒橙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习——数学概念</title>
    <link href="https://nymrli.top/2018/11/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/"/>
    <id>https://nymrli.top/2018/11/24/机器学习——数学概念/</id>
    <published>2018-11-24T05:00:34.000Z</published>
    <updated>2018-11-24T06:04:46.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h3><h3 id="Confusion-martrix-混淆矩阵"><a href="#Confusion-martrix-混淆矩阵" class="headerlink" title="Confusion_martrix(混淆矩阵)"></a>Confusion_martrix(混淆矩阵)</h3><p>混淆矩阵: 一种特定的矩阵用来呈现算法性能的可视化效果，通常是监督学习（非监督学习，通常用匹配矩阵：matching matrix）</p><blockquote><p>其每一列代表预测值，每一行代表的是实际的类别。这个名字来源于它可以非常容易的表明多个类别是否有混淆（也就是一个class被预测成另一个class）。</p></blockquote><h4 id="Example样例说明"><a href="#Example样例说明" class="headerlink" title="Example样例说明:"></a>Example样例说明:</h4><p>假设有一个用来对<code>猫（cats）、狗（dogs）、兔子（rabbits）</code>进行分类的系统，混淆矩阵就是为了进一步分析性能而对该算法测试结果做出的总结。假设总共有 <strong>27</strong> 只动物：8只猫， 6条狗， 13只兔子。结果的混淆矩阵如下图：</p><p><img src="/2018/11/24/机器学习——数学概念/hexo\source\_posts\机器学习——数学概念\confusion_matrix.png" alt="confusion_matrix"></p><p>在这个混淆矩阵中，实际有 8只猫，但是系统将其中3只预测成了狗；对于 6条狗，其中有 1条被预测成了兔子，2条被预测成了猫。从混淆矩阵中我们可以看出系统对于区分猫和狗存在一些问题，但是<strong>区分兔子和其他动物的效果还是不错的</strong>。<strong><u>所有正确的预测结果都在对角线上</u></strong>，所以从混淆矩阵中可以很方便直观的看出哪里有错误，因为他们呈现在对角线外面。</p><h3 id="Table-of-confusion-混淆表格"><a href="#Table-of-confusion-混淆表格" class="headerlink" title="Table of confusion(混淆表格)"></a>Table of confusion(混淆表格)</h3><p>有时也称混淆矩阵.</p><p>由<code>false positives</code>，<code>false negatives</code>，<code>true positives</code>和<code>true negatives</code>组成的两行两列的表格。它允许我们做出更多的分析，而不仅仅是局限在正确率.。 它允许我们做出更多的分析，而不仅仅是局限在正确率。准确率对于分类器的性能分析来说，并不是一个很好地衡量指标，因为如果数据集<u>不平衡</u>（每一类的数据样本数量相差太大），很可能会出现误导性的结果。例如，如果在一个数据集中有95只猫，但是只有5条狗，那么某些分类器很可能偏向于将所有的样本预测成猫。整体准确率为95%，<u>但是实际上该分类器对猫的识别率是100%，而对狗的识别率是0%。</u></p><p>对于上面的说明样例，其对应的对猫这个类别的混淆表格如下：</p><p><img src="/2018/11/24/机器学习——数学概念/hexo\source\_posts\机器学习——数学概念\混淆表格.png" alt="混淆表格"></p><p>假定一个实验有 P个positive实例，在某些条件下有 N 个negative实例。那么上面这四个输出可以用下面的偶然性表格（或混淆矩阵）来表示：</p><p><img src="/2018/11/24/机器学习——数学概念/hexo\source\_posts\机器学习——数学概念\偶然性表格.png" alt="偶然性表格"></p><p>更多详情见博客</p><p>摘自博客 :  <a href="https://blog.csdn.net/vesper305/article/details/44927047" target="_blank" rel="noopener">https://blog.csdn.net/vesper305/article/details/44927047</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;箱线图&quot;&gt;&lt;a href=&quot;#箱线图&quot; class=&quot;headerlink&quot; title=&quot;箱线图&quot;&gt;&lt;/a&gt;箱线图&lt;/h3&gt;&lt;h3 id=&quot;Confusion-martrix-混淆矩阵&quot;&gt;&lt;a href=&quot;#Confusion-martrix-混淆矩阵&quot; cla
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数学知识" scheme="https://nymrli.top/tags/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>机器学习——python实践.笔记</title>
    <link href="https://nymrli.top/2018/11/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Python%E5%AE%9E%E8%B7%B5-%E7%AC%94%E8%AE%B0/"/>
    <id>https://nymrli.top/2018/11/23/机器学习——Python实践-笔记/</id>
    <published>2018-11-23T13:20:18.000Z</published>
    <updated>2018-11-24T07:52:50.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="机器学习——Python实践"><a href="#机器学习——Python实践" class="headerlink" title="机器学习——Python实践"></a>机器学习——Python实践</h2><ul><li>Numpy: <ul><li>python开源数值计算拓展,用来存储和处理大型矩阵,提供了许多高级的数值编程工具,如 矩阵数据类型、矢量处理、精密的运算库<ul><li>利用Numpy数组来准备机器学习算法的数据</li></ul></li></ul></li><li>matplotlib:<ul><li>python中最著名的2D绘图库,适合交互式的进行制图;也可作为绘图空间,嵌入GUI应用程序中<ul><li>创建图表,展示数据</li></ul></li></ul></li><li>Pandas:<ul><li>基于Numpy的工具,为了解决数据分析任务而创建的.~纳入了大量库和标准的数据模型,提供了操作大型数据集的工具,和快速便捷处理数据的函数和方法<ul><li>导入、展示数据，以便挣钱对数据的理解和数据清洗、转换等工作</li></ul></li></ul></li></ul><p>##### </p><p><strong>预测模型所需的六个步骤:</strong></p><p><img src="/2018/11/23/机器学习——Python实践-笔记/hexo\source\_posts\机器学习——Python实践-笔记\预测模型所需的六个步骤.jpg" alt="预测模型所需的六个步骤"></p><hr><h3 id="第一章："><a href="#第一章：" class="headerlink" title="第一章："></a>第一章：</h3><h4 id="鸢尾花-Iris-Flower"><a href="#鸢尾花-Iris-Flower" class="headerlink" title="鸢尾花(Iris Flower)"></a>鸢尾花(Iris Flower)</h4><blockquote><ul><li><p>所有特征数据都是数字,不需要考虑如何导入和处理数据—&gt;有的图表有标题等的,需要处理- </p></li><li><p>分类问题===&gt;监督学习算法</p></li><li>多分类问题,可能需要一些特殊处理</li><li>所有特征的数值采用相同单位,不需要进行尺度转换</li></ul></blockquote><p>步骤:</p><p><img src="/2018/11/23/机器学习——Python实践-笔记/hexo\source\_posts\机器学习——Python实践-笔记\项目具体步骤.jpg" alt="项目具体步骤"></p><h5 id="1-导入数据集"><a href="#1-导入数据集" class="headerlink" title="1.导入数据集"></a>1.导入数据集</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> read_csv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'iris.data.csv'</span></span><br><span class="line">names = [<span class="string">'separ-length'</span>,<span class="string">'separ-width'</span>,<span class="string">'petal-length'</span>,<span class="string">'petal-width'</span>,<span class="string">'class'</span>]</span><br><span class="line"><span class="comment"># 花萼长度+宽度 , 花瓣长度+宽度</span></span><br><span class="line">dataset = read_csv(filename,names = names)</span><br><span class="line">print(dataset)  <span class="comment"># 150 * 5</span></span><br></pre></td></tr></table></figure><h5 id="2-概述数据"><a href="#2-概述数据" class="headerlink" title="2.概述数据"></a>2.概述数据</h5><blockquote><p>从下列角度审查数据:</p><ul><li>数据的维度</li><li><p>查看数据的自身</p></li><li><p>统计描述所有的数据特征</p></li><li>数据分类的分布情况</li></ul></blockquote><h6 id="1-数据的维度"><a href="#1-数据的维度" class="headerlink" title="1.数据的维度"></a>1.数据的维度</h6><p>了解数据集中有多少行数据,数据有几个属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'数据的维度: 行 %s , 列 %s'</span> % (dataset.shape))</span><br><span class="line"><span class="comment">#&gt;&gt;&gt;数据的维度: 行 150 , 列 5</span></span><br></pre></td></tr></table></figure><h6 id="2-参看数据本身"><a href="#2-参看数据本身" class="headerlink" title="2.参看数据本身"></a>2.参看数据本身</h6><p>直观的看到数据的特征,数据的类型,以及大概的数据分布范围</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(dataset.head(<span class="number">5</span>))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">   separ-length  separ-width     ...       petal-width        <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class">0           5.1          3.5     ...               0.2  <span class="title">Iris</span>-<span class="title">setosa</span></span></span><br><span class="line"><span class="class">1           4.9          3.0     ...               0.2  <span class="title">Iris</span>-<span class="title">setosa</span></span></span><br><span class="line"><span class="class">2           4.7          3.2     ...               0.2  <span class="title">Iris</span>-<span class="title">setosa</span></span></span><br><span class="line"><span class="class">3           4.6          3.1     ...               0.2  <span class="title">Iris</span>-<span class="title">setosa</span></span></span><br><span class="line"><span class="class">4           5.0          3.6     ...               0.2  <span class="title">Iris</span>-<span class="title">setosa</span></span></span><br></pre></td></tr></table></figure><h6 id="3-统计描述数据"><a href="#3-统计描述数据" class="headerlink" title="3.统计描述数据"></a>3.统计描述数据</h6><p>数据特征的统计描述信息包括数据的<code>行数</code>、<code>中位值</code>、<code>最大值</code>、<code>最小值</code>、<code>均值</code>、<code>四分位值</code>等统计数据信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(dataset.describe())</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">       separ-length  separ-width  petal-length  petal-width</span><br><span class="line">count    <span class="number">150.000000</span>   <span class="number">150.000000</span>    <span class="number">150.000000</span>   <span class="number">150.000000</span></span><br><span class="line">mean       <span class="number">5.843333</span>     <span class="number">3.054000</span>      <span class="number">3.758667</span>     <span class="number">1.198667</span></span><br><span class="line">std        <span class="number">0.828066</span>     <span class="number">0.433594</span>      <span class="number">1.764420</span>     <span class="number">0.763161</span></span><br><span class="line">min        <span class="number">4.300000</span>     <span class="number">2.000000</span>      <span class="number">1.000000</span>     <span class="number">0.100000</span></span><br><span class="line"><span class="number">25</span>%        <span class="number">5.100000</span>     <span class="number">2.800000</span>      <span class="number">1.600000</span>     <span class="number">0.300000</span></span><br><span class="line"><span class="number">50</span>%        <span class="number">5.800000</span>     <span class="number">3.000000</span>      <span class="number">4.350000</span>     <span class="number">1.300000</span></span><br><span class="line"><span class="number">75</span>%        <span class="number">6.400000</span>     <span class="number">3.300000</span>      <span class="number">5.100000</span>     <span class="number">1.800000</span></span><br><span class="line">max        <span class="number">7.900000</span>     <span class="number">4.400000</span>      <span class="number">6.900000</span>     <span class="number">2.500000</span></span><br></pre></td></tr></table></figure><h6 id="4-数据分类分布"><a href="#4-数据分类分布" class="headerlink" title="4.数据分类分布"></a>4.数据分类分布</h6><p>了解数据在不同分类的分布情况..==&gt;每个分类数据量的绝对数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(dataset.groupby(<span class="string">'class'</span>).size())</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">Iris</span>-<span class="title">setosa</span>        50</span></span><br><span class="line"><span class="class"><span class="title">Iris</span>-<span class="title">versicolor</span>    50</span></span><br><span class="line"><span class="class"><span class="title">Iris</span>-<span class="title">virginica</span>     50</span></span><br><span class="line"><span class="class"><span class="title">dtype</span>:</span> int64</span><br></pre></td></tr></table></figure><p>▲ 如果数据分布不平衡,可能会影响到模型的准确性,..==&gt;不平衡时,需要对数据进行调整,方法有:</p><ul><li>扩大数据样本<ul><li>通常容易被忽略的选择…但往往找到更大的数据集就有可能挖掘出更平衡的方面提高算法准确度</li></ul></li><li>数据的重新抽样<ul><li>过抽样(复制少数类样本)..数据少时考虑</li><li>欠抽样(删除多数类样本)..数据多时考虑</li></ul></li><li>尝试生成人工样本<ul><li>从少数类的实例中随机抽样特征属性,生成更多数据</li></ul></li><li>异常检测和变化检测<ul><li>尝试从不同观点思考,异常检测是对罕见事件的检测,将小类作为异常值类</li></ul></li></ul><h4 id="3-数据可视化"><a href="#3-数据可视化" class="headerlink" title="3.数据可视化"></a>3.数据可视化</h4><blockquote><p>单变量图表: 理解每一个特征属性</p><p>多变量图表: 理解不同特征属性之间的关系</p></blockquote><h5 id="单变量图"><a href="#单变量图" class="headerlink" title="单变量图:"></a>单变量图:</h5><blockquote><p>箱线图: 一种用作显示一组数据分散情况资料的统计图。因形状如箱子而得名。</p><p>主要用于反映原始数据分布的特征，还可以进行多组数据分布特征的比 较。箱线图的绘制方法是：先找出一组数据的最大值、最小值、中位数和两个四分位数；然后， 连接两个四分位数画出箱子；再将最大值和最小值与箱子相连接，中位数在箱子中间。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#箱线图 , 因为每个特征属性都是数字 , 所以 用箱线图展示 属性与中位值的离散程度</span></span><br><span class="line">dataset.plot(kind=<span class="string">'box'</span>,subplots = <span class="keyword">True</span>,layout = (<span class="number">2</span>,<span class="number">2</span>) , sharex = <span class="keyword">False</span> , sharey = <span class="keyword">False</span>)</span><br><span class="line"><span class="comment"># 参数说明 : box箱线 , subplots 允许多个子图, layout 布局为2*2 , sharex.sharey 不共享x,y</span></span><br><span class="line">pyplot.show()</span><br><span class="line"><span class="comment">#---</span></span><br><span class="line"><span class="comment">#直方图 , x轴为值 , y轴为数量</span></span><br><span class="line">dataset.hist()</span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><h5 id="多变量图"><a href="#多变量图" class="headerlink" title="多变量图:"></a>多变量图:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas.plotting <span class="keyword">import</span> scatter_matrix</span><br><span class="line"><span class="comment">#散点矩阵图</span></span><br><span class="line">scatter_matrix(dataset)</span><br><span class="line">pyplot.show()</span><br><span class="line"><span class="comment">#pyplot.savefig("scatter_matrix.png")</span></span><br></pre></td></tr></table></figure><p><img src="/2018/11/23/机器学习——Python实践-笔记/hexo\source\_posts\机器学习——Python实践-笔记\scatter_matrix.png" alt="scatter_matrix"></p><h4 id="4-评估算法"><a href="#4-评估算法" class="headerlink" title="4.评估算法"></a>4.评估算法</h4><blockquote><ul><li>分离出评估数据集</li><li>采用<strong>10折交叉验证</strong>来评估算法模型</li><li>生成6个不同的模型来预测新数据</li><li>选择最优模型</li></ul></blockquote><h5 id="1-分离出评估数据集"><a href="#1-分离出评估数据集" class="headerlink" title="1.分离出评估数据集"></a>1.分离出评估数据集</h5><p>:heart:要想知道算法模型对真是数据的准确度,所以保留一部分数据来评估算法模型.</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">array = dataset.values</span><br><span class="line">X = array[:,<span class="number">0</span>:<span class="number">4</span>]    <span class="comment">#除了最后的class类别</span></span><br><span class="line">Y = array[:,<span class="number">4</span>]      <span class="comment">#类别,目标</span></span><br><span class="line">validation_size = <span class="number">0.2</span>   <span class="comment">#验证比例</span></span><br><span class="line">seed = <span class="number">7</span>                <span class="comment">#随机种子</span></span><br><span class="line">X_train , X_validation , Y_train , Y_validation = \</span><br><span class="line">    train_test_split(X,Y,test_size=validation_size,random_state=seed)</span><br></pre></td></tr></table></figure><h5 id="2-评估模式"><a href="#2-评估模式" class="headerlink" title="2.评估模式"></a>2.评估模式</h5><p>采用10折交叉验证来分离训练数据集 : </p><blockquote><p> 随机将数据分成10份,9份用来训练模型,1份用来评估算法</p></blockquote><h5 id="3-创建模型"><a href="#3-创建模型" class="headerlink" title="3.创建模型"></a>3.创建模型</h5><p><strong>线性</strong></p><ul><li>线性回归(LR)</li><li>线性判别分析(LDA)</li></ul><p><strong>非线性</strong></p><ul><li>K近邻(KNN)</li><li>分类与回归树(CART)</li><li>贝叶斯分类器(NB)</li><li>支持向量机(SVM)</li></ul><p>▲ 在每次对算法进行评估前都会重新设置随机数种子,以保证每次对算法的评估都是用相同的数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression,LinearRegression <span class="comment">#LR</span></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier                      <span class="comment">#CART</span></span><br><span class="line"><span class="keyword">from</span> sklearn.discriminant_analysis <span class="keyword">import</span> LinearDiscriminantAnalysis <span class="comment">#LDA</span></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB                           <span class="comment">#NB</span></span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier                   <span class="comment">#KNN</span></span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC                                          <span class="comment">#SVM</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold,cross_val_score</span><br><span class="line">models = &#123;&#125;</span><br><span class="line">models[<span class="string">'LR'</span>] = LogisticRegression()</span><br><span class="line">models[<span class="string">'LDA'</span>] = LinearDiscriminantAnalysis()</span><br><span class="line">models[<span class="string">'CART'</span>] = DecisionTreeClassifier()</span><br><span class="line">models[<span class="string">'NB'</span>] = GaussianNB()</span><br><span class="line">models[<span class="string">'KNN'</span>] = KNeighborsClassifier()</span><br><span class="line">models[<span class="string">'SVM'</span>] = SVC()</span><br><span class="line"><span class="comment">#评估算法</span></span><br><span class="line">resutls  = []</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> models:</span><br><span class="line">    kfold = KFold(n_splits=<span class="number">10</span>,random_state=seed)</span><br><span class="line">    cv_result  = cross_val_score(models[key],X_train,Y_train,cv = kfold , scoring = <span class="string">'accuracy'</span>)</span><br><span class="line">    <span class="comment">#cross_val_score将交叉验证的整个过程连接起来，不用再进行手动的分割数据, cv参数用于规定将原始数据分成多少份</span></span><br><span class="line">    resutls.append(cv_result)</span><br><span class="line">    print(<span class="string">"%s: %f (%f)"</span> % (key,cv_result.mean(),cv_result.std()))<span class="comment">#均值,标准差</span></span><br></pre></td></tr></table></figure><h5 id="4-选择最优模型"><a href="#4-选择最优模型" class="headerlink" title="4.选择最优模型"></a>4.选择最优模型</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="selector-tag">LR</span>: 0<span class="selector-class">.966667</span> (0<span class="selector-class">.040825</span>)</span><br><span class="line"><span class="selector-tag">LDA</span>: 0<span class="selector-class">.975000</span> (0<span class="selector-class">.038188</span>)</span><br><span class="line"><span class="selector-tag">CART</span>: 0<span class="selector-class">.966667</span> (0<span class="selector-class">.040825</span>)</span><br><span class="line"><span class="selector-tag">NB</span>: 0<span class="selector-class">.975000</span> (0<span class="selector-class">.053359</span>)</span><br><span class="line"><span class="selector-tag">KNN</span>: 0<span class="selector-class">.983333</span> (0<span class="selector-class">.033333</span>)</span><br><span class="line"><span class="selector-tag">SVM</span>: 0<span class="selector-class">.991667</span> (0<span class="selector-class">.025000</span>)</span><br></pre></td></tr></table></figure><h5 id="为什么使用-10折交叉验证"><a href="#为什么使用-10折交叉验证" class="headerlink" title="为什么使用 10折交叉验证?"></a>为什么使用 10折交叉验证?</h5><p>进行模型验证的一个重要目的是要选出一个最合适的模型，对于监督学习而言，我们希望模型对于未知数据的<u>泛化能力</u>强，所以就需要模型验证这一过程来体现不同的模型对于未知数据的表现效果。</p><h6 id="训练准确度-gt-测试准确度"><a href="#训练准确度-gt-测试准确度" class="headerlink" title="训练准确度==&gt;测试准确度"></a>训练准确度==&gt;测试准确度</h6><p>最先我们用<strong>训练准确度</strong>（用全部数据进行训练和测试）来衡量模型的表现，这种方法会导致模型<u>过拟合(方差大)</u>；===&gt;&gt;为了解决这一问题，我们将所有数据分成训练集和测试集两部分，我们用<code>训练集</code>进行模型训练，得到的模型再用<code>测试集</code>来衡量模型的预测表现能力，这种度量方式叫<strong>测试准确度</strong>，这种方式可以有效避免过拟合。</p><h6 id="测试准确度-gt-10折交叉验证"><a href="#测试准确度-gt-10折交叉验证" class="headerlink" title="测试准确度==&gt;10折交叉验证"></a>测试准确度==&gt;10折交叉验证</h6><p><strong>测试准确度的一个缺点</strong>是其样本准确度是一个高方差估计（high variance estimate）, 所以该样本准确度会依赖不同的测试集，其表现效果不尽相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"random_state is "</span>, i,<span class="string">", and accuracy score is:"</span></span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=i)</span><br><span class="line"></span><br><span class="line">    knn = KNeighborsClassifier(n_neighbors=<span class="number">5</span>)</span><br><span class="line">    knn.fit(X_train, y_train)</span><br><span class="line">    y_pred = knn.predict(X_test)</span><br><span class="line">    <span class="keyword">print</span> metrics.accuracy_score(y_test, y_pred)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">random_state <span class="keyword">is</span>  <span class="number">1</span> , <span class="keyword">and</span> accuracy score <span class="keyword">is</span>:<span class="number">1.0</span></span><br><span class="line">random_state <span class="keyword">is</span>  <span class="number">2</span> , <span class="keyword">and</span> accuracy score <span class="keyword">is</span>:<span class="number">1.0</span></span><br><span class="line">random_state <span class="keyword">is</span>  <span class="number">3</span> , <span class="keyword">and</span> accuracy score <span class="keyword">is</span>:<span class="number">0.947368421053</span></span><br><span class="line">random_state <span class="keyword">is</span>  <span class="number">4</span> , <span class="keyword">and</span> accuracy score <span class="keyword">is</span>:<span class="number">0.973684210526</span></span><br></pre></td></tr></table></figure><p>上面的测试准确率可以看出，<u>不同的训练集、测试集分割的方法</u>导致其准确率不同，而交叉验证的基本思想是：<u>1.将数据集进行一系列分割，生成一组不同的训练测试集</u>，<u>2.然后分别训练模型并计算测试准确率</u>，<u>3.最后对结果进行<strong>平均处理</strong></u>。这样来有效降低测试准确率的差异。</p><h5 id="K折交叉验证"><a href="#K折交叉验证" class="headerlink" title="K折交叉验证:"></a>K折交叉验证:</h5><ol><li>将数据集平均分割成K个等份子集</li><li>使用1份数据作为测试数据，其余(K-1)份作为训练数据</li><li>计算测试准确率</li><li>使用不同的测试集，重复2、3步骤</li><li>对测试准确率做<strong>平均</strong>，作为对未知数据预测准确率的估计  ==&gt; <code>cross_val_score.mean()</code></li></ol><blockquote><p>不同的训练集、测试集分割的方法导致其准确率不同，而交叉验证的基本思想是：将数据集进行一系列分割，生成一组不同的训练测试集，然后分别训练模型并计算测试准确率，最后对结果进行平均处理。这样来有效降低测试准确率的差异。</p></blockquote><p><img src="/2018/11/23/机器学习——Python实践-笔记/hexo\source\_posts\机器学习——Python实践-笔记\数学概念\KFold.png" alt="KFold"></p><h6 id="分割方法"><a href="#分割方法" class="headerlink" title="分割方法"></a>分割方法</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面代码演示了K-fold交叉验证是如何进行数据分割的</span></span><br><span class="line"><span class="comment"># simulate splitting a dataset of 25 observations into 5 folds</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> KFold</span><br><span class="line">kf = KFold(<span class="number">25</span>, n_folds=<span class="number">5</span>, shuffle=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cv_result  = cross_val_score(models[key],X_train,Y_train,cv = <span class="number">10</span> , scoring = <span class="string">'accuracy'</span>)</span><br><span class="line"><span class="comment">#cross_val_score将交叉验证的整个过程连接起来，不用再进行手动的分割数据, cv参数用于规定将原始数据分成多少份</span></span><br></pre></td></tr></table></figure><h5 id="5-实施预测"><a href="#5-实施预测" class="headerlink" title="5.实施预测"></a>5.实施预测</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用评估数据集评估算法</span></span><br><span class="line">svm = SVC()</span><br><span class="line">svm.fit(X = X_train ,y = Y_train)<span class="comment">#参数为 X , y</span></span><br><span class="line">predictions = svm.predict(X_validation)</span><br><span class="line">print(accuracy_score(Y_validation,predictions))<span class="comment">#测试集结果 与 预测结果 相比</span></span><br><span class="line">print(confusion_matrix(Y_validation,predictions))</span><br><span class="line">print(classification_report(Y_validation,predictions))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">0.9333333333333333</span></span><br><span class="line">[[ <span class="number">7</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">10</span>  <span class="number">2</span>]<span class="comment">#混淆矩阵只出现了两个错误,2</span></span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span> <span class="number">11</span>]]</span><br><span class="line">                 precision(精确度)    recall(召回率)  f1-score(F1值)   support(总和)</span><br><span class="line"></span><br><span class="line">    Iris-setosa       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">7</span></span><br><span class="line">Iris-versicolor       <span class="number">1.00</span>      <span class="number">0.83</span>      <span class="number">0.91</span>        <span class="number">12</span></span><br><span class="line"> Iris-virginica       <span class="number">0.85</span>      <span class="number">1.00</span>      <span class="number">0.92</span>        <span class="number">11</span></span><br><span class="line"></span><br><span class="line">    avg / total       <span class="number">0.94</span>      <span class="number">0.93</span>      <span class="number">0.93</span>        <span class="number">30</span></span><br></pre></td></tr></table></figure><h6 id="召回率-Recall-Rate-也叫查全率"><a href="#召回率-Recall-Rate-也叫查全率" class="headerlink" title="召回率(Recall Rate,也叫查全率)"></a>召回率(Recall Rate,也叫<a href="https://baike.baidu.com/item/%E6%9F%A5%E5%85%A8%E7%8E%87" target="_blank" rel="noopener">查全率</a>)</h6><blockquote><p>是<u>检索出的<strong>相关文档数</strong></u>和<u>文档库中所有的<strong>相关</strong>文档数</u>的比率，衡量的是检索系统的<a href="https://baike.baidu.com/item/%E6%9F%A5%E5%85%A8%E7%8E%87" target="_blank" rel="noopener">查全率</a>；</p></blockquote><h6 id="精度-Precise"><a href="#精度-Precise" class="headerlink" title="精度(Precise)"></a>精度(Precise)</h6><blockquote><p>是<u>检索出的<strong>相关文档数</strong></u>与<u>检索出的文档<strong>总数</strong></u>的比率，衡量的是<a href="https://baike.baidu.com/item/%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">检索系统</a>的<a href="https://baike.baidu.com/item/%E6%9F%A5%E5%87%86%E7%8E%87" target="_blank" rel="noopener">查准率</a>。</p></blockquote><ul><li><p>TP: 预测为正，实际为正</p></li><li><p>FP: 预测为正，实际为负</p></li><li><p>TN:预测为负，实际为负</p></li><li><p>FN: 预测为负，实际为正</p></li></ul><p>精确率、准确率：<code>Accuracy=(TP+TN)/(TP+TN+FN+FP)</code></p><p>//精准率、查准率：<code>P = TP/ (TP+FP)</code></p><p>召回率、查全率：<code>R = TP/ (TP+FN)</code></p><p><code>F1-score</code>: <code>2*TP/(2*TP + FP + FN)</code></p><hr><h6 id="F1分数"><a href="#F1分数" class="headerlink" title="F1分数:"></a>F1分数:</h6><blockquote><p>概述 : 统计学中用来衡量<strong>二分类模型精确度</strong>的一种指标。它同时兼顾了分类模型的<a href="https://baike.baidu.com/item/%E5%87%86%E7%A1%AE%E7%8E%87/5165407" target="_blank" rel="noopener">准确率</a>和<a href="https://baike.baidu.com/item/%E5%8F%AC%E5%9B%9E%E7%8E%87/560642" target="_blank" rel="noopener">召回率</a>。F1分数可以看作是模型<a href="https://baike.baidu.com/item/%E5%87%86%E7%A1%AE%E7%8E%87/5165407" target="_blank" rel="noopener">准确率</a>和<a href="https://baike.baidu.com/item/%E5%8F%AC%E5%9B%9E%E7%8E%87/560642" target="_blank" rel="noopener">召回率</a>的一种加权平均，它的最大值是1，最小值是0。</p></blockquote><p>人们通常使用准确率和召回率这两个指标，来评价<strong>二分类模型</strong>的分析效果。</p><p>但是当这两个指标发生冲突时，我们很难在模型之间进行比较。比如，我们有如下两个模型A、B，A模型的召回率高于B模型，但是B模型的准确率高于A模型，A和B这两个模型的综合性能，哪一个更优呢？</p><table><thead><tr><th></th><th>准确率</th><th>召回率</th></tr></thead><tbody><tr><td>A</td><td>80%</td><td>90%</td></tr><tr><td>B</td><td>90%</td><td>80%</td></tr></tbody></table><p>为了解决这个问题，人们提出了<img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D19/sign=7b67c59895dda144de0968bbb3b7de21/c2cec3fdfc039245a13880848594a4c27c1e25af.jpg" alt="img"> 分数。<img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D19/sign=7b67c59895dda144de0968bbb3b7de21/c2cec3fdfc039245a13880848594a4c27c1e25af.jpg" alt="img">的物理意义就是将准确率和召回率这两个分值合并为一个分值，在合并的过程中，召回率的权重是准确率的 <img src="https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D17/sign=fad8d8ab03e93901520289397aec2ef2/38dbb6fd5266d0168f25fea3952bd40735fa3578.jpg" alt="img"> 倍。<img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D15/sign=9dae0b648fb1cb133a693816dc540bf7/b64543a98226cffcb711df39bb014a90f603ea06.jpg" alt="img"> 分数认为召回率和准确率<strong>同等重要</strong>， <img src="https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D16/sign=aaaaf6777ed98d1072d40837203fd065/50da81cb39dbb6fdd61185ad0b24ab18962b37f6.jpg" alt="img"> 分数认为<strong>召回率的重要程度是准确率的2倍</strong>，而 <img src="https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D25/sign=71816368d739b60049ce08b2e850cfbe/94cad1c8a786c9171b7132b2cb3d70cf3ac757ce.jpg" alt="img"> 分数认为<strong>召回率的重要程度是准确率的一半</strong>。</p><p><img src="/2018/11/23/机器学习——Python实践-笔记/hexo\source\_posts\机器学习——Python实践-笔记\数学概念\F_beta.jpg" alt="F_beta"></p><p><img src="/2018/11/23/机器学习——Python实践-笔记/hexo\source\_posts\机器学习——Python实践-笔记\数学概念\F1_score.gif" alt="F1_score"></p><h3 id="Confusion-martrix-混淆矩阵"><a href="#Confusion-martrix-混淆矩阵" class="headerlink" title="Confusion_martrix(混淆矩阵)"></a>Confusion_martrix(混淆矩阵)</h3><p>混淆矩阵: 一种特定的矩阵用来呈现算法性能的可视化效果，通常是监督学习（非监督学习，通常用匹配矩阵：matching matrix）</p><blockquote><p>其每一列代表预测值，每一行代表的是实际的类别。这个名字来源于它可以非常容易的表明多个类别是否有混淆（也就是一个class被预测成另一个class）。</p></blockquote><h4 id="Example样例说明"><a href="#Example样例说明" class="headerlink" title="Example样例说明:"></a>Example样例说明:</h4><p>假设有一个用来对<code>猫（cats）、狗（dogs）、兔子（rabbits）</code>进行分类的系统，混淆矩阵就是为了进一步分析性能而对该算法测试结果做出的总结。假设总共有 <strong>27</strong> 只动物：8只猫， 6条狗， 13只兔子。结果的混淆矩阵如下图：</p><p><img src="/2018/11/23/机器学习——Python实践-笔记/hexo\source\_posts\机器学习——Python实践-笔记\数学概念\confusion_matrix.png" alt="confusion_matrix"></p><p>在这个混淆矩阵中，实际有 8只猫，但是系统将其中3只预测成了狗；对于 6条狗，其中有 1条被预测成了兔子，2条被预测成了猫。从混淆矩阵中我们可以看出系统对于区分猫和狗存在一些问题，但是<strong>区分兔子和其他动物的效果还是不错的</strong>。<strong><u>所有正确的预测结果都在对角线上</u></strong>，所以从混淆矩阵中可以很方便直观的看出哪里有错误，因为他们呈现在对角线外面。<em>**</em></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;机器学习——Python实践&quot;&gt;&lt;a href=&quot;#机器学习——Python实践&quot; class=&quot;headerlink&quot; title=&quot;机器学习——Python实践&quot;&gt;&lt;/a&gt;机器学习——Python实践&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Numpy: &lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Pycharm里无法查看Sqlite数据表</title>
    <link href="https://nymrli.top/2018/11/23/Pycharm%E9%87%8C%E6%97%A0%E6%B3%95%E6%9F%A5%E7%9C%8BSqlite%E6%95%B0%E6%8D%AE%E8%A1%A8/"/>
    <id>https://nymrli.top/2018/11/23/Pycharm里无法查看Sqlite数据表/</id>
    <published>2018-11-23T07:27:38.000Z</published>
    <updated>2018-11-23T07:32:06.720Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pycharm里无法查看Sqlite数据表"><a href="#Pycharm里无法查看Sqlite数据表" class="headerlink" title="Pycharm里无法查看Sqlite数据表"></a>Pycharm里无法查看Sqlite数据表</h3><p>听说Pycharm可以直接看数据库,于是试了试,发现无法读取sqlite数据库的内容…于是发现下载相应的驱动.如图</p><p><img src="/2018/11/23/Pycharm里无法查看Sqlite数据表/hexo\source\_posts\Pycharm里无法查看Sqlite数据表\fail.jpg" alt="fail"></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h4><h5 id="一-打开右侧的Database选项卡-选择Data-Source的Sqlite"><a href="#一-打开右侧的Database选项卡-选择Data-Source的Sqlite" class="headerlink" title="一.打开右侧的Database选项卡,选择Data Source的Sqlite"></a>一.打开右侧的<code>Database</code>选项卡,选择<code>Data Source</code>的Sqlite</h5><p><img src="/2018/11/23/Pycharm里无法查看Sqlite数据表/howto.jpg" alt="howto"></p><h5 id="二-点击黄色三角Download下载相应的驱动软件"><a href="#二-点击黄色三角Download下载相应的驱动软件" class="headerlink" title="二.点击黄色三角Download下载相应的驱动软件"></a>二.点击黄色三角<code>Download</code>下载相应的驱动软件</h5><p><img src="/2018/11/23/Pycharm里无法查看Sqlite数据表/hexo\source\_posts\Pycharm里无法查看Sqlite数据表\issue.jpg" alt="issue"></p><h5 id="三-安装完成-正常使用"><a href="#三-安装完成-正常使用" class="headerlink" title="三.安装完成,正常使用"></a>三.安装完成,正常使用</h5><p><img src="/2018/11/23/Pycharm里无法查看Sqlite数据表/success.jpg" alt="success"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Pycharm里无法查看Sqlite数据表&quot;&gt;&lt;a href=&quot;#Pycharm里无法查看Sqlite数据表&quot; class=&quot;headerlink&quot; title=&quot;Pycharm里无法查看Sqlite数据表&quot;&gt;&lt;/a&gt;Pycharm里无法查看Sqlite数据表&lt;/
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="数据库" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>flask-sqlalchemy使用与sqlalchemy对比</title>
    <link href="https://nymrli.top/2018/11/23/%C2%96flask-sqlalchemy%E4%BD%BF%E7%94%A8%E4%B8%8Esqlalchemy%E5%AF%B9%E6%AF%94/"/>
    <id>https://nymrli.top/2018/11/23/flask-sqlalchemy使用与sqlalchemy对比/</id>
    <published>2018-11-23T07:22:48.000Z</published>
    <updated>2018-11-23T07:24:45.223Z</updated>
    
    <content type="html"><![CDATA[<h3 id="flask-sqlalchemy使用与sqlalchemy对比"><a href="#flask-sqlalchemy使用与sqlalchemy对比" class="headerlink" title="flask-sqlalchemy使用与sqlalchemy对比"></a>flask-sqlalchemy使用与sqlalchemy对比</h3><h4 id="flask-sqlalchemy"><a href="#flask-sqlalchemy" class="headerlink" title="flask-sqlalchemy"></a>flask-sqlalchemy</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MGroup</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'Group'</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>, autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">50</span>),nullable=<span class="keyword">False</span>,unique = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MUserinfo</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'Userinfo'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    stuid = db.Column(db.String(<span class="number">15</span>),unique = <span class="keyword">True</span> ,nullable=<span class="keyword">False</span>)</span><br><span class="line">    subject = db.Column(db.String(<span class="number">50</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">10</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    qq = db.Column(db.Integer,nullable = <span class="keyword">False</span>)</span><br><span class="line">    dirction = db.Column(db.String(<span class="number">20</span>),db.ForeignKey(<span class="string">'Group.name'</span>),default=<span class="string">'3D仿真组'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mmessage</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'Contact'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">10</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">20</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    subject = db.Column(db.String(<span class="number">20</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    message = db.Column(db.Text, nullable=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h3 id="sqlalchemy"><a href="#sqlalchemy" class="headerlink" title="sqlalchemy"></a>sqlalchemy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlalchemy</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base    </span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(sqlalchemy.__version__)</span><br><span class="line">engine = create_engine(<span class="string">'sqlite:///test.db'</span>,echo = <span class="keyword">True</span>)    <span class="comment">#将数据库执行的语句打印出来</span></span><br><span class="line"></span><br><span class="line">Base = declarative_base() <span class="comment">#声明一个基类实例</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'User'</span><span class="comment">#表的名称</span></span><br><span class="line">    <span class="comment">#类的属性,而不是在析构函数中定义的原因是,Base类中有构造函数</span></span><br><span class="line">    Uid = sqlalchemy.Column(sqlalchemy.Integer,autoincrement=<span class="keyword">True</span>,primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = sqlalchemy.Column(sqlalchemy.String(<span class="number">20</span>),nullable=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;Uid&gt;:&#123;&#125;,&lt;name&gt;:&#123;&#125;"</span>.format(self.Uid,self.name)</span><br><span class="line"></span><br><span class="line">Base.metadata.create_all(engine)    <span class="comment">#创建数据库表,sqlalchemy会自动覆盖已存在的表</span></span><br></pre></td></tr></table></figure><hr><table><thead><tr><th></th><th style="text-align:center">flask-sqlalchemy</th><th>sqlalchemy</th></tr></thead><tbody><tr><td>表继承的类</td><td style="text-align:center">db = SQLAlchemy(app),db.Model</td><td>Base = declarative_base()</td></tr><tr><td></td><td style="text-align:center">都是从工厂函数中声明的一个实例类,作为声明性类基类</td><td></td></tr><tr><td>链接数据库函数</td><td style="text-align:center"></td><td>create_engine()</td></tr><tr><td>创建表函数</td><td style="text-align:center">db.create_all()</td><td>Base.metadata.create_all(engine)</td></tr><tr><td>表单字段</td><td style="text-align:center">db.Column()</td><td>sqlalchemy.Column()</td></tr><tr><td>字段类型</td><td style="text-align:center">db.Integer</td><td>sqlalchemy.Integer</td></tr><tr><td>插入数据</td><td style="text-align:center">msg =  Mmessage(name=data.get(‘name’),email=data.get(‘email’),                 subject=data.get(‘subject’),message=data.get(‘message’)) db.session.add(msg) db.session.commit()</td><td>user = User(name=’mrli’) Session = sessionmaker(bind=engine) session = Session() session.add(user) session.commit()</td></tr><tr><td>查询</td><td style="text-align:center"><code>Item.query.filter(Item.table == json_data.get(&#39;table&#39;)).first()</code></td><td><code>user = session.query(User).filter_by(name=&#39;mrli&#39;).first()</code></td></tr><tr><td>backref</td><td style="text-align:center"></td><td></td></tr><tr><td></td><td style="text-align:center"></td><td></td></tr><tr><td>文本输出</td><td style="text-align:center"></td><td><code>def __repr__(self):</code> （与django的<code>__str__</code>不同）</td></tr></tbody></table><h4 id="sqlalchemy-1"><a href="#sqlalchemy-1" class="headerlink" title="sqlalchemy:"></a>sqlalchemy:</h4><p>查:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">user = session.query(User).all()</span><br><span class="line">user = session.query(User).filter_by(name=<span class="string">'mrli'</span>).first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> user = session.query(User).order_by(User.id):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in_</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> session.query(User).filter(User.name.in_([<span class="string">'nymrli'</span>,<span class="string">'cl'</span>])):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;Uid&gt;:<span class="number">1</span>,&lt;name&gt;:mrli</span><br><span class="line">&gt;&gt;&gt;&gt; &lt;Uid&gt;:<span class="number">3</span>,&lt;name&gt;:qsy</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> session.query(~User.name.in_([<span class="string">'nymrli'</span>,<span class="string">'cl'</span>])):</span><br><span class="line">    print(row)</span><br><span class="line">    </span><br><span class="line">&gt;&gt;&gt;(<span class="keyword">True</span>,)</span><br><span class="line">&gt;&gt;&gt;(<span class="keyword">False</span>,)</span><br><span class="line">&gt;&gt;&gt;(<span class="keyword">True</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ~ in</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> session.query(User).filter(~User.name.in_([<span class="string">'nymrli'</span>,<span class="string">'cl'</span>])):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计数</span></span><br><span class="line">user = session.query(User).filter(User.name==<span class="string">'mrli'</span>).count()</span><br><span class="line"><span class="comment">#▲.注意filter()的==与filter_by()的=的使用区别</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># and_  or_</span></span><br></pre></td></tr></table></figure><h4 id="sqlalchemy-core-核心层-更接近SQL语句"><a href="#sqlalchemy-core-核心层-更接近SQL语句" class="headerlink" title="sqlalchemy core (核心层,更接近SQL语句)"></a>sqlalchemy core (核心层,更接近SQL语句)</h4><blockquote><p> 代码很接近、形似SQL原生语句,可以写sqlalchemy的SQL方言(dialect)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlalchemy</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Table,MetaData</span><br><span class="line"></span><br><span class="line">print(sqlalchemy.__version__)</span><br><span class="line">engine = create_engine(<span class="string">'sqlite:///test.db'</span>,echo = <span class="keyword">True</span>)    <span class="comment">#将数据库执行的语句打印出来</span></span><br><span class="line"></span><br><span class="line">metadata = MetaData()</span><br><span class="line"></span><br><span class="line">users = Table( <span class="string">'users'</span>,metadata,</span><br><span class="line">    sqlalchemy.Column(<span class="string">'id'</span>,sqlalchemy.Integer,primary_key=<span class="keyword">True</span>),</span><br><span class="line">    sqlalchemy.Column(<span class="string">'name'</span>,sqlalchemy.String)</span><br><span class="line">)</span><br><span class="line">addresses = Table( <span class="string">'addresses'</span> , metadata,</span><br><span class="line">   sqlalchemy.Column(<span class="string">'id'</span>, sqlalchemy.Integer, primary_key=<span class="keyword">True</span>),</span><br><span class="line">   sqlalchemy.Column(<span class="string">'user_id'</span>, <span class="keyword">None</span>,primary_key(<span class="string">'users.isd'</span>)),</span><br><span class="line">   sqlalchemy.Column(<span class="string">'email_address'</span>, sqlalchemy.String, nullable=<span class="keyword">False</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line">users = Table( <span class="string">'users'</span>,metadata,</span><br><span class="line">    sqlalchemy.Column(<span class="string">'id'</span>,sqlalchemy.Integer,primary_key=<span class="keyword">True</span>),</span><br><span class="line">    sqlalchemy.Column(<span class="string">'name'</span>,sqlalchemy.String)</span><br><span class="line">)</span><br><span class="line">addresses = Table( <span class="string">'addresses'</span> , metadata,</span><br><span class="line">   sqlalchemy.Column(<span class="string">'id'</span>, sqlalchemy.Integer, primary_key=<span class="keyword">True</span>),</span><br><span class="line">   sqlalchemy.Column(<span class="string">'user_id'</span>, <span class="keyword">None</span>,primary_key(<span class="string">'users.id'</span>)),</span><br><span class="line">   sqlalchemy.Column(<span class="string">'email_address'</span>, sqlalchemy.String, nullable=<span class="keyword">False</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">metadata.create_all(engine)</span><br><span class="line">conn = engine.connect()</span><br><span class="line"></span><br><span class="line">conn.execute(users.insert(),[</span><br><span class="line">    dict(name=<span class="string">'nymrli'</span>),</span><br><span class="line">    dict(name=<span class="string">'cl'</span>)</span><br><span class="line">])</span><br><span class="line">conn.execute(users.insert(),[</span><br><span class="line">    dict(user_id=<span class="number">1</span>,email_address=<span class="string">'1063052964@qq.com'</span>),</span><br><span class="line">    dict(user_id=<span class="number">1</span>,email_address=<span class="string">'2042423232@qq.com'</span>),</span><br><span class="line">    dict(user_id=<span class="number">2</span>, email_address=<span class="string">'1063052923@qq.com'</span>),</span><br><span class="line">    dict(user_id=<span class="number">2</span>, email_address=<span class="string">'2042423232@qq.com'</span>),</span><br><span class="line">])</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> select</span><br><span class="line">s = select([users])</span><br><span class="line">result = conn.execute(s)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s = select([users.addresses]).where(users.c.id == addresses.c.user_id)</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line">s = text(</span><br><span class="line">    <span class="string">"SELECT user.name || ',' || addresses.email_address AS title "</span> </span><br><span class="line">        <span class="string">"FROM users.addresses "</span></span><br><span class="line">        <span class="string">"WHERE users.id == addresses.user_id "</span> </span><br><span class="line">        <span class="string">"AND users.name BETWEEN :x AND :y "</span> </span><br><span class="line">        <span class="string">"AND (addresses.email_address LIKE :e1 "</span> </span><br><span class="line">        <span class="string">"OR addresses.email_address LIKE :e2)"</span></span><br><span class="line">)</span><br><span class="line">print(conn.execute(s,x=<span class="string">'m'</span>,y=<span class="string">'z'</span>,e1=<span class="string">"%@aoq.com"</span>,e2=<span class="string">'@qwe.com'</span>).fetchall())</span><br></pre></td></tr></table></figure><blockquote><p>注意下最后text()里面写的内容””引号最后要有空格,与下面的语句分割开</p></blockquote><h6 id="无空格的样子"><a href="#无空格的样子" class="headerlink" title="无空格的样子:"></a>无空格的样子:</h6><p><img src="/2018/11/23/flask-sqlalchemy使用与sqlalchemy对比/hexo\source\_posts\flask-sqlalchemy使用与sqlalchemy对比\fail.jpg" alt="fail"></p><h6 id="有空格的样子"><a href="#有空格的样子" class="headerlink" title="有空格的样子"></a>有空格的样子</h6><p><img src="/2018/11/23/flask-sqlalchemy使用与sqlalchemy对比/hexo\source\_posts\flask-sqlalchemy使用与sqlalchemy对比\success.jpg" alt="success"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;flask-sqlalchemy使用与sqlalchemy对比&quot;&gt;&lt;a href=&quot;#flask-sqlalchemy使用与sqlalchemy对比&quot; class=&quot;headerlink&quot; title=&quot;flask-sqlalchemy使用与sqlalchemy对
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="数据库" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Flask系列–将应用部署在Heroku上</title>
    <link href="https://nymrli.top/2018/11/21/Flask%E7%B3%BB%E5%88%97%E2%80%93%E5%B0%86%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%9C%A8Heroku%E4%B8%8A/"/>
    <id>https://nymrli.top/2018/11/21/Flask系列–将应用部署在Heroku上/</id>
    <published>2018-11-21T07:54:01.000Z</published>
    <updated>2018-11-21T08:58:36.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask补充系列–将应用部署在Heroku上"><a href="#Flask补充系列–将应用部署在Heroku上" class="headerlink" title="Flask补充系列–将应用部署在Heroku上"></a>Flask补充系列–将应用部署在Heroku上</h1><p>之前曾经介绍过如何<a href="http://www.bjhee.com/flask-ad8.html" target="_blank" rel="noopener">将Flask应用部署在自己的服务器上</a>，对于手头并不宽裕的程序员来说，购置一台托管服务器还是一笔不小的开销。即便现在有公有云服务器可以买，不过如果你只是以学习为目的，这笔开销还是能省则省了。另外，如果你的应用中需要访问国外被河蟹掉的资源，在服务器上翻墙也是件麻烦事，所以这里我们补充一篇如何将Flask应用部署在Heroku上。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku</a>是一个<a href="http://www.bjhee.com/cloud.html" target="_blank" rel="noopener">PaaS服务</a>提供商，使用前，你需要先<a href="https://signup.heroku.com/" target="_blank" rel="noopener">注册一个Heroku帐号</a>，注册帐号是免费的。</p><p>此外你本地必须要有Python 2.7的开发环境，并且装好了Pip, Setuptools, Virtualenv等工具。对于Python开发者来说，这些都是必备的吧。此外Git客户端也是必须的，因为Heroku的代码管理用的是Git。</p><p>Heroku提供了一个非常方便的<a href="https://devcenter.heroku.com/start" target="_blank" rel="noopener">Getting Start</a>教程，每种开发环境都有，我们可以打开Python的Getting Start，然后参照其说明创建一个Python Web应用。懒得看英文的朋友们，可以看我下面写的步骤。</p><p>在开始创建应用之前，你还需要安装<a href="https://toolbelt.heroku.com/" target="_blank" rel="noopener">Heroku的客户端工具</a>，你可以根据你本地的操作系统选择安装包下载。这是一个命令行工具，基于Ruby实现，所以使用起来每个操作系统都一样。安装完成后，你可以打开命令行，输入下面的命令来验证安装是否成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heroku --version</span></span><br></pre></td></tr></table></figure><p>如果安装成功，就在本地命令行里登录Heroku，执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heroku login</span></span><br></pre></td></tr></table></figure><p>并输入你注册号的Heroku帐号及密码即可。</p><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><h5 id="网页创建应用"><a href="#网页创建应用" class="headerlink" title="网页创建应用"></a>网页创建应用</h5><p>环境准备就绪了，我们开始创建一个应用。浏览器打开<a href="https://dashboard.heroku.com/apps" target="_blank" rel="noopener">Heroku应用控制台</a>，点击右上角的”+”号，并选择”Create new app”。<br><img src="http://www.bjhee.com/wp-content/uploads/2016/05/create-app.png" alt="Create App"></p><p>在创建页面中，输入你的应用名称，比如”flask-bjhee”，如果名称没有被占用，则会跳出绿色提示”flask-bjhee is available”。运行环境默认在美国，也可以选择欧洲。信息填完后，点击下方的”Create App”按钮，应用就创建完成了。<br><img src="http://www.bjhee.com/wp-content/uploads/2016/05/fill-appinfo.png" alt="Fill App Info"></p><p>接下来打开命令行，我们要初始化本地及远程代码库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /home/bjhee/flask-bjhee      <span class="comment"># 创建本地代码工作目录</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/bjhee/flask-bjhee         <span class="comment"># 切换到本地代码工作目录</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init                           <span class="comment"># 创建本地代码库</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> heroku git:remote -a flask-bjhee   <span class="comment"># 连接远程Heroku的flask-bjhee代码库</span></span></span><br></pre></td></tr></table></figure><p>现在，我们就可以编写应用代码，并提交到Heroku上去了。</p><p>命令行创建应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heroku create (xxx)<span class="comment">#省略会自动默认</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"yyy"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> heroku git:remote -a flask-bjhee</span></span><br></pre></td></tr></table></figure><h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><p>既然主要是在讲部署，那代码逻辑就简单些，Hello World吧。我们写一个Flask Web程序”run.py”，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>然后，我们就写个”requirements.txt”文件，应用部署时Heroku远程环境会自动执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure><p>来安装应用依赖的库。我们的”requirements.txt”文件如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Flask</span>==<span class="number">0.10</span>.<span class="number">1</span></span><br><span class="line"><span class="attr">gunicorn</span>==<span class="number">19.4</span>.<span class="number">5</span></span><br></pre></td></tr></table></figure><p>项目依赖Flask很好理解，为什么还要依赖gunicorn呢？因为我们不能靠Flask自带的Web服务器来运行Flask程序，所以gunicorn是个很好的选择。还记得如何<a href="http://www.bjhee.com/flask-ad8.html" target="_blank" rel="noopener">通过Gunicorn运行Flask应用</a>吗？对于上面的代码，我们只需执行”gunicorn run:app”即可。现在我们要告诉Heroku，应该使用这个命令来运行我们的应用。怎么做呢，就是在项目根目录里创建一个”Procfile”文件，然后写上：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web: gunicorn <span class="keyword">run</span>:<span class="keyword">app</span> --<span class="keyword">log</span>-<span class="keyword">file</span> -</span><br></pre></td></tr></table></figure><p>这就告诉Heroku，启动Web时，要执行”gunicorn run:app –log-file -“。后面的”–log-file -“参数，是为了让日志只打印到标准输出stdout上，因为Heroku不提供我们写本地磁盘的功能。</p><p>再接下来，我们要写一个app.json来描述项目信息，”app.json”内容大致如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Flask sample on Heroku"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"An example of deploying Flask web app to Heroku."</span>,</span><br><span class="line">  <span class="attr">"image"</span>: <span class="string">"heroku/python"</span>,</span><br><span class="line">  <span class="attr">"repository"</span>: <span class="string">"https://git.heroku.com/flask-bjhee"</span>,</span><br><span class="line">  <span class="attr">"keywords"</span>: [<span class="string">"python"</span>, <span class="string">"flask"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外根据习惯，我们应该写一个”README.md”来给用户看，”.gitignore”描述哪些文件类型不需要提交到代码库中去。好了，现在我们的目录结构如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flask-bjhee/</span><br><span class="line">  ├ .gitignore</span><br><span class="line">  ├ app.json</span><br><span class="line">  ├ Procfile</span><br><span class="line">  ├ README.md</span><br><span class="line">  ├ requirements.txt</span><br><span class="line">  └ run.py</span><br></pre></td></tr></table></figure><p>让我们执行git提交命令，来部署到远程Heroku上去吧：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"Initialize Project"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push heroku master               <span class="comment"># 提交到远程master分支</span></span></span><br></pre></td></tr></table></figure><p>想看看效果，命令行里输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heroku open</span></span><br></pre></td></tr></table></figure><p>就会启动浏览器，并打开地址”<a href="https://flask-bjhee.herokuapp.com/”，当然你也可以直接浏览器访问这个地址。有没有看到”Hello" target="_blank" rel="noopener">https://flask-bjhee.herokuapp.com/”，当然你也可以直接浏览器访问这个地址。有没有看到”Hello</a> World!”？</p><p>本篇的示例代码可以在<a href="http://www.bjhee.com/downloads/201605/flask-heroku.tar.gz" target="_blank" rel="noopener">这里下载</a>。</p><p>部分转自: <a href="http://www.bjhee.com/flask-heroku.html" target="_blank" rel="noopener">思诚之道</a></p><p>▲ 注意部署的时候有两个文件不能少,分别是<code>Procfile</code>和<code>requestments.txt(名字必须完全一样,我就是拼错了一次和少了个s)</code>,失败的报错情况如图</p><p><img src="/2018/11/21/Flask系列–将应用部署在Heroku上/hexo\source\_posts\Flask系列–将应用部署在Heroku上\1.jpg" alt="1"></p><p>完成后是这样的.heorku会自动根据你提供的<code>requestments.txt</code>安装相应的依赖库</p><p><img src="/2018/11/21/Flask系列–将应用部署在Heroku上/hexo\source\_posts\Flask系列–将应用部署在Heroku上\3.jpg" alt="3"></p><hr><h3 id="配置数据库环境、迁移文件、表"><a href="#配置数据库环境、迁移文件、表" class="headerlink" title="配置数据库环境、迁移文件、表"></a>配置数据库环境、迁移文件、表</h3><p>heroku提供了自己的控制台,打开的命令为<code>heroku run bash</code>,之后就可以像在linux的终端下一样操作了</p><p>除了这种方法还可以指明使用heroku命令,需要做的是加上前缀<code>heroku run</code>,如<code>heroku run python manage.py db init</code></p><p>官方介绍为:(如图</p><p><img src="/2018/11/21/Flask系列–将应用部署在Heroku上/hexo\source\_posts\Flask系列–将应用部署在Heroku上\4.jpg" alt="4"></p><hr><h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku domains:add apollo<span class="selector-class">.nymrli</span><span class="selector-class">.top</span></span><br></pre></td></tr></table></figure><p>▲.注意需要认证账户,否则会出现下图结果</p><p><img src="/2018/11/21/Flask系列–将应用部署在Heroku上/hexo\source\_posts\Flask系列–将应用部署在Heroku上\vertify.jpg" alt="vertify"></p><p>待认证好后,还需要用DNS解析,我用的是阿里云的万网解析,将<code>heroku domains:add apollo.nymrli.top</code>后<code>heroku</code>的值用CHAME记录解析.等个几秒后就可以用<code>apollo.nymrli.top</code>访问<code>heroku</code>上面的应用程序了</p><p>还有一个做法呢,是直接在heroku相应app的设置里面设置自定义域名,但是由于显示问题,容易复制错,导致无法被解析的问题…如果设置好CHAME解析30秒后还是无法用自定义域名打开的话,看看是不是值复制错了.</p><p>所以还是比较建议用命令<code>heroku domains:add xxx</code>来绑定</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask补充系列–将应用部署在Heroku上&quot;&gt;&lt;a href=&quot;#Flask补充系列–将应用部署在Heroku上&quot; class=&quot;headerlink&quot; title=&quot;Flask补充系列–将应用部署在Heroku上&quot;&gt;&lt;/a&gt;Flask补充系列–将应用部署在H
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="后端" scheme="https://nymrli.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>二分搜索降低时间复杂度</title>
    <link href="https://nymrli.top/2018/11/10/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E9%99%8D%E4%BD%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>https://nymrli.top/2018/11/10/二分搜索降低时间复杂度/</id>
    <published>2018-11-10T13:36:01.000Z</published>
    <updated>2018-11-10T13:38:14.609Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二分搜索降低时间复杂度"><a href="#二分搜索降低时间复杂度" class="headerlink" title="二分搜索降低时间复杂度"></a>二分搜索降低时间复杂度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">    canFit();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/11/10/二分搜索降低时间复杂度/Typora/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E9%99%8D%E4%BD%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/draw_lots.jpg" alt="draw_lots"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 150</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s[MAXN];</span><br><span class="line"><span class="keyword">int</span> ss[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canFit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;n;l++)</span><br><span class="line">        <span class="keyword">if</span>( s[i] + s[j] + s[l] + s[k] == m) flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度为O(n^4),只能在n较小的情况下,若n较大,则TLE..</strong></p><p><strong>时间复杂度为O(n^3log2(n))的做法:一层二分搜索</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 150</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s[MAXN];</span><br><span class="line"><span class="keyword">int</span> ss[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">binSearch</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=n,l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">int</span> i = (r+l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ( s[i] == k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( s[i] &lt; k) l = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r= i<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canFit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        <span class="keyword">if</span>( binSearch(m-s[i] - s[j] - s[k]) flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(n^2log2(n))做法: 排序<code>O(n^2log2(n))</code>,循环<code>O(n^2log2(n))</code>,总共也是<code>O(n^2log2(n))</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 150</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s[MAXN];</span><br><span class="line"><span class="keyword">int</span> ss[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">binSearch</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=n*n;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">int</span> i = (r+l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ( s[i] == k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( s[i] &lt; k) l = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r= i<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enumeration</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        ss[i*n+j] = s[i] + s[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canFit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    enumeration();</span><br><span class="line">    sort(ss,ss+n*n);        <span class="comment">//二分搜索的前提是有序</span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        <span class="keyword">if</span>( binSearch(m- s[i] - s[j] )) flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲需要注意的是,<code>ss[n*n]</code>的数组需要先排序才能使用二分搜索</p><p>—-出自:&lt;&lt;挑战程序设计竞赛&gt;&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二分搜索降低时间复杂度&quot;&gt;&lt;a href=&quot;#二分搜索降低时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;二分搜索降低时间复杂度&quot;&gt;&lt;/a&gt;二分搜索降低时间复杂度&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib.pyplot使用</title>
    <link href="https://nymrli.top/2018/11/10/matplotlib-pyplot%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2018/11/10/matplotlib-pyplot使用/</id>
    <published>2018-11-10T04:58:51.000Z</published>
    <updated>2018-11-10T05:02:47.069Z</updated>
    
    <content type="html"><![CDATA[<h3 id="matplotlib-pyplot使用"><a href="#matplotlib-pyplot使用" class="headerlink" title="matplotlib.pyplot使用"></a>matplotlib.pyplot使用</h3><h4 id="温习源自WeiboSpider"><a href="#温习源自WeiboSpider" class="headerlink" title="温习源自WeiboSpider"></a>温习源自WeiboSpider</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cgraph</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.db = db</span><br><span class="line">        self.create_dir()</span><br><span class="line">        self.Start_timestmp = time.mktime(time.strptime(<span class="string">'2018-7-5 00:00'</span>,<span class="string">'%Y-%m-%d %H:%M'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge_over</span><span class="params">(self, _time)</span>:</span>  <span class="comment"># start_time is timestamp</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        判断时间是否已经超过预设时间</span></span><br><span class="line"><span class="string">        :param Start_timestmp:</span></span><br><span class="line"><span class="string">        :param _time:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        timestamp = time.mktime(time.strptime(_time, <span class="string">'%Y-%m-%d %H:%M'</span>))</span><br><span class="line">        <span class="comment"># Start_timestamp = time.mktime(time.strptime(Start_time,'%Y-%m-%d %H:%M'))</span></span><br><span class="line">        <span class="keyword">if</span> timestamp - self.Start_timestmp &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_dir</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(<span class="string">'.\\graph'</span>):</span><br><span class="line">            os.makedirs(<span class="string">'.\\graph'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self,lists)</span>:</span></span><br><span class="line">        exist_dict = OrderedDict()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> exist_dict:</span><br><span class="line">                exist_dict[x] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                exist_dict[x] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> dict(sorted(exist_dict.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unify_time</span><span class="params">(self,_time)</span>:</span></span><br><span class="line">        c = _time.split(<span class="string">'-'</span>)</span><br><span class="line">        _time = <span class="string">'-'</span>.join([<span class="string">'0'</span> + x <span class="keyword">if</span> len(x.strip()) == <span class="number">1</span> <span class="keyword">else</span> x <span class="keyword">for</span> x <span class="keyword">in</span> c])</span><br><span class="line">        <span class="keyword">if</span> _time[:<span class="number">4</span>] == <span class="string">'2018'</span>:</span><br><span class="line">            _time = _time[<span class="number">5</span>:<span class="number">10</span>]</span><br><span class="line">        <span class="keyword">return</span> _time[:<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        timelist = []</span><br><span class="line">        <span class="keyword">for</span> alls <span class="keyword">in</span> self.db.find():</span><br><span class="line">            <span class="keyword">if</span> alls.get(<span class="string">'time'</span>):</span><br><span class="line">                print(alls.get(<span class="string">'time'</span>))</span><br><span class="line">                timelist.append(self.unify_time(alls.get(<span class="string">'time'</span>)))</span><br><span class="line">                </span><br><span class="line">        infodict = self.count(timelist[::<span class="number">-1</span>])</span><br><span class="line">        plt.figure(figsize=(<span class="number">40</span>, <span class="number">18</span>))<span class="comment">#设置图片大小</span></span><br><span class="line">        <span class="comment"># plt.rcParams['figure.figsize'] = (40.0, 12.0)   设置图片大小的另外一种方法</span></span><br><span class="line">        <span class="comment"># plt.rcParams['figure.dpi'] = 400</span></span><br><span class="line">        x = list(infodict.keys())</span><br><span class="line">        y = list(infodict.values())</span><br><span class="line">        plt.plot(x,y,linewidth=<span class="number">2</span>,color=<span class="string">'r'</span>,marker=<span class="string">'o'</span>,markersize=<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">for</span> x_value,y_value <span class="keyword">in</span> zip(x,y):</span><br><span class="line">            plt.text(x_value,y_value,y_value,fontsize= <span class="number">15</span>)<span class="comment">#文字标注(x,y,值)</span></span><br><span class="line">        plt.ylim((<span class="number">0</span>, max(y)))<span class="comment">#纵坐标y的上下限</span></span><br><span class="line">        plt.yticks([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,max(y)+<span class="number">10</span>,<span class="number">10</span>)])<span class="comment">#y的比例尺</span></span><br><span class="line">        plt.xlabel(<span class="string">'Time'</span>)</span><br><span class="line">        plt.ylabel(<span class="string">'Keyword times'</span>)<span class="comment">#y轴的标签</span></span><br><span class="line">        plt.title(<span class="string">'Weibo Keyword\'s Trendency'</span>)<span class="comment">#图的标题</span></span><br><span class="line">        plt.savefig(<span class="string">'.\\graph\\&#123;&#125;.jpg'</span>.format(TABLE))<span class="comment">#保存图片</span></span><br><span class="line">        plt.clf()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    graph = Cgraph()</span><br><span class="line">    graph.Draw()</span><br><span class="line">    print(<span class="string">'完成'</span>)</span><br></pre></td></tr></table></figure><h4 id="使用-大物实验画折线图"><a href="#使用-大物实验画折线图" class="headerlink" title="使用:大物实验画折线图"></a>使用:大物实验画折线图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">I = []</span><br><span class="line">U = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extractFromCsv</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        reader = csv.reader(f)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">            <span class="keyword">if</span> reader.line_num == <span class="number">1</span>:        <span class="comment">#跳过表头</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            U.append(float(row[<span class="number">0</span>]))</span><br><span class="line">            I.append((float(row[<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawPic</span><span class="params">(filename)</span>:</span></span><br><span class="line">    fig = plt.figure(dpi=<span class="number">256</span>, figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">    plt.plot(U,I,<span class="string">'r*'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'U(V)'</span>,fontsize=<span class="number">10</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'I(10e-9A)'</span>,fontsize=<span class="number">10</span>)</span><br><span class="line">    plt.title(<span class="string">'The line chart of the relation between U and I'</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">    plt.ylim(<span class="number">0</span>,max(I)+<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    x = np.linspace(<span class="number">0</span>,max(I)+<span class="number">0.5</span>,<span class="number">40</span>)</span><br><span class="line">    plt.yticks(x,fontsize=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">".\\graph"</span>):</span><br><span class="line">        os.mkdir(<span class="string">'.\\graph'</span>)</span><br><span class="line">    plt.savefig(<span class="string">'.\\graph\\&#123;&#125;.jpg'</span>.format(filename))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    filename=<span class="string">'phy.csv'</span></span><br><span class="line">    extractFromCsv(filename)</span><br><span class="line">    drawPic(filename)</span><br></pre></td></tr></table></figure><h4 id="图形类型"><a href="#图形类型" class="headerlink" title="图形类型"></a>图形类型</h4><ul><li>散列图 <code>ax1.scatter(x,y,c = &#39;r&#39;,marker = &#39;o&#39;)</code></li><li>折线图<code>plt.plot()</code></li><li>直方图<code>plt.hist()</code></li><li>条形图<code>plt.bar(left=index,height=y,color=&#39;green&#39;,width=0.5)</code></li><li>饼状图:<code>plt.pie(x=fracs,labels=labels,autopct=&#39;%.0f%%&#39;,explode=explode)#autopct显示百分比</code></li><li>箱形图<code>plt.boxplot(data,labels=labels)</code></li></ul><p><a href="https://blog.csdn.net/qiu931110/article/details/68130199" target="_blank" rel="noopener">scatter基本的用法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;matplotlib-pyplot使用&quot;&gt;&lt;a href=&quot;#matplotlib-pyplot使用&quot; class=&quot;headerlink&quot; title=&quot;matplotlib.pyplot使用&quot;&gt;&lt;/a&gt;matplotlib.pyplot使用&lt;/h3&gt;&lt;h4 i
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>apt代理的设置</title>
    <link href="https://nymrli.top/2018/11/10/apt%E4%BB%A3%E7%90%86%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
    <id>https://nymrli.top/2018/11/10/apt代理的设置/</id>
    <published>2018-11-10T04:56:53.000Z</published>
    <updated>2018-11-10T04:57:21.033Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原因是在apt-get update时遇到了Unable to connect to 代理，（由于<code>apt-get update</code>一直显示无法连接<code>172.17.18.141</code>百度后发现并不是个特殊的IP,）于是想到是否使用了代理。</p></blockquote><h3 id="apt代理的设置："><a href="#apt代理的设置：" class="headerlink" title="apt代理的设置："></a>apt代理的设置：</h3><h4 id="临时方法"><a href="#临时方法" class="headerlink" title="临时方法"></a>临时方法</h4><p><code>export http_proxy=http://10.3.0.1:80</code></p><h4 id="长久方法"><a href="#长久方法" class="headerlink" title="长久方法"></a>长久方法</h4><p>(1) 需要在/etc/apt/apt.conf中添加以下代码： (如果您希望apt-get(而不是其他应用程序)一直使用http代理,您可以使用这种方式。)</p><p><code>Acquire::http::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p><code>Acquire::ftp::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p><code>Acquire::https::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p>保存apt.conf文件。</p><p>(2)新建一个代理配置文件,在apt-get 时使用配置,15.10可用(针对需要下载的单个不同文件)</p><p>建立文件  <code>vim proxyfile</code></p><p><code>Acquire::http::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p><code>Acquire::ftp::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p><code>Acquire::https::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p>使用时<code>sudo apt-get install  xxx -c proxyfile</code></p><p>(2)在主目录下的.bashrc文件中添加两行。(如果您希望apt-get和其他应用程序如wget等都使用http代理,您可以使用这种方式。 )</p><p>在您的.bashrc文件末尾添加如下内容<br><code>export http_proxy=http://用户名:密码@地址:端口/</code><br><code>export https_proxy=http://用户名:密码@地址:端口/</code></p><p><code>export ftp_proxy=http://用户名:密码@地址:端口/</code></p><p><a href="https://blog.csdn.net/qq3399013670/article/details/81300497" target="_blank" rel="noopener">https://blog.csdn.net/qq3399013670/article/details/81300497</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原因是在apt-get update时遇到了Unable to connect to 代理，（由于&lt;code&gt;apt-get update&lt;/code&gt;一直显示无法连接&lt;code&gt;172.17.18.141&lt;/code&gt;百度后发现并不是个特殊的IP
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://nymrli.top/tags/Ubuntu/"/>
    
      <category term="计算机基础知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu更改nginx默认端口</title>
    <link href="https://nymrli.top/2018/11/10/Ubuntu%E6%9B%B4%E6%94%B9nginx%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3/"/>
    <id>https://nymrli.top/2018/11/10/Ubuntu更改nginx默认端口/</id>
    <published>2018-11-10T04:55:13.000Z</published>
    <updated>2018-11-10T04:56:15.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu更改nginx默认端口"><a href="#Ubuntu更改nginx默认端口" class="headerlink" title="Ubuntu更改nginx默认端口"></a>Ubuntu更改nginx默认端口</h1><blockquote><p>nginx 默认使用80端口，有时候我们希望nginx运行在其他端口，就需要更改nginx配置</p></blockquote><p><strong>nginx配置文件在/etc/nginx目录下的nginx.conf。(可以修改处理器数量、日志路径、pid文件路径等，默认的日志。)</strong></p><ul><li><code>错误日志 /var/log/nginx/error.log</code><br><code>访问日志 /var/log/nginx/access.log</code></li></ul><p><strong>在nginx.conf-&gt;http选项末尾有引入两个目录下的文件分别为：</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">/etc/nginx/nginx.conf</span>]</span><br><span class="line">http &#123;</span><br><span class="line">        <span class="comment">#   省略部分内容    </span></span><br><span class="line">        include <span class="string">/etc/nginx/conf.d/</span>*<span class="string">.conf</span>;<span class="comment">#意思是把用户自己的配置放到conf.d/*</span></span><br><span class="line">        include <span class="string">/etc/nginx/sites-enabled/</span>*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查看/etc/nginx/sites-enabled/目录，会找到一个default文件，在server选项下前两行就可以找到使用的80端口号：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[/etc/nginx/sites-enabled/default]</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br></pre></td></tr></table></figure><p><strong>将80端口号改为想使用的端口号，保存文件，如果没有启动nginx，启动即可。如果nginx已经在运行，重新加载即可。</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx <span class="literal">start</span> <span class="comment">#运行nginx</span></span><br><span class="line">sudo nginx -s reload <span class="comment">#重启nginx</span></span><br></pre></td></tr></table></figure><p><strong>如果遇到nginx报以下错误：<code>nginx: [error] open() &quot;/run/nginx.pid&quot; failed (2: No such file or directory)</code>则`sudo nginx -c path/<em>.conf #指定nginx配置</em>.conf的位置</strong>`</p><p><strong>查看nginx运行的端口`sudo netstat -anp | grep nginx</strong>`</p><p>▲如果启用防火墙，则需开启对应端口，使用AWS服务器需要更改服务器安全组，添加响应入站规则，开启对应端口。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu更改nginx默认端口&quot;&gt;&lt;a href=&quot;#Ubuntu更改nginx默认端口&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu更改nginx默认端口&quot;&gt;&lt;/a&gt;Ubuntu更改nginx默认端口&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://nymrli.top/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Pythonanywhere解决链接Mysql问题(部署flask)</title>
    <link href="https://nymrli.top/2018/11/10/Pythonanywhere%E8%A7%A3%E5%86%B3%E9%93%BE%E6%8E%A5Mysql%E9%97%AE%E9%A2%98-%E9%83%A8%E7%BD%B2flask/"/>
    <id>https://nymrli.top/2018/11/10/Pythonanywhere解决链接Mysql问题-部署flask/</id>
    <published>2018-11-10T04:54:14.000Z</published>
    <updated>2018-11-10T04:54:43.145Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Pythonanywhere解决链接Mysql问题-部署flask"><a href="#Pythonanywhere解决链接Mysql问题-部署flask" class="headerlink" title="Pythonanywhere解决链接Mysql问题(部署flask)"></a>Pythonanywhere解决链接Mysql问题(部署flask)</h4><blockquote><p>由于在bash控制台里通过命令<code>mysql -p</code>(<strong>这其实是因为错误的连接方式,由于不是默认的端口3306,自然连接不到,官方文档中有正确的连接方式</strong>)链接不到Mysql时,再加上进虚拟环境用<code>python manage db migrate</code>也失败后,我是异常慌张的..然后立马发现关于<code>pythonanywhere</code>链接Mysql的解决不是很多,要么就是说免费账号是无法用的…心顿时拔凉,但最后还是找到了pythonanywhere官方的文档,解决了这个问题,发现都是配置的问题</p></blockquote><p><strong>一开始的我本地及阿里云链接mysql数据库配置文件是这样写的:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[config.py]</span></span><br><span class="line">DIALECT = <span class="string">'mysql'</span></span><br><span class="line">DRIVER = <span class="string">'pymysql'</span></span><br><span class="line">USERNAME = <span class="string">'root'</span></span><br><span class="line">PASSWORD = <span class="string">'zxcqwe'</span> <span class="comment">#瞎写的</span></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="string">'3306'</span></span><br><span class="line">DATABASE = <span class="string">'restaurant'</span></span><br><span class="line">DEBUG = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">"&#123;&#125;+&#123;&#125;://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?charset=utf8"</span>.format(</span><br><span class="line">    DIALECT,DRIVER,USERNAME,PASSWORD,HOST,PORT,DATABASE)</span><br><span class="line"></span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p><strong>后来根据说明改成了如下:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[config.py]</span></span><br><span class="line">DIALECT = <span class="string">'mysql'</span></span><br><span class="line">DRIVER = <span class="string">'pymysql'</span></span><br><span class="line">USERNAME = <span class="string">'nymrli'</span></span><br><span class="line">PASSWORD = <span class="string">'zxcqwe'</span> <span class="comment">#瞎写的</span></span><br><span class="line">HOST = <span class="string">'nymrli.mysql.pythonanywhere-services.com'</span></span><br><span class="line">PORT = <span class="string">'3306'</span></span><br><span class="line">DATABASE = <span class="string">'nymrli$restaurant'</span></span><br><span class="line">DEBUG = <span class="keyword">True</span></span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">"&#123;&#125;+&#123;&#125;://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?charset=utf8"</span>.format(</span><br><span class="line">DIALECT, DRIVER, USERNAME, PASSWORD, HOST, PORT, DATABASE)</span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>其中修改的地方为</p><ul><li><code>USERNAME</code>为pythonanywhere账号</li><li><code>PASSWORD</code>为<code>Database</code>详情页设置的数据库密码</li><li><code>HOST</code>为<code>Database</code>详情页上的<code>Database host address</code></li><li><code>DATABASE</code>为<code>Database</code>详情页上 <code>create a database</code>的数据库名,但pythonanywhere会自动给你加上前缀<code>&lt;username&gt;$&lt;database_name&gt;</code>,所以我这边就是<code>nymrli$restaurant</code></li><li><code>PORT</code>默认还是<code>3306</code></li></ul><h4 id="附上官方文档"><a href="#附上官方文档" class="headerlink" title="附上官方文档:"></a>附上官方文档:</h4><p>配置说明:</p><blockquote><p>开始使用MySQL,您需要去在仪表板的MySQL选项卡,并设置一个密码。你也会找到连接设置选项卡(主机名、用户名),以及创建新的数据库的能力。 　　 　　</p><p>你可以开始一个新的MySQL控制台访问数据库从这个选项卡,或者您可以打开一个MySQL从bash shell使用以下命令控制台或ssh会话:</p></blockquote><p><code>mysql -u USERNAME -h HOSTNAME -p &#39;USERNAME$DATABASENAME&#39;</code></p><ul><li><a href="https://help.pythonanywhere.com/pages/UsingMySQL/" target="_blank" rel="noopener"><a href="https://help.pythonanywhere.com/pages/UsingMySQL/" target="_blank" rel="noopener">Using MySQL</a></a></li></ul><h5 id="通过SSH链接-据说免费账户不支持"><a href="#通过SSH链接-据说免费账户不支持" class="headerlink" title="通过SSH链接,据说免费账户不支持:"></a>通过SSH链接,据说免费账户不支持:</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SettingValue</span><br><span class="line">SSH Hostname:ssh.pythonanywhere.com</span><br><span class="line">SSH Username:your PythonAnywhere username</span><br><span class="line">SSH Password:the password you use <span class="keyword">to</span> log <span class="keyword">in</span> <span class="keyword">to</span> the PythonAnywhere website</span><br><span class="line">SSH Key file:should <span class="keyword">not</span> be necessary when you specify the password</span><br><span class="line">MySQL Hostname:your PythonAnywhere database hostname, eg. yourusername.mysql.pythonanywhere-services.com</span><br><span class="line">MySQL<span class="built_in"> Server </span>Port:3306</span><br><span class="line">Username:your PythonAnywhere username</span><br><span class="line">Password:your PythonAnywhere database password</span><br><span class="line">Default Schema:your database name, eg yourusername<span class="variable">$mydatabase</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://help.pythonanywhere.com/pages/AccessingMySQLFromOutsidePythonAnywhere/" target="_blank" rel="noopener">Accessing your MySQL database from outside PythonAnywhere</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Pythonanywhere解决链接Mysql问题-部署flask&quot;&gt;&lt;a href=&quot;#Pythonanywhere解决链接Mysql问题-部署flask&quot; class=&quot;headerlink&quot; title=&quot;Pythonanywhere解决链接Mysql问题(
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="MySQL" scheme="https://nymrli.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>写爬虫过程中碰到的编码问题</title>
    <link href="https://nymrli.top/2018/11/08/%E5%86%99%E7%88%AC%E8%99%AB%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%A2%B0%E5%88%B0%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>https://nymrli.top/2018/11/08/写爬虫过程中碰到的编码问题/</id>
    <published>2018-11-08T04:23:19.000Z</published>
    <updated>2018-11-20T09:45:34.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写爬虫过程中碰到的编码问题"><a href="#写爬虫过程中碰到的编码问题" class="headerlink" title="写爬虫过程中碰到的编码问题"></a>写爬虫过程中碰到的编码问题</h2><h4 id="遇到-‘-uxxxx-‘-的16进制字符串编解码问题，使用unicode-escape解决之。"><a href="#遇到-‘-uxxxx-‘-的16进制字符串编解码问题，使用unicode-escape解决之。" class="headerlink" title="遇到 ‘ \uxxxx ‘ 的16进制字符串编解码问题，使用unicode-escape解决之。"></a>遇到 ‘ \uxxxx ‘ 的16进制字符串编解码问题，使用<code>unicode-escape</code>解决之。</h4><p>实际上，在将unicode存储到文本的过程中，还有一种存储方式，不需要将unicode转换为实际的文本存储字符集，而是将unicode的内存编码值进行存储，读取文件的时候再反向转换回来，是采用：unicode-escape的转换方式。 </p><blockquote><p><strong>将unicode的内存编码值进行存储，读取文件时在反向转换回来。这里就采用了unicode-escape的方式</strong>  </p></blockquote><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(u'中文测试'.encode('utf-8'))</span><br><span class="line">print('中文测试'.encode('utf-8'))</span><br><span class="line">print(u'中文测试'.encode('unicode-escape'))</span><br><span class="line">print('中文测试'.encode('unicode-escape'))</span><br><span class="line">==&gt;b'<span class="symbol">\x</span>e4<span class="symbol">\x</span>b8<span class="symbol">\x</span>ad<span class="symbol">\x</span>e6<span class="symbol">\x</span>96<span class="symbol">\x</span>87<span class="symbol">\x</span>e6<span class="symbol">\x</span>b5<span class="symbol">\x</span>8b<span class="symbol">\x</span>e8<span class="symbol">\x</span>af<span class="symbol">\x</span>95'</span><br><span class="line">==&gt;b'<span class="symbol">\x</span>e4<span class="symbol">\x</span>b8<span class="symbol">\x</span>ad<span class="symbol">\x</span>e6<span class="symbol">\x</span>96<span class="symbol">\x</span>87<span class="symbol">\x</span>e6<span class="symbol">\x</span>b5<span class="symbol">\x</span>8b<span class="symbol">\x</span>e8<span class="symbol">\x</span>af<span class="symbol">\x</span>95'</span><br><span class="line">==&gt;b'<span class="symbol">\\</span>u4e2d<span class="symbol">\\</span>u6587<span class="symbol">\\</span>u6d4b<span class="symbol">\\</span>u8bd5'</span><br><span class="line">==&gt;b'<span class="symbol">\\</span>u4e2d<span class="symbol">\\</span>u6587<span class="symbol">\\</span>u6d4b<span class="symbol">\\</span>u8bd5'</span><br></pre></td></tr></table></figure><hr><blockquote><p>ASCII码只有128个字符，符合英文，一个英文字符只用1个字节(最高位恒为0)</p></blockquote><blockquote><p>ANSI：面向中文编码的GBK、GB2312是ANSI码的一种，ANSI码是对ASCII的拓展，所以一个英文只用一个字节，而中文需要拓展ASCII，所以用到两个字节。  0x80~0xFFFF =&gt;2**16</p></blockquote><blockquote><p>Unicode编码:为了解决不同国家ANSI编码的冲突问题，最常用的是用<strong>两个字节</strong>表示一个字符 。但是这样的话，原本可以用一个字节存储的英文字母在Unicode里面必须存两个字节，这就产生了浪费。那么有没有一种既能消除乱码，又能避免浪费的编码方式呢？===&gt;答案就是UTF-8 。000000 -10FFFF </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; UNICODE 的范围是 <span class="number">0x0000</span> - <span class="number">0xFFFF</span> 共<span class="number">6</span>万多个字符，其中光汉字就占用了<span class="number">4</span>万多个</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>UTF-8编码：当字符在ASCII码的范围时，就用一个字节表示 ，所以英文字符也只用一个字节，▲值得注意的是unicode编码中一个中文字符占2个字节，而UTF-8一个中文字符占3个字节。从unicode到uft-8并不是直接的对应，而是要过一些算法和规则来转换。utf-8长度是1-6个字节 （可变的）</strong></p></blockquote><table><thead><tr><th><strong>Unicode编码(十六进制)</strong></th><th><strong>UTF-8 字节流(二进制)</strong></th></tr></thead><tbody><tr><td>000000-00007F</td><td>0xxxxxxx</td></tr><tr><td>000080-0007FF</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>000800-00FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>010000-10FFFF</td><td>11110xxx 10xxxxxx 10xxxxxx10xxxxxx</td></tr></tbody></table><p>超出10FFFF后，UTF-8与Unicode不再对应</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><blockquote><p>UTF-8 vs GBK：</p><p>UTF-8版本虽然具有良好的国际兼容性，但中文需要比GBK/BIG5版本多占用50%的数据库存储空间，因此并非推荐使用，仅供对国际兼容性有特殊要求的用户使用。简单地说：对于中文较多的网站，适宜用GBK编码节省数据库空间。对于英文较多的网站，适宜用UTF-8节省数据库空间。</p></blockquote><p><strong><a href="https://blog.csdn.net/xiangxianghehe/article/details/77574965" target="_blank" rel="noopener"> 字符编码ANSI和ASCII区别、Unicode和UTF-8区别 </a></strong></p><h3 id="Python中编码问题"><a href="#Python中编码问题" class="headerlink" title="Python中编码问题"></a>Python中编码问题</h3><hr><p>在python中，unicode是内存编码集，一般我们将数据存储到文件时，需要将数据先编码为其他编码集，比如utf-8、gbk等。</p><p>读取数据的时候再通过同样的编码集进行解码即可。</p><p>但是其实还有一种unicode-escape编码集，他是将unicode内存编码值直接存储： </p><blockquote><p>在使用python3的requests模块时，发现获取响应有两种方式</p><ul><li>其一，为文本响应内容, r.text是Unicode的响应内容 </li><li>其二，为二进制响应内容，r.content是二进制的响应内容 </li></ul></blockquote><hr><p>Python2 的编码问题一直非常让人恼火，不过你的问题稍微简单一些。<br>在交互式命令模式(Interactive shell)下，可以这样来明白你遇到的问题的根源： </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import sys </span><br><span class="line">sys<span class="selector-class">.stdout</span><span class="selector-class">.encoding</span> </span><br><span class="line">在 Windows 下，如果你的系统是简体中文，一般输出会是 cp936 </span><br><span class="line"></span><br><span class="line">import codecs </span><br><span class="line">codecs.lookup(<span class="string">'cp936'</span>)<span class="selector-class">.name</span> </span><br><span class="line"><span class="string">'gbk'</span></span><br></pre></td></tr></table></figure><blockquote><p>这就是在 Windows 终端里面使用的编码。在 print 的时候，无论字符串源采取什么样的编码，最终输出的字符串的编码必须跟 shell 的编码一致，也就是说:<br>print some_string<br>Python 会做这样一个动作：<br>codecs.encode(some_string, coding, errors=’strict’)<br>在你遇到的情况下，some_string 是一个 unicode 字符串，coding 是 gbk。由于你的 unicode 字符串里面包含 gbk 字符集里面没有的字符，Python 就会抛出一个 UnicodeEncodeError. </p></blockquote><p>对于输出到文件中情况是类似的，Python2 的 open() 函数不会传入 encoding，以 ‘w’ 方式打开文件，如果写入 unicode 字符串，Python 会获取当前默认的编码，然后以此种编码把字符串写入文件。可惜的是，“默认编码”只是 Python 自己默认的，在 Objects/unicodeobject.c 中，用一个全局变量 unicode_default_encoding 来表示默认的编码： </p><blockquote><p>/* Default encoding to use and assume when NULL is passed as encoding<br>    parameter; it is initialized by _PyUnicode_Init(). </p><p>​    Always use the PyUnicode_SetDefaultEncoding() and<br>​    PyUnicode_GetDefaultEncoding() APIs to access this global. </p></blockquote><p><code>static char unicode_default_encoding[100 + 1] = &quot;ascii&quot;;</code><br>这个值在 Python 中有C接口（PyUnicode_SetDefaultEncoding）去改变，但可惜的是没有 Python 层的接口。<br>所以在调用到类似 file.write(some_string) 的时候，首先会有这样的编码过程:<br>codecs.encode(some_string, coding, errors=’restrict’)<br>当你的 some_string 是一个 unicode 字符串，并且包含 ascii 字符串不存在的字符时，就会抛出一个 UnicodeEncodeError。 </p><blockquote><p>所以，为了解决这个问题，可以这么处理： </p><p>(1) 在 Windows shell 下面:<br>     &gt;&gt;&gt; print some_string.encode(‘gbk’, errors=’ignore’) # replace 也可，只要不是 restrict<br>(2) 在写入文件时，两种方法：<br>    a. 忽略不存在的字符，同(1)<br>    &gt;&gt;&gt; f = open(filename, ‘w’)<br>    &gt;&gt;&gt; f.write(some_string.encode(‘gbk’, errors=’ignore’)<br>    b. byte 方式写入：<br>    &gt;&gt;&gt; f = open(filename, ‘wb’)<br>    &gt;&gt;&gt; f.write(some_string.encode(‘utf-8’))<br>​    a 会损失字符，b 不会。 </p></blockquote><p>来自<a href="http://www.newsmth.net/nForum/#!article/Python/124657" target="_blank" rel="noopener">http://www.newsmth.net/nForum/#!article/Python/124657</a></p><hr><h3 id="如果CMD命令行是gbk编码的，则输出的utf-8字符有些也显示不了"><a href="#如果CMD命令行是gbk编码的，则输出的utf-8字符有些也显示不了" class="headerlink" title="如果CMD命令行是gbk编码的，则输出的utf-8字符有些也显示不了"></a>如果CMD命令行是gbk编码的，则输出的utf-8字符有些也显示不了</h3><hr><h4 id="Win10-临时修改cmd命令行窗口UTF-8编码"><a href="#Win10-临时修改cmd命令行窗口UTF-8编码" class="headerlink" title="Win10 临时修改cmd命令行窗口UTF-8编码"></a>Win10 临时修改cmd命令行窗口UTF-8编码</h4><blockquote><p>只作用于当前打开的窗口</p><p>进入cmd窗口后，直接执行“chcp 65001”，执行完后，cmd的编码格式就是UTF-8</p></blockquote><p><a href="https://blog.csdn.net/tfs411082561/article/details/78416569" target="_blank" rel="noopener">永远修改</a></p><h4 id="Windows-控制台使用注册表永久修改编码问题"><a href="#Windows-控制台使用注册表永久修改编码问题" class="headerlink" title="Windows 控制台使用注册表永久修改编码问题"></a>Windows 控制台使用注册表永久修改编码问题</h4><h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><p>1.在cmd中输入<code>regedit</code>进入注册表</p><p>2.找到<code>HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe</code></p><p>3.新建一个 DWORD（32位值）,命名为CodePage，值设为65001 </p><p>4.已有CodePage的话，修改它，改为十进制，65001</p><h5 id="方法二：-亲测有效"><a href="#方法二：-亲测有效" class="headerlink" title="方法二：(亲测有效)"></a>方法二：(亲测有效)</h5><p>1.新建一个cmd.reg注册表文件:</p><p>2.内容输入如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe]</span><br><span class="line"><span class="string">"CodePage"</span>=<span class="string">dword:</span><span class="number">0000</span>fde9</span><br><span class="line"><span class="string">"FontFamily"</span>=<span class="string">dword:</span><span class="number">00000036</span></span><br><span class="line"><span class="string">"FontWeight"</span>=<span class="string">dword:</span><span class="number">00000190</span></span><br><span class="line"><span class="string">"FaceName"</span>=<span class="string">"Consolas"</span></span><br><span class="line"><span class="string">"ScreenBufferSize"</span>=<span class="string">dword:</span><span class="number">232900</span>d2</span><br><span class="line"><span class="string">"WindowSize"</span>=<span class="string">dword:</span><span class="number">002</span>b00d2</span><br></pre></td></tr></table></figure><p>3.双击运行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写爬虫过程中碰到的编码问题&quot;&gt;&lt;a href=&quot;#写爬虫过程中碰到的编码问题&quot; class=&quot;headerlink&quot; title=&quot;写爬虫过程中碰到的编码问题&quot;&gt;&lt;/a&gt;写爬虫过程中碰到的编码问题&lt;/h2&gt;&lt;h4 id=&quot;遇到-‘-uxxxx-‘-的16进制字符串
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="爬虫" scheme="https://nymrli.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本基础</title>
    <link href="https://nymrli.top/2018/11/08/Shell%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80/"/>
    <id>https://nymrli.top/2018/11/08/Shell脚本基础/</id>
    <published>2018-11-08T04:19:49.000Z</published>
    <updated>2018-11-08T04:20:26.700Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><h3 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h3><p>打开文本编辑器，新建一个文件，扩展名为sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用php写shell 脚本，扩展名就用php好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#!/usr/bin/php</span></span><br></pre></td></tr></table></figure><p>“#!”是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行。</p><h4 id="作为可执行程序"><a href="#作为可执行程序" class="headerlink" title="作为可执行程序"></a>作为可执行程序</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x <span class="keyword">test</span>.<span class="keyword">sh</span></span><br><span class="line">./<span class="keyword">test</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p>注意，一定要写成./test.sh，而不是test.sh，运行其它二进制的程序也一样，直接写test.sh，linux系统会去PATH里寻找有没有叫test.sh的，而只有/bin, /sbin, /usr/bin，/usr/sbin等在PATH里，你的当前目录通常不在PATH里，所以写成test.sh是会找不到命令的，要用./test.sh告诉系统说，就在当前目录找。</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h5><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"qinjx"</span></span><br><span class="line">▲.变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。</span><br></pre></td></tr></table></figure><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"qinjx"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"I am good at <span class="variable">$&#123;skill&#125;</span>Script"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了，哈哈），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。</p><h5 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">str</span>=<span class="string">'this is a string'</span></span><br></pre></td></tr></table></figure><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</li><li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）</li></ul><h5 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">your_name</span>=<span class="string">'qinjx'</span></span><br><span class="line"><span class="attr">str</span>=<span class="string">"Hello, I know your are \"$your_name\"! \n"</span></span><br></pre></td></tr></table></figure><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><h5 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">your_name</span>=<span class="string">"qinjx"</span></span><br><span class="line"><span class="attribute">greeting</span>=<span class="string">"hello, "</span><span class="variable">$your_name</span><span class="string">" !"</span></span><br><span class="line"><span class="attribute">greeting_1</span>=<span class="string">"hello, <span class="variable">$&#123;your_name&#125;</span> !"</span></span><br><span class="line"></span><br><span class="line">echo <span class="variable">$greeting</span> <span class="variable">$greeting_1</span></span><br></pre></td></tr></table></figure><h5 id="获取字符串长度："><a href="#获取字符串长度：" class="headerlink" title="获取字符串长度："></a>获取字符串长度：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"abcd"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出：4</span></span><br></pre></td></tr></table></figure><h5 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>=<span class="string">"alibaba is a great company"</span></span><br><span class="line">echo $&#123;<span class="built_in">string</span>:<span class="number">1</span>:<span class="number">4</span>&#125; <span class="comment">#输出：liba</span></span><br></pre></td></tr></table></figure><h5 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h5><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>=<span class="string">"alibaba is a great company"</span></span><br><span class="line">echo `<span class="built_in">expr</span> index <span class="string">"$string"</span> <span class="keyword">is</span>`<span class="comment">#输出：3，这个语句的意思是：找出字母i在这名话中的位置，要在linux下运行，mac下会报错</span></span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>和Java、PHP等语言不一样，sh的流程控制不可为空，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">"q"</span>])) &#123;</span></span><br><span class="line"><span class="php">search(q);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php"><span class="comment">//do nothing</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><p>在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else。</p><p>还要注意，sh里的if [ $foo -eq 0 ]，这个方括号跟Java/PHP里if后面的圆括号大不相同，它是一个可执行程序（和ls, grep一样），想不到吧？在CentOS上，它在/usr/bin目录下：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ll /usr/bin/[</span><br><span class="line">-rwxr-xr-x. <span class="number">1</span> root root <span class="number">33408</span> <span class="number">6</span>月  <span class="number">22</span> <span class="number">2012</span> /usr/bin/[</span><br></pre></td></tr></table></figure><p>正因为方括号在这里是一个可执行程序，方括号后面必须加空格，不能写成if [$foo -eq 0]</p><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line">then</span><br><span class="line"><span class="keyword">command</span>1 </span><br><span class="line"><span class="keyword">command</span>2</span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="keyword">command</span>N </span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>写成一行（适用于终端命令提示符）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> `ps -ef | grep ssh`;  <span class="keyword">then</span> <span class="built_in">echo</span> hello; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>末尾的fi就是if倒过来拼写，后面还会遇到类似的</p><h4 id="if-else-1"><a href="#if-else-1" class="headerlink" title="if else"></a>if else</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line">then</span><br><span class="line"><span class="keyword">command</span>1 </span><br><span class="line"><span class="keyword">command</span>2</span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="keyword">command</span>N</span><br><span class="line">else</span><br><span class="line"><span class="keyword">command</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else-if else"></a>if else-if else</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">command1</span><br><span class="line"><span class="keyword">elif</span> condition2</span><br><span class="line">command2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">commandN</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="for-while"><a href="#for-while" class="headerlink" title="for while"></a>for while</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>在开篇的示例里演示过了：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 <span class="string">...</span> itemN</span><br><span class="line">do</span><br><span class="line"><span class="keyword">command</span>1</span><br><span class="line"><span class="keyword">command</span>2</span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="keyword">command</span>N</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>写成一行：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">var</span> <span class="keyword">in</span> item1 item2 ... itemN; <span class="keyword">do</span> command1; command2… done;</span><br></pre></td></tr></table></figure><h4 id="C风格的for"><a href="#C风格的for" class="headerlink" title="C风格的for"></a>C风格的for</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for <span class="comment">(( EXP1; EXP2; EXP3 )</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">comma<span class="symbol">nd1</span></span><br><span class="line">comma<span class="symbol">nd2</span></span><br><span class="line">comma<span class="symbol">nd3</span></span><br><span class="line"><span class="keyword">do</span><span class="symbol">ne</span></span><br></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for (( <span class="comment">; ; ))</span></span><br></pre></td></tr></table></figure><h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">until</span> condition</span><br><span class="line"><span class="built_in">do</span></span><br><span class="line"><span class="keyword">command</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">case <span class="string">"$&#123;opt&#125;"</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">"Install-Puppet-Server"</span> )</span><br><span class="line">install_master <span class="variable">$1</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line"><span class="string">"Install-Puppet-Client"</span> )</span><br><span class="line">install_client <span class="variable">$1</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line"><span class="string">"Config-Puppet-Server"</span> )</span><br><span class="line">config_puppet_master</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line"><span class="string">"Config-Puppet-Client"</span> )</span><br><span class="line">config_puppet_client</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line"><span class="string">"Exit"</span> )</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">* ) echo <span class="string">"Bad option, please choose again"</span></span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break</p><p>学习自：<a href="https://github.com/qinjx/30min_guides/blob/master/shell.md#if-else" target="_blank" rel="noopener">Shell脚本编程30分钟入门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Shell&quot;&gt;&lt;a href=&quot;#Shell&quot; class=&quot;headerlink&quot; title=&quot;Shell&quot;&gt;&lt;/a&gt;Shell&lt;/h3&gt;&lt;h3 id=&quot;编写&quot;&gt;&lt;a href=&quot;#编写&quot; class=&quot;headerlink&quot; title=&quot;编写&quot;&gt;&lt;/a&gt;编
      
    
    </summary>
    
    
      <category term="Shell" scheme="https://nymrli.top/tags/Shell/"/>
    
      <category term="linux" scheme="https://nymrli.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>多媒体Au使用</title>
    <link href="https://nymrli.top/2018/11/08/%E5%A4%9A%E5%AA%92%E4%BD%93Au%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2018/11/08/多媒体Au使用/</id>
    <published>2018-11-08T04:18:47.000Z</published>
    <updated>2018-11-08T04:19:20.150Z</updated>
    
    <content type="html"><![CDATA[<h4 id="AU使用。"><a href="#AU使用。" class="headerlink" title="AU使用。"></a>AU使用。</h4><blockquote><p>留人声、去伴奏</p></blockquote><h4 id="First"><a href="#First" class="headerlink" title="First."></a>First.</h4><p><img src="/2018/11/08/多媒体Au使用/立体声-中置声道提取.jpg" alt="立体声-中置声道提取"></p><p>▲侧边声道电平控制微弱，中置声道电平控制效果强。</p><p><img src="/2018/11/08/多媒体Au使用/立体声-中置声道提取2.jpg" alt="立体声-中置声道提取2"></p><p>▲交叉渗透，越大伴奏声音越不明显</p><h4 id="Second"><a href="#Second" class="headerlink" title="Second."></a>Second.</h4><p><img src="/2018/11/08/多媒体Au使用/图示均衡器.jpg" alt="图示均衡器"></p><p>前面几排调低到满意。（童声高音频率范围为260-880Hz,低音频率范围为196-700Hz,女声高音频率范围为220-1.1KHz,低音频率范围为200-700KHz,男声高音频率范围为160-523KHz低音频率范围为80-358Hz. 国际通信标准制定为300Hz-3400Hz! ）</p><hr><blockquote><p>留伴奏、去人声</p></blockquote><p>···选中所有，菜单栏-收藏夹-移除人声</p><p><img src="/2018/11/08/多媒体Au使用/移除人声.jpg" alt="移除人声"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;AU使用。&quot;&gt;&lt;a href=&quot;#AU使用。&quot; class=&quot;headerlink&quot; title=&quot;AU使用。&quot;&gt;&lt;/a&gt;AU使用。&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;留人声、去伴奏&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;First&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="计算机基础知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Au" scheme="https://nymrli.top/tags/Au/"/>
    
  </entry>
  
  <entry>
    <title>定时执行Python脚本</title>
    <link href="https://nymrli.top/2018/11/07/%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8CPython%E8%84%9A%E6%9C%AC/"/>
    <id>https://nymrli.top/2018/11/07/定时执行Python脚本/</id>
    <published>2018-11-07T09:51:16.000Z</published>
    <updated>2018-11-10T02:44:35.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定时任务执行python脚本"><a href="#定时任务执行python脚本" class="headerlink" title="定时任务执行python脚本"></a>定时任务执行python脚本</h2><h3 id="使用linux的crontab"><a href="#使用linux的crontab" class="headerlink" title="使用linux的crontab"></a>使用linux的crontab</h3><h5 id="1-开启crontab日志。"><a href="#1-开启crontab日志。" class="headerlink" title="1.开启crontab日志。"></a>1.开启crontab日志。</h5><p>crontab默认不开启日志，所以先开启定时任务的日志来查看</p><blockquote><p>修改rsyslog服务，将<code>/etc/rsyslog.d/50-default.conf</code> 文件中的<code>#cron.*</code>前的 <code>#</code>删掉；用<code>service rsyslog restart</code>重启rsyslog服务：</p></blockquote><h5 id="2-写定时任务"><a href="#2-写定时任务" class="headerlink" title="2.写定时任务"></a>2.写定时任务</h5><p>开启本用户的定时任务,即创建以本用户名为文件名的定时任务文件，位置在<code>/var/spool/cron/crontabs/</code>。<code>crontab -e</code></p><p>定时任务语句格式为：<strong>执行周期+命令</strong>，周期有5个域，分别是</p><ul><li>M: 分（0-59） </li><li>H：时（0-23） </li><li>D：天（1-31）</li><li>m: 月（1-12） </li><li>d: 周（0-6）   //0为星期日</li></ul><p>▲每个域不加限制任意的话用*</p><p>所以命令语句就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*/5 * * * * <span class="built_in">cd</span> /home/iris/; python aa.py</span><br><span class="line"><span class="comment">#时间#      #command ; commond</span></span><br></pre></td></tr></table></figure><p>写完后需要重启cron服务:<code>service  cron restart</code></p><h5 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h5><hr><p>常用周期格式:</p><blockquote><ul><li><code>每五分钟执行  */5 * * * *</code></li><li><code>每小时执行       0   * * * *</code></li><li><code>每天执行         0   0 * * *</code></li><li><code>每周执行        0   0 * * 0</code></li><li><code>每月执行        0   0 1 * *</code></li><li><code>每年执行        0   0 1 1 *</code></li></ul></blockquote><blockquote><p><code>5        *       *           *     *     ls</code>         指定每小时的第5分钟执行一次ls命令<br><code>30      5       *           *     *     ls</code>         指定每天的 5:30 执行ls命令<br><code>30      7       8           *     *     ls</code>         指定每月8号的7：30分执行ls命令<br><code>30      5       8           6     *     ls</code>        指定每年的6月8日5：30执行ls命令<br><code>30      5       8           6     *     ls</code>        指定每年的6月8日5：30执行ls命令<br><code>30      6       *           *     0     ls</code>        指定每星期日的6:30执行ls命令<br><code>30      3     10,20     *     *     ls</code>        每月10号及20号的3：30执行ls命令<br><code>25     8-11  *           *     *     ls</code>       每天8-11点的第25分钟执行ls命令<br><code>*/15   *      *           *     *     ls</code>      每15分钟执行一次ls命令<br><code>30      6     */10       *     *     ls</code>       每个月中，每隔10天6:30执行一次ls命令<br><code>22      4       *           *     *     root  run-parts     /etc/cron.daily</code>每天4：22以root身份执行/etc/cron.daily目录中的所有可执行文件，run-parts参数表示，执行后面目录中的所有可执行文件。</p></blockquote><h5 id="Python-project-SeverChan-Nyedu"><a href="#Python-project-SeverChan-Nyedu" class="headerlink" title="~/Python_project/SeverChan_Nyedu"></a>~/Python_project/SeverChan_Nyedu</h5><h3 id="使用python-crontab设置linux定时任务"><a href="#使用python-crontab设置linux定时任务" class="headerlink" title="使用python crontab设置linux定时任务"></a>使用python crontab设置linux定时任务</h3><blockquote><p>通过python 来写 crontab配置</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> crontab <span class="keyword">import</span> CronTab</span><br><span class="line"><span class="comment"># 创建当前用户的crontab，当然也可以创建其他用户的，但得有足够权限</span></span><br><span class="line">my_user_cron = CronTab(user=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># 创建任务</span></span><br><span class="line">job = my_user_cron.new(command=<span class="string">'echo date &gt;&gt; ~/time.log'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置任务执行周期，每两分钟执行一次</span></span><br><span class="line">job.setall(<span class="string">'*/2 * * * *'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然还支持其他更人性化的设置方式，简单列举一些</span></span><br><span class="line">job.minute.during(<span class="number">5</span>,<span class="number">50</span>).every(<span class="number">5</span>)</span><br><span class="line">job.hour.every(<span class="number">4</span>)</span><br><span class="line">job.day.on(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">job.dow.on(<span class="string">'SUN'</span>)</span><br><span class="line">job.dow.on(<span class="string">'SUN'</span>, <span class="string">'FRI'</span>)</span><br><span class="line">job.month.during(<span class="string">'APR'</span>, <span class="string">'NOV'</span>)</span><br><span class="line">job.setall(time(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line">job.setall(date(<span class="number">2000</span>, <span class="number">4</span>, <span class="number">2</span>))</span><br><span class="line">job.setall(datetime(<span class="number">2000</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时可以给任务设置comment，这样就可以根据comment查询，很方便</span></span><br><span class="line">job.set_comment(<span class="string">"time log job"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据comment查询，当时返回值是一个生成器对象，不能直接根据返回值判断任务是否#存在，如果只是判断任务是否存在，可直接遍历my_user_cron.crons</span></span><br><span class="line">iter = my_user_cron.find_comment(<span class="string">'time log job'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时还支持根据command和执行周期查找，基本类似，不再列举</span></span><br><span class="line"><span class="comment"># 任务的disable和enable， 默认enable</span></span><br><span class="line">job.enable(<span class="keyword">False</span>)</span><br><span class="line">job.enable()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后将crontab写入配置文件</span></span><br><span class="line">my_user_cron.write()</span><br></pre></td></tr></table></figure><h3 id="python中的轻量级定时任务调度库：schedule"><a href="#python中的轻量级定时任务调度库：schedule" class="headerlink" title="python中的轻量级定时任务调度库：schedule"></a>python中的轻量级定时任务调度库：schedule</h3><p>提供博客<a href="https://www.cnblogs.com/anpengapple/p/8051923.html" target="_blank" rel="noopener">python中的轻量级定时任务调度库：schedule</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定时任务执行python脚本&quot;&gt;&lt;a href=&quot;#定时任务执行python脚本&quot; class=&quot;headerlink&quot; title=&quot;定时任务执行python脚本&quot;&gt;&lt;/a&gt;定时任务执行python脚本&lt;/h2&gt;&lt;h3 id=&quot;使用linux的crontab&quot;&gt;
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="linux" scheme="https://nymrli.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ServerChan+南邮教务处</title>
    <link href="https://nymrli.top/2018/11/07/ServerChan-%E5%8D%97%E9%82%AE%E6%95%99%E5%8A%A1%E5%A4%84/"/>
    <id>https://nymrli.top/2018/11/07/ServerChan-南邮教务处/</id>
    <published>2018-11-07T09:32:10.000Z</published>
    <updated>2018-11-10T01:57:47.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SeverChan-Nyedu"><a href="#SeverChan-Nyedu" class="headerlink" title="SeverChan_Nyedu"></a>SeverChan_Nyedu</h1><p>Crawl the infomation about competitons, when new infos comes, remind people on Wechat by ServerChan:</p><p>😍该程序通过爬取<a href="http://jwc.njupt.edu.cn/1594/list.htm" target="_blank" rel="noopener">南邮教务处</a>,将当前时间与最新时间进行匹配,如果是当日则通过ServerChan发送到本人的微信,提醒有新的竞赛.</p><h4 id="完成笔记"><a href="#完成笔记" class="headerlink" title="完成笔记:"></a>完成笔记:</h4><h5 id="1-关于lxml中etree-xpath-对于tbody的处理"><a href="#1-关于lxml中etree-xpath-对于tbody的处理" class="headerlink" title="1.关于lxml中etree.xpath()对于tbody的处理"></a>1.关于<code>lxml</code>中<code>etree.xpath()</code>对于<code>tbody</code>的处理</h5><blockquote><p>该网页通过<code>table</code>对页面进行分布设置,其中<code>table</code>标签会自动生成<code>tbody</code>标签,如图..此时用<code>xpath</code>进行匹配的时候就不需要将<code>tbody</code>加上,否则匹配不到</p></blockquote><p>布局<code>&lt;Table&gt;</code></p><p><img src="https://github.com/Freedomisgood/SeverChan_Nyedu/blob/master/images/Nonetbody.jpg" alt="Nonetbody"></p><p>表格<code>&lt;table&gt;</code></p><p><img src="https://github.com/Freedomisgood/SeverChan_Nyedu/blob/master/images/Table_tbody.jpg" alt="Table_tbody"></p><p>可以看到的是在Chrome调试助手里面,<code>&lt;table&gt;</code>下面都是会自动生成<code>&lt;tbody&gt;</code>标签的<u>(一般<code>tbody</code>是浏览器自动产生的，一般情况要去掉)</u>,而我们再通过<strong>网页源码</strong>看看..==&gt;可以发现的是:</p><p><strong><code>&lt;table&gt;</code>布局是没有<code>&lt;tbody&gt;</code>的,只有表格才有</strong>,所以这也是为什么用xpath()表格里必须加上<code>tbody</code>才能匹配,而<code>table</code>布局中不能加<code>tbody</code>的原因</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#布局获得内容</span></span><br><span class="line"><span class="keyword">for</span> content <span class="keyword">in</span> contentList:</span><br><span class="line">    title = content.xpath(<span class="string">'td/table/tr/td[1]/a/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    href = content.xpath(<span class="string">'td/table/tr/td[1]/a/@href'</span>)[<span class="number">0</span>]</span><br><span class="line">    submittime = content.xpath(<span class="string">'td/table/tr/td[2]/div/text()'</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#表格</span></span><br><span class="line"><span class="keyword">if</span> content.tag == <span class="string">'table'</span>:</span><br><span class="line">    tabletitle = content.xpath(<span class="string">'tbody/tr[1]/td'</span>)  <span class="comment"># 表格头</span></span><br><span class="line">    tabletitleList = map(<span class="keyword">lambda</span> x: x.xpath(<span class="string">'string(.)'</span>), tabletitle)</span><br><span class="line">    tablehead = <span class="string">'|'</span> + <span class="string">'|'</span>.join(tabletitleList) + <span class="string">'|'</span> </span><br><span class="line">    tableover = <span class="string">'|'</span> + <span class="string">':---:|'</span> * len(tabletitle)  <span class="comment"># 居中显示</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/Freedomisgood/SeverChan_Nyedu/blob/master/images/real_code.jpg" alt="real_code"></p><h5 id="2-requests-get-获得的response的编码问题"><a href="#2-requests-get-获得的response的编码问题" class="headerlink" title="2.requests.get()获得的response的编码问题"></a>2.<code>requests.get()</code>获得的response的编码问题</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html = requests.get(<span class="string">'http://jwc.njupt.edu.cn/1594/list.htm'</span>,headers = headers)</span><br><span class="line">html.encoding = <span class="string">'utf-8'</span></span><br><span class="line"><span class="comment">#Requests库的自身编码为: r.encoding = ‘ISO-8859-1’</span></span><br></pre></td></tr></table></figure><p>Github地址:<a href="https://github.com/Freedomisgood/SeverChan_Nyedu" target="_blank" rel="noopener">Freedomisgood/<strong>SeverChan_Nyedu</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SeverChan-Nyedu&quot;&gt;&lt;a href=&quot;#SeverChan-Nyedu&quot; class=&quot;headerlink&quot; title=&quot;SeverChan_Nyedu&quot;&gt;&lt;/a&gt;SeverChan_Nyedu&lt;/h1&gt;&lt;p&gt;Crawl the infomati
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="爬虫" scheme="https://nymrli.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>高科GSWIFI江苏破解教程</title>
    <link href="https://nymrli.top/2018/11/04/%E9%AB%98%E7%A7%91GSWIFI%E6%B1%9F%E8%8B%8F%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/"/>
    <id>https://nymrli.top/2018/11/04/高科GSWIFI江苏破解教程/</id>
    <published>2018-11-04T02:06:34.000Z</published>
    <updated>2018-11-04T04:01:07.235Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-重置路由器设置"><a href="#1-重置路由器设置" class="headerlink" title="1.重置路由器设置"></a>1.重置路由器设置</h4><blockquote><p>为了以防之前其他人已经设置过某些东西,可能会影响到之后的使用，所以干脆直接重置。</p></blockquote><h4 id="2-连接路由器电源-不用插任何的wan口或者lan口"><a href="#2-连接路由器电源-不用插任何的wan口或者lan口" class="headerlink" title="2.连接路由器电源,不用插任何的wan口或者lan口"></a>2.连接路由器电源,不用插任何的wan口或者lan口</h4><blockquote><p>P.S.如果第二步,手机和电脑无法直接通过IP地址进入管理界面的话,可以考虑将 网线一头插入2号口,一头插入电脑的插口 , 然后再通过IP地址进入管理界面</p></blockquote><h4 id="3-登录路由器管理界面"><a href="#3-登录路由器管理界面" class="headerlink" title="3.登录路由器管理界面"></a>3.登录路由器管理界面</h4><p>▲注意： 大多数路由器的管理界面IP地址为 <code>192.168.1.1</code>或者<code>192.168.100.1</code>,虽然高科路由器后面贴纸上说明的IP地址是<code>192.168.8.1</code>,但是那个不是初始的IP,需要自己设置到<code>192.168.8.1</code>.</p><p>如下是我已经修改好的IP为<code>192.168.8.1</code>的登录界面,默认密码为<code>admin</code>,登录后选择<strong>不保存密码</strong></p><p><img src="/2018/11/04/高科GSWIFI江苏破解教程/1.jpg" alt="1"></p><h4 id="4-进入管理界面后先观察"><a href="#4-进入管理界面后先观察" class="headerlink" title="4.进入管理界面后先观察"></a>4.进入管理界面后先观察</h4><ul><li><p>首先是要观察软件版本与 GSWIFI 公众号中的最新能用的版本进行匹配,如果是一样的话就不需要升级<em>系统固件</em>,如果当前软件版本比较低就可能无法使用.</p></li><li><p>其次,由于没接网线,所以<strong>网线状态</strong>是<u>WAN口未连接</u></p></li></ul><p><img src="/2018/11/04/高科GSWIFI江苏破解教程/2.jpg" alt="IMG_20181103_194258"></p><h4 id="5-修改配置"><a href="#5-修改配置" class="headerlink" title="5.修改配置"></a>5.修改配置</h4><h5 id="修改WAN口设置"><a href="#修改WAN口设置" class="headerlink" title="修改WAN口设置"></a>修改WAN口设置</h5><p><img src="/2018/11/04/高科GSWIFI江苏破解教程/3.jpg" alt="3"></p><h5 id="如何查看手机MAC地址说明"><a href="#如何查看手机MAC地址说明" class="headerlink" title="如何查看手机MAC地址说明:"></a>如何查看手机MAC地址说明:</h5><p>由于我使用的是英文系统…可能手机界面有点不同</p><p>1<strong>.进入WLAN</strong></p><p><img src="/2018/11/04/高科GSWIFI江苏破解教程/5.png" alt="5"></p><p>2.<strong>进入更多设置</strong></p><blockquote><p>最下面的<code>MAC address</code>就是</p></blockquote><p><img src="/2018/11/04/高科GSWIFI江苏破解教程/4.png" alt="4"></p><h4 id="6-WIFI设置2-4G"><a href="#6-WIFI设置2-4G" class="headerlink" title="6.WIFI设置2.4G"></a>6.WIFI设置2.4G</h4><p><img src="/2018/11/04/高科GSWIFI江苏破解教程/6.jpg" alt="6"></p><h4 id="7-LAN口设置"><a href="#7-LAN口设置" class="headerlink" title="7.LAN口设置"></a>7.LAN口设置</h4><p><img src="/2018/11/04/高科GSWIFI江苏破解教程/7.jpg" alt="7"></p><p>该步之后,等30s配置完成后,你会无法进入<code>192.168.1.1</code>,页面也会无响应,此时访问<code>192.168.8.1</code>重进管理界面</p><h4 id="8-开始连接网线-查看网线状态"><a href="#8-开始连接网线-查看网线状态" class="headerlink" title="8.开始连接网线(查看网线状态)"></a>8.开始连接网线(查看网线状态)</h4><p>▲▲.由于该路由器的WAN口被商家调到了<code>3号LAN口</code>,我也被这步坑了挺久..所以上述步骤都完成以后,将网线插入路由器的<code>3号LAN口</code>,再登录管理界面,此时应该就能看到这样的界面了</p><p><img src="/2018/11/04/高科GSWIFI江苏破解教程/8.jpg" alt="8"></p><p>能够正常显示这几个,则路由器已设置完成.</p><h4 id="9-使用GSWIFI小助手对路由器再次设置"><a href="#9-使用GSWIFI小助手对路由器再次设置" class="headerlink" title="9.使用GSWIFI小助手对路由器再次设置"></a>9.使用GSWIFI小助手对路由器再次设置</h4><blockquote><p>▲注意,使用客服提供的APP,网盘链接在附录中</p></blockquote><p><img src="/2018/11/04/高科GSWIFI江苏破解教程/9.jpg" alt="9"></p><p><strong>按照我们的教程来,IP地址填为<code>192.168.8.1</code></strong>,然后按下”<strong>开始联网</strong>“,之后会有4步,这个过程中WIFI会不断的掉线,需要自己不断重连自己的WIFI(“<strong>Hello</strong>“),等到4步完成后就可以开始用<strong>掌上大学</strong>连上WIFI后<strong>一键上网</strong>了</p><h5 id="完成图如下"><a href="#完成图如下" class="headerlink" title="完成图如下"></a>完成图如下</h5><p><img src="/2018/11/04/高科GSWIFI江苏破解教程/10.png" alt="10"></p><h4 id="10-使用掌上大学一键上网"><a href="#10-使用掌上大学一键上网" class="headerlink" title="10.使用掌上大学一键上网"></a>10.使用掌上大学<strong>一键上网</strong></h4><hr><p>教程到此就结束了,按照上述步骤应该就能完成高科GSWIFI路由器的破解上网了…</p><h4 id="附录"><a href="#附录" class="headerlink" title="附录:"></a>附录:</h4><h5 id="GSWIFI小助手江苏版"><a href="#GSWIFI小助手江苏版" class="headerlink" title="GSWIFI小助手江苏版:"></a>GSWIFI小助手江苏版:</h5><p>网盘:<a href="https://pan.baidu.com/share/init?surl=vwza9BJd9kjjMKH6f3ek3g" target="_blank" rel="noopener">https://pan.baidu.com/share/init?surl=vwza9BJd9kjjMKH6f3ek3g</a> 提取码:svdg</p><h5 id="更新系统固件"><a href="#更新系统固件" class="headerlink" title="更新系统固件"></a>更新系统固件</h5><p>找到GSWIFI公众号:  选择<code>系统升级</code> 然后查看<code>升级教程</code> 和 <code>1082正式版系统</code>(目前最新的系统固件)，然后根据里面提供的网盘将文件下载下来</p><blockquote><p>下载后===&gt;解压===&gt;进入管理界面===&gt;系统升级===&gt;选择文件===&gt;刷写固件===&gt;执行（其中过程千万不能关闭电源或是乱动，就算按错了，等2-3分钟好了以后再重新刷写也无妨，但是千万不能断电源）</p></blockquote><p><img src="/2018/11/04/高科GSWIFI江苏破解教程/11.jpg" alt="11"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-重置路由器设置&quot;&gt;&lt;a href=&quot;#1-重置路由器设置&quot; class=&quot;headerlink&quot; title=&quot;1.重置路由器设置&quot;&gt;&lt;/a&gt;1.重置路由器设置&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;为了以防之前其他人已经设置过某些东西,可能会影响到之后的使
      
    
    </summary>
    
    
      <category term="生活福利" scheme="https://nymrli.top/tags/%E7%94%9F%E6%B4%BB%E7%A6%8F%E5%88%A9/"/>
    
  </entry>
  
  <entry>
    <title>WSGI uWSGI uwsgi及nginx说明</title>
    <link href="https://nymrli.top/2018/11/02/WSGI-uWSGI-uwsgi%E5%8F%8Anginx%E8%AF%B4%E6%98%8E/"/>
    <id>https://nymrli.top/2018/11/02/WSGI-uWSGI-uwsgi及nginx说明/</id>
    <published>2018-11-02T07:50:12.000Z</published>
    <updated>2018-11-02T08:16:15.520Z</updated>
    
    <content type="html"><![CDATA[<h4 id="客户端发出请求-gt-服务器接受、处理请求与响应-的过程示意图"><a href="#客户端发出请求-gt-服务器接受、处理请求与响应-的过程示意图" class="headerlink" title="客户端发出请求==&gt;服务器接受、处理请求与响应 的过程示意图"></a>客户端发出请求==&gt;服务器接受、处理请求与响应 的过程示意图</h4><p><img src="/2018/11/02/WSGI-uWSGI-uwsgi及nginx说明/过程.png" alt="过程"></p><h4 id="1-WSGI："><a href="#1-WSGI：" class="headerlink" title="1. WSGI："></a>1. <strong>WSGI：</strong></h4><blockquote><p>全称是<code>Web Server Gateway Interface(服务器网关接口)</code>。<code>WSGI</code>不是服务器，<code>python</code>模块，框架，<code>API</code>或者任何软件，只是一种规范( 是一个<strong>Web服务器（如nginx）</strong>与<strong>应用服务器（如uWSGI）</strong>通信的一种规范（协议）==&gt; 可以理解为服务器与应用程序通信的接口规范要求)，描述<code>web server</code>如何与<code>web application</code>通信的规范。<code>server</code>和<code>application</code>的规范在<a href="https://link.jianshu.com/?t=https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="noopener">PEP 3333</a>中有具体描述。因为WSGI没有官方的实现, 所以WSGI更像一个协议，只要遵照这些协议，都可以在任何服务器(Server)上运行</p></blockquote><h4 id="2-uwsgi："><a href="#2-uwsgi：" class="headerlink" title="2.uwsgi："></a>2.<strong>uwsgi：</strong></h4><blockquote><p>与<code>WSGI</code>一样是一种通信协议，是<code>uWSGI</code>服务器的独占协议，用于定义传输信息的类型(<code>type of information</code>)，每一个<code>uwsgi packet</code>前<code>4byte</code>为传输信息类型的描述，与WSGI协议是两种不同的协议。该协议据说性能非常高，是<code>fcgi</code>协议的10倍快;而且内存占用率低，为<code>mod_wsgi</code>的一半左右，同时它还支持多应用的管理及应用的性能监控</p></blockquote><h4 id="3-uWSGI："><a href="#3-uWSGI：" class="headerlink" title="3.uWSGI："></a>3.<strong>uWSGI：</strong></h4><blockquote><p>是一个<code>web</code>服务器，而且也可以当做中间件。它实现了<code>WSGI</code>协议、<code>uwsgi</code>协议、<code>http</code>协议等。在生产环境中使用uWSGI作为python web的服务器,可以用来托管 Python WSGI应用。它具有应用服务器，代理，进程管理及应用监控等功能(但可以把看作是一个应用程序，帮助我们实现WSGI协议)，这样我们可以不再关注网络通信的底层实现，将精力更多放在处理HTTP请求数据，返回HTML。</p></blockquote><h4 id="4-uWSGI-nginx"><a href="#4-uWSGI-nginx" class="headerlink" title="4.uWSGI+nginx"></a>4.uWSGI+nginx</h4><blockquote><p>综上所述可以看出uWSGI可以直接当做服务器，而为了<strong>进一步的并发提升</strong>就需要加上nginx(<strong>提高负载均衡</strong>) </p><p>▲.当uWSGI+nginx使用时，nginx作为web服务器，而uWSGI作为中间件(这边不一定正确,个人理解)</p></blockquote><h5 id="uWSGI不足的地方"><a href="#uWSGI不足的地方" class="headerlink" title="uWSGI不足的地方:"></a>uWSGI不足的地方:</h5><ul><li><p>uWIGS也可以返回静态文件(css,js,img…)，但是很笨拙，所以更好的做法是用反向代理服务器（比如Nginx）来处理此类请求，减轻应用服务器的负载，获得更好的性能。</p><ul><li>利用uWIGS可以是我们的web应用得到更强的并发能力，uWIGS也可以返回静态文件(css,js,img…)，但是很笨拙，一般静态文件都交由Nginx进行传输，所以配置中一般不配置static-map,如果直接由uWIGS接受HTTP请求则需要设置http:xxxx，如果只需要与反向代理服务器进行交互则只需要接受socket，uWIGS与Nginx交互相当于两个进程间交互，一般使用的是.sock文件或者指定端口接受socket。指定端口时再使用浏览器访问相应端口，uWIGS会提示skip，跳过该HTTP请求。</li></ul></li><li><p>同时还有的是uWSGI本身的负载均衡没有nginx牛逼。所以阉割掉不用。</p></li></ul><h4 id="5-Nginx是一个Http和反向代理服务器"><a href="#5-Nginx是一个Http和反向代理服务器" class="headerlink" title="5.Nginx是一个Http和反向代理服务器"></a>5.Nginx是一个Http和反向代理服务器</h4><blockquote><p>什么是反向代理服务器呢？</p></blockquote><p>▲正向的就是由浏览器主动的想代理服务器发出请求，经代理服务器做出处理后再转给目标服务器<br>▲反向的就是不管浏览器同不同意，请求都会经过代理服务器处理再发给目标服务器</p><p>这其中的区别就是必须经过Nginx反向代理服务器，这就有了使用Nginx的几个好处：</p><ul><li>安全：不管什么请求都要经过代理服务器，这样就避免了外部程序直接攻击web服务器</li><li><p>负载均衡：根据请求情况和服务器负载情况，将请求分配给不同的web服务器，保证服务器性能</p></li><li><p>提高web服务器的IO性能：这个我也没看懂，总结来说就是请求从客户端传到web服务器是需要时间的，传递多长时间就会让这个进程阻塞多长时间，而通过反向代理，就可以在反向代理这完整接受请求，然后再传给web服务器，从而保证服务器性能，而且有的一些简单的事情（比如静态文件）可以直接由反向代理处理，不经过web服务器</p></li></ul><p><img src="/2018/11/02/WSGI-uWSGI-uwsgi及nginx说明/nginx.png" alt="nginx"></p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="/2018/11/02/WSGI-uWSGI-uwsgi及nginx说明/总结.jpg" alt="总结"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;客户端发出请求-gt-服务器接受、处理请求与响应-的过程示意图&quot;&gt;&lt;a href=&quot;#客户端发出请求-gt-服务器接受、处理请求与响应-的过程示意图&quot; class=&quot;headerlink&quot; title=&quot;客户端发出请求==&amp;gt;服务器接受、处理请求与响应 的过程
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="后端" scheme="https://nymrli.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="计算机网络知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>apt-get update无法连接</title>
    <link href="https://nymrli.top/2018/11/02/apt-get-update%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/"/>
    <id>https://nymrli.top/2018/11/02/apt-get-update无法连接/</id>
    <published>2018-11-02T05:21:45.000Z</published>
    <updated>2018-11-02T05:44:44.227Z</updated>
    
    <content type="html"><![CDATA[<h4 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h4><p>原因是在apt-get update时遇到了Unable to connect to 代理，（由于<code>apt-get update</code>一直显示无法连接<code>172.17.18.141</code>百度后发现这并不是个特殊的IP,而且也可以ping到百度）于是想到是否使用了代理。</p><p><img src="/2018/11/02/apt-get-update无法连接/hexo\source\_posts\apt-get-update无法连接\1.jpg" alt="1"></p><p><img src="/2018/11/02/apt-get-update无法连接/1.jpg" alt="1"></p><p><img src="/2018/11/02/apt-get-update无法连接/2.jpg" alt="2"></p><h3 id="apt代理的设置："><a href="#apt代理的设置：" class="headerlink" title="apt代理的设置："></a>apt代理的设置：</h3><h4 id="临时方法"><a href="#临时方法" class="headerlink" title="临时方法"></a>临时方法</h4><p><code>export http_proxy=http://10.3.0.1:80</code></p><h4 id="长久方法"><a href="#长久方法" class="headerlink" title="长久方法"></a>长久方法</h4><p>(1) 需要在/etc/apt/apt.conf中添加以下代码： (如果您希望apt-get(而不是其他应用程序)一直使用http代理,您可以使用这种方式。)</p><p><code>Acquire::http::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p><code>Acquire::ftp::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p><code>Acquire::https::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p>保存apt.conf文件。</p><p>(2)新建一个代理配置文件,在apt-get 时使用配置,15.10可用(针对需要下载的单个不同文件)</p><p>建立文件  <code>vim proxyfile</code></p><p><code>Acquire::http::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p><code>Acquire::ftp::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p><code>Acquire::https::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p>使用时<code>sudo apt-get install  xxx -c proxyfile</code></p><p>(2)在主目录下的.bashrc文件中添加两行。(如果您希望apt-get和其他应用程序如wget等都使用http代理,您可以使用这种方式。 )</p><p>在您的.bashrc文件末尾添加如下内容<br><code>export http_proxy=http://用户名:密码@地址:端口/</code><br><code>export https_proxy=http://用户名:密码@地址:端口/</code></p><p><code>export ftp_proxy=http://用户名:密码@地址:端口/</code></p><hr><p>附上一篇ubuntu设置代理的文章:<a href="https://blog.csdn.net/qq3399013670/article/details/81300497" target="_blank" rel="noopener">ubuntu设置代理</a></p><h3 id="Ubuntu下让终端走SS代理的方法"><a href="#Ubuntu下让终端走SS代理的方法" class="headerlink" title="Ubuntu下让终端走SS代理的方法"></a>Ubuntu下让终端走SS代理的方法</h3><p>Ubuntu下让终端走SS代理需要第三方软件的帮助，即privoxy。<br>privoxy 是非快取式 (non-caching) 的网页代理伺服器，具有进阶的过滤能力，可强化隐私权，还可以修改网页资料、管理 HTTP cookies、去除广告等。</p><h5 id="安装-privoxy"><a href="#安装-privoxy" class="headerlink" title="安装 privoxy"></a>安装 privoxy</h5><p><code>sudo apt-get install privoxy</code></p><p>安装完成后在 /etc/privoxy 目录下可以找到配置文件 config。</p><h5 id="配置-privoxy"><a href="#配置-privoxy" class="headerlink" title="配置 privoxy"></a>配置 privoxy</h5><p>一般地，改配置前应该备份配置。</p><p><code>mv /etc/privoxy/config /etc/privoxy/config.back</code></p><p>然后打开 config 文件，找到<code>listen-address</code>那一行，修改值为 privoxy 监听的地址，一般使用默认。</p><p>然后再找到<code>forward-socks5</code>那一行，去掉注释，值为SS代理监听的地址。</p><p>让终端走SS代理,修改配置后，重启 privoxy。</p><p><code>sudo /etc/init.d/privoxy restart</code></p><p>然后在终端下添加 http 代理。</p><p><code>export http_proxy=”127.0.0.1:8118”</code></p><p><code>export https_proxy=”127.0.0.1:8118”</code></p><p>然后就可以愉快的用终端翻墙了。</p><p>原文：<a href="https://blog.csdn.net/tailgo/article/details/52075643" target="_blank" rel="noopener">https://blog.csdn.net/tailgo/article/details/52075643</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;出现的问题&quot;&gt;&lt;a href=&quot;#出现的问题&quot; class=&quot;headerlink&quot; title=&quot;出现的问题&quot;&gt;&lt;/a&gt;出现的问题&lt;/h4&gt;&lt;p&gt;原因是在apt-get update时遇到了Unable to connect to 代理，（由于&lt;code&gt;apt
      
    
    </summary>
    
    
      <category term="linux" scheme="https://nymrli.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Windows控制台Cmd乱码（及永久修改编码）解决方法</title>
    <link href="https://nymrli.top/2018/10/28/Windows-%E6%8E%A7%E5%88%B6%E5%8F%B0Cmd%E4%B9%B1%E7%A0%81%EF%BC%88%E5%8F%8A%E6%B0%B8%E4%B9%85%E4%BF%AE%E6%94%B9%E7%BC%96%E7%A0%81%EF%BC%89%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://nymrli.top/2018/10/28/Windows-控制台Cmd乱码（及永久修改编码）解决方法/</id>
    <published>2018-10-28T08:42:20.000Z</published>
    <updated>2018-10-28T08:47:00.882Z</updated>
    
    <content type="html"><![CDATA[<p>我本机的系统环境：`OS Name: Microsoft Windows 10 家庭中文版</p><h4 id="Windows-控制台Cmd乱码的解决办法-一次性"><a href="#Windows-控制台Cmd乱码的解决办法-一次性" class="headerlink" title="Windows 控制台Cmd乱码的解决办法(一次性)"></a>Windows 控制台Cmd乱码的解决办法(一次性)</h4><p>在cmd中输入 <code>CHCP 65001</code></p><blockquote><p> 注：CHCP是一个计算机指令，能够显示或设置活动代码页编号。</p><p>代码页  描述</p><ul><li><p>65001   UTF-8代码页</p></li><li><p>950 繁体中文</p></li><li><p>936 简体中文默认的GBK</p></li><li><p>437 MS-DOS 美国英语</p></li></ul></blockquote><p><strong>但是通过CHCP设置编码是治标不治本的,想永久的更改cmd编码值需要修改注册表</strong></p><h4 id="Windows-控制台Cmd乱码的解决办法-永久性"><a href="#Windows-控制台Cmd乱码的解决办法-永久性" class="headerlink" title="Windows 控制台Cmd乱码的解决办法(永久性)"></a>Windows 控制台Cmd乱码的解决办法(永久性)</h4><h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><p>1.在cmd中输入<code>regedit</code>进入注册表</p><p>2.找到<code>HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe</code></p><p>3.新建一个 DWORD（32位值）,命名为CodePage，值设为65001 </p><p>4.已有CodePage的话，修改它，改为十进制，65001</p><h5 id="方法二：-亲测有效"><a href="#方法二：-亲测有效" class="headerlink" title="方法二：(亲测有效)"></a>方法二：(亲测有效)</h5><p>1.新建一个cmd.reg注册表文件:</p><p>2.内容输入如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe]</span><br><span class="line"><span class="string">"CodePage"</span>=<span class="string">dword:</span><span class="number">0000</span>fde9</span><br><span class="line"><span class="string">"FontFamily"</span>=<span class="string">dword:</span><span class="number">00000036</span></span><br><span class="line"><span class="string">"FontWeight"</span>=<span class="string">dword:</span><span class="number">00000190</span></span><br><span class="line"><span class="string">"FaceName"</span>=<span class="string">"Consolas"</span></span><br><span class="line"><span class="string">"ScreenBufferSize"</span>=<span class="string">dword:</span><span class="number">232900</span>d2</span><br><span class="line"><span class="string">"WindowSize"</span>=<span class="string">dword:</span><span class="number">002</span>b00d2</span><br></pre></td></tr></table></figure><p>3.双击运行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我本机的系统环境：`OS Name: Microsoft Windows 10 家庭中文版&lt;/p&gt;
&lt;h4 id=&quot;Windows-控制台Cmd乱码的解决办法-一次性&quot;&gt;&lt;a href=&quot;#Windows-控制台Cmd乱码的解决办法-一次性&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="计算机基础知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>JS正则及常用方法函数总结</title>
    <link href="https://nymrli.top/2018/10/25/JS%E6%AD%A3%E5%88%99%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
    <id>https://nymrli.top/2018/10/25/JS正则及常用方法函数总结/</id>
    <published>2018-10-25T03:55:20.000Z</published>
    <updated>2018-11-13T15:03:03.619Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS正则及常用方法函数总结"><a href="#JS正则及常用方法函数总结" class="headerlink" title="JS正则及常用方法函数总结"></a><a href="https://www.cnblogs.com/myzhibie/p/4365142.html" target="_blank" rel="noopener">JS正则及常用方法函数总结</a></h3><blockquote><p>正则表达式作为一种匹配处理字符串的利器在很多语言中都得到了广泛实现和应用，web开发本质上是处理字符串（服务端接受请求处理后拼接字符串作为响应，这在早期的CGI编程中最明显，然后客户端解析字符串进行渲染和执行），所以说，JS作为一门常用于web开发的语言，必然要具备正则这种强大的特性，本文将对JS中的正则用法及常用函数进行一番总结。</p></blockquote><h4 id="1-正则对象及其属性"><a href="#1-正则对象及其属性" class="headerlink" title="1.正则对象及其属性"></a><strong>1.正则对象及其属性</strong></h4><p>首先正则对象是JS中内置的一个对象，好比Array以及Math一样，不需要第三方库的支持，通常我们采取两种方式来定义一个正则对象.</p><h5 id="1）构造函数方式"><a href="#1）构造函数方式" class="headerlink" title="1）构造函数方式"></a>1）构造函数方式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  reg=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'abc'</span>,<span class="string">'gi'</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里，第一个参数是正则的内容，第二个参数是修饰符，</span></span><br><span class="line"><span class="comment">修饰符通常有三种，i,g,m，i表示的含义是忽略大小写进行匹配，g表示全局匹配即匹配到第一个之后不停止继续匹配，m表示多行匹配即遇到换行后不停止匹配继续直到被匹配字符串结束。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>/i (忽略大小写)</li><li>/g (全文查找出现的所有匹配字符,否则只匹配第一个出现的)</li><li>/m (多行查找)</li><li>/gi(全文查找、忽略大小写)</li><li>/ig(全文查找、忽略大小写)</li></ul></blockquote><h5 id="2）字面量方式"><a href="#2）字面量方式" class="headerlink" title="2）字面量方式"></a>2）字面量方式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  reg=<span class="regexp">/abc/gi</span>;</span><br><span class="line">consolo.dir(reg);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*▲.两个斜杠之间的是定义的正则内容*，最后一个斜杠之后的是修饰符，</span></span><br><span class="line"><span class="comment">这种方式比第一种简单高效，所以通常使用第二种方式来定义正则。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="2-属性"><a href="#2-属性" class="headerlink" title="2.属性"></a><strong>2.属性</strong></h4><p>在控制台中打印一个正则对象如下：</p><p><img src="/2018/10/25/JS正则及常用方法函数总结/1.png" alt="1"></p><ul><li><p><code>global</code>属性，该属性为布尔类型，用来表示该正则是否是全局匹配，</p></li><li><p><code>ignoreCase</code>属性，布尔类型，用来指示是否忽略大小写，</p></li><li><p><code>lastIndex</code>为number类型，用来表示上次匹配成功的位置，</p></li><li><p><code>multiline</code>，布尔类型，用来表示是否是多行匹配，source，string类型，用来表示正则的内容。</p></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex" target="_blank" rel="noopener"><code>lastIndex</code></a> 属性表示的索引处为目标字符串匹配（并且不会尝试从后续索引匹配）,你不能直接更改这个属性，它是只读的。可以通过<code>^</code></li><li><code>unicode</code>标志开启了多种 Unicode 相关的特性。使用 “u” 标志，任何 Unicode 代码点的转义都会被解释。</li></ul><h4 id="3-方法"><a href="#3-方法" class="headerlink" title="3.方法"></a><strong>3.方法</strong></h4><p>通常对于一个正则对象来讲，我们能够使用的方法基本上有三个，即<code>regObj.test</code>,<code>regObj.exec</code>及<code>regObj.compile</code></p><h5 id="1）test方法"><a href="#1）test方法" class="headerlink" title="1）test方法"></a>1）test方法</h5><p>该方法用来测试某个字符串是否与正则匹配，匹配就返回true，否则返回false。该方法接受一个字符串作为参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> reg=<span class="regexp">/boy(s)?\s+and\s+girl(s)?/gi</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(reg.test(<span class="string">'boy    and   girl'</span>));</span><br><span class="line"><span class="comment">//==&gt;true</span></span><br></pre></td></tr></table></figure><h5 id="2-compile方法"><a href="#2-compile方法" class="headerlink" title="2)compile方法"></a>2)compile方法</h5><p>该方法的作用是能够对正则表达式进行编译，被编译过的正则在使用的时候效率会更高，<u>适合于对一个正则对象(模式)多次调用的情况下</u>，如果对一个正则只使用一两次，那么该方法没有特别显著的效应。</p><p>接受的参数也是一个正则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/[abc]/gi</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(reg.test(<span class="string">'a'</span>)); <span class="comment">//==&gt;true</span></span><br><span class="line">    reg=<span class="regexp">/[cde]/gi</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(reg.test(<span class="string">'a'</span>)); <span class="comment">//==&gt;false</span></span><br><span class="line">    reg.compile(reg);</span><br><span class="line">    <span class="built_in">console</span>.log(reg.test(<span class="string">'a'</span>)); <span class="comment">//==&gt;false</span></span><br><span class="line"><span class="comment">//被编译的正则和没有编译的正则在测试结果上没有任何区别，只是多次调用的效率上会更高一些。</span></span><br></pre></td></tr></table></figure><h5 id="3）exec方法"><a href="#3）exec方法" class="headerlink" title="3）exec方法"></a>3）exec方法</h5><p>该方法属于一个比较复杂的方法，它接受一个字符串，返回的是一个数组，数组中第0个元素是匹配的子字符串，第二个元素是正则中的第一个子分组匹配的结果（如果有子分组，即正则中存在用圆括号括起来的分组），第三个是正则中第二个子分组匹配的结果（如果有第二个子分组）…以此类推，如果没有正则子分组，那么该数组长度仅仅为1，就是匹配到的那个子字符串。同时，返回的这个数组同时还是一个对象，它拥有两个属性，分别为index表示当前匹配到的子字符串所处的位置，input属性表示被匹配的原始字符串。最后，该方法中的正则对象如果不是全局匹配，即没有g修饰符，则每次调用只会从字符串开头处匹配第一个结果，且每次调用结果都是一样的。只有指定为全局匹配，才能够按照从左往右依次去匹配，每次调用匹配一个结果，正则对象的lastIndex属性前进到本次匹配的末尾位置，下回再调用的时候，会从lastIndex处开始匹配而不是从头匹配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/(\w)l(\w)/g</span>;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"hello world hello 123 hello programmer hello test"</span>;</span><br><span class="line"><span class="keyword">var</span> arr=reg.exec(str);</span><br><span class="line">    <span class="keyword">while</span>(arr)&#123;</span><br><span class="line">        <span class="built_in">console</span>.dir(arr);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"lastIndex:"</span>+reg.lastIndex);</span><br><span class="line">        arr=reg.exec(str);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2018/10/25/JS正则及常用方法函数总结/2.png" alt="3"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非全局匹配代码：</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/(\w)l(\w)/</span>;</span><br><span class="line">   <span class="keyword">var</span> str=<span class="string">"hello world hello 123 hello programmer hello test"</span>;</span><br><span class="line">   <span class="keyword">var</span> arr=reg.exec(str);</span><br><span class="line">   <span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(arr)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=<span class="number">4</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.dir(arr);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"lastIndex:"</span>+reg.lastIndex);</span><br><span class="line">        arr=reg.exec(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/10/25/JS正则及常用方法函数总结/3.png" alt="3"></p><p>这个时候每次调用的结果都一样，lastIndex根本没有发生变化。</p><p>以上就是正则对象及其方法，其实在使用的过程中，JS中的String类型的对象也拥有一些和正则相关的方法，如下：</p><h4 id="String类型的对象的正则方法"><a href="#String类型的对象的正则方法" class="headerlink" title="String类型的对象的正则方法"></a>String类型的对象的正则方法</h4><h5 id="1）search方法"><a href="#1）search方法" class="headerlink" title="1）search方法"></a><strong>1）search方法</strong></h5><p>该方法是string对象的一个方法，用来<strong>查找第一次匹配的子字符串的位置</strong>，如果找到就返回一个number类型的index值，否则返回-1,它返回的只是第一次匹配的位置。</p><p>它接受一个正则或者子字符串为参数，这里我们只讨论正则的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"hello world"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/o/g</span>));</span><br><span class="line"><span class="comment">//输出结果为4，可以看到尽管具有多个匹配结果而且也声明为全局匹配，但是还是返回的是第一个匹配到的子串的位置；</span></span><br></pre></td></tr></table></figure><h5 id="2）replace方法"><a href="#2）replace方法" class="headerlink" title="2）replace方法"></a><strong>2）replace方法</strong></h5><p>该方法用来<strong>将字符串中的某些子串替换为需要的内容</strong>，接受两个参数，第一个参数可以为正则或者子字符串，表示匹配需要被替换的内容，第二个参数为被替换的新的子字符串。如果声明为全局匹配则会替换所有结果，否则只替换第一个匹配到的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"hello world,hello test"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/hello/g</span>,<span class="string">'hi'</span>));</span><br><span class="line"><span class="comment">//结果为hi world,hi test</span></span><br><span class="line"><span class="comment">//如果将上面代码中的g修饰符去掉，则返回的结果是hi world,hello test</span></span><br></pre></td></tr></table></figure><h5 id="3）split方法"><a href="#3）split方法" class="headerlink" title="3）split方法"></a><strong>3）split方法</strong></h5><p>该方法主要用来<strong>将一个字符串拆分成一个数组</strong>，它接受一个正则或者子字符（串）作为参数，返回一个数组，简单情况下，我们不需要使用正则，只有在字符串拆分规则不统一的情况下才需要使用正则，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"how|old*are    you"</span>;</span><br><span class="line"><span class="keyword">var</span> arr=str.split(<span class="regexp">/\||\*|\s+/</span>);</span><br><span class="line"><span class="comment">// 以|、*、多项空格为分隔符</span></span><br><span class="line"><span class="comment">// \s 匹配任何空白字符,包括空格、制表符、换页符等等</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p>这里需要将str拆分为单词数组，由于每个单词之间存在不一样的分隔符，我们采取正则来匹配，结果如下：</p><p><img src="/2018/10/25/JS正则及常用方法函数总结/4.png" alt="4"></p><h5 id="4）match方法"><a href="#4）match方法" class="headerlink" title="4）match方法"></a><strong>4）match方法</strong></h5><p>该方法接受一个正则作为参数，用来匹配一个字符串，它的输出结果在不是全局匹配的情况下和exec方法的结果一致即一个数组并带有额外的属性，如果采用全局匹配，则不返回任何和其被匹配字符串相关的信息，只返回匹配的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非全局匹配代码：</span></span><br><span class="line"><span class="keyword">var</span> reg2=<span class="regexp">/(\w)s(\w)/</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">"ws1esr"</span>;</span><br><span class="line"><span class="keyword">var</span> result=str2.match(reg2);</span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(result)&#123;</span><br><span class="line">      i++;</span><br><span class="line">      <span class="keyword">if</span>(i&lt;=<span class="number">4</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.dir(result);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"lastIndex:"</span>+reg2.lastIndex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//非全局匹配下，结果和exec非全局匹配方法返回的完全一致，</span></span><br></pre></td></tr></table></figure><p><img src="/2018/10/25/JS正则及常用方法函数总结/5.png" alt="5"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局匹配代码：</span></span><br><span class="line"><span class="keyword">var</span> reg3=<span class="regexp">/(\w)s(\w)/g</span>;</span><br><span class="line"><span class="keyword">var</span> str4=<span class="string">"ws1estqsa"</span>;</span><br><span class="line"><span class="built_in">console</span>.dir(str4.match(reg3));</span><br><span class="line"><span class="comment">//可以看到，在全局匹配下的时候，它不同于exec方法，它会一次性将所有匹配结果以数组形式返回，且这个数组没有其他属性用来指向被匹配字符串的信息，而exec方法在全局匹配下每次返回的依然是本次匹配的结果数组，且这个数组中只包含本次匹配信息，同时又拥有指向被匹配字符串的信息，即match方法在全局匹配下一次性返回了所有匹配结果，而exec在全局匹配下返回的依然是当次匹配结果。</span></span><br></pre></td></tr></table></figure><p><img src="/2018/10/25/JS正则及常用方法函数总结/6.png" alt="6"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JS正则及常用方法函数总结&quot;&gt;&lt;a href=&quot;#JS正则及常用方法函数总结&quot; class=&quot;headerlink&quot; title=&quot;JS正则及常用方法函数总结&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/myzhibie/p/436
      
    
    </summary>
    
    
      <category term="计算机基础知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="前端" scheme="https://nymrli.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://nymrli.top/tags/JavaScript/"/>
    
  </entry>
  
</feed>
