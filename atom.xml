<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mrli&#39;s Blog</title>
  
  <subtitle>别装作很努力，结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2019-11-17T09:48:16.030Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>Mrli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第二十八届“和巨耀通杯”南京邮电大学在线测评系统程序设计邀请赛--NOJ</title>
    <link href="https://nymrli.top/2019/11/17/%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AB%E5%B1%8A%E2%80%9C%E5%92%8C%E5%B7%A8%E8%80%80%E9%80%9A%E6%9D%AF%E2%80%9D%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E5%9C%A8%E7%BA%BF%E6%B5%8B%E8%AF%84%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%82%80%E8%AF%B7%E8%B5%9B-NOJ/"/>
    <id>https://nymrli.top/2019/11/17/第二十八届“和巨耀通杯”南京邮电大学在线测评系统程序设计邀请赛-NOJ/</id>
    <published>2019-11-17T09:43:56.000Z</published>
    <updated>2019-11-17T09:48:16.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二十八届和巨耀通杯南京邮电大学在线测评系统程序设计邀请赛noj"><a class="markdownIt-Anchor" href="#第二十八届和巨耀通杯南京邮电大学在线测评系统程序设计邀请赛noj"></a> 第二十八届“和巨耀通杯”南京邮电大学在线测评系统程序设计邀请赛–NOJ</h1><blockquote><p>三人团队赛， 正好最近在刷PTA， 于是一个人报名尝试了一下。</p><p>一共AC了三题， Rank28</p></blockquote><h2 id="c-battle-game"><a class="markdownIt-Anchor" href="#c-battle-game"></a> <a href="https://acm.njupt.edu.cn/contest/109/board/challenge/C" target="_blank" rel="noopener">C. Battle game</a></h2><blockquote><p>签到题</p></blockquote><p><strong>Description:</strong></p><p>You are playing a game which you will battle with an enemy. As you don’t want to lose, your total power can’t be lower than your enemy’s. Your power is simply added by the power of your soldiers, and all of your soldiers’ power is exactly aa. Now you have known that your enemy’s total power is bb. You want to know how many soldiers you need in order not to lose the battle.</p><p><strong>Input:</strong></p><p>A line with two integers a,ba,b, (1≤a,b≤109)(1≤a,b≤109).</p><p><strong>Output:</strong></p><p>A line with one integer, denotes the minimum number of soldiers you need.</p><p><strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 456</span><br></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; a&gt;&gt; b)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( b%a != <span class="number">0</span>)</span><br><span class="line">            ans= b/a+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//            cout &lt;&lt; b/a+1&lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans = b/a;</span><br><span class="line"><span class="comment">//            cout &lt;&lt; b/a &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="d-gomoku"><a class="markdownIt-Anchor" href="#d-gomoku"></a> <a href="https://acm.njupt.edu.cn/contest/109/board/challenge/D" target="_blank" rel="noopener">D. Gomoku</a></h2><p><strong>Description:</strong></p><p>Alice and Bob are playing a game called <em>Gomoku</em> (a.k.a. <em>Five in a Row</em>). Alice is sente(black, moves first) and Bob is gote(white, moves second). Alice wants to know whether she can win(have five or more consecutive stones of the same color in a diagonal, vertical, or horizontal row) in one step, and now is Alice’s turn. It is guranteed that neither Alice or Bob wins currently. Prohibitions are not considered in this problem.</p><p><strong>Input:</strong></p><p>The first line contains one integer nn, which denotes the size of the board is n×nn×n.</p><p>Next nn lines each has a string of length nn, use <code>@</code> to represent black, <code>O</code> to represent white, <code>+</code> to represent there’s no stone at that position.</p><p><strong>Output:</strong></p><p>If Alice can win in one step, output <code>YES</code>, otherwise output <code>NO</code>.</p><p><strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">+++O+++</span><br><span class="line">+@+@+++</span><br><span class="line">+O@@@++</span><br><span class="line">+++@+++</span><br><span class="line">+++O@++</span><br><span class="line">++OOOO+</span><br><span class="line">+++++++</span><br></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><h3 id="ac代码-2"><a class="markdownIt-Anchor" href="#ac代码-2"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>  maxn = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">+++O+++</span></span><br><span class="line"><span class="comment">+@+@+++</span></span><br><span class="line"><span class="comment">+O@@@++</span></span><br><span class="line"><span class="comment">+++@+++</span></span><br><span class="line"><span class="comment">+++O@++</span></span><br><span class="line"><span class="comment">++OOOO+</span></span><br><span class="line"><span class="comment">+++++++</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> maze[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> can=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dirnum = <span class="number">8</span>;</span><br><span class="line"><span class="comment">// -&gt; , 2, &lt;- , 8,</span></span><br><span class="line"><span class="keyword">int</span> xdir[dirnum] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> ydir[dirnum] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> depth, <span class="keyword">int</span> dir, <span class="keyword">int</span> plustime)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (depth == <span class="number">5</span>)&#123;</span><br><span class="line">        can = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//        cout &lt;&lt; x &lt;&lt; y &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (plustime == <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (maze[x][y] == <span class="string">'O'</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!maze[x][y]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (can == <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> xt = xdir[dir] + x;</span><br><span class="line">        <span class="keyword">int</span> yt = ydir[dir] + y;</span><br><span class="line"><span class="comment">//        cout &lt;&lt; "      x:" &lt;&lt; xt &lt;&lt; " y:"&lt;&lt; yt &lt;&lt;  " " &lt;&lt;  maze[xt][yt] &lt;&lt; "plustime:"&lt;&lt; plustime&lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (maze[xt][yt] == <span class="string">'+'</span> &amp;&amp; plustime==<span class="number">0</span>)&#123;</span><br><span class="line">            maze[xt][yt] = <span class="string">'@'</span>;</span><br><span class="line">            dfs(xt, yt, depth+<span class="number">1</span>, dir, plustime+<span class="number">1</span>);</span><br><span class="line">            maze[xt][yt] = <span class="string">'+'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(maze[xt][yt] == <span class="string">'@'</span> )&#123;</span><br><span class="line">            dfs(xt, yt, depth+<span class="number">1</span>, dir, plustime);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 5- 1e3</span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt;maze[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line"><span class="comment">//        for(int j=1;j&lt;=n;j++)</span></span><br><span class="line"><span class="comment">//            cout &lt;&lt; maze[i][j];</span></span><br><span class="line"><span class="comment">//        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (maze[i][j]== <span class="string">'@'</span>)&#123;</span><br><span class="line"><span class="comment">//                cout &lt;&lt; "test" &lt;&lt; "x:" &lt;&lt; i &lt;&lt; " y:"&lt;&lt; j &lt;&lt; " "&lt;&lt;  maze[i][j]&lt;&lt; endl;</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;dirnum; k++)&#123;</span><br><span class="line">                    <span class="keyword">int</span> xt = xdir[k] + i;</span><br><span class="line">                    <span class="keyword">int</span> yt = ydir[k] + j;</span><br><span class="line">                    <span class="keyword">if</span> (maze[xt][yt]==<span class="string">'@'</span>)</span><br><span class="line"><span class="comment">//                    cout &lt;&lt; "  in " &lt;&lt; "x:" &lt;&lt; xt &lt;&lt; " y:"&lt;&lt; yt &lt;&lt; " "&lt;&lt;  maze[xt][yt]&lt;&lt; endl;</span></span><br><span class="line">                        dfs(xt, yt, <span class="number">2</span>, k, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (maze[xt][yt] == <span class="string">'+'</span>)</span><br><span class="line">                        dfs(xt, yt, <span class="number">2</span>, k, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            else cout &lt;&lt; "new" &lt;&lt; "x:" &lt;&lt; i &lt;&lt; " y:"&lt;&lt; j &lt;&lt; " "&lt;&lt;  maze[i][j]&lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (can) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="g-number"><a class="markdownIt-Anchor" href="#g-number"></a> <a href="https://acm.njupt.edu.cn/contest/109/board/challenge/G" target="_blank" rel="noopener">G. Number</a></h2><blockquote><p>规律题</p></blockquote><p><strong>Description:</strong></p><p>0xfaner just learned the factorial today, and the factorial is defined as follows:x!=1×2×⋯×xx!=1×2×⋯×x</p><p>He found that $10!=362880010!=3628800 $， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mn>0</mn><mo>!</mo><mo>=</mo><mn>2</mn><mn>4</mn><mn>3</mn><mn>2</mn><mn>9</mn><mn>0</mn><mn>2</mn><mn>0</mn><mn>0</mn><mn>8</mn><mn>1</mn><mn>7</mn><mn>6</mn><mn>6</mn><mn>4</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn></mrow><annotation encoding="application/x-tex">20!=2432902008176640000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">0</span><span class="mclose">!</span><span class="mrel">=</span><span class="mord mathrm">2</span><span class="mord mathrm">4</span><span class="mord mathrm">3</span><span class="mord mathrm">2</span><span class="mord mathrm">9</span><span class="mord mathrm">0</span><span class="mord mathrm">2</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">8</span><span class="mord mathrm">1</span><span class="mord mathrm">7</span><span class="mord mathrm">6</span><span class="mord mathrm">6</span><span class="mord mathrm">4</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span></span></span></span> , the number of trailing zeros is increasing.</p><p>Now 0xfaner wants to know the the number of trailing zeros of n!n!to each given nn .</p><p><strong>Input:</strong></p><p>The only line contains one integer nn ( 1≤n≤1091≤n≤109 ).</p><p><strong>Output:</strong></p><p>Print the number of trailing zeros of n!n! .</p><p><strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><p>AC</p><blockquote><p>规律题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">BigInteger res =  <span class="keyword">new</span> BigInteger(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">BigInteger tmp =  <span class="keyword">new</span> BigInteger(String.valueOf(i));</span><br><span class="line">res = res.multiply(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.printf("%s\n",res.bitCount());</span></span><br><span class="line"><span class="comment">//System.out.printf("%s\n",res.bitLength());</span></span><br><span class="line"><span class="comment">//System.out.printf("%d\n",res.byteValue());</span></span><br><span class="line">String s = res.toString();</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=s.length()-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span> (s.charAt(j)==<span class="string">'0'</span>) ans ++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">System.out.printf(<span class="string">"%d"</span>,solve(n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后一直TLE，于是猜测是否有规律</p><h3 id="ac代码-3"><a class="markdownIt-Anchor" href="#ac代码-3"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            ans += n/<span class="number">5</span>;</span><br><span class="line">            n /= <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第二十八届和巨耀通杯南京邮电大学在线测评系统程序设计邀请赛noj&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第二十八届和巨耀通杯南京邮电大学在线测评系统程序设计邀请赛noj&quot;&gt;&lt;/a&gt; 第二十八届“和巨耀通杯”南京邮电大学在线测评系
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="Algorithm" scheme="https://nymrli.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>PAT冲冲冲</title>
    <link href="https://nymrli.top/2019/10/24/PAT%E5%86%B2%E5%86%B2%E5%86%B2/"/>
    <id>https://nymrli.top/2019/10/24/PAT冲冲冲/</id>
    <published>2019-10-24T10:30:45.000Z</published>
    <updated>2019-11-16T03:44:33.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pat冲冲冲"><a class="markdownIt-Anchor" href="#pat冲冲冲"></a> PAT冲冲冲</h1><blockquote><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/type/7?page=1" target="_blank" rel="noopener">PAT甲级练习题 ——PAT (Advanced Level) Practice </a><br><a href="https://www.nowcoder.com/pat/5/problems?page=1" target="_blank" rel="noopener">PAT甲级(Advanced Level)真题</a><br><a href="https://www.liuchuo.net/archives/8091" target="_blank" rel="noopener">柳婼 の blog经验</a><br><a href="https://saquarius.com/2019/08/pat%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">saquarius’s blog</a></p><p><a href="https://blog.csdn.net/a617976080/article/details/89676670" target="_blank" rel="noopener">PAT甲级题目及分类总结</a><br><a href="https://blog.csdn.net/richenyunqi/article/details/79958195" target="_blank" rel="noopener">pat甲级题解目录</a></p></blockquote><p>▲报名费256，可以刷<a href="https://www.nowcoder.com/pat" target="_blank" rel="noopener">牛客网</a>的题来获得-50的优惠券，该练习场下的所有题目只要通过都算</p><h2 id="乙级练习题"><a class="markdownIt-Anchor" href="#乙级练习题"></a> 乙级练习题</h2><h3 id="nowcoder数列"><a class="markdownIt-Anchor" href="#nowcoder数列"></a> <a href="https://www.nowcoder.com/pat/2/problem/250" target="_blank" rel="noopener">NowCoder数列</a></h3><blockquote><p>没想到第二题就是考了个数据范围，由于0≤n≤1000000，所以F(n)必然比long long大，而判断3的倍数可表示为===&gt; F(n) % 3 —&gt; (F(n-1)%3 + F(n-2)%3) % 3</p><p>求余运算性质：a = b+c --&gt;  a%d = (b%d+c%d) % d</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[<span class="number">1000000</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">7</span>;</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">11</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">        f[i]=(f[i<span class="number">-1</span>]%<span class="number">3</span>+f[i<span class="number">-2</span>]%<span class="number">3</span>)%<span class="number">3</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[n]!=<span class="number">0</span>)</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="养兔子"><a class="markdownIt-Anchor" href="#养兔子"></a> <a href="https://www.nowcoder.com/pat/2/problem/251" target="_blank" rel="noopener">养兔子</a></h3><blockquote><p>非常经典的斐波那契数列题</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 90+5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] + arr[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[n] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客似云来"><a class="markdownIt-Anchor" href="#客似云来"></a> <a href="https://www.nowcoder.com/pat/2/problem/252" target="_blank" rel="noopener">客似云来</a></h3><blockquote><p>斐波那契数列的拓展题，将其中某个区间的值累加输出（需要特判是否为某个点）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 80+5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> from, to;</span><br><span class="line"></span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] + arr[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; from &gt;&gt; to)&#123;</span><br><span class="line">        ll tmp = <span class="number">0</span> ;</span><br><span class="line">        <span class="comment">// 注意需要特判是否相等</span></span><br><span class="line">        <span class="keyword">if</span> (from == to) tmp = arr[from];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=from; i&lt;= to;i++)&#123;</span><br><span class="line">                tmp += arr[i] ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; tmp &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="斐波那契凤尾"><a class="markdownIt-Anchor" href="#斐波那契凤尾"></a> <a href="https://www.nowcoder.com/pat/2/problem/253" target="_blank" rel="noopener">斐波那契凤尾</a></h3><blockquote><p>一遍还挺难过的，有不少的坑点</p><p>1.虽然也是斐波那契数列，但是一定要注意前两项的取值<br>2.输出末尾的6位，那么就是%1e6，但是如果有前置0，需要补零，我是使用iomanip中的setw和setfill实现的<br>3.怎么判断超过6位：找出超过6位的n应该算比较简单的方法了吧</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000 + 5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        用来找到超过1e6的n</span></span><br><span class="line"><span class="comment">        arr[i] = (arr[i-1] + arr[i-2]);</span></span><br><span class="line"><span class="comment">        if (arr[i] &gt; 1000000)&#123;</span></span><br><span class="line"><span class="comment">             cout &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">             break;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        arr[i] = (arr[i<span class="number">-1</span>]%<span class="number">1000000</span> + arr[i<span class="number">-2</span>]%<span class="number">1000000</span>)%<span class="number">1000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">if</span> (n&gt;= <span class="number">30</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">6</span>)&lt;&lt;setfill(<span class="string">'0'</span>) &lt;&lt; arr[n] &lt;&lt;<span class="built_in">endl</span>;    </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; arr[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Po个C的代码，使用printf的格式化输出的特性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    a[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">100000</span>;i++)</span><br><span class="line">      a[i]=(a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>])%<span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;=<span class="number">30</span>)</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%06d\n"</span>,a[n]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="星际密码"><a class="markdownIt-Anchor" href="#星际密码"></a> <a href="https://www.nowcoder.com/pat/2/problem/254" target="_blank" rel="noopener"> 星际密码</a></h3><blockquote><p>说实话，一开始没看懂题，因为输入的n跟题目里提到的n不是同一个东西：矩阵X为[[1 1],[0 1]]，题目中的n是指多少次幂；而输入里的n是指有多少个密码，真正的n其实是第二行的输入Xi</p><p>那么分析下思路，Xi=1时==1，Xi=2时==2，Xi=3时==3</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000 + 5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initFib</span><span class="params">()</span></span>&#123;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = (arr[i<span class="number">-1</span>]%<span class="number">10000</span> + arr[i<span class="number">-2</span>]%<span class="number">10000</span>)%<span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> input[<span class="number">100</span>+<span class="number">5</span>];</span><br><span class="line">    initFib();</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>)&lt;&lt;setfill(<span class="string">'0'</span>) &lt;&lt; arr[tmp] ;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/10/24/PAT冲冲冲/E:%5Chexo%5Csource_posts%5CPAT%E5%86%B2%E5%86%B2%E5%86%B2%5CFib.jpg" alt="Fib"></p><h3 id="母牛的故事"><a class="markdownIt-Anchor" href="#母牛的故事"></a> <a href="https://www.nowcoder.com/pat/2/problem/255" target="_blank" rel="noopener"> 母牛的故事</a></h3><blockquote><p>变形的Fib，公式更新为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>f</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi>f</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>3</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">f(n) = f(n-1) + f(n-3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">3</span><span class="mclose">)</span></span></span></span></p><p>最主要的就是确定前几项，比较好的是样例都给出了2==&gt;2,4==&gt;4,5==&gt;6，这样就比较好确定<strong>每头小母牛从第四个年头开始，每年年初也生一头小母牛</strong>到底是什么意思了</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000 + 5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initFib</span><span class="params">()</span></span>&#123;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;arr[<span class="number">3</span>]=<span class="number">3</span>;arr[<span class="number">4</span>]=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">5</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] + arr[i<span class="number">-3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    initFib();</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="童年生活二三事"><a class="markdownIt-Anchor" href="#童年生活二三事"></a> <a href="https://www.nowcoder.com/pat/2/problem/256" target="_blank" rel="noopener">童年生活二三事</a></h3><blockquote><p>Fib数列的板子题，只不过需要理解一下</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 90 + 5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initFib</span><span class="params">()</span></span>&#123;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] + arr[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    initFib();</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[n]  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蜜蜂寻路"><a class="markdownIt-Anchor" href="#蜜蜂寻路"></a> <a href="https://www.nowcoder.com/pat/2/problem/257" target="_blank" rel="noopener">蜜蜂寻路</a></h3><blockquote><p>如果固定起点为1，计算到某个位置的走法数的话，跟走阶梯其实是一种思路，就是f(n) = f(n-1) + f(n-2)，即第n个位置的走法数=第n-1位置走法数 + 第n-2位置走法数</p></blockquote><table><thead><tr><th>1-&gt;2</th><th>1</th><th>2-&gt;3</th><th>1</th><th>3-&gt;4</th><th>1</th></tr></thead><tbody><tr><td>1-&gt;3</td><td>2</td><td>2-&gt;4</td><td>2</td><td>3-&gt;5</td><td>2</td></tr><tr><td>1-&gt;4</td><td>3</td><td>2-&gt;5</td><td>3</td><td>3-&gt;6</td><td>3</td></tr><tr><td>1-&gt;5</td><td>5</td><td>2-&gt;6</td><td>5</td><td>3-&gt;7</td><td>5</td></tr><tr><td>1-&gt;6</td><td>8</td><td>2-&gt;7</td><td>8</td><td>3-&gt;8</td><td>8</td></tr></tbody></table><p>可以发现其中的规律：走法数一直是Fib数列，而值为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo>(</mo><msub><mi>N</mi><mrow><mi>t</mi><mi>o</mi></mrow></msub><mo>−</mo><msub><mi>N</mi><mrow><mi>f</mi><mi>r</mi><mi>o</mi><mi>m</mi></mrow></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">fib(N_{to} - N_{from})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mord mathit">i</span><span class="mord mathit">b</span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.10903em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">t</span><span class="mord mathit">o</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.10903em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">o</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></p><p>▲但这题还有一个难点在于用例的范围(0 &lt; a &lt; b &lt; 2<sup>31)，即b-a~=2</sup>32-1，为int最大范围，会导致的问题有两个</p><ol><li><p>fib数列通常使用数组来存储，但是无法开个2^32大小的数组</p><p>==&gt;滚动数组、递推（不用数组）</p></li><li><p>输出的Fib(n)就远远超过long long了，因此要么模拟大数相加，那么另寻他法。</p><p>==&gt;△还需要注意到的一点是,<strong>输出数据结果范围是 [0, 2^63)</strong>，那么意思是题目要求的输出其实是在long long 范围内的，那么就可以考虑截取输出了</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">// ll credit = 9.2e18;开的足够大能过样例就行</span></span><br><span class="line">ll credit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 幂计算</span></span><br><span class="line"><span class="comment"> * @author mrli 2019-10-27</span></span><br><span class="line"><span class="comment"> * @param  n [less than 63]</span></span><br><span class="line"><span class="comment"> * @return   [long long type]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        ans *= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Fib</span><span class="params">(<span class="keyword">int</span> del)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (del == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(del == <span class="number">2</span>)  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ll f1 = <span class="number">1</span>; ll f2=<span class="number">2</span>;</span><br><span class="line">        ll ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=del;i++)&#123;</span><br><span class="line"><span class="comment">// ans = f1 + f2 ;也过了</span></span><br><span class="line">            ans = ( f1%(credit) + f2%(credit) )%credit;</span><br><span class="line">            f1 = f2;</span><br><span class="line">            f2 = ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    credit = <span class="built_in">pow</span>(<span class="number">63</span>)<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>( n-- )&#123;</span><br><span class="line">        <span class="keyword">int</span> from, to;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; from &gt;&gt; to;</span><br><span class="line">        ll ans;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; Fib(to-from) &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了别人的题解后,发现想多了。题目的意思是<strong>得分点的输出值都在long long 范围内，而不是需要你把输出值压缩在long long范围内</strong>，果然去掉 %运算也过了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//蜜蜂寻路</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(x, n) memset(x,n,sizeof(x));</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL maxn = <span class="number">2147483648</span>+<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line">LL dp[<span class="number">3</span>]; <span class="comment">//滚动数组</span></span><br><span class="line"><span class="keyword">int</span> n, a, b;</span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ms(dp, <span class="number">0</span>);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>, dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; b-a+<span class="number">1</span>; i++)</span><br><span class="line">        dp[i%<span class="number">3</span>] = dp[<span class="number">0</span>]+dp[<span class="number">1</span>]+dp[<span class="number">2</span>]-dp[i%<span class="number">3</span>]; <span class="comment">//即dp[i]=dp[i-1]+dp][i-2]</span></span><br><span class="line"> </span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        ans = max(dp[i], ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; solve() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//从1到4和从2到5答案是一样的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分数运算"><a class="markdownIt-Anchor" href="#分数运算"></a> <a href="https://www.nowcoder.com/pat/2/problem/261" target="_blank" rel="noopener"> 分数运算</a></h3><blockquote><p>牛客网周赛做到过一次，感觉当时写的比现在的简单。难点在<strong>使用GCD进行约分</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 辗转相除法,求最大公约数</span></span><br><span class="line"><span class="comment"> * @author mrli 2019-10-28</span></span><br><span class="line"><span class="comment"> * @param  a [description]</span></span><br><span class="line"><span class="comment"> * @param  b [description]</span></span><br><span class="line"><span class="comment"> * @return   [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1,a2,b1,b2;</span><br><span class="line">    <span class="keyword">char</span> op3;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">scanf</span>(<span class="string">"%d/%d %d/%d %c"</span>, &amp;a1, &amp;a2, &amp;b1, &amp;b2, &amp;op3) != EOF)&#123;</span><br><span class="line">        <span class="keyword">int</span> fenmu;</span><br><span class="line">        <span class="keyword">int</span> fenzi;</span><br><span class="line">        <span class="keyword">if</span> (op3 == <span class="string">'+'</span>)&#123;</span><br><span class="line">            fenmu = a2*b2;</span><br><span class="line">            fenzi = a1*b2+a2*b1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op3 == <span class="string">'-'</span>)&#123;</span><br><span class="line">            fenmu = a2*b2;</span><br><span class="line">            fenzi = a1*b2-a2*b1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op3 == <span class="string">'*'</span>)&#123;</span><br><span class="line">            fenmu = a2*b2;</span><br><span class="line">            fenzi = a1*b1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">//if (op3 == '*')&#123;</span></span><br><span class="line">            fenmu = a2*b1;</span><br><span class="line">            fenzi = a1*b2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找出最大公因子,约分</span></span><br><span class="line">        <span class="keyword">int</span> common = gcd(fenmu,fenzi);</span><br><span class="line">        <span class="keyword">int</span> res_zi = fenzi/common;</span><br><span class="line">        <span class="keyword">int</span> res_mu = fenmu/common;</span><br><span class="line">        <span class="keyword">if</span> ( res_mu * res_zi &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">abs</span>(fenzi/common) &lt;&lt; <span class="string">'/'</span> &lt;&lt; <span class="built_in">abs</span>(fenmu/common) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">'-'</span> &lt;&lt;<span class="built_in">abs</span>(fenzi/common) &lt;&lt; <span class="string">'/'</span> &lt;&lt; <span class="built_in">abs</span>(fenmu/common) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分解因数"><a class="markdownIt-Anchor" href="#分解因数"></a> <a href="https://www.nowcoder.com/pat/2/problem/262" target="_blank" rel="noopener"> 分解因数</a></h3><blockquote><p>使用小学的短除法，我们很清楚的知道，要想求出它的每一个质因数，我们需要用质数去试除。<code>90</code>能被<code>2</code>整除，那就拿商继续除以<code>2</code>，除不尽就换<code>3</code>，一直到除到质数为止。基础代码框架类似判断质数，只是被判断的数字在过程中不断被除，最终循环结束的时候，那个被处理过的数字，就是最后一个质因数。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> tmpn = n;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">" = "</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(n); ++i)&#123;</span><br><span class="line">            <span class="keyword">while</span> ( tmpn%i == <span class="number">0</span> &amp;&amp; tmpn != i)&#123;</span><br><span class="line">                tmpn /= i;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" * "</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; tmpn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的第一次做法：</p><blockquote><p>一直TLE，估计这种的话，必须得线性筛，我搜了几个题解的结果也证明除了上述题解，其他的都是线性筛，上面的就比较巧妙</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">( <span class="keyword">int</span> num )</span></span>&#123;</span><br><span class="line">     <span class="comment">//两个较小数另外处理</span></span><br><span class="line">     <span class="keyword">if</span> (num==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">if</span>(num ==<span class="number">2</span>|| num==<span class="number">3</span> )</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">     <span class="comment">//不在6的倍数两侧的一定不是质数</span></span><br><span class="line">     <span class="keyword">if</span>(num %<span class="number">6</span>!= <span class="number">1</span>&amp;&amp;num %<span class="number">6</span>!= <span class="number">5</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     <span class="comment">//在6的倍数两侧的也可能不是质数</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">5</span>;i &lt;= <span class="built_in">sqrt</span>( num); i+=<span class="number">6</span> )</span><br><span class="line">         <span class="keyword">if</span>(num %i== <span class="number">0</span>||num %(i+ <span class="number">2</span>)==<span class="number">0</span> )</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">     <span class="comment">//排除所有，剩余的是质数</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">" = "</span> ;</span><br><span class="line">        <span class="keyword">int</span> tmpn = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tmpn;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> ( isPrime(i) &amp;&amp; n%i == <span class="number">0</span>)&#123;</span><br><span class="line">                n /= i;</span><br><span class="line">                <span class="keyword">if</span> (first) &#123;</span><br><span class="line">                    first = <span class="literal">false</span>;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; i ; </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt;  <span class="string">" * "</span> &lt;&lt; i ; </span><br><span class="line">                <span class="keyword">if</span> (n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="因子个数"><a class="markdownIt-Anchor" href="#因子个数"></a> <a href="https://www.nowcoder.com/pat/2/problem/264" target="_blank" rel="noopener">因子个数</a></h3><blockquote><p>用到了上题的结论，<strong>一个正整数总可以分解成一个或多个素数的积</strong>，一开始理解错题目了，以为是所有因数的个数，其实是<strong>因数的种数</strong>，比如20-&gt;2是因为2，2，5；30-&gt;3是因为2，3，5。</p><p>因此这边还是需要素数判别，卡的点也在这，要用线性筛，其实就是上题的回答方式不同罢了</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (tmp%i==<span class="number">0</span>)&#123;</span><br><span class="line">                tmp/=i;</span><br><span class="line">                <span class="keyword">if</span> (first)&#123;</span><br><span class="line">                    first = !first;</span><br><span class="line">                    ans ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    while( cin &gt;&gt; n)&#123;</span><br><span class="line">        int ans=0;</span><br><span class="line">        int tmp = n;</span><br><span class="line"></span><br><span class="line">        for (int i = 2; i &lt;= sqrt(n); ++i)&#123;</span><br><span class="line">            // bool first = true;</span><br><span class="line">            if (tmp%i==0)&#123;</span><br><span class="line">                while (tmp%i==0)&#123;</span><br><span class="line">                   tmp/=i;</span><br><span class="line">                &#125;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (tmp!=1) ans++;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skew数"><a class="markdownIt-Anchor" href="#skew数"></a> <a href="https://www.nowcoder.com/pat/2/problem/266" target="_blank" rel="noopener"> skew数</a></h3><blockquote><p>模拟题、实现一个幂运算</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        ans *= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; s )&#123;</span><br><span class="line">        <span class="keyword">int</span> size = s.size();</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i)&#123;</span><br><span class="line">            <span class="comment">/* code */</span></span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'2'</span>)&#123;</span><br><span class="line">                ans += <span class="number">2</span>*(pow2(size-i)<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += (s[i]-<span class="string">'0'</span>)*(pow2(size-i)<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一的个数"><a class="markdownIt-Anchor" href="#一的个数"></a> <a href="https://www.nowcoder.com/pat/2/problem/267" target="_blank" rel="noopener"> 一的个数</a></h3><blockquote><p>非常基础的一道题：r进制表示</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, r;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            <span class="keyword">if</span> (n%r==<span class="number">1</span>) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            n /= r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外星人的语言"><a class="markdownIt-Anchor" href="#外星人的语言"></a> <a href="https://www.nowcoder.com/pat/2/problem/268" target="_blank" rel="noopener"> 外星人的语言</a></h3><blockquote><p>r进制的拓展，需要将各位输出出来，由于是逆序的，所以需要一1.个栈来反转一下、或是2.使用string的反转功能</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, r;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            <span class="comment">// 0-9</span></span><br><span class="line">            <span class="keyword">char</span> c = n%r+<span class="number">48</span>;</span><br><span class="line">            <span class="keyword">if</span> (n%r&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">                <span class="comment">// A-F</span></span><br><span class="line">                c = n%r<span class="number">-10</span>+<span class="number">65</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n /= r;</span><br><span class="line">            <span class="comment">// 不直接cout，而是存栈</span></span><br><span class="line">            s.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">            <span class="comment">// 取出栈里的内容</span></span><br><span class="line">            <span class="keyword">char</span> c = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数位和"><a class="markdownIt-Anchor" href="#数位和"></a> <a href="https://www.nowcoder.com/pat/2/problem/270" target="_blank" rel="noopener"> 数位和</a></h3><blockquote><p>代码为<a href="#%E4%B8%80%E7%9A%84%E4%B8%AA%E6%95%B0">一的个数</a>+<a href="#%E5%A4%96%E6%98%9F%E4%BA%BA%E7%9A%84%E8%AF%AD%E8%A8%80">外星人的语言</a>的结合版。</p><p>题目要求，将数n，先表示成r进制的形式，然后再计算r进制下n的位数和，然后再用r进制来表示位数和的结果</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// ACM比赛中cin,的使用比较耗时,因为默认的时候，cin与stdin总是保持同步的，使用这句可以使cin达到和scanf相差无几的输入效率。</span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n, r;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            ans += n%r;</span><br><span class="line">            n /= r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">stack</span> &lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line">        <span class="keyword">while</span>(ans)&#123;</span><br><span class="line">            <span class="comment">// 0-9</span></span><br><span class="line">            <span class="keyword">char</span> c = ans%r+<span class="number">48</span>;</span><br><span class="line">            <span class="keyword">if</span> (ans%r&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">                <span class="comment">// A-F</span></span><br><span class="line">                c = ans%r<span class="number">-10</span>+<span class="number">65</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans /= r;</span><br><span class="line">            <span class="comment">// 不直接cout，而是存栈</span></span><br><span class="line">            s.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">            <span class="comment">// 取出栈里的内容</span></span><br><span class="line">            <span class="keyword">char</span> c = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进制回文数"><a class="markdownIt-Anchor" href="#进制回文数"></a> <a href="https://www.nowcoder.com/pat/2/problem/272" target="_blank" rel="noopener">进制回文数</a></h3><blockquote><p>还是r进制的拓展，</p><p>1.r需要用个2-16的循环<br>2.判断字符串的镜像对称s[i] != s[ssize-i-1]<br>3.踩了个坑,n每次都会被除到很小,因此需要用个临时变量来处理</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; N)&#123;</span><br><span class="line">        <span class="keyword">bool</span> yes=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">2</span>; r &lt;= <span class="number">16</span>; ++r)&#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="keyword">int</span> n = N;</span><br><span class="line">            <span class="keyword">while</span>(n)&#123;</span><br><span class="line">                <span class="keyword">char</span> c = n%r+<span class="number">48</span>;</span><br><span class="line">                <span class="keyword">if</span> (n%r&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">                    c = n%r<span class="number">-10</span>+<span class="number">65</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                n /= r;</span><br><span class="line">                s += c;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检测出r进制变换时,n已经被除的很小了,因此需要用个临时变量</span></span><br><span class="line">            <span class="comment">// cout &lt;&lt; r &lt;&lt; "进制：" &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">// for (int i = 0; i &lt; s.size(); ++i)</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     cout &lt;&lt; s[i] &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">//     /* code */</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="keyword">bool</span> mirror = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">int</span> ssize = s.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= ssize/<span class="number">2</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] != s[ssize-i<span class="number">-1</span>])&#123;</span><br><span class="line">                    mirror = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mirror)&#123;</span><br><span class="line">                 yes=<span class="literal">true</span>;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (yes) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发邮件"><a class="markdownIt-Anchor" href="#发邮件"></a> <a href="https://www.nowcoder.com/pat/2/problem/274" target="_blank" rel="noopener"> 发邮件</a></h3><blockquote><p>一道数学题，递推公式为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>∗</mo><mo>[</mo><mi>f</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi>f</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo>)</mo><mo>]</mo></mrow><annotation encoding="application/x-tex">f(n) = (n-1)*[f(n-1)+f(n-2)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span><span class="mrel">=</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">∗</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">2</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></p><p>坑点:超出了int，需要用longlong</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">email</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n<span class="number">-1</span>)*(email(n<span class="number">-1</span>)+email(n<span class="number">-2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; email(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="说反话-20"><a class="markdownIt-Anchor" href="#说反话-20"></a> <a href="https://www.nowcoder.com/pat/2/problem/4075" target="_blank" rel="noopener"> 说反话 (20)</a></h3><blockquote><p>考查了：对行的读取、字符串的切割。</p><p>本来还以为考了个string的反转，结果比想象中的更简单一点</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( getline(<span class="built_in">cin</span>, s) )&#123;</span><br><span class="line">        <span class="built_in">stringstream</span> strings;</span><br><span class="line">        <span class="built_in">string</span> tmps;</span><br><span class="line">        strings &lt;&lt; s;</span><br><span class="line">        <span class="keyword">while</span>( getline(strings, tmps, <span class="string">' '</span>) )&#123;</span><br><span class="line">            ss.push(tmps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!ss.empty())&#123;</span><br><span class="line">            <span class="built_in">string</span> couts = ss.top();</span><br><span class="line">            ss.pop();</span><br><span class="line">            <span class="keyword">if</span> (!ss.empty())</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; couts &lt;&lt;<span class="string">' '</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; couts ;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补充string的反转"><a class="markdownIt-Anchor" href="#补充string的反转"></a> 补充——string的反转：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*法一:使用string::reverse_iterator迭代器,直接用iterator会报错*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">string</span>::reverse_iterator it=couts.rbegin(); it != couts.rend() ; ++it)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*法二:使用algorithm算法中的reverse函数*/</span></span><br><span class="line"><span class="comment">// 会修改str中的内容</span></span><br><span class="line">reverse(str.begin(),str.end());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*法三:使用使用string.h中的strrev函数</span></span><br><span class="line"><span class="comment">△只能处理char[],不支持string类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">char</span> s[]=<span class="string">"hello"</span>;</span><br><span class="line">strrev(s);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*法四:自己编写*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=n<span class="number">-1</span>;i&lt;j;i++,j--)&#123;</span><br><span class="line">        <span class="keyword">char</span> c=s[i];</span><br><span class="line">        s[i]=s[j];</span><br><span class="line">        s[j]=c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一元多项式求导-25"><a class="markdownIt-Anchor" href="#一元多项式求导-25"></a> <a href="https://www.nowcoder.com/pat/2/problem/4076" target="_blank" rel="noopener">一元多项式求导 (25)</a></h3><blockquote><p>被读取方式卡了会</p><p>这边有个坑点: 忽略了常数项的问题<br>比如 输入 2 0<br>应该输出 0 0</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">exp</span>,coe;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;coe,&amp;<span class="built_in">exp</span>)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>,coe*<span class="built_in">exp</span>,<span class="built_in">exp</span><span class="number">-1</span>);</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="literal">false</span>) <span class="built_in">printf</span>(<span class="string">"0 0\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>别人的处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> coef;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">&#125;<span class="keyword">typedef</span> poly;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> coef;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;poly&gt; q;</span><br><span class="line">    <span class="comment">// scanf和getchar合用比较方便,cin再用getchar无效</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;coef, &amp;index) != EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span> (index!=<span class="number">0</span>)&#123;</span><br><span class="line">            poly *p = <span class="keyword">new</span> poly();</span><br><span class="line">            p-&gt;coef = coef*index;</span><br><span class="line">            p-&gt;index = index<span class="number">-1</span> ;</span><br><span class="line">            q.push(*p);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 放最后能过,放最初的时候有些过不了</span></span><br><span class="line">        <span class="keyword">if</span> (getchar()==<span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (q.size()==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"0 0\n"</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            poly p = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">if</span> (p.coef != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (q.empty())</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, p.coef, p.index );</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d "</span>, p.coef, p.index );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷完了牛客网PAT乙级练习题的第一、第三页。大多都是些模拟题、简单题，相当于弱一点的蓝桥杯省赛。由于报名考的是甲级，所以就没继续做下去了…</p><h2 id="甲级练习题"><a class="markdownIt-Anchor" href="#甲级练习题"></a> 甲级练习题</h2><h3 id=""><a class="markdownIt-Anchor" href="#"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805528788582400" target="_blank" rel="noopener">  <strong>1001</strong> <strong>A+B Format</strong> <strong>(20</strong> <strong>分</strong>**)** </a></h3><blockquote><p>看似很简单的一道题，但坑点确实不少，一遍过挺难的</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll m, n;</span><br><span class="line">    <span class="comment">// 考虑到每次都是取后三位，所以需要用栈来逆序输出</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;ll&gt; s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;m,&amp;n) != EOF)&#123;</span><br><span class="line">        ll res_ans = m + n;</span><br><span class="line">        <span class="comment">// 这边0得特判</span></span><br><span class="line">        <span class="keyword">if</span> (res_ans==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (res_ans&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> ;</span><br><span class="line">        ll ans = <span class="built_in">abs</span>(res_ans);</span><br><span class="line">        <span class="keyword">while</span>( ans )&#123;</span><br><span class="line">            ll three = ans%<span class="number">1000</span>;</span><br><span class="line">            s.push(three);</span><br><span class="line">            ans /= <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 逆序输出</span></span><br><span class="line">        <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">            ll n = s.top();</span><br><span class="line">            s.pop();  </span><br><span class="line">            <span class="comment">// 首个三位不需要补零，其他的都需要补零</span></span><br><span class="line">            <span class="keyword">if</span> (first) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld"</span>, n);</span><br><span class="line">                first = !first;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%03lld"</span>, n);</span><br><span class="line">            <span class="keyword">if</span> (!s.empty()) <span class="built_in">printf</span>(<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1002-ab-for-polynomials"><a class="markdownIt-Anchor" href="#1002-ab-for-polynomials"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000" target="_blank" rel="noopener">1002  A+B for Polynomials</a></h3><blockquote><p>模拟题，对我来说，又重新温习了遍Map的使用。</p><p>该题就一个坑点：系数为0的项不需要显示。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">float</span>&gt; mp;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">float</span>&gt;::iterator i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">float</span> coef;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">exp</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %f"</span>, &amp;<span class="built_in">exp</span>, &amp;coef);</span><br><span class="line">        mp[<span class="built_in">exp</span>] = coef;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">        <span class="comment">// 两个临时变量</span></span><br><span class="line">        <span class="keyword">float</span> coef;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">exp</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %f"</span>, &amp;<span class="built_in">exp</span>, &amp;coef);</span><br><span class="line">        i = mp.find(<span class="built_in">exp</span>);</span><br><span class="line">        <span class="keyword">if</span> ( i != mp.end() )&#123;</span><br><span class="line">            <span class="keyword">float</span> sum = i-&gt;second + coef;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">abs</span>( sum - <span class="number">0</span>) &lt; <span class="number">1e-6</span> )&#123;</span><br><span class="line">                <span class="comment">// △坑点:如果系数为0,不显示</span></span><br><span class="line">                mp.erase(<span class="built_in">exp</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> mp[<span class="built_in">exp</span>] = sum;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           mp[<span class="built_in">exp</span>] = coef; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从小到大输出</span></span><br><span class="line">    <span class="comment">// for ( i = mp.begin(); i != mp.end(); ++i)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, mp.size());</span><br><span class="line">    <span class="comment">// 使用反向迭代器-&gt;从大到小输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">float</span>&gt;::reverse_iterator i = mp.rbegin(); i != mp.rend(); ++i)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d %.1f"</span>, i-&gt;first, i-&gt;second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1003-emergency"><a class="markdownIt-Anchor" href="#1003-emergency"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805523835109376" target="_blank" rel="noopener"> 1003  Emergency</a></h3><p>作为一个城市紧急援救队的指挥者，你得到了一个国家的特殊地图。地图上分散着几座城市，城市间用道路连接着。每个城市援救队的数量以及两座城市之间每条道路的长度已经在地图上标出。当某些城市发生了突发事件，需要你的帮助时，你的工作是带领你的队伍尽快的赶到事发现场，与此同时，召集尽可能多的在路上的队伍。</p><p><strong>输入</strong></p><p>每个输入文件包含一个测试实例。每个实例的第一行有四个正整数：N(&lt;= 500)是城市的个数（城市的编号从0到N-1），M是道路的个数，C1和C2分别是你现在所在的城市以及你必须去救援的城市。下一行有N个整数，第i个整数是第i个城市中救援队的数量。然后下面有M行，每行表示一条道路。每一行有三个整数c1,c2和L，分别表示道路连接的两个城市以及道路的长度。保证C1到C2之间存在至少一条路径。</p><p><strong>输出</strong></p><p>对于每个测试实例，在一行中输出两个数字：C1和C2之间不同的最短路径的个数，你能聚集起来的最多的救援队数量。</p><p>一行中的所有数字必须被一个空格分隔开，在每行的结尾不允许出现空格。</p><blockquote><p>思路：本题是求起点到目标点的最短路径的数目，以及所有最短路径中点权的最大值，可用dijkstra算法</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s, d;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*关于起点为s的路径的变量(记录的都是以 起点s 为中心的量)：</span></span><br><span class="line"><span class="comment">pathl(path_length缩写)存储从起点到所有点的最短路径的边权(本例为起点城市到所有城市的最短路径的距离) ————最短路</span></span><br><span class="line"><span class="comment">maxv(max_hands缩写)存储从起点到其他点的全部最短路径中的点权最大值(本例为起点城市到其他城市的所有最短路径中 </span></span><br><span class="line"><span class="comment">    即人手最多的那条路径的人手数)  ———— 最短路中能获得最大权值的节点权值e.g.maxv[3]即s-&gt;3能获得的最大权值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">▲核心思想是根据路径最短来更新的,所以即使v' &lt; v, 但只要l' &lt; l,那么也会更新。即@77代码处</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">pathc(path_count缩写)存储从起点到其他点的最短路径的数目； </span></span><br><span class="line"><span class="comment">△根据题意,额外需要维护的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> pathc[maxn];</span><br><span class="line"><span class="keyword">int</span> pathl[maxn];</span><br><span class="line"><span class="keyword">int</span> maxv[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 图信息的变量 */</span></span><br><span class="line"><span class="comment">// e(edges):点间的边关系, 初始化默认为0</span></span><br><span class="line"><span class="comment">// visited:判断v是否被访问过</span></span><br><span class="line"><span class="comment">// 存放节点v权值的量, node_value</span></span><br><span class="line"><span class="keyword">int</span> e[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> visited[maxn];</span><br><span class="line"><span class="keyword">int</span> value[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [dijkstra description]</span></span><br><span class="line"><span class="comment"> * dijkstra求最短路径的特点是探索当前节点-&gt;下个节点,边权值最小的将被当做下个节点</span></span><br><span class="line"><span class="comment"> * 最终可以找出节点s到所有节点的最短路径</span></span><br><span class="line"><span class="comment"> * 原理:根据初始点，挨个的把离初始点最近的点一个一个找到并加入集合,集合中所有的点的d[i]都是该点到初始点最短路径长度</span></span><br><span class="line"><span class="comment"> * @author mrli 2019-11-09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这份dijkstra的思路为:</span></span><br><span class="line"><span class="comment">        第一次, for1先遍历选中一个节点v, 然后使用for2找到遍历, 找到与v路径最短的下一个节点v', then更新</span></span><br><span class="line"><span class="comment">        第二次, for1那么根据与下个节点路径最短的规则,还是会找到v', 因此minI=v', 然后再找v''</span></span><br><span class="line"><span class="comment">    第二种:</span></span><br><span class="line"><span class="comment">        先安排节点s, 设个while(1) 以外的节点, 保存当前节点v编号, 然后遍历,tmpv为需要更新的节点的编号</span></span><br><span class="line"><span class="comment">        区别在于 </span></span><br><span class="line"><span class="comment">        法一:当前的v未访问过,所以设置visited[v]=1,然后找下一个tmpv,在下次的while循环的时候再设置visited</span></span><br><span class="line"><span class="comment">        法二:当前的v已经是visited==1, 在找到tmpv后直接设置visited[tmpv]=1,</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 初始化数组</span></span><br><span class="line">    fill(pathl, pathl+ maxn, INF);</span><br><span class="line">    pathc[s] = <span class="number">1</span>;</span><br><span class="line">    pathl[s] = <span class="number">0</span>;</span><br><span class="line">    maxv[s] = value[s];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">/*找出本轮尚未确定最短路径的城市中，起点到剩余城市中，距离最小minl的那个城市minI。</span></span><br><span class="line"><span class="comment">        如果minl是无穷大，证明起点城市与剩余城市均不可达，即不连通；</span></span><br><span class="line"><span class="comment">        如果minI就是目标城市d，则表明已经确定起点城市到目标城市的最短路径，提前结束寻找。</span></span><br><span class="line"><span class="comment">        否则，将本轮能确定最短路径的城市minI设为已经处理好,v[minI]=1；</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">int</span> minl = INF, minI = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 以s节点为例, 先遍历边其他未访问过的节点,找到其中边权值最小的作为下一个访问节点</span></span><br><span class="line">        <span class="comment">// 首先第一个访问的肯定是s节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (pathl[i] &lt; minl)&#123;</span><br><span class="line">                minl = pathl[i];</span><br><span class="line">                minI = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 终止条件:</span></span><br><span class="line">        <span class="comment">// 1.在 dijkstra 算法里, 如果节点已经判断到终点了, 那么到终点的最短路径就已经被计算出来了,此时可以结束</span></span><br><span class="line">        <span class="comment">// 2.当前循环全是Visited == 1的节点,所有节点都被遍历过了, 循环结束</span></span><br><span class="line">        <span class="keyword">if</span> (minI == d || minl== INF) <span class="keyword">break</span>;</span><br><span class="line">        visited[minI] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// minI节点-&gt;下个节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="comment">// 在未达、且可达的节点中考虑，否则continue</span></span><br><span class="line">            <span class="keyword">if</span>( visited[i] == <span class="number">1</span> || e[minI][i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 当节点minI的最短路径 + 当前minI-&gt;下一个节点的边权值</span></span><br><span class="line">            <span class="keyword">int</span> tmpl = pathl[minI] + e[minI][i];</span><br><span class="line">            <span class="keyword">int</span> tmpv = value[i] + maxv[minI];</span><br><span class="line">            <span class="comment">// 判断是否要更新, 如果当前路径l小于之前的话,那么更新</span></span><br><span class="line">            <span class="keyword">if</span>(tmpl &lt; pathl[i])&#123;</span><br><span class="line">                pathl[i] = tmpl;</span><br><span class="line">                maxv[i] = tmpv;</span><br><span class="line">                pathc[i] = pathc[minI];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果长度是相等的,那么最大化Value</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (tmpl == pathl[i])&#123;</span><br><span class="line">                pathc[i] += pathc[minI];</span><br><span class="line">                <span class="keyword">if</span> (tmpv &gt; maxv[i]) maxv[i] = tmpv;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;n, &amp;m, &amp;s, &amp;d);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;value[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> v1, v2, l;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;v1, &amp;v2, &amp;l);</span><br><span class="line">        e[v1][v2] = l;</span><br><span class="line">        e[v2][v1] = l;</span><br><span class="line">    &#125;</span><br><span class="line">    dijkstra();</span><br><span class="line">    <span class="comment">// 最短的路径, 最大的权值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, pathc[d], maxv[d]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/yeziand01/article/details/80716688" target="_blank" rel="noopener">大佬的代码(带注释)</a></p><h3 id="1004-counting-leaves"><a class="markdownIt-Anchor" href="#1004-counting-leaves"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805521431773184" target="_blank" rel="noopener"> 1004 Counting Leaves</a></h3><p>一个家庭的层级结构经常被表现为一个家谱树。你的任务是统计这些家庭成员中谁没有孩子。</p><p><strong>输入</strong></p><p>每个输入文件包含一个测试实例。每个实例开始的一行包含N和M，N指树中的结点个数（0&lt;N&lt;100），M指非叶结点的个数。然后下面有M行，每行的格式如下：</p><p>ID K ID[1] ID[2] …ID[K]</p><p>ID是一个两位数的数字，表示一个非叶结点。K表示其孩子的数量。随后是一个序列，序列中是该结点的孩子结点的两位数ID。为了简单起见，我们把根结点的ID固定为01。</p><p><strong>输出</strong></p><p>对于每个测试实例，你应该计算从根结点开始的每一层中没有孩子的家庭成员的个数。数字必须在一行内输出，用空格分隔，在每行结尾不能有多余的空格。</p><p>测试样例表示了一个只有两个结点的树，01是根结点，02是它仅有的孩子。因此在根结点01层级，没有叶节点。再下一层级，有一个叶结点。然后我们应该在一行内输出“0 1”。</p><blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1005-spell-it-right"><a class="markdownIt-Anchor" href="#1005-spell-it-right"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805519074574336" target="_blank" rel="noopener">1005 Spell It Right</a></h3><blockquote><p>感觉突然来了一道放水题，就纯模拟</p><p>坑点：全0的时候特判为zero</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100 + 5</span></span><br><span class="line"><span class="keyword">int</span> arr[maxn];</span><br><span class="line"><span class="built_in">string</span> num[<span class="number">10</span>] = &#123;<span class="string">"zero"</span> ,<span class="string">"one"</span> ,<span class="string">"two"</span> ,<span class="string">"three"</span>, <span class="string">"four"</span> ,<span class="string">"five"</span>, <span class="string">"six"</span>, <span class="string">"seven"</span>, <span class="string">"eight"</span>, <span class="string">"nine"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( ch != <span class="string">'\n'</span> )&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = ch - <span class="string">'0'</span>;</span><br><span class="line">        sum += tmp;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 坑点,需要特判0</span></span><br><span class="line">    <span class="keyword">if</span>(sum==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"zero\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(sum)&#123;</span><br><span class="line">            <span class="keyword">int</span> ge = sum %<span class="number">10</span>;</span><br><span class="line">            sum /= <span class="number">10</span>;</span><br><span class="line">            s.push(ge);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> ans = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="keyword">if</span> (first)  &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s"</span>, num[ans].c_str());</span><br><span class="line">                first = !first;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" %s"</span>, num[ans].c_str());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲小结一下: 每次用while来取位的时候，必须先判断while(xxx)中的xxx是否初始就为0</p><h3 id="1006-sign-in-and-sign-out-25-分"><a class="markdownIt-Anchor" href="#1006-sign-in-and-sign-out-25-分"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805516654460928" target="_blank" rel="noopener">1006 Sign In and Sign Out (25 分)</a></h3><blockquote><p>更加简单的模拟题，由于string的比较特性可以直接用来比较时间，所以处理很方便</p><p>△学会使用algorithm里的sort能省很多时间</p><p>▲比较运算符&lt;重载、或是编写外部比较函数，都会按照return里为true的逻辑排序,<a href="http://xn--first-gv5i.xxx" target="_blank" rel="noopener">如first.xxx</a> &lt; second.xxx那么就是从小到大</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">record</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> id;</span><br><span class="line">    <span class="built_in">string</span> intime;</span><br><span class="line">    <span class="built_in">string</span> outtime;</span><br><span class="line">&#125;<span class="keyword">typedef</span> rc;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照进入的时间排序, 从小到大</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpin</span><span class="params">(<span class="keyword">const</span> rc&amp; f, <span class="keyword">const</span> rc&amp; s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f.intime &lt; s.intime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照出去的时间排序, 从大到小</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpout</span><span class="params">(<span class="keyword">const</span> rc&amp; f, <span class="keyword">const</span> rc&amp; s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f.outtime &gt; s.outtime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;rc&gt; v;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;rc&gt;::iterator it;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        rc* p = <span class="keyword">new</span> rc();</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p-&gt;id &gt;&gt; p-&gt;intime &gt;&gt; p-&gt;outtime;</span><br><span class="line">        v.emplace_back(*p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(v.begin(), v.end(), cmpin);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.begin()-&gt;id &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    sort(v.begin(), v.end(), cmpout);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.begin()-&gt;id &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// for(it = v.begin(); it!= v.end(); it++)&#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; it-&gt;id &lt;&lt; " "&lt;&lt;  it-&gt;intime &lt;&lt;" "&lt;&lt; it-&gt;outtime &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/erd8888/article/details/88795843" target="_blank" rel="noopener">C++中sort的比较函数写法</a></p><p>注意：比较函数必须写在类外部（全局区域）或声明为静态函数</p><h3 id="1007-maximum-subsequence-sum"><a class="markdownIt-Anchor" href="#1007-maximum-subsequence-sum"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805514284679168" target="_blank" rel="noopener"> 1007  Maximum Subsequence Sum</a></h3><h3 id="1008-elevator"><a class="markdownIt-Anchor" href="#1008-elevator"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805511923286016" target="_blank" rel="noopener"> 1008  Elevator</a></h3><blockquote><p>模拟</p></blockquote><h3 id="1009-product-of-polynomials"><a class="markdownIt-Anchor" href="#1009-product-of-polynomials"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805509540921344" target="_blank" rel="noopener"> 1009  Product of Polynomials</a></h3><blockquote><p>模拟题</p></blockquote><h3 id="1010-radix"><a class="markdownIt-Anchor" href="#1010-radix"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805507225665536" target="_blank" rel="noopener"> 1010 Radix</a></h3><blockquote><p>模拟题</p></blockquote><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805504927186944" target="_blank" rel="noopener"> 1011  World Cup Betting</a></p><blockquote><p>模拟题</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">games</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> one, two, three;</span><br><span class="line">&#125;<span class="keyword">typedef</span> Gm;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">double</span> win=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">double</span> arr[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span> maxi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>,&amp;arr[<span class="number">0</span>], &amp;arr[<span class="number">1</span>], &amp;arr[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">3</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[maxi])&#123;</span><br><span class="line">                maxi = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        v.emplace_back(maxi);</span><br><span class="line">        win *= arr[maxi];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(it= v.begin(); it!= v.end(); it++)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(*it)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"W "</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"T "</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"L "</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, (win*<span class="number">0.65</span> - <span class="number">1</span>)*<span class="number">2</span> );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1012-the-best-rank"><a class="markdownIt-Anchor" href="#1012-the-best-rank"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805502658068480" target="_blank" rel="noopener"> 1012  The Best Rank</a></h3><h3 id="1013-battle-over-cities"><a class="markdownIt-Anchor" href="#1013-battle-over-cities"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805500414115840" target="_blank" rel="noopener"> 1013  Battle Over Cities</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">// c m e a</span></span><br><span class="line">    <span class="keyword">int</span> g[<span class="number">4</span>], r[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">4</span>] = &#123;<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'M'</span>, <span class="string">'E'</span>&#125;;</span><br><span class="line">&#125;<span class="keyword">typedef</span> stu;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;stu&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(stu &amp;f1 , stu &amp;f2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f1.g[num] &gt; f2.g[num];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getRank</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j)&#123;</span><br><span class="line">        sort(v.begin(), v.end(), cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)&#123;</span><br><span class="line">            v.at(i).r[num] = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maxRank</span><span class="params">(<span class="keyword">const</span> stu *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> best_rank = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s-&gt;r[i] &lt; s-&gt;r[best_rank]) best_rank = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s-&gt;r[best_rank] &lt;&lt; <span class="string">" "</span> &lt;&lt; s-&gt;c[best_rank] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt;M;</span><br><span class="line">    <span class="comment">// scanf("%d%d", &amp;N, &amp;M);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)&#123;</span><br><span class="line">        stu *s = <span class="keyword">new</span> stu();</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s-&gt;id &gt;&gt; s-&gt;g[<span class="number">1</span>] &gt;&gt; s-&gt;g[<span class="number">2</span>] &gt;&gt; s-&gt;g[<span class="number">3</span>]; </span><br><span class="line">        s-&gt;g[<span class="number">0</span>] = (s-&gt;g[<span class="number">1</span>] + s-&gt;g[<span class="number">2</span>]+ s-&gt;g[<span class="number">3</span>])/<span class="number">3</span>; </span><br><span class="line">        v.emplace_back(*s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getRank();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmpid;</span><br><span class="line">        <span class="keyword">bool</span> find=<span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tmpid;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span> ( v.at(i).id == tmpid) &#123;</span><br><span class="line">                maxRank(&amp;v.at(i));</span><br><span class="line">                find=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!find) <span class="built_in">cout</span> &lt;&lt; <span class="string">"N/A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1081-rational-sum"><a class="markdownIt-Anchor" href="#1081-rational-sum"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805386161274880" target="_blank" rel="noopener">1081  Rational Sum</a></h3><blockquote><p>分数计算的加强版，多个分数相加。我采用了一次性计算，其实可以直接用乙级的做法，两个两个依次计算。</p><p>▲牛客网和PTA的样例点真的不一样，PTA上我有一个点过不了，但牛客的都能过</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fenshu</span>&#123;</span></span><br><span class="line">    ll fenmu;</span><br><span class="line">    ll fenzi;</span><br><span class="line">&#125;<span class="keyword">typedef</span> Fenshu;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到分子和分母的最大公因数</span></span><br><span class="line"><span class="function">ll <span class="title">biggestNum</span><span class="params">(ll a, ll b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> biggestNum(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到分子和分母的最小公倍数</span></span><br><span class="line"><span class="function">ll <span class="title">smallestNum</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*b/biggestNum(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Fenshu&gt; v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) != EOF)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            Fenshu *fs = <span class="keyword">new</span> Fenshu();</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld/%lld"</span>,&amp;fs-&gt;fenzi,&amp;fs-&gt;fenmu);</span><br><span class="line">            v.emplace_back(*fs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到所有分母的最小公倍数</span></span><br><span class="line">        ll mul = v.begin()-&gt;fenmu;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Fenshu&gt;::iterator i = v.begin(); i != v.end(); ++i)&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Fenshu&gt;::iterator nx = <span class="built_in">std</span>::next(i,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nx != v.end())&#123;</span><br><span class="line">                mul = smallestNum(mul, nx-&gt;fenmu);</span><br><span class="line">                <span class="comment">// printf("i-&gt;fenmu:%lld, nx-&gt;fenmu:%lld, tmp_mul:%lld\n", i-&gt;fenmu, nx-&gt;fenmu, tmp_mul);</span></span><br><span class="line"><span class="comment">// 错误尝试写法：思路错了:变成了找到两个分母最小公倍数中最大的</span></span><br><span class="line">                <span class="comment">// if (mul &lt; tmp_mul) &#123;</span></span><br><span class="line">                    <span class="comment">// printf("tmp_biggest:%lld\n", tmp_biggest);</span></span><br><span class="line">                    <span class="comment">// mul = tmp_mul;</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 相加再约分</span></span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Fenshu&gt;::iterator i = v.begin(); i != v.end(); ++i)&#123;</span><br><span class="line">            <span class="comment">// printf("%lld,%lld\n",i-&gt;fenzi, i-&gt;fenmu );</span></span><br><span class="line">            sum +=  i-&gt;fenzi*mul/(i-&gt;fenmu);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sum == <span class="number">0</span>)&#123;  <span class="comment">// 采坑1:除0问题</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 由于读取的设定,所以其实只有分子会是负数, yue也可能是负数</span></span><br><span class="line">            ll yue = <span class="built_in">abs</span>(biggestNum(sum, mul));</span><br><span class="line">            ll res_fenzi = sum/yue;</span><br><span class="line">            ll res_fenmu = mul/yue;</span><br><span class="line">            <span class="comment">// printf("sum:%lld\n", sum);</span></span><br><span class="line">            <span class="comment">// printf("%lld,%lld/%lld\n", yue, res_fenzi, res_fenmu);</span></span><br><span class="line">            <span class="comment">// printf("biggest:%lld\n", mul);</span></span><br><span class="line">            <span class="comment">// 需要化成真分数--&gt;采坑2:分子和为负数</span></span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">abs</span>(res_fenzi) &gt; res_fenmu) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res_fenzi%res_fenmu == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res_fenzi/res_fenmu);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld %lld/%lld\n"</span>, res_fenzi/res_fenmu, res_fenzi%res_fenmu, res_fenmu);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>, res_fenzi, res_fenmu);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        v.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲判断迭代器是否为空:就是拿返回的迭代器与.end()作比较。</p><p>踩坑记录：</p><ul><li>负数求余仍是负数,0求余任何数为0</li><li>分子为负数、0、正数的时候都得分别考虑</li><li>找到所有分母的最小公倍数==&gt;写成了找到两个分母最小公倍数中最大的</li></ul><p><strong>浮点错误的意思-PAT 、OJ</strong></p><ul><li>是否可能出现了一个数除以0的情况</li><li>是否可能出现了一个数取余0的情况</li><li>是否发生了数据溢出而导致的除以0或者取余0的情况</li></ul><h3 id="1083-list-grades-25"><a class="markdownIt-Anchor" href="#1083-list-grades-25"></a> <a href="https://www.nowcoder.com/pat/1/problem/4313" target="_blank" rel="noopener">1083 List Grades (25)</a></h3><blockquote><p>模拟题</p><p>考了输入输出+排序： 切割数据、操作符重载</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> N</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Record</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> id;</span><br><span class="line">    <span class="keyword">int</span>  grade;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 操作符重载</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Record &amp;that) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade &gt; that.grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">typedef</span> Record;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> row;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Record&gt; v;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="comment">// 获得行信息</span></span><br><span class="line">        getline(<span class="built_in">cin</span>, row);</span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(row)</span></span>;</span><br><span class="line"><span class="comment">// 分割出name</span></span><br><span class="line">        <span class="built_in">string</span> name;</span><br><span class="line">        getline(ss, name, <span class="string">' '</span>);</span><br><span class="line"><span class="comment">// 分割出id</span></span><br><span class="line">        <span class="built_in">string</span> id;</span><br><span class="line">        getline(ss, id, <span class="string">' '</span>);</span><br><span class="line"><span class="comment">// 通过stringstream分割出grade: int</span></span><br><span class="line">        <span class="keyword">int</span> grade;</span><br><span class="line">        ss &gt;&gt; grade;</span><br><span class="line"><span class="comment">// 存到vector中</span></span><br><span class="line">        Record* r = <span class="keyword">new</span> Record();</span><br><span class="line">        r-&gt;name = name;</span><br><span class="line">        r-&gt;id = id;</span><br><span class="line">        r-&gt;grade = grade;</span><br><span class="line">        v.emplace_back(*r);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 根据grade进行从大到小排序</span></span><br><span class="line">    sort(v.begin(), v.end());</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">bool</span> none = <span class="literal">true</span>; <span class="comment">// 是否有在区间中人</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (v[i].grade &gt;= a &amp;&amp; v[i].grade &lt;= b)&#123;</span><br><span class="line">            none = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; v[i].name &lt;&lt; <span class="string">" "</span> &lt;&lt; v[i].id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有符合条件的人</span></span><br><span class="line">    <span class="keyword">if</span> (none) <span class="built_in">cout</span> &lt;&lt; <span class="string">"NONE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此巩固复习一下&quot;操作符重载的知识&quot;:</p><blockquote><p>1.为了实现对自定义类型的加减操作。</p><ol start="2"><li>实现一个操作符重载的方式通常分为两种情况：</li></ol><ul><li><p>将操作符重载实现为类的成员函数；</p><ul><li>使用<code>O.operator#();</code></li></ul></li><li><p>操作符重载实现为非类的成员函数（即全局函数）。</p><ul><li>使用 <code>operator#(O);</code></li></ul><p>区别在于，成员函数默认有this指针；后者需要为每次操作传递两个参数</p></li></ul></blockquote><p>△大多数操作符都能重载，不能的为如下几个：<code>：</code>、<code>::</code>、<code>.*</code>、<code>?:</code>、<code>sizeof</code></p><p>▲重载运算符函数可以对运算符作出新的解释，但原有基本语义不变：</p><blockquote><p>不改变运算符的优先级<br>不改变运算符的结合性<br>不改变运算符所需要的操作数<br>不能创建新的运算符</p></blockquote><p>△一个运算符被重载后，原有意义没有失去，只是定义了相对一特定类的一个新运算符</p><p>++前缀、后缀</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 重载前缀递增运算符（ ++ ）： 不传参</span></span><br><span class="line">      Time <span class="keyword">operator</span>++ ()  </span><br><span class="line">      &#123;</span><br><span class="line">         ++minutes;          <span class="comment">// 对象加 1</span></span><br><span class="line">         <span class="keyword">if</span>(minutes &gt;= <span class="number">60</span>)  </span><br><span class="line">         &#123;</span><br><span class="line">            ++hours;</span><br><span class="line">            minutes -= <span class="number">60</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> Time(hours, minutes);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 重载后缀递增运算符（ ++ ）: 传参</span></span><br><span class="line">      Time <span class="keyword">operator</span>++( <span class="keyword">int</span> )         </span><br><span class="line">      &#123;</span><br><span class="line">         <span class="comment">// 保存原始值</span></span><br><span class="line">         <span class="function">Time <span class="title">T</span><span class="params">(hours, minutes)</span></span>;</span><br><span class="line">         <span class="comment">// 对象加 1</span></span><br><span class="line">         ++minutes;                    </span><br><span class="line">         <span class="keyword">if</span>(minutes &gt;= <span class="number">60</span>)</span><br><span class="line">         &#123;</span><br><span class="line">            ++hours;</span><br><span class="line">            minutes -= <span class="number">60</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 返回旧的原始值</span></span><br><span class="line">         <span class="keyword">return</span> T; </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>io操作符：</p><blockquote><p>▲<code>&lt;&lt;</code>操作符只能通过友元来实现</p><p>A： 如果要重载&lt;&lt;操作符输出结果，一般的写法是cout&lt;&lt;s;也即是说左侧不是<strong>成员函数</strong>或<strong>类可以通过this指针调用的量</strong>，这就造成必须使用两个参数的成员操作符重载，把第一个参数作为&lt;&lt;左侧参数，第二个参数做为&lt;&lt;右侧参数输入，然而会发现如： <code>ostream&amp; operator&lt;&lt;(ostream&amp; out, MyString&amp; s);*//报错，error:此运算符的参数太多*</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xxx</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> Complax &amp;c1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> Complax &amp;c1)&#123;</span><br><span class="line">    out &lt;&lt; <span class="string">"c1.a = "</span> &lt;&lt; c1.a &lt;&lt; <span class="string">"\t c1.b = "</span> &lt;&lt; c1.b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h2><p><a href="https://blog.csdn.net/zxc1364787928/article/details/85757131" target="_blank" rel="noopener">刷PAT好用到哭的函数</a></p><p><strong>好用的函数</strong></p><p>string-&gt;int</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法一</span></span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line"><span class="built_in">string</span> s = <span class="string">"123"</span>;</span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss &gt;&gt; grade;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法二</span></span><br><span class="line">stoi() <span class="comment">// 在cstring中</span></span><br></pre></td></tr></table></figure><p>int-&gt;string</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法一</span></span><br><span class="line">to_string()<span class="comment">// C++11之后才支持</span></span><br><span class="line"><span class="comment">// 法二</span></span><br><span class="line">itos()   <span class="comment">// cstring中</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pat冲冲冲&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pat冲冲冲&quot;&gt;&lt;/a&gt; PAT冲冲冲&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/9948053
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="Algorithm" scheme="https://nymrli.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>玩玩Stm32</title>
    <link href="https://nymrli.top/2019/10/15/%E7%8E%A9%E7%8E%A9Stm32/"/>
    <id>https://nymrli.top/2019/10/15/玩玩Stm32/</id>
    <published>2019-10-15T08:33:09.000Z</published>
    <updated>2019-10-18T08:56:46.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="玩玩stm32"><a class="markdownIt-Anchor" href="#玩玩stm32"></a> 玩玩Stm32</h1><h2 id="文件结构"><a class="markdownIt-Anchor" href="#文件结构"></a> 文件结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">G:.</span><br><span class="line">├───CORE<span class="comment"># startup_stm32f10x_hd.s汇编编写的启动文件</span></span><br><span class="line">|<span class="comment"># core_cm3.c底层函数</span></span><br><span class="line">├───HARDWARE<span class="comment"># 相关外设的初始化代码</span></span><br><span class="line">├───OBJ</span><br><span class="line">├───STM32F10x_FWLib<span class="comment"># 固件库包: GPIO/i2c/...</span></span><br><span class="line">│   ├───inc</span><br><span class="line">│   └───src</span><br><span class="line">├───SYSTEM<span class="comment"># 正点原子提供的常用、通用模块</span></span><br><span class="line">│   ├───delay</span><br><span class="line">│   ├───sys</span><br><span class="line">│   └───usart</span><br><span class="line">└───USER <span class="comment"># stm32f10x_it.c 中断管理文件</span></span><br><span class="line">    | <span class="comment"># stm32f10x.h </span></span><br><span class="line">    ├───Listings</span><br><span class="line">    └───Objects</span><br></pre></td></tr></table></figure><h3 id="编写规范"><a class="markdownIt-Anchor" href="#编写规范"></a> 编写规范：</h3><p>用户编写的执行代码写在main.c中,其中<code>#include &quot;stm32f10x.h&quot;</code>作用相当于C51的<code>#include &lt;reg51.h&gt;</code>，是操作寄存器的主要固件库文件,在任何地方引用到固件库函数时都需要导入这个文件。</p><p><code>stm32f10x_it.c、stm32f10x_it.h</code>, 专门存放中断服务函数的C文件 ,大多中断函数都 写在此文件中,方便 管理中断函数,但并不是一定要写在这里面。</p><h2 id="gpio"><a class="markdownIt-Anchor" href="#gpio"></a> GPIO</h2><p>◆端口复用功能<br>STM32的大部分端口都具有复用功能。<br>所谓复用,就是一些端口<em>不仅仅</em>可以做为通用lO口,还可以<em>复用</em>为一些外设引脚,比如PA9,PA10可以复用为STM32的<strong>串口</strong>1引脚。<br>▲作用：最大限度的利用端口资源</p><p>◆端口重映射功能<br>就是可以把某些功能引脚映射到其他引脚。<br>比如串口1默认引脚是PA9,PA10可以通过配置重映射映射到PB6,PB7<br>作用：为了方便布线</p><p>▲所有I0口都可以作为中断输入</p><h3 id="工作模式"><a class="markdownIt-Anchor" href="#工作模式"></a> 工作模式：</h3><ul><li>推挽输出：可以输出强高低电平</li><li>上拉输入: 一端是接地低电平,所以<strong>默认情况</strong>下另一端需要检测到<strong>高电平</strong>(按键扫描中,三个引脚需要设置为IPU,按下时&lt;==&gt;输入口检测到低电平)</li><li>下拉输入：(按下时&lt;==&gt;输入口检测到低电平)</li></ul><h3 id="gpio重要函数"><a class="markdownIt-Anchor" href="#gpio重要函数"></a> GPIO重要函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1个初始化函数：</span></span><br><span class="line">void GPIO_Init(GPIO_TypeDef* GPIOx,GPIO_InitTypeDef* GPIO_InitStruct)；</span><br><span class="line"><span class="comment">//2个读取输入电平函数：</span></span><br><span class="line">uint8t GPIO_ReadlinputDataBit(GPIO TypeDef* GPIOx,uint16_t GPIO_Pin)；</span><br><span class="line"><span class="keyword">uint16_t</span> GPIO_ReadinputData(GPIO_TypeDef* GPIOx)；</span><br><span class="line"><span class="comment">//2个读取输出电平函数：</span></span><br><span class="line">uint8t GPIO_ReadOutputDataBit(GPiO_TypeDef* GPiOx,uint16_t GPIO_Pin)；</span><br><span class="line">uint16t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)；</span><br><span class="line"><span class="comment">//4个设置输出电平函数：前两个常用,后两个不常用</span></span><br><span class="line">void GPIO_SetBits(GPIOTypeDef* GPIOx, uint16_t GPIOPin)；</span><br><span class="line">void GP1O_ResetBits(GPIOTypeDef GPIOx,uint16_t GPIOPin)；</span><br><span class="line">void GPIO_WriteBit(GPIOTypeDef* GPIOx,uint16_t GPIO_Pin,BitAction BitVal)；</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_Write</span><span class="params">(GPIOTypeDef* GPIOx, <span class="keyword">uint16_t</span> PortVal)</span></span></span><br></pre></td></tr></table></figure><h4 id="具体说明"><a class="markdownIt-Anchor" href="#具体说明"></a> 具体说明</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_Init</span><span class="params">(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="function"><span class="comment">GPIO_TypeDef为GPIO寄存器组合的类型</span></span></span><br><span class="line"><span class="function"><span class="comment">typedef struct&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  __IO uint32_t CRL;</span></span></span><br><span class="line"><span class="function"><span class="comment">  __IO uint32_t CRH;</span></span></span><br><span class="line"><span class="function"><span class="comment">  __IO uint32_t IDR;</span></span></span><br><span class="line"><span class="function"><span class="comment">  __IO uint32_t ODR;</span></span></span><br><span class="line"><span class="function"><span class="comment">  __IO uint32_t BSRR;</span></span></span><br><span class="line"><span class="function"><span class="comment">  __IO uint32_t BRR;</span></span></span><br><span class="line"><span class="function"><span class="comment">  __IO uint32_t LCKR;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125; GPIO_TypeDef;</span></span></span><br><span class="line"><span class="function"><span class="comment">GPIOx的选择可以为GPIOA-&gt;GPIOG</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="function"><span class="comment">typedef struct&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  uint16_t GPIO_Pin;           </span></span></span><br><span class="line"><span class="function"><span class="comment">  GPIOSpeed_TypeDef GPIO_Speed; </span></span></span><br><span class="line"><span class="function"><span class="comment">  GPIOMode_TypeDef GPIO_Mode;    </span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;GPIO_InitTypeDef;</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br></pre></td></tr></table></figure><p>初始化示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明结构体变量</span></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure；</span><br><span class="line"><span class="comment">//LEDO--&gt;PB.5端口配置</span></span><br><span class="line">GPIO InitStructure.GPIO Pin =GPIO_Pin_5；</span><br><span class="line"><span class="comment">//推挽输出</span></span><br><span class="line">GPIO InitStructure.GPIO Mode=GPIO_Mode_Out_PP；</span><br><span class="line"><span class="comment">//IO口速度为50MHz</span></span><br><span class="line">GPIO InitStructure.GPIO Speed=GPIO_Speed_50MHz；</span><br><span class="line"><span class="comment">//根据设定参数初始化GPIOB.5</span></span><br><span class="line">GPIO_Init(GPIOB,&amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure><p>▲在使用GPIO前,需要使能IO口时钟,调用函数<code>RCC_APB2PeriphColckCmd();</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RCC_APB2PeriphClockCmd</span><span class="params">(<span class="keyword">uint32_t</span> RCC_APB2Periph, FunctionalState NewState)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*RCC_APB2Periph 可以为</span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_AFIO  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_GPIOA </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_GPIOB </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_GPIOC </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_GPIOD </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_GPIOE </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_GPIOF </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_GPIOG </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_ADC1  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_ADC2  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM1  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_SPI1  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM8  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_USART1 </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_ADC3  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM15 </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM16 </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM17 </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM9  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM10 </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM11 </span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">NewState 为ENABLE / DISABLE</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br></pre></td></tr></table></figure><p>提示：不能通过IO口直接驱动大功率器件。</p><p>△复位之后，IO口默认为浮空状态，如果不接下拉电阻，那么电平不确定为高还是低电平。(到是小电流的时候，电流会直接通过下拉电阻到地，不会经过三极管；只有电流足够大，才会经过三极管)</p><h3 id="demo-跑马灯实验"><a class="markdownIt-Anchor" href="#demo-跑马灯实验"></a> demo : 跑马灯实验</h3><p><img src="/2019/10/15/玩玩Stm32/%E8%B7%91%E9%A9%AC%E7%81%AF.jpg" alt="跑马灯"></p><p>当将PE5设置为低电平时,通过上拉电阻连到VCC后,LED就能点亮。PE5被设置为高电平时与上拉高电平之间没有压差,此时LED熄灭。</p><h4 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 完整代码:</h4><p>led.c文件内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span> </span></span><br><span class="line"><span class="comment">// 在任何地方引用到固件库时都需要导入这个文件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOE,ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5;</span><br><span class="line">GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">GPIO_Init(GPIOB,&amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5;</span><br><span class="line">GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">GPIO_Init(GPIOE,&amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置为高电平,熄灭</span></span><br><span class="line">GPIO_SetBits(GPIOB, GPIO_Pin_5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.c文件内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"> delay_init();</span><br><span class="line"> LED_Init();</span><br><span class="line">     <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">         GPIO_SetBits(GPIOB,GPIO_Pin_5);</span><br><span class="line">         GPIO_SetBits(GPIOE,GPIO_Pin_5);</span><br><span class="line">         delay_ms(<span class="number">500</span>);</span><br><span class="line">      GPIO_ResetBits(GPIOB,GPIO_Pin_5);</span><br><span class="line">      GPIO_ResetBits(GPIOE,GPIO_Pin_5);</span><br><span class="line">         delay_ms(<span class="number">500</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="操作io口的三种方式"><a class="markdownIt-Anchor" href="#操作io口的三种方式"></a> 操作IO口的三种方式：</h3><ul><li>位操作：<code>#define BEEP PBout(8);</code>后<code>BEEP = 1</code></li><li>库函数：<code>GPIO_SetBits(GPIOB, GPIO_Pin_8);</code></li><li>寄存器：</li></ul><h2 id="中断管理"><a class="markdownIt-Anchor" href="#中断管理"></a> 中断管理</h2><blockquote><p>对STM32中断进行分组，组0~4。同时，对每个中断设置一个抢占优先级和一个响应优先级值。IP bit决定了对每个中断共有2^4(位) = 16级的中断优先级设置</p></blockquote><p><img src="/2019/10/15/玩玩Stm32/%E4%B8%AD%E6%96%AD%E5%88%86%E7%BB%84.jpg" alt="中断分组"></p><ul><li>高优先级的抢占优先级是可以<strong>打断</strong>正在进行的低抢占优先级中断的。</li><li>抢占优先级相同的中断，高响应优先级<strong>不可以打断</strong>低响应优先级的中断。</li><li>抢占优先级相同的中断，当两个中断<strong>同时发生</strong>的情况下，哪个响应优先级高，哪个先执行。</li><li>如果两个中断的抢占优先级和响应优先级<strong>都是一样</strong>的话，则看哪个中断先发生就先执行；</li></ul><p>总结：中断嵌套执行看抢占优先级；占优先级相同时,响应优先级高的先响应；两者都一样的话，执行顺序看发生的时间</p><p>△.优先级0最高，4最低。</p><p>▲.系统代码执行过程中，只设置一次中断优先，一般不会再改变分组。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中断优先级分组函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_PriorityGroupConfig</span><span class="params">(<span class="keyword">uint32_t</span> NVIC_PriorityGroup)</span></span></span><br><span class="line"><span class="function"><span class="comment">// demo: NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">// 对某个中断设置优先级</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_Init</span><span class="params">(NVIC_InitTypeDef* NVIC_InitStruct)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="function"><span class="comment">typedef struct&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  uint8_t NVIC_IRQChannel;                    </span></span></span><br><span class="line"><span class="function"><span class="comment">  uint8_t NVIC_IRQChannelPreemptionPriority;  </span></span></span><br><span class="line"><span class="function"><span class="comment">  uint8_t NVIC_IRQChannelSubPriority;         </span></span></span><br><span class="line"><span class="function"><span class="comment">  FunctionalState NVIC_IRQChannelCmd;         </span></span></span><br><span class="line"><span class="function"><span class="comment">&#125; NVIC_InitTypeDef;</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br></pre></td></tr></table></figure><blockquote><p>中断优先级控制的寄存器组：IP[240]对每个中断进行管理,STM32F10x系列一共有60个可屏蔽中断。全称是：Interrupt Priority Registers</p></blockquote><h3 id="中断优先级设置步骤"><a class="markdownIt-Anchor" href="#中断优先级设置步骤"></a> 中断优先级设置步骤</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//①统运行后先设置中断优先级分组。调用函数：//整个系统执行过程中，只设置一次中断分组。</span></span><br><span class="line">void NVIC_Priority_GroupConfig(uint32_t NVIC_PriorityGroup)；</span><br><span class="line"></span><br><span class="line"><span class="comment">//②针对每个中断，设置对应的抢占优先级和响应优先级：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> NVIC <span class="title">Init</span><span class="params">(NVIC_InitTypeDef* NVIC_Initstructy；</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">/* demo:</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">NVIC_InitStructure.NVIC_IRQChannel=EXTI3_IRQn://使能按键KEY1所在的外部中断通道</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=0x02：//抢占优先级2</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">NVIC_InitStructure.NVIC_IRQChannelSubPriority =0x01：</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">∥字优先级1</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">NVIC_InitStructure.NVIC_IRQChannelCmd =ENABLE://使能外部中断通道</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">NWIC_Init(&amp;WIC_Init Structure)：/根据NIC_InitStruct中指定的参数初始化外设NVIC寄存器</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">*/</span></span></span></span><br><span class="line"><span class="function"><span class="params">               </span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">//③如果需要挂起/解挂，查看中断当前激活状态，分别调用相关函数即可。</span></span></span></span><br></pre></td></tr></table></figure><h2 id="串口通信"><a class="markdownIt-Anchor" href="#串口通信"></a> 串口通信</h2><blockquote><p>异步: 跟系统时钟无关</p><p>同步: 跟系统时钟有关</p></blockquote><p>波特率计算方法:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi mathvariant="normal">T</mi><mi mathvariant="normal">x</mi></mrow><mi mathvariant="normal">/</mi><mrow><mi mathvariant="normal">R</mi><mi mathvariant="normal">x</mi></mrow><mspace width="1em"></mspace><mi>B</mi><mi>a</mi><mi>u</mi><mi>d</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo>=</mo><mfrac><mrow><msub><mi>f</mi><mrow><mi>P</mi><mi>C</mi><mi>L</mi><mi>K</mi><mi>x</mi></mrow></msub></mrow><mrow><mo>(</mo><mn>1</mn><mn>6</mn><mo>∗</mo><mi>U</mi><mi>S</mi><mi>A</mi><mi>R</mi><mi>T</mi><mi>D</mi><mi>I</mi><mi>V</mi><mo>)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\mathrm{Tx} / \mathrm{Rx} \quad Baud rate=\frac{f_{P C L K x}}{(16 * U S A R T D I V)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9322159999999999em;"></span><span class="strut bottom" style="height:1.452216em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">T</span><span class="mord mathrm">x</span></span><span class="mord mathrm">/</span><span class="mord textstyle uncramped"><span class="mord mathrm">R</span><span class="mord mathrm">x</span></span><span class="mord mspace quad"></span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord mathit">u</span><span class="mord mathit">d</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">a</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mord mathrm">6</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.10903em;">U</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathit">A</span><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="mord mathit" style="margin-right:0.07847em;">I</span><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="mclose">)</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.44610799999999995em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.10764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit">L</span><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><h3 id="baud_rate配置的一般步骤"><a class="markdownIt-Anchor" href="#baud_rate配置的一般步骤"></a> <img src="/2019/10/15/玩玩Stm32/baud_rate.jpg" alt="baud_rate">配置的一般步骤:</h3><p><img src="/2019/10/15/玩玩Stm32/E:%5Chexo%5Csource_posts%5C%E7%8E%A9%E7%8E%A9Stm32%5C%E4%B8%B2%E5%8F%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4.jpg" alt="串口配置的一般步骤"></p><ol><li>串口作为外设，需要使能:<code>RCC_APB2PeriphClockCmdO;</code>、以及使能GPIO的时钟</li><li>GPIO端口模式设置<code>GPIOInit0;</code>，模式设置为<code>GPIO_Mode_AFPP</code>复用推挽(PA.9/10复用为串口1)</li><li>串口参数初始化</li><li>使能串口USART Cma);</li><li>串口数据收发</li></ol><p>▲ <strong>UART串口<a href="http://bbs.elecfans.com/zhuti_wireless_1.html" target="_blank" rel="noopener">通信</a>只需连接TX，RX，GND</strong> ， <strong>一般不需要连接VCC</strong></p><blockquote><p>A：TX、RX是正负压的，所以有个地做参考就行了</p><p>A： 通信两端一般都有各自的供电电压，所以不需要VCC，只有一端没有电源的情况下才会用VCC向对方输送电源</p><p>A：就像像耳机只要联地、音频左、音频右，而不联vcc一个道理</p></blockquote><h3 id="正点原子提供的usart库"><a class="markdownIt-Anchor" href="#正点原子提供的usart库"></a> <strong>正点原子提供的USART库：</strong></h3><blockquote><p>以回车换行结束的协议</p></blockquote><p>usart.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USART_REC_LEN  200  <span class="comment">//定义最大接收字节数 200</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EN_USART1_RX 1<span class="comment">//使能（1）/禁止（0）串口1接收</span></span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">extern</span> u8  USART_RX_BUF[USART_REC_LEN]; <span class="comment">//接收缓冲,最大USART_REC_LEN个字节.末字节为换行符 </span></span><br><span class="line"><span class="keyword">extern</span> u16 USART_RX_STA;         <span class="comment">//接收状态标记</span></span><br><span class="line"><span class="comment">//如果想串口中断接收，请不要注释以下宏定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uart_init</span><span class="params">(u32 bound)</span></span>;</span><br></pre></td></tr></table></figure><p><img src="/2019/10/15/玩玩Stm32/E:%5Chexo%5Csource_posts%5C%E7%8E%A9%E7%8E%A9Stm32%5CUSART_RX_STA.jpg" alt="USART_RX_STA"></p><p>数据全保存在USART_RX_BUF中。根据STA的有效数据个数比如50个，将USART_RX_BUF中前50个数据拿出处理。处理完所有标志位将被清零</p><p>▲程序要求，发送的字符是以回车换行结束(Ox0D,0x0A)。</p><p>△串口调试助手里勾选&quot;发送新行&quot;选项</p><p>usart.c 程序理解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span>                <span class="comment">//串口1中断服务程序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 Res;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS <span class="comment">//如果SYSTEM_SUPPORT_OS为真，则需要支持OS.</span></span></span><br><span class="line">OSIntEnter();    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  <span class="comment">//接收中断(接收到的数据必须是0x0d 0x0a结尾)</span></span><br><span class="line">&#123;</span><br><span class="line">Res =USART_ReceiveData(USART1);<span class="comment">//读取接收到的数据(单个字符)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((USART_RX_STA&amp;<span class="number">0x8000</span>)==<span class="number">0</span>)<span class="comment">//没收到\n,即接收未完成</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(USART_RX_STA&amp;<span class="number">0x4000</span>)<span class="comment">//接收到了0x0d(\r)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Res!=<span class="number">0x0a</span>)USART_RX_STA=<span class="number">0</span>;<span class="comment">//如果下一个不是\n,那么接收错误,重新开始</span></span><br><span class="line"><span class="keyword">else</span> USART_RX_STA|=<span class="number">0x8000</span>;<span class="comment">//如果接受到\n,则接收完成,将USART_RX_STA bit15置1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//还没收到0X0D,即处理真正数据</span></span><br><span class="line">&#123;</span><br><span class="line">                <span class="comment">// 如果当前接收到\r,那么将Bit14置1</span></span><br><span class="line"><span class="keyword">if</span>(Res==<span class="number">0x0d</span>)USART_RX_STA|=<span class="number">0x4000</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">                    <span class="comment">// 将当前收到的字符Res存到数组USART_RX_BUF保存</span></span><br><span class="line">USART_RX_BUF[USART_RX_STA&amp;<span class="number">0X3FFF</span>]=Res ;</span><br><span class="line">                    <span class="comment">// 索引+1</span></span><br><span class="line">USART_RX_STA++;</span><br><span class="line">                    <span class="comment">// 如果数据超额,那么判断为接收错误</span></span><br><span class="line"><span class="keyword">if</span>(USART_RX_STA&gt;(USART_REC_LEN<span class="number">-1</span>))USART_RX_STA=<span class="number">0</span>;<span class="comment">//接收数据错误,重新开始接收  </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;    </span><br><span class="line">     &#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS <span class="comment">//如果SYSTEM_SUPPORT_OS为真，则需要支持OS.</span></span></span><br><span class="line">OSIntExit();   </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Res =USART_ReceiveData(USART1);</code>获得的是当前接收的字符，如果使用中断，那么调用<code>USART_SendData(USART1, Res)</code>就能接收一个字符，发送一个字符。</li><li>USART_RX_BUF的作用是，保存一次字符串发送过来的所有数据</li><li>USART_RX_STA是个寄存器，通过Bit14，Bit15来判断接收是否有效</li></ul><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"> u16 t;  </span><br><span class="line">u16 len;</span><br><span class="line">u16 times=<span class="number">0</span>;</span><br><span class="line">delay_init();     <span class="comment">//延时函数初始化  </span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级</span></span><br><span class="line">uart_init(<span class="number">115200</span>); <span class="comment">//串口初始化为115200</span></span><br><span class="line"> LED_Init();     <span class="comment">//LED端口初始化</span></span><br><span class="line">KEY_Init();          <span class="comment">//初始化与按键连接的硬件接口</span></span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(USART_RX_STA&amp;<span class="number">0x8000</span>)&#123;   </span><br><span class="line">len=USART_RX_STA&amp;<span class="number">0x3fff</span>;<span class="comment">//得到此次接收到的数据长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n您发送的消息为:\r\n\r\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)&#123;</span><br><span class="line">USART_SendData(USART1, USART_RX_BUF[t]);<span class="comment">//向串口1发送数据</span></span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TC)!=SET);<span class="comment">//等待发送结束</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n\r\n"</span>);<span class="comment">//插入换行</span></span><br><span class="line">USART_RX_STA=<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">times++;</span><br><span class="line"><span class="keyword">if</span>(times%<span class="number">5000</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n战舰STM32开发板 串口实验\r\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"正点原子@ALIENTEK\r\n\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(times%<span class="number">200</span>==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">"请输入数据,以回车键结束\n"</span>);  </span><br><span class="line"><span class="keyword">if</span>(times%<span class="number">30</span>==<span class="number">0</span>)LED0=!LED0;<span class="comment">//闪烁LED,提示系统正在运行.</span></span><br><span class="line">delay_ms(<span class="number">10</span>);   </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>▲printf可以将发送到串口，默认是USART1，如果需要修改，在usart.c的fputc函数中,将USART1修改即可</p><h2 id="外部中断"><a class="markdownIt-Anchor" href="#外部中断"></a> 外部中断</h2><p>每个IO口都可以作为外部中断输入</p><blockquote><p>IO与中断线的映射,16* 7 = 112, 一共有16个中断线</p><p>Q:什么是中断线,能干什么? A:中断线能发出中断请求</p></blockquote><p>△.同一时刻只有一个引脚能映射到某根中断线</p><p>原理:</p><p>GPIOX.0映射到EXT10<br>GPIOX.1映射到EXT11<br>GPIOX.15映射到EXTI15<br>e.g.PA.0~PG.0可以映射到EXIT0</p><p>I0口外部中断在中断向量表中只分配了7个<strong>中断向量</strong>，也就是只能使用7个中断服务函数</p><h3 id="常用库函数"><a class="markdownIt-Anchor" href="#常用库函数"></a> 常用库函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_EXTILineConig</span><span class="params">(<span class="keyword">uint8_t</span> GPIO,<span class="keyword">uint8_t</span> PortSource,<span class="keyword">uint8_t</span> GPIO_PinSource)</span></span></span><br><span class="line"><span class="function"><span class="comment">//设置IO口与中断线的映射关系：</span></span></span><br><span class="line">exp:GPIO_EXTILineContig(GPIO_PortSourceGPIOE, GPIO_PinSource2)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTIInit</span><span class="params">(EXTI_InitTypeDef* EXTI_InitStruct)</span></span>;</span><br><span class="line"><span class="comment">//初始化中断线：触发方式等</span></span><br><span class="line"><span class="function">ITStatus <span class="title">EXTI_GetlTStatus</span><span class="params">(<span class="keyword">uint32_t</span> EXTI_hLine)</span></span>;</span><br><span class="line"><span class="comment">//判断中断线中断状态，是否发生</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI_ClearlTPendingBit</span><span class="params">(<span class="keyword">uint32_t</span> EXTI_Line)</span></span></span><br><span class="line"><span class="function"><span class="comment">//清除中断线上的中断标志位</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EXTI_InitStructure.EXTI_Line=EXTI_Line2;<span class="comment">// 指定要配置的中断线</span></span><br><span class="line">EXTI_InitStructure.EXTI_Mode =EXTI_Mode_Interrupt;<span class="comment">// 模式:事件or中断</span></span><br><span class="line">EXTI_InitStructure.EXTI_Trigger =EXTI_Trigger_Faling;<span class="comment">//上升沿、下降沿、双触发沿</span></span><br><span class="line">EXTI_InitStructure.EXTI_LineCmd =ENABLE;<span class="comment">// 使能、失能</span></span><br><span class="line">EXTI_Init(&amp; EXTI_InitStructure);</span><br></pre></td></tr></table></figure><h3 id="配置的一般步骤"><a class="markdownIt-Anchor" href="#配置的一般步骤"></a> 配置的一般步骤</h3><p><img src="/2019/10/15/玩玩Stm32/E:%5Chexo%5Csource_posts%5C%E7%8E%A9%E7%8E%A9Stm32%5C%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD.jpg" alt="外部中断"></p><p>demo：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTIX_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"> <span class="comment">// 声明初始化结构体变量</span></span><br><span class="line"> EXTI_InitTypeDef EXTI_InitStructure;</span><br><span class="line"> NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line"></span><br><span class="line">    KEY_Init(); <span class="comment">//按键端口初始化</span></span><br><span class="line"></span><br><span class="line">  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);<span class="comment">//使能复用功能时钟</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//GPIOE.2 中断线以及中断初始化配置   下降沿触发</span></span><br><span class="line">  GPIO_EXTILineConfig(GPIO_PortSourceGPIOE,GPIO_PinSource2);</span><br><span class="line"></span><br><span class="line">  EXTI_InitStructure.EXTI_Line=EXTI_Line2;<span class="comment">//KEY2</span></span><br><span class="line">  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;</span><br><span class="line">  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;</span><br><span class="line">  EXTI_InitStructure.EXTI_LineCmd = ENABLE;</span><br><span class="line">  EXTI_Init(&amp;EXTI_InitStructure); <span class="comment">//根据EXTI_InitStruct中指定的参数初始化外设EXTI寄存器</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// ▲由于参数一致，所以不需要修改EXTI_InitStructure的功能参数</span></span><br><span class="line">   <span class="comment">//GPIOE.3  中断线以及中断初始化配置 下降沿触发 //KEY1</span></span><br><span class="line">  GPIO_EXTILineConfig(GPIO_PortSourceGPIOE,GPIO_PinSource3);</span><br><span class="line">  EXTI_InitStructure.EXTI_Line=EXTI_Line3;</span><br><span class="line">  EXTI_Init(&amp;EXTI_InitStructure);  <span class="comment">//根据EXTI_InitStruct中指定的参数初始化外设EXTI寄存器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//GPIOA.0  中断线以及中断初始化配置 上升沿触发 PA0  WK_UP</span></span><br><span class="line"> GPIO_EXTILineConfig(GPIO_PortSourceGPIOA,GPIO_PinSource0); </span><br><span class="line"></span><br><span class="line">  EXTI_InitStructure.EXTI_Line=EXTI_Line0;</span><br><span class="line">  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;</span><br><span class="line">  EXTI_Init(&amp;EXTI_InitStructure);<span class="comment">//根据EXTI_InitStruct中指定的参数初始化外设EXTI寄存器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;<span class="comment">//使能按键WK_UP所在的外部中断通道</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0x02</span>;<span class="comment">//抢占优先级2， </span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0x03</span>;<span class="comment">//子优先级3</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//使能外部中断通道</span></span><br><span class="line">  NVIC_Init(&amp;NVIC_InitStructure); </span><br><span class="line"></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn;<span class="comment">//使能按键KEY2所在的外部中断通道</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0x02</span>;<span class="comment">//抢占优先级2， </span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0x02</span>;<span class="comment">//子优先级2</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//使能外部中断通道</span></span><br><span class="line">  NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;<span class="comment">//使能按键KEY1所在的外部中断通道</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0x02</span>;<span class="comment">//抢占优先级2 </span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0x01</span>;<span class="comment">//子优先级1 </span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//使能外部中断通道</span></span><br><span class="line">  NVIC_Init(&amp;NVIC_InitStructure);    <span class="comment">//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//外部中断2服务程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI2_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);<span class="comment">//消抖</span></span><br><span class="line"><span class="keyword">if</span>(KEY2==<span class="number">0</span>)  <span class="comment">//按键KEY2</span></span><br><span class="line">&#123;</span><br><span class="line">LED0=!LED0;</span><br><span class="line">&#125; </span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line2);  <span class="comment">//清除LINE2上的中断标志位  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//外部中断3服务程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI3_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);<span class="comment">//消抖</span></span><br><span class="line"><span class="keyword">if</span>(KEY1==<span class="number">0</span>) <span class="comment">//按键KEY1</span></span><br><span class="line">&#123; </span><br><span class="line">LED1=!LED1;</span><br><span class="line">&#125; </span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line3);  <span class="comment">//清除LINE3上的中断标志位  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI4_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);<span class="comment">//消抖</span></span><br><span class="line"><span class="keyword">if</span>(KEY0==<span class="number">0</span>) <span class="comment">//按键KEY0</span></span><br><span class="line">&#123;</span><br><span class="line">LED0=!LED0;</span><br><span class="line">LED1=!LED1; </span><br><span class="line">&#125; </span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line4);  <span class="comment">//清除LINE4上的中断标志位  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">delay_init();     <span class="comment">//延时函数初始化  </span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级</span></span><br><span class="line">uart_init(<span class="number">115200</span>); <span class="comment">//串口初始化为115200</span></span><br><span class="line"> LED_Init();  <span class="comment">//初始化与LED连接的硬件接口</span></span><br><span class="line">BEEP_Init();         <span class="comment">//初始化蜂鸣器端口</span></span><br><span class="line">KEY_Init();         <span class="comment">//初始化与按键连接的硬件接口</span></span><br><span class="line">EXTIX_Init(); <span class="comment">//外部中断初始化</span></span><br><span class="line">LED0=<span class="number">0</span>;<span class="comment">//点亮LED0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"OK\r\n"</span>);</span><br><span class="line">delay_ms(<span class="number">1000</span>);  </span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录:</h2><h3 id="u8-u16-size_t是什么类型"><a class="markdownIt-Anchor" href="#u8-u16-size_t是什么类型"></a> u8、u16、Size_t是什么类型?</h3><h4 id="u8-u16"><a class="markdownIt-Anchor" href="#u8-u16"></a> u8、u16</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!&lt; Signed integer types  */</span></span><br><span class="line"><span class="keyword">typedef</span>   <span class="keyword">signed</span> <span class="keyword">char</span>     <span class="keyword">int8_t</span>;<span class="comment">//有符号8位数</span></span><br><span class="line"><span class="keyword">typedef</span>   <span class="keyword">signed</span> <span class="keyword">short</span>    <span class="keyword">int16_t</span>;<span class="comment">//有符号16位数</span></span><br><span class="line"><span class="keyword">typedef</span>   <span class="keyword">signed</span> <span class="keyword">long</span>     <span class="keyword">int32_t</span>;<span class="comment">//有符号32位数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*!&lt; Unsigned integer types  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>     <span class="keyword">uint8_t</span>;  <span class="comment">//无符号8位数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span>    <span class="keyword">uint16_t</span>;<span class="comment">//无符号16位数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>     <span class="keyword">uint32_t</span>;<span class="comment">//无符号32位数</span></span><br></pre></td></tr></table></figure><h4 id="size_t"><a class="markdownIt-Anchor" href="#size_t"></a> size_t</h4><p>size_t是C++标准在stddef.h中定义的。这个类型足以用来表示对象的大小。size_t的真实类型与操作系统有关。size_t在32位架构上是4字节，在64位架构上是8字节，在不同架构上进行编译时需要注意这个问题。而int在不同架构下都是4字节，与size_t不同；且int为带符号数，size_t为无符号数。</p><h3 id="电平相关知识"><a class="markdownIt-Anchor" href="#电平相关知识"></a> 电平相关知识</h3><p>单片机是一种数字集成芯片，数字电路中只有两种电平高电平和低电平。为了让大家在刚起步的时候对电平特性有一个清晰的认识，我们暂且定义单片机输出与输入为<strong>TTL</strong>电平，其中高电平为+5V,低电平为0V。计算机的串口为<strong>RS-232C</strong>电平。这里要强调的是，RS-232C电平为负逻辑电平。因此当计算机与单片机之间要通信时，需要加电平转换芯片，我们在TX-1C单片机实验板上所加的电平转换芯片是MAX232 。</p><p>常用的逻辑电平有TTL、CMOS、LVTTL、ECL、PECL、 GTL 、RS-232. RS-422. RS-485、LVDS等.其中TTL和CMOS的逻辑电平按典型电压可分为四类：5V系列(5V TL和5V CMOS)、3.3V 系列，2.5V 系列和1.8V系列，</p><p>T电平信号用的最多，这是因为，数据表示通常采用二进制，+5V等价于逻辑1，0V等价于逻辑0）.这被称为TTL（晶体管一晶体管逻辑电平）信号系统，这是计算机处理器控制的设备内部各部分之间通信的标准技术。TTL电平信号对于计算机处理器控制的设备内部的数据传输是很理想的，首先计算机处理器控制的设备内部的数据传输对于电源的要求不高，热损耗也较低，另外TTL电平信号直接与集成电路连接而不需要价格昂贵的线路驱动器</p><h3 id="功能函数"><a class="markdownIt-Anchor" href="#功能函数"></a> 功能函数</h3><p>判断u8数组开头</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">/////////////////////////</span></span><br><span class="line"><span class="comment">// 判断u8 arr开头是否为str //</span></span><br><span class="line"><span class="comment">////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">u8cmp</span><span class="params">(u8 *arr, <span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>( arr[i] != str[i])&#123;</span><br><span class="line">                <span class="comment">// arr shorter than str</span></span><br><span class="line">                <span class="keyword">if</span> (arr[i] == <span class="string">'\0'</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                <span class="comment">// not start with</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// arr start with str</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;玩玩stm32&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#玩玩stm32&quot;&gt;&lt;/a&gt; 玩玩Stm32&lt;/h1&gt;
&lt;h2 id=&quot;文件结构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#文件结构&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="嵌入式" scheme="https://nymrli.top/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>蒙特卡洛树搜索MCTS</title>
    <link href="https://nymrli.top/2019/10/07/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A0%91%E6%90%9C%E7%B4%A2MCTS/"/>
    <id>https://nymrli.top/2019/10/07/蒙特卡洛树搜索MCTS/</id>
    <published>2019-10-07T09:18:02.000Z</published>
    <updated>2019-10-08T11:31:16.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="蒙特卡洛树搜索mcts"><a class="markdownIt-Anchor" href="#蒙特卡洛树搜索mcts"></a> 蒙特卡洛树搜索MCTS</h1><h2 id="跟围棋的关联"><a class="markdownIt-Anchor" href="#跟围棋的关联"></a> 跟围棋的关联</h2><h3 id="alphago"><a class="markdownIt-Anchor" href="#alphago"></a> AlphaGo</h3><h3 id="alphago-zero"><a class="markdownIt-Anchor" href="#alphago-zero"></a> AlphaGo Zero</h3><ul><li>蒙特卡洛树搜索——内含用于树遍历的 PUCT 函数的某些变体</li><li>残差卷积神经网络——其中的策略和价值网络被用于评估棋局，以进行下一步落子位置的先验概率估算。</li><li>强化学习——通过自我对弈进行神经网络训练</li></ul><p>AlphaGo Zero跟AlphaGo的最大区别是抛弃人类棋谱的，完全通过自我对弈来学会下棋的，并且仅用40小时就到达了AlphaGo的棋力。</p><p>过程是这样，首先生成棋谱，然后将棋谱作为输入训练神经网络，训练好的神经网络用来预测落子和胜率。如下图：</p><p><img src="https://img-blog.csdn.net/2018031214442364" alt=""></p><p>在AlphaGo Zero中蒙特卡洛树搜索主要是用来生成棋谱的</p><h2 id="蒙特卡洛树搜索"><a class="markdownIt-Anchor" href="#蒙特卡洛树搜索"></a> 蒙特卡洛树搜索</h2><blockquote><p>Q:MCTS干了什么?</p><p>A:给出一个「游戏状态」并选择「胜率最高的下一步」</p><p>适用于<strong>有限两人零和回合制游戏</strong></p></blockquote><p>MCTS算法是一种决策算法，每次模拟（simulation）分为4步：</p><ol><li>Tree traversal(树的遍历):<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mi>C</mi><mi>B</mi><mn>1</mn><mrow><mo fence="true">(</mo><msub><mi>S</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow><mo>=</mo><mover accent="true"><mrow><msub><mi>V</mi><mrow><mi>i</mi></mrow></msub></mrow><mo stretchy="true">‾</mo></mover><mo>+</mo><mi>c</mi><msqrt><mrow><mfrac><mrow><mi>log</mi><mi>N</mi></mrow><mrow><msub><mi>n</mi><mrow><mi>i</mi></mrow></msub></mrow></mfrac></mrow></msqrt><mo separator="true">,</mo><mi>c</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">U C B 1\left(S_{i}\right)=\overline{V_{i}}+c \sqrt{\frac{\log N}{n_{i}}}, c=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.226118em;"></span><span class="strut bottom" style="height:1.84002em;vertical-align:-0.613902em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">1</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="overline mord"><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord"><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.22222em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span style="top:-0.80333em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped overline-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathit">c</span><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.036118000000000094em;"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing size2">√</span></span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord reset-textstyle textstyle cramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.44610799999999995em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mord mathit" style="margin-right:0.10903em;">N</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span><span style="top:-1.146118em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathit">c</span><span class="mrel">=</span><span class="mord mathrm">2</span></span></span></span><br>其中，表<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><msub><mi>V</mi><mrow><mi>i</mi></mrow></msub></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{V_{i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8833300000000001em;"></span><span class="strut bottom" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="overline mord"><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord"><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.22222em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span style="top:-0.80333em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped overline-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span></span></span></span>示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>状态的平均value(下面会进一步解释）</li><li>Node expansion(拓展节点)</li><li>Rollout (random simulation)(模拟)</li><li>Backpropagation(方向传播)</li></ol><h3 id="蒙特卡洛计算过程"><a class="markdownIt-Anchor" href="#蒙特卡洛计算过程"></a> 蒙特卡洛计算过程</h3><blockquote><p>UCB(Upper Confidence Bounds置信上限)其实就是UCT(UCB for Tree)中需要计算的值，而UCT是根据UCB值来迭代的算法</p></blockquote><p>第一、二步的流程（遍历、拓展节点）：</p><p>1.从状态S0开始，要在下面两个动作中进行选择（假设只有两个动作可选），选择的标准就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mi>C</mi><mi>B</mi><mn>1</mn><mrow><mo fence="true">(</mo><msub><mi>S</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">U C B 1\left(S_{i}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">1</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span></span></span></span>值，<strong>选择最大化 UCT 的节点作为下一个节点</strong>。初始情况两个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mi>C</mi><mi>B</mi><mn>1</mn><mrow><mo fence="true">(</mo><msub><mi>S</mi><mrow><mn>1</mn></mrow></msub><mo fence="true">)</mo></mrow><mo>=</mo><mi>U</mi><mi>C</mi><mi>B</mi><mn>1</mn><mrow><mo fence="true">(</mo><msub><mi>S</mi><mrow><mn>2</mn></mrow></msub><mo fence="true">)</mo></mrow><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">U C B 1\left(S_{1}\right)=U C B 1\left(S_{2}\right)=\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">1</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.10903em;">U</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">1</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathrm">∞</span></span></span></span>,按顺序选择S1<br>2.判断目前的结点S1(current node)是不是叶节点，这里叶节点是指其没有被展开（expansion）过。<br>3.接下来，按照流程图，需要判断结点S1被访问的系数是否为0。是0，则要进行Rollout。(Rollout其实就是在接下来的步骤中每一步都随机采取动作，直到停止点（围棋中的对局结束），得到一个最终的value。)==&gt;假设Rollout最终值为20.<br>4.Backpropagation，即利用Rollout最终得到的value来更新路径上每个结点的T,N值。(之后把Rollout的结果删除：MCTS的想法就是要从出S0发不断的进行迭代，不断更新结点值，直到达到一定的迭代次数或者时间。)<br>5.如果没有达到一定的迭代次数或者时间，继续从根节点进行1-4</p><p><img src="https://img-blog.csdn.net/20171024211039397?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGp5dDI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>第三步rollout模拟:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*这个函数接受一个表示博弈状态的参数，然后返回下一步行动。实际上，它被设计得非常快，从而可以让很多模拟快速进行——默认的 rollout policy 函数是一个均衡分布的随机数生成函数。*/</span><br><span class="line">Rollout(S_i):</span><br><span class="line">loop forever:</span><br><span class="line">/* 如果当前状态结点是个终止结点 */</span><br><span class="line">if S_i is a terminal state:</span><br><span class="line">/* 那么直接返回它的value值*/</span><br><span class="line">return value(S_i)</span><br><span class="line">/* 找到下一个动作 */</span><br><span class="line">A_i = random(available-actions(S_i))</span><br><span class="line">/* 选择下一个状态进行拓展 */</span><br><span class="line">S_i = simulate(A_i,S_i)</span><br></pre></td></tr></table></figure><p>例子说明见:<a href="https://blog.csdn.net/ljyt2/article/details/78332802" target="_blank" rel="noopener">蒙特卡洛树搜索（MCTS）算法-计算过程</a>，视频讲解见B站:<a href="https://www.bilibili.com/video/av67847675?from=search&amp;seid=7487786042631726209" target="_blank" rel="noopener">【MCTS】Youtube上迄今为止最好的蒙特卡罗树搜索讲解</a></p><p>相比极大极小法（minimax）。这个策略假定你的对手发挥了最好的博弈水平，然后以此调整策略来最大化你的收益。简单地说，给定状态，你想要找到一个能产生最大收益的 move ，假定你的对手想要最小化你的收益（最大化他自己的收益）。因此，名字叫作<strong>极小化极大</strong>。</p><p><strong>极小化极大算法的最大劣势</strong>是，需要扩展整个博弈树。对于分支因子较高的博弈（例如围棋或者国际象棋），这会导致庞大的博弈树从而失败。</p><h3 id="uct算法树的置信上限ucb-for-trees"><a class="markdownIt-Anchor" href="#uct算法树的置信上限ucb-for-trees"></a> UCT算法——树的置信上限(UCB for Trees)</h3><blockquote><p>Upper Confidence Bounds(置信上限)</p></blockquote><p>UCT是一个让我们从已访问的节点中选择下一个节点来进行遍历的函数，也是MCTS的核心函数。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mi>C</mi><mi>T</mi><mrow><mo fence="true">(</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo separator="true">,</mo><mi>v</mi><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><mi>Q</mi><mrow><mo fence="true">(</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow><mrow><mi>N</mi><mrow><mo fence="true">(</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow></mfrac><mo>+</mo><mi>c</mi><msqrt><mrow><mfrac><mrow><mi>log</mi><mo>(</mo><mi>N</mi><mo>(</mo><mi>v</mi><mo>)</mo><mo>)</mo></mrow><mrow><mi>N</mi><mrow><mo fence="true">(</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow></mfrac></mrow></msqrt></mrow><annotation encoding="application/x-tex">UCT\left(v_{i}, v\right)=\frac{Q\left(v_{i}\right)}{N\left(v_{i}\right)}+c \sqrt{\frac{\log (N(v))}{N\left(v_{i}\right)}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.23001em;"></span><span class="strut bottom" style="height:1.84002em;vertical-align:-0.6100099999999999em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">Q</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">+</span><span class="mord mathit">c</span><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.0400100000000001em;"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing size2">√</span></span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord reset-textstyle textstyle cramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span><span style="top:-1.15001em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span></span></span></span></p><h3 id="exploitation-component利用"><a class="markdownIt-Anchor" href="#exploitation-component利用"></a> exploitation component(利用)</h3><p>第一部分是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>Q</mi><mrow><mo fence="true">(</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow><mrow><mi>N</mi><mrow><mo fence="true">(</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{Q\left(v_{i}\right)}{N\left(v_{i}\right)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.01em;"></span><span class="strut bottom" style="height:1.53em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">Q</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span> ，也称作exploitation component</p><p>可以看做是子节点Vi的胜率估计（总收益/总次数=平均每次的收益）。但是不能只选择胜率高的下一步，因为这种贪婪方式的搜索会很快导致游戏结束，这往往会导致搜索不充分，错过最优解。</p><p>举个简单的例子。现在假设MCTS的UCT函数只用了探索成分，从根节点开始，我们对所有子节点进行了一次模拟，然后在下一步中只访问至少赢了一次的子节点。那么在第一次模拟中那些不幸未被选中的节点（实际中rollout策略函数通常是随机的）将会被立刻抛弃</p><h3 id="exploration-component探索"><a class="markdownIt-Anchor" href="#exploration-component探索"></a> exploration component(探索)</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><msqrt><mrow><mfrac><mrow><mi>log</mi><mo>(</mo><mi>N</mi><mo>(</mo><mi>v</mi><mo>)</mo><mo>)</mo></mrow><mrow><mi>N</mi><mrow><mo fence="true">(</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow></mfrac></mrow></msqrt></mrow><annotation encoding="application/x-tex">c \sqrt{\frac{\log (N(v))}{N\left(v_{i}\right)}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.23001em;"></span><span class="strut bottom" style="height:1.84002em;vertical-align:-0.6100099999999999em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.0400100000000001em;"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing size2">√</span></span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord reset-textstyle textstyle cramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span><span style="top:-1.15001em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span></span></span></span>，这个成分更倾向于那些想对较少被探索的节点N(Vi)小。</p><p>参数c是exploitation和exploration之间的折中系数。</p><h3 id="mcts的终止"><a class="markdownIt-Anchor" href="#mcts的终止"></a> MCTS的终止</h3><p>终止条件(or)：</p><ul><li>达到一定的迭代次数</li><li>达到规定的搜索时间</li></ul><p>当MSCT程序结束时，最佳的移动通常是访问次数最多的那个节点，也是UCT最大的点。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考:</h2><p><a href="https://blog.csdn.net/mergerly/article/details/83788862" target="_blank" rel="noopener">深度学习入门：AlphaGo Zero蒙特卡洛树搜索</a></p><p><a href="https://blog.csdn.net/ljyt2/article/details/78332802" target="_blank" rel="noopener">蒙特卡洛树搜索（MCTS）算法-计算过程</a></p><p><a href="https://www.bilibili.com/video/av67847675?from=search&amp;seid=7487786042631726209" target="_blank" rel="noopener">【MCTS】Youtube上迄今为止最好的蒙特卡罗树搜索讲解</a></p><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现:</h2><p><a href="https://blog.csdn.net/white_gl/article/details/56521880" target="_blank" rel="noopener">python实现的基于蒙特卡洛树搜索(MCTS)与UCB的五子棋游戏</a></p><p><a href="https://github.com/int8/monte-carlo-tree-search" target="_blank" rel="noopener">mctspy：蒙特卡洛树搜索算法的python实现</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;蒙特卡洛树搜索mcts&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#蒙特卡洛树搜索mcts&quot;&gt;&lt;/a&gt; 蒙特卡洛树搜索MCTS&lt;/h1&gt;
&lt;h2 id=&quot;跟围棋的关联&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre
      
    
    </summary>
    
    
      <category term="RL" scheme="https://nymrli.top/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>Python多进程</title>
    <link href="https://nymrli.top/2019/10/06/Python%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>https://nymrli.top/2019/10/06/Python多进程/</id>
    <published>2019-10-06T12:17:44.000Z</published>
    <updated>2019-10-07T04:15:31.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python多进程"><a class="markdownIt-Anchor" href="#python多进程"></a> Python多进程</h1><h2 id="守护进程"><a class="markdownIt-Anchor" href="#守护进程"></a> 守护进程</h2><blockquote><p>守护进程其实就是**“子进程“是否伴随主进程一起结束**:守护==&gt;伴随，即守护进程会伴随主进程的代码运行完毕后而死掉</p></blockquote><p>进程：当父进程需要将一个任务并发出去执行，需要将该任务放到以个子进程里<br>守护：当该子进程内的代码在父进程代码运行完毕后就没有存在的意义了，就应该<br>将该子进程设置为守护进程，会在父进程代码结束后死掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"end123"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">456</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"end456"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1=Process(target=foo)</span><br><span class="line">    p2=Process(target=bar)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将子进程p1设置为守护进程，守护进程要放在进程start之前</span></span><br><span class="line">    <span class="comment"># 所以p1会在print("main-------")打印完成后死掉，所以p1进程不会打印</span></span><br><span class="line">    p1.daemon=<span class="keyword">True</span></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    print(<span class="string">"main-------"</span>)</span><br></pre></td></tr></table></figure><h2 id="进程锁"><a class="markdownIt-Anchor" href="#进程锁"></a> 进程锁</h2><blockquote><p>主要使用multiprocessing下的Lock对象</p><p>就是将要执行任务的部门代码（只涉及到修改共享数据的代码）变成串行，作用是让进程不乱掉，下面代码就是可以避免 i 乱打印</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(l, i)</span>:</span></span><br><span class="line">    l.acquire()    <span class="comment">#锁住进程</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">'hello world'</span>, i)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        l.release()    <span class="comment">#释放锁</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        Process(target=f, args=(lock, num)).start()</span><br></pre></td></tr></table></figure><p>（理解为用锁来限制，同一时间只能让一个人拿着锁去改数据，先抢到锁的人<br>就有优先购买的权限）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要就是用的这三个</span></span><br><span class="line">lock = lock()</span><br><span class="line">lock.acquire() <span class="comment"># 拿钥匙，开门</span></span><br><span class="line">lock.release() <span class="comment">#还钥匙，关门</span></span><br></pre></td></tr></table></figure><h3 id="抢票demo"><a class="markdownIt-Anchor" href="#抢票demo"></a> 抢票demo</h3><p>写法一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟抢票软件的原理：</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Lock,Process</span><br><span class="line"><span class="keyword">import</span> json,os,time,random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span>               </span><br><span class="line">    <span class="comment">#查票功能实现并行访问</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'db.txt'</span>,<span class="string">'rt'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic=json.load(f)</span><br><span class="line">        print(<span class="string">'%s 查看余票数为 %s'</span>%(os.getpid(),dic[<span class="string">'count'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span>               </span><br><span class="line">    <span class="comment">#购票因为牵涉到对后台数据的修改，所以加互斥锁目的是逐一进行访问修改，以免数据错乱</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'db.txt'</span>, <span class="string">'rt'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">'count'</span>] &gt;<span class="number">0</span>:</span><br><span class="line">        <span class="comment">#有票</span></span><br><span class="line">        dic[<span class="string">'count'</span>]-=<span class="number">1</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))         </span><br><span class="line">        <span class="comment">#在购票时，模拟网络延迟...</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'db.txt'</span>, <span class="string">'wt'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(dic,f)</span><br><span class="line">        print(<span class="string">'%s 购票成功'</span>%os.getpid())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'%s 没有余票'</span>%os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(mutex)</span>:</span></span><br><span class="line">    <span class="comment">#查看（并行访问）</span></span><br><span class="line">    check()</span><br><span class="line">    <span class="comment">#抢票（加入互斥锁，实现串行访问，先到先得原则）</span></span><br><span class="line">    mutex.acquire()</span><br><span class="line">    get()</span><br><span class="line">    mutex.release() <span class="comment">#第一个购买完成后，解锁，后续进入继续购买</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">     mutex=Lock()   <span class="comment">#调用Lock类拿到一个对象</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">         p=Process(target=task,args=(mutex,))</span><br><span class="line">         p.start()</span><br></pre></td></tr></table></figure><p>写法二:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 火车票</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Lock</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ticket'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line">    print(<span class="string">'余票: %s'</span>%dic[<span class="string">'ticket'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_ticket</span><span class="params">(i,lock)</span>:</span></span><br><span class="line">    lock.acquire() <span class="comment">#拿钥匙进门</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ticket'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">'ticket'</span>] &gt; <span class="number">0</span> :</span><br><span class="line">        dic[<span class="string">'ticket'</span>] -= <span class="number">1</span></span><br><span class="line">        print(<span class="string">'\033[32m%s买到票了\033[0m'</span>%i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'\033[31m%s没买到票\033[0m'</span>%i)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ticket'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(dic,f)</span><br><span class="line">    lock.release()      <span class="comment"># 还钥匙</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        p = Process(target=show,args=(i,))</span><br><span class="line">        p.start()</span><br><span class="line">    lock = Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        p = Process(target=buy_ticket, args=(i,lock))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><h2 id="进程间的通信"><a class="markdownIt-Anchor" href="#进程间的通信"></a> 进程间的通信**</h2><blockquote><p>用一块儿共享的内存==&gt;实现进程间的共享</p></blockquote><p>特点:</p><ul><li>一定是内存空间</li><li>能够自动帮忙处理锁的问题</li></ul><p>实现进程间的通讯（IPC）的方式有很多种，如：管道(Pipe)，消息队列(Queue: == PIPE+锁（队列）)，共享内存，信号，信号量，套接字</p><table><thead><tr><th>管道</th><th>消息队列</th><th>共享内存</th><th></th></tr></thead><tbody><tr><td>开辟空间</td><td>内存</td><td>内存</td><td>内存</td></tr><tr><td>读写方式</td><td>两端读写[双向/单向]</td><td>先进先出</td><td>覆盖之前的内容</td></tr><tr><td>效率</td><td>一般</td><td>一般</td><td>较高</td></tr><tr><td>应用</td><td>多用于父子进程</td><td>广泛灵活</td><td>需要注意互斥</td></tr></tbody></table><p>注意：<br>1.队列占用的是内存空间<br>2.不应该往队列中放大数据，应该只存放数据量较小的精简的内容</p><h2 id="生产者消费者模型"><a class="markdownIt-Anchor" href="#生产者消费者模型"></a> <strong>生产者消费者模型</strong></h2><blockquote><p>生产者：比喻的是程序中负责产生数据的任务<br>消费者：比喻的是程序中负责处理数据的任务</p><p>生产者———&gt;共享的介质(队列)&lt;————消费者</p></blockquote><p>Q:作用是什么?<br>A: 实现生产者与消费者的解耦和，生产者可以不停的生产，消费者也可以不停的消费从而平衡了生产者的生产能力与消费者消费能力，提升了而整体运行的效率</p><p>Q:什么时候用?<br>A:当我们程序中存在明显的两类任务，一类是负责产生数据，一类是负责处理数据，此时就应该考虑使用生产者消费者模型来提升程序的效率</p><h2 id="多进程中的join"><a class="markdownIt-Anchor" href="#多进程中的join"></a> <strong>多进程中的join()</strong></h2><p><em><strong>在进程中可以阻塞主进程的执行, 直到等待子线程全部完成之后, 才继续运行主线程后面的代码</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(num)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(num)</span><br><span class="line"><span class="comment">#定义一个用来装子线程的列表</span></span><br><span class="line">threads = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    <span class="comment">#target 指定子线程要执行的funtion, args 指定该funtion需要传入的参数</span></span><br><span class="line">    thread = threading.Thread(target = test, args = [i])</span><br><span class="line">    <span class="comment">#上面的 thread 是一个个参数i都不同的线程, 现在把它一个个装进列表 threads 里面</span></span><br><span class="line">    threads.append(thread)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">    <span class="comment">#for 循环执行 threads 列表里面的全部线程, 没有用 join()线程是无序执行的,</span></span><br><span class="line">    <span class="comment"># 就连最后一句print('end')可能比所有子线程都要先执行</span></span><br><span class="line">    i.start()</span><br><span class="line">print(<span class="string">'end'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>将其修改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tsreads:</span><br><span class="line">    i.start()</span><br><span class="line">    i.join()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">[Finished in 5.2s]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>每个都会隔一秒的进行输出,因为for循环也是主进程操作,也会被阻塞直到子进程完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tsreads:</span><br><span class="line">    i.start()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">i.join()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">[Finished in 1.2s]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>在这里看一看出来, join()还是阻挡了主线程的执行, 让所有的子线程执行完毕之后再执行, 而且前面的子线程的执行都是无序地执行完毕了</p><p>△.一般来说，join函数应该在所有的start函数之后(即一般情况下，让所有进程都执行，然后等待子进程结束，再进行下面的主进程)。</p><h2 id="python多进程之manager"><a class="markdownIt-Anchor" href="#python多进程之manager"></a> Python多进程之Manager</h2><blockquote><p>可以用来进程间共享对象、资源、变量===&gt;使用公共内存</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Manager</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 这里实现的就是多个进程之间共享内存，并修改数据</span></span><br><span class="line"><span class="comment"># 这里不需要加锁，因为manager已经默认给你加锁了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(d,l)</span>:</span></span><br><span class="line">    d[<span class="number">1</span>] = <span class="string">'1'</span></span><br><span class="line">    d[<span class="string">'2'</span>] = <span class="number">2</span></span><br><span class="line">    d[<span class="number">0.25</span>] = <span class="keyword">None</span></span><br><span class="line">    l.append(os.getpid())</span><br><span class="line">    print(l)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">with</span> Manager() <span class="keyword">as</span> manager:</span><br><span class="line">        d = manager.dict()  <span class="comment">#生成一个字典</span></span><br><span class="line">        l = manager.list(range(<span class="number">5</span>))  <span class="comment">#生成一个列表</span></span><br><span class="line">        p_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            p = Process(target=f,args=(d,l))</span><br><span class="line">            p.start()</span><br><span class="line">            p_list.append(p)</span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> p_list:</span><br><span class="line">            res.join()</span><br><span class="line">        print(d)</span><br><span class="line">        print(l)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock, Value</span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, salary)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.salary = Value(<span class="string">'i'</span>, salary)</span><br><span class="line">        self.data = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increase</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.salary.value += <span class="number">100</span></span><br><span class="line">        self.data.append(self.salary.value)</span><br><span class="line">        print(self.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPay</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name + <span class="string">':'</span> + str(self.salary.value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyManager</span><span class="params">(BaseManager)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    继承即可</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Manager</span><span class="params">()</span>:</span></span><br><span class="line">    m = MyManager()</span><br><span class="line">    m.start()</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">MyManager.register(<span class="string">'Employee'</span>, Employee)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(em, lock)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        em.increase()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manager = Manager()</span><br><span class="line">    em = manager.Employee(<span class="string">'zhangsan'</span>, <span class="number">1000</span>)</span><br><span class="line">    lock = Lock()</span><br><span class="line">    proces = [Process(target=func, args=(em, lock)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> proces:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> proces:</span><br><span class="line">        p.join()</span><br><span class="line">    print(em.getPay())</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br><span class="line"><span class="string">[1100]</span></span><br><span class="line"><span class="string">[1100, 1200]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600, 1700]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]</span></span><br><span class="line"><span class="string">zhangsan:2000</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="queue"><a class="markdownIt-Anchor" href="#queue"></a> Queue</h2><p>其实就是一个队列（FIFO），两个进程可以通过传入的参数q，来获得里面的内容，从而数据共享、通信。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入Queue,Process</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue,Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="comment">#写入进程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wp</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"%s开始写入："</span>%os.getpid)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"WANG"</span>:</span><br><span class="line">        <span class="comment">#将信息写入队列</span></span><br><span class="line">        q.put(i)</span><br><span class="line">        print(i)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取进程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rd</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"%s开始读取"</span>%os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            <span class="comment">#从队列读取信息</span></span><br><span class="line">            print(<span class="string">"read to %s"</span>%q.get())</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#创建队列</span></span><br><span class="line">    q = Queue()</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#创建写入进程</span></span><br><span class="line">    w = Process(target=wp,args=(q,))</span><br><span class="line">    <span class="comment">#启动写入进程</span></span><br><span class="line">    w.start()</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#创建读取进程</span></span><br><span class="line">    r = Process(target=rd,args=(q,))</span><br><span class="line">    <span class="comment">#启动读取进程</span></span><br><span class="line">    r.start()</span><br></pre></td></tr></table></figure><h2 id="pipe管道"><a class="markdownIt-Anchor" href="#pipe管道"></a> Pipe管道</h2><blockquote><p>和队列的功能差不多，实现两个进程之间数据的传递，只不过是FILO的:</p></blockquote><p><img src="/2019/10/06/Python多进程/Python%E5%A4%9A%E8%BF%9B%E7%A8%8B%5Cpipe.png" alt="pipe"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''管道pipe'''</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(conn)</span>:</span></span><br><span class="line">    conn.send(<span class="string">'hello'</span>)  <span class="comment">#发送hello</span></span><br><span class="line">    print(conn.recv())  <span class="comment">#收到牛逼</span></span><br><span class="line">    conn.close()        <span class="comment">#关闭</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parent_conn, child_conn = Pipe()    <span class="comment">#管道会产生两个返回值</span></span><br><span class="line">    p = Process(target=f, args=(child_conn,))   <span class="comment">#创建一个子进程</span></span><br><span class="line">    p.start()</span><br><span class="line">    print(parent_conn.recv())  <span class="comment">#收到'hello'"</span></span><br><span class="line">    parent_conn.send(<span class="string">'牛逼'</span>)  <span class="comment">#发送牛逼</span></span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h2 id="借鉴"><a class="markdownIt-Anchor" href="#借鉴"></a> 借鉴:</h2><p><a href="https://www.cnblogs.com/yangzhizong/p/9301530.html" target="_blank" rel="noopener">Python守护进程、进程互斥锁、进程间通信ICP（Queue队列）、生产者消费者模型</a></p><p><a href="https://blog.csdn.net/weixin_37111106/article/details/85120706" target="_blank" rel="noopener">多进程 之 join()</a></p><p><a href="https://blog.csdn.net/woainiwss/article/details/52013810" target="_blank" rel="noopener">Java 多线程中两个线程交替执行</a></p><p><a href="https://blog.csdn.net/u011865919/article/details/94722802" target="_blank" rel="noopener">Python多进程消息队列实现进程间通讯</a></p><p><a href="https://www.cnblogs.com/Fantinai/p/8433136.html" target="_blank" rel="noopener">Queue详细内容</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python多进程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#python多进程&quot;&gt;&lt;/a&gt; Python多进程&lt;/h1&gt;
&lt;h2 id=&quot;守护进程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#守护进程
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Openmv使用</title>
    <link href="https://nymrli.top/2019/10/06/Openmv%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2019/10/06/Openmv使用/</id>
    <published>2019-10-06T01:45:28.000Z</published>
    <updated>2019-11-07T12:36:38.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="openmv使用"><a class="markdownIt-Anchor" href="#openmv使用"></a> Openmv使用</h1><h2 id="下载openmv-ide"><a class="markdownIt-Anchor" href="#下载openmv-ide"></a> 下载Openmv IDE</h2><ul><li><a href="https://openmv.io/pages/download" target="_blank" rel="noopener">Openmv官网</a></li><li><a href="https://singtown.com/openmv-download/" target="_blank" rel="noopener">中国代理——星瞳</a></li><li><a href="https://github.com/openmv/openmv/releases" target="_blank" rel="noopener">Github_release</a></li></ul><p>推荐下载星瞳的，这个是中文版的，并且其他两个下载非常慢。</p><h2 id="捕捉图片设置"><a class="markdownIt-Anchor" href="#捕捉图片设置"></a> 捕捉图片设置：</h2><p><strong>设置彩色／黑白</strong></p><ul><li>sensor.set_pixformat() 设置像素模式。<ul><li>sensor.GRAYSCALE: 灰度，每个像素8bit。</li><li>sensor.RGB565: 彩色，每个像素16bit。</li></ul></li></ul><p><strong>设置图像大小</strong></p><ul><li><p>sensor.set_framesize() 设置图像的大小</p><ul><li>sensor.QQVGA: 160x120</li><li>sensor.QQVGA2: 128x160 (用于 lcd 扩展板)</li><li>sensor.HQVGA: 240x160</li><li>sensor.QVGA: 320x240</li><li>sensor.VGA: 640x480 (只用于OpenMV Cam M7 的灰度图处理图像，或者彩图采集图像)</li><li>sensor.QQCIF: 88x72</li><li>sensor.QCIF: 176x144</li><li>sensor.CIF: 352x288</li></ul><p><strong>设置窗口ROI</strong></p><p><code>sensor.set_windowing(roi)</code></p><p><strong>设置翻转</strong></p><p>sensor.set_hmirror(True)<br>水平方向翻转</p><p>sensor.set_vflip(True)<br>垂直方向翻转</p></li></ul><h2 id="demo例程"><a class="markdownIt-Anchor" href="#demo例程"></a> Demo例程：</h2><blockquote><p>openmv虽然比较贵,但是它的功能非常强大,已经提供了相当多的例程了。具体例程可以去星瞳的官网上查看，说明非常详细。</p></blockquote><p>在此，我只介绍点我们这次需要用到的功能。</p><p>我使用的是OPENMV-H7 R1，芯片是STM32H743，镜头为IR 1080P 2.8mm</p><p>Hello World</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hello World Example</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Welcome to the OpenMV IDE! Click on the green run arrow button below to run the script!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line">sensor.reset()                      <span class="comment"># Reset and initialize the sensor.</span></span><br><span class="line">sensor.set_pixformat(sensor.RGB565) <span class="comment"># Set pixel format to RGB565 (or GRAYSCALE)</span></span><br><span class="line">sensor.set_framesize(sensor.QVGA)   <span class="comment"># Set frame size to QVGA (320x240)</span></span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)     <span class="comment"># Wait for settings take effect.</span></span><br><span class="line">clock = time.clock()                <span class="comment"># Create a clock object to track the FPS.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    clock.tick()                    <span class="comment"># Update the FPS clock.</span></span><br><span class="line">    img = sensor.snapshot()         <span class="comment"># Take a picture and return the image.</span></span><br><span class="line">    print(clock.fps())              <span class="comment"># Note: OpenMV Cam runs about half as fast when connected</span></span><br><span class="line">                                    <span class="comment"># to the IDE. The FPS should increase once disconnected.</span></span><br></pre></td></tr></table></figure><h3 id="二维码识别"><a class="markdownIt-Anchor" href="#二维码识别"></a> 二维码识别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># QRCode Example</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example shows the power of the OpenMV Cam to detect QR Codes</span></span><br><span class="line"><span class="comment"># using lens correction (see the qrcodes_with_lens_corr.py script for higher performance).</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line">sensor.reset()</span><br><span class="line">sensor.set_pixformat(sensor.RGB565)</span><br><span class="line">sensor.set_framesize(sensor.QVGA)</span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)</span><br><span class="line">sensor.set_auto_gain(<span class="keyword">False</span>) <span class="comment"># must turn this off to prevent image washout...</span></span><br><span class="line">clock = time.clock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line">    img = sensor.snapshot()</span><br><span class="line">    img.lens_corr(<span class="number">1.8</span>) <span class="comment"># strength of 1.8 is good for the 2.8mm lens.</span></span><br><span class="line">    <span class="keyword">for</span> code <span class="keyword">in</span> img.find_qrcodes():</span><br><span class="line">        img.draw_rectangle(code.rect(), color = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        print(code)</span><br><span class="line">    print(clock.fps())</span><br></pre></td></tr></table></figure><p>代码是用python编写的，文件系统为microPython，具有Cpython解释器翻译成机器码。需要脱机运行的文件命名为main.py即可(具体详情见microPython规范)。可放于flash或者32GB以下的SD卡中，SD卡读取优先级高于Flash，且flash内容容易丢失，且擦写次数有限，建议使用SD卡。</p><p>主要需要用的库：</p><ul><li>sersor:通过这个对象可以控制摄像头及相关配置；</li><li>image：处理图像的功能函数都在这个库里<ul><li>sensor.snapshot()会返回一个&lt;class ‘Image’&gt;</li></ul></li><li>time：跟Python自带的time模块不同，这个是专门用来记录摄像头用时的</li></ul><h3 id="颜色追踪"><a class="markdownIt-Anchor" href="#颜色追踪"></a> 颜色追踪</h3><blockquote><p>颜色阈值需要使用LAB色彩空间</p></blockquote><p>LAB的范围选择，个人比较快截的方法是通过IDE右边的帧缓冲区来获取，即框出ROI区域后，再打开“工具-&gt;机器视觉-&gt;阈值编辑器-&gt;帧缓冲区”,然后根据直方图中的数据就可以筛选出想要的对象辣(白色是选出，黑色是过滤，好像跟PS的蒙版是反的?)</p><p>▲颜色识别时，一定要<strong>关闭</strong>自动增益、白平衡</p><ul><li>sensor.set_auto_gain() 自动增益开启（True）或者关闭（False）。在使用颜色追踪时，需要关闭自动增益。</li><li>sensor.set_auto_whitebal() 自动白平衡开启（True）或者关闭（False）。在使用颜色追踪时，需要关闭自动白平衡。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Measure the distance</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example shows off how to measure the distance through the size in imgage</span></span><br><span class="line"><span class="comment"># This example in particular looks for yellow pingpong ball.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time, lcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># For color tracking to work really well you should ideally be in a very, very,</span></span><br><span class="line"><span class="comment"># very, controlled enviroment where the lighting is constant...</span></span><br><span class="line"><span class="comment">#yellow_threshold   = (22, 74, -12, 31, 23, 62)</span></span><br><span class="line"></span><br><span class="line">box_threshold = (<span class="number">40</span>, <span class="number">80</span>, <span class="number">-4</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">51</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">red_threshold = (<span class="number">40</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">84</span>, <span class="number">30</span>, <span class="number">79</span>)</span><br><span class="line"><span class="comment"># You may need to tweak the above settings for tracking green things...</span></span><br><span class="line"><span class="comment"># Select an area in the Framebuffer to copy the color settings.</span></span><br><span class="line"></span><br><span class="line">sensor.reset() <span class="comment"># Initialize the camera sensor.</span></span><br><span class="line">sensor.set_pixformat(sensor.RGB565) <span class="comment"># use RGB565.</span></span><br><span class="line">sensor.set_framesize(sensor.QVGA) <span class="comment"># use QQVGA for speed.</span></span><br><span class="line">sensor.skip_frames(<span class="number">10</span>) <span class="comment"># Let new settings take affect.</span></span><br><span class="line">sensor.set_auto_whitebal(<span class="keyword">False</span>) <span class="comment"># turn this off.</span></span><br><span class="line">clock = time.clock() <span class="comment"># Tracks FPS.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#lcd.init() # Initialize the lcd screen.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">K=<span class="number">5000</span><span class="comment">#the value should be measured</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    clock.tick() <span class="comment"># Track elapsed milliseconds between snapshots().</span></span><br><span class="line">    img = sensor.snapshot() <span class="comment"># Take a picture and return the image.</span></span><br><span class="line"></span><br><span class="line">    blobs = img.find_blobs([red_threshold])</span><br><span class="line">    <span class="keyword">if</span> len(blobs) == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># Draw a rect around the blob.</span></span><br><span class="line">        <span class="comment">#b = blobs[0]</span></span><br><span class="line">        <span class="comment">#img.draw_rectangle(b[0:4]) # rect</span></span><br><span class="line">        <span class="comment">#img.draw_cross(b[5], b[6]) # cx, cy</span></span><br><span class="line">        <span class="comment">#Lm = (b[2]+b[3])/2</span></span><br><span class="line">        <span class="comment">#length = K/Lm</span></span><br><span class="line">        <span class="comment">#print(length)</span></span><br><span class="line">        b = blobs[<span class="number">0</span>]</span><br><span class="line">        img.draw_rectangle(b[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">        img.draw_cross(b[<span class="number">5</span>], b[<span class="number">6</span>])</span><br><span class="line">    <span class="comment">#lcd.display(sensor.snapshot()) # Take a picture and display the image.</span></span><br><span class="line">    <span class="comment">#print(clock.fps()) # Note: Your OpenMV Cam runs about half as fast while</span></span><br><span class="line">    <span class="comment"># connected to your computer. The FPS should increase once disconnected.</span></span><br></pre></td></tr></table></figure><h3 id="识别圆"><a class="markdownIt-Anchor" href="#识别圆"></a> 识别圆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 圆形检测例程</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 这个例子展示了如何用Hough变换在图像中找到圆。</span></span><br><span class="line"><span class="comment"># https://en.wikipedia.org/wiki/Circle_Hough_Transform</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 请注意，find_circles（）方法将只能找到完全在图像内部的圆。圈子之外的</span></span><br><span class="line"><span class="comment"># 图像/ roi被忽略...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line">sensor.reset()</span><br><span class="line">sensor.set_pixformat(sensor.RGB565) <span class="comment"># grayscale is faster</span></span><br><span class="line">sensor.set_framesize(sensor.QQVGA)</span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)</span><br><span class="line">clock = time.clock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#lens_corr(1.8)畸变矫正</span></span><br><span class="line">    img = sensor.snapshot().lens_corr(<span class="number">1.8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Circle对象有四个值: x, y, r (半径), 和 magnitude。</span></span><br><span class="line">    <span class="comment"># magnitude是检测圆的强度。越高越好</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># roi 是一个用以复制的矩形的感兴趣区域(x, y, w, h)。如果未指定，</span></span><br><span class="line">    <span class="comment"># ROI 即图像矩形。操作范围仅限于roi区域内的像素。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x_stride 是霍夫变换时需要跳过的x像素的数量。若已知圆较大，可增加</span></span><br><span class="line">    <span class="comment"># x_stride 。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># y_stride 是霍夫变换时需要跳过的y像素的数量。若已知直线较大，可增加</span></span><br><span class="line">    <span class="comment"># y_stride 。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># threshold 控制从霍夫变换中监测到的圆。只返回大于或等于阈值的圆。</span></span><br><span class="line">    <span class="comment"># 应用程序的阈值正确值取决于图像。注意：一条圆的大小是组成圆所有</span></span><br><span class="line">    <span class="comment"># 索贝尔滤波像素大小的总和。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x_margin 控制所检测的圆的合并。 圆像素为 x_margin 、 y_margin 和  </span></span><br><span class="line">    <span class="comment"># r_margin的部分合并。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># y_margin 控制所检测的圆的合并。 圆像素为 x_margin 、 y_margin 和</span></span><br><span class="line">    <span class="comment"># r_margin 的部分合并。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># r_margin 控制所检测的圆的合并。 圆像素为 x_margin 、 y_margin 和</span></span><br><span class="line">    <span class="comment"># r_margin 的部分合并。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># r_min，r_max和r_step控制测试圆的半径。</span></span><br><span class="line">    <span class="comment"># 缩小测试圆半径的数量可以大大提升性能。</span></span><br><span class="line">    <span class="comment"># threshold = 3500比较合适。如果视野中检测到的圆过多，请增大阈值；</span></span><br><span class="line">    <span class="comment"># 相反，如果视野中检测到的圆过少，请减少阈值。</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> img.find_circles(threshold = <span class="number">3500</span>, x_margin = <span class="number">10</span>, y_margin = <span class="number">10</span>, r_margin = <span class="number">10</span>,r_min = <span class="number">2</span>, r_max = <span class="number">100</span>, r_step = <span class="number">2</span>):<span class="comment"># (80,60,80,60)</span></span><br><span class="line">        img.draw_circle(c.x(), c.y(), c.r(), color = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        print(c)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> img.find_rects(threshold = <span class="number">3500</span>):</span><br><span class="line">        img.draw_rectangle(r.rect(), color=(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> r.corners():</span><br><span class="line">            img.draw_circle(p[<span class="number">0</span>], p[<span class="number">1</span>], <span class="number">5</span>, color=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>))</span><br><span class="line">            print(r)</span><br><span class="line">        </span><br><span class="line">    print(<span class="string">"FPS %f"</span> % clock.fps())</span><br></pre></td></tr></table></figure><h3 id="测距和测量物块大小"><a class="markdownIt-Anchor" href="#测距和测量物块大小"></a> 测距和测量物块大小</h3><blockquote><p>由于 OpenMV采用的是单目摄像头，想要实现测距，就需要选<strong>参照物</strong>，利用参照物的大小比例来计算距离。</p></blockquote><p>Len  ∝  \frac{1}{pixelconut}==&gt;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo>=</mo><mfrac><mrow><mi>C</mi></mrow><mrow><mi>p</mi><mi>i</mi><mi>x</mi><mi>e</mi><mi>l</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">dist = \frac{C}{pixel}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.872331em;"></span><span class="strut bottom" style="height:1.3534389999999998em;vertical-align:-0.481108em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">p</span><span class="mord mathit">i</span><span class="mord mathit">x</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span><em>实际长度和摄像头里的像素成反比</em>  <strong>==&gt;</strong> <em>距离 = 一个常数/直径的像素</em></p><ol><li>先测出这个常数的值，怎么测不用说了吧，就是先让球距离摄像头10cm，打印出摄像头里直径的像素值，然后相乘，就得到了k的值！</li><li>就可以算出距离了(=这个常数/摄像头里像素点数)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Measure the distance</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example shows off how to measure the distance through the size in imgage</span></span><br><span class="line"><span class="comment"># This example in particular looks for yellow pingpong ball.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line"><span class="comment"># For color tracking to work really well you should ideally be in a very, very,</span></span><br><span class="line"><span class="comment"># very, controlled enviroment where the lighting is constant...</span></span><br><span class="line">yellow_threshold   = ( <span class="number">56</span>,   <span class="number">83</span>,    <span class="number">5</span>,   <span class="number">57</span>,   <span class="number">63</span>,   <span class="number">80</span>)</span><br><span class="line"><span class="comment"># box_threshold = (40, 80, -4, 21, 14, 51)</span></span><br><span class="line"><span class="comment"># red_threshold = (40, 59, 61, 84, 30, 79)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You may need to tweak the above settings for tracking green things...</span></span><br><span class="line"><span class="comment"># Select an area in the Framebuffer to copy the color settings.</span></span><br><span class="line"></span><br><span class="line">sensor.reset() <span class="comment"># Initialize the camera sensor.</span></span><br><span class="line">sensor.set_pixformat(sensor.RGB565) <span class="comment"># use RGB565.</span></span><br><span class="line">sensor.set_framesize(sensor.QQVGA) <span class="comment"># use QQVGA for speed.</span></span><br><span class="line">sensor.skip_frames(<span class="number">10</span>) <span class="comment"># Let new settings take affect.</span></span><br><span class="line">sensor.set_auto_whitebal(<span class="keyword">False</span>) <span class="comment"># turn this off.</span></span><br><span class="line">clock = time.clock() <span class="comment"># Tracks FPS.</span></span><br><span class="line"></span><br><span class="line">K=<span class="number">5000</span><span class="comment">#the value should be measured</span></span><br><span class="line"><span class="comment"># K = 36*10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    clock.tick() <span class="comment"># Track elapsed milliseconds between snapshots().</span></span><br><span class="line">    img = sensor.snapshot() <span class="comment"># Take a picture and return the image.</span></span><br><span class="line"></span><br><span class="line">    blobs = img.find_blobs([yellow_threshold])</span><br><span class="line">    <span class="keyword">if</span> len(blobs) == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># Draw a rect around the blob.</span></span><br><span class="line">        b = blobs[<span class="number">0</span>]</span><br><span class="line">        img.draw_rectangle(b[<span class="number">0</span>:<span class="number">4</span>]) <span class="comment"># rect</span></span><br><span class="line">        img.draw_cross(b[<span class="number">5</span>], b[<span class="number">6</span>]) <span class="comment"># cx, cy</span></span><br><span class="line">        Lm = (b[<span class="number">2</span>]+b[<span class="number">3</span>])/<span class="number">2</span><span class="comment"># 像素点数</span></span><br><span class="line">        <span class="comment"># index 2 is length, 3 is width</span></span><br><span class="line">        length = K/Lm<span class="comment"># 距离</span></span><br><span class="line">        print(length)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(clock.fps()) # Note: Your OpenMV Cam runs about half as fast while</span></span><br><span class="line">    <span class="comment"># connected to your computer. The FPS should increase once disconnected.</span></span><br></pre></td></tr></table></figure><h3 id="lcd显示"><a class="markdownIt-Anchor" href="#lcd显示"></a> LCD显示</h3><blockquote><p>由于正好有个LCD显示屏，那就也记录下LCD的代码把</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LCD Example</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note: To run this example you will need a LCD Shield for your OpenMV Cam.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The LCD Shield allows you to view your OpenMV Cam's frame buffer on the go.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, lcd</span><br><span class="line"></span><br><span class="line">sensor.reset() <span class="comment"># Initialize the camera sensor.</span></span><br><span class="line">sensor.set_pixformat(sensor.RGB565) <span class="comment"># or sensor.GRAYSCALE</span></span><br><span class="line">sensor.set_framesize(sensor.QQVGA2) <span class="comment"># Special 128x160 framesize for LCD Shield.</span></span><br><span class="line">lcd.init() <span class="comment"># Initialize the lcd screen.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    lcd.display(sensor.snapshot()) <span class="comment"># Take a picture and display the image.</span></span><br></pre></td></tr></table></figure><h3 id="串口通信"><a class="markdownIt-Anchor" href="#串口通信"></a> 串口通信</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># UART Control</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example shows how to use the serial port on your OpenMV Cam. Attach pin</span></span><br><span class="line"><span class="comment"># P4 to the serial input of a serial LCD screen to see "Hello World!" printed</span></span><br><span class="line"><span class="comment"># on the serial LCD display.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pyb <span class="keyword">import</span> UART</span><br><span class="line"></span><br><span class="line"><span class="comment"># Always pass UART 3 for the UART number for your OpenMV Cam.</span></span><br><span class="line"><span class="comment"># The second argument is the UART baud rate. For a more advanced UART control</span></span><br><span class="line"><span class="comment"># example see the BLE-Shield driver.</span></span><br><span class="line">uart = UART(<span class="number">3</span>, <span class="number">19200</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    <span class="comment"># 发送数据</span></span><br><span class="line">    uart.write(<span class="string">"Hello World!\r"</span>)</span><br><span class="line">    time.sleep(<span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># 接收数据</span></span><br><span class="line">    <span class="keyword">if</span> uart.any():</span><br><span class="line">        a=uart.readline()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h4 id="与stm32通信"><a class="markdownIt-Anchor" href="#与stm32通信"></a> 与STM32通信</h4><p>openmv</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time,sensor, image</span><br><span class="line"><span class="keyword">from</span> pyb <span class="keyword">import</span> UART</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uart = UART(<span class="number">3</span>, <span class="number">115200</span>)</span><br><span class="line">uart.init(<span class="number">115200</span>, bits=<span class="number">8</span>, parity=<span class="keyword">None</span>, stop=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    <span class="comment"># 由于正点原子提供的串口通信协议需要以\r\n结尾,所以,这边必须也要写\r\n</span></span><br><span class="line">    uart.write(<span class="string">"Hello World!\r\n"</span>)</span><br><span class="line">    <span class="comment"># 中文好像解析不了</span></span><br><span class="line">    <span class="keyword">if</span> uart.any():</span><br><span class="line">        a=uart.readline()</span><br><span class="line">        print(a)</span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"key.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sys.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"usart.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"> u16 t;  </span><br><span class="line">u16 len;</span><br><span class="line">u16 times=<span class="number">0</span>;</span><br><span class="line">delay_init();     <span class="comment">//延时函数初始化  </span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级</span></span><br><span class="line">uart_init(<span class="number">115200</span>); <span class="comment">//串口初始化为115200</span></span><br><span class="line"> LED_Init();     <span class="comment">//LED端口初始化</span></span><br><span class="line">KEY_Init();          <span class="comment">//初始化与按键连接的硬件接口</span></span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(USART_RX_STA&amp;<span class="number">0x8000</span>)&#123;   </span><br><span class="line">len=USART_RX_STA&amp;<span class="number">0x3fff</span>;<span class="comment">//得到此次接收到的数据长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Your message is:\r\n\r\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)&#123;</span><br><span class="line">USART_SendData(USART1, USART_RX_BUF[t]);<span class="comment">//向串口1发送数据</span></span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TC)!=SET);<span class="comment">//等待发送结束</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("\r\n\r\n");//插入换行</span></span><br><span class="line">USART_RX_STA=<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">times++;</span><br><span class="line"><span class="keyword">if</span>(times%<span class="number">200</span>==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Waiting for input.2333\r\n"</span>);  </span><br><span class="line"><span class="keyword">if</span>(times%<span class="number">30</span>==<span class="number">0</span>)LED0=!LED0;<span class="comment">//闪烁LED,提示系统正在运行.</span></span><br><span class="line">delay_ms(<span class="number">10</span>);   </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>测试结果（暂时还没理解）：</p><p><img src="/2019/10/06/Openmv使用/uart.png" alt="uart"></p><p>补充:</p><p><a href="https://blog.csdn.net/zzzzjh/article/details/80725348" target="_blank" rel="noopener">openmv 发送16进制数</a></p><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录:</h2><p><a href="https://book.openmv.cc/image/drawing.html" target="_blank" rel="noopener">OpenMV中文入门教程</a></p><p>视频教程:</p><ul><li><a href="https://www.bilibili.com/video/av56434844/?p=5" target="_blank" rel="noopener">B站OpenMV视频教程</a></li><li><a href="https://singtown.com/learn/" target="_blank" rel="noopener">星瞳官网</a></li></ul><p>B站的清晰度和加载速度比较快，星瞳官网的还有额外的教程（他家的拓展版）</p><h3 id="画图"><a class="markdownIt-Anchor" href="#画图"></a> 画图：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image.draw_line((10,10,20,30), color=(255,0,0))</span><br><span class="line">image.draw_rectangle(rect_tuple, color=(255,0,0))</span><br></pre></td></tr></table></figure><h4 id="画线"><a class="markdownIt-Anchor" href="#画线"></a> 画线</h4><ul><li>image.draw_line(line_tuple, color=White) 在图像中画一条直线。<ul><li>line_tuple的格式是(x0, y0, x1, y1)，意思是(x0, y0)到(x1, y1)的直线。</li><li>颜色可以是灰度值(0-255)，或者是彩色值(r, g, b)的tupple。默认是白色</li></ul></li></ul><h4 id="画框"><a class="markdownIt-Anchor" href="#画框"></a> 画框</h4><ul><li>image.draw_rectangle(rect_tuple, color=White) 在图像中画一个矩形框。<ul><li>rect_tuple 的格式是 (x, y, w, h)。</li></ul></li></ul><h4 id="画圆"><a class="markdownIt-Anchor" href="#画圆"></a> 画圆</h4><ul><li>image.draw_circle(x, y, radius, color=White) 在图像中画一个圆。<ul><li>x,y是圆心坐标</li><li>radius是圆的半径</li></ul></li></ul><h4 id="画十字"><a class="markdownIt-Anchor" href="#画十字"></a> 画十字</h4><ul><li>image.draw_cross(x, y, size=5, color=White) 在图像中画一个十字<ul><li>x,y是坐标</li><li>size是两侧的尺寸</li></ul></li></ul><h4 id="写字"><a class="markdownIt-Anchor" href="#写字"></a> 写字</h4><ul><li>image.draw_string(x, y, text, color=White) 在图像中写字 8x10的像素<ul><li>x,y是坐标。使用\n, \r, and \r\n会使光标移动到下一行。</li><li>text是要写的字符串。</li></ul></li></ul><h3 id="需要调参的地方"><a class="markdownIt-Anchor" href="#需要调参的地方"></a> 需要调参的地方：</h3><ol><li>测大小的常数k</li><li>形状检测的阈值</li><li>颜色识别的阈值</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;openmv使用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#openmv使用&quot;&gt;&lt;/a&gt; Openmv使用&lt;/h1&gt;
&lt;h2 id=&quot;下载openmv-ide&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;
      
    
    </summary>
    
    
      <category term="嵌入式" scheme="https://nymrli.top/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>TD-afterstate</title>
    <link href="https://nymrli.top/2019/10/03/TD-afterstate/"/>
    <id>https://nymrli.top/2019/10/03/TD-afterstate/</id>
    <published>2019-10-03T11:28:36.000Z</published>
    <updated>2019-10-03T11:30:03.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="td-afterstate"><a class="markdownIt-Anchor" href="#td-afterstate"></a> TD-afterstate</h1><blockquote><p>afterstae: 当前执行一个动作后的状态，可以理解为中间态</p><p>是处理问题的一个改动,一种思想</p></blockquote><p>以俄罗斯方块为例:</p><p>状态是由当前的局面和一个随机方块组成，执行一个下落动作之后会产生一个局面就称为afterstate，即动作结束后不能进行新的动作（没有新方块）的状态。</p><p>中间态和下一个随机方块构成了下一个状态</p><p>对于没有这种随机性的问题，afterstate就是next state</p><p>td做预测，afterstate做控制</p><p><img src="/2019/10/03/TD-afterstate/afterstate.png" alt="afterstate"></p><h2 id="更多"><a class="markdownIt-Anchor" href="#更多"></a> 更多:</h2><p><a href="https://zhuanlan.zhihu.com/p/27591256" target="_blank" rel="noopener">强化学习经典入门书的读书笔记系列–第六篇Temporal-Difference</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;td-afterstate&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#td-afterstate&quot;&gt;&lt;/a&gt; TD-afterstate&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;afterstae: 当前执行一个动作后的状态，可以
      
    
    </summary>
    
    
      <category term="RL" scheme="https://nymrli.top/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>git命令详解</title>
    <link href="https://nymrli.top/2019/09/29/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://nymrli.top/2019/09/29/git命令详解/</id>
    <published>2019-09-29T09:39:07.000Z</published>
    <updated>2019-10-11T13:32:26.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git命令详解"><a class="markdownIt-Anchor" href="#git命令详解"></a> git命令详解</h1><h2 id="自己的仓库管理"><a class="markdownIt-Anchor" href="#自己的仓库管理"></a> 自己的仓库管理：</h2><p><code>git add &lt;filename&gt;</code></p><ul><li>将文件添加到暂存区中  (其中git add.可以将当前目录的子目录文件都添加到暂存区中)</li></ul><p><code>git commit -m &quot;...&quot;:</code></p><ul><li>保存仓库的历史记录,其中 -m &quot;…&quot;提交信息(概述)</li></ul><p><code>git config --global user.name &quot;...&quot;</code>、<code>git config --global user.email &quot;...&quot;</code>:</p><ul><li>配置提交作者信息</li></ul><p><code>git log</code>:</p><ul><li><strong>查看</strong>提交日志(当前状态为终点) 会产生版本库里一系列单独提交的历史</li></ul><p><code>git diff ID1/ID2</code>:</p><ul><li>查看版本差异</li></ul><p><code>git mv 新名字,旧名字</code></p><ul><li>重命名:</li></ul><p><code>git branch -a [-v]</code></p><ul><li>分支一展表, -r 查看远程git服务器上的分支</li></ul><p><code>git checkout 分支名</code>:</p><ul><li>切换分支</li><li>-b创建,且切换到新建分支 等价于<code>git branch 分支名</code> + <code>git checkout 分支名</code></li></ul><p><code>git branch -d [分支名称]</code></p><ul><li>删除一个分支, -d选项只能删除已经参与过合并的分支，对于未参与合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项、</li></ul><p><code>git rest --head ID</code> :</p><ul><li>退回之前提交版本</li></ul><p><code>git status</code>  :</p><ul><li>查看仓库当前状态；</li></ul><p><code>git reflog</code>  :</p><ul><li>查看当前仓库的操作日志</li></ul><p><code>git rebase -i</code>:</p><ul><li>压缩历史(如果出现拼写错误时需要): <code>git rebase -i HEAD~2</code></li></ul><p><code>git merge --no-f 分支名</code>  :</p><ul><li>合并分支</li></ul><p><code>git remote set-url origin https://github.com/Freedomisgood/NjuptGo.git</code></p><ul><li>修改仓库指定新的远程仓库</li></ul><p><code>git commit --amend</code>:</p><ul><li>修改上次commit备注信息</li></ul><h2 id="远程仓库"><a class="markdownIt-Anchor" href="#远程仓库"></a> 远程仓库</h2><p>如果本地没有仓库，则clone:<br><code>git clone http://github.com/xxx/yyy.git</code></p><p>在本地增加远程仓库信息：<code>git remote add apollo3d http://github.com/xxx/yyy.git</code>,此时远程库名为origin、apollo3d</p><p>删除远程分支<code>git push origin --delete kickof</code></p><p>git push代码到远程新分支<br><code>git push origin master:my_remote_new_branch</code></p><h3 id="git-pull"><a class="markdownIt-Anchor" href="#git-pull"></a> git pull</h3><p>如果本地有仓库，则拉取更新命令为:<br><code>git pull &lt;远程库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p><p>比如，取回远程库中的online分支，与本地的online分支进行merge，要写成：</p><p>git pull origin online:online<br>如果是要与本地当前分支merge，则冒号后面的&lt;本地分支名&gt;可以不写</p><p><code>git pull origin online</code><br>通常，git会将本地库分支与远程分支之间建立一种追踪关系。比如，在git clone的时候，所有本地分支默认与远程库的同名分支建立追踪关系。也就是说，本地的master分支自动追踪origin/master分支。因此，如果当前处于本地online分支上，并且本地online分支与远程的online分支有追踪关系，那么远程的分支名可以省略：</p><p>比如，取回远程库中的online分支，与本地的online分支进行merge，要写成：</p><p><code>git pull origin</code></p><p>其实，git pull 命令等同于先做了git fetch ，再做了git merge。即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin online</span><br><span class="line">git checkout online</span><br><span class="line">git merge origin/online</span><br></pre></td></tr></table></figure><h3 id="git-push"><a class="markdownIt-Anchor" href="#git-push"></a> git push</h3><h4 id="二推送本地分支到远程仓库"><a class="markdownIt-Anchor" href="#二推送本地分支到远程仓库"></a> 二.推送本地分支到远程仓库</h4><p>（一）.创建本地分支<code>git checkout -b 新分支名</code><br>（二）.推送本地分支到远程仓库<code>git push --set-upstream origin 分支名</code></p><h4 id="三-将远程git仓库里的指定分支拉取到本地本地不存在的分支"><a class="markdownIt-Anchor" href="#三-将远程git仓库里的指定分支拉取到本地本地不存在的分支"></a> 三、将远程git仓库里的指定分支拉取到本地（本地不存在的分支）</h4><p><code>git checkout -b 本地分支名 origin/远程分支名</code></p><h2 id="修改了gitignore生效指令"><a class="markdownIt-Anchor" href="#修改了gitignore生效指令"></a> 修改了.gitignore生效指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached . // 删除本地缓存</span><br><span class="line">git add . // 添加要提交的文件</span><br><span class="line">git commit -m &apos;update .gitignore&apos; // 更新本地的缓存</span><br></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li>Git远程操作详解:<a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/06/git_remote.html</a></li><li>使用git将项目上传到github（最简单方法）:<a href="https://www.cnblogs.com/cxk1995/p/5800196.html" target="_blank" rel="noopener">https://www.cnblogs.com/cxk1995/p/5800196.html</a></li><li>&lt;&lt;Git入门与实践&gt;&gt;:日本</li><li><a href="https://blog.csdn.net/yxlshk/article/details/79944535" target="_blank" rel="noopener">Git恢复之前版本的两种方法reset、revert（图文详解）</a></li></ul><h2 id="采坑记录"><a class="markdownIt-Anchor" href="#采坑记录"></a> 采坑记录</h2><p>Q: 不小心<code>git reset --hard HEAD^</code>导致工作区文件全没了</p><p>A:解决方案:</p><ul><li><p><a href="https://stackoverflow.com/questions/7374069/undo-git-reset-hard-with-uncommitted-files-in-the-staging-area" target="_blank" rel="noopener">Undo git reset --hard with uncommitted files in the staging area</a></p></li><li><p><a href="https://blog.csdn.net/w47_csdn/article/details/82701947" target="_blank" rel="noopener">恢复git reset --hard删除的文件</a></p><p>根据这篇博客操作的结果<code>git cat-file -p ID &gt; a.md</code>是个对比文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">100644 blob cdca566953e3b7b56897b2fa6995129170403212Q-learning.ipynb</span><br><span class="line">100644 blob 47735fcc505315aa61583dad9dc4facb7c00fbdcQ-learning.py</span><br><span class="line">100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391__init__.py</span><br><span class="line">040000 tree db76babbe2f2df4566b607e732c0c835418f9a83__pycache__</span><br><span class="line">100644 blob debb716313cfbf28c055e89ce4a625a1d7801f5bagents.py</span><br><span class="line">100644 blob 30ec43da68efe5eb5e8e31cb431fea981e256b6aapproximator.py</span><br><span class="line">100644 blob 1e8ac820d62943d16fa56fa981d72e27239527d9core.py</span><br><span class="line">100644 blob a0cfa7ac7f9f15a658ace5c5c7c5bbe73f680502myringworld.py</span><br><span class="line">100644 blob 69cb25ba30f4350454a0e731a70890cbf2530217ringworld.py</span><br><span class="line">100644 blob 5638e012cb1b68783e6cdf45d2e769cca96e591futils.py</span><br><span class="line">100644 blob 96aa662c03d991487e6da8120884b6f647be7202viewer.py</span><br></pre></td></tr></table></figure></li><li><p>△.<a href="https://blog.csdn.net/lijiafa/article/details/78275936" target="_blank" rel="noopener">关于git reset --hard导致文件丢失的血的教训</a>——亲测有效</p><ul><li>解决add了但没有commit的文件，可以用上述方法找回</li></ul></li></ul><p>分支git branch参数区别</p><p><img src="/2019/09/29/git命令详解/branch.jpg" alt="branch"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git命令详解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#git命令详解&quot;&gt;&lt;/a&gt; git命令详解&lt;/h1&gt;
&lt;h2 id=&quot;自己的仓库管理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#自己的仓库管理
      
    
    </summary>
    
    
      <category term="git" scheme="https://nymrli.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>numpy使用记录</title>
    <link href="https://nymrli.top/2019/09/28/numpy%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://nymrli.top/2019/09/28/numpy使用记录/</id>
    <published>2019-09-28T03:13:29.000Z</published>
    <updated>2019-09-28T10:16:49.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="numpy使用记录"><a class="markdownIt-Anchor" href="#numpy使用记录"></a> Numpy使用记录</h1><h2 id="numpy中的random"><a class="markdownIt-Anchor" href="#numpy中的random"></a> numpy中的random</h2><p>numpy.random.choice(a, size=None, replace=True, p=None)</p><ul><li>a : 如果是一维数组，就表示从这个一维数组中随机采样；如果是int型，就表示从0到a-1这个序列中随机采样。</li><li>size : 采样结果的数量，默认为1.可以是整数，表示要采样的数量；也可以为tuple，如(m, n, k)，则要采样的数量为m * n * k，size为(m, n, k)</li><li>replace : boolean型，采样的样本是否要更换？这个地方我不太理解，测了一下发现replace指定为True时，采样的元素会有重复；当replace指定为False时，采样不会重复。</li><li>p : 一个一维数组，制定了a中每个元素采样的概率，若为默认的None，则a中每个元素被采样的概率相同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">choice(a[, size, replace, p])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(<span class="number">5</span>, <span class="number">3</span>, replace=<span class="keyword">False</span>)</span><br><span class="line">array([<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#This is equivalent to np.random.permutation(np.arange(5))[:3]</span></span><br><span class="line"><span class="comment"># Generate a non-uniform random sample from np.arange(5) of size 3 without replacement:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(<span class="number">5</span>, <span class="number">3</span>, replace=<span class="keyword">False</span>, p=[<span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0.3</span>, <span class="number">0.6</span>, <span class="number">0</span>])</span><br><span class="line">array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>np.random.randint</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">2</span>,<span class="number">5</span>,size=(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 函数原型randint(low[, high, size])</span></span><br><span class="line"><span class="comment"># - 返回随机的整数，位于半开区间 [low, high)。</span></span><br></pre></td></tr></table></figure><p>np.random.rand</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.rand(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">array([[ <span class="number">0.14022471</span>,  <span class="number">0.96360618</span>],  <span class="comment">#random</span></span><br><span class="line">       [ <span class="number">0.37601032</span>,  <span class="number">0.25528411</span>],  <span class="comment">#random</span></span><br><span class="line">       [ <span class="number">0.49313049</span>,  <span class="number">0.94909878</span>]]) <span class="comment">#random</span></span><br><span class="line"><span class="comment"># 跟random_sample([size])、random([size])和ranf([size])一样</span></span><br></pre></td></tr></table></figure><h2 id="array操作"><a class="markdownIt-Anchor" href="#array操作"></a> array操作</h2><blockquote><p>广播啥的就不介绍了，主要是介绍一点函数方法的使用</p></blockquote><p><strong>array、asarray、asanyarray</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(a)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">c = np.array(a)</span><br><span class="line">c[<span class="number">1</span>]=<span class="number">3</span></span><br><span class="line">print(a,c)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] [<span class="number">1</span> <span class="number">3</span> <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">b = np.asarray(a)</span><br><span class="line">b[<span class="number">1</span>]=<span class="number">3</span></span><br><span class="line">print(a,b)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">3</span> <span class="number">3</span>] [<span class="number">1</span> <span class="number">3</span> <span class="number">3</span>]</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>array和asarray的不同在于array对目标做一个拷贝，而asarray不会</li><li>np.asanyarray 会返回 ndarray 或者ndarray的子类，而np.asarray 只返回 ndarray.</li></ul><p>np.where</p><blockquote><p>这个函数非常有用，非常香，但是他的参数需要narray</p></blockquote><p>np.where(cond,x,y)：满足条件（cond）输出x，不满足输出y</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;numpy使用记录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#numpy使用记录&quot;&gt;&lt;/a&gt; Numpy使用记录&lt;/h1&gt;
&lt;h2 id=&quot;numpy中的random&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python random</title>
    <link href="https://nymrli.top/2019/09/27/Python-random/"/>
    <id>https://nymrli.top/2019/09/27/Python-random/</id>
    <published>2019-09-27T14:11:59.000Z</published>
    <updated>2019-09-29T09:01:11.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-random"><a class="markdownIt-Anchor" href="#python-random"></a> Python random</h1><blockquote><p>老是忘记random中每个函数之间的区别，而且常常跟numpy里的random也经常搞混，因此还是写篇文章记一下吧。</p></blockquote><h2 id="random模块"><a class="markdownIt-Anchor" href="#random模块"></a> random模块</h2><h3 id="choice和sample"><a class="markdownIt-Anchor" href="#choice和sample"></a> choice和sample</h3><p>python中random.choice()可以从给定的可迭代对象中随机挑选出一个。</p><p>而python中random.sample()方法则可以随机地从给定的可迭代对象中提取出N个<strong>不同</strong>的元素，<strong>列表的维数没有限制</strong>。（即第二参数给出个数N）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.sample([chr(<span class="number">97</span> + x) <span class="keyword">for</span> x <span class="keyword">in</span> range(int(<span class="number">9</span>))],<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 函数原型sample(self, population, k)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'e'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line">print( random.randint(<span class="number">1</span>,<span class="number">10</span>) )        <span class="comment"># 产生 1 到 10 的一个整数型随机数  </span></span><br><span class="line">print( random.random() )             <span class="comment"># 产生 0 到 1 之间的随机浮点数</span></span><br><span class="line">print( random.uniform(<span class="number">1.1</span>,<span class="number">5.4</span>) )     <span class="comment"># 产生  1.1 到 5.4 之间的随机浮点数，区间可以不是整数</span></span><br><span class="line">print( random.choice(<span class="string">'tomorrow'</span>) )   <span class="comment"># 从序列中随机选取一个元素</span></span><br><span class="line"><span class="comment"># 函数原型def choice(self, seq)</span></span><br><span class="line">print( random.randrange(<span class="number">1</span>,<span class="number">100</span>,<span class="number">2</span>) )   <span class="comment"># 生成从1到100的间隔为2的随机整数</span></span><br></pre></td></tr></table></figure><h3 id="shuffle"><a class="markdownIt-Anchor" href="#shuffle"></a> shuffle</h3><p>正如字面所示，也就是打乱的意思</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]                <span class="comment"># 将序列a中的元素顺序打乱</span></span><br><span class="line">random.shuffle(a)</span><br><span class="line">print(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h2 id="numpy中的random"><a class="markdownIt-Anchor" href="#numpy中的random"></a> numpy中的random</h2><p>numpy.random.choice(a, size=None, replace=True, p=None)</p><ul><li>a : 如果是一维数组，就表示从这个一维数组中随机采样；如果是int型，就表示从0到a-1这个序列中随机采样。</li><li>size : 采样结果的数量，默认为1.可以是整数，表示要采样的数量；也可以为tuple，如(m, n, k)，则要采样的数量为m * n * k，size为(m, n, k)</li><li>replace : boolean型，采样的样本是否要更换？这个地方我不太理解，测了一下发现replace指定为True时，采样的元素会有重复；当replace指定为False时，采样不会重复。</li><li>p : 一个一维数组，制定了a中每个元素采样的概率，若为默认的None，则a中每个元素被采样的概率相同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">choice(a[, size, replace, p])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(<span class="number">5</span>, <span class="number">3</span>, replace=<span class="keyword">False</span>)</span><br><span class="line">array([<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#This is equivalent to np.random.permutation(np.arange(5))[:3]</span></span><br><span class="line"><span class="comment"># Generate a non-uniform random sample from np.arange(5) of size 3 without replacement:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(<span class="number">5</span>, <span class="number">3</span>, replace=<span class="keyword">False</span>, p=[<span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0.3</span>, <span class="number">0.6</span>, <span class="number">0</span>])</span><br><span class="line">array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>np.random.randint</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">2</span>,<span class="number">5</span>,size=(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 函数原型randint(low[, high, size])</span></span><br><span class="line"><span class="comment"># - 返回随机的整数，位于半开区间 [low, high)。</span></span><br></pre></td></tr></table></figure><p>np.random.rand</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.rand(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">array([[ <span class="number">0.14022471</span>,  <span class="number">0.96360618</span>],  <span class="comment">#random</span></span><br><span class="line">       [ <span class="number">0.37601032</span>,  <span class="number">0.25528411</span>],  <span class="comment">#random</span></span><br><span class="line">       [ <span class="number">0.49313049</span>,  <span class="number">0.94909878</span>]]) <span class="comment">#random</span></span><br><span class="line"><span class="comment"># 跟random_sample([size])、random([size])和ranf([size])一样</span></span><br></pre></td></tr></table></figure><p>▲需要注意的是np.random.randint和random.randint的区间不同，前者左闭右开()，后者左右都是闭区间[]▲</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-random&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#python-random&quot;&gt;&lt;/a&gt; Python random&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;老是忘记random中每个函数之间的区别，而且常常跟
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>OpenAI Gym使用、rendering画图</title>
    <link href="https://nymrli.top/2019/09/26/OpenAI-Gym%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2019/09/26/OpenAI-Gym使用/</id>
    <published>2019-09-26T09:53:27.000Z</published>
    <updated>2019-10-07T10:01:00.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="openai-gym使用-rendering画图"><a class="markdownIt-Anchor" href="#openai-gym使用-rendering画图"></a> OpenAI Gym使用、rendering画图</h1><blockquote><p>gym开源库：包含一个测试问题集，每个问题成为环境（environment），可以用于自己的RL算法开发。这些环境有共享的接口，允许用户设计通用的算法。其包含了deep mind 使用的Atari游戏测试床。</p></blockquote><p>在强化学习中有2个基本概念，一个是环境（environment），称为外部世界，另一个为智能体agent（<strong>写的算法</strong>）。agent发送action至environment，environment返回观察和回报。</p><p><a href="http://gym.openai.com/docs/" target="_blank" rel="noopener">Gym官方文档</a></p><h2 id="hello-gym"><a class="markdownIt-Anchor" href="#hello-gym"></a> Hello gym</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="comment"># 创建一个小车倒立摆模型</span></span><br><span class="line">env = gym.make(‘CartPole-v0’)</span><br><span class="line"><span class="comment"># 初始化环境</span></span><br><span class="line">env.reset()</span><br><span class="line"><span class="comment"># 刷新当前环境，并显示</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    env.render()</span><br><span class="line">    env.step(env.action_space.sample()) <span class="comment"># take a random action</span></span><br></pre></td></tr></table></figure><p><img src="https://gym.openai.com/assets/docs/aeloop-138c89d44114492fd02822303e6b4b07213010bb14ca5856d2d49d6b62d88e53.svg" alt=""></p><p>设计理念图,一个环境的step函数返回需要的信息，有4种返回值</p><ul><li><strong>observation</strong></li><li><strong>reward</strong></li><li><strong>done</strong> :判断是否到了重新设定(<em>reset</em>)环境</li><li><strong>info</strong> :用于调试的诊断信息，有时也用于学习，但智能体（agent ）在正式的评价中不允许使用该信息进行学习。</li></ul><p>该进程通过调用<strong>reset()<strong>来启动，它返回一个初始</strong>observation</strong>。 所以之前代码的更恰当的方法是遵守<strong>done</strong>的标志：</p><h2 id="空间spaces"><a class="markdownIt-Anchor" href="#空间spaces"></a> 空间（Spaces）</h2><p>在上面的例子中，已经从环境的动作空间中抽取随机动作。但这些行动究竟是什么呢？ 每个环境都带有<strong>action_space</strong> 和<strong>observation_space</strong>对象。这些属性是<a href="https://github.com/openai/gym/blob/master/gym/core.py" target="_blank" rel="noopener">Space</a>类型，它们描述格式化的有效的行动和观察。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line">env = gym.make(<span class="string">'CartPole-v0'</span>)</span><br><span class="line"><span class="comment"># 离散空间允许固定范围的非负数，因此在这种情况下，有效的动作是0或1. </span></span><br><span class="line">print(env.action_space)</span><br><span class="line"><span class="comment">#&gt; Discrete(2)</span></span><br><span class="line">print(env.observation_space)</span><br><span class="line"><span class="comment">#&gt; Box(4,)</span></span><br></pre></td></tr></table></figure><p>Box空间表示一个n维box，所以有效的观察将是4个数字的数组。 也可以检查Box的范围：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(env.observation_space.high)</span><br><span class="line"><span class="comment">#&gt; array([ 2.4       ,         inf,  0.20943951,         inf])</span></span><br><span class="line">print(env.observation_space.low)</span><br><span class="line"><span class="comment">#&gt; array([-2.4       ,        -inf, -0.20943951,        -inf])</span></span><br></pre></td></tr></table></figure><p>这种内省可以帮助编写适用于许多不同环境的通用代码。box和discrete是最常见的空间。你可以从一个空间中取样，或者检查某物是否属于它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gym <span class="keyword">import</span> spaces</span><br><span class="line">space = spaces.Discrete(<span class="number">8</span>) <span class="comment"># Set with 8 elements &#123;0, 1, 2, ..., 7&#125;</span></span><br><span class="line">x = space.sample()</span><br><span class="line"><span class="keyword">assert</span> space.contains(x)</span><br><span class="line"><span class="keyword">assert</span> space.n == <span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="envrender画图"><a class="markdownIt-Anchor" href="#envrender画图"></a> Env.render画图</h2><blockquote><p>参考<a href="https://www.jianshu.com/p/b3c4d2b95c58" target="_blank" rel="noopener">Gym 简单画图</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先，导入库文件（包括gym模块和gym中的渲染模块）</span></span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">from</span> gym.envs.classic_control <span class="keyword">import</span> rendering</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们生成一个类，该类继承 gym.Env. 同时，可以添加元数据，改变渲染环境时的参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(gym.Env)</span>:</span></span><br><span class="line">    <span class="comment"># 如果你不想改参数，下面可以不用写</span></span><br><span class="line">    metadata = &#123;</span><br><span class="line">        <span class="string">'render.modes'</span>: [<span class="string">'human'</span>, <span class="string">'rgb_array'</span>],</span><br><span class="line">        <span class="string">'video.frames_per_second'</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 我们在初始函数中定义一个 viewer ，即画板</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.viewer = rendering.Viewer(<span class="number">600</span>, <span class="number">400</span>)   <span class="comment"># 600x400 是画板的长和框</span></span><br><span class="line"><span class="comment"># 继承Env render函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self, mode=<span class="string">'human'</span>, close=False)</span>:</span></span><br><span class="line">        <span class="comment"># 下面就可以定义你要绘画的元素了</span></span><br><span class="line">        line1 = rendering.Line((<span class="number">100</span>, <span class="number">300</span>), (<span class="number">500</span>, <span class="number">300</span>))</span><br><span class="line">        line2 = rendering.Line((<span class="number">100</span>, <span class="number">200</span>), (<span class="number">500</span>, <span class="number">200</span>))</span><br><span class="line">        <span class="comment"># 给元素添加颜色</span></span><br><span class="line">        line1.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        line2.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 把图形元素添加到画板中</span></span><br><span class="line">        self.viewer.add_geom(line1)</span><br><span class="line">        self.viewer.add_geom(line2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.viewer.render(return_rgb_array=mode == <span class="string">'rgb_array'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 最后运行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Test()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        t.render()</span><br></pre></td></tr></table></figure><p><strong>△.值得注意的是，画板的水平方向是 x 轴， 垂直方向是 y 轴， 且原点在左下角</strong></p><h3 id="画个圆"><a class="markdownIt-Anchor" href="#画个圆"></a> <strong>画个圆</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self, mode=<span class="string">'human'</span>, close=False)</span>:</span></span><br><span class="line">    <span class="comment"># 画一个直径为 30 的园</span></span><br><span class="line">    circle = rendering.make_circle(<span class="number">30</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加一个平移操作</span></span><br><span class="line">    circle_transform = rendering.Transform(translation=(<span class="number">100</span>, <span class="number">200</span>))</span><br><span class="line">    <span class="comment"># 让圆添加平移这个属性,</span></span><br><span class="line">    circle.add_attr(circle_transform)</span><br><span class="line">    </span><br><span class="line">    self.viewer.add_geom(circle)</span><br><span class="line">    <span class="keyword">return</span> self.viewer.render(return_rgb_array=mode == <span class="string">'rgb_array'</span>)</span><br></pre></td></tr></table></figure><p>△注意.是圆心在平移</p><h2 id="ringviewr"><a class="markdownIt-Anchor" href="#ringviewr"></a> RingViewr</h2><blockquote><p>研究rings时写的render</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">from</span> gym.envs.classic_control <span class="keyword">import</span> rendering</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ringViewer</span><span class="params">(rendering.Viewer)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    画板,直接继承自rendering.Viewer</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,width, height, display=None)</span>:</span></span><br><span class="line">        super(ringViewer, self).__init__(width, height, display=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pos2loc</span><span class="params">(pos=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        根据位置索引确定画图坐标</span></span><br><span class="line"><span class="string">        :param pos: 位置索引0-9</span></span><br><span class="line"><span class="string">        :return: loc</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSize</span><span class="params">(size)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        设置画圆的半径</span></span><br><span class="line"><span class="string">        :param size:[0-2]</span></span><br><span class="line"><span class="string">        :return: radius</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getColor</span><span class="params">(c=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        根据颜色索引选择圆圈颜色</span></span><br><span class="line"><span class="string">        :param c:</span></span><br><span class="line"><span class="string">        :return: list</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawNewring</span><span class="params">(self, newring:list=None)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        画新生成的圆</span></span><br><span class="line"><span class="string">        :param newring:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(newring)):</span><br><span class="line">            <span class="keyword">if</span> newring[i] != <span class="number">0</span>:</span><br><span class="line">                ring = rendering.make_circle(radius=self.getSize(i),</span><br><span class="line">                                             res=<span class="number">50</span>,</span><br><span class="line">                                             filled=<span class="keyword">False</span>)</span><br><span class="line">                r, g, b = self.getColor(newring[i])</span><br><span class="line">                ring.set_color(r, g, b)</span><br><span class="line">                ring_transform = rendering.Transform(translation=(<span class="number">150</span>,<span class="number">30</span>))</span><br><span class="line">                ring.add_attr(ring_transform)</span><br><span class="line">                self.add_geom(ring)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_drawQG</span><span class="params">(self, qgs: list=None)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        画棋盘上各个棋格的圆圈</span></span><br><span class="line"><span class="string">        :param qgs:</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">for</span> num,qg <span class="keyword">in</span> enumerate(qgs):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(qg)):</span><br><span class="line">                <span class="keyword">if</span> qg[i] != <span class="number">0</span>:</span><br><span class="line">                    ring = rendering.make_circle(radius=self.getSize(i),</span><br><span class="line">                                                 res = <span class="number">50</span>,</span><br><span class="line">                                                 filled=<span class="keyword">False</span>)</span><br><span class="line">                    r, g, b = self.getColor(qg[i])</span><br><span class="line">                    ring.set_color(r, g, b)</span><br><span class="line">                    ring_transform = rendering.Transform(translation=self.pos2loc(num))</span><br><span class="line">                    ring.add_attr(ring_transform)</span><br><span class="line">                    self.add_geom(ring)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getQG</span><span class="params">(self, qg: list=None)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        将len=27的list转换为[[],[],...]</span></span><br><span class="line"><span class="string">        :param qg: (27,1)的list</span></span><br><span class="line"><span class="string">        :return: (9,1)的list</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        qgs = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                tmp = []</span><br><span class="line">                <span class="keyword">for</span> z <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                    tmp.append(qg[<span class="number">9</span>*x+<span class="number">3</span>*y+z])</span><br><span class="line">                qgs.append(tmp)</span><br><span class="line">        self._drawQG(qgs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testenv</span><span class="params">(gym.Env)</span>:</span></span><br><span class="line">    <span class="comment"># 如果你不想改参数，下面可以不用写</span></span><br><span class="line">    metadata = &#123;</span><br><span class="line">        <span class="string">'render.modes'</span>: [<span class="string">'human'</span>, <span class="string">'rgb_array'</span>],</span><br><span class="line">        <span class="string">'video.frames_per_second'</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.viewer = ringViewer(<span class="number">300</span>, <span class="number">400</span>)   <span class="comment"># 600x400 是画板的长和框</span></span><br><span class="line">        self.state:list = []</span><br><span class="line">        self.state:list = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setState</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        self.state = state</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setNewring</span><span class="params">(self, newring=None)</span>:</span></span><br><span class="line">        self.newring = newring</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self, mode=<span class="string">'human'</span>, close=False)</span>:</span></span><br><span class="line">        <span class="comment"># 由于没有找到viewer源码中删除组件的代码,于是每次在渲染前 清空上一次geoms和onetime_geoms列表 来达到消除的目的</span></span><br><span class="line">        <span class="keyword">if</span> self.state.any():</span><br><span class="line">            self.viewer.geoms.clear()</span><br><span class="line">            self.viewer.onetime_geoms.clear()</span><br><span class="line">            self.viewer.getQG(self.state)</span><br><span class="line">        <span class="keyword">if</span> self.newring:</span><br><span class="line">            self.viewer.drawNewring(self.newring)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.viewer.render(return_rgb_array=mode == <span class="string">'rgb_array'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    v = Testenv()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        v.setState(np.random.randint(<span class="number">0</span>,<span class="number">6</span>,(<span class="number">27</span>)))</span><br><span class="line">        v.setNewring([random.randint(<span class="number">0</span>,<span class="number">5</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>)])</span><br><span class="line">        print(v.state)</span><br><span class="line">        print(v.newring)</span><br><span class="line">        v.render()</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>△.由于没有找到viewer源码中删除组件的代码,于是每次在渲染前 清空上一次geoms和onetime_geoms列表 来达到消除的目的</p><p>效果图如下</p><p><img src="/2019/09/26/OpenAI-Gym使用/ring.jpg" alt="ring"></p><h2 id="深入剖析gym环境构建转"><a class="markdownIt-Anchor" href="#深入剖析gym环境构建转"></a> <a href="https://blog.csdn.net/WASEFADG/article/details/81043075" target="_blank" rel="noopener">深入剖析gym环境构建[转]</a></h2><blockquote><p>由于该博客的代码展示实在太乱,于是重新帮他排版了一下</p></blockquote><p>我们继续讲，从第1小节的尾巴开始。有三个重要的函数：</p><ul><li>env = gym.make(‘CartPole-v0’)</li><li>env.reset()</li><li>env.render()</li></ul><p>第一个函数是创建环境，我们会在第3小节具体讲如何创建自己的环境，所以这个函数暂时不讲。第二个函数env.reset()和第三个函数env.render()是每个环境文件都包含的函数。我们以cartpole为例，对这两个函数进行讲解。</p><p>Cartpole的环境文件在~你的gym目录<code>/gym/envs/classic_control/cartpole.py</code>.</p><p>该文件定义了一个CartPoleEnv的环境类，该类的成员函数有：seed(), step(),reset()和render(). 第1小节调用的就是CartPoleEnv的两个成员函数reset()和render()。下面，我们先讲讲这两个函数，再介绍step()函数</p><h3 id="21-reset函数详解"><a class="markdownIt-Anchor" href="#21-reset函数详解"></a> 2.1 reset()函数详解</h3><p>reset()为重新初始化函数。那么这个函数有什么用呢？</p><p>在强化学习算法中，智能体需要一次次地尝试，累积经验，然后从经验中学到好的动作。一次尝试我们称之为一条轨迹或一个episode. 每次尝试都要到达终止状态. 一次尝试结束后，智能体需要从头开始，这就需要智能体具有<strong>重新初始化</strong>的功能。函数reset()就是这个作用。</p><p>reset()的源代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"># 利用均匀随机分布初试化环境的状态</span></span><br><span class="line">    self.state = self.np_random.uniform(low=-0.05, high=0.05, size=(4,))</span><br><span class="line">    <span class="comment"># 设置当前步数为None</span></span><br><span class="line">    self.steps_beyond_done = <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># 返回环境的初始化状态</span></span><br><span class="line">    <span class="keyword">return</span> np.array(self.state)</span><br></pre></td></tr></table></figure><h3 id="22-render函数详解"><a class="markdownIt-Anchor" href="#22-render函数详解"></a> 2.2 render()函数详解</h3><p>render()函数在这里扮演<strong>图像引擎</strong>的角色。一个仿真环境必不可少的两部分是<strong>物理引擎</strong>和<strong>图像引擎</strong>。物理引擎模拟环境中物体的运动规律；图像引擎用来显示环境中的物体图像。其实，对于强化学习算法，该函数可以没有。但是，为了便于直观显示当前环境中物体的状态，图像引擎还是有必要的。另外，加入图像引擎可以方便我们调试代码。下面具体介绍gym如何利用图像引擎来创建图像。</p><p>我们直接看源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gym.envs.classic_control <span class="keyword">import</span> rendering</span><br><span class="line"><span class="comment"># 这一句导入rendering模块，利用rendering模块中的画图函数进行图形的绘制</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myenv</span><span class="params">(gym.Env)</span></span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">_render</span><span class="params">(self, mode=’human’, close=False)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> close:</span><br><span class="line">        <span class="keyword">pass</span> <span class="comment">#省略，直接看关键代码部分</span></span><br><span class="line">        <span class="keyword">if</span> self.viewer <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># 如绘制600*400的窗口函数为：</span></span><br><span class="line">            self.viewer = rendering.Viewer(screen_width, screen_height)</span><br><span class="line">        <span class="comment"># 其中screen_width=600， screen_height=400</span></span><br><span class="line">        <span class="comment"># 创建小车的代码为：</span></span><br><span class="line">            l,r,t,b = -cartwidth/<span class="number">2</span>, cartwidth/<span class="number">2</span>, cartheight/<span class="number">2</span>, -cartheight/<span class="number">2</span></span><br><span class="line">            axleoffset =cartheight/<span class="number">4.0</span></span><br><span class="line">            cart = rendering.FilledPolygon([(l,b), (l,t), (r,t), (r,b)])</span><br><span class="line">        <span class="comment"># 其中rendering.FilledPolygon为填充一个矩形。</span></span><br></pre></td></tr></table></figure><p>创建完cart的形状，接下来给cart添加平移属性和旋转属性。将车的位移设置到cart的平移属性中，cart就会根据系统的状态变化左右运动。具体代码解释，我已上传到github上面了，<a href="https://link.zhihu.com/?target=https%3A//github.com/gxnk/reinforcement-learning-code" target="_blank" rel="noopener">gxnk/reinforcement-learning-code</a>　。想深入了解的同学可去下载学习。</p><h3 id="23-step函数详解"><a class="markdownIt-Anchor" href="#23-step函数详解"></a> 2.3 step()函数详解</h3><p>该函数在仿真器中扮演<strong>物理引擎</strong>的角色。其输入是动作a，输出是：下一步状态，立即回报，是否终止，调试项。</p><p>该函数描述了智能体与环境交互的所有信息，是环境文件中最重要的函数。在该函数中，一般利用智能体的运动学模型和动力学模型计算下一步的状态和立即回报，并判断是否达到终止状态。</p><p>我们直接看源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_step</span><span class="params">(self, action)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> self.action_space.contains(action), <span class="string">"%r (%s) invalid"</span>%(action, type(action))</span><br><span class="line">    state = self.state</span><br><span class="line">    x, x_dot, theta, theta_dot = state <span class="comment">#系统的当前状态</span></span><br><span class="line">    force = self.force_mag <span class="keyword">if</span> action==<span class="number">1</span> <span class="keyword">else</span> -self.force_mag <span class="comment">#输入动作，即作用到车上的力</span></span><br><span class="line">    costheta = math.cos(theta) <span class="comment">#余弦函数</span></span><br><span class="line">    sintheta = math.sin(theta) <span class="comment">#正弦函数</span></span><br><span class="line">    <span class="comment">#底下是车摆的动力学方程式，即加速度与动作之间的关系。</span></span><br><span class="line">    temp = (force + self.polemass_length * theta_dot * theta_dot * sintheta) / self.total_mass</span><br><span class="line">    thetaacc = (self.gravity * sintheta - costheta* temp) / (self.length * (<span class="number">4.0</span>/<span class="number">3.0</span> - self.masspole * costheta * costheta / self.total_mass)) <span class="comment">#摆的角加速度</span></span><br><span class="line">    xacc = temp - self.polemass_length * thetaacc * costheta / self.total_mass <span class="comment">#小车的平移加速</span></span><br><span class="line">    x = x + self.tau * x_dot</span><br><span class="line">    x_dot = x_dot + self.tau * xacc</span><br><span class="line">    theta = theta + self.tau * theta_dot</span><br><span class="line">    theta_dot = theta_dot + self.tau * thetaacc <span class="comment">#积分求下一步的状态</span></span><br><span class="line">    self.state = (x,x_dot,theta,theta_dot)</span><br></pre></td></tr></table></figure><p>2.4 一个简单的demo</p><p>下面，我给出一个最简单的demo，让大家体会一下上面三个函数如何使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">env = gym.make(<span class="string">'CartPole-v0'</span>)   </span><br><span class="line"><span class="comment">#创造环境observation = env.reset()       </span></span><br><span class="line"><span class="comment">#初始化环境，observation为环境状态</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">100</span>):    </span><br><span class="line">    action = env.action_space.sample()  </span><br><span class="line">    <span class="comment">#随机采样动作    </span></span><br><span class="line">    observation, reward, done, info = env.step(action)  </span><br><span class="line">    <span class="comment">#与环境交互，获得下一步的时刻    </span></span><br><span class="line">    <span class="keyword">if</span> done:                     </span><br><span class="line">        <span class="keyword">break</span>    </span><br><span class="line">    env.render()         </span><br><span class="line">    <span class="comment">#绘制场景    </span></span><br><span class="line">    count+=<span class="number">1</span>    </span><br><span class="line">    time.sleep(<span class="number">0.2</span>)      </span><br><span class="line">    <span class="comment">#每次等待0.2s</span></span><br><span class="line">    print(count)             </span><br><span class="line">    <span class="comment">#打印该次尝试的步数</span></span><br></pre></td></tr></table></figure><p>第3小节：创建自己的gym环境并利示例qlearning的方法</p><p>在上一小节中以cartpole为例子深入剖析了gym环境文件的重要组成。我们知道，一个gym环境最少的组成需要包括reset()函数和step()函数。当然，图像显示函数render()一般也是需要的。这一节，我会以机器人找金币为例给大家演示如何构建一个全新的gym环境，并以此环境为例，示例最经典的强化学习算法qlearning算法。在3.1节中，给出机器人找金币的问题陈述；第3.2节中，给出构建gym环境的过程；第3.3节中，利用qlearning方法实现机器人找金币的智能决策。全部代码已传到github上。</p><p>3.1 机器人找金币的问题陈述</p><p><img src="https://pic3.zhimg.com/80/v2-954718f1e5f4246a91f38386db310439_hd.jpg" alt="img"></p><p>图1.1 机器人找金币</p><p>如图1.1 为机器人在网格世界找金币的示意图。该网格世界一共有８个状态，其中状态６和状态8为死亡区域，状态７为金币区域。机器人的初始位置为网格世界中任意一个状态。机器人从初始状态出发寻找金币。机器人进行一次探索，进入死亡区域或找到金币，本次探测结束。机器人找到金币的回报为１，进入死亡区域回报为－１，机器人在区域１－５之间转换时，回报为０。我们的目标是找到一个策略使得机器人不管处在什么状态（１－５）都能找到金币。对于这个机器人找金币的游戏，我们可以利用强化学习的方法来实现。</p><h3 id="构建网格世界的gym环境"><a class="markdownIt-Anchor" href="#构建网格世界的gym环境"></a> 构建网格世界的gym环境</h3><blockquote><p>该例子的代码,除了本篇博客有以外,<a href="https://blog.csdn.net/extremebingo/article/details/80867486" target="_blank" rel="noopener">OpenAI Gym构建自定义强化学习环境</a>有更仔细和规范的代码贴出</p></blockquote><p>一个gym的环境文件，其主体是个类，在这里我们定义类名为：GridEnv, 其初始化为环境的基本参数，因为机器人找金币的过程是一个马尔科夫过程，我们在强化学习入门课程的第一讲已经介绍过了一个马尔科夫过程应该包括状态空间，动作空间，回报函数，状态转移概率。因此，我们在类GridEnv的初始化时便给出了相应的定义。网格世界的全部代码在<a href="https://link.zhihu.com/?target=https%3A//github.com/gxnk/reinforcement-learning-code" target="_blank" rel="noopener">gxnk/reinforcement-learning-code</a>,文件名为 grid_mdp.py. 我们看源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 状态空间为：</span></span><br><span class="line">self.states = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="comment"># 动作空间为：</span></span><br><span class="line">　　self.actions = [<span class="string">'n'</span>,<span class="string">'e'</span>,<span class="string">'s'</span>,<span class="string">'w'</span>]</span><br><span class="line"><span class="comment"># 回报函数为：</span></span><br><span class="line">　　self.rewards = dict(); <span class="comment">#回报的数据结构为字典</span></span><br><span class="line">　　self.rewards[<span class="string">'1_s'</span>] = <span class="number">-1.0</span></span><br><span class="line">　　self.rewards[<span class="string">'3_s'</span>] = <span class="number">1.0</span></span><br><span class="line">self.rewards[<span class="string">'5_s'</span>] = <span class="number">-1.0</span></span><br><span class="line"><span class="comment"># 状态转移概率为：</span></span><br><span class="line">　　self.t = dict(); <span class="comment">#状态转移的数据格式为字典</span></span><br><span class="line">　　self.t[<span class="string">'1_s'</span>] = <span class="number">6</span></span><br><span class="line">　　self.t[<span class="string">'1_e'</span>] = <span class="number">2</span></span><br><span class="line">　　self.t[<span class="string">'2_w'</span>] = <span class="number">1</span></span><br><span class="line">　　self.t[<span class="string">'2_e'</span>] = <span class="number">3</span></span><br><span class="line">　　self.t[<span class="string">'3_s'</span>] = <span class="number">7</span></span><br><span class="line">　　self.t[<span class="string">'3_w'</span>] = <span class="number">2</span></span><br><span class="line">　　self.t[<span class="string">'3_e'</span>] = <span class="number">4</span></span><br><span class="line">　　self.t[<span class="string">'4_w'</span>] = <span class="number">3</span></span><br><span class="line">　　self.t[<span class="string">'4_e'</span>] = <span class="number">5</span></span><br><span class="line">　　self.t[<span class="string">'5_s'</span>] = <span class="number">8</span></span><br><span class="line">　　self.t[<span class="string">'5_w'</span>] = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>有了状态空间，动作空间和状态转移概率，我们便可以写step(a)函数了。这里特别注意的是，step()函数的输入是动作，输出为：下一个时刻的动作，回报，是否终止，调试信息。尤其需要注意的是输出的顺序不要弄错了。对于调试信息，可以为空，但不能缺少，否则会报错，常用{}来代替。我们看源代码：</p><h4 id="step函数的建立"><a class="markdownIt-Anchor" href="#step函数的建立"></a> step函数的建立:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_step</span><span class="params">(self, action)</span>:</span></span><br><span class="line">    <span class="comment">#系统当前状态</span></span><br><span class="line">    state = self.state</span><br><span class="line">      ＃判断系统当前状态是否为终止状态</span><br><span class="line">    <span class="keyword">if</span> state <span class="keyword">in</span> self.terminate_states:</span><br><span class="line">    <span class="keyword">return</span> state, <span class="number">0</span>, <span class="keyword">True</span>, &#123;&#125;</span><br><span class="line">    key = <span class="string">"%d_%s"</span>%(state, action) <span class="comment">#将状态和动作组成字典的键值</span></span><br><span class="line">    <span class="comment">#状态转移</span></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> self.t:</span><br><span class="line">    next_state = self.t[key]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    next_state = state</span><br><span class="line">        self.state = next_state</span><br><span class="line">        is_terminal = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">if</span> next_state <span class="keyword">in</span> self.terminate_states:</span><br><span class="line">    is_terminal = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.rewards:</span><br><span class="line">    r = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    r = self.rewards[key]</span><br><span class="line"><span class="keyword">return</span> next_state, r,is_terminal,&#123;&#125;</span><br></pre></td></tr></table></figure><p>step()函数就是这么简单。下面我们重点介绍下如何写render()函数。从图1.1机器人找金币的示意图我们可以看到，网格世界是由一些线和圆组成的。因此，我们可以调用rendering中的画图函数来绘制这些图像。</p><h4 id="render函数的建立"><a class="markdownIt-Anchor" href="#render函数的建立"></a> render函数的建立:</h4><p>整个图像是一个600*400的窗口，可用如下代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gym.envs.classic_control <span class="keyword">import</span> rendering</span><br><span class="line"></span><br><span class="line">self.viewer = rendering.Viewer(screen_width, screen_height)</span><br><span class="line"><span class="comment"># 创建网格世界，一共包括11条直线，事先算好每条直线的起点和终点坐标，然后绘制这些直线，代码如下：</span></span><br><span class="line"><span class="comment">#创建网格世界</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.line1 = rendering.Line((<span class="number">100</span>,<span class="number">300</span>),(<span class="number">500</span>,<span class="number">300</span>))</span><br><span class="line">    self.line2 = rendering.Line((<span class="number">100</span>, <span class="number">200</span>), (<span class="number">500</span>, <span class="number">200</span>))</span><br><span class="line">    self.line3 = rendering.Line((<span class="number">100</span>, <span class="number">300</span>), (<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">    self.line4 = rendering.Line((<span class="number">180</span>, <span class="number">300</span>), (<span class="number">180</span>, <span class="number">100</span>))</span><br><span class="line">    self.line5 = rendering.Line((<span class="number">260</span>, <span class="number">300</span>), (<span class="number">260</span>, <span class="number">100</span>))</span><br><span class="line">    self.line6 = rendering.Line((<span class="number">340</span>, <span class="number">300</span>), (<span class="number">340</span>, <span class="number">100</span>))</span><br><span class="line">    self.line7 = rendering.Line((<span class="number">420</span>, <span class="number">300</span>), (<span class="number">420</span>, <span class="number">100</span>))</span><br><span class="line">    self.line8 = rendering.Line((<span class="number">500</span>, <span class="number">300</span>), (<span class="number">500</span>, <span class="number">100</span>))</span><br><span class="line">    self.line9 = rendering.Line((<span class="number">100</span>, <span class="number">100</span>), (<span class="number">180</span>, <span class="number">100</span>))</span><br><span class="line">    self.line10 = rendering.Line((<span class="number">260</span>, <span class="number">100</span>), (<span class="number">340</span>, <span class="number">100</span>))</span><br><span class="line">    self.line11 = rendering.Line((<span class="number">420</span>, <span class="number">100</span>), (<span class="number">500</span>, <span class="number">100</span>))</span><br><span class="line">    <span class="comment"># 接下来，创建死亡区域，我们用黑色的圆圈代表死亡区域，源代码如下：</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建第一个骷髅</span></span><br><span class="line">    self.kulo1 = rendering.make_circle(<span class="number">40</span>)</span><br><span class="line">    self.circletrans = rendering.Transform(translation=(<span class="number">140</span>,<span class="number">150</span>))</span><br><span class="line">    self.kulo1.add_attr(self.circletrans)</span><br><span class="line">    self.kulo1.set_color(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 创建第二个骷髅</span></span><br><span class="line">    self.kulo2 = rendering.make_circle(<span class="number">40</span>)</span><br><span class="line">    self.circletrans = rendering.Transform(translation=(<span class="number">460</span>, <span class="number">150</span>))</span><br><span class="line">    self.kulo2.add_attr(self.circletrans)</span><br><span class="line">    self.kulo2.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 创建金币区域，用金色的圆来表示：</span></span><br><span class="line">    <span class="comment"># 创建金条</span></span><br><span class="line">    self.gold = rendering.make_circle(<span class="number">40</span>)</span><br><span class="line">    self.circletrans = rendering.Transform(translation=(<span class="number">300</span>, <span class="number">150</span>))</span><br><span class="line">    self.gold.add_attr(self.circletrans)</span><br><span class="line">    self.gold.set_color(<span class="number">1</span>, <span class="number">0.9</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建机器人，我们依然用圆来表示机器人，为了跟死亡区域和金币区域不同，我们可以设置不同的颜色：</span></span><br><span class="line">    <span class="comment"># 创建机器人</span></span><br><span class="line">    self.robot= rendering.make_circle(<span class="number">30</span>)</span><br><span class="line">    self.robotrans = rendering.Transform()</span><br><span class="line">    self.robot.add_attr(self.robotrans)</span><br><span class="line">    self.robot.set_color(<span class="number">0.8</span>, <span class="number">0.6</span>, <span class="number">0.4</span>)</span><br><span class="line">    <span class="comment"># 创建完之后，给11条直线设置颜色，并将这些创建的对象添加到几何中代码如下：</span></span><br><span class="line">    self.line1.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line2.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line3.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line4.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line5.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line6.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line7.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line8.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line9.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line10.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line11.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 添加组件到Viewer中</span></span><br><span class="line">    self.viewer.add_geom(self.line1)</span><br><span class="line">    self.viewer.add_geom(self.line2)</span><br><span class="line">    self.viewer.add_geom(self.line3)</span><br><span class="line">    self.viewer.add_geom(self.line4)</span><br><span class="line">    self.viewer.add_geom(self.line5)</span><br><span class="line">    self.viewer.add_geom(self.line6)</span><br><span class="line">    self.viewer.add_geom(self.line7)</span><br><span class="line">    self.viewer.add_geom(self.line8)</span><br><span class="line">    self.viewer.add_geom(self.line9)</span><br><span class="line">    self.viewer.add_geom(self.line10)</span><br><span class="line">    self.viewer.add_geom(self.line11)</span><br><span class="line">    self.viewer.add_geom(self.kulo1)</span><br><span class="line">    self.viewer.add_geom(self.kulo2)</span><br><span class="line">    self.viewer.add_geom(self.gold)</span><br><span class="line">    self.viewer.add_geom(self.robot)</span><br><span class="line">    <span class="comment"># 接下来，开始设置机器人的位置。机器人的位置根据其当前所处的状态不同，所在的位置不同。我们事先计算出每个状态处机器人位置的中心坐标，并存储到两个向量中，并在类初始化中给出：</span></span><br><span class="line">        self.x=[<span class="number">140</span>,<span class="number">220</span>,<span class="number">300</span>,<span class="number">380</span>,<span class="number">460</span>,<span class="number">140</span>,<span class="number">300</span>,<span class="number">460</span>]</span><br><span class="line">        self.y=[<span class="number">250</span>,<span class="number">250</span>,<span class="number">250</span>,<span class="number">250</span>,<span class="number">250</span>,<span class="number">150</span>,<span class="number">150</span>,<span class="number">150</span>]</span><br><span class="line">    <span class="comment"># 根据这两个向量和机器人当前的状态，我们就可以设置机器人当前的圆心坐标了即：</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.state <span class="keyword">is</span> <span class="keyword">None</span>: <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        self.robotrans.set_translation(self.x[self.state<span class="number">-1</span>], self.y[self.state- <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最后还需要一个返回语句：</span></span><br><span class="line">        <span class="keyword">return</span> self.viewer.render(return_rgb_array=mode == <span class="string">'rgb_array'</span>)</span><br></pre></td></tr></table></figure><p>以上便完成了render()函数的建立</p><h4 id="reset函数的建立"><a class="markdownIt-Anchor" href="#reset函数的建立"></a> reset()函数的建立：</h4><p>reset()函数常常用随机的方法初始化机器人的状态，即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_reset</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.state = self.states[int(random.random() * len(self.states))]</span><br><span class="line">    <span class="keyword">return</span> self.state</span><br></pre></td></tr></table></figure><h4 id="环境的注册"><a class="markdownIt-Anchor" href="#环境的注册"></a> 环境的注册</h4><p>全部的代码请去github上下载学习。下面重点讲一讲如何将建好的环境进行注册，以便通过gym的标准形式进行调用。其实环境的注册很简单，只需要３步：</p><p>第一步：将我们自己的环境文件（我创建的文件名为grid_mdp.py)拷贝到你的gym安装目录/gym/gym/envs/classic_control文件夹中。（拷贝在这个文件夹中因为要使用rendering模块。当然，也有其他办法。该方法不唯一）</p><p>第二步：打开该文件夹（第一步中的文件夹）下的__init__.py文件，在文件末尾加入语句：<code>from gym.envs.classic_control.grid_mdp import GridEnv</code></p><p>第三步：进入文件夹你的gym安装目录/gym/gym/envs，打开该文件夹下的__init__.py文件，添加代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">register(</span><br><span class="line">    <span class="comment"># gym.make(‘id’)时的id</span></span><br><span class="line">    id=<span class="string">'GridWorld-v0'</span>,</span><br><span class="line">    <span class="comment"># 函数路口</span></span><br><span class="line">    entry_point=<span class="string">'gym.envs.classic_control:GridEnv'</span>,</span><br><span class="line">    max_episode_steps=<span class="number">200</span>,</span><br><span class="line">    reward_threshold=<span class="number">100.0</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第一个参数id就是你调用gym.make(‘id’)时的id,　这个id你可以随便选取，我取的，名字是GridWorld-v0</p><p>第二个参数就是函数路口了。</p><p>后面的参数原则上来说可以不必要写。</p><p>经过以上三步，就完成了注册。</p><p>下面，我们给个简单的demo来测试下我们的环境的效果吧：</p><p>我们依然写个终端程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"></span><br><span class="line">env = gym.make(<span class="string">'GridWorld-v0'</span>)</span><br><span class="line">env.reset()</span><br><span class="line">env.render()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;openai-gym使用-rendering画图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#openai-gym使用-rendering画图&quot;&gt;&lt;/a&gt; OpenAI Gym使用、rendering画图&lt;/h1&gt;
&lt;blockquo
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="RL" scheme="https://nymrli.top/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装selenium执行Python程序</title>
    <link href="https://nymrli.top/2019/09/24/Linux%E5%AE%89%E8%A3%85selenium%E6%89%A7%E8%A1%8CPython%E7%A8%8B%E5%BA%8F/"/>
    <id>https://nymrli.top/2019/09/24/Linux安装selenium执行Python程序/</id>
    <published>2019-09-24T14:13:20.000Z</published>
    <updated>2019-10-16T05:21:46.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux安装selenium执行python程序"><a class="markdownIt-Anchor" href="#linux安装selenium执行python程序"></a> Linux安装selenium执行Python程序</h1><ol><li><p>配置python运行环境</p></li><li><p>安装selenium,<code>sudo pip install selenium</code></p></li><li><p>安装chrome</p><blockquote><p>提供下载网站<a href="https://www.chromedownloads.net/chrome64linux-stable/" target="_blank" rel="noopener">chromedownloads</a>,下载google-chrome-stable_current_amd64-75.0.3770.80.deb</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libxss1 libappindicator1 libindicator7</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i google-chrome-stable_current_amd64-75.0.3770.80.deb </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行sudo dpkg -i google-chrome*.deb后报错的话，那就执行一下sudo apt-get install -f</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装后在/usr/bin目录下查看是否有google-chrome文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查chrome版本：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> google-chrome-stable --version</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当时无法查到版本,并报错error <span class="keyword">while</span> loading shared libraries: libasound.so.2,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入sudo apt-get install -f后解决</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> google-chrome-stable --version</span></span><br></pre></td></tr></table></figure></li><li><p>安装chromedriver</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget -N http://chromedriver.storage.googleapis.com/75.0.3770.8/chromedriver_linux64.zip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> unzip chromedriver_linux64.zip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod +x chromedriver</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mv -f chromedriver /usr/<span class="built_in">local</span>/share/chromedriver</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s /usr/<span class="built_in">local</span>/share/chromedriver /usr/<span class="built_in">local</span>/bin/chromedriver</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s /usr/<span class="built_in">local</span>/share/chromedriver /usr/bin/chromedrive</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chromedriver -v</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果发现版本不对，chrome可以使用这样卸载：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum remove google-chrome</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chromedriver可以直接删除目录：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo rm -f /usr/bin/chromedriver</span></span><br></pre></td></tr></table></figure></li><li><p>编写python测试代码</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-dev-shm-usage'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com/'</span>)</span><br></pre></td></tr></table></figure><h2 id="报错记录"><a class="markdownIt-Anchor" href="#报错记录"></a> 报错记录:</h2><p><code>Message: unknown error: Chrome failed to start: exited abnormally (unknown error: DevToolsActivePort file doesn't exist) (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)</code></p><p><strong>解决方法：添加参数</strong>chrome_options.add_argument(’–no-sandbox’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'user-agent=%s'</span> % random.choice(MY_USER_AGENT_PC))</span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">'/usr/local/bin/chromedriver'</span>, chrome_options=chrome_options)</span><br><span class="line">driver.set_window_size(<span class="number">1366</span>, <span class="number">1000</span>)  <span class="comment"># 调整页面尺寸</span></span><br><span class="line">driver.implicitly_wait(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linux安装selenium执行python程序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#linux安装selenium执行python程序&quot;&gt;&lt;/a&gt; Linux安装selenium执行Python程序&lt;/h1&gt;
&lt;ol&gt;
&lt;
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="Linux" scheme="https://nymrli.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04+CUDA toolkit10.1+cudNN7.6+bazel0.26.1</title>
    <link href="https://nymrli.top/2019/09/23/Ubuntu16-04-CUDA-toolkit10-1-cudNN7-6-bazel0-26-1/"/>
    <id>https://nymrli.top/2019/09/23/Ubuntu16-04-CUDA-toolkit10-1-cudNN7-6-bazel0-26-1/</id>
    <published>2019-09-23T08:38:55.000Z</published>
    <updated>2019-10-24T12:36:42.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ubuntu-1604-cuda-toolkit-101-cudnn76-bazel-0261"><a class="markdownIt-Anchor" href="#ubuntu-1604-cuda-toolkit-101-cudnn76-bazel-0261"></a> Ubuntu 16.04 + CUDA toolkit 10.1 + cudNN7.6 + bazel 0.26.1</h2><blockquote><p>保证<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">cuDNN</a>跟<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">CUDA SDK</a>的版本一致即可.</p><p>从源码编译的话需要查看显卡的计算能力,可在<a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="noopener">查看GPU计算能力</a>，在配置的时候填入即可，跟CUDA SDK的版本无关</p><p>▲必须注册账号后，才能选择下载</p></blockquote><p>▲最好先看我的踩坑记录，先确保自己知道有这些坑</p><p>▲.<strong>全程保持能连接外网（翻墙）</strong></p><h3 id="安装nvidia驱动"><a class="markdownIt-Anchor" href="#安装nvidia驱动"></a> <strong>安装NVIDIA驱动</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ubuntu-drivers devices <span class="comment"># 查看</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看NVIDIA驱动版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg --list | grep nvidia-*</span></span><br></pre></td></tr></table></figure><p>显卡驱动与CUDA版本对应关系</p><p>最新的根据<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html" target="_blank" rel="noopener">官网查看</a></p><p><img src="https://img-blog.csdnimg.cn/20190308104315129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUX3hpYW9fYmFp,size_16,color_FFFFFF,t_70" alt=""></p><p><a href="https://www.nvidia.cn/Download/index.aspx?lang=cn#" target="_blank" rel="noopener">下载NVIDIA驱动</a></p><p>▲注意:得对应匹配!!!</p><p>安装完成后，可以通过<code>nvidia-smi</code>查看GPU使用情况</p><h3 id="cuda-toolkit-101"><a class="markdownIt-Anchor" href="#cuda-toolkit-101"></a> CUDA toolkit 10.1</h3><p>安装之前先看显卡的驱动版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装过程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i cuda-repo-ubuntu1604-10-1-local-10.1.243-418.87.00_1.0-1_amd64.deb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install cuda</span></span><br></pre></td></tr></table></figure><p>设置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim ~/.bashrc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-8.0/bin:<span class="variable">$PATH</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-8.0/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生效</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure><p>验证安装完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvcc -V</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/samples/1_Utilities/deviceQuery</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./deviceQuery</span></span><br></pre></td></tr></table></figure><p>△.如果显示Result:PASS才是安装成功。这一步一定要保证错误，不然之后bazel编译时报错就很难分析问题！！！！！(只有在驱动安装好的情况下才能运行成功,不然会报no CUDA-capable device is detected，或者GPU is lost)</p><p>如果失败,卸载重装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/bin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ./uninstall_cuda_9.2.pl</span></span><br></pre></td></tr></table></figure><h3 id="安装-python-和-tensorflow-软件包依赖项"><a class="markdownIt-Anchor" href="#安装-python-和-tensorflow-软件包依赖项"></a> 安装 Python 和 TensorFlow 软件包依赖项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-dev python-pip  # or python3-dev python3-pip</span><br></pre></td></tr></table></figure><p>安装 TensorFlow pip 软件包依赖项（如果使用虚拟环境，请省略 <code>--user</code> 参数）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -U --user pip six numpy wheel setuptools mock future&gt;=0.17.1</span><br><span class="line">pip install -U --user keras_applications==1.0.6 --no-deps</span><br><span class="line">pip install -U --user keras_preprocessing==1.0.5 --no-deps</span><br></pre></td></tr></table></figure><h3 id="cudnn-763"><a class="markdownIt-Anchor" href="#cudnn-763"></a> cudNN 7.6.3</h3><p>选择<a href="https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.3.30/Production/10.1_20190822/cudnn-10.1-linux-x64-v7.6.3.30.tgz" target="_blank" rel="noopener">cuDNN Library for Linux</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压cudNN</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp  cudnn-8.0-linux-x64-v5.1.solitairetheme8 /usr/<span class="built_in">local</span>/cuda/cudnn-8.0-linux-x64-v5.1.tgz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf cudnn-8.0-linux-x64-v5.1.tgz</span></span><br><span class="line"></span><br><span class="line">sudo cp cuda/include/cudnn.h /usr/local/cuda/include</span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br><span class="line">sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure><h3 id="bazel"><a class="markdownIt-Anchor" href="#bazel"></a> Bazel</h3><p>构建Tensorflow需要用bazel,而wget下载很慢,需要代理,可以试着去<a href="https://github.com/bazelbuild/bazel/releases" target="_blank" rel="noopener">github</a>上下载后再传到服务器</p><p>后来<code>./configure</code>配置TensorFlow时,提示Bazel版本太高…(这个问题出现在我下载的不是github下载下来的tensorflow，网盘下载的可能版本太低了)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WARNING: --batch mode is deprecated. Please instead explicitly shut down your Bazel server using the command "bazel shutdown".</span><br><span class="line">You have bazel 0.29.1 installed.</span><br><span class="line">Please downgrade your bazel installation to version 0.26.1 or lower to build TensorFlow! To downgrade: download the installer for the old version (from https://github.com/bazelbuild/bazel/releases) then run the installer.</span><br></pre></td></tr></table></figure><h3 id="从源码构建和安装tensorflow"><a class="markdownIt-Anchor" href="#从源码构建和安装tensorflow"></a> <a href="https://www.tensorflow.org/install/source" target="_blank" rel="noopener">从源码构建和安装Tensorflow</a></h3><blockquote><p>第一次安装的是2.0的版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tensorflow/tensorflow.git</span><br><span class="line"><span class="built_in">cd</span> tensorflow</span><br><span class="line">(tf) apollo3d@apollo1:~/Downloads/tensorflow-master$ ./configure </span><br><span class="line">WARNING: --batch mode is deprecated. Please instead explicitly shut down your Bazel server using the <span class="built_in">command</span> <span class="string">"bazel shutdown"</span>.</span><br><span class="line">You have bazel 0.26.0 installed.</span><br><span class="line">Please specify the location of python. [Default is /home/apollo3d/tf/bin/python]: /usr/bin/python3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Found possible Python library paths:</span><br><span class="line">  /usr/<span class="built_in">local</span>/lib/python3.5/dist-packages</span><br><span class="line">  /usr/lib/python3/dist-packages</span><br><span class="line">Please input the desired Python library path to use.  Default is [/usr/<span class="built_in">local</span>/lib/python3.5/dist-packages]</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with XLA JIT support? [Y/n]: </span><br><span class="line">XLA JIT support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with OpenCL SYCL support? [y/N]: </span><br><span class="line">No OpenCL SYCL support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with ROCm support? [y/N]: </span><br><span class="line">No ROCm support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with CUDA support? [y/N]: y</span><br><span class="line">CUDA support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with TensorRT support? [y/N]: </span><br><span class="line">No TensorRT support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Found CUDA 10.1 <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line">Found cuDNN 7 <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please specify a list of comma-separated CUDA compute capabilities you want to build with.</span><br><span class="line">You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.</span><br><span class="line">Please note that each additional compute capability significantly increases your build time and binary size, and that TensorFlow only supports compute capabilities &gt;= 3.5 [Default is: 3.5,7.0]: 5.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you want to use clang as CUDA compiler? [y/N]: N</span><br><span class="line">Clang will be used as CUDA compiler.</span><br><span class="line"></span><br><span class="line">Do you wish to download a fresh release of clang? (Experimental) [y/N]: N</span><br><span class="line">Clang will be downloaded and used to compile tensorflow.</span><br><span class="line"></span><br><span class="line">Please specify optimization flags to use during compilation when bazel option <span class="string">"--config=opt"</span> is specified [Default is -march=native -Wno-sign-compare]: --config=v2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Would you like to interactively configure ./WORKSPACE <span class="keyword">for</span> Android builds? [y/N]: </span><br><span class="line">Not configuring the WORKSPACE <span class="keyword">for</span> Android builds.</span><br><span class="line"></span><br><span class="line">Preconfigured Bazel build configs. You can use any of the below by adding <span class="string">"--config=&lt;&gt;"</span> to your build <span class="built_in">command</span>. See .bazelrc <span class="keyword">for</span> more details.</span><br><span class="line">--config=mkl         <span class="comment"># Build with MKL support.</span></span><br><span class="line">--config=monolithic  <span class="comment"># Config for mostly static monolithic build.</span></span><br><span class="line">--config=ngraph      <span class="comment"># Build with Intel nGraph support.</span></span><br><span class="line">--config=numa        <span class="comment"># Build with NUMA support.</span></span><br><span class="line">--config=dynamic_kernels<span class="comment"># (Experimental) Build kernels into separate shared objects.</span></span><br><span class="line">--config=v2          <span class="comment"># Build TensorFlow 2.x instead of 1.x.</span></span><br><span class="line">Preconfigured Bazel build configs to DISABLE default on features:</span><br><span class="line">--config=noaws       <span class="comment"># Disable AWS S3 filesystem support.</span></span><br><span class="line">--config=nogcp       <span class="comment"># Disable GCP support.</span></span><br><span class="line">--config=nohdfs      <span class="comment"># Disable HDFS support.</span></span><br><span class="line">--config=nonccl      <span class="comment"># Disable NVIDIA NCCL support.</span></span><br><span class="line">Configuration finished</span><br></pre></td></tr></table></figure><blockquote><p>第二次1.14</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">(pythonEnv) apollo3d@apollo1:~/Downloads/tensorflow$ ./configure </span><br><span class="line">WARNING: Running Bazel server needs to be killed, because the startup options are different.</span><br><span class="line">WARNING: --batch mode is deprecated. Please instead explicitly shut down your Bazel server using the <span class="built_in">command</span> <span class="string">"bazel shutdown"</span>.</span><br><span class="line">You have bazel 0.26.0 installed.</span><br><span class="line">Please specify the location of python. [Default is /home/apollo3d/pythonEnv/bin/python]: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: module <span class="string">'site'</span> has no attribute <span class="string">'getsitepackages'</span></span><br><span class="line">Found possible Python library paths:</span><br><span class="line">  /home/apollo3d/pythonEnv/lib/python3.5/site-packages</span><br><span class="line">Please input the desired Python library path to use.  Default is [/home/apollo3d/pythonEnv/lib/python3.5/site-packages]</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with XLA JIT support? [Y/n]: </span><br><span class="line">XLA JIT support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with OpenCL SYCL support? [y/N]: n</span><br><span class="line">No OpenCL SYCL support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with ROCm support? [y/N]: </span><br><span class="line">No ROCm support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with CUDA support? [y/N]: y</span><br><span class="line">CUDA support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with TensorRT support? [y/N]: </span><br><span class="line">No TensorRT support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Found CUDA 10.1 <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line">Found cuDNN 7 <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please specify a list of comma-separated CUDA compute capabilities you want to build with.</span><br><span class="line">You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.</span><br><span class="line">Please note that each additional compute capability significantly increases your build time and binary size, and that TensorFlow only supports compute capabilities &gt;= 3.5 [Default is: 5.2]: 5.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you want to use clang as CUDA compiler? [y/N]: n</span><br><span class="line">nvcc will be used as CUDA compiler.</span><br><span class="line"></span><br><span class="line">Please specify <span class="built_in">which</span> gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with MPI support? [y/N]: </span><br><span class="line">No MPI support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Please specify optimization flags to use during compilation when bazel option <span class="string">"--config=opt"</span> is specified [Default is -march=native -Wno-sign-compare]: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Would you like to interactively configure ./WORKSPACE <span class="keyword">for</span> Android builds? [y/N]: </span><br><span class="line">Not configuring the WORKSPACE <span class="keyword">for</span> Android builds.</span><br><span class="line"></span><br><span class="line">Preconfigured Bazel build configs. You can use any of the below by adding <span class="string">"--config=&lt;&gt;"</span> to your build <span class="built_in">command</span>. See .bazelrc <span class="keyword">for</span> more details.</span><br><span class="line">--config=mkl         <span class="comment"># Build with MKL support.</span></span><br><span class="line">--config=monolithic  <span class="comment"># Config for mostly static monolithic build.</span></span><br><span class="line">--config=gdr         <span class="comment"># Build with GDR support.</span></span><br><span class="line">--config=verbs       <span class="comment"># Build with libverbs support.</span></span><br><span class="line">--config=ngraph      <span class="comment"># Build with Intel nGraph support.</span></span><br><span class="line">--config=numa        <span class="comment"># Build with NUMA support.</span></span><br><span class="line">--config=dynamic_kernels<span class="comment"># (Experimental) Build kernels into separate shared objects.</span></span><br><span class="line">Preconfigured Bazel build configs to DISABLE default on features:</span><br><span class="line">--config=noaws       <span class="comment"># Disable AWS S3 filesystem support.</span></span><br><span class="line">--config=nogcp       <span class="comment"># Disable GCP support.</span></span><br><span class="line">--config=nohdfs      <span class="comment"># Disable HDFS support.</span></span><br><span class="line">--config=noignite    <span class="comment"># Disable Apache Ignite support.</span></span><br><span class="line">--config=nokafka     <span class="comment"># Disable Apache Kafka support.</span></span><br><span class="line">--config=nonccl      <span class="comment"># Disable NVIDIA NCCL support.</span></span><br><span class="line">Configuration finished</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">INFO: Elapsed time: 4826.834s, Critical Path: 298.31s</span><br><span class="line">INFO: 24978 processes: 24978 <span class="built_in">local</span>.</span><br><span class="line">INFO: Build completed successfully, 26636 total actions</span><br><span class="line"><span class="comment"># 大概用了一个半小时</span></span><br></pre></td></tr></table></figure><p>△.期间可能多次出现<code>ERROR:[GET returned 404 Not Found, connect timed out]</code>,继续重试即可</p><h3 id="编译-pip-软件包"><a class="markdownIt-Anchor" href="#编译-pip-软件包"></a> 编译 pip 软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ (tf) apollo3d@apollo1:~/Downloads/tensorflow-master$ bazel build -c --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package</span><br><span class="line"><span class="comment"># -c 不链接直接编译</span></span><br><span class="line">Starting <span class="built_in">local</span> Bazel server and connecting to it...</span><br><span class="line">WARNING: The following configs were expanded more than once: [cuda_clang, using_cuda, download_clang_use_lld]. For repeatable flags, repeats are counted twice and may lead to unexpected behavior.</span><br><span class="line">WARNING: option <span class="string">'--crosstool_top'</span> was expanded to from both option <span class="string">'--config=cuda_clang'</span> (<span class="built_in">source</span> /home/apollo3d/Downloads/tensorflow-master/.tf_configure.bazelrc) and option <span class="string">'--config=download_clang'</span> (<span class="built_in">source</span> /home/apollo3d/Downloads/tensorflow-master/.tf_configure.bazelrc)</span><br><span class="line"></span><br><span class="line">$ bazel-bin/tensorfLow/tools/pip_package/build_pip_package ~/</span><br><span class="line">tensorflow/bin <span class="comment"># 传入一个表示Python whell文件存储路径的参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在虚拟环境打开的情况下安装</span></span><br></pre></td></tr></table></figure><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录：</h2><p>windows上安装cuda时一直显示不能安装，就是系统默认安装的版本太低了，或者根本就没有安装。只有到<a href="https://www.geforce.cn/drivers" target="_blank" rel="noopener">显卡驱动下载</a>安装了驱动后，才能正常安装CUDA</p><p><strong>windows安装建议</strong></p><p>安装完linux后,我在自己笔记本上又安装了个Windows10的，两个是相通的，windows的很快我就安装好了。主要卡壳的时间全都是浪费在了驱动版本安装错误，只要把<strong>驱动的版本</strong>弄对了。然后依次安装NVIDIA驱动、CUDA、Cudnn就可以了。</p><h2 id="采坑记录"><a class="markdownIt-Anchor" href="#采坑记录"></a> 采坑记录</h2><p>▲下载tensorflow，一定要从官网下载最新的。千万不要去网盘上下载，我就是被这个坑了很久。最后从github下了后才逐渐正常。（github下载会很慢，可以见我的另外一篇文章，如何提速）</p><p>▲<code>./configure</code>的配置也很重要，除了CUDA选项其他都选默认</p><p><a href="https://blog.csdn.net/Junizxr/article/details/83578579" target="_blank" rel="noopener">Linux系统下安装TensorFlow的GPU版本</a></p><p><a href="https://blog.csdn.net/IT_xiao_bai/article/details/88342921" target="_blank" rel="noopener">CUDA、显卡驱动和Tensorflow版本之间的对应关系</a></p><blockquote><p>Linux x86_64 Driver Version与CUDA Toolkit的对应，一定要对应好，CUDA超出了Driver Version的话，是无法使用的<a href="https://blog.csdn.net/Junizxr/article/details/83578579" target="_blank" rel="noopener">^提示</a></p></blockquote><p>==&gt;CUDA 10.1的需要Linux x86_64 Driver Version&gt;=410.48。同时，tensorflow-gpu默认安装的是1.14版本，要求的cudNN为7，CUDA为9</p><p>▲<strong>google.xxxx.xxxx==&gt;unknown hosts</strong></p><p>报了这个错以后才发现，服务器的DNS没配置（云服务器一般不会出现这样的问题）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/resolv.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dynamic resolv.conf(5) file <span class="keyword">for</span> glibc resolver(3) generated by resolvconf(8)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN</span></span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 8.8.4.4</span><br></pre></td></tr></table></figure><p><strong>▲An error occurred during the fetch of repository ‘llvm’:Error 404 ， cant connect</strong></p><p>多次重试即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> (tf) apollo3d@apollo1:~/Downloads/tensorflow-master$ bazel build -c --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package</span></span><br></pre></td></tr></table></figure><p><strong>▲报错 AttributeError: ‘_NamespacePath’ object has no attribute 'sort’</strong></p><p>重新安装setuptools</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(pythonEnv) $ pip uninstall setuptools</span><br><span class="line">(pythonEnv) $ pip install setuptools</span><br><span class="line">(pythonEnv) $ pip  install googleapis-common-protos</span><br></pre></td></tr></table></figure><p>执行上述命令需要相当长的一段时间，具体时长取决于你的计算机性能。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Target //tensorflow/tools/pip_package:build_pip_package up-to-date:</span><br><span class="line">  bazel-bin/tensorflow/tools/pip_package/build_pip_package</span><br><span class="line">INFO: Elapsed time: 77.892s, Critical Path: 77.18s</span><br><span class="line">INFO: 45 processes: 45 local.</span><br><span class="line">INFO: Build completed successfully, 46 total actions</span><br></pre></td></tr></table></figure><p>待Bazel成功完成上述任务后会输出，运行输出的可执行程序，并传入一个表示Python whee文件存储路径的参数：</p><p><code>bazel-bin/tensorflow/tools/pip_package/build_pip_package ~/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(pythonEnv) apollo3d@apollo1:~/Downloads/tensorflow$ bazel-bin/tensorflow/tools/pip_package/build_pip_package ~/</span><br><span class="line">2019年 09月 24日 星期二 14:34:05 CST : === Preparing sources in dir: /tmp/tmp.pguTqrHuLA</span><br><span class="line">~/Downloads/tensorflow ~/Downloads/tensorflow</span><br><span class="line">~/Downloads/tensorflow</span><br><span class="line">/tmp/tmp.pguTqrHuLA/tensorflow/include ~/Downloads/tensorflow</span><br><span class="line">~/Downloads/tensorflow</span><br><span class="line">2019年 09月 24日 星期二 14:34:11 CST : === Building wheel</span><br><span class="line">warning: no files found matching &apos;*.pyd&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.pd&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.dylib&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.dll&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.lib&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.csv&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.h&apos; under directory &apos;tensorflow_core/include/tensorflow&apos;</span><br><span class="line">warning: no files found matching &apos;*&apos; under directory &apos;tensorflow_core/include/third_party&apos;</span><br><span class="line">2019年 09月 24日 星期二 14:34:33 CST : === Output wheel file is in: /home/apollo3d/</span><br></pre></td></tr></table></figure><p><strong>pip安装</strong></p><p>上述命令将在~/tensorlowbn下创建一个Python.wh文件。请确保你的“tensor-fow Virtualenv不境处于活动状态，然后用pip安装该whee文件（请注意该二进制文件的具体名称会依所安装的TensorFlow版本、所使用的操作系统和Python版本而不同）：</p><p><code>(pythonEnv) apollo3d@apollo1:~$ pip install tensorflow-2.0.0rc2-cp35-cp35m-linux_x86_64.whl</code></p><p><strong>▲安装成功后，使用时报错</strong></p><p>使用TensorFlow时报错FutureWarning: Passing (type, 1) or ‘1type’ as a synonym of type is deprecated; in a future version of numpy…</p><p>报错原因：numpy1-17-0版本过高，使用numpy-1.16-0版本即可</p><p>解决方法：重新安装numpy-1.16-0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip uninstall numpy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install numpy==1.16.0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ubuntu-1604-cuda-toolkit-101-cudnn76-bazel-0261&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ubuntu-1604-cuda-toolkit-101-cudnn76-bazel-0261
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Github下载、访问慢解决方法[转]</title>
    <link href="https://nymrli.top/2019/09/23/Github%E4%B8%8B%E8%BD%BD%E3%80%81%E8%AE%BF%E9%97%AE%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-%E8%BD%AC/"/>
    <id>https://nymrli.top/2019/09/23/Github下载、访问慢解决方法-转/</id>
    <published>2019-09-23T08:36:21.000Z</published>
    <updated>2019-09-29T09:38:38.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="github下载-访问慢解决方法转"><a class="markdownIt-Anchor" href="#github下载-访问慢解决方法转"></a> <a href="https://www.jianshu.com/p/0493dcc15d6f" target="_blank" rel="noopener">Github下载、访问慢解决方法[转]</a></h1><blockquote><p>下载tensorflow就16KiB/s,改完后能有900+KiB/s</p></blockquote><p>修改hosts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">151.101.44.249 github.global.ssl.fastly.net</span><br><span class="line">192.30.253.113 github.com</span><br><span class="line">103.245.222.133 assets-cdn.github.com</span><br><span class="line">23.235.47.133 assets-cdn.github.com</span><br><span class="line">203.208.39.104 assets-cdn.github.com</span><br><span class="line">204.232.175.78 documentcloud.github.com</span><br><span class="line">204.232.175.94 gist.github.com</span><br><span class="line">107.21.116.220 help.github.com</span><br><span class="line">207.97.227.252 nodeload.github.com</span><br><span class="line">199.27.76.130 raw.github.com</span><br><span class="line">107.22.3.110 status.github.com</span><br><span class="line">204.232.175.78 training.github.com</span><br><span class="line">207.97.227.243 www.github.com</span><br><span class="line">185.31.16.184 github.global.ssl.fastly.net</span><br><span class="line">185.31.18.133 avatars0.githubusercontent.com</span><br><span class="line">185.31.19.133 avatars1.githubusercontent.com</span><br><span class="line">192.30.253.120 codeload.github.com</span><br></pre></td></tr></table></figure><p>windows更新:<code>ipconfig /flushdns</code></p><p>linux重启网络服务:<code>service network restart</code>&lt;===&gt;<code>/etc/init.d/networking restart</code>(两个都没尝试)</p><p>我重新打开终端就行了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;github下载-访问慢解决方法转&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#github下载-访问慢解决方法转&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.jianshu.com/p/0493dcc15d6f&quot; targ
      
    
    </summary>
    
    
      <category term="生活福利" scheme="https://nymrli.top/tags/%E7%94%9F%E6%B4%BB%E7%A6%8F%E5%88%A9/"/>
    
      <category term="git" scheme="https://nymrli.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>同性交友网站Github的骚操作</title>
    <link href="https://nymrli.top/2019/09/21/%E5%90%8C%E6%80%A7%E4%BA%A4%E5%8F%8B%E7%BD%91%E7%AB%99Github%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
    <id>https://nymrli.top/2019/09/21/同性交友网站Github的骚操作/</id>
    <published>2019-09-21T03:56:19.000Z</published>
    <updated>2019-09-29T09:38:32.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同性交友网站github的骚操作"><a class="markdownIt-Anchor" href="#同性交友网站github的骚操作"></a> 同性交友网站Github的骚操作</h1><h2 id="单击列表"><a class="markdownIt-Anchor" href="#单击列表"></a> 单击列表</h2><p>当提Issue的时候，总会贴很长的代码，有没有什么办法美观一点呢，方法如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span><span class="tag">&lt;<span class="name">summary</span>&gt;</span>Content of debug log<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">Paste content here ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/2019/09/21/同性交友网站Github的骚操作/list.jpg" alt="list"></p><h2 id="copy-readme"><a class="markdownIt-Anchor" href="#copy-readme"></a> Copy README</h2><p>Q：别人的REAMDE都那么炫酷，怎么办呢？</p><p>A:点击他人的README.md文件，然后显示<code>Raw</code>就能看到html辣，由于markdown语法是支持嵌入html，因此只要把结构复制、改下内容就成了。</p><p><img src="/2019/09/21/同性交友网站Github的骚操作/copy.jpg" alt="copy"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://travis-ci.com/xkcoding/spring-boot-demo"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"Travis-CI"</span> <span class="attr">src</span>=<span class="string">"https://travis-ci.com/xkcoding/spring-boot-demo.svg?branch=master"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.codacy.com/app/xkcoding/spring-boot-demo?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=xkcoding/spring-boot-demo&amp;amp;utm_campaign=Badge_Grade"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"Codacy"</span> <span class="attr">src</span>=<span class="string">"https://api.codacy.com/project/badge/Grade/1f2e3d437b174bfc943dae1600332ec1"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://xkcoding.com"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"author"</span> <span class="attr">src</span>=<span class="string">"https://img.shields.io/badge/author-Yangkai.Shen-blue.svg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.oracle.com/technetwork/java/javase/downloads/index.html"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"JDK"</span> <span class="attr">src</span>=<span class="string">"https://img.shields.io/badge/JDK-1.8.0_162-orange.svg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://docs.spring.io/spring-boot/docs/2.1.0.RELEASE/reference/html/"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"Spring Boot"</span> <span class="attr">src</span>=<span class="string">"https://img.shields.io/badge/Spring Boot-2.1.0.RELEASE-brightgreen.svg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/xkcoding/spring-boot-demo/blob/master/LICENSE"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"LICENSE"</span> <span class="attr">src</span>=<span class="string">"https://img.shields.io/github/license/xkcoding/spring-boot-demo.svg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/xkcoding/spring-boot-demo/stargazers"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"star"</span> <span class="attr">src</span>=<span class="string">"https://img.shields.io/github/stars/xkcoding/spring-boot-demo.svg?label=Stars&amp;style=social"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/xkcoding/spring-boot-demo/network/members"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"star"</span> <span class="attr">src</span>=<span class="string">"https://img.shields.io/github/forks/xkcoding/spring-boot-demo.svg?label=Fork&amp;style=social"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/xkcoding/spring-boot-demo/watchers"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"star"</span> <span class="attr">src</span>=<span class="string">"https://img.shields.io/github/watchers/xkcoding/spring-boot-demo.svg?label=Watch&amp;style=social"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>中文 | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./README.en.md"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="项目条幅"><a class="markdownIt-Anchor" href="#项目条幅"></a> 项目条幅</h2><p><img src="/2019/09/21/同性交友网站Github的骚操作/NJUPT.jpg" alt="NJUPT"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![Stargazers</span>](<span class="link">https://img.shields.io/github/stars/NJUPTFreeExams/NJUPT-CS-Free-Exams.svg?style=for-the-badge</span>)](<span class="link">https://github.com/NJUPTFreeExams/NJUPT-CS-Free-Exams/stargazers</span>)</span><br><span class="line">[<span class="string">![Forks</span>](<span class="link">https://img.shields.io/github/forks/NJUPTFreeExams/NJUPT-CS-Free-Exams.svg?style=for-the-badge</span>)](<span class="link">https://github.com/NJUPTFreeExams/NJUPT-CS-Free-Exams/network/members</span>)</span><br><span class="line">[<span class="string">![cloed prs</span>](<span class="link">https://img.shields.io/github/issues-pr-closed-raw/NJUPTFreeExams/NJUPT-CS-Free-Exams.svg?style=for-the-badge</span>)](<span class="link">https://github.com/NJUPTFreeExams/NJUPT-CS-Free-Exams/pulls</span>)</span><br><span class="line">!</span><br></pre></td></tr></table></figure><h2 id="贡献者名单"><a class="markdownIt-Anchor" href="#贡献者名单"></a> 贡献者名单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">## 贡献者名单</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/imguozr"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://avatars1.githubusercontent.com/u/30227124?v=4"</span> <span class="attr">width</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/Wonz5130"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://avatars1.githubusercontent.com/u/35889526?v=4"</span> <span class="attr">width</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/Wen-He"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://avatars0.githubusercontent.com/u/18651139?v=4"</span> <span class="attr">width</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/chenkangyang"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://avatars2.githubusercontent.com/u/28588778?v=4"</span> <span class="attr">width</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/Davont"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://avatars0.githubusercontent.com/u/28757633?v=4"</span> <span class="attr">width</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;同性交友网站github的骚操作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#同性交友网站github的骚操作&quot;&gt;&lt;/a&gt; 同性交友网站Github的骚操作&lt;/h1&gt;
&lt;h2 id=&quot;单击列表&quot;&gt;&lt;a class=&quot;markdownI
      
    
    </summary>
    
    
      <category term="生活福利" scheme="https://nymrli.top/tags/%E7%94%9F%E6%B4%BB%E7%A6%8F%E5%88%A9/"/>
    
      <category term="git" scheme="https://nymrli.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>搭建Jupyter、JupyterLab服务器</title>
    <link href="https://nymrli.top/2019/09/21/%E6%90%AD%E5%BB%BAJupyter%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://nymrli.top/2019/09/21/搭建Jupyter服务器/</id>
    <published>2019-09-21T01:53:01.000Z</published>
    <updated>2019-10-20T12:20:39.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建jupyter服务器"><a class="markdownIt-Anchor" href="#搭建jupyter服务器"></a> 搭建Jupyter服务器</h1><p>1.配置好Python环境及安装pip</p><p>2.安装jupyter:</p><p><code>pip3 install jupyter</code> (此处使用的是python3)</p><p>3.生成配置文件</p><p><code>jupyter notebook --generate-config</code></p><p>4.生成密钥:</p><p>终端输入<code>$ ipython</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> notebook.auth <span class="keyword">import</span> passwd</span><br><span class="line">In [<span class="number">2</span>]: passwd()</span><br><span class="line">Enter password: </span><br><span class="line">Verify password: </span><br><span class="line"><span class="comment">#此时会让你两次输入密码，然后就会生成秘钥</span></span><br><span class="line"><span class="comment">#＊＊＊＊＊＊＊＊＊＊＊＊</span></span><br></pre></td></tr></table></figure><p>5.修改配置文件<code>vim ~/.jupyter/jupyter_notebook_config.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c=get_config()</span><br><span class="line">c.IPKernelApp.pylab =<span class="string">"inline"</span></span><br><span class="line">c.NotebookApp.ip=<span class="string">'*'</span> <span class="comment"># 设置所有ip皆可访问</span></span><br><span class="line">c.NotebookApp.password = <span class="string">'sha1:x'</span>   <span class="comment"># 刚生成的密文</span></span><br><span class="line">c.NotebookApp.open_browser = <span class="keyword">False</span>  <span class="comment"># 禁止自动打开浏览器</span></span><br><span class="line">c.NotebookApp.port = <span class="number">9999</span> <span class="comment"># 指定运行端口</span></span><br><span class="line">c.NotebookApp.notebook_dir = <span class="string">'/home/apollo3d/tf/jupyter_home'</span> <span class="comment"># 指定Jupyter的工作目录</span></span><br></pre></td></tr></table></figure><h1 id="拓展云服务器搭建神器jupyterlab转"><a class="markdownIt-Anchor" href="#拓展云服务器搭建神器jupyterlab转"></a> 拓展:<a href="https://blog.csdn.net/ds19991999/article/details/83663349?tdsourcetag=s_pctim_aiomsg#commentBox" target="_blank" rel="noopener">云服务器搭建神器JupyterLab(转)</a></h1><blockquote><p><a href="https://github.com/jupyterlab/jupyterlab" target="_blank" rel="noopener"><code>JupyterLab</code></a>是一个交互式的开发环境，其用于应对包含着<code>notebook</code>、代码以及数据的工作场景。</p></blockquote><h2 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1、前言</h2><p>如果说vim是编辑器之神，那么JupyterLab就是笔记本之神。</p><p>从2017年开始我注意到这一神奇的IDE笔记本，第一眼见到它，就觉得它真的太强大了，作为一个交互式的Python开发工具，其实也不算开发工具，准确的来说，它是一个演示代码的科学数据工具，支持markdown预览，支持Draw扩展，支持丰富的文件格式和多种开发语言，拥有众多插件诸于GitHub， Google-Dirve， Git和TOC，更重要的是，它是把浏览器当作开发工具，十分有创意。JupyterLab的开发者众多，GitHub上面的isuue也十分活跃，众多的大牛开发者也纷纷加入到JupyterLab的阵营，为JupyterLab的发展作贡献，JupyterLab得到迅速发展。</p><p>好的工具当然是要好好利用了，回归正题，怎样通过云服务器搭建一个可远程使用的JupyterLab?</p><h2 id="2-添加ppa源"><a class="markdownIt-Anchor" href="#2-添加ppa源"></a> 2、添加ppa源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@iZwz9huxtbd86xp91s3j16Z:~# sudo add-apt-repository ppa:chronitis/jupyter</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo: add-apt-repository: <span class="built_in">command</span> not found</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 出现这种情况,可以如下解决</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> $ sudo apt-get install software-properties-common</span></span><br></pre></td></tr></table></figure><h2 id="3-配置python"><a class="markdownIt-Anchor" href="#3-配置python"></a> 3、配置python</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install python-pip python-dev build-essential </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip install --upgrade pip <span class="comment"># </span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip install --upgrade virtualenv <span class="comment">#安装虚拟环境</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级pip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip3 install --upgrade pip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip2 install --upgrade pip</span></span><br></pre></td></tr></table></figure><p>如果没有换源,先进行换源,下载速度会快很多</p><ul><li>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a></li><li>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a></li><li>豆瓣(douban) <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a></li><li>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a></li><li>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ~/.pip/pip.conf</span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p><code>npm</code>和<code>yarn</code>也可以换源，更简单，自行<code>google</code>。</p><p><code>pip</code>国内的一些镜像包,换源之后出现<code>python2</code>版本过低的情况导致以前的包下载不了，那就直接将文件夹<code>~/.pip/pip.conf</code>删除就可以恢复原来的源。</p><p>pip指向问题<br>有时候会出现pip,pip2,pip3都TM指向python2，这个之后就需要改一下这这三个文件。</p><p>编辑这三个文件，将第一行注释分别改为python\python2\python3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~ $which pip</span><br><span class="line">/usr/local/bin/pip</span><br><span class="line">21:36 alien@alien-Inspiron-3443:</span><br><span class="line">~ $which pip2</span><br><span class="line">/usr/local/bin/pip2</span><br><span class="line">21:36 alien@alien-Inspiron-3443:</span><br><span class="line">~ $which pip3</span><br><span class="line">/usr/local/bin/pip3</span><br></pre></td></tr></table></figure><h3 id="安装yarn和nodejs"><a class="markdownIt-Anchor" href="#安装yarn和nodejs"></a> 安装<code>yarn</code>和<code>nodejs</code></h3><h4 id="配置仓库"><a class="markdownIt-Anchor" href="#配置仓库"></a> 配置仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class="line">echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list</span><br></pre></td></tr></table></figure><h4 id="安装yarn"><a class="markdownIt-Anchor" href="#安装yarn"></a> 安装<code>yarn</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install yarn</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果这边安装后,报错NameError: name <span class="string">'CoreConfig'</span> is not defined,那么需要更新nodejs版本</span></span><br></pre></td></tr></table></figure><p>注意这里<code>yarn</code>自动安装了<code>nodejs</code>，不过版本太低，安装<code>jupyterlab</code>的时候会出问题，而且使用<code>n</code>或者<code>nvm</code>安装的<code>nodejs</code>也有问题，总之<code>nodejs</code>要按照下面这种方式就没事，这个是官方的<code>bug</code>，官方<code>issue</code>也提到过，但是目前还未解决。</p><p>如果版本过低,安装插件、或是<code>jupyter lab build</code>发生<code>NameError: name 'CoreConfig' is not defined</code>错误,则可能是nodejs版本过低导致.我出现这个Bug后找了提了issue也没解决,后来突然想起了这边提到的<strong>nodejs版本问题</strong>,于是更新后解决…<a href="#nodejs%E6%9B%B4%E6%96%B0">nodejs更新方式见附录</a></p><h4 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装<code>nodejs</code></h4><p>创建一个新文件，输入两行<code>deb</code>，结束之后<code>Ctrl+C</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/apt/sources.list.d/nodesource.list</span><br><span class="line">deb https://deb.nodesource.com/node_6.x xenial main</span><br><span class="line">deb-src https://deb.nodesource.com/node_6.x xenial main</span><br></pre></td></tr></table></figure><p>导入公匙并安装<code>nodejs</code>，这个版本的<code>nodejs</code>对<code>jupyterlab</code>支持比较友好。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo apt-key add -</span><br><span class="line">sudo apt-get update</span><br><span class="line">apt-cache policy nodejs</span><br><span class="line">sudo apt-get install nodejs</span><br><span class="line">nodejs --version</span><br><span class="line"></span><br><span class="line">​```shell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 安装`ipython,matplotlib,scipy,pandas,numpy`</span></span></span><br><span class="line"></span><br><span class="line">最好`python2`和`python3`都安装。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装`JupyterLab`及其配置</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 配置同上文Jupyter配置</span></span><br><span class="line"></span><br><span class="line">​```shell</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo pip3 install jupyterlab</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成密码</span></span><br><span class="line">jupyter-notebook password</span><br></pre></td></tr></table></figure><h3 id="创建哈希密码"><a class="markdownIt-Anchor" href="#创建哈希密码"></a> 创建哈希密码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> notebook.auth <span class="keyword">import</span> passwd</span><br><span class="line">passwd()</span><br><span class="line"><span class="comment"># 输入你自己设置登录JupyterLab界面的密码，</span></span><br><span class="line"><span class="comment"># 然后就会生产下面这样的密码，将它记下来，待会儿用</span></span><br><span class="line"><span class="string">'sha1:b92f3fb7d848:a5d40ab2e26aa3b296ae1faa17aa34d3df351704'</span></span><br></pre></td></tr></table></figure><h3 id="修改jupyterlab配置文件"><a class="markdownIt-Anchor" href="#修改jupyterlab配置文件"></a> 修改<code>JupyterLab</code>配置文件</h3><p>先生成一个配置文件，记下输出的配置文件地址</p><p><code>jupyter lab --generate-config</code>-&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.allow_root = <span class="keyword">True</span> <span class="comment">#允许以root方式运行jupyterlab</span></span><br><span class="line">c.NotebookApp.ip = <span class="string">'0.0.0.0'</span> <span class="comment">#允许任意ip段访问</span></span><br><span class="line">c.NotebookApp.notebook_dir = <span class="string">u'/root/JupyterLab'</span> <span class="comment"># 设置jupyterlab页面的根目录</span></span><br><span class="line">c.NotebookApp.open_browser = <span class="keyword">False</span><span class="comment">#默认运行时不启动浏览器，因为服务器默认只有终端</span></span><br><span class="line">c.NotebookApp.password = <span class="string">u'sha1:b92f3fb7d848:a5d40ab2e26aa3b296ae1faa17aa34d3df351704'</span><span class="comment">#设置之前生产的哈希密码</span></span><br><span class="line">c.NotebookApp.port = <span class="number">8080</span><span class="comment">#设置访问端口</span></span><br></pre></td></tr></table></figure><p>到此，<code>JupyterLab</code>已经安装成功了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> jupyter-lab --version</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 0.33.12</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter lab build</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> build没成功，可以看看是不是内存限制，试试下面的命令</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cross-env NODE_OPTIONS=--max_old_space_size=4096 webpack --config webpack.prod.minimize.config.jserror Command failed with <span class="built_in">exit</span> code 1.</span></span><br><span class="line">"""</span><br><span class="line"><span class="meta">#</span><span class="bash"> jupyter lab build --minimize=False</span></span><br></pre></td></tr></table></figure><p><code>jupyter lab build</code>时间有点久，如果没报错就成功了</p><h2 id="jupyterlab扩展安装"><a class="markdownIt-Anchor" href="#jupyterlab扩展安装"></a> <code>JupyterLab</code>扩展安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jupyter labextension list # 查看已经安装的扩展及其状态：</span><br><span class="line">jupyter labextension install @mflevine/jupyterlab_html # 比如安装一个扩展jupyterlab_html，支持html预览:</span><br><span class="line">jupyter labextension uninstall @mflevine/jupyterlab_html #卸载扩展:</span><br><span class="line">jupyter labextension update --all#更新所有扩展:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装一个生成目录的插件</span></span><br><span class="line">jupyter labextension install @jupyterlab/toc</span><br></pre></td></tr></table></figure><p>还有功能</p><ul><li>支持做图</li><li><code>markdown</code></li><li>多标签</li><li>内部打开网页</li><li><code>latex</code></li></ul><h3 id="快捷键"><a class="markdownIt-Anchor" href="#快捷键"></a> 快捷键</h3><p>编辑模式命令</p><ul><li>执行当前cell，执行后不自动调转到下一个cell：Ctrl-Enter</li><li>使当前的cell进入编辑模式：Enter</li><li>退出当前cell的编辑模式：Esc</li></ul><p>命令模式:</p><ul><li>删除当前的cell：双D</li><li>为当前的cell加入line number：单L</li><li>将当前的cell转化为具有一级标题的maskdown：单1</li><li>将当前的cell转化为具有二级标题的maskdown：单2</li><li>将当前的cell转化为具有三级标题的maskdown：单3</li><li>撤销对某个cell的删除：z</li><li>浏览器的各个Tab之间切换：Up和Dn</li></ul><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><h2 id="nodejs更新"><a class="markdownIt-Anchor" href="#nodejs更新"></a> nodejs更新</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看更新前的版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br><span class="line">v4.2.1</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo npm cache clean -f</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install -g n</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo n stable</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> 软链接,VERSION改成新的版本(删了后按TAB键)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -sf /usr/<span class="built_in">local</span>/n/versions/node/&lt;VERSION&gt;/bin/node /usr/bin/nodejs</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看是否更新成功</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br><span class="line">v10.16.3</span><br></pre></td></tr></table></figure><h2 id="安装内核"><a class="markdownIt-Anchor" href="#安装内核"></a> 安装内核</h2><p>安装Python内核</p><blockquote><p>如果需要python2和python3同时存在的话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip2 install ipykernel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip3 install ipykernel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看已经安装的内核</span></span><br><span class="line">jupyter kernelspec list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除你不需要的内核</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter kernelspec remove &lt;kernel_name&gt;</span></span><br><span class="line">/root/JupyterLab</span><br></pre></td></tr></table></figure><p>安装ijavascript</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:chronitis/jupyter</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ijavascript</span><br><span class="line"><span class="meta">#</span><span class="bash"> ihaskell、ijulia、irkernel、iruby</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/jupyter/jupyter/wiki/Jupyter-kernels</span></span><br></pre></td></tr></table></figure><h2 id="插件安装"><a class="markdownIt-Anchor" href="#插件安装"></a> 插件安装</h2><h3 id="jupyterlab-toc"><a class="markdownIt-Anchor" href="#jupyterlab-toc"></a> <a href="https://github.com/ian-r-rose/jupyterlab-toc" target="_blank" rel="noopener">jupyterlab-toc</a>(目录功能)</h3><p>Installation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter labextension install @jupyterlab/toc</span><br></pre></td></tr></table></figure><h3 id="jupyterlab-tensorboard"><a class="markdownIt-Anchor" href="#jupyterlab-tensorboard"></a> <a href="https://github.com/chaoleili/jupyterlab_tensorboard" target="_blank" rel="noopener">Jupyterlab-Tensorboard</a></h3><p>Installation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jupyter labextension install jupyterlab_tensorboard</span><br></pre></td></tr></table></figure><p><img src="http://image.rexking6.top/img/clip1545289777.png" alt="img"></p><p><img src="http://image.rexking6.top/img/clip1545289896.png" alt="img"></p><p><img src="http://image.rexking6.top/img/clip1545289906.png" alt="img"></p><p><img src="http://image.rexking6.top/img/clip1545289922.png" alt="img">](<a href="http://image.rexking6.top/img/clip1545289922.png" target="_blank" rel="noopener">http://image.rexking6.top/img/clip1545289922.png</a>)</p><h3 id="jupyterlab-drawio"><a class="markdownIt-Anchor" href="#jupyterlab-drawio"></a> <a href="https://github.com/QuantStack/jupyterlab-drawio" target="_blank" rel="noopener">JupyterLab drawio</a>(processon图)</h3><p>Installation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter labextension install jupyterlab-drawio</span><br></pre></td></tr></table></figure><p><img src="http://image.rexking6.top/img/clip1545289579.png" alt="img"></p><p>注,图片来自<a href="http://blog.rexking6.top/2018/12/20/JupyterLab%E6%8F%92%E4%BB%B6/" target="_blank" rel="noopener">RexKing6’s Note</a></p><h3 id="variableinspector"><a class="markdownIt-Anchor" href="#variableinspector"></a> variableinspector</h3><blockquote><p>像matlab一样查看工作区变量</p></blockquote><p><code>jupyter labextension install @lckr/jupyterlab_variableinspector</code></p><h3 id="go_to_definition插件"><a class="markdownIt-Anchor" href="#go_to_definition插件"></a> go_to_definition插件</h3><p>在lab中按alt+ 点击变量名 or 函数名，可以跳转到其对应的最初定义的地方(注意看闪烁光标的位置变化)。</p><p><img src="https://pic2.zhimg.com/v2-14d06c618b4fa8a7fffb2455576a5bb9_b.webp" alt="img"></p><h2 id="快捷键-2"><a class="markdownIt-Anchor" href="#快捷键-2"></a> 快捷键</h2><p>Up : 选中上方单元<br>K : 选中上方单元<br>Down : 选中下方单元<br>J : 选中下方单元<br>Shift-K : 扩大选中上方单元<br>Shift-J : 扩大选中下方单元<br>A : 在上方插入新单元<br>B : 在下方插入新单元<br>X : 剪切选中的单元<br>C : 复制选中的单元<br>Shift-V : 粘贴到上方单元<br>V : 粘贴到下方单元<br>Z : 恢复删除的最后一个单元<br>D,D : 删除选中的单元<br>Shift-M : 合并选中的单元<br>I,I : 中断Notebook内核0,0<br>0,0 :重启Notebook内核<br>Tab : 代码补全或缩进<br>Shift-Tab : 提示<br>Ctrl-] : 缩进<br>Ctrl-[ : 解除缩进<br>Ctrl-A : 全选<br>Ctrl-Z : 复原<br>Ctrl-Shift-Z : 再做<br>Ctrl-Y : 再做<br>Ctrl-Home : 跳到单元开头<br>Ctrl-Up : 跳到单元开头<br>Ctrl-End : 跳到单元末尾<br>Ctrl-Down : 跳到单元末尾<br>Ctrl-Left : 跳到左边一个字首<br>Ctrl-Right : 跳到右边一个字首<br>Ctrl-Backspace : 删除前面一个字<br>Ctrl-Delete : 删除后面一个字<br>Esc : 进入命令模式<br>Ctrl-M : 进入命令模式<br>Shift-Enter : 运行本单元，选中下一单元<br>Ctrl-Enter : 运行本单元<br>Alt-Enter : 运行本单元，在下面插入一单元<br>Ctrl-Shift-- : 分割单元<br>Ctrl-Shift-Subtract : 分割单元<br>Ctrl-S : 文件存盘<br>Shift : 忽略<br>Up : 光标上移或转入上一单元<br>Down :光标下移或转入下一单元</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建jupyter服务器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#搭建jupyter服务器&quot;&gt;&lt;/a&gt; 搭建Jupyter服务器&lt;/h1&gt;
&lt;p&gt;1.配置好Python环境及安装pip&lt;/p&gt;
&lt;p&gt;2.安装jupyter:&lt;/p
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>深度学习</title>
    <link href="https://nymrli.top/2019/09/19/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://nymrli.top/2019/09/19/深度学习/</id>
    <published>2019-09-19T12:32:44.000Z</published>
    <updated>2019-10-05T07:28:34.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度学习神经网络"><a class="markdownIt-Anchor" href="#深度学习神经网络"></a> 深度学习——神经网络</h1><h2 id="构建网络的总原则"><a class="markdownIt-Anchor" href="#构建网络的总原则"></a> 构建网络的总原则</h2><p>一、增大网络容量，直到过拟命<br>二、采取措施抑制过拟合<br>三、继续增大网络容量，直到过拟合</p><h2 id="线性回归"><a class="markdownIt-Anchor" href="#线性回归"></a> 线性回归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Commented out IPython magic to ensure Python compatibility.</span></span><br><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># %matplotlib inline</span></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">80</span>,<span class="number">50</span>)</span><br><span class="line">y = <span class="number">3</span>*x + np.random.randn(<span class="number">50</span>)*<span class="number">15</span></span><br><span class="line"><span class="comment"># print(x,y,sep='\n')</span></span><br><span class="line">plt.scatter(x,y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化模型</span></span><br><span class="line">model = keras.Sequential()</span><br><span class="line"><span class="comment"># 增加一层：全连接层</span></span><br><span class="line">model.add(layers.Dense(<span class="number">1</span>,input_dim=<span class="number">1</span>))</span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译模型</span></span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>,</span><br><span class="line">             loss=<span class="string">'mse'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">model.fit(x,y,epochs=<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="comment">#for setp in range(3001):</span></span><br><span class="line"><span class="comment">#    cost = model.train_on_batch(x_data,y_data)</span></span><br><span class="line"><span class="comment">#    if step % 500 == 0:</span></span><br><span class="line"><span class="comment">#        print('cost:',cost)</span></span><br><span class="line"><span class="comment">#w,b = model.layers[0].get_weights()</span></span><br><span class="line"></span><br><span class="line">predict_y = model.predict(x)</span><br><span class="line">plt.scatter(x,y,s=<span class="number">10</span>,c=<span class="string">'r'</span>)</span><br><span class="line">plt.plot(x,predict_y)</span><br></pre></td></tr></table></figure><p>非线性回归</p><h2 id="激活函数"><a class="markdownIt-Anchor" href="#激活函数"></a> 激活函数</h2><p>softmax</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>i</mi></mrow></msub><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mrow><mi>i</mi></mrow></msup></mrow><mrow><msub><mo>∑</mo><mrow><mi>j</mi></mrow></msub><msup><mi>e</mi><mrow><mi>j</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">S_{i}=\frac{e^{i}}{\sum_{j} e^{j}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.97786em;"></span><span class="strut bottom" style="height:1.6300869999999998em;vertical-align:-0.6522269999999999em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.3449999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mop"><span class="op-symbol small-op mop" style="top:0.074995em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05724em;">j</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05724em;">j</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><h3 id="sigmod"><a class="markdownIt-Anchor" href="#sigmod"></a> sigmod:</h3><h4 id="logistic"><a class="markdownIt-Anchor" href="#logistic"></a> logistic:</h4><blockquote><p>范围是[0,1]</p></blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>=</mo><mfrac><mrow><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><mi>t</mi></mrow></msup></mrow><mrow><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><mi>t</mi></mrow></msup><mo>+</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>1</mn><mo>+</mo><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><mo>−</mo><mi>t</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">f(t)=\frac{\mathrm{e}^{t}}{\mathrm{e}^{t}+1}=\frac{1}{1+\mathrm{e}^{-t}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9556399999999999em;"></span><span class="strut bottom" style="height:1.358971em;vertical-align:-0.403331em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class=""><span class="mord scriptstyle cramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class=""><span class="mord scriptstyle uncramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span><span class="mbin">+</span><span class=""><span class="mord scriptstyle cramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord">−</span><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><h3 id="relu"><a class="markdownIt-Anchor" href="#relu"></a> reLU</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo>(</mo><mn>0</mn><mo separator="true">,</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">f(x)=max(0,x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mopen">(</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathit">x</span><span class="mclose">)</span></span></span></span></p><h3 id="tanh"><a class="markdownIt-Anchor" href="#tanh"></a> tanh</h3><blockquote><p>跟sigmoid函数很像,但是范围是[-1,1],而不是[0,1],实质是sigmoid函数平移</p></blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>tanh</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mfrac><mrow><mi>sinh</mi><mi>x</mi></mrow><mrow><mi>cosh</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mrow><mi>x</mi></mrow></msup><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mrow><msup><mi>e</mi><mrow><mi>x</mi></mrow></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\tanh(x)=\frac{\sinh x}{\cosh x}=\frac{e^{x}-e^{-x}}{e^{x}+e^{-x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.939765em;"></span><span class="strut bottom" style="height:1.343096em;vertical-align:-0.403331em;"></span><span class="base textstyle uncramped"><span class="mop">tanh</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mop">cosh</span><span class="mord mathit">x</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mop">sinh</span><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord">−</span><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mord">−</span><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><p>TensorFlow中其他的函数：</p><p>●tf.nn.elu(x)： 指数线性单元； 如果输入小于0， 返回exp(x)-1； 否<br>则， 返回x；<br>●tf.softsign(x)： 返回x/(abs(x)+1)；<br>●tf.nn.bias_add(value,bias)： 增加一个bias到value。</p><h2 id="tensorflow"><a class="markdownIt-Anchor" href="#tensorflow"></a> Tensorflow:</h2><blockquote><ul><li>张量——数据  :</li><li>多维数组,阶:张量的维数</li><li>计算图——神经网络</li><li>搭建神经网络的计算过程,只搭建,不运算</li></ul><p>会话——执行计算图===&gt;优化线上的权重====&gt;权重</p></blockquote><p>神经网络实现过程</p><blockquote><p>1.准备数据集,提取特征,作为输入<br>2.搭建NN结构,从输入到输出==&gt;(NN前向传播)</p><p>3.大量特征数据喂给NN,迭代优化NN参数==&gt;(NN反向传播)</p><p>4.使用训练好的模型预测和分类</p></blockquote><p><strong>====&gt;八股:准备,前传,后传,迭代&lt;====</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x  = tf.placehold(tf.float32,shape=(<span class="number">1</span>,<span class="number">2</span>))   <span class="comment">#占位符</span></span><br><span class="line">sess.run(要计算的节点,feed_dict=&#123;x:[[<span class="number">1.3</span>,<span class="number">2.0</span>]]&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Init_op =  tf.global_variables_initializer()</span><br><span class="line">sess.run(Init_op)</span><br></pre></td></tr></table></figure><p>y = matmul(x,w1)`相乘</p><h1 id="tensorflow机器学习项目实战笔记"><a class="markdownIt-Anchor" href="#tensorflow机器学习项目实战笔记"></a> 《TensorFlow机器学习项目实战》笔记</h1><h2 id="张量"><a class="markdownIt-Anchor" href="#张量"></a> 张量</h2><p>TensorFlow基于张量数据管理。 张量是数学领域的概念， 并且被开<br>发为向量和矩阵的线性代数项的泛化。 一个张量就是一个张量类的实例， 是绑定了相关运算的一个<strong>特定类型的多维数组</strong>。</p><p>张量的属性</p><ul><li>有一个静态的类型和动态的维数</li><li>只有张量类型的对象才能在计算图的节点中<br>传递。</li><li>秩rank</li><li>数据类型type</li><li>形状shape</li></ul><h2 id="numpy数组到tensorflow张量"><a class="markdownIt-Anchor" href="#numpy数组到tensorflow张量"></a> numpy数组到TensorFlow张量</h2><p>TensorFlow与numpy是可互操作的， 通常调用eval()函数会返回<br>numpy对象。因为张量对象只是一个操作结果的符号化句柄， 所以它并不持有该操作的结果 ,必须使用eval()方法来获得实际的<br>值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf <span class="comment">#we import tensorflow</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment">#we import numpy</span></span><br><span class="line">sess = tf.Session() <span class="comment">#start a new Session Object</span></span><br><span class="line">x_data = np.array([[<span class="number">1.</span>,<span class="number">2.</span>,<span class="number">3.</span>],</span><br><span class="line">[<span class="number">3.</span>,<span class="number">2.</span>,<span class="number">6.</span>]]) <span class="comment"># 2x3 matrix</span></span><br><span class="line">x = tf.convert_to_tensor(x_data,</span><br><span class="line">dtype=tf.float32) <span class="comment">#Finally, we create the</span></span><br><span class="line"><span class="comment">#tensor, starting from the fload 3x matrix</span></span><br></pre></td></tr></table></figure><p>tf.convert_to_tensor``： 该方法将Python对象转化为tensor对象。 它的<br>输入可以是tensor对象、 numpy数组、 Python列表和Python标量。</p><p>数据流图(data flow graph)</p><blockquote><p>数据流图是完整的TensorFlow计算</p></blockquote><ul><li><p>节点(node) 表示操作(operation) ,实现数学运算， 同时也表示数据或变量的供给(feed) ， 或输出结果 。一旦其输入边缘上的所有张量都到位， 则开始异步地并行执行</p></li><li><p>边(edge) 表示各操作之间流通的数据 ,描述节点之间的输入/输出关系。 这些数据边缘专门传输张量</p></li></ul><p>计算图(computation graph)</p><blockquote><p>由用户在创建张量(tensor) 和操作(op</p></blockquote><p>有用的操作对象方法如下：<br>●tf.Operation.type： 返回操作的类型(例如， MatMul) ；<br>●tf.Operation.inputs： 返回表示操作的输入张量对象列表；<br>●tf.Graph.get_operations()： 返回计算图中的操作列表；<br>●tf.Graph.version： 返回计算图的版本信息。</p><h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h2><blockquote><p>正如字面意思所示,是个变化的量。在TensorFlow具体表现为需要更新的参数</p></blockquote><p>在大多数计算中， 会多次执行计算图。 大多数张量的生存周期不会<br>超过单次执行周期。 然而， 变量是一种特殊的操作， 它返回一个持久<br>的、 可变的张量的句柄， 存活于多次计算图执行之中。 对于TensorFlow<br>的机器学习应用， 模型的参数通常存储在变量中， 并且在运行模型的训<br>练阶段被更新。</p><h2 id="placehold"><a class="markdownIt-Anchor" href="#placehold"></a> placehold</h2><p>给之后喂给的数据占位</p><h2 id="会话"><a class="markdownIt-Anchor" href="#会话"></a> 会话</h2><p>客户端程序通过创建会话(Session)与TensorFlow系统交互。<br>Session对象是运行环境的表示。Session对象开始为空，当程序员创建不同的操作和张量时，它们将被自动添加到Session，直到Run方法被调用，才开始运算。<br>Run方法输入是需要计算的操作，以及一组可选的张量，用来代替图中某些节点的输出。<br>如果我们调用这个方法，并且有命名操作所依赖的操作，Session对象将执行所有这些操作，然后继续执行命名操作。<br>用以下简单的代码可以创建一个会话：<br>s=tf.Session()</p><p>矩阵运算</p><p>转置、 乘法、 获取行列式和逆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tf. transpose(x). eval()<span class="comment"># Transpose</span></span><br><span class="line">tf. matmul(x,y). eval()<span class="comment"># Matrix</span></span><br><span class="line">tf. matrix determinant(floatx). eval()<span class="comment"># 行列式</span></span><br><span class="line">tf.matrix_inverse(floatx).eval() <span class="comment"># 求逆</span></span><br></pre></td></tr></table></figure><p>约简(reduction) 是一种跨维度张量操作， 计算结果比原张量缩减<br>一个维度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf </span><br><span class="line">In[<span class="number">2</span>]: sess=tf. InteractiveSession()</span><br><span class="line"></span><br><span class="line">In[<span class="number">3</span>]:x=tf. constant([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">                    [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],</span><br><span class="line">                    [<span class="number">-1</span>,<span class="number">2</span>,<span class="number">-3</span>]])</span><br><span class="line"></span><br><span class="line">In[<span class="number">5</span>]: tf.reduce_prod(x, reduction_indices=<span class="number">1</span>). eval() <span class="comment"># reduce prod,行操作,0为列操作</span></span><br><span class="line">    <span class="number">0</span>ut[<span class="number">5</span>]: array([<span class="number">6</span>,<span class="number">6</span>,<span class="number">-6</span>], dtype=int32)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: tf. reduce_min(x, reduction_indices=<span class="number">1</span>). eval()<span class="comment"># reduce min</span></span><br><span class="line">    <span class="number">0</span>ut[<span class="number">6</span>]: array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">-3</span>], dtype=int32)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: tf. reduce_max(x, reduction_indices=<span class="number">1</span>). eval()<span class="comment"># reduce max</span></span><br><span class="line">    <span class="number">0</span>ut[<span class="number">7</span>]: array([<span class="number">3</span>,<span class="number">3</span>,<span class="number">-1</span>], dtype=int32)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: tf. reduce_mean(x, reduction indices=<span class="number">1</span>). eval()<span class="comment"># reduce mean</span></span><br><span class="line">    <span class="number">0</span>ut[<span class="number">8</span>]: array([ <span class="number">2</span>,<span class="number">2</span>,<span class="number">-2</span>], dtype=int32) </span><br><span class="line">In[<span class="number">9</span>]: tf. reduce_all(boolean_tensor, reduction_indices=<span class="number">1</span>). eval()<span class="comment"># reduce all </span></span><br><span class="line">    Out[<span class="number">9</span>]: array([ <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>], dtype=bool)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: tf. reduce_any(boolean_tensor,</span><br></pre></td></tr></table></figure><p>序列实用程序包括诸如argmin和argmax(显示维度的最小和最大<br>值) ， listdiff(显示列表之间的交集的补码) ， where(显示张量上的真<br>实值的索引) 和unique(在列表上去除重复的元素) 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf sess=tf. InteractiveSession()</span><br><span class="line">x=tf. constant([[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">-5</span>],</span><br><span class="line">…:[<span class="number">0</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">5</span>],……:[<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>],…:[<span class="number">6</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0j</span>j)</span><br><span class="line">listx=tf. constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line">listy=tf. constant([<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line">boolx=tf. constant([[ <span class="keyword">True</span>, <span class="keyword">False</span>],</span><br><span class="line">[ <span class="keyword">False</span>, <span class="keyword">True</span>]])</span><br><span class="line">                             </span><br><span class="line">tf. argmin(x,<span class="number">1</span>). eval()<span class="comment"># Position of the maximum value of columns</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>])</span><br><span class="line">                             </span><br><span class="line">tf. argmax(x,<span class="number">1</span>). eval()<span class="comment"># Position of the minimum value of rows</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>])</span><br><span class="line">                             </span><br><span class="line">tf. listdiff(listx, listy)[<span class="number">0</span>]. eval()<span class="comment">#List differences</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>], dtype=int32)</span><br><span class="line">                             </span><br><span class="line">tf.where(boolx). eval()<span class="comment"># Show true values</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([[o,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line">                             </span><br><span class="line">tf. unique(listx)[<span class="number">0</span>]. eval()<span class="comment"># Unique values in list</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>], dtype=int32)</span><br></pre></td></tr></table></figure><p>形状变换 :</p><p>例如squeeze和expand_dims。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf </span><br><span class="line">In [<span class="number">2</span>]: sess=tf. InteractiveSession()</span><br><span class="line">In [<span class="number">3</span>]:x=tf. constant([[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">-5</span>],</span><br><span class="line">                    ……:[<span class="number">0</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">5</span>],</span><br><span class="line">                    …:[<span class="number">4</span>,<span class="number">3153</span>,</span><br><span class="line">                    …:[<span class="number">6</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>]])</span><br><span class="line">tf. shape(x). eval()<span class="comment"># Shape of the tensor</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([<span class="number">4</span>,<span class="number">4</span>], dtype=int32)</span><br><span class="line">tf. size(x). eval()<span class="comment"># size of the tensor</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">16</span></span><br><span class="line">tf. rank(x). eval()<span class="comment"># rank of the tensor</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span></span><br><span class="line">tf. reshape(x,[<span class="number">8</span>,<span class="number">2</span>]). eval()<span class="comment">#</span></span><br><span class="line">converting to a <span class="number">10</span>×<span class="number">2</span> matrix</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">array([[ <span class="number">2</span>,<span class="number">5</span>],</span><br><span class="line">[<span class="number">3</span>,<span class="number">-5</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">3</span>],</span><br><span class="line">[<span class="number">-2</span>,<span class="number">5</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">4</span>],</span><br><span class="line">[<span class="number">3</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">5</span>,<span class="number">3</span>],</span><br><span class="line">[<span class="number">6</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">4</span>,<span class="number">0</span>]], dtype=int32)</span><br><span class="line">tf. squeeze(x). eval()<span class="comment"># squeezing</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([[ <span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">-5</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">5</span>],</span><br><span class="line"><span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>],</span><br><span class="line">[<span class="number">6</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>]], dtype=int32)</span><br><span class="line">tf. expand_dims(x,<span class="number">1</span>). eval()<span class="comment"># Expanding dims</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">array([[[ <span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">-5</span>]],</span><br><span class="line">[[ <span class="number">0</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">5</span>]],</span><br><span class="line">[[<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>]],</span><br><span class="line">[i <span class="number">6</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0j</span>ji, dtype=int32)</span><br></pre></td></tr></table></figure><p>切片(slicing) 和连接(joining) :提取矩阵切片、 拆分、 添加填充(add padding) ， 以及打包(pack) 和解包(unpack) 行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf sess=tf. InteractiveSession()</span><br><span class="line">t_matrix=tf. constant([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">                    ……:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">                    …:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">t_array=tf. constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>])</span><br><span class="line">t array2=tf. constant([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]) tf. </span><br><span class="line"></span><br><span class="line">slice(t _matrix,[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>]). eval()</span><br><span class="line"><span class="comment"># cutting an slice</span></span><br><span class="line">&gt;&gt;&gt;array([[<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">[<span class="number">8</span>,<span class="number">9</span>]], dtype=int32)</span><br><span class="line">tf. split(<span class="number">0</span>,<span class="number">2</span>,t_array)<span class="comment"># splitting the array in two</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[&lt;tf. Tensor <span class="string">' split:0'</span> shape=(<span class="number">4</span>,) dtype=int32&gt;,</span><br><span class="line">&lt;tf. Tensor <span class="string">' split:1'</span> shape=(<span class="number">4</span>,) dtype=int32&gt;]</span><br><span class="line"></span><br><span class="line">tf. tile([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>]). eval()<span class="comment"># tiling this little tensor 3 times重复</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>], dtype=int32)</span><br><span class="line"></span><br><span class="line">tf. pad(t_matrix,[[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">1</span>]]). evai()<span class="comment">#padding</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array(i[o,o,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>],[o<span class="number">.0</span><span class="number">.7</span><span class="number">.8</span><span class="number">.9</span><span class="number">.01</span>.</span><br><span class="line">[o,o,o,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]], dtype=int32)</span><br><span class="line"></span><br><span class="line">tf. concat(<span class="number">0</span>,[t_array, t_array2]). eval()<span class="comment"># concatenating list</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,</span><br><span class="line"><span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>], dtype=int32)</span><br><span class="line"></span><br><span class="line">tf. pack([t_array,t_array2]). eval()<span class="comment"># packing 拼接</span></span><br><span class="line"><span class="number">0</span>ut[<span class="number">11</span>]:array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>],</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]], dtype=int32)</span><br><span class="line">    </span><br><span class="line">sess.run(tf. unpack(t_matrix))<span class="comment">#Unpacking, we need the run method to view the tensors</span></span><br><span class="line">&gt;&gt;&gt;[array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],dtype=int32),</span><br><span class="line">array([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],dtype=int32),</span><br><span class="line">array([<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];dtype=int32)</span><br><span class="line">    </span><br><span class="line">In [<span class="number">13</span>]: tf. reverse(t_matrix,</span><br><span class="line">[ <span class="keyword">False</span>, <span class="keyword">True</span>]). eval()<span class="comment"># Reverse matrix,行不变,列反转</span></span><br><span class="line"><span class="number">0</span>ut[<span class="number">13</span>]: array([[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">6</span>,<span class="number">5</span>,<span class="number">41</span>;</span><br><span class="line"><span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>]], dtype=int32)</span><br></pre></td></tr></table></figure><p>从磁盘读取信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表格式——CSV </span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">sess=tf.Session()</span><br><span class="line">filename_queue= tf.train.string_input_producer(</span><br><span class="line">tf.train.match_filenames_once(<span class="string">"./*.csv"</span>),</span><br><span class="line">shuffle=<span class="keyword">True</span>)</span><br><span class="line">reader=tf.TextLineReader(skip_header_lines=<span class="number">1</span>)</span><br><span class="line">key, value=reader.read(filename_queue)</span><br><span class="line">record_defaults=[[<span class="number">0.</span>],[<span class="number">0.</span>],[<span class="number">0</span>],[<span class="number">0.</span>],[<span class="string">""</span>]]</span><br><span class="line">col1, col2, col3, col4, col5=</span><br><span class="line">tf.decode_csv(value,</span><br><span class="line">record_defaults=record_defaults)<span class="comment"># Convert CSV</span></span><br><span class="line">records to tensors.Each</span><br><span class="line"><span class="comment"># column maps to one tensor.</span></span><br><span class="line">features=tf.pack([ col1, col2, col3, col4])</span><br><span class="line">tf.initialize_all_variables().run(session=sess)</span><br><span class="line">coord=tf.train.Coordinator()</span><br><span class="line">threads=</span><br><span class="line">tf.train.start_queue_runners(coord=coord, sess=sess)</span><br><span class="line"><span class="keyword">for</span> iteration <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">example=sess.run([ features])</span><br><span class="line">print(example)</span><br><span class="line">coord.request_stop()</span><br><span class="line">coord.join(threads)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载和处理图像</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf sess=tf.Session()</span><br><span class="line">filename_queue=</span><br><span class="line">tf.train.string_input_producer(tf.train.match_filenames_once(<span class="string">'./blue_jay.jpg'</span>))</span><br><span class="line">reader=tf.WholeFileReader()</span><br><span class="line">key, value= reader.read(filename_queue)</span><br><span class="line">image=tf.image.decode_jpeg(value)</span><br><span class="line">fliplmageUpDown=tf.image.encode _jpeg(tf.image.fli </span><br><span class="line">p_up_down(image))<span class="comment"># 获得上下翻转的图片                                   </span></span><br><span class="line">fliplmageleftRight=tf.image.encode_jpeg(tf.image.flip_left_right(image))<span class="comment"># 获得左右翻转的图片    </span></span><br><span class="line">tf.initialize_all_variables().run(session=sess)</span><br><span class="line">coord=tf.train.Coordinator()</span><br><span class="line">threads=</span><br><span class="line">tf.train.start_queue_runners(coord=coord, sess=sess)</span><br><span class="line">example=sess.run(fliplmageLeftRight)</span><br><span class="line"><span class="keyword">print</span> example file=open (<span class="string">"flippedUpDown.jpg"</span>,<span class="string">"wb+"</span>)</span><br><span class="line">file.write (fliplmageUpDown.eval(session=sess))<span class="comment"># 写入上下翻转图</span></span><br><span class="line">file.close()</span><br><span class="line">file=open (<span class="string">"flippedLeftRight.jpg"</span>,<span class="string">"wb+"</span>)<span class="comment"># 写入左右翻转图</span></span><br><span class="line">file.write</span><br><span class="line">(fliplmageLeftRight.eval(session=sess))</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>流程:</p><ol><li>创建一个文件队列对象:<code>tf.train.string_input_producer(tf.train.match_filenames_once('xxx'))</code></li><li>创建一个reader对象</li><li>读取,并解码</li><li>提取特征</li><li><code>initialize_all_variables</code>-&gt;<code>Coordinator</code>-&gt;<code>start_queue_runners</code>-&gt;run</li></ol><h2 id="logit函数"><a class="markdownIt-Anchor" href="#logit函数"></a> logit函数</h2><p>\operatorname{logit}(\mathrm{p})=\log \left(\frac{\mathrm{p}}{1-\mathrm{p}}\right)</p><p>该函数实现了从区间[0,1]到区间(-∞,+∞)之间的映射。 那么我们只要将y用一个输入的线性函数替换， 那么就实现了输入的线性变化和区间[0,1]之间的映射。</p><p><img src="/2019/09/19/深度学习/E:%5Chexo%5Csource_posts%5C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%5Clogit.jpg" alt="logit"></p><h2 id="logistic函数"><a class="markdownIt-Anchor" href="#logistic函数"></a> logistic函数</h2><p>对数几率函数的逆函数</p><p>\operatorname{logit}^{-1}(\alpha)=\operatorname{logistic}(\alpha)=\frac{1}{1+\exp (-\alpha)}=\frac{\operatorname{ep}(\alpha)}{\exp (\alpha)+1}</p><p>这是一个Sigmoid函数。<br>Logistic函数将使得我们能够在我们的回归任务表示为二项选择。</p><p><img src="/2019/09/19/深度学习/E:%5Chexo%5Csource_posts%5C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%5Csigmoid.jpg" alt="sigmoid"></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>=</mo><mfrac><mrow><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><mi>t</mi></mrow></msup></mrow><mrow><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><mi>t</mi></mrow></msup><mo>+</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>1</mn><mo>+</mo><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><mo>−</mo><mi>t</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sigma(t)=\frac{\mathrm{e}^{t}}{\mathrm{e}^{t}+1}=\frac{1}{1+\mathrm{e}^{-t}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9556399999999999em;"></span><span class="strut bottom" style="height:1.358971em;vertical-align:-0.403331em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class=""><span class="mord scriptstyle cramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class=""><span class="mord scriptstyle uncramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span><span class="mbin">+</span><span class=""><span class="mord scriptstyle cramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord">−</span><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><p>一般的解释就是t为一个独立变量， 该函数将t映射到区间[0,1]之<br>间。 但是我们提升了这个模型， 将t转变为变量x的一个线性映射(当x<br>是一个多变量的向量时， t就是该向量中各个元素的线性组合) 。</p><p>我们可以将t表示如下：<br>t=wx+b<br>我们就能够得到以下方程 \operatorname{logit}(\mathrm{p})=\operatorname{In}\left(\frac{p}{1-p}\right)=w x+b</p><p>对于所有的元素， 我们计算了回归方程， 得出如下概率。 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>p</mi></mrow><mo>^</mo></mover><mo>=</mo><mfrac><mrow><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><msub><mi>β</mi><mrow><mn>0</mn></mrow></msub><mo>+</mo><msub><mi>β</mi><mrow><mn>1</mn></mrow></msub><mi>x</mi></mrow></msup></mrow><mrow><mn>1</mn><mo>+</mo><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><msub><mi>β</mi><mrow><mn>0</mn></mrow></msub><mo>+</mo><msub><mi>β</mi><mrow><mn>1</mn></mrow></msub><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\hat{p}=\frac{\mathrm{e}^{\beta_{0}+\beta_{1} x}}{1+\mathrm{e}^{\beta_{0}+\beta_{1} x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.99532em;"></span><span class="strut bottom" style="height:1.436116em;vertical-align:-0.44079599999999997em;"></span><span class="base textstyle uncramped"><span class="mord accent"><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord textstyle cramped"><span class="mord mathit">p</span></span></span><span style="top:0em;margin-left:0.16668em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="accent-body"><span>^</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.38246499999999994em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span><span class="mbin">+</span><span class=""><span class="mord scriptstyle cramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.32177857142857147em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord"><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="vlist"><span style="top:0.29964em;margin-right:0.1em;margin-left:-0.05278em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptscriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="vlist"><span style="top:0.29964em;margin-right:0.1em;margin-left:-0.05278em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptscriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class=""><span class="mord scriptstyle uncramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="vlist"><span style="top:0.29964em;margin-right:0.1em;margin-left:-0.05278em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptscriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="vlist"><span style="top:0.29964em;margin-right:0.1em;margin-left:-0.05278em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptscriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><p>线性函数的参数起什么作用呢？ 它们可以改变直线的斜率和<br>Sigmoid函数零的位置。 通过调整线性方程中的参数， 来缩小预测值与<br>真实值之间的差距。</p><p>Logistic函数的属性<br>函数空间中每个曲线都可以被描述成它所应用的可能目标。 具体到Logistic函数：<br>●事件的可能性p依赖于一个或者多个变量。 比如， 根据之前的资<br>历,预测获奖的可能性。<br>●对于特定的观察， 估算事件发生的可能性。<br>●预测改变独立变量对二项响应的影响。<br>●通过计算可能性， 将观测分配到某个确定的类。</p><p>损失函数</p><p>loss <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo>−</mo><msub><mo>∑</mo><mrow><mi>i</mi></mrow></msub><msub><mi>y</mi><mrow><mi>i</mi></mrow></msub><mo>∙</mo><mi>log</mi><mrow><mo fence="true">(</mo><mi>y</mi><mi>p</mi><mi>r</mi><mi>e</mi><msub><mi>d</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow><mo>+</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><msub><mi>y</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow><mo>∙</mo><mi>log</mi><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mi>y</mi><mi>p</mi><mi>r</mi><mi>e</mi><msub><mi>d</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">=-\sum_{i} y_{i} \bullet \log \left(y p r e d_{i}\right)+\left(1-y_{i}\right) \bullet \log \left(1-y p r e d_{i}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.0500099999999999em;vertical-align:-0.30001em;"></span><span class="base textstyle uncramped"><span class="mrel">=</span><span class="mord">−</span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">∙</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathit">p</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">e</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">+</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∙</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathit">p</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">e</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span></span></span></span></p><p>该损失函数的主要性质就是偏爱相似行为， 而当误差超过0.5的时<br>候， 惩罚会急剧增加。</p><p>多类分类应用——Softmax回归</p><p>当我们面对多于二类的情况， 通常有两种方法： 一对多和一对所<br>有。<br>●第一类技术计算多个模型。 针对每个类都计算一个“一vs所有<br>(one against all) ”的概率。<br>●第二类技术只计算出一个概率集合， 每个概率表示属于其中某一<br>类的可能性。<br>●第二种技术的输出是Softmax回归格式， 这是Logistic回归对于n类<br>的泛化。</p><p>损失函数</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>s</mi><mi>s</mi><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi></mrow></msub><msub><mo>∑</mo><mrow><mi>c</mi></mrow></msub><msub><mi>y</mi><mrow><mi>c</mi></mrow></msub><mo>∙</mo><mi>log</mi><mrow><mo fence="true">(</mo><mi>y</mi><mi>p</mi><mi>r</mi><mi>e</mi><msub><mi>d</mi><mrow><mi>c</mi></mrow></msub><mo fence="true">)</mo></mrow><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi></mrow></msub><msub><mo>∑</mo><mrow><mi>c</mi></mrow></msub><msub><mi>y</mi><mrow><mi>c</mi></mrow></msub><mo>∙</mo><mfrac><mrow><msup><mi>e</mi><mrow><mo>−</mo><msub><mi>x</mi><mrow><mi>c</mi></mrow></msub></mrow></msup></mrow><mrow><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>c</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>log</mi><mrow><mo fence="true">(</mo><msup><mi>e</mi><mrow><mo>−</mo><msub><mi>x</mi><mrow><mi>j</mi></mrow></msub></mrow></msup><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">loss=\sum_{i} \sum_{c} y_{c} \bullet \log \left(y p r e d_{c}\right)=\sum_{i} \sum_{c} y_{c} \bullet \frac{e^{-x_{c}}}{\sum_{j=0}^{c-1} \log \left(e^{-x_{j}}\right)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.939765em;"></span><span class="strut bottom" style="height:1.749765em;vertical-align:-0.81em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit">s</span><span class="mrel">=</span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">c</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">c</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">∙</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathit">p</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">e</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">c</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">c</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">c</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">∙</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.5075000000000001em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mop"><span class="op-symbol small-op mop" style="top:0.074995em;">∑</span><span class="vlist"><span style="top:0.2862857142857143em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mrel">=</span><span class="mord mathrm">0</span></span></span></span><span style="top:-0.4043214285714285em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">c</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle textstyle uncramped" style="top:0.07500000000000001em;">(</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.47143571428571435em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord">−</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.31472000000000006em;margin-right:0.1em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptscriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05724em;">j</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle textstyle uncramped" style="top:0.07500000000000001em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mord">−</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.1em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptscriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">c</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><h2 id="感知器算法"><a class="markdownIt-Anchor" href="#感知器算法"></a> 感知器算法</h2><blockquote><p>简单来说就是一个二元分类函数</p></blockquote><p>简化版的感知器算法如下：<br>① 以一个随机分布初始化权值和偏差(通常比较小) ；<br>② 选择一个输入向量， 并将其放入神经网络中；<br>③ 将输入与权重相乘， 并加上偏差， 计算网络的输出y’；<br>④ 感知器的函数如下：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mrow><mrow><mn>1</mn></mrow></mrow></mtd><mtd><mrow><mrow><mi>i</mi><mi>f</mi><mspace width="0.277778em"></mspace><mi>w</mi><mo>⋅</mo><mi>x</mi><mo>+</mo><mi>b</mi><mo>&gt;</mo><mn>0</mn></mrow></mrow></mtd></mtr><mtr><mtd><mrow><mrow><mn>0</mn></mrow></mrow></mtd><mtd><mrow><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi></mrow></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f(x)=\left\{\begin{array}{ll}{1} &amp; {if \; w \cdot x+b&gt;0} \\ {0} &amp; otherwise \end{array}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.45em;"></span><span class="strut bottom" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mrel">=</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist"><span style="top:-0.6099999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span style="top:0.5900000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist"><span style="top:-0.6099999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">i</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mord mspace thickspace"></span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mbin">⋅</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathit">b</span><span class="mrel">&gt;</span><span class="mord mathrm">0</span></span></span></span><span style="top:0.5900000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord textstyle uncramped"><span class="mord mathit">o</span><span class="mord mathit">t</span><span class="mord mathit">h</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">e</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><p>⑤ 如果y′≠y， 将权重wi加上Δw=yxi；</p><p>⑥ 返回第②步。</p><h2 id="tensorflow中损失优化方法"><a class="markdownIt-Anchor" href="#tensorflow中损失优化方法"></a> TensorFlow中损失优化方法</h2><p>●tf.train.GradientDescentOptimizer(learning_rate, use_locking,<br>name)： 原始梯度下降方法， 唯一参数就是学习率。<br>●tf.train.AdagradOptimizer： 自适应调整学习率， 累加历史梯度的平<br>方， 作为分母， 防止有些方向的梯度值过大， 提高优化效率， 善于处理<br>稀疏梯度。<br>●tf.train.AdadeltaOptimizer： 扩展AdaGrad优化方法， 只累加最近的<br>梯度值， 而不对整个历史上的梯度值进行累加。<br>●tf.train.AdamOptimizertf.train.AdamOptimizer． (learningrate, beta1,<br>beta2, epsilon, use locking, name)： 梯度的一阶矩估计和二阶矩估计动态<br>调整每个参数的学习率。 Adam是自适应矩估计(Adaptive Moment<br>Estimation) 的首字母缩写。</p><h2 id="sklearn预处理函数"><a class="markdownIt-Anchor" href="#sklearn预处理函数"></a> Sklearn预处理函数</h2><p>我们看一些下面的Sklearn数据预处理函数：<br>●preprocessing.StandardScaler()： 数据正规化(Normalization) 是机<br>器学习估计的一个常见要求， 为了模型能更好地收敛， 我们通常会将数<br>据集预处理到一个零均值单位方差的高斯状分布。 通常， 我们会将数据<br>的各个维度都减去它的均值， 然后乘上一个非零的数。 这个非零的数就<br>是数据集的标准差。 对于该任务， 我们直接使用StandardScaler， 它已经<br>实现了我们上面提到的操作。 它也保留了变换操作， 让我们可以直接用<br>在测试集上。<br>●StandardScaler .fit_transform()： 将数据调整到所需要的形式。<br>StandardScaler对象会存储数据变化的变量， 这样我们可以把数据解正规<br>化到原先的格式。<br>●cross_validation.train_test_split： 该方法能够将数据集分割成训练<br>集和测试集。 我们只需要提供两者的比例， 该方法能够自动帮我们处<br>理</p><h2 id="书籍推荐"><a class="markdownIt-Anchor" href="#书籍推荐"></a> 书籍推荐</h2><p>了解tensorflow基础对象——《面向机器智能的tensorflow实践》</p><p>进阶操作tensor对象——《Tensorflow机器学习项目实战》</p><h2 id="hello-tensorflow"><a class="markdownIt-Anchor" href="#hello-tensorflow"></a> Hello TensorFlow</h2><blockquote><p><code>import tensorflow as tf</code>如果报错dtype…可以降低numpy的版本(从1.16-&gt;1.17)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">% matplotlib inline </span><br><span class="line">a=tf.random_normal([<span class="number">2</span>,<span class="number">20</span>])</span><br><span class="line">sess=tf.Session()</span><br><span class="line">out=sess.run(a)</span><br><span class="line">x,y=out</span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">plt. show()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">%matplotlib inline</span></span><br><span class="line"><span class="string">这是一条专门的命令，用于通知笔记本将matplotib图表直接显示在浏览器中。</span></span><br><span class="line"><span class="string">下面逐行分析其余代码，如果你不理解某些术语，请不必担心，后面章节还会一一进行讲解：</span></span><br><span class="line"><span class="string">1)用TensorFlow定义一个由随机数构成的2×20的矩阵，并将其赋给变量a。</span></span><br><span class="line"><span class="string">2)启动TensorFlow Session，并将其赋予一个ses对象。</span></span><br><span class="line"><span class="string">3)用sess.run()方法执行对象a，并将输出(NumPy数组)赋给ot。</span></span><br><span class="line"><span class="string">4)将这个2×20的矩阵划分为两个1×10的向量x和y。</span></span><br><span class="line"><span class="string">5)利用pyplot模块绘制散点图，x对应横轴，y对应纵轴。</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="sesstfsession"><a class="markdownIt-Anchor" href="#sesstfsession"></a> sess=tf.Session()</h3><p>Session对象在运行时负责对数据流图进行监督，并且是运行数据流图的主要接口。在本练习之后，我们还将对Session对象进行更为深入的探讨，但现在只需了解在TensorFow中，如果希望运行自己的代码，必须定义一个Session对象。上述代码将Session对象赋给了变量sess，以便后期能够对其进行访问。</p><ul><li>target指定了所要使用的执行引擎。对于大多数应用，该参数取为默认的空字符串。在分布式设置中使用Session对象时，该参数用于连接不同的tftrain Server实例(本书后续章节将对此进行介绍)。</li><li>graph参数指定了将要在Session对象中加载的Graph对象，其默认值为None，表示将使用当前默认数据流图。当使用多个数据流图时，最好的方式是显式传入你希望运行的Graph对象(而非在一个with语句块内创建Session对象)。</li><li>config参数允许用户指定配置Session对象所需的选项，如限制CPU或GPU的使用数目，为数据流图设置优化参数及日志选项等。</li></ul><p>Sesionnn()方法接收一个参数<strong>fetches</strong>，以及其他三个可选参数：<strong>feed_dict</strong>、options和rnn_metadata。本书不打算对options和run_metadata进行介绍，因为它们尚处在实验阶段(因此以后很可能会有变动)，且目前用途非常有限，但理解ed_dict非常重要，下文将对其进行讲解。</p><p>1.fetches参数<br>fetches参数接收任意的数据流图元素(Op或Tensor对象)，后者指定了用户希望执行的对象。如果请求对象为Tensor对象，则rnun()的输出将为一NumPy数组：如果请求对象为一个Op，则输出将为None。</p><p>除了利用fetches获取Tensor对象输出外，还将看到这样的例子：有时也会赋予ftches一个指向某个Op的句柄，这是在运行中的一种有价值的用法。<br>tf.initialize_all_variables()使是一个这样的例子，它会准备将要使用的所有TensorFow Variable对象(本章稍后将介绍Variable对象)。我们仍然将该Op传给etches参数，但Session.run()的结果将为None：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行初始化Variable对象所需的计算，但返回值为None sess.run(tf.initialize_all_variables())</span><br></pre></td></tr></table></figure><p>2.feed_dict参数</p><p>参数feed_dict用于覆盖数据流图中的Tensor对象值，它需要Python字典对象作为输入。字典中的“键”为指向应当被覆盖的Tensor对象的句柄，而字典的“值”可以是数字、字符串、列表或NumPy数组(之前介绍过)。这些“值”的类型必须与Tensor的“键”相同，或能够转换为相同的类型。下面通过一些代码来展示如何利用feed_dict重写之前的数据流图中a的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">inport tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment">#创建Op、Tensor对象等(使用默认的数据流图)</span></span><br><span class="line">a=tf.add(<span class="number">2</span>，<span class="number">5</span>)</span><br><span class="line">b=tf.mul(a，<span class="number">3</span>)</span><br><span class="line"><span class="comment">#利用默认的数据流图启动一个Session对象</span></span><br><span class="line">sess=tf.Session()</span><br><span class="line"><span class="comment">#定义一个字典，比如将a的值替换为15</span></span><br><span class="line">replace_dict=&#123;a：<span class="number">15</span>&#125;</span><br><span class="line"><span class="comment">#运行Session对象，将replace_dict赋给feed_dict</span></span><br><span class="line">sess.run(b，feed_dict=replace_dict)<span class="comment">#返回45</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">请注意，即便a的计算结果通常为7，我们传给eeddict的字典也会将它替换为15。在相当多的场合中，fed_dict都极为有用。由于张量的值是预先提供的，数据流图不再需要对该张量的任何普通依赖节点进行计算。这意味着如果有一个规模较大的数据流图，并希望用一些虚构的值对某些部分进行测试，TensorFlow将不会在不必要的计算上浪费时间。对于指定输入值，eed_dict也十分有用，在稍后的占位符一节中我们将对此进行介绍。</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="tfplacehold"><a class="markdownIt-Anchor" href="#tfplacehold"></a> tf.placehold</h3><p>之前定义的数据流图并未使用真正的“输入”，它总是使用相同的数值5和3。我们真正希望做的是从客户那里接收输入值，这样便可对数据流图中所描述的变换<br>以各种不同类型的数值进行复用，借助“占位符”可达到这个目的。正如其名称所预示的那样，占位符的行为与Tesor对象一致，但在创建时无须为它们指定具体的数值。它们的作用是为运行时即将到来的某个Tensor对象预留位置，因此实际上变成了“输入”节点。利用tfplaceholderOp可创建占位符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">inport numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#创建一个长度为2、数据类型为int32的占位向量</span></span><br><span class="line">a=tf.placeholder(tf.int32，shape=[<span class="number">2</span>]，name=<span class="string">"my_input"</span>)</span><br><span class="line"><span class="comment">#将该占位向量视为其他任意Tensor对象，加以使用</span></span><br><span class="line">b=tf.reduce_prod(a，name=<span class="string">"prod_b"</span>)</span><br><span class="line">c=tf.reduce_sum(a，name=<span class="string">"sum_c"</span>)</span><br><span class="line"><span class="comment">#完成数据流图的定义</span></span><br><span class="line">d=tf.add(b，c，name=<span class="string">"add_d"</span>)</span><br></pre></td></tr></table></figure><p>调用tf.placehoder()时，dtype参数是必须指定的，而shape参数可选：</p><ul><li>dtype指定了将传给该占位符的值的数据类型。该参数是必须指定的，因为需要确保不出现类型不匹配的错误。</li><li>shape指定了所要传入的Tensor对象的形状。请参考前文中对Tensor形状的讨论。shape参数的默认值为None，表示可接收任意形状的Tensor对象。<br>与任何Op一样，也可在fpaceholer中指定一个name标识符。<br>为了给占位符传入一个实际的值，需要使用Sesionnm()中的eed_dict参数。我们将指向占位符输出的句柄作为字典(在上述代码中，对应变量a)的“键”，而<br>将希望传入的Tensor对象作为字典的“值”：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个TensorFlow Session对象</span></span><br><span class="line">sess=tf.Session()</span><br><span class="line"><span class="comment">#创建一个将传给feed_dict参数的字典</span></span><br><span class="line"><span class="comment">#键：a’，指向占位符输出Tensor对象的句柄</span></span><br><span class="line"><span class="comment">#值：一个值为[5，3]、类型为int32的向量</span></span><br><span class="line">input_dict=&#123;a:np.array([<span class="number">5</span>，<span class="number">3</span>]，dtype=np.int32)&#125;</span><br><span class="line"><span class="comment">#计算d的值，将input_dict的“值”传给a</span></span><br><span class="line">sess.run(d，feed_dict=input_dict)</span><br></pre></td></tr></table></figure><p>必须在eed dixt中为待计算的节点的每个依赖占位符包含一个键值对。在上面的代码中，需要计算d的输出，而它依赖于a的输出。如果还定义了一些d不依赖的其他占位符，则无需将它们包含在eed_dict中。<br>placeholder的值是无法计算的—如果试图将其传入Session.nn()，将引发一个异常。</p><h3 id="variable对象"><a class="markdownIt-Anchor" href="#variable对象"></a> Variable对象</h3><h4 id="1创建variable对象"><a class="markdownIt-Anchor" href="#1创建variable对象"></a> 1.创建Variable对象</h4><p>Tensor对象和Op对象都是不可变的(immmtable)，但机器学习任务的本质决定了需要一种机制保存随时间变化的值。借助TensorFbw中的Varable对象，便可达到这个目的。Variabe对象包含了在对Session.un()多次调用中可持久化的可变张量值。Variabk对象的创建可通过Variabe类的构造方法tVariable()完成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">inport tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment">#为Variable对象传入一个初始值3</span></span><br><span class="line">my_var=tf.Variable(<span class="number">3</span>，name=<span class="string">"my_variable"</span>)</span><br><span class="line"><span class="comment">#Variable对象可用于任何可能会使用Tensor对象的TensorFlbw函数或Op中，其当前值将传给使用它的Op：</span></span><br><span class="line">add=tf.add(<span class="number">5</span>，my_var)</span><br><span class="line">mul=tf.mul(<span class="number">8</span>，my_var)</span><br><span class="line"><span class="comment">#Variables对象的初值通常是全0、全1或用随机数填充的阶数较高的张量。为使创建具有这些常见类型初值的张量更加容易，TensorFlow提供了大量辅助Op，如tferos()、tfones()、tfrandom normal()和tfrandomuiform()，每个Op都接收一个sape参数，以指定所创建的Tensor对象的形状：</span></span><br><span class="line"><span class="comment">#2×2的零矩阵</span></span><br><span class="line">zeros=tf.zeros([<span class="number">2</span>，<span class="number">2</span>])</span><br><span class="line"><span class="comment">#长度为6的全1向量</span></span><br><span class="line">ones=tf.ones([<span class="number">6</span>])</span><br><span class="line"><span class="comment">#3×3×3的张量，其元素服从0~10的均匀分布</span></span><br><span class="line">uniform=tf.random_uniform([<span class="number">3</span>，<span class="number">3</span>，<span class="number">3</span>]，minval=<span class="number">0</span>，maxval=<span class="number">10</span>)</span><br><span class="line"><span class="comment">#3×3×3的张量，其元素服从0均值、标准差为2的正态分布</span></span><br><span class="line">normal=tf.random_normal([<span class="number">3</span>，<span class="number">3</span>，<span class="number">3</span>]，mean=<span class="number">0.0</span>，stddev=<span class="number">2.0</span>)</span><br></pre></td></tr></table></figure><p>除了tfrandom normal()外，经常还会看到人们使用ttrmncated nomal()，因为它不会创建任何<strong>偏离均值超过2倍标准差的值</strong>，从而可以防止有一个或两个元素与该张量中的其他元素显著不同的情况出现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#该Tensor对象不会返回任何小于3.0或大于7.0的值</span></span><br><span class="line">trunc=tf.truncated_normal([<span class="number">2</span>，<span class="number">2</span>]，mean=<span class="number">5.0</span>，stddev=<span class="number">1.0</span>)</span><br><span class="line">可像手工初始化张量那样将这些Op作为Variable对象的初值传入：</span><br><span class="line"><span class="comment">#默认均值为0，默认标准差为1.0</span></span><br><span class="line">randon_var=tf.Variable(tf.truncated_normal([<span class="number">2</span>，<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><h4 id="2variable对象的初始化"><a class="markdownIt-Anchor" href="#2variable对象的初始化"></a> 2.Variable对象的初始化</h4><p>Variable对象与大多数其他TensorFlow对象在Graph中存在的方式都比较类似，但它们的状态实际上是由Session对象管理的。因此，为使用Varinbe对象，需要采取一些额外的步骤—必须在一个Session对象内对Variable对象进行初始化。这样会使Session对象开始追踪这个Variable对象的值的变化。Varabe对象的初始化通常是通过将tinitialize_all_variabkes()Op传给Sessionrun()完成的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">init=tf.initialize_all_variables()</span><br><span class="line">sess=tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"><span class="comment">#如果只需要对数据流图中定义的一个Variable对象子集初始化，可使用tfinitialie variables()。该函数可接收一个要进行初始化的Variable对象列表：</span></span><br><span class="line">var1=tf.Variable(<span class="number">0</span>，name=<span class="string">"initialize_me"</span>)</span><br><span class="line">var2=tf.Variable(<span class="number">1</span>，name=<span class="string">"no_initialization"</span>)</span><br><span class="line">init=tf.initialize_variables([var1]，name=<span class="string">"init_var1"</span>)</span><br><span class="line">sess=tf.Session()</span><br><span class="line">sess.run(init)</span><br></pre></td></tr></table></figure><h4 id="3variable对象的修改"><a class="markdownIt-Anchor" href="#3variable对象的修改"></a> 3.Variable对象的修改</h4><p>要修改Variablk对象的值，可使用Variable.assign()方法。该方法的作用是为Variable对象赋予新值。请注意，Variable.assign()是一个Op，要使其生效必须在一个Session对象中运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个初值为1的Variable对象</span></span><br><span class="line">my_var=tf.Variable(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#创建一个Op，使其在每次运行时都将该Variable对象乘以2</span></span><br><span class="line">my_var_times_two=my_var.assign(my_var*<span class="number">2</span>)</span><br><span class="line"><span class="comment">#初始化Op init=tf.initialize_all_variables()</span></span><br><span class="line"><span class="comment">#启动一个会话</span></span><br><span class="line">sess=tf.Session()</span><br><span class="line"><span class="comment">#初始化Variable对象</span></span><br><span class="line">sess.run(init)</span><br><span class="line"><span class="comment">#将Variable对象乘以2，并将其返回</span></span><br><span class="line">sess.run(my_var_times_two)</span><br><span class="line"><span class="comment">##输出：2</span></span><br><span class="line"><span class="comment">#再次相乘</span></span><br><span class="line">sess.run(my_var_times_two)</span><br><span class="line"><span class="comment">##输出：4</span></span><br><span class="line"><span class="comment">#再次相乘</span></span><br><span class="line">sess.run(my_var_times_two)</span><br><span class="line"><span class="comment">##输出：8</span></span><br><span class="line">对于Variablk对象的简单自增和自减，TensorFlow提供了Variable.asign add()方法和Variable.assignsub()方法：</span><br><span class="line"><span class="comment">#自增1</span></span><br><span class="line">sess.run(my_var.assign_add(<span class="number">1</span>))</span><br><span class="line"><span class="comment">#自减1</span></span><br><span class="line">sess.run(my_var.assign_sub(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>△由于不同Session对象会各自独立地维护Varablk对象的值，因此每个Session对象都拥有自己的、在Graph对象中定义的Variabe对象的当前值：</p><h4 id="4trainable参数"><a class="markdownIt-Anchor" href="#4trainable参数"></a> 4.trainable参数</h4><p>在本书的后续章节将介绍各种能够自动训练机器学习模型的Optinmizer类，这意味着这些类将自动修改Variable对象的值，而无须显式做出请求。在大多数情况下，这与读者的期望一致，但如果要求Graph对象中的一些Variabk对象只可手工修改，而不允许使用Optimizer类时，可在创建这些Variable对象时将其raimbe参数设为False：not_trainable=tf.Variable(0，trainable=False)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深度学习神经网络&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#深度学习神经网络&quot;&gt;&lt;/a&gt; 深度学习——神经网络&lt;/h1&gt;
&lt;h2 id=&quot;构建网络的总原则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#构
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>常用域名记录解释</title>
    <link href="https://nymrli.top/2019/09/17/%E5%B8%B8%E7%94%A8%E5%9F%9F%E5%90%8D%E8%AE%B0%E5%BD%95%E8%A7%A3%E9%87%8A/"/>
    <id>https://nymrli.top/2019/09/17/常用域名记录解释/</id>
    <published>2019-09-17T09:47:35.000Z</published>
    <updated>2019-09-17T09:47:50.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用域名记录解释"><a class="markdownIt-Anchor" href="#常用域名记录解释"></a> 常用域名记录解释</h1><h2 id="a记录"><a class="markdownIt-Anchor" href="#a记录"></a> A记录</h2><p>A记录是用来创建到IP地址的记录。</p><p><strong>A记录设置技巧</strong></p><p>1、如果想创建不带www的记录，<a href="http://xn--ezloo-k97h.com" target="_blank" rel="noopener">即ezloo.com</a>，在主机记录中填写@或者留空，不同的注册商可能不一样。</p><p>2、创建多个域名到同一个IP，比如给博客建了二级域名，可以使用*.blog.ezloo.com来指向一个IP，这样的话，不管是访问a.blog.ezloo.com还是b.blog.ezloo.com都能到同一个IP。</p><p>3、如果你给同一个二级域名设置了多个A记录，比如你建了两个blog的A记录，其中一个指向了111.111.111.111，另一个指向了111.111.111.112，那么在查询的时候，每次返回的数据包含了两个IP地址，但是在返回的过程中数据排列的顺序每次都不相同。由于大 部分的客户端只选择第一条记录所以通过这种方式可以实现一定程度的负载均衡。</p><p>在命令行下可以通过nslookup -qt=a <a href="https://www.ezloo.com/" target="_blank" rel="noopener">www.ezloo.com</a>来查看A记录。</p><h2 id="mx记录"><a class="markdownIt-Anchor" href="#mx记录"></a> MX记录</h2><p>在命令行下可以通过 nslookup -qt=mx <a href="http://ezloo.com" target="_blank" rel="noopener">ezloo.com</a> 来查看MX记录。</p><p>mx 记录的权重对 Mail 服务是很重要的，当发送邮件时，Mail 服务器先对域名进行解析，查找 mx 记录。先找权重数最小的服务器（比如说是 10），如果能连通，那么就将服务器发送过去；如果无法连通 mx 记录为 10 的服务器，那么才将邮件发送到权重为 20 的 mail 服务器上。</p><p>这里有一个重要的概念，权重 20 的服务器在配置上只是暂时缓存 mail ，当权重 20 的服务器能连通权重为 10 的服务器时，仍会将邮件发送的权重为 10 的 Mail 服务器上。当然，这个机制需要在 Mail 服务器上配置。（<a href="http://blog.ixpub.net/viewthread-1308142" target="_blank" rel="noopener">http://blog.ixpub.net/viewthread-1308142</a>）</p><h2 id="cname记录"><a class="markdownIt-Anchor" href="#cname记录"></a> CNAME记录</h2><p><a href="http://en.wikipedia.org/wiki/CNAME_record" target="_blank" rel="noopener">CNAME</a>记录也成别名记录，它允许你将多个记录映射到同一台计算机上。比如你建了如下几条记录：</p><p>a1 CNAME <a href="http://a.ezloo.com" target="_blank" rel="noopener">a.ezloo.com</a><br>a2 CNAME <a href="http://a.ezloo.com" target="_blank" rel="noopener">a.ezloo.com</a><br>a3 CNAME <a href="http://a.ezloo.com" target="_blank" rel="noopener">a.ezloo.com</a><br>a A 111.222.111.222</p><p>我们访问a1（a2，a3）.ezloo.com的时候，域名解析服务器会返回一个CNAME记录，<a href="http://xn--a-4o6ap5qc3lbrf.ezloo.com" target="_blank" rel="noopener">并且指向a.ezloo.com</a>，然后我们的本地电脑会再发送一个请求，请求a.ezloo.com的解析，返回IP地址。</p><p>当我们要指向很多的域名到一台电脑上的时候，用CNAME比较方便，就如上面的例子，我们如果服务器更换IP了，我们只要更换a.ezloo.com的A记录即可。</p><p>在命令行下可以使用nslookup -qt=cname a.ezloo.com来查看CNAME记录。</p><h2 id="txt记录"><a class="markdownIt-Anchor" href="#txt记录"></a> TXT记录</h2><p>TXT记录一般是为某条记录设置说明，比如你新建了一条a.ezloo.com的TXT记录，TXT记录内容&quot;this is a test TXT record.&quot;，然后你用 nslookup -qt=txt <a href="http://a.ezloo.com" target="_blank" rel="noopener">a.ezloo.com</a> ，你就能看到&quot;this is a test TXT record&quot;的字样。</p><p>除外，TXT还可以用来验证域名的所有，比如你的域名使用了Google的某项服务，Google会要求你建一个TXT记录，然后Google验证你对此域名是否具备管理权限。</p><p>在命令行下可以使用nslookup -qt=txt a.ezloo.com来查看TXT记录。</p><h2 id="aaaa记录"><a class="markdownIt-Anchor" href="#aaaa记录"></a> AAAA记录</h2><p>AAAA记录是一个指向IPv6地址的记录。</p><p>可以使用nslookup -qt=aaaa a.ezloo.com来查看AAAA记录。</p><h2 id="ns记录"><a class="markdownIt-Anchor" href="#ns记录"></a> NS记录</h2><p>NS记录是域名服务器记录，用来指定域名由哪台服务器来进行解析。可以使用nslookup -qt=ns ezloo.com来查看。</p><h2 id="ttl值"><a class="markdownIt-Anchor" href="#ttl值"></a> TTL值</h2><p>TTL=time to live，表示解析记录在DNS服务器中的缓存时间。比如当我们请求解析<a href="https://www.ezloo.com/" target="_blank" rel="noopener">www.ezloo.com</a>的时候，DNS服务器发现没有该记录，就会下个NS服务器发出请求，获得记录之后，该记录在DNS服务器上保存TTL的时间长度。当我们再次发出请求解析<a href="https://www.ezloo.com/" target="_blank" rel="noopener">www.ezloo.com</a> 的时候，DNS服务器直接返回刚才的记录，不去请求NS服务器。TTL的时间长度单位是秒，一般为3600秒。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用域名记录解释&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常用域名记录解释&quot;&gt;&lt;/a&gt; 常用域名记录解释&lt;/h1&gt;
&lt;h2 id=&quot;a记录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#a记录&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="网络知识" scheme="https://nymrli.top/tags/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习笔记</title>
    <link href="https://nymrli.top/2019/09/17/Spring-Boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://nymrli.top/2019/09/17/Spring-Boot学习笔记/</id>
    <published>2019-09-17T09:01:40.000Z</published>
    <updated>2019-09-17T09:08:24.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-boot"><a class="markdownIt-Anchor" href="#spring-boot"></a> Spring Boot</h1><h2 id="hello-word"><a class="markdownIt-Anchor" href="#hello-word"></a> hello word</h2><p>第一个controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:demo </span></span><br><span class="line"><span class="comment"> * File Name:HelloController.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.example.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月15日下午8:27:56 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;cupsize&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String cupsize;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"hello"</span>,method= RequestMethod.GET)</span><br><span class="line"><span class="comment">//@GetMapping("/hello")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cupsize;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">5000</span></span><br><span class="line"><span class="comment">#  servlet:</span></span><br><span class="line"><span class="comment">#    context-path: /girl</span></span><br><span class="line"><span class="attr">cupsize:</span> <span class="string">B</span></span><br><span class="line"><span class="string">spring.datasource.url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/</span></span><br><span class="line"><span class="string">spring.datasource.username:</span> <span class="string">root</span> <span class="string">spring.datasource.password:</span> <span class="number">123456</span></span><br><span class="line"><span class="string">spring.datasource.driver-class-name:</span> <span class="string">com.mysql.jdbc</span></span><br></pre></td></tr></table></figure><h2 id="controller的使用"><a class="markdownIt-Anchor" href="#controller的使用"></a> Controller的使用</h2><p>@Controller处理http请求Spring4之后新加的注解，原来返回json</p><ul><li><p>需要返回模板,即<code>return “index”;</code></p><ul><li><p>需要在POM.XML中添加spring-boot-starter-thymeleaf的依赖</p></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>@RestController等价于&lt;==&gt;@Controller+@ResponseBody</p><ul><li>可以返回JSON格式</li></ul><p>@RequestMapping 配置url映射</p><ul><li><p>▲如果没有指定Method那么所有方式都可以</p></li><li><p>给某个方法指定url路由</p><p><code>@RequestMapping(value={&quot;/hello&quot;,&quot;/hil&quot;},method=RequestMethod.GET)</code></p></li><li><p>给整个class指定路由</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:demo </span></span><br><span class="line"><span class="comment"> * File Name:HelloController.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.example.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月15日下午8:27:56 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> GirlProperties girlProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/say"</span>, method= RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> girlProperties.getCupSize();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@RequestMapping(value=xxx,method=RequestMethod.GET)</code>等价于<code>XxxMapping</code></p><ul><li>GetMapping</li><li>PostMapping</li></ul></li><li><p>@PathVariable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/say/&#123;id&#125;"</span>, method= RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"id:"</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@RequestParam</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/say"</span>, method= RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Integer mid) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"id:"</span> + mid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/say"</span>, method= RequestMethod.GET)</span><br><span class="line"><span class="comment">// defaultValue值必须为String</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(@RequestParam(value=<span class="string">"id"</span>, required=<span class="keyword">false</span>, defaultValue=<span class="string">"0"</span>)</span> Integer mid) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"id:"</span> + mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据库管理"><a class="markdownIt-Anchor" href="#数据库管理"></a> 数据库管理</h2><p>JPA（Java Persistence APl）定义了一系列对象持久化的标准，目前实现这一规范的产品有Hibernate、TopLink等。</p><h3 id="启用jpa"><a class="markdownIt-Anchor" href="#启用jpa"></a> 启用JPA</h3><p>application.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//127.0.0.1:3306/dbgirl?characterEncoding=utf-8&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span></span><br><span class="line">    username: root</span><br><span class="line">    password: cl123123</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: create</span><br><span class="line">    show-sql: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h3 id="增删改查curd"><a class="markdownIt-Anchor" href="#增删改查curd"></a> 增删改查CURD</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:demo </span></span><br><span class="line"><span class="comment"> * File Name:Girl.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.example.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月16日下午6:34:14 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span> </span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String cupSize;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Girl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCupSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cupSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCupSize</span><span class="params">(String cupSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cupSize = cupSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"&#123;\"id\":\""</span> + id + <span class="string">"\",\"cupSize\":\""</span> + cupSize + <span class="string">"\",\"age\":\""</span> + age + <span class="string">"\"&#125;  "</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GirlControllr.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:demo </span></span><br><span class="line"><span class="comment"> * File Name:GirlController.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.example.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月17日下午3:44:06 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.DeleteMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PutMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GirlController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> GirlRepository girlRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(value= <span class="string">"/girls"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Girl&gt; <span class="title">girlList</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> girlRepository.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/girls"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Girl <span class="title">addGirl</span><span class="params">(@RequestParam(<span class="string">"cupSize"</span>)</span> String cupSize, </span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> Integer age) </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"cupsize"</span>+cupSize);</span><br><span class="line">Girl girl= <span class="keyword">new</span> Girl();</span><br><span class="line">girl.setCupSize(cupSize);</span><br><span class="line">girl.setAge(age);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> girlRepository.save(girl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(value=<span class="string">"/girls/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Girl <span class="title">girlFindOne</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> girlRepository.findById(id).get();</span><br><span class="line"><span class="comment">//return girlRepository.getOne(id); 无效，需要实例json</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping</span>(value=<span class="string">"/girls/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Girl <span class="title">girlUpdate</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id,</span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(<span class="string">"cupSize"</span>)</span> String cupSize, </span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> Integer age)  </span>&#123;</span><br><span class="line">Girl girl = <span class="keyword">new</span> Girl();</span><br><span class="line">girl.setId(id);</span><br><span class="line">girl.setAge(age);</span><br><span class="line">girl.setCupSize(cupSize);</span><br><span class="line"><span class="keyword">return</span> girlRepository.save(girl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping</span>(value=<span class="string">"/girls/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">girlDelete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">girlRepository.deleteById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(value=<span class="string">"/girls/age/&#123;age&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Girl&gt; <span class="title">girlListByAge</span><span class="params">(@PathVariable(<span class="string">"age"</span>)</span> Integer age)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> girlRepository.findByAge(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲注意.视频中的findOne已经被淘汰，因为springboot版本问题，新的版本不再支持findone(id)方法。</p><p>可用<code>findById(id).get()</code>或<code>getOne(id)</code>来替换，区别是前者当参数id为空时返回null，后者直接报异常，因为getOne返回的是对象的引用。</p><p>我试了下getOne会报错，据说是要设置json的返回格式？</p><h3 id="自定义搜索方式findbyage"><a class="markdownIt-Anchor" href="#自定义搜索方式findbyage"></a> 自定义搜索方式findByAge</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:demo </span></span><br><span class="line"><span class="comment"> * File Name:GirlRepository.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.example.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月17日下午3:44:33 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GirlRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Girl</span>, <span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Girl&gt; <span class="title">findByAge</span><span class="params">(Integer age)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库事务管理"><a class="markdownIt-Anchor" href="#数据库事务管理"></a> 数据库事务管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:demo </span></span><br><span class="line"><span class="comment"> * File Name:GirlController.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.example.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月17日下午3:44:06 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/girls/two"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">girlTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        girlService.insertTwo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:demo </span></span><br><span class="line"><span class="comment"> * File Name:GirlService.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.example.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月17日下午4:39:00 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GirlService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> GirlRepository girlRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Girl girlA = <span class="keyword">new</span> Girl();</span><br><span class="line">        girlA.setCupSize(<span class="string">"A"</span>);</span><br><span class="line">        girlA.setAge(<span class="number">18</span>);</span><br><span class="line">        girlRepository.save(girlA);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Girl girlB = <span class="keyword">new</span> Girl();</span><br><span class="line">        girlB.setCupSize(<span class="string">"BBBB"</span>);</span><br><span class="line">        girlB.setAge(<span class="number">19</span>);</span><br><span class="line">        girlRepository.save(girlB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目开发过程中，使用了Spring data jpa自动创建表。但是默认情况下，创建出来的表类型为MyISAM。</p><p>（MySQL数据库默认的存储引擎类型是MyISAM，这种存储引擎类型不支持事务处理。）改成InnoDB存储引擎会就可以了。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jpa:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">MYSQL</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br></pre></td></tr></table></figure><p>在navicat中数据库—&gt;表—&gt;单击表名，在右边可以出现表的所有信息</p><p><img src="/2019/09/17/Spring-Boot学习笔记/mysq%E5%AD%98%E5%82%A8l%E5%BC%95%E6%93%8E.jpg" alt="mysq存储l引擎"></p><p><a href="https://www.imooc.com/video/16357" target="_blank" rel="noopener">Spring Boot 2.0深度实践-初遇Spring Boot</a></p><ul><li>多模块：web、persistence、mdel</li><li>项目打包——多模块重构后</li></ul><h2 id="运行模式"><a class="markdownIt-Anchor" href="#运行模式"></a> 运行模式</h2><p>IDEA: 有图形界面的开发环境</p><p>JAR/WAR: 线上、服务器上的生产环境</p><ul><li><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mvn install </span><br><span class="line">$ <span class="built_in">cd</span> target</span><br><span class="line">$ java -jar</span><br></pre></td></tr></table></figure></li></ul><p>MAVEN插件: 无图形界面的开发环境</p><ul><li><code>mvn spring-boot:run</code></li></ul><h2 id="热加载"><a class="markdownIt-Anchor" href="#热加载"></a> 热加载：</h2><p>pom.xml中加上依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>热部署:</p><p>就是容器状态在运行的情况下重新部署整个项目.在这种情况下一般整个内存会清空,重新加载.简单来说就是Tomcat或者其他的web服务器会帮我们重新加载项目.这种方式可能会造成sessin丢失等情况.</p><p>热加载:</p><p>就是容器状态在运行的情况下重新加载改变编译后的类.在这种情况下内存不会清空,sessin不会丢失,但容易造成内存溢出,或者找不到方法。因为内存无法转变成对像.一般改变类的结构和模型就会有异常，在已经有的变量和方法中改变是不会出问题的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring-boot&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#spring-boot&quot;&gt;&lt;/a&gt; Spring Boot&lt;/h1&gt;
&lt;h2 id=&quot;hello-word&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;
      
    
    </summary>
    
    
      <category term="后端" scheme="https://nymrli.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Java" scheme="https://nymrli.top/tags/Java/"/>
    
      <category term="Web" scheme="https://nymrli.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>如何成为一位老司机——考驾照经历</title>
    <link href="https://nymrli.top/2019/09/14/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%BD%8D%E8%80%81%E5%8F%B8%E6%9C%BA%E2%80%94%E2%80%94%E8%80%83%E9%A9%BE%E7%85%A7%E7%BB%8F%E5%8E%86/"/>
    <id>https://nymrli.top/2019/09/14/如何成为一位老司机——考驾照经历/</id>
    <published>2019-09-14T04:32:33.000Z</published>
    <updated>2019-09-15T08:07:31.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何成为一位老司机考驾照经历"><a class="markdownIt-Anchor" href="#如何成为一位老司机考驾照经历"></a> 如何成为一位老司机——考驾照经历</h1><p>大一下报的名，几经转折，终于在2019-9-12，中秋放假前一天拿到了本本。</p><h2 id="科一理论考试"><a class="markdownIt-Anchor" href="#科一理论考试"></a> 科一理论考试</h2><p>太久远了，已经忘记了…</p><h2 id="科二"><a class="markdownIt-Anchor" href="#科二"></a> 科二</h2><h3 id="训练"><a class="markdownIt-Anchor" href="#训练"></a> 训练</h3><h4 id="倒车入库"><a class="markdownIt-Anchor" href="#倒车入库"></a> 倒车入库：</h4><p>左边小镜子底座盖过黄线，向左打死。<br>正手倒车时，靠近左边直角距离3个手指回正，然后看左边镜子出现直角，然后。<br>左手是一到二指头。</p><p>▲入库重在自己调整，记住准则：左右镜子，哪边空隙大，方向盘往哪边打</p><h4 id="小四项"><a class="markdownIt-Anchor" href="#小四项"></a> 小四项：</h4><h5 id="直角转弯"><a class="markdownIt-Anchor" href="#直角转弯"></a> 直角转弯:</h5><ul><li>人在路中间，直角重合于车窗黑线后向左打死。</li></ul><h5 id="s弯道"><a class="markdownIt-Anchor" href="#s弯道"></a> S弯道：</h5><ul><li>确保人在路中间，可以略微偏左。左边小镜子底座压住右边黄线。方向盘一圈右手放在2点方向。如果黄线偏下，那么往1点方向调整，否则往3点方向调整。然后保持到车头中间碰到左边黄线回正；然后向前一小段距离，使得右边镜子与黄线只差一条线的距离，然后向右一圈，左手11点，保持小镜子与黄线夹角是钝角，然后一直保持到项目结束。</li></ul><h5 id="坡道停车"><a class="markdownIt-Anchor" href="#坡道停车"></a> 坡道停车：</h5><ul><li>对准坡道上的黄线大约在车头的右边三分之一处。上去之后，保持黄线在小镜子的左边三分之一处，大约与车身成三角形，接近接触。</li></ul><h5 id="侧方停车"><a class="markdownIt-Anchor" href="#侧方停车"></a> 侧方停车：</h5><ul><li><p>车头盖过蓝线后看右边后视镜，到第二根白线在后视镜中央开始倒车，直至消失时，向右一圈到11点，然后保持直至右边的黄线跑到两个把手的中间时回正，接着看左边，头伸出一点，看后车轮压倒虚线时立马向左打死，然后直至车身完全进入。</p></li><li><p>出去时，左方向灯和换1档，缓速出来，等到车头中央碰到黄线时回正，然后稍微开个0.5s向后一圈左右，车身回正。</p></li></ul><p><a href="https://pan.baidu.com/s/1NKVIC6cgtvp_8tGO4pk2xw" target="_blank" rel="noopener">视频资源——SXH科二教练</a>,提取码：gvqa</p><h3 id="考试"><a class="markdownIt-Anchor" href="#考试"></a> 考试</h3><p>我考的是6号线，也就是S弯结束后立马是直角的那条线。考试的直角给我的感觉是比谷峰训练的时候多很多，所以其实不用担心。至于这个S弯结束后立马是直角，根据模拟的时候开就行了，即出来就向右打死，然后开到路中间</p><h2 id="科三"><a class="markdownIt-Anchor" href="#科三"></a> 科三</h2><blockquote><p>灯光+上路行驶</p></blockquote><h3 id="训练-2"><a class="markdownIt-Anchor" href="#训练-2"></a> 训练</h3><h4 id="灯光"><a class="markdownIt-Anchor" href="#灯光"></a> 灯光</h4><p><img src="/2019/09/14/如何成为一位老司机——考驾照经历/kes2.jpg" alt="kes2"></p><h4 id="起步和靠边停车"><a class="markdownIt-Anchor" href="#起步和靠边停车"></a> 起步和靠边停车</h4><p><img src="/2019/09/14/如何成为一位老司机——考驾照经历/kes1.jpg" alt="kes1"></p><p>图片来自于科三教练——杨作栋</p><h3 id="考试-2"><a class="markdownIt-Anchor" href="#考试-2"></a> 考试</h3><p>科三比科二简单很多。科二10节课，科三只有8节也能说明一二。但感觉科三与科二最不同的地方是，科三记的点比科二自然很多。在转头看左右后视镜，我在临近考试的最后两天最后一节课上才练的，一开始觉得右边的后视镜为什么离得那么远，跑了两圈后就发现，看后视镜是件很自然的事，因为你就需要右边的信息。</p><p>而在考试过程中，虽然有安全员在旁边，可能会比科二紧张一些，但是整体上来讲，科三还是很容易的，只要记得，每次完成一个东西后，左右看后视镜基本上就行了。</p><p>▲.我考试的时候，前面有个挂了的人倒是补上了我一个盲点，原来提示前方路口后，如果你打了右方向灯，那么接着往后看。之前我还以为只有真过路口、点刹的时候才需要。只不过面对这种现象，还是之前说的，不管做了什么，左右摇头就是了。</p><p>挂到五档也不用担心，我当时考试时有两条路的路况绝对算不上好，但是我一共还是3次挂到了五档，所以其实升挡的机会还是很多的。</p><p>最后，需要注意的是灯光一定不能错。我是第三个考的，第一个女生灯光挂了一次；第二个男生，起步没打左方向灯，也挂了。</p><h2 id="科四理论考试"><a class="markdownIt-Anchor" href="#科四理论考试"></a> 科四理论考试</h2><p>刷了1280道题，由于有10道多选题的存在，所以真正考试的时候还是比较慌的，一上来就错了两题，最终考了94.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何成为一位老司机考驾照经历&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#如何成为一位老司机考驾照经历&quot;&gt;&lt;/a&gt; 如何成为一位老司机——考驾照经历&lt;/h1&gt;
&lt;p&gt;大一下报的名，几经转折，终于在2019-9-12，中秋放假前一天拿到
      
    
    </summary>
    
    
      <category term="生活福利" scheme="https://nymrli.top/tags/%E7%94%9F%E6%B4%BB%E7%A6%8F%E5%88%A9/"/>
    
  </entry>
  
</feed>
