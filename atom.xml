<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>果粒橙的博客</title>
  
  <subtitle>别装作很努力，因为结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2019-01-23T02:17:44.466Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>果粒橙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python中对时间戳、时间的处理</title>
    <link href="https://nymrli.top/2019/01/23/Python%E4%B8%AD%E5%AF%B9%E6%97%B6%E9%97%B4%E6%88%B3%E3%80%81%E6%97%B6%E9%97%B4%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>https://nymrli.top/2019/01/23/Python中对时间戳、时间的处理/</id>
    <published>2019-01-23T02:17:34.000Z</published>
    <updated>2019-01-23T02:17:44.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python中对时间戳、时间的处理"><a href="#Python中对时间戳、时间的处理" class="headerlink" title="Python中对时间戳、时间的处理"></a>Python中对时间戳、时间的处理</h1><h2 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h2><h3 id="获得时间戳"><a href="#获得时间戳" class="headerlink" title="获得时间戳"></a>获得时间戳</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timestmamp = time.time()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="comment"># 1548208280.4581678</span></span><br></pre></td></tr></table></figure><h3 id="将时间戳转换成时间"><a href="#将时间戳转换成时间" class="headerlink" title="将时间戳转换成时间"></a>将时间戳转换成时间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">timestamp = <span class="number">1462451334</span></span><br><span class="line">timeArr = time.localtime(timestamp) <span class="comment"># 转换成时间数组</span></span><br><span class="line">print(timeArr)</span><br><span class="line"><span class="comment"># &gt;&gt;&gt;time.struct_time(tm_year=2016, tm_mon=5, tm_mday=5, tm_hour=20, tm_min=28, tm_sec=54, tm_wday=3, tm_yday=126, tm_isdst=0)</span></span><br><span class="line">dt = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,timeArr) <span class="comment"># 指定转换成时间格式</span></span><br><span class="line">print(dt)</span><br></pre></td></tr></table></figure><h2 id="将时间转换成时间戳"><a href="#将时间转换成时间戳" class="headerlink" title="将时间转换成时间戳"></a>将时间转换成时间戳</h2><ul><li>利用<code>strptime()</code>函数将时间转换成时间数组</li><li>利用<code>mktime()</code>函数将时间数组转换成时间戳</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">dt = <span class="string">"2016-05-05 20:28:54"</span></span><br><span class="line">timeArray = time.strptime(dt, <span class="string">"%Y-%m-%d %H:%M:%S"</span>) <span class="comment">#转换成时间数组</span></span><br><span class="line">timestamp = time.mktime(timeArray) <span class="comment">#转换成时间戳</span></span><br><span class="line"><span class="keyword">print</span> (timestamp)</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; 1462451334.0</span></span><br></pre></td></tr></table></figure><h2 id="重新格式化时间"><a href="#重新格式化时间" class="headerlink" title="重新格式化时间"></a>重新格式化时间</h2><ul><li>利用<code>strptime()</code>函数将时间转换成时间数组</li><li>利用<code>strftime()</code>函数重新格式化时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">dt = <span class="string">"2016-05-05 20:28:54"</span></span><br><span class="line">timeArray = time.strptime(dt, <span class="string">"%Y-%m-%d %H:%M:%S"</span>) </span><br><span class="line"><span class="comment">#转换成时间数组</span></span><br><span class="line">dt_new = time.strftime(<span class="string">"%Y%m%d-%H:%M:%S"</span>,timeArray) </span><br><span class="line"><span class="comment">#转换成新的时间格式(20160505-20:28:54)</span></span><br><span class="line"><span class="keyword">print</span> (dt_new)</span><br></pre></td></tr></table></figure><h2 id="按指定的格式获取当前时间"><a href="#按指定的格式获取当前时间" class="headerlink" title="按指定的格式获取当前时间"></a>按指定的格式获取当前时间</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前时间</span></span><br><span class="line">time_now = int(time.time()) </span><br><span class="line">time_local = time.localtime(time_now)<span class="comment"># 转换成localtime</span></span><br><span class="line">dt = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,time_local)</span><br><span class="line"><span class="comment"># 转换成新的时间格式(2016-05-09 18:59:20)</span></span><br><span class="line">print(dt)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python中对时间戳、时间的处理&quot;&gt;&lt;a href=&quot;#Python中对时间戳、时间的处理&quot; class=&quot;headerlink&quot; title=&quot;Python中对时间戳、时间的处理&quot;&gt;&lt;/a&gt;Python中对时间戳、时间的处理&lt;/h1&gt;&lt;h2 id=&quot;time模
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Sublmie 没有输出结果问题解决</title>
    <link href="https://nymrli.top/2019/01/22/Sublmie-%E6%B2%A1%E6%9C%89%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://nymrli.top/2019/01/22/Sublmie-没有输出结果问题解决/</id>
    <published>2019-01-22T15:05:20.000Z</published>
    <updated>2019-01-22T15:09:09.957Z</updated>
    
    <content type="html"><![CDATA[<p>无论是<code>Python</code>或者<code>C/C++</code>程序按<code>Ctrl+b</code>后运行没有输出。发现是编译选项出了问题。</p><p>解决方法如下：</p><p>按下<code>Ctrl +Shift + b</code>选择编译方法，光标移到有<code>Run</code>的选项,再按<code>Ctrl+b</code>编译</p><p><img src="/2019/01/22/Sublmie-没有输出结果问题解决/1.jpg" alt="1"></p><p>成功如图~</p><p><img src="/2019/01/22/Sublmie-没有输出结果问题解决/2.jpg" alt="2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;无论是&lt;code&gt;Python&lt;/code&gt;或者&lt;code&gt;C/C++&lt;/code&gt;程序按&lt;code&gt;Ctrl+b&lt;/code&gt;后运行没有输出。发现是编译选项出了问题。&lt;/p&gt;
&lt;p&gt;解决方法如下：&lt;/p&gt;
&lt;p&gt;按下&lt;code&gt;Ctrl +Shift + b&lt;/code&gt;
      
    
    </summary>
    
    
      <category term="Sublime" scheme="https://nymrli.top/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>基础网络知识</title>
    <link href="https://nymrli.top/2019/01/22/%E5%9F%BA%E7%A1%80%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    <id>https://nymrli.top/2019/01/22/基础网络知识/</id>
    <published>2019-01-22T11:31:47.000Z</published>
    <updated>2019-01-23T03:36:25.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是客户端、服务器端"><a href="#什么是客户端、服务器端" class="headerlink" title="什么是客户端、服务器端?"></a>什么是客户端、服务器端?</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端 :"></a>客户端 :</h3><p>​    发送数据、接收返回数据端</p><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器:"></a>服务器:</h3><p>​    处理数据端</p><hr><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP :"></a>TCP :</h2><p>面向连接—&gt; 打电话(相互回复,一来一回)</p><p>客户端向服务器端 拨号 , 三次握手 , </p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP :"></a>UDP :</h2><p>面向无连接 –&gt; 寄快递(寄出去就不管了).   比如 : 直播</p><h3 id="UDP四层结构"><a href="#UDP四层结构" class="headerlink" title="UDP四层结构"></a>UDP四层结构</h3><ul><li><p>网络访问层(链路层):  <strong>物理连接设备</strong>(网线)、<strong>MAC地址</strong>（物理地址）</p></li><li><p>互联网层： <strong>IP地址</strong>（定位设备）</p></li><li><p>传输层： <strong>port</strong> (端口号) : 表示通信进程,将数据交给哪个应用处理</p></li><li><p>应用层： 自己定义的协议（处理字符串消息的方法）</p></li></ul><h4 id="port"><a href="#port" class="headerlink" title="port :"></a>port :</h4><p> 知名端口 : 0 - 1023，有指定的应用程序</p><p>可自由使用的端口 : 1024 - 65535</p><p>▲广播只能使用<strong>UDP</strong>，TCP没有广播功能。一般广播只用在局域网内（路由器不转发广播）。</p><hr><h2 id="套接字-socket-："><a href="#套接字-socket-：" class="headerlink" title="套接字(socket) ："></a>套接字(socket) ：</h2><p>特殊的设备文件 ， 写网络应用程序的接口，写入后就是发送，接收就是读取。 应该类似于 esp8266吧…</p><h2 id="Python演示程序"><a href="#Python演示程序" class="headerlink" title="Python演示程序"></a>Python演示程序</h2><h3 id="服务器端程序"><a href="#服务器端程序" class="headerlink" title="服务器端程序"></a>服务器端程序</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">参数说明:</span></span><br><span class="line"><span class="string">AF_INET IPv4</span></span><br><span class="line"><span class="string">STREAM TCP</span></span><br><span class="line"><span class="string">SOCK_DGRAM UDP</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">server_addr = (<span class="string">'127.0.0.1'</span>,<span class="number">8888</span>)    <span class="comment"># 本地回环地址 , 端口</span></span><br><span class="line">s.bind(server_addr)                                    <span class="comment"># 绑定、传入信息</span></span><br><span class="line">data,cilent_addr = s.recvfrom(<span class="number">1024</span>)        <span class="comment"># BUF_SIZE指定接收数据长度 , (数据内容,客户端地址)</span></span><br><span class="line">s.sendto(data,cilent_addr)                        <span class="comment"># 给客户端发送数据</span></span><br></pre></td></tr></table></figure><h3 id="客户端程序"><a href="#客户端程序" class="headerlink" title="客户端程序"></a>客户端程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM) </span><br><span class="line">server_addr = (<span class="string">'192.168.43.3'</span>,<span class="number">8888</span>)</span><br><span class="line">s.sendto(<span class="string">b'hello'</span>,server_addr)</span><br></pre></td></tr></table></figure><h3 id="广播程序"><a href="#广播程序" class="headerlink" title="广播程序"></a>广播程序</h3><blockquote><p><code>255.255.255.255</code>为广播地址</p></blockquote><p>广播端接收程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">PORT = <span class="number">9999</span></span><br><span class="line">s.bind( (<span class="string">''</span>, PORT) )</span><br><span class="line"><span class="comment"># 这边必须是'',不能为自己的IP(否则只接受自己IP的,不接受255.255.255.2555的广播)</span></span><br><span class="line">print(<span class="string">'Listening for broadcast at '</span>, s.getsockname())</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    data, address = s.recvfrom(<span class="number">65535</span>)</span><br><span class="line">    print(<span class="string">'Server received from &#123;&#125;:&#123;&#125;'</span>.format(address, data.decode(<span class="string">'utf-8'</span>)))</span><br></pre></td></tr></table></figure><p>广播发送程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket </span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.setsockopt(socket.SOL_SOCKET,socket.SO_BROADCAST,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 创建套接字,UDP默认没有广播权限</span></span><br><span class="line">PORT = <span class="number">9999</span></span><br><span class="line">network = <span class="string">'&lt;broadcast&gt;'</span></span><br><span class="line"><span class="comment"># &lt;==&gt; network = '255.255.255.255'</span></span><br><span class="line">s.sendto(<span class="string">b'hel'</span>,(network,PORT))</span><br></pre></td></tr></table></figure><hr><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展 :"></a>拓展 :</h2><p><strong>大端和小端模式的概念</strong></p><p>网络通信时 通常使用大端</p><hr><p>Linxu下<code>ifconfig</code>命令:</p><ul><li><p>eth0     网卡</p></li><li><p>wlan0  无线网卡</p></li></ul><hr><p>偶然发现<strong>安卓</strong>开热点的局域网地址是<code>192.18.x.x</code>，而<strong>苹果</strong>的热点局域网IP地址是<code>172.20.x.x</code>，于是搜了了解下</p><ol><li>192.168网段是一种私有IP地址网段，任何人在私有网络中都可以任意使用这些IP地址，但是如果要连接<a href="https://www.baidu.com/s?wd=%E5%A4%96%E7%BD%91&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">外网</a>就要使用<a href="https://www.baidu.com/s?wd=%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">网络地址转换</a>NAT技术进行转换后才能连接<a href="https://www.baidu.com/s?wd=%E5%A4%96%E7%BD%91&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">外网</a>；</li><li>在宽带<a href="https://www.baidu.com/s?wd=%E8%B7%AF%E7%94%B1%E5%99%A8&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">路由器</a>上一般默认的内网IP地址为192.168.0或192.168.1网段，它是经过<a href="https://www.baidu.com/s?wd=%E8%B7%AF%E7%94%B1%E5%99%A8&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">路由器</a>的NAT技术转换为<a href="https://www.baidu.com/s?wd=WAN%E6%8E%A5%E5%8F%A3&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">WAN接口</a>的公用IP地址而连接<a href="https://www.baidu.com/s?wd=%E5%A4%96%E7%BD%91&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">外网</a>的；</li><li>这样的私有IP地址除了这个网段外，还有B类网络的172.16-172.31及A类网络的10网段都是私有IP地址。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是客户端、服务器端&quot;&gt;&lt;a href=&quot;#什么是客户端、服务器端&quot; class=&quot;headerlink&quot; title=&quot;什么是客户端、服务器端?&quot;&gt;&lt;/a&gt;什么是客户端、服务器端?&lt;/h2&gt;&lt;h3 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="计算机网络知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter使用</title>
    <link href="https://nymrli.top/2019/01/21/Jupyter%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2019/01/21/Jupyter使用/</id>
    <published>2019-01-21T02:46:56.000Z</published>
    <updated>2019-01-21T03:19:14.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>安装<code>pip install jupyter</code></p><p>运行<code>jupyter notebook</code></p><hr><h2 id="基础概念与操作"><a href="#基础概念与操作" class="headerlink" title="基础概念与操作"></a>基础概念与操作</h2><p>Jupyter有三种类型的cells：</p><ul><li>code cells</li><li>markdown cells</li><li>raw cells</li><li>常用的是<code>code cells</code>和 <code>markdown cells</code>类型。</li></ul><hr><p>Cells状态分为<strong>命令模式</strong>和<strong>编辑模式</strong>，Enter进入编辑模式，ESC进入命令模式，命令模式和编辑模式下支持很多操作快捷键，非常好用。</p><h3 id="常用命令模式快捷键："><a href="#常用命令模式快捷键：" class="headerlink" title="常用命令模式快捷键："></a><strong>常用命令模式快捷键：</strong></h3><blockquote><p>y: 单元进入代码状态</p><p>m: 转入markdown状态</p><p>r：转入raw状态</p><p>a: 上方插入新单元</p><p>b：下方插入新单元</p><p>x：剪切选中单元</p><p>c: 复制选中单元</p><p>shift-v：粘贴到上方单元</p><p>v：粘贴到下方单元</p><p>d,d（连续按两次d）:删除选中单元</p><p>z：恢复最后删除单元</p><p>ctrl+Enter:运行本单元，两种模式都适用</p><p>shift+Enter：运行本单元，并跳到下个单元，两种模式都适用</p><p>alt+Enter：运行本单元，并在下方插入新单元，两种模式都适用</p></blockquote><h3 id="常用编辑模式快捷键："><a href="#常用编辑模式快捷键：" class="headerlink" title="常用编辑模式快捷键："></a><strong>常用编辑模式快捷键：</strong></h3><blockquote><p>Tab：代码补齐或缩进</p><p>Shift+Tab：调用方法提示，非常有用，在调用包中函数时，对于函数中的使用说明和相关参数配置，按两次shift+Tab可获取详细的方法提示。</p><p>Ctrl+]：缩进</p><p>Ctrl+[ : 解除缩进</p><p>Ctrl+A: 全选</p><p>Ctrl+Backspace：删除光标前面本行所有的内容</p><p>Ctrl+Delete:删除光标后本行所有的内容</p><p>Shift+Home：往前选取本行所有内容</p><p>Shift+End：往后选取本行所有内容；</p></blockquote><h3 id="执行当前cell，并自动跳到下一个cell：Shift-Enter"><a href="#执行当前cell，并自动跳到下一个cell：Shift-Enter" class="headerlink" title="执行当前cell，并自动跳到下一个cell：Shift Enter"></a>执行当前cell，并自动跳到下一个cell：Shift Enter</h3><h3 id="执行当前cell，执行后不自动调转到下一个cell：Ctrl-Enter"><a href="#执行当前cell，执行后不自动调转到下一个cell：Ctrl-Enter" class="headerlink" title="执行当前cell，执行后不自动调转到下一个cell：Ctrl-Enter"></a>执行当前cell，执行后不自动调转到下一个cell：Ctrl-Enter</h3><h3 id="载入代码"><a href="#载入代码" class="headerlink" title="载入代码"></a>载入代码</h3><p><code>%load /Users/chenqionghe/test.py</code></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="jupyter-notebook-写代码自动补全"><a href="#jupyter-notebook-写代码自动补全" class="headerlink" title="jupyter notebook 写代码自动补全"></a>jupyter notebook 写代码自动补全</h3><p>进入命令行环境，有两种方式进入命令行。</p><ul><li>方法1：通过anconda navigator界面，选择environments，选择对应环境名，选择open terminal</li><li>方法2：直接使用cmd或者terminal等终端进入命令行。激活你想要配置代码补全的环境（如果是默认环境不用激活）</li></ul><h4 id="1-安装nbextensions"><a href="#1-安装nbextensions" class="headerlink" title="1.安装nbextensions"></a>1.安装<strong>nbextensions</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pip install jupyter_contrib_nbextensions -i https://pypi.mirrors.ustc.edu.cn/simple</span><br><span class="line"><span class="meta">$</span> jupyter contrib nbextension install --user</span><br></pre></td></tr></table></figure><h4 id="2-安装nbextensions-configurator"><a href="#2-安装nbextensions-configurator" class="headerlink" title="2.安装nbextensions_configurator"></a>2.安装<strong>nbextensions_configurator</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pip install --user jupyter_nbextensions_configurator </span><br><span class="line"><span class="meta">$</span> jupyter nbextensions_configurator enable --user</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="/2019/01/21/Jupyter使用/补全.jpg" alt="补全"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;p&gt;安装&lt;code&gt;pip install jupyter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;运行&lt;code&gt;jupyter notebook&lt;/co
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>河海大学AI+机器人冬令营(12-26)</title>
    <link href="https://nymrli.top/2019/01/19/%E6%B2%B3%E6%B5%B7%E5%A4%A7%E5%AD%A6AI-%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%86%AC%E4%BB%A4%E8%90%A5/"/>
    <id>https://nymrli.top/2019/01/19/河海大学AI-机器人冬令营/</id>
    <published>2019-01-19T14:31:19.000Z</published>
    <updated>2019-01-22T14:07:00.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="河海大学AI-机器人冬令营-12-26"><a href="#河海大学AI-机器人冬令营-12-26" class="headerlink" title="河海大学AI+机器人冬令营(12-26)"></a>河海大学AI+机器人冬令营(12-26)</h1><h2 id="The-First-Day-19"><a href="#The-First-Day-19" class="headerlink" title="The First Day~19"></a>The First Day~19</h2><p>11:50和CXY从学校出发，坐地铁的途中感觉比想象中舒服多了，没有很多挤着急着回家的学生党。</p><h3 id="宾馆打卡"><a href="#宾馆打卡" class="headerlink" title="宾馆打卡"></a>宾馆打卡</h3><p>13:30到尚客优宾馆，环境挺好。还有个办公桌,很舒服。</p><p><img src="/2019/01/19/河海大学AI-机器人冬令营/19\1.jpg" alt="1"></p><p>在房间里待到了大概3点，人都差不多到齐了以后，河海的负责人张老师带领我们去了河海大学。</p><h3 id="校门口打卡"><a href="#校门口打卡" class="headerlink" title="校门口打卡"></a>校门口打卡</h3><p><img src="/2019/01/19/河海大学AI-机器人冬令营/19\2.jpg" alt="2"></p><p>计软院的副院长、该活动的负责人幽默、诙谐地给我讲了讲活动背景、及要求和合作的机器人公司<u>优必选</u>。</p><p>下面是机器人表演舞蹈串烧的照片。关节自由多真的很多啊….很多很难的动作~</p><p><img src="/2019/01/19/河海大学AI-机器人冬令营/19\3.jpg" alt="3"></p><p>介绍环节大约在4点就结束了。之后是在图书馆门口的签名墙上花费了巨大的时间，每个人都单独拍了两次照，说是要给我们留在纪念册上，很期待呢。</p><p>100号人拍完照已经是5：30左右了，拿到饭票后，院长就带我们前往了食堂。平常的学生食堂似乎已经关门了，接待我们的是一个据说连河海本校学生也不知道的xx食堂。</p><h3 id="食堂打卡"><a href="#食堂打卡" class="headerlink" title="食堂打卡"></a>食堂打卡</h3><p>大家围在圆桌上等饭吃，^_^</p><p><img src="/2019/01/19/河海大学AI-机器人冬令营/19\4.jpg" alt="4"></p><p>饭终于上来了O(∩_∩)O，两荤一小荤+两素，水果+酸奶的组合已经非常不错了，下午3点才吃午饭的我，表示强行吃完这些后撑得不行。</p><p><img src="/2019/01/19/河海大学AI-机器人冬令营/19\5.jpg" alt="5"></p><p>吃完后，负责人告诉我们可以回去了。找到了南邮的其他人，我们就浩浩荡荡地回宾馆了，河海的新校区很大，给我的感觉跟南理工一样，但南理工由于居民区的存在可能显得更热闹点，放假的河海闲的挺冷清的。天黑的很快，我们开着导航，最终成功回到了宾馆。</p><p><img src="/2019/01/19/河海大学AI-机器人冬令营/19\6.jpg" alt="6"></p><p>19号的活动大致就结束了。</p><hr><h2 id="The-Second-Day-20"><a href="#The-Second-Day-20" class="headerlink" title="The Second Day~20"></a>The Second Day~20</h2><p>冬令营今天算正式开营，7:30要求在宾馆集合。床挺软的，睡得还行，早上却被一个不太好的梦在大约6:50做哟与惊醒，但还是在床上黏到了7：15的闹钟响。起了后以为应该算早的了，但最后在7：31的时候才弄好，到了一楼大厅，发现很多人都已经到了，看来大家的热情还很高涨。老师也很干脆利落，7:33就直接出发去学校了。</p><p>7:33出发，到河海的校门口大约在7:40左右。<em>冬青食堂</em>在学校的西北角，要走进去很多，到的时候约为7:50。比规定的时间8:10早到了15分钟，结果我们100号人就在食堂门口等了大约15分钟QAQ。</p><p>事实证明应该不需要这么早集合！</p><p>早上是包子+稀饭，配上少许的拌饭菜–咸菜，早餐就算勉强吃完了。</p><h3 id="教学楼打卡"><a href="#教学楼打卡" class="headerlink" title="教学楼打卡"></a>教学楼打卡</h3><p>早上9:00上课，非常准时。</p><p>上午的任务是组装好机器人，是个挺有逼格的机器人。从开箱到拼装，都交给我们完成了。据说这个是卖2W+的教育类机器人，顺丰快递单上表明的价格似乎是20W，运费都要110+。</p><p><em>开箱</em></p><p><img src="/2019/01/19/河海大学AI-机器人冬令营/20\9.jpg" alt="9"></p><p><em>组成</em></p><p><img src="/2019/01/19/河海大学AI-机器人冬令营/20\8.jpg" alt="8"></p><p><em>终于拼好了</em></p><p><img src="/2019/01/19/河海大学AI-机器人冬令营/20\1.jpg" alt="1"></p><p><img src="/2019/01/19/河海大学AI-机器人冬令营/20\2.jpg" alt="2"></p><p>与机器人交互需要连接WIFI和蓝牙，又折腾了好久才终于连上，期间我的同伴还错连了一个女生的机器人，瞎几把按了几个好玩的东西，引得女生大吼：“谁连了我的机器人啊”。</p><p>玩了玩几个高难度动作：单手俯卧撑、舞蹈串烧……就11:30了，上午的授课就算结束了。</p><h3 id="仍是食堂打卡"><a href="#仍是食堂打卡" class="headerlink" title="仍是食堂打卡"></a>仍是食堂打卡</h3><p>水果换成了小橘子，肯定没有香蕉好吃啦，期望明天是苹果^_^</p><p><img src="/2019/01/19/河海大学AI-机器人冬令营/20\6.jpg" alt="6"></p><p>档案袋资料,在上午结束后发的。但开营式还要等河海的领导到齐后才能开，大约定在了明天21号的下午。</p><p><em>档案袋</em></p><p><img src="/2019/01/19/河海大学AI-机器人冬令营/20\7.jpg" alt="7"></p><p><em>学员卡</em></p><p><img src="/2019/01/19/河海大学AI-机器人冬令营/20\5.jpg" alt="5"></p><p>下午讲了很久的<code>Linux</code>的基础知识。=.=很无聊啊，我连《机器学习Python实践》一本书都快读完了。</p><p>下午5:30挺准时下课的，6:30就要上课了，所以只好直接去食堂就餐了。</p><p>晚上6:30开始教授的是<code>vim的</code>基本操作，小测是让我们用VIM写个C程序编译，然后在最后结束的时候让我们10个人组个组，一起学习。队名、口号想了很久，最后很鸡贼的选了<strong>yeah</strong>当口号，<strong>不如跳舞</strong>是我们的队名。</p><p>表上说是7:30结束的，到最后，我们组是最后一个完成的，时间已经是8:30了。到宾馆几乎9点。</p><p>解决了<code>Markdown</code>的渲染问题<code>TypeError: Cannot set property &#39;lastIndex&#39; of undefined</code></p><p>再码码代码也就休息了，希望今天能睡个好觉~</p><hr><h2 id="The-Third-Day-21"><a href="#The-Third-Day-21" class="headerlink" title="The Third Day~21"></a>The Third Day~21</h2><p>早上还是很早就醒了，不知道为什么睡不深。</p><p>走的时候看了一下档案袋，想到了下午有开幕式，结果还是忘记了带<strong>营员证</strong>，结果只好中午吃饭后跑回来拿。</p><p>早上吃的是还是豆浆、粥，肉包，与昨天不同的是，菜包已经没了，很有可能是大家都不爱吃，最后剩下了很多。虽然肉包的皮也很厚，但毕竟是个肉吧2333。还多了<strong>油条</strong>，<strong>辣榨菜</strong>，这两个是我比较喜欢吃的，配粥很下饭。</p><p>上午，在调呼吸灯，感觉记忆力退化的很厉害，当初的PWM现在已经都不太会了。调了挺久，到中午吃饭的时候，才调出来。</p><p>下午，主要在看<code>MMDR_N4</code>的算法，总算厘清了思路，可以直接用了。授课方面的话介绍的是舵机的使用，只不过由于机器人用的是数字舵机，操作比较方便，再加上API封装的比较好，完成的就很轻松，不需要自己手写PWM。</p><p>在两点的时候，凑齐了各方的领导，终于在图书馆举办了开幕式。</p><p><img src="/2019/01/19/河海大学AI-机器人冬令营/21\1.jpg" alt="1"></p><p><img src="/2019/01/19/河海大学AI-机器人冬令营/21\2.jpg" alt="2"></p><p>结束的还挺迅速的，稍微玩了下手机就结束了。</p><p>晚上的任务是完成布置的作业:</p><blockquote><p>金鸡独立：</p><ul><li>保存机器人初始的舵机状态</li><li>控制舵机的方式实现金鸡独立（腿抬高，手臂动作）</li><li>站稳</li><li>恢复舵机状态</li></ul><p>使用APP上的回读编程，完成一个动作序列（可以加音乐）</p><ul><li>保存到机器人上，通过ubtRobotStartAction接口调用自己编排的动作</li></ul></blockquote><p>由于脚掌体积较大,所以将原来向后的动作加了个往前抬腿，转动脚踝的动作，使得平衡出了很大的问题，最终弄到9点都还没弄完，只好留到第二天完成了。</p><p>回到宾馆后，跟活动室的学长们视频了一波，汇报了一下进度和了解了下他们的情况，最后将看的MMDR_N4抽出，写了个文档，睡觉的时候都快11:30了。今天睡得比较晚了。</p><h2 id="The-Fourth-Day-22"><a href="#The-Fourth-Day-22" class="headerlink" title="The Fourth Day~22"></a>The Fourth Day~22</h2><p>早上7:15的闹钟,黏了7分钟才起。隔天没Debug出来，睡的也比较晚，导致起的时候非常的疲倦。所幸的是，我们到楼下时发现老师还没来，大部队也还没走。等了好几分钟，看老师还没来，就带头直接去食堂了。早餐不同的是<strong>桃酥饼</strong>，和<strong>萝卜丝馅饼</strong>，吃完之后才收到老师的消息，得知老师也没爬起来。</p><p>上午介绍的是机器人的五个传感器的使用，主要是使用它提供的Api。传感器有： 压力、触摸、超声波、红外、气温气压。这些都比较基础，就一直在看<code>optimization</code>里的优化细节。WDD问了下Andriod方面的需求，就花了时间整理了下思路，安排了人员。</p><p>下午据说有电视台采访，于是没怎么看Apollo的资料，认真调了下机器人的代码。就在准备展示我们的作品，上电视的时候，机器人的动作错了，导致没站稳直接摔到了。摄影小哥等我们调试了几分钟还没调好后，就放弃我们了:sob:</p><p>晚上跟前几天比结束的很早，讲了点TCP/UDP及网络的基础知识，让我们写了个UDP接收信息的程序就结束了。这方面感觉老师讲的还挺好的，经验、涉及面很丰富。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;河海大学AI-机器人冬令营-12-26&quot;&gt;&lt;a href=&quot;#河海大学AI-机器人冬令营-12-26&quot; class=&quot;headerlink&quot; title=&quot;河海大学AI+机器人冬令营(12-26)&quot;&gt;&lt;/a&gt;河海大学AI+机器人冬令营(12-26)&lt;/h1&gt;&lt;h2
      
    
    </summary>
    
    
      <category term="生活小记" scheme="https://nymrli.top/tags/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>DFS专项练习</title>
    <link href="https://nymrli.top/2019/01/19/DFS%E4%B8%93%E9%A1%B9%E7%BB%83%E4%B9%A0/"/>
    <id>https://nymrli.top/2019/01/19/DFS专项练习/</id>
    <published>2019-01-19T12:53:03.000Z</published>
    <updated>2019-01-19T12:53:26.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DFS专题"><a href="#DFS专题" class="headerlink" title="DFS专题"></a>DFS专题</h1><h3 id="leetcode-104-二叉树的最大深度"><a href="#leetcode-104-二叉树的最大深度" class="headerlink" title="leetcode 104. 二叉树的最大深度"></a>leetcode 104. 二叉树的最大深度</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l1=maxDepth(root-&gt;left);</span><br><span class="line">        <span class="keyword">int</span> l2=maxDepth(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> max(l1,l2)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="DFS模板总结"><a href="#DFS模板总结" class="headerlink" title="DFS模板总结"></a>DFS模板总结</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span><span class="comment">//参数用来表示状态  &#123;  </span></span></span><br><span class="line"><span class="function">    <span class="title">if</span><span class="params">(到达终点状态)</span>  </span>&#123;  </span><br><span class="line">        ...<span class="comment">//根据题意添加  </span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(越界或者是不合法状态)  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    <span class="keyword">if</span>(特殊状态)<span class="comment">//剪枝</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(扩展方式)  &#123;  </span><br><span class="line">        <span class="keyword">if</span>(扩展方式所达到状态合法)  </span><br><span class="line">        &#123;  </span><br><span class="line">            修改操作;<span class="comment">//根据题意来添加  </span></span><br><span class="line">            标记；  </span><br><span class="line">            dfs（）；  </span><br><span class="line">            (还原标记)；  <span class="comment">// visited[i] = 1;</span></span><br><span class="line">            <span class="comment">//是否还原标记根据题意  </span></span><br><span class="line">            <span class="comment">//如果加上（还原标记）就是 回溯法  </span></span><br><span class="line">            <span class="comment">// visited[i] = 0</span></span><br><span class="line">        &#125;  </span><br><span class="line"> </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全排列问题"><a href="#全排列问题" class="headerlink" title="全排列问题"></a>全排列问题</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> p[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x==n+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[i]==<span class="literal">false</span>  )</span><br><span class="line">&#123;</span><br><span class="line">p[x] = i;</span><br><span class="line">vis[i] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">dfs(x+<span class="number">1</span>);</span><br><span class="line">vis[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="number">4</span>;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DFS专题&quot;&gt;&lt;a href=&quot;#DFS专题&quot; class=&quot;headerlink&quot; title=&quot;DFS专题&quot;&gt;&lt;/a&gt;DFS专题&lt;/h1&gt;&lt;h3 id=&quot;leetcode-104-二叉树的最大深度&quot;&gt;&lt;a href=&quot;#leetcode-104-二叉树的最大深
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://nymrli.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Typora可选选项</title>
    <link href="https://nymrli.top/2019/01/19/Typora%E5%8F%AF%E9%80%89%E9%80%89%E9%A1%B9/"/>
    <id>https://nymrli.top/2019/01/19/Typora可选选项/</id>
    <published>2019-01-19T12:51:11.000Z</published>
    <updated>2019-01-19T12:52:14.319Z</updated>
    
    <content type="html"><![CDATA[<p>用了这么久<em>markdown</em>才发现原来支持Latex的符号公式，但是在Typera中需要自行设置出来，<code>文件--&gt;偏好设置--&gt;markdown拓展语法（内联公式）、代码块（显示行号）</code></p><ul><li>Latex 公式：$\frac{3}{2}​$</li><li>带有行号的代码块</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他功能自行发现吧！^_^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用了这么久&lt;em&gt;markdown&lt;/em&gt;才发现原来支持Latex的符号公式，但是在Typera中需要自行设置出来，&lt;code&gt;文件--&amp;gt;偏好设置--&amp;gt;markdown拓展语法（内联公式）、代码块（显示行号）&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Latex
      
    
    </summary>
    
    
      <category term="计算机基础知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Latex学习</title>
    <link href="https://nymrli.top/2019/01/19/Latex%E5%AD%A6%E4%B9%A0/"/>
    <id>https://nymrli.top/2019/01/19/Latex学习/</id>
    <published>2019-01-19T12:49:31.000Z</published>
    <updated>2019-01-20T13:56:04.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念和使用"><a href="#基本概念和使用" class="headerlink" title="基本概念和使用"></a>基本概念和使用</h1><h4 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello, world!"></a>Hello, world!</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">%这里是导言区</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">Hello, world!</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h5 id="请注意，TeX-对控制序列的大小写是敏感的"><a href="#请注意，TeX-对控制序列的大小写是敏感的" class="headerlink" title="请注意，TeX 对控制序列的大小写是敏感的"></a><strong>请注意，TeX 对控制序列的大小写是敏感的</strong></h5><h5 id="部分控制序列还有被方括号-包括的可选参数。"><a href="#部分控制序列还有被方括号-包括的可选参数。" class="headerlink" title="部分控制序列还有被方括号[]包括的可选参数。"></a>部分控制序列还有被方括号<code>[]</code>包括的可选参数。</h5><p>出现了控制序列 <code>begin</code>，这个控制序列总是与 <code>end</code> 成对出现。这两个控制序列以及他们中间的内容被称为「环境」；他们之后的第一个必要参数总是<strong>一致的</strong>，被称为环境名。</p><p>只有在 “document” 环境中的内容，才会被正常输出到文档中去或是作为控制序列对文档产生影响。也就是说，在 <code>\end{document}</code> 之后插入任何内容都是无效的。</p><p><code>\begin{document}</code> 与 <code>\documentclass{article}</code> 之间的部分被称为导言区。导言区中的控制序列，通常会影响到整个输出文档。</p><h4 id="输出中文"><a href="#输出中文" class="headerlink" title="输出中文"></a>输出中文</h4><p>使用命令行输入<code>texworks</code>打开tex编辑器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">你好，world!</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><ol><li>文档类从 <code>article</code> 变为 <code>ctexart</code>；</li><li>增加了文档类选项 <code>UTF8</code>。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\title&#123;你好，world!&#125;</span><br><span class="line">\author&#123;Liam&#125;</span><br><span class="line">\date&#123;\today&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\maketitle</span><br><span class="line">你好，world!</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h3 id="中文问题"><a href="#中文问题" class="headerlink" title="中文问题"></a>中文问题</h3><p>面对中文编码问题，CJK被淘汰，<strong>使用ctexart编译中文</strong></p><p>▲注意，编译方式必须改为<strong>xeLaTex</strong>，只有部分环境下 pdfLaTex 也可以编译成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">您可以看到，说明你编译成功了！</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h3 id="标准文类"><a href="#标准文类" class="headerlink" title="标准文类"></a>标准文类</h3><ul><li>article：短文，评论，学术论文；无左右页区分，无章设置。对应中文类ctexart。</li><li>book：著作，学位论文；默认有左右页区分，章起右页。对应中文类ctexbook。</li><li>report：商业，科技，试验报告，默认无左右页区分，章起新页。对应中文类：ctexrep。</li><li>beamer：论文陈述幻灯片；提供多种主题式样，可方便更改幻灯片的整体风格。</li></ul><h3 id="常用宏包"><a href="#常用宏包" class="headerlink" title="常用宏包"></a>常用宏包</h3><p>不是必须记住，需要用哪个现查即可，列出这些是为了浏览别人的源文件时知道人家调用了哪个宏包。 </p><ul><li>amsmath 公式环境和数学命令 </li><li>amssymb 数学符号生成命令 </li><li>array 数组和表格制作 </li><li>calc 四则运算 </li><li>caption 插图和表格标题格式设置 </li><li>fancyhdr 页眉页脚设置 </li><li>fancyvrb 抄录格式设置 </li><li>fontspec 字体选择 </li><li>geometry 版面尺寸设置 </li><li>graphicx 插图处理 </li><li>hyperref 创建超文本链接和PDF书签 </li><li>longtable 制作跨页表格 </li><li>multicol 多栏排版 </li><li>ntheorem 定理设置 </li><li>paralist 多种列表环境 </li><li>tabularx 自动设置表格列宽 </li><li>titlesec 章节标题格式设置 </li><li>titletoc 目录格式设置 </li><li>xcolor 颜色处理 </li><li>xeCJK 中日朝文字处理和字体选择</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本概念和使用&quot;&gt;&lt;a href=&quot;#基本概念和使用&quot; class=&quot;headerlink&quot; title=&quot;基本概念和使用&quot;&gt;&lt;/a&gt;基本概念和使用&lt;/h1&gt;&lt;h4 id=&quot;Hello-world&quot;&gt;&lt;a href=&quot;#Hello-world&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="Latex" scheme="https://nymrli.top/tags/Latex/"/>
    
      <category term="计算机基础知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>每日codewars</title>
    <link href="https://nymrli.top/2019/01/19/%E6%AF%8F%E6%97%A5codewars/"/>
    <id>https://nymrli.top/2019/01/19/每日codewars/</id>
    <published>2019-01-19T12:47:50.000Z</published>
    <updated>2019-01-22T15:09:28.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Codewars"><a href="#Codewars" class="headerlink" title="Codewars"></a>Codewars</h1><h2 id="12-17"><a href="#12-17" class="headerlink" title="12.17"></a>12.17</h2><h3 id="Sum-without-highest-and-lowest-number"><a href="#Sum-without-highest-and-lowest-number" class="headerlink" title="Sum without highest and lowest number"></a>Sum without highest and lowest number</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Sum without highest and lowest number</span></span><br><span class="line"><span class="comment">    &#123; 6, 2, 1, 8, 10 &#125; =&gt; 16</span></span><br><span class="line"><span class="comment">    &#123; 1, 1, 11, 2, 3 &#125; =&gt; 6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(numbers.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(numbers.size()==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    sort(numbers.begin(),numbers.end());</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = numbers.begin()+<span class="number">1</span>;it != numbers.end()<span class="number">-1</span>;it++)</span><br><span class="line">        sum += *it;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; n;</span><br><span class="line">    n.push_back(<span class="number">1</span>);</span><br><span class="line">    n.push_back(<span class="number">3</span>);</span><br><span class="line">    n.push_back(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-11支持的新特性"><a href="#C-11支持的新特性" class="headerlink" title="C++11支持的新特性"></a>C++11支持的新特性</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="comment">// 支持了vector &#123;&#125;的初始化方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : a) <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line"><span class="comment">//支持了for(:)</span></span><br></pre></td></tr></table></figure><h2 id="12-19"><a href="#12-19" class="headerlink" title="12.19"></a>12.19</h2><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p><a href="https://www.codewars.com/kata/5715eaedb436cf5606000381" target="_blank" rel="noopener">Sum of positive</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">/**Hex to Decimal**/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexToDec</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> hexString)</span></span>&#123;</span><br><span class="line">    reverse(hexString.begin(),hexString.end());</span><br><span class="line">    <span class="keyword">int</span> base = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum  =<span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">bool</span> fu = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">string</span>::iterator it = hexString.begin() ; it != hexString.end() ; it++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>( *it == <span class="string">'-'</span>) &#123;fu = <span class="number">1</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>( *it &gt;= <span class="string">'A'</span> &amp;&amp; *it &lt;= <span class="string">'F'</span> ) num = *it - <span class="string">'A'</span> + <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( *it &gt;= <span class="string">'a'</span> &amp;&amp; *it &lt;= <span class="string">'f'</span> ) num = *it - <span class="string">'a'</span> + <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">else</span> num = *it - <span class="string">'1'</span> + <span class="number">1</span>;</span><br><span class="line">        sum += num * base;</span><br><span class="line">        base *= <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fu?-sum:sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//base来控制相应位数，Aa都要考虑，负数</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">string</span>::iterator it = hexString.begin() ; it != hexString.end() ; it++ )</span><br><span class="line"><span class="comment">// *it 是 char类型的</span></span><br></pre></td></tr></table></figure><h2 id="12-20"><a href="#12-20" class="headerlink" title="12.20"></a>12.20</h2><h3 id="stoi、istringstream、sscanf"><a href="#stoi、istringstream、sscanf" class="headerlink" title="stoi、istringstream、sscanf"></a>stoi、istringstream、sscanf</h3><p><a href="https://www.codewars.com/kata/57a4d500e298a7952100035d" target="_blank" rel="noopener">Hex to Decimal</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexToDec</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; hexString)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::stoi(hexString, <span class="literal">nullptr</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="comment">//return std::stoi(hexString, 0, 16);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ios&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexToDec</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> hexString)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">istringstream</span>(hexString) &gt;&gt; <span class="built_in">std</span>::hex &gt;&gt; n;</span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexToDec</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> hexString)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)strtol(hexString.c_str(), <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexToDec</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> hex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> decValue;</span><br><span class="line">    <span class="built_in">sscanf</span>(hex.c_str(), <span class="string">"%x"</span>, &amp;decValue); </span><br><span class="line">    <span class="keyword">return</span> decValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-21"><a href="#12-21" class="headerlink" title="12.21"></a>12.21</h2><h3 id="增强的for-ch-vowels"><a href="#增强的for-ch-vowels" class="headerlink" title="增强的for(ch : vowels )"></a>增强的for(ch : vowels )</h3><p><a href="https://www.codewars.com/kata/54ff3102c1bad923760001f3" target="_blank" rel="noopener">Vowel Count</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; inputStr)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num_vowels = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; vowels = &#123;<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span> &#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> it = <span class="number">0</span>; it != inputStr.size() ; it++ )</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> ch : vowels ) <span class="keyword">if</span>( ch == inputStr[it] ) num_vowels++;</span><br><span class="line">  <span class="keyword">return</span> num_vowels;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**const string&amp; inputStr**/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">string</span>::const_iterator  it = inputStr.begin() ; it != inputStr.end() ; it++) <span class="comment">// 迭代器为const_iterator，而不是iterator</span></span><br></pre></td></tr></table></figure><p>优秀解答：</p><h3 id="count-if"><a href="#count-if" class="headerlink" title="count_if"></a>count_if</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; inputStr)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> count_if(inputStr.begin(), inputStr.end(), [](<span class="keyword">const</span> <span class="keyword">char</span> ch) &#123;</span><br><span class="line">      <span class="keyword">switch</span>(ch) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">          case'e':</span><br><span class="line">          <span class="keyword">case</span>'i':</span><br><span class="line">          <span class="keyword">case</span>'o':</span><br><span class="line">          <span class="keyword">case</span><span class="string">'u'</span>:</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;&#125; </span><br><span class="line">     &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;=====&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_vowel</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (c == <span class="string">'a'</span> || c == <span class="string">'e'</span> || c == <span class="string">'i'</span> || c == <span class="string">'o'</span> || c == <span class="string">'u'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; inputStr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> count_if(inputStr.begin(), inputStr.end(), is_vowel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-22"><a href="#12-22" class="headerlink" title="12.22"></a>12.22</h2><h3 id="for-each和C11的匿名函数"><a href="#for-each和C11的匿名函数" class="headerlink" title="for_each和C11的匿名函数"></a>for_each和C11的匿名函数</h3><p><a href="https://www.codewars.com/kata/5899dc03bc95b1bf1b0000ad" target="_blank" rel="noopener">Invert values</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**Invert values**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; invert(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values)&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line">    for_each(values.begin(),values.end(),[ &amp;v2](<span class="keyword">int</span> c)&#123; v2.push_back(-c); &#125;);</span><br><span class="line">    <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 学会使用了 for_each和C11的匿名函数</span></span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a><a href="http://www.cnblogs.com/pzhfei/archive/2013/01/14/lambda_expression.html" target="_blank" rel="noopener">匿名函数</a></h4><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123; <span class="keyword">return</span> x + y; &#125; <span class="comment">// 隐式返回类型</span></span><br><span class="line">[](<span class="keyword">int</span>&amp; x) &#123; ++x; &#125;   <span class="comment">// 没有return语句 -&gt; lambda 函数的返回类型是'void'</span></span><br><span class="line">[]() &#123; ++global_x; &#125;  <span class="comment">// 没有参数,仅访问某个全局变量</span></span><br><span class="line">[]&#123; ++global_x; &#125;     <span class="comment">// 与上一个相同,省略了()</span></span><br></pre></td></tr></table></figure><p>技巧:</p><ul><li>没有return ， 则 lambda的返回类型是<code>void</code></li><li>如果没有参数，则可以省略参数</li></ul><h5 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h5><ul><li>值捕获</li><li>引用捕获</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[]        <span class="comment">//未定义变量.试图在Lambda内使用任何外部变量都是错误的.</span></span><br><span class="line">[x, &amp;y]   <span class="comment">//x 按值捕获, y 按引用捕获.</span></span><br><span class="line">[&amp;]       <span class="comment">//用到的任何外部变量都隐式按引用捕获</span></span><br><span class="line">[=]       <span class="comment">//用到的任何外部变量都隐式按值捕获</span></span><br><span class="line">[&amp;, x]    <span class="comment">//x显式地按值捕获. 其它变量按引用捕获</span></span><br><span class="line">[=, &amp;z]   <span class="comment">//z按引用捕获. 其它变量按值捕获</span></span><br></pre></td></tr></table></figure><h2 id="12-23"><a href="#12-23" class="headerlink" title="12.23"></a>12.23</h2><h3 id="▲transform"><a href="#▲transform" class="headerlink" title="▲transform"></a>▲transform</h3><p>算法transform()提供以下两种能力：</p><p>1.第一形式有4个参数，把源区间的元素转换到目标区间。也就是说，复制和修改元素一气呵成；</p><blockquote><p>transform(sourceBeg,sourceEnd,destBeg,op)</p><p>(1)针对源区间[sourceBeg,sourceEnd)中的每一个元素调用：op(elem) 并将结果写到以destBeg起始的目标区间内；</p><p>(2)返回目标区间内“最后一个被转换元素”的下一个位置，也就是第一个未被覆盖的元素位置；</p><p>(3)调用者必须确保目标区间有足够的空间，要不就得使用插入型迭代器；</p><p>(4)sourceBeg于destBeg可以相同，所以，和for_each()算法一样，你可以使用这个算法来变动某一序列内的元素；</p><p>(5)如果想以某值替换符合某一准则的元素，应使用replace()算法；</p><p>(6)复杂度：线性；</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; coll1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++) coll1.push_back(i);</span><br><span class="line"> transform(coll1.begin(),coll1.end(),coll1.begin(),negate&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++) <span class="built_in">cout</span> &lt;&lt; coll1.at(i) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//-1 -2 -3 -4 -5 .. -8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.第二形式有5个参数，将前两个源序列中的元素合并，并将结果写入目标区间。</p><blockquote><p>transform(source1Beg,source1End,source2Beg,destBeg,op)</p><p>(1)针对第一源区间[source1Beg,source1End)以及“从source2Beg开始的第二源区间”的对应元素，调用:op(source1Elem,source2Elem) 并将结果写入以destBeg起始的目标区间内；</p><p>(2)返回区间内的“最后一个被转换元素”的下一位置，就是第一个未被覆盖的元素的位置；</p><p>(3)调用者必须保证第二源区间有足够空间（至少拥有和第一区间相同的空间大小）；</p><p>(4)调用者必须确保目标区间有足够空间，要不就得使用插入型迭代器；</p><p>(5)source1Beg，source2Beg，destBeg可以相同。所以，可以让元素自己和自己结合，然后将结果覆盖至某个序列；</p><p>(6)复杂度:线性；</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; coll1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++) coll1.push_back(i);</span><br><span class="line"> transform(coll1.begin(),coll1.end(),coll1.begin(),coll1.begin(),multiplies&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++) <span class="built_in">cout</span> &lt;&lt; coll1.at(i) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 1,4,16,25...81</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://lib.csdn.net/article/cplusplus/32641" target="_blank" rel="noopener">http://lib.csdn.net/article/cplusplus/32641</a></p><h3 id="Remove-exclamation-marks"><a href="#Remove-exclamation-marks" class="headerlink" title="Remove exclamation marks"></a>Remove exclamation marks</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">removeExclamationMarks</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">  <span class="comment">//your code here</span></span><br><span class="line">  <span class="built_in">queue</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">string</span>::iterator it = str.begin() ; it != str.end() ; it++)</span><br><span class="line">    <span class="keyword">if</span>( *it != <span class="string">'!'</span>) st.push(*it);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">string</span> s;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = st.size() ; i &gt;<span class="number">0</span> ; i--)&#123;</span><br><span class="line">      s += st.front();</span><br><span class="line">      st.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &gt;&gt;&gt; 2323!!asd ===&gt; 2323asd</span></span><br></pre></td></tr></table></figure><h2 id="12-24"><a href="#12-24" class="headerlink" title="12.24"></a>12.24</h2><h3 id="Maximum-Multiple"><a href="#Maximum-Multiple" class="headerlink" title="Maximum Multiple"></a>Maximum Multiple</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxMultiple</span><span class="params">(<span class="keyword">int</span> divisor, <span class="keyword">int</span> bound)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Your Code is Here ... Enjoy !!!</span></span><br><span class="line">  <span class="keyword">if</span> ( bound % divisor == <span class="number">0</span>) <span class="keyword">return</span> bound;</span><br><span class="line">  <span class="keyword">return</span> divisor * ( bound / divisor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-25"><a href="#12-25" class="headerlink" title="12.25"></a>12.25</h2><h3 id="nth-element-函数"><a href="#nth-element-函数" class="headerlink" title="nth_element()函数"></a>nth_element()函数</h3><blockquote><p>部分排序</p><p>头文件：<code>#include&lt;algorithm&gt;</code></p><p>作用：<code>nth_element(a+l,a+k,a+r)</code></p><p>它会使a这个数组中区间<code>[l,r)</code>内的第k大的元素处在第k个位置上(相对位置)，<strong>但是它并不保证其他元素有序！</strong>且第 n 个元素之前的元素都小于它，但不必是有序的。同样，第 n 个元素后的元素都大于它，但也不必是有序的。</p><p><strong>排序后a[n]就是数列中第n+1大的数</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nth_element(intVect.begin(),intVect.begin()+<span class="number">3</span>,intVect.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; intVect[<span class="number">2</span>]&lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><a href="https://zhidao.baidu.com/question/1447317576049306340.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/1447317576049306340.html</a></p><h2 id="12-26"><a href="#12-26" class="headerlink" title="12.26"></a>12.26</h2><h3 id="Mumbling"><a href="#Mumbling" class="headerlink" title="Mumbling"></a>Mumbling</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Accumul</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">accum</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line">      <span class="built_in">stringstream</span> result;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) </span><br><span class="line">        result &lt;&lt; <span class="string">"-"</span> &lt;&lt; <span class="built_in">string</span>(<span class="number">1</span>, <span class="built_in">toupper</span>(s[i])) &lt;&lt; <span class="built_in">string</span>(i, <span class="built_in">tolower</span>(s[i])); </span><br><span class="line">      <span class="keyword">return</span> result.str().substr(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Accumul</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">accum</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span> result;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        result.append(<span class="string">"-"</span>);</span><br><span class="line">        result.append(<span class="built_in">std</span>::<span class="built_in">string</span>(<span class="number">1</span>,<span class="built_in">toupper</span>(s[i])));</span><br><span class="line">        result.append(<span class="built_in">std</span>::<span class="built_in">string</span>(i,<span class="built_in">tolower</span>(s[i])));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result.substr(<span class="number">1</span>,result.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="12-27"><a href="#12-27" class="headerlink" title="12.27"></a>12.27</h2><h3 id="Highest-and-Lowest"><a href="#Highest-and-Lowest" class="headerlink" title="Highest and Lowest"></a>Highest and Lowest</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[mySolution]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">highAndLow</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; numbers)</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> single;<span class="comment">//每个字符</span></span><br><span class="line">  <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(numbers)</span></span>;<span class="comment">//字符流</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s;<span class="comment">//存储每个数字的vec</span></span><br><span class="line">  <span class="keyword">while</span>( getline(ss,single,<span class="string">' '</span>) )<span class="comment">//根据空格分割</span></span><br><span class="line">  <span class="comment">//while(ss &gt;&gt; s)</span></span><br><span class="line">    s.push_back(stoi(single));</span><br><span class="line">  sort(s.begin(),s.end(),greater&lt;<span class="keyword">int</span>&gt;());<span class="comment">//从大到小排序</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将整数拼合起来</span></span><br><span class="line">  <span class="built_in">stringstream</span> sss;</span><br><span class="line">  sss &lt;&lt; s.at(<span class="number">0</span>) &lt;&lt; <span class="string">" "</span> &lt;&lt; s.at(s.size() - <span class="number">1</span>) ;</span><br><span class="line">  <span class="keyword">return</span> sss.str();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="boost库"><a href="#boost库" class="headerlink" title="boost库"></a>boost库</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> s = <span class="string">" hello boost!! "</span>;</span><br><span class="line">  trim(s);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回-编译器允许的-int-型数-最大值std-numeric-limits-lt-int-gt-max"><a href="#返回-编译器允许的-int-型数-最大值std-numeric-limits-lt-int-gt-max" class="headerlink" title="返回 编译器允许的 int 型数 最大值std::numeric_limits&lt;int&gt;::max ()"></a>返回 编译器允许的 int 型数 最大值<code>std::numeric_limits&lt;int&gt;::max ()</code></h3><h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h2><h3 id="Minimize-Sum-Of-Array-Array-Series-1"><a href="#Minimize-Sum-Of-Array-Array-Series-1" class="headerlink" title="Minimize Sum Of Array (Array Series #1)"></a>Minimize Sum Of Array (Array Series #1)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minSum</span> <span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;passed)</span></span>&#123;</span><br><span class="line">    sort(passed.begin(),passed.end());</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">int</span> n = passed.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; n/<span class="number">2</span>; i++)&#123;</span><br><span class="line">        sum += passed.at(i) * passed.at(n<span class="number">-1</span>-i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; minSum(&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>&#125;);<span class="comment">//最远的两个数相乘，内积</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数形参为<code>vec</code>时，可以直接将<code>{x1,x2,x3}</code>当参数传入。</p><h4 id="inner-product"><a href="#inner-product" class="headerlink" title="inner_product"></a>inner_product</h4><p>定义在 numeric 头文件中的 inner_product() 算法可以计算两个 vector 的内积。这个函数模板有 4 个参数：前两个参数是定义第 1 个 vector 的输入迭代器，第 3 个参数是确定第 2 个 vector 的开始输入迭代器，第 4 个参数是和的初值。算法会返回 vector 的内积。例如：</p><p><code>cout &lt;&lt; inner_product(begin(passed),begin(passed)+n,passed.rbegin(),0) &lt;&lt; endl;</code></p><h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h2><p>关于删除可迭代对象中元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确写法</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span>&lt; <span class="keyword">int</span>&gt; List;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span>&lt; <span class="keyword">int</span>&gt;::iterator itList;</span><br><span class="line"><span class="keyword">for</span>( itList = List.begin(); itList != List.end(); )&#123;</span><br><span class="line">      <span class="keyword">if</span>( WillDelete( *itList) )</span><br><span class="line">            itList = List.erase( itList);</span><br><span class="line">    <span class="comment">//或者 List.erase( itList );</span></span><br><span class="line">   <span class="comment">//反正就是不能让下标一下进两个，如果将++写在for里面，会导致删除后漏了一个元素判断</span></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">            itList++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误写法</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span>&lt; <span class="keyword">int</span>&gt; List;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span>&lt; <span class="keyword">int</span>&gt;::iterator itList;</span><br><span class="line"><span class="keyword">for</span>( itList = List.begin(); itList != List.end(); itList++)&#123;</span><br><span class="line">     <span class="keyword">if</span>( WillDelete( *itList) ) List.erase( itList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误原因：在调用erase方法之后使用“++”来获取下一个元素的位置，由于在调用erase方法以后，该元素的位置已经被删除，如果在根据这个旧的位置来获取下一个位置，则会出现异常。</p><blockquote><p>在Python里面遍历删除元素时，下标问题，会使略过元素==&gt; 解决方法： if，else</p></blockquote><h3 id="Disemvowel-Trolls"><a href="#Disemvowel-Trolls" class="headerlink" title="Disemvowel Trolls"></a>Disemvowel Trolls</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">disemvowel</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="built_in">string</span>::iterator it = str.begin() ; it != str.end() ;)&#123;</span><br><span class="line">        <span class="keyword">if</span> ( *it == <span class="string">'A'</span> || *it == <span class="string">'I'</span></span><br><span class="line">            || *it == <span class="string">'U'</span>  || *it == <span class="string">'E'</span></span><br><span class="line">            || *it == <span class="string">'O'</span> || *it == <span class="string">'a'</span></span><br><span class="line">            || *it == <span class="string">'o'</span> || *it == <span class="string">'i'</span></span><br><span class="line">            || *it == <span class="string">'u'</span> || *it == <span class="string">'e'</span> )</span><br><span class="line">            str.erase(it);</span><br><span class="line">        <span class="keyword">else</span>  it++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c-正则"><a href="#c-正则" class="headerlink" title="c++正则"></a>c++正则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># include &lt;string&gt;</span><br><span class="line"># include &lt;regex&gt;</span><br><span class="line">std::string disemvowel(std::string str)&#123;</span><br><span class="line">  std::regex vowels(&quot;[aeiouAEIOU]&quot;);</span><br><span class="line">  return std::regex_replace(str, vowels, &quot;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h2><h3 id="在string中查找子串"><a href="#在string中查找子串" class="headerlink" title="在string中查找子串"></a>在string中查找子串</h3><p><code>string:: string::find(string &amp;);</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a=<span class="string">"abcdefghigklmn"</span>;</span><br><span class="line">    <span class="built_in">string</span> b=<span class="string">"def"</span>;</span><br><span class="line">    <span class="built_in">string</span> c=<span class="string">"123"</span>;</span><br><span class="line">    <span class="built_in">string</span>::size_type idx;</span><br><span class="line">     </span><br><span class="line">    idx=a.find(b);<span class="comment">//在a中查找b.</span></span><br><span class="line">    <span class="keyword">if</span>(idx == <span class="built_in">string</span>::npos )<span class="comment">//不存在。</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found\n"</span>;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//存在。</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"found\n"</span>; </span><br><span class="line">    idx=a.find(c);<span class="comment">//在a中查找c。</span></span><br><span class="line">    <span class="keyword">if</span>(idx == <span class="built_in">string</span>::npos )<span class="comment">//不存在。</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found\n"</span>;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//存在。</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"found\n"</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当没有找到时返回<code>string::npos</code></p><h2 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountDig</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nbDig</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> d)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算num中出现数字d的次数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">contain</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n =<span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span>( num &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> ge = num % <span class="number">10</span>;</span><br><span class="line">        num = num / <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>( ge == d) n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要求的成员函数</span></span><br><span class="line"><span class="keyword">int</span> CountDig::nbDig(<span class="keyword">int</span> n, <span class="keyword">int</span> d)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i &lt;= n ; i++) v.push_back( i*i );</span><br><span class="line">    <span class="keyword">int</span> cnt =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    for_each(v.begin(),v.end(),[d,&amp;cnt](<span class="keyword">int</span> x)&#123;</span><br><span class="line">                 <span class="keyword">int</span> appn = contain(x,d);</span><br><span class="line">                 cnt += appn ;</span><br><span class="line">             &#125;);</span><br><span class="line">     <span class="keyword">return</span> d==<span class="number">0</span>?++cnt:cnt ;</span><br><span class="line">    <span class="comment">//由于contain函数会舍去0的情况，所以这边补上</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="topow-int-int-丢精度"><a href="#topow-int-int-丢精度" class="headerlink" title="topow(int ,int) 丢精度"></a>topow(int ,int) 丢精度</h3><p>问题尚未解决</p><h2 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a>1.5</h2><h3 id="Compare-Strings-by-Sum-of-Chars"><a href="#Compare-Strings-by-Sum-of-Chars" class="headerlink" title="Compare Strings by Sum of Chars"></a>Compare Strings by Sum of Chars</h3><p>isalpha的使用，sum为int类型，当sum+= <code>char</code>类型的c时，实际加的就是c的ASCII码值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Calculate the char-value of the string</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">charvalue</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">char</span> &amp;c : s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">std</span>::<span class="built_in">isalpha</span>(c)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    sum += <span class="built_in">std</span>::<span class="built_in">toupper</span>(c);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s1, <span class="built_in">std</span>::<span class="built_in">string</span> s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> charvalue(s1) == charvalue(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Codewars&quot;&gt;&lt;a href=&quot;#Codewars&quot; class=&quot;headerlink&quot; title=&quot;Codewars&quot;&gt;&lt;/a&gt;Codewars&lt;/h1&gt;&lt;h2 id=&quot;12-17&quot;&gt;&lt;a href=&quot;#12-17&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://nymrli.top/tags/Algorithm/"/>
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="C" scheme="https://nymrli.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>12-27 Team Leader</title>
    <link href="https://nymrli.top/2019/01/19/12-27-Team-Leader/"/>
    <id>https://nymrli.top/2019/01/19/12-27-Team-Leader/</id>
    <published>2019-01-19T12:40:37.000Z</published>
    <updated>2019-01-19T12:46:52.114Z</updated>
    
    <content type="html"><![CDATA[<p><strong>How Is An Excellent Team Leader</strong></p><ul><li><p>A couple of days ago, my friend and I took part in a science and technology competition which was completed by a team of four. Usually, The person who can come up with the best idea is the caption, leading or so-called principal. For the reason, I was the principal of the team which consists of the same teammates last time. And this time, someone came up with a better idea, so the principal changed and not me. I’m not saying that changing is bad, or that I’m unsatisfied with it that I didn’t continue to play such an important role. At the beginning, everything is ok and everyone is full of fighting spirit. We have more than 30 days to finish this work, but actually the workload is only about 6 days at most. As a team that has completed several works together, we still keep the excellent habit of meeting and discussing regularly. Maybe it isn’t as important as the last one, or maybe the division is so clear that nothing has to be discussed always. Everyone has his work, and takes responsibility to his own job, so it seems very easy to solve the project. In fact, we spent lots of time laughing and talking together and fussing around trifles, instead of really discussing the problem. There was nothing wrong at that time.</p></li><li><p>The problem occurred three days before the start of the evaluation. Everyone had finished his own work and waited to consolidate the modules and summarize all the work. This is a good proposal, but if fact, two people are debugging the code, while the other two people are working at their own job, can this be called discussion or teamwork? It’s natural to do with their own things if they have finished what they should do. However, what makes me angry is that we are both up to my ears in work while the others who are free feel nothing to do with himself. We hoped they could come to our aid, but they even didn’t understand what was wrong and not to mention what to do. To sum up, there was a communication problem which reflected in the form of failing to cope with work’s distribution. I have said just now that the division is very clear and easy. There were four people in the competition team, but the work was divided into three modules: SCM, machine learning, and Web services. So it’s enough for three people to do this and we felt easy and relaxed also. Nobody complained about there was somebody doing nothing. But maybe when it comes to the principal, the condition is different. First of all, as a team leader, he may be criticized if he doesn’t do anything. This is still a small matter. The most important thing is efficiency. What really pissed me off that night was that the summary didn’t end from 8:30 p.m. to 11:00 p.m., and the biggest reason was that no one knew exactly how to tackle it. And that lies about the principal.</p></li><li><p>Although, he did a good job in the report which needs the structural diagram of the whole work and even designed the flow chart. The project needed supervision and urging, and he had completed it well. Every weekend, he tries to organize the gather everyone. Also, he gets on well with teammates and so on. It can be said he is basically qualified. However, I must pointed out that he is not a good leader by no means. First of all, he only did the things required by the competition, such as the system block diagram, but he did not manage the division of labor and summary of each of us in length. What’s more, he only organized and attended each discussion symbolically. He neither discussed the project with any purpose nor proposed any better suggestion. He organized the discussion formally for several times and seemed quite responsible. But that’s a waste of time, in my view, the biggest difference between a responsible person and no responsible person is reflected in the organization. A good organization can improve the efficiency, while a poor organization is just dispensable or even wasteful. It wasn’t as easy as I thought it would be that day. Eventually, it took us three more meetings before we actually assembled the work. During this period, I couldn’t bear to give suggestions to principal that You can do nothing, but you have to know our progress and what we are doing. ‘Of course,’ he replied. ‘that’s why I come to every discussion, just to get a sense of where you’re going,or I don’t have to come.’ I was speechless, for there seemed to be nothing wrong with it. The biggest conflict occurred the night before the game, when a module that had been available suddenly broke down. After several previous quarrels, it was difficult for me and principal to discuss together. But this is a very serious question, how to make decisions now. Do it the same as before? Or abandon all the previous modules to implement the worst solution? After I put forward the proposal of starting again as soon as possible, he finally led the people to carry out the worst plan. And this is without my knowledge.</p></li><li><p>They followed worked on worst plan all afternoon, and all looked very frustrated. I realized that they didn’t follow my plan until they said they had a problem that was a little difficult to solve. I was so angry that I called them and asked them why they didn’t do what I said. They were vague, and I called them names because I thought they could do it if they did what I told them. So, I immediately met with them, it was raining, the atmosphere was very depressed, the leader did not speak, the other two players looked very depressed. At that time, I tried not to shout at the wrong leader. and first I stressed that we could definitely make it if we continued to do it. After inspiring for a while, everyone seemed quite motivated, so I immediately lead them to try in this direction. Fortunately, we solved the problem again in less than two hours.</p></li><li><p>What I want to say is that all teams will confront with difficulties, and then there must be a strong and confident person to lead the team to a good direction, rather than thinking about how not to lose his face and take a not smart solution. Later, the principal reflected it was tight at that time, and we had some conflicts before, so he did not want to prove that he could not solve the problem. </p></li><li><p>That’s the whole story, a very verbose story. I’m not talking about how good I am at what I do. I want to emphasize that as a good leader, one must think for the team and improve the efficiency of the team fundamentally, instead of wasting everyone’s time by being formalistic. And As a leader of a team it’s important that the first thing that comes to mind is how to solve the problem better, instead of escaping from the trouble. I just want to save my face and make a bad but not wrong decision. Last but not least, full of confidence and fighting spirit, can actively lead the team to success. If you do not believe in yourself, how can you let others believe in yourself. Further, the ideal leader, in addition to giving a good direction of effort, but also can help members solve the actual problems encountered, of course, this is difficult and just the ideal situation. Because it is difficult for anyone to understand all aspects, I dare to make such a decision this time, and I am confident that I can succeed in doing so, largely because I known about the modules which everyone should be responsible for.</p></li><li><p>This is what I learned from this competition, what I understand the responsible leader should behave like.Thanks.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;How Is An Excellent Team Leader&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A couple of days ago, my friend and I took part in a science and technol
      
    
    </summary>
    
    
      <category term="生活小记" scheme="https://nymrli.top/tags/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0/"/>
    
      <category term="English Speaking" scheme="https://nymrli.top/tags/English-Speaking/"/>
    
  </entry>
  
  <entry>
    <title>阿里云nginx+wsgi部署flask</title>
    <link href="https://nymrli.top/2019/01/17/%E9%98%BF%E9%87%8C%E4%BA%91nginx-wsgi%E9%83%A8%E7%BD%B2flask/"/>
    <id>https://nymrli.top/2019/01/17/阿里云nginx-wsgi部署flask/</id>
    <published>2019-01-17T13:33:14.000Z</published>
    <updated>2019-01-17T13:33:40.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="云服务器nginx-wsgi部署flask"><a href="#云服务器nginx-wsgi部署flask" class="headerlink" title="云服务器nginx+wsgi部署flask"></a>云服务器nginx+wsgi部署flask</h2><h4 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br><span class="line">sudo /etc/init.d/nginx start (start可以改成restart/stop)</span><br><span class="line"><span class="meta">#</span><span class="bash">或是sudo service nginx start</span></span><br><span class="line">然后浏览器输入服务器IP,观察是否有welcom to nginx!</span><br></pre></td></tr></table></figure><h4 id="安装py3和virtualenv"><a href="#安装py3和virtualenv" class="headerlink" title="安装py3和virtualenv"></a>安装py3和virtualenv</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git python3 python3-pip</span><br><span class="line">sudo pip3 install virtualenv</span><br></pre></td></tr></table></figure><h4 id="修改python版本"><a href="#修改python版本" class="headerlink" title="修改python版本:"></a>修改python版本:</h4><h5 id="法一-不建议"><a href="#法一-不建议" class="headerlink" title="法一:(不建议)"></a>法一:(不建议)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ gedit ~/.bashrc   #gedit .bash_aliases</span><br><span class="line">在顶部加入一行alias python=python3</span><br><span class="line">$ source ~/.bashrc    #或是source ~/.bash_aliases o</span><br><span class="line">$ python --version</span><br><span class="line">就会发现是Python 3.5.2啦</span><br><span class="line"></span><br><span class="line">/*or</span><br><span class="line">Open your .bashrc file nano ~/.bashrc. Type alias python=python3 on to a new line at the top of the file then save the file with ctrl+o and close the file with ctrl+x. Then, back at your command line type source ~/.bashrc. Now your alias should be permanent.</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h5 id="Ubuntu16-04切换python3和python2"><a href="#Ubuntu16-04切换python3和python2" class="headerlink" title="Ubuntu16.04切换python3和python2"></a><a href="https://www.cnblogs.com/lin135/p/7799650.html" target="_blank" rel="noopener">Ubuntu16.04切换python3和python2</a></h5><h5 id="▲-切换Python3为默认版本：-建议"><a href="#▲-切换Python3为默认版本：-建议" class="headerlink" title="▲.切换Python3为默认版本：(建议)"></a>▲.切换<strong>Python3</strong>为默认版本：(建议)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150</span><br></pre></td></tr></table></figure><p>切换<strong>Python2</strong>为默认版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config python</span><br></pre></td></tr></table></figure><h4 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h4><h5 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www</span><br><span class="line">sudo virtualenv env35</span><br></pre></td></tr></table></figure><h5 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install</span><br></pre></td></tr></table></figure><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install mysql-server mysql-client</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /etc/mysql/mysql.conf.d</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -p -u root</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> password <span class="keyword">for</span> root:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> use mysql；</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456'</span> WITH GRANT OPTION;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> flush privileges; </span></span><br><span class="line">最后按Ctrl + z 退出</span><br></pre></td></tr></table></figure><h4 id="安装、测试uwsgi"><a href="#安装、测试uwsgi" class="headerlink" title="安装、测试uwsgi"></a>安装、测试uwsgi</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install uwsgi</span><br><span class="line">uwsgi --http :8000 --module homework_submission.wsgi</span><br></pre></td></tr></table></figure><h4 id="编辑-var-www下的uwsgi-ini"><a href="#编辑-var-www下的uwsgi-ini" class="headerlink" title="编辑/var/www下的uwsgi.ini"></a>编辑/var/www下的uwsgi.ini</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">chdir=/home/apollo3d/Documents/Beidou </span><br><span class="line">wsgi-file=wsgi.py</span><br><span class="line">home=/home/apollo3d/Documents/env</span><br><span class="line">callable=app; </span><br><span class="line">master=True</span><br><span class="line">processes=10</span><br><span class="line">socket= :81</span><br><span class="line">chmod socket=666</span><br><span class="line">vacuum=True</span><br><span class="line">max-requests=5000</span><br><span class="line">#pythonpath=/var/www/env</span><br></pre></td></tr></table></figure><h4 id="编辑-var-www下的nginx-conf"><a href="#编辑-var-www下的nginx-conf" class="headerlink" title="编辑/var/www下的nginx.conf"></a>编辑/var/www下的nginx.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 127.0.0.1;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    client_max_body_size 75M;</span><br><span class="line">    location /static&#123;</span><br><span class="line">    alias /home/apollo3d/Documents/Beidou/static;  </span><br><span class="line">&#125;</span><br><span class="line">location / &#123;</span><br><span class="line">    include uwsgi_params;</span><br><span class="line">    uwsgi_pass 127.0.0.1:81;</span><br><span class="line">#    uwsgi_param UWSGI_PYHOME  /home/apollo3d/Documents/Beidou/env;</span><br><span class="line">    uwsgi_param UWSGI_SCRIPT app:app;   # 启动flask的文件:Flask的实例</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编辑-var-www下的uwsgi-params"><a href="#编辑-var-www下的uwsgi-params" class="headerlink" title="编辑/var/www下的uwsgi_params"></a>编辑/var/www下的uwsgi_params</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">uwsgi_param QUERY_STRING $query_string;</span><br><span class="line">uwsgi_param REQUEST_METHOD $request_method;</span><br><span class="line">uwsgi_param CONTENT_TYPE $content_type;</span><br><span class="line">uwsgi_param CONTENT_LENGTH $content_length;     </span><br><span class="line"></span><br><span class="line">uwsgi_param REQUEST_URI     $request_uri;     </span><br><span class="line">uwsgi_param PATH_INFO     $document_uri;     </span><br><span class="line">uwsgi_param DOCUMENT_ROOT    $document_root;     </span><br><span class="line">uwsgi_param SERVER_PROTOCOL $server_protocol;     </span><br><span class="line">uwsgi_param REQUEST_SCHEME $scheme;     </span><br><span class="line">uwsgi_param HTTPS     $https if_not_empty;     </span><br><span class="line"></span><br><span class="line">uwsgi_param REMOTE_ADDR     $remote_addr;     </span><br><span class="line">uwsgi_param REMOTE_PORT     $remote_port;     </span><br><span class="line">uwsgi_param SERVER_PORT    $server_port;   </span><br><span class="line">uwsgi_param SERVER_NAME    $server_name;</span><br></pre></td></tr></table></figure><h4 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx</span><br><span class="line">cd sites-enabled</span><br><span class="line">rm default</span><br><span class="line">ln -s /var/www/nginx.conf homework_submission</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><h4 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h4><p><code>/etc/init.d/nginx restart</code></p><h4 id="运行uwsgi"><a href="#运行uwsgi" class="headerlink" title="运行uwsgi"></a>运行uwsgi</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www</span><br><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure><h4 id="让uwsgi自启动"><a href="#让uwsgi自启动" class="headerlink" title="让uwsgi自启动"></a>让uwsgi自启动</h4><blockquote><p>vim /etc/rc.local(注意非虚拟环境也得安装uwsgi模块)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">添加下面代码:</span><br><span class="line">/usr/local/bin/uwsgi --ini /var/www/uwsgi.ini</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h4 id="uwsgi的热启动"><a href="#uwsgi的热启动" class="headerlink" title="uwsgi的热启动"></a>uwsgi的热启动</h4><blockquote><p>在uwsgi.ini中加入</p><p><code>py-autoreload=1</code></p><p>重启一下:<code>killall -9 uwsgi</code>、<code>/usr/local/bin/uwsgi --ini /var/www/uwsgi.ini</code></p></blockquote><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>关于etc/ linit. d</strong></p><p>如果你使用过inux系统,那么你一定听说过 init. d目录,这个目录到底是干嘛的呢?它归根结底只做了一件事情,但这件事情非同小可,是为整个系统做的,因此它非常重要。init.d目录包含许多系统各种服务的启动和停止脚本</p><p><strong>关于 /etc/rc.local</strong></p><p>rc.local也是我经常使用的一个脚本,该脚本是在系统初始化级别脚本运行之后再执行的,因此可以安’, ‘地在里面添加你想在系统启动之后执行的脚本.</p><p><strong>总结</strong></p><p>Linux是灵活的,正因为它的灵活性,我们总是可以找到许多不同的办法来解决同一个问题，服务的例子就是一个很好的佐证,有了 /etc/init.d目录下的脚本,再加上 /etc/rc. local这个利器，你可以放心的确保你的服务可以完美的启动和运行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;云服务器nginx-wsgi部署flask&quot;&gt;&lt;a href=&quot;#云服务器nginx-wsgi部署flask&quot; class=&quot;headerlink&quot; title=&quot;云服务器nginx+wsgi部署flask&quot;&gt;&lt;/a&gt;云服务器nginx+wsgi部署flask&lt;/
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="环境部署" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>前端Vue框架学习</title>
    <link href="https://nymrli.top/2019/01/17/%E5%89%8D%E7%AB%AFVue%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://nymrli.top/2019/01/17/前端Vue框架学习/</id>
    <published>2019-01-17T12:47:22.000Z</published>
    <updated>2019-01-17T12:47:49.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端Vue框架学习-未完"><a href="#前端Vue框架学习-未完" class="headerlink" title="前端Vue框架学习(未完)"></a>前端Vue框架学习(未完)</h2><h5 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h5><h3 id="使用Vue的初次操作"><a href="#使用Vue的初次操作" class="headerlink" title="使用Vue的初次操作"></a>使用Vue的初次操作</h3><h5 id="创建一个Vue实例"><a href="#创建一个Vue实例" class="headerlink" title="创建一个Vue实例"></a>创建一个Vue实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Vue(&#123;<span class="comment">//初始化一个Vue对象</span></span><br><span class="line">    el: <span class="string">'#box'</span>,<span class="comment">//对象,后面跟的是选择器 el(是element缩写</span></span><br><span class="line">    data : &#123;<span class="comment">//数据成员,必须用关键字data</span></span><br><span class="line">        msg:<span class="string">'welcome'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="完整的html页面"><a href="#完整的html页面" class="headerlink" title="完整的html页面"></a>完整的html页面</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#box'</span>,</span></span><br><span class="line"><span class="undefined">            data:&#123;</span></span><br><span class="line"><span class="javascript">                msg:<span class="string">'hello'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">        <span class="comment">&lt;!--&lt;li&gt;&lt;/li&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><h5 id="v-model一般是放在表单中-实现了双向绑定"><a href="#v-model一般是放在表单中-实现了双向绑定" class="headerlink" title="v-model一般是放在表单中,实现了双向绑定"></a><code>v-model</code>一般是放在表单中,实现了双向绑定</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如上初始化一个Vue实例</span></span><br><span class="line">&lt;div id=<span class="string">'box'</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">'text'</span> v-model=<span class="string">"msg"</span> &gt;<span class="comment">//"双向绑定",修改输入框内容,msg内容也会改变</span></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-repeat-gt-v-for-quot-变量名-in-数组-quot"><a href="#v-repeat-gt-v-for-quot-变量名-in-数组-quot" class="headerlink" title="v-repeat===&gt;v-for=&quot;变量名 in 数组&quot;"></a><code>v-repeat</code>===&gt;<code>v-for=&quot;变量名 in 数组&quot;</code></h5><blockquote><p>使用变量的话<code></code>,使用索引<code></code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*            </span></span><br><span class="line"><span class="comment">data:&#123;</span></span><br><span class="line"><span class="comment">msg:'hello',</span></span><br><span class="line"><span class="comment">array:['he','bo','ce']</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">"value in array"</span>&gt;&#123;&#123;value&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-on侦听用户事件"><a href="#v-on侦听用户事件" class="headerlink" title="v-on侦听用户事件"></a><code>v-on</code>侦听用户事件</h5><ul><li>click</li><li>mousedown</li><li>dblclick</li><li>mouseover</li><li>mouseout</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">'#box'</span>,</span><br><span class="line">            data:&#123;</span><br><span class="line">                msg:<span class="string">'hello'</span>,</span><br><span class="line">                array:[<span class="string">'he'</span>,<span class="string">'bo'</span>,<span class="string">'ce'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods :&#123;<span class="comment">//注意是methods ,  而不是method</span></span><br><span class="line">                show:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"按钮"</span> v-on:click=<span class="string">"show()"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-show=&quot;true&quot;</code></p><h4 id="Bootstrap-Vue"><a href="#Bootstrap-Vue" class="headerlink" title="Bootstrap + Vue"></a>Bootstrap + Vue</h4><blockquote><p>Bootstrap 是个 css框架，类似jqueryMoblie一样,只需要给标签加class就行了</p><ul><li>Bootstrap 需要 .css + .js ，由于依赖jqery,所以需要将jquery.js也导入</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端Vue框架学习-未完&quot;&gt;&lt;a href=&quot;#前端Vue框架学习-未完&quot; class=&quot;headerlink&quot; title=&quot;前端Vue框架学习(未完)&quot;&gt;&lt;/a&gt;前端Vue框架学习(未完)&lt;/h2&gt;&lt;h5 id=&quot;MVVM模型&quot;&gt;&lt;a href=&quot;#MVVM模
      
    
    </summary>
    
    
      <category term="前端" scheme="https://nymrli.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>git使用——从云服务器更新文件到仓库</title>
    <link href="https://nymrli.top/2019/01/17/git%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E4%BB%8E%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E6%96%B0%E6%96%87%E4%BB%B6%E5%88%B0%E4%BB%93%E5%BA%93/"/>
    <id>https://nymrli.top/2019/01/17/git使用——从云服务器更新文件到仓库/</id>
    <published>2019-01-17T12:43:43.000Z</published>
    <updated>2019-01-17T12:44:12.339Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h3 id="从云服务器更新文件到仓库"><a href="#从云服务器更新文件到仓库" class="headerlink" title="从云服务器更新文件到仓库"></a>从云服务器更新文件到仓库</h3><p>1.查看git 版本(是否安装,一般都是默认安装好了的)</p><p>2.设置github账号密码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure><p>3.设置上传方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global push.default simple</span><br></pre></td></tr></table></figure><ul><li><blockquote><p><strong>matching（匹配所有分支）</strong><br>matching 参数是 Git 1.x 的默认参数，也就是老的执行方式。其意是如果你执行 git push 但没有指定分支，它将 push 所有你本地的分支到远程仓库中对应匹配的分支。</p></blockquote></li><li><blockquote><p><strong>simple（匹配单个分支)</strong></p><p>simple参数是 Git 2.x 默认参数，意思是执行 git push 没有指定分支时，只有当前分支会被 push 到远程仓库。</p></blockquote></li></ul><p>4.上传需要上传的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#git init 如果没有初始化仓库的话....(更新的话就不需要</span><br><span class="line">git add. </span><br><span class="line">git commit -m &quot;xxx&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    &lt;/p&gt;
&lt;h3 id=&quot;从云服务器更新文件到仓库&quot;&gt;&lt;a href=&quot;#从云服务器更新文件到仓库&quot; class=&quot;headerlink&quot; title=&quot;从云服务器更新文件到仓库&quot;&gt;&lt;/a&gt;从云服务器更新文件到仓库&lt;/h3&gt;&lt;p&gt;1.查看git 版本(是否安装,一
      
    
    </summary>
    
    
      <category term="git" scheme="https://nymrli.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实验1——线性表及多项式的运算</title>
    <link href="https://nymrli.top/2018/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C1%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%8F%8A%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E8%BF%90%E7%AE%97/"/>
    <id>https://nymrli.top/2018/12/28/数据结构实验1——线性表及多项式的运算/</id>
    <published>2018-12-28T11:42:11.000Z</published>
    <updated>2018-12-30T13:48:10.948Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链表操作"><a href="#链表操作" class="headerlink" title="链表操作"></a>链表操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Notpresent 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">ElemType elem;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">first</span>;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">&#125;SingleList;</span><br><span class="line"></span><br><span class="line">SingleList <span class="built_in">list</span>;<span class="comment">//声明全局的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(SingleList *L)</span></span>&#123;</span><br><span class="line">L-&gt;first = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Find</span><span class="params">(SingleList L,<span class="keyword">int</span> i,ElemType *x)</span></span>&#123;</span><br><span class="line">Node *p;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">0</span> || i&gt; L.n<span class="number">-1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L.first;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; ++i) p=p-&gt;link;</span><br><span class="line">*x = p-&gt;elem;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(SingleList *L,<span class="keyword">int</span> j,ElemType x)</span></span>&#123;</span><br><span class="line">Node *p,*q;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(j&lt;<span class="number">-1</span> || j&gt; L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L-&gt;first;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;j;i++) p=p-&gt;link;<span class="comment">//p==&gt;a(i-1)</span></span><br><span class="line"></span><br><span class="line">q = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">q-&gt;elem = x;</span><br><span class="line"><span class="keyword">if</span> (j&gt;<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">q-&gt;link = p-&gt;link;<span class="comment">// a(i-1)==&gt;???  ===&gt;  a(i)-&gt;???</span></span><br><span class="line">p-&gt;link = q ;<span class="comment">//a(i-1)-&gt;a(i)</span></span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">q-&gt;link = L-&gt;first;</span><br><span class="line">L-&gt;first = q;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;n++;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Delete</span><span class="params">(SingleList *L,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">Node *p,*q;</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">if</span> ( j&lt;<span class="number">0</span> || j&gt;L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line">q = L-&gt;first;</span><br><span class="line">p = L-&gt;first;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;j<span class="number">-1</span>;i++) q = q-&gt;link;<span class="comment">//q指向 a(i-1)</span></span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">0</span>)</span><br><span class="line">L-&gt;first = L-&gt;first-&gt;link;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p = q-&gt;link;<span class="comment">//此时p指向a(i)</span></span><br><span class="line">q-&gt;link = p-&gt;link;<span class="comment">//将q指向a(a+1)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">L-&gt;n -- ;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Output</span><span class="params">(SingleList L)</span></span>&#123;</span><br><span class="line">Node *p;</span><br><span class="line"><span class="keyword">if</span>(!L.n) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L.first;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;elem );</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory</span><span class="params">(SingleList *L)</span></span>&#123;</span><br><span class="line">Node *p;</span><br><span class="line"><span class="keyword">while</span>(L-&gt;first)&#123;</span><br><span class="line">p = L-&gt;first-&gt;link;  <span class="comment">//保存后继节点地址,防止断链</span></span><br><span class="line"><span class="built_in">free</span>(L-&gt;first);<span class="comment">//释放first节点所指节点的存储空间   从前往后释放</span></span><br><span class="line">L-&gt;first = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,x;</span><br><span class="line"></span><br><span class="line">Init(&amp;<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,i<span class="number">-1</span>,i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the linked list is :"</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">Delete(&amp;<span class="built_in">list</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nafter deleting the list is:"</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Find(<span class="built_in">list</span>,<span class="number">0</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nthe value is %d\n"</span>,x );</span><br><span class="line"></span><br><span class="line">Destory(&amp;<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带表头节点的单链表"><a href="#带表头节点的单链表" class="headerlink" title="带表头节点的单链表"></a>带表头节点的单链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Notpresent 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">ElemType elem;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">head</span>;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">&#125;Headlist;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(Headlist *L)</span></span>&#123;</span><br><span class="line">L-&gt;head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;head) <span class="keyword">return</span> ERROR;</span><br><span class="line">L-&gt;head-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//注意到这边没有对L-&gt;head-&gt;element作设置,因为不会用到</span></span><br><span class="line">L-&gt;n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Sort</span><span class="params">(Headlist *L)</span></span>&#123;</span><br><span class="line">Node *p=L-&gt;head,*pre=<span class="literal">NULL</span>;</span><br><span class="line">Node *r=p-&gt;link;</span><br><span class="line">p-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">p=r;<span class="comment">//r保存原来的结点顺序</span></span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">r = p-&gt;link;<span class="comment">//r继续取下一个结点</span></span><br><span class="line">pre = L-&gt;head;<span class="comment">//pre重新构造L,从头开始循环</span></span><br><span class="line"><span class="keyword">while</span>(pre-&gt;link != <span class="literal">NULL</span> &amp;&amp; pre-&gt;link-&gt;elem &lt; p-&gt;elem)  </span><br><span class="line">        <span class="comment">// 如果链表非空 且 新链表与当前结点数值比较</span></span><br><span class="line">pre = pre-&gt;link;</span><br><span class="line">        <span class="comment">//如果当前要插入的结点值大于循环中当前已排序结点,则取已排序链表下一个结点继续比较</span></span><br><span class="line">p-&gt;link = pre-&gt;link;    </span><br><span class="line">        <span class="comment">//找到p要插入的位置后,插入:若3&lt;pre=5&lt;bigger=7&lt;8,p=6,则 p=&gt;bigger</span></span><br><span class="line">pre-&gt;link = p;<span class="comment">// pre=&gt;p,插入即可</span></span><br><span class="line">p=r;<span class="comment">// p继续取下个结点依次按原来顺序循环遍历原来链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">deleleab</span><span class="params">(Headlist *L, <span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123; </span><br><span class="line">     Node *q = L-&gt;head,*p=L-&gt;head-&gt;link;  <span class="comment">// q为上一个,p为当前的</span></span><br><span class="line">     <span class="keyword">while</span>( p )</span><br><span class="line">     <span class="keyword">if</span>(p-&gt;elem &gt;= a &amp;&amp; p-&gt;elem &lt;= b)</span><br><span class="line">     &#123;</span><br><span class="line">     q-&gt;link = p-&gt;link;<span class="comment">// 1 - 2 - 3  1==&gt;3,1的指针域指向3</span></span><br><span class="line">     <span class="built_in">free</span>(p);<span class="comment">//释放2</span></span><br><span class="line">     p = q-&gt;link;<span class="comment">// 当前的指针变成3</span></span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        p = p-&gt;link;</span><br><span class="line">        q = p-&gt;link;</span><br><span class="line">     &#125;     </span><br><span class="line">     <span class="keyword">return</span> OK; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****</span></span><br><span class="line"><span class="comment">思路为: 将顺序遍历的结点不断插入为L-&gt;head-&gt;link</span></span><br><span class="line"><span class="comment">******/</span></span><br><span class="line"><span class="function">Status <span class="title">Converse</span><span class="params">(Headlist *L)</span></span>&#123;</span><br><span class="line">Node *p = <span class="literal">NULL</span>,*cur= <span class="literal">NULL</span>; </span><br><span class="line">Node *q = L-&gt;head-&gt;link;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;head &amp;&amp; L-&gt;head-&gt;link)&#123;<span class="comment">//如果表不存在或是为空,则return ERROR</span></span><br><span class="line"><span class="keyword">while</span>( q != <span class="literal">NULL</span> )<span class="comment">//q按照原来的顺序依次遍历各结点</span></span><br><span class="line">&#123;</span><br><span class="line">cur = q;<span class="comment">//cur为当前结点</span></span><br><span class="line">q = q-&gt;link;<span class="comment">//q保存下一个结点</span></span><br><span class="line">L-&gt;head-&gt;link = cur;<span class="comment">//为了不动头结点,所以头结点link始终指向当前要加的结点</span></span><br><span class="line">cur-&gt;link = p;<span class="comment">//当前的link指向上一个结点</span></span><br><span class="line">p = cur;<span class="comment">//保存上一个结点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(Headlist *L,<span class="keyword">int</span> j,ElemType x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">Node *p=<span class="literal">NULL</span>,*q=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(j&lt;<span class="number">-1</span> || j&gt; L-&gt; n<span class="number">-1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L-&gt;head;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=j;i++) p=p-&gt;link;</span><br><span class="line">    <span class="comment">// 与普通链表不同,这边是 &lt;= , 因为要多一个表头Node</span></span><br><span class="line">q = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">q-&gt;elem = x;</span><br><span class="line">q-&gt;link = p-&gt;link;</span><br><span class="line">p-&gt;link = q;</span><br><span class="line">L-&gt;n++;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Output</span><span class="params">(Headlist L)</span></span>&#123;</span><br><span class="line">Node *p = L.head-&gt;link;</span><br><span class="line"><span class="keyword">if</span>(!L.n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;elem );</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Destory</span><span class="params">(Headlist *L)</span></span>&#123;</span><br><span class="line">Node *p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(L-&gt;head)&#123;</span><br><span class="line">p = L-&gt;head-&gt;link; </span><br><span class="line"><span class="built_in">free</span>(L-&gt;head);</span><br><span class="line">L-&gt;head = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Delete</span><span class="params">(Headlist *L,<span class="keyword">int</span> j)</span></span>&#123;<span class="comment">//下标j</span></span><br><span class="line">Node *p = L-&gt;head,*q = L-&gt;head;<span class="comment">// q = tmp</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">if</span> ( j&lt;<span class="number">0</span> || j&gt;L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span> ;i&lt;=j<span class="number">-1</span>;i++) p = p-&gt;link;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">q-&gt;link = p-&gt;link;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Find</span><span class="params">(Headlist *L,<span class="keyword">int</span> j,ElemType *x)</span></span>&#123;</span><br><span class="line">Node *p= L-&gt;head;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> ( j&lt;<span class="number">0</span> || j&gt;L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span> ;i&lt;=j;i++) p = p-&gt;link;</span><br><span class="line">*x = p-&gt;elem;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">Headlist <span class="built_in">list</span>;</span><br><span class="line">Init(&amp;<span class="built_in">list</span>);</span><br><span class="line"> Insert(&amp;<span class="built_in">list</span>,<span class="number">-1</span>,<span class="number">3</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">-1</span>,<span class="number">5</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">2</span>,<span class="number">7</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the linked list is :"</span>); </span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nAfter sorted:"</span>);</span><br><span class="line">Sort(&amp;<span class="built_in">list</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nAfter Conversed:"</span>);</span><br><span class="line">Converse(&amp;<span class="built_in">list</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nAfter delete index of 0,the list is:"</span>);</span><br><span class="line">Delete(&amp;<span class="built_in">list</span>,<span class="number">0</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">Find(&amp;<span class="built_in">list</span>,<span class="number">2</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nthe index of 2:%d\n"</span>,x);</span><br><span class="line"></span><br><span class="line">Destory(&amp;<span class="built_in">list</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>带表头的链表和普通链表的区别在于:</p><ul><li>带表头链表的头结点的数据域是不设置的,真正有用的结点是L-&gt;head-&gt;link指向的结点.而普通链表L-&gt;first指向的结点</li><li>这样的好处是不用特殊考虑是不是头结点.</li></ul></blockquote><h4 id="代码实现细节"><a href="#代码实现细节" class="headerlink" title="代码实现细节:"></a>代码实现细节:</h4><p>1.插入的i,是$a_{i}$后面再添加一项,所以<code>for</code>条件为<code>j=0;j&lt;i</code> 进行j次<code>link</code></p><p>2.删除时,删除的是$a_{i}$,<code>for(j=0;j &lt; i - 1;j++)</code>,为什么是 <code>i-1</code>跟代码实现有关,先把q指向要删除的前一个结点,<code>p=q-&gt;link,q-&gt;link = p-&gt;link</code>从而将<code>p</code>即$a_{i}$孤立出来</p><p>▲带表头的话,将&lt;变为&lt;=,因为要多推个link,跳过head结点</p><h4 id="设计上最大的区别在于"><a href="#设计上最大的区别在于" class="headerlink" title="设计上最大的区别在于"></a>设计上最大的区别在于</h4><p>▲多了个表头以后,就不用再考虑,删除和插入的时候去动List-&gt;first指针，带表头后，修改的都是L-&gt;head-&gt;link之后的结点Node</p><h3 id="单链表实现多项式加减、相乘"><a href="#单链表实现多项式加减、相乘" class="headerlink" title="单链表实现多项式加减、相乘"></a>单链表实现多项式加减、相乘</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Notpresent 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType ceof;</span><br><span class="line">ElemType <span class="built_in">exp</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PNode</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;PNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PNode</span> *<span class="title">head</span>;</span></span><br><span class="line">&#125;polynominal;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">p-&gt;head = (PNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">p-&gt;head-&gt;<span class="built_in">exp</span> = <span class="number">-1</span>;</span><br><span class="line">p-&gt;head-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Create</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">PNode *pn = <span class="literal">NULL</span>,*q=<span class="literal">NULL</span>,*pre=<span class="literal">NULL</span>;</span><br><span class="line">p-&gt;head = (PNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">p-&gt;head-&gt;<span class="built_in">exp</span> = <span class="number">-1</span>;</span><br><span class="line">p-&gt;head-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line">pn = (PNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ceof:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pn-&gt;ceof);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"exp:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pn-&gt;<span class="built_in">exp</span>);</span><br><span class="line"><span class="keyword">if</span> (pn-&gt;<span class="built_in">exp</span> &lt; <span class="number">0</span>) &#123;<span class="built_in">printf</span>(<span class="string">"End the input\n"</span>); <span class="keyword">break</span>;&#125;</span><br><span class="line">pre = p-&gt;head;<span class="comment">//pre从链表头开始</span></span><br><span class="line">q=p-&gt;head-&gt;link;</span><br><span class="line"><span class="keyword">while</span>(q &amp;&amp; q-&gt;<span class="built_in">exp</span> &gt; pn-&gt;<span class="built_in">exp</span>)&#123;<span class="comment">//pn为当前结点,q为链表中结点</span></span><br><span class="line">pre = q;<span class="comment">//</span></span><br><span class="line">q = q-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line">pn-&gt;link = q;</span><br><span class="line">        <span class="comment">// 在pre和q之间插入pn,(q为null时,相当于末尾插入pn)</span></span><br><span class="line">pre-&gt;link = pn;<span class="comment">// pre =&gt; pn =&gt; q</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Sort</span><span class="params">(polynominal *L)</span></span>&#123;<span class="comment">//从大到小</span></span><br><span class="line">PNode *p=L-&gt;head,*pre=<span class="literal">NULL</span>;</span><br><span class="line">PNode *r=p-&gt;link;</span><br><span class="line">p-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">p=r;<span class="comment">//r保存原来的结点顺序</span></span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">r = p-&gt;link;<span class="comment">//r继续取下一个结点</span></span><br><span class="line">pre = L-&gt;head;<span class="comment">//pre重新构造L,从头开始循环</span></span><br><span class="line"><span class="keyword">while</span>(pre-&gt;link != <span class="literal">NULL</span> &amp;&amp; pre-&gt;link-&gt;<span class="built_in">exp</span> &lt; p-&gt;<span class="built_in">exp</span>)  </span><br><span class="line">            <span class="comment">// 如果链表非空 且 新链表与当前结点数值比较</span></span><br><span class="line">pre = pre-&gt;link;</span><br><span class="line">        <span class="comment">//如果当前要插入的结点值大于循环中当前已排序结点,则取已排序链表下一个结点继续比较</span></span><br><span class="line">p-&gt;link = pre-&gt;link;    </span><br><span class="line">        <span class="comment">//找到p要插入的位置后,插入:若3&lt;pre=5&lt;bigger=7&lt;8,p=6,则 p=&gt;bigger</span></span><br><span class="line">pre-&gt;link = p;<span class="comment">// pre=&gt;p,插入即可</span></span><br><span class="line">p=r;<span class="comment">// p继续取下个结点依次按原来顺序循环遍历原来链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Add</span><span class="params">(polynominal *px,polynominal *qx)</span></span>&#123;<span class="comment">//目的:将q改成p+q</span></span><br><span class="line">PNode *q1=qx-&gt;head, *p=px-&gt;head-&gt;link;<span class="comment">//q1指向qx表头结点</span></span><br><span class="line">PNode *q=q1-&gt;link;<span class="comment">//p指向多项式px第一个结点,q指向qx第一个</span></span><br><span class="line">PNode *temp = <span class="literal">NULL</span>;<span class="comment">//q1是q前驱</span></span><br><span class="line"><span class="keyword">while</span>( q &amp;&amp; p)&#123;</span><br><span class="line"><span class="keyword">while</span>( p-&gt;<span class="built_in">exp</span> &lt; q-&gt;<span class="built_in">exp</span> )&#123;<span class="comment">//找到qx中 大于等于q指数项的项,q不断右移</span></span><br><span class="line">q1 = q;</span><br><span class="line">q = q-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;<span class="built_in">exp</span> == q-&gt;<span class="built_in">exp</span> )&#123;</span><br><span class="line">q-&gt;ceof = q-&gt;ceof + p-&gt;ceof;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;ceof == <span class="number">0</span>)&#123;</span><br><span class="line">q1-&gt;link = q-&gt;link;<span class="comment">//释放当前q的内存</span></span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">q = q1-&gt;link;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//p\q都右移</span></span><br><span class="line">q1 = q;<span class="comment">//q1</span></span><br><span class="line">q = q-&gt;link;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//p-&gt;exp &gt; q-&gt;exp </span></span><br><span class="line">temp = (PNode * )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">temp-&gt;ceof = p-&gt;ceof;</span><br><span class="line">temp-&gt;<span class="built_in">exp</span> = p-&gt;<span class="built_in">exp</span>;</span><br><span class="line">temp-&gt;link = q1-&gt;link;</span><br><span class="line">q1-&gt;link = temp;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">PNode *q = p-&gt;head-&gt;link;</span><br><span class="line"><span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>( q!=<span class="literal">NULL</span> )&#123;</span><br><span class="line"><span class="keyword">if</span>(q-&gt;link == <span class="literal">NULL</span>) last =<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dx^%d"</span>, q-&gt;ceof,q-&gt;<span class="built_in">exp</span>);</span><br><span class="line"><span class="keyword">if</span>(!last) <span class="built_in">printf</span>(<span class="string">"+"</span>);</span><br><span class="line">q = q-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">PNode *q = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;head)&#123;</span><br><span class="line">q = p-&gt;head-&gt;link;</span><br><span class="line"><span class="built_in">free</span>(p-&gt;head);</span><br><span class="line">p-&gt;head = q;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********合并同类项*****************/</span></span><br><span class="line"><span class="comment">/***********合并即free*****************/</span></span><br><span class="line"><span class="function">Status <span class="title">unify</span><span class="params">(polynominal *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PNode *p=<span class="literal">NULL</span>;</span><br><span class="line">    PNode *q=<span class="literal">NULL</span>;</span><br><span class="line">    PNode *last=<span class="literal">NULL</span>;</span><br><span class="line">    PNode *tmp;</span><br><span class="line">    <span class="comment">//while(p-&gt;link != NULL)&#123;</span></span><br><span class="line">    <span class="keyword">for</span>(p=t-&gt;head-&gt;link;p!=<span class="literal">NULL</span>;p=p-&gt;link)&#123; <span class="comment">//选择</span></span><br><span class="line">        last = p;</span><br><span class="line">        <span class="keyword">for</span>(q=last-&gt;link; q!=<span class="literal">NULL</span> ; )&#123;  <span class="comment">//q指针向后推移指向下一结点</span></span><br><span class="line">        <span class="keyword">if</span>(q-&gt;<span class="built_in">exp</span> == p-&gt;<span class="built_in">exp</span>)&#123;<span class="comment">//相等计算</span></span><br><span class="line">            p-&gt;ceof += q-&gt;ceof;<span class="comment">//q为 滑动项</span></span><br><span class="line">            tmp = q-&gt;link;</span><br><span class="line">            last-&gt;link = q-&gt;link;     <span class="comment">//last保存上一个q   </span></span><br><span class="line">            <span class="built_in">free</span>(q);<span class="comment">// 吧q的空间释放掉</span></span><br><span class="line">            q= tmp;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        last= q;</span><br><span class="line">        q=q-&gt;link;&#125;<span class="comment">//如果不相等就判断下一个</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">polynominal <span class="title">Multiply</span><span class="params">(polynominal *px,polynominal *qx)</span></span>&#123;</span><br><span class="line">PNode *p = px-&gt;head;</span><br><span class="line">PNode *q = qx-&gt;head;</span><br><span class="line">PNode *x = <span class="literal">NULL</span>;</span><br><span class="line">PNode *tmp = <span class="literal">NULL</span>;</span><br><span class="line">polynominal newpoly;</span><br><span class="line">Init(&amp;newpoly);</span><br><span class="line">x = newpoly.head;</span><br><span class="line"><span class="keyword">for</span> (p=px-&gt;head-&gt;link; p!=<span class="literal">NULL</span>; p=p-&gt;link)&#123;</span><br><span class="line"><span class="keyword">for</span> (q=qx-&gt;head-&gt;link; q!=<span class="literal">NULL</span>; q=q-&gt;link)&#123;</span><br><span class="line">tmp = (PNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">tmp-&gt;ceof = p-&gt;ceof * q-&gt;ceof;</span><br><span class="line">tmp-&gt;<span class="built_in">exp</span> = p-&gt;<span class="built_in">exp</span> + q-&gt;<span class="built_in">exp</span>;</span><br><span class="line">tmp-&gt;link = x-&gt;link;<span class="comment">//新生成的结点指向上一个生成的结点的地址</span></span><br><span class="line">x-&gt;link = tmp;<span class="comment">//使链表记录当前tmp结点</span></span><br><span class="line">x = x-&gt;link;<span class="comment">//取下一个结点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">unify(&amp;newpoly);</span><br><span class="line">Sort(&amp;newpoly);</span><br><span class="line"><span class="keyword">return</span> newpoly;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">polynominal p,q;</span><br><span class="line">polynominal mul;</span><br><span class="line">Create(&amp;p);</span><br><span class="line">Output(&amp;p);</span><br><span class="line"><span class="comment">// printf("After unify:\n");Unify</span></span><br><span class="line"><span class="comment">// unify(&amp;p);</span></span><br><span class="line"><span class="comment">// Output(p);</span></span><br><span class="line">Create(&amp;q);</span><br><span class="line">Output(&amp;q);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"After Multiplied:\n"</span>);<span class="comment">//Mul</span></span><br><span class="line">mul = Multiply(&amp;p,&amp;q);</span><br><span class="line">Output(&amp;mul);</span><br><span class="line"></span><br><span class="line">Add(&amp;p,&amp;q);<span class="comment">//ADD</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"After added:"</span>);</span><br><span class="line">Output(&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;链表操作&quot;&gt;&lt;a href=&quot;#链表操作&quot; class=&quot;headerlink&quot; title=&quot;链表操作&quot;&gt;&lt;/a&gt;链表操作&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
      <category term="C" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实验2——二叉树的基本操作及哈夫曼编码译码系统的实现</title>
    <link href="https://nymrli.top/2018/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C2%E2%80%94%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E8%AF%91%E7%A0%81%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://nymrli.top/2018/12/28/数据结构实验2——二叉树的基本操作及哈夫曼编码译码系统的实现/</id>
    <published>2018-12-28T11:35:38.000Z</published>
    <updated>2018-12-28T11:40:12.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二叉树的遍历及计算"><a href="#二叉树的遍历及计算" class="headerlink" title="二叉树的遍历及计算"></a>二叉树的遍历及计算</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span></span><br><span class="line">T Data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">LChild</span>,*<span class="title">RChild</span>;</span></span><br><span class="line">&#125;BTNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">BTNode *root;</span><br><span class="line">&#125;BTTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*先序建树*/</span></span><br><span class="line"><span class="function">BTNode* <span class="title">PreCreateBt</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ch = getchar();</span><br><span class="line"><span class="keyword">if</span>( ch == <span class="string">'#'</span> ) t = <span class="literal">NULL</span>; </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">t = (BTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">t-&gt;Data = ch;</span><br><span class="line">t-&gt;LChild = PreCreateBt(t-&gt;LChild);</span><br><span class="line">t-&gt;RChild = PreCreateBt(t-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrebuildTree</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line">tree-&gt;root = PreCreateBt(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*先序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTransverse</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, t-&gt;Data);</span><br><span class="line">PreOrderTransverse(t-&gt;LChild);</span><br><span class="line">PreOrderTransverse(t-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreePreOrder</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) PreOrderTransverse(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*中序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTransverse</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">InOrderTransverse(t-&gt;LChild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, t-&gt;Data);</span><br><span class="line">InOrderTransverse(t-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeInOrder</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) InOrderTransverse(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*后序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AfterOrderTransverse</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">AfterOrderTransverse(t-&gt;LChild);</span><br><span class="line">AfterOrderTransverse(t-&gt;RChild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, t-&gt;Data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeAfterOrder</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) AfterOrderTransverse(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结点数目*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countNode</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( t != <span class="literal">NULL</span>) <span class="keyword">return</span> countNode(t-&gt;LChild)+countNode(t-&gt;RChild)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//如果t为空,则该t的父亲结点是子结点,该t结点不需要计数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Nodenum</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) <span class="keyword">return</span> countNode(tree-&gt;root);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*叶子结点数目*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countLeafNode</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( t != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>( t-&gt;LChild == <span class="literal">NULL</span> &amp;&amp; t-&gt;RChild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> countLeafNode(t-&gt;LChild)+countLeafNode(t-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//如果t为空,则该t的父亲结点是子结点,该t结点不需要计数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">leafNodenum</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) <span class="keyword">return</span> countLeafNode(tree-&gt;root);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*计算树的高度*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">coutTreeHeight</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> l = coutTreeHeight(t-&gt;LChild);</span><br><span class="line"><span class="keyword">int</span> r = coutTreeHeight(t-&gt;RChild);</span><br><span class="line"><span class="keyword">if</span> ( l &gt; r) <span class="keyword">return</span> l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> r+<span class="number">1</span>;</span><br><span class="line"><span class="comment">// return max(r,l)+1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TreeHeight</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) <span class="keyword">return</span> coutTreeHeight(tree-&gt;root);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*翻转整个二叉树(左右子树交换)*/</span></span><br><span class="line"><span class="function">BTNode* <span class="title">ReverseLeftRightChild</span><span class="params">(BTNode *t)</span></span>&#123;<span class="comment">//先序遍历</span></span><br><span class="line"> <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>( t-&gt;LChild!=<span class="literal">NULL</span> || t-&gt;RChild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">   BTNode *p,*q;</span><br><span class="line">p = ReverseLeftRightChild(t-&gt;LChild);</span><br><span class="line">q = ReverseLeftRightChild(t-&gt;RChild);</span><br><span class="line">t-&gt;LChild = q;</span><br><span class="line">t-&gt;RChild = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReverseBtree</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) ReverseLeftRightChild(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>&#123;</span><br><span class="line">BTTree tree;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"先序建树:"</span>);</span><br><span class="line">PrebuildTree(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n先序遍历:"</span>);</span><br><span class="line">TreePreOrder(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n中序遍历:"</span>);</span><br><span class="line">TreeInOrder(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n后序遍历:"</span>);</span><br><span class="line">TreeAfterOrder(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n结点数目:%d\n"</span>,Nodenum(&amp;tree));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n叶子结点数目:%d\n"</span>,leafNodenum(&amp;tree));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n树的高度:%d\n"</span>,TreeHeight(&amp;tree));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"翻转二叉树:\n"</span>);</span><br><span class="line">ReverseBtree(&amp;tree);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n后序遍历:"</span>);</span><br><span class="line">TreeAfterOrder(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> n 5           <span class="comment">//叶子数目</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> m (2*n-1)     <span class="comment">//结点总数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxval 10000.0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100   <span class="comment">//哈夫曼编码的最大位数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"> <span class="keyword">char</span> ch;</span><br><span class="line"> <span class="keyword">float</span> weight;</span><br><span class="line"> <span class="keyword">int</span> lchild,rchild,parent;</span><br><span class="line">&#125;hufmtree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"> <span class="keyword">char</span> bits[n];   <span class="comment">//位串</span></span><br><span class="line"> <span class="keyword">int</span> start;      <span class="comment">//编码在位串中的起始位置</span></span><br><span class="line"> <span class="keyword">char</span> ch;        <span class="comment">//字符</span></span><br><span class="line">&#125;codetype;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//建立哈夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">huffman</span><span class="params">(hufmtree tree[])</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i,j,p1,p2;<span class="comment">//p1,p2分别记住每次合并时 权值最小 和 次小 的两个根结点的下标</span></span><br><span class="line">   <span class="keyword">float</span> small1,small2,f;</span><br><span class="line">   <span class="keyword">char</span> c;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;    <span class="comment">//初始化</span></span><br><span class="line">    tree[i].parent=<span class="number">0</span>;</span><br><span class="line">    tree[i].lchild=<span class="number">-1</span>;</span><br><span class="line">    tree[i].rchild=<span class="number">-1</span>;</span><br><span class="line">    tree[i].weight=<span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;        <span class="comment">//读入前n个叶子结点的字符及权值</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"输入第%d个字符为和权值:"</span>,i+<span class="number">1</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%c %f"</span>,&amp;c,&amp;f);</span><br><span class="line">      getchar();</span><br><span class="line">      tree[i].ch=c;</span><br><span class="line">      tree[i].weight=f;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">for</span>(i=n;i&lt;m;i++)&#123;               <span class="comment">//进行n-1次合并，产生n-1个新结点</span></span><br><span class="line">    p1=<span class="number">0</span>;p2=<span class="number">0</span>;</span><br><span class="line">    small1=maxval;small2=maxval;   <span class="comment">//maxval是float类型的最大值</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)               <span class="comment">//选出两个权值最小的根结点</span></span><br><span class="line">     <span class="keyword">if</span>(tree[j].parent==<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">if</span>(tree[j].weight&lt;small1)&#123;</span><br><span class="line">       small2=small1;               <span class="comment">//改变最小权、次小权及对应的位置</span></span><br><span class="line">       small1=tree[j].weight;</span><br><span class="line">       p2=p1;</span><br><span class="line">       p1=j;</span><br><span class="line">      &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(tree[j].weight&lt;small2)&#123;</span><br><span class="line">          small2=tree[j].weight;  <span class="comment">//改变次小权及位置</span></span><br><span class="line">          p2=j;</span><br><span class="line">        &#125;</span><br><span class="line">    tree[p1].parent=i;</span><br><span class="line">    tree[p2].parent=i;</span><br><span class="line">    tree[i].lchild=p1;  <span class="comment">//最小权根结点是新结点的左孩子</span></span><br><span class="line">    tree[i].rchild=p2;  <span class="comment">//次小权根结点是新结点的右孩子</span></span><br><span class="line">    tree[i].weight=tree[p1].weight+tree[p2].weight;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;<span class="comment">//huffman</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据哈夫曼树求出哈夫曼编码</span></span><br><span class="line"><span class="comment">//codetype code[]为求出的哈夫曼编码</span></span><br><span class="line"><span class="comment">//hufmtree tree[]为已知的哈夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">huffmancode</span><span class="params">(codetype code[],hufmtree tree[])</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i,c,p;               </span><br><span class="line">   codetype cd;               <span class="comment">//缓冲变量</span></span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">      cd.start=n;</span><br><span class="line">      cd.ch=tree[i].ch;</span><br><span class="line">      c=i;                      <span class="comment">//从叶结点出发向上回溯</span></span><br><span class="line">      p=tree[i].parent;         <span class="comment">//tree[p]是tree[i]的双亲</span></span><br><span class="line">      <span class="keyword">while</span>(p!=<span class="number">0</span>)&#123;</span><br><span class="line">         cd.start--;</span><br><span class="line">         <span class="keyword">if</span>(tree[p].lchild==c) cd.bits[cd.start]=<span class="string">'0'</span>;   </span><br><span class="line">         <span class="comment">//tree[i]是左子树，生成代码'0'</span></span><br><span class="line">         <span class="keyword">else</span> cd.bits[cd.start]=<span class="string">'1'</span>;   </span><br><span class="line">         <span class="comment">//tree[i]是右子树，生成代码'1'</span></span><br><span class="line">         c=p;</span><br><span class="line">         p=tree[p].parent;</span><br><span class="line">      &#125;</span><br><span class="line">      code[i]=cd;    <span class="comment">//第i+1个字符的编码存入code[i]</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;<span class="comment">//huffmancode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//哈夫曼树译码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(hufmtree tree[])</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i,j;</span><br><span class="line">   <span class="keyword">char</span> b[maxsize];</span><br><span class="line">   i=m<span class="number">-1</span>;             <span class="comment">//从根结点开始往下搜索</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"输入发送的编码(以'#'为结束标志)："</span>);</span><br><span class="line">   gets(b);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"译码后的字符为"</span>);</span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">0</span>;b[j]!=<span class="string">'#'</span>;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(b[j]==<span class="string">'0'</span>) i=tree[i].lchild;         <span class="comment">//走向左孩子</span></span><br><span class="line">      <span class="keyword">else</span> i=tree[i].rchild;                  <span class="comment">//走向右孩子</span></span><br><span class="line">      <span class="keyword">if</span>(tree[i].lchild==<span class="number">-1</span>) &#123;                <span class="comment">//tree[i]是叶结点</span></span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%c"</span>,tree[i].ch);</span><br><span class="line">       i=m<span class="number">-1</span>;                                 <span class="comment">//回到根结点</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(tree[i].lchild!=<span class="number">-1</span> &amp;&amp; b[j]!= <span class="string">'#'</span>)   <span class="comment">//电文读完，但尚未到叶子结点</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\nERROR\n"</span>);               <span class="comment">//输入电文有错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(hufmtree tree[],codetype code[])</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i,j;<span class="comment">//循环变量</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"【哈夫曼编码】\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"总共有%d个字符\n"</span>,n);</span><br><span class="line">  huffman(tree);<span class="comment">//建立哈夫曼树</span></span><br><span class="line">  huffmancode(code,tree);<span class="comment">//根据哈夫曼树求出哈夫曼编码</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"【输出每个字符的哈夫曼编码】\n"</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c: "</span>,code[i].ch);</span><br><span class="line">  <span class="keyword">for</span>(j=code[i].start;j&lt;n;j++)</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c"</span>,code[i].bits[j]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> hufmtree tree[m];</span><br><span class="line"> codetype code[n];</span><br><span class="line"> input(tree,code);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"【哈夫曼译码】\n"</span>);</span><br><span class="line"> decode(tree);<span class="comment">//依次读入电文，根据哈夫曼树译码</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二叉树的遍历及计算&quot;&gt;&lt;a href=&quot;#二叉树的遍历及计算&quot; class=&quot;headerlink&quot; title=&quot;二叉树的遍历及计算&quot;&gt;&lt;/a&gt;二叉树的遍历及计算&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="C" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实验4——各种内排序算法的实现及性能比较</title>
    <link href="https://nymrli.top/2018/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C4%E2%80%94%E2%80%94%E5%90%84%E7%A7%8D%E5%86%85%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/"/>
    <id>https://nymrli.top/2018/12/28/数据结构实验4——各种内排序算法的实现及性能比较/</id>
    <published>2018-12-28T11:20:19.000Z</published>
    <updated>2019-01-17T12:58:35.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**生成随机数**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RandCreate</span><span class="params">(<span class="keyword">int</span> *a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        a[i] = <span class="number">1</span> + (rand()%<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***交换数组中,两个下标的值***/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    tmp = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单选择排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**简单选择排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minx,i,j;</span><br><span class="line">    <span class="keyword">for</span> (i= <span class="number">0</span>; i &lt; N<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">        minx = i;   <span class="comment">//默认标记为每次第一位元素下标</span></span><br><span class="line">        <span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; N; ++j) <span class="keyword">if</span>( l[minx] &gt; l[j] ) minx = j;</span><br><span class="line">        <span class="keyword">if</span>( minx != i) Swap(l,minx,i); <span class="comment">//判断起始位置是否为最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**直接插入排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;                                 <span class="comment">//i标识待插入元素下标</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt; N;i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> insertItem = l[i];              <span class="comment">//标记每次第一位元素</span></span><br><span class="line">        <span class="keyword">for</span>(j = i<span class="number">-1</span>;j &gt;= <span class="number">0</span>;j --)&#123;</span><br><span class="line">            <span class="comment">//不断将有序序列中元素向后移动,为待插入元素空出一个位置</span></span><br><span class="line">            <span class="keyword">if</span>(insertItem &lt; l[j]) l[j+<span class="number">1</span>] = l[j];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        l[j+<span class="number">1</span>] = insertItem;          <span class="comment">//待插入元素有序存放至有序序列中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="comment">//i标识每趟排序范围最后一个元素下标,每趟排序元素下标范围是0~i</span></span><br><span class="line">    <span class="keyword">for</span>(i = N<span class="number">-1</span>;i &gt; <span class="number">0</span>;i --)&#123;</span><br><span class="line">        <span class="keyword">int</span> isSwap = <span class="number">0</span>;         <span class="comment">//教材错误,应该放到第二层循环前</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j&lt;i;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l[j] &gt; l[j+<span class="number">1</span>])&#123;</span><br><span class="line">                Swap(l,j,j+<span class="number">1</span>);</span><br><span class="line">                isSwap = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isSwap) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//如果本趟排序没有发生元素交换,则直接可以认为排序已完成</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//序列划分方法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = low,j = high + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pivot = l[low];                 <span class="comment">//pivot是分割元素</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">do</span> i++;</span><br><span class="line">        <span class="keyword">while</span>(l[i] &lt; pivot);      <span class="comment">//i前进</span></span><br><span class="line">        <span class="keyword">do</span> j--;</span><br><span class="line">        <span class="keyword">while</span>(l[j] &gt; pivot);      <span class="comment">//j前进</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) Swap(l,i,j);</span><br><span class="line">    &#125;<span class="keyword">while</span>(i &lt; j);</span><br><span class="line">    Swap(l,low,j);</span><br><span class="line">    <span class="keyword">return</span> j;                                   <span class="comment">//此时j是分割元素下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;   <span class="comment">//快速排序的递归函数</span></span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">if</span>(low &lt; high)&#123;                            <span class="comment">//当前待排序序列至少包含2个元素</span></span><br><span class="line">        k = Partition(l,low,high);</span><br><span class="line">        QuickSort(l,low,k<span class="number">-1</span>);</span><br><span class="line">        QuickSort(l,k+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="comment">//快速排序算法的主调用函数</span></span><br><span class="line">    QuickSort(l,<span class="number">0</span>,N<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两路合并排序"><a href="#两路合并排序" class="headerlink" title="两路合并排序"></a>两路合并排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Merge函数,参考了陈慧南老师的《数据结构——C语言描述》教材</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> Temp[],<span class="keyword">int</span> i1,<span class="keyword">int</span> j1,<span class="keyword">int</span> i2,<span class="keyword">int</span> j2,<span class="keyword">int</span> *k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = i1,j = i2;</span><br><span class="line">    <span class="keyword">while</span>((i &lt;= j1)&amp;&amp;(j&lt;=j2))&#123;                       <span class="comment">//若两个子序列都不空,则循环</span></span><br><span class="line">        <span class="keyword">if</span>(l[i] &lt;= l[j])&#123;</span><br><span class="line">            Temp[(*k)++] = l[i++];         <span class="comment">//将较小元素存入Temp[*k]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> Temp[(*k)++] = l[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= j1) Temp[(*k)++] = l[i++];  <span class="comment">//将子序列1中剩余元素存入Temp</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= j2) Temp[(*k)++] = l[j++];  <span class="comment">//将子序列2中剩余元素存入Temp</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//MergeSort函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Temp[N];</span><br><span class="line">    <span class="keyword">int</span> i1,j1,i2,j2,i,k,size = <span class="number">1</span>;              </span><br><span class="line">    <span class="comment">//i1,j1和i2,j2分别是两个子序列的上,下界</span></span><br><span class="line">    <span class="keyword">while</span>(size &lt; N)&#123;</span><br><span class="line">        i1 = <span class="number">0</span>;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i1+size &lt; N)&#123;              </span><br><span class="line">            <span class="comment">//若i1+size &lt; n,则说明存在两个子序列,需要再两两合并</span></span><br><span class="line">            i2 = i1+size;                      <span class="comment">//确定子序列2的下界和子序列1的上界</span></span><br><span class="line">            j1 = i2<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i2+size<span class="number">-1</span> &gt; N<span class="number">-1</span>)&#123;         <span class="comment">//设置子序列2的上界</span></span><br><span class="line">                j2 = N<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> j2 = i2+size<span class="number">-1</span>;</span><br><span class="line">            Merge(l,Temp,i1,j1,i2,j2,&amp;k);  <span class="comment">//合并相邻两个子序列</span></span><br><span class="line">            i1 = j2+<span class="number">1</span>;                        <span class="comment">//确定下一次合并第一个子序列的下界</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; k;i ++)&#123;</span><br><span class="line">            l[i] = Temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        size *= <span class="number">2</span>;                            <span class="comment">//子序列长度扩大一倍</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">heap</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">&#125;heap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**向下调整为最大堆**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustHeap</span><span class="params">(<span class="keyword">int</span> Heap[],<span class="keyword">int</span> s,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = Heap[s];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*s+<span class="number">1</span>;j &lt;= m; j *= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; m &amp;&amp;Heap[j] &lt; Heap[j+<span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; Heap[j]) <span class="keyword">break</span>;</span><br><span class="line">        Heap[s] = Heap[j];</span><br><span class="line">        s = j;</span><br><span class="line">    &#125;</span><br><span class="line">    Heap[s] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**建堆**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHeap</span><span class="params">(<span class="keyword">int</span> *heap,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = (n<span class="number">-2</span>)/<span class="number">2</span>;i &gt;= <span class="number">0</span>;i --) AdjustHeap(heap,i,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**堆初始化**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapInit</span><span class="params">(heap *hp,<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    hp-&gt;n = n;</span><br><span class="line">    hp-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(<span class="keyword">int</span>) *n);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>;i &lt; n;i ++) hp-&gt;data[i] = a[i];</span><br><span class="line">    CreateHeap(hp-&gt;data ,N<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**堆排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(heap *hp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i=hp-&gt;n/<span class="number">2</span> ; i&gt;<span class="number">0</span> ;i--) AdjustHeap(hp-&gt;data,i,hp-&gt;n);</span><br><span class="line">    <span class="keyword">for</span>( i = hp-&gt; n<span class="number">-1</span> ;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        Swap( hp-&gt;data,<span class="number">0</span>,i);</span><br><span class="line">        AdjustHeap(hp-&gt;data,<span class="number">0</span>,i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲向下调整法====&gt; 建堆 … 给一堆数据,一次性建堆</p><p>▲向上调整法====&gt; 在已经是最小或最大堆的基础上,增加一个节点,仍保持为最大或最小堆</p><h2 id="总体代码"><a href="#总体代码" class="headerlink" title="总体代码"></a>总体代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RandCreate</span><span class="params">(<span class="keyword">int</span> *a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        a[i] = <span class="number">1</span> + (rand()%<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***交换数组中,两个下标的值***/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    tmp = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**简单选择排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minx,i,j;</span><br><span class="line">    <span class="keyword">for</span> (i= <span class="number">0</span>; i &lt; N<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">        minx = i;   <span class="comment">//默认标记为每次第一位元素下标</span></span><br><span class="line">        <span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; N; ++j) <span class="keyword">if</span>( l[minx] &gt; l[j] ) minx = j;</span><br><span class="line">        <span class="keyword">if</span>( minx != i) Swap(l,minx,i); <span class="comment">//判断起始位置是否为最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**直接插入排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;                                 <span class="comment">//i标识待插入元素下标</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt; N;i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> insertItem = l[i];              <span class="comment">//标记每次第一位元素</span></span><br><span class="line">        <span class="keyword">for</span>(j = i<span class="number">-1</span>;j &gt;= <span class="number">0</span>;j --)&#123;</span><br><span class="line">            <span class="comment">//不断将有序序列中元素向后移动,为待插入元素空出一个位置</span></span><br><span class="line">            <span class="keyword">if</span>(insertItem &lt; l[j]) l[j+<span class="number">1</span>] = l[j];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        l[j+<span class="number">1</span>] = insertItem;          <span class="comment">//待插入元素有序存放至有序序列中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**冒泡排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="comment">//i标识每趟排序范围最后一个元素下标,每趟排序元素下标范围是0~i</span></span><br><span class="line">    <span class="keyword">for</span>(i = N<span class="number">-1</span>;i &gt; <span class="number">0</span>;i --)&#123;</span><br><span class="line">        <span class="keyword">int</span> isSwap = <span class="number">0</span>;         <span class="comment">//教材错误,应该放到第二层循环前</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j&lt;i;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l[j] &gt; l[j+<span class="number">1</span>])&#123;</span><br><span class="line">                Swap(l,j,j+<span class="number">1</span>);</span><br><span class="line">                isSwap = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isSwap) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//如果本趟排序没有发生元素交换,则直接可以认为排序已完成</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**快速排序**/</span></span><br><span class="line"><span class="comment">//序列划分方法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = low,j = high + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pivot = l[low];                 <span class="comment">//pivot是分割元素</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">do</span> i++;</span><br><span class="line">        <span class="keyword">while</span>(l[i] &lt; pivot);      <span class="comment">//i前进</span></span><br><span class="line">        <span class="keyword">do</span> j--;</span><br><span class="line">        <span class="keyword">while</span>(l[j] &gt; pivot);      <span class="comment">//j前进</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) Swap(l,i,j);</span><br><span class="line">    &#125;<span class="keyword">while</span>(i &lt; j);</span><br><span class="line">    Swap(l,low,j);</span><br><span class="line">    <span class="keyword">return</span> j;                                   <span class="comment">//此时j是分割元素下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;   <span class="comment">//快速排序的递归函数</span></span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">if</span>(low &lt; high)&#123;                            <span class="comment">//当前待排序序列至少包含2个元素</span></span><br><span class="line">        k = Partition(l,low,high);</span><br><span class="line">        QuickSort(l,low,k<span class="number">-1</span>);</span><br><span class="line">        QuickSort(l,k+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="comment">//快速排序算法的主调用函数</span></span><br><span class="line">    QuickSort(l,<span class="number">0</span>,N<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**快速排序**/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**两路合并排序**/</span></span><br><span class="line"><span class="comment">//Merge函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> Temp[],<span class="keyword">int</span> i1,<span class="keyword">int</span> j1,<span class="keyword">int</span> i2,<span class="keyword">int</span> j2,<span class="keyword">int</span> *k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = i1,j = i2;</span><br><span class="line">    <span class="keyword">while</span>((i &lt;= j1)&amp;&amp;(j&lt;=j2))&#123;                       <span class="comment">//若两个子序列都不空,则循环</span></span><br><span class="line">        <span class="keyword">if</span>(l[i] &lt;= l[j])&#123;</span><br><span class="line">            Temp[(*k)++] = l[i++];         <span class="comment">//将较小元素存入Temp[*k]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> Temp[(*k)++] = l[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= j1) Temp[(*k)++] = l[i++];  <span class="comment">//将子序列1中剩余元素存入Temp</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= j2) Temp[(*k)++] = l[j++];  <span class="comment">//将子序列2中剩余元素存入Temp</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//MergeSort函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Temp[N];</span><br><span class="line">    <span class="keyword">int</span> i1,j1,i2,j2,i,k,size = <span class="number">1</span>;              <span class="comment">//i1,j1和i2,j2分别是两个子序列的上,下界</span></span><br><span class="line">    <span class="keyword">while</span>(size &lt; N)&#123;</span><br><span class="line">        i1 = <span class="number">0</span>;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i1+size &lt; N)&#123;              <span class="comment">//若i1+size &lt; n,则说明存在两个子序列,需要再两两合并</span></span><br><span class="line">            i2 = i1+size;                      <span class="comment">//确定子序列2的下界和子序列1的上界</span></span><br><span class="line">            j1 = i2<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i2+size<span class="number">-1</span> &gt; N<span class="number">-1</span>)&#123;         <span class="comment">//设置子序列2的上界</span></span><br><span class="line">                j2 = N<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> j2 = i2+size<span class="number">-1</span>;</span><br><span class="line">            Merge(l,Temp,i1,j1,i2,j2,&amp;k);  <span class="comment">//合并相邻两个子序列</span></span><br><span class="line">            i1 = j2+<span class="number">1</span>;                        <span class="comment">//确定下一次合并第一个子序列的下界</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; k;i ++)&#123;</span><br><span class="line">            l[i] = Temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        size *= <span class="number">2</span>;                            <span class="comment">//子序列长度扩大一倍</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**两路合并排序**/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****堆排序*****/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">heap</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">&#125;heap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**向下调整为最大堆**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustHeap</span><span class="params">(<span class="keyword">int</span> Heap[],<span class="keyword">int</span> s,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = Heap[s];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*s+<span class="number">1</span>;j &lt;= m; j *= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; m &amp;&amp;Heap[j] &lt; Heap[j+<span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; Heap[j]) <span class="keyword">break</span>;</span><br><span class="line">        Heap[s] = Heap[j];</span><br><span class="line">        s = j;</span><br><span class="line">    &#125;</span><br><span class="line">    Heap[s] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**建堆**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHeap</span><span class="params">(<span class="keyword">int</span> *heap,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = (n<span class="number">-2</span>)/<span class="number">2</span>;i &gt;= <span class="number">0</span>;i --) AdjustHeap(heap,i,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**堆初始化**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapInit</span><span class="params">(heap *hp,<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    hp-&gt;n = n;</span><br><span class="line">    hp-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(<span class="keyword">int</span>) *n);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>;i &lt; n;i ++) hp-&gt;data[i] = a[i];</span><br><span class="line">    CreateHeap(hp-&gt;data ,N<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**堆排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(heap *hp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i=hp-&gt;n/<span class="number">2</span> ; i&gt;<span class="number">0</span> ;i--) AdjustHeap(hp-&gt;data,i,hp-&gt;n);</span><br><span class="line">    <span class="keyword">for</span>( i = hp-&gt; n<span class="number">-1</span> ;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        Swap( hp-&gt;data,<span class="number">0</span>,i);</span><br><span class="line">        AdjustHeap(hp-&gt;data,<span class="number">0</span>,i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*****堆排序*****/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    srand(time( <span class="literal">NULL</span> ));</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">6</span>][N];</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    RandCreate(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">6</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">            a[i][j] = a[<span class="number">0</span>][j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start1 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    SelectSort(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">double</span> end1 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff1 = difftime(end1,start1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"简单选择排序时间:"</span>,diff1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start2 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    InsertSort(a[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">double</span> end2 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff2 = difftime(end2,start2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"直接插入排序时间:"</span>,diff2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start3 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    BubbleSort(a[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">double</span> end3 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff3 = difftime(end3,start3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"冒泡排序时间:"</span>,diff3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start5 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    MergeSort(a[<span class="number">4</span>]);</span><br><span class="line">    <span class="keyword">double</span> end5 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff5 = difftime(end5,start5);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"两路排序时间:"</span>,diff5);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start4 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    QSort(a[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">double</span> end4 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff4 = difftime(end4,start4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"快速排序时间:"</span>,diff4);</span><br><span class="line"></span><br><span class="line">    heap hp;</span><br><span class="line">    heapInit(&amp;hp,a[<span class="number">5</span>],N);</span><br><span class="line">    <span class="keyword">double</span> start6 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    HeapSort(&amp;hp);</span><br><span class="line">    <span class="keyword">double</span> end6 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff6 = difftime(end6,start6);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"堆排序时间:"</span>,diff6);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="关于堆排序的理解"><a href="#关于堆排序的理解" class="headerlink" title="关于堆排序的理解"></a>关于堆排序的理解</h2><p>限选课对堆排的没有要求,但是在实验中涉及了。平时也没怎么看过堆排序，所以这次写的时候出现了理解上的错误，在此记下：</p><blockquote><p>向上和向下调整法的区别:</p><p>区别在于用途不一样，而不是 生成最小堆和最大堆的区别</p><ul><li><p>向下调整法====&gt; 建堆 … 给一堆数据,一次性建堆</p></li><li><p>向上调整法====&gt; 在已经是最小或最大堆的基础上,增加一个节点,仍保持为最大或最小堆</p></li></ul><p>具体而言：</p><p>给定一个乱序的数组，要构建最小或最大堆==&gt; 向下调整</p><p>已经是个最大或最小堆的数组,插入或删除一个元素，仍要保持最小堆 ;优先权队列===&gt; 向上调整</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最大堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustHeap</span><span class="params">(<span class="keyword">int</span> Heap[],<span class="keyword">int</span> s,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = Heap[s];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*s+<span class="number">1</span>;j &lt;= m; j *= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; m &amp;&amp;Heap[j] &lt; Heap[j+<span class="number">1</span>])&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; Heap[j])&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Heap[s] = Heap[j];</span><br><span class="line">        s = j;</span><br><span class="line">    &#125;</span><br><span class="line">    Heap[s] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区别在于<strong>第5行和第8行</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最小堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustHeap</span><span class="params">(<span class="keyword">int</span> Heap[],<span class="keyword">int</span> s,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = Heap[s];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*s+<span class="number">1</span>;j &lt;= m; j = j*<span class="number">2</span>+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; m &amp;&amp;Heap[j] &gt; Heap[j+<span class="number">1</span>])&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp &lt; Heap[j])&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Heap[s] = Heap[j];</span><br><span class="line">        s = j;</span><br><span class="line">    &#125;</span><br><span class="line">    Heap[s] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建堆的执行过程大致是: <code>CreateHeap</code>函数从下往上建，即从[s,m]==&gt;[s-1,m],在保证从s到m是最小堆后,再用向下调整法使[s-1,m]也成为堆。</p><p>向下调整的过程： 从s–&gt;m,依次调整</p><p>总的逻辑是，由于要使左子树和右子树满足要求，所以需要从下往上调整。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;部分代码&quot;&gt;&lt;a href=&quot;#部分代码&quot; class=&quot;headerlink&quot; title=&quot;部分代码&quot;&gt;&lt;/a&gt;部分代码&lt;/h2&gt;&lt;h3 id=&quot;辅助函数&quot;&gt;&lt;a href=&quot;#辅助函数&quot; class=&quot;headerlink&quot; title=&quot;辅助函数&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="C" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>南邮《信号与系统B》复习知识点大纲</title>
    <link href="https://nymrli.top/2018/12/26/%E5%8D%97%E9%82%AE%E3%80%8A%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9FB%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%A7%E7%BA%B2/"/>
    <id>https://nymrli.top/2018/12/26/南邮《信号与系统B》复习知识点大纲/</id>
    <published>2018-12-26T14:15:36.000Z</published>
    <updated>2018-12-28T12:08:06.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h2><p>请将图片右键另存为，保存到本地放大查看。</p><h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><p><img src="/2018/12/26/南邮《信号与系统B》复习知识点大纲/第一章.jpg" alt="信号与系统--第一章 (南邮果粒橙)"></p><hr><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><p><img src="/2018/12/26/南邮《信号与系统B》复习知识点大纲/第二章.jpg" alt="信号与系统——第二章 (南邮果粒橙)"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;友情提示&quot;&gt;&lt;a href=&quot;#友情提示&quot; class=&quot;headerlink&quot; title=&quot;友情提示&quot;&gt;&lt;/a&gt;友情提示&lt;/h2&gt;&lt;p&gt;请将图片右键另存为，保存到本地放大查看。&lt;/p&gt;
&lt;h3 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="学业" scheme="https://nymrli.top/tags/%E5%AD%A6%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>不蒜子统计阅读次数失效——Cxo主题</title>
    <link href="https://nymrli.top/2018/12/26/%E4%B8%8D%E8%92%9C%E5%AD%90%E7%BB%9F%E8%AE%A1%E9%98%85%E8%AF%BB%E6%AC%A1%E6%95%B0%E5%A4%B1%E6%95%88/"/>
    <id>https://nymrli.top/2018/12/26/不蒜子统计阅读次数失效/</id>
    <published>2018-12-26T00:57:37.000Z</published>
    <updated>2018-12-26T01:11:43.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方通知"><a href="#官方通知" class="headerlink" title="官方通知"></a>官方通知</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ！！！！2018年9月 - 重要提示 ！！！！大家好，因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』！因我是最早的一批七牛用户，为七牛至少带来了数百个邀请用户，很痛心，很无奈！各位继续使用不蒜子提供的服务，只需把原有的：&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;域名改一下即可：&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;只需要修改该js域名，其他均未改变。若有疑问，可以加入不蒜子交流QQ群：`419260983`，对您带来的不便，非常抱歉！！！还是那句话，不蒜子不会中断服务！！！！</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a></p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>由于定位到是<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a>统计功能突然有问题了，所以前往<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子官网</a>进行查看，发现官网有一段很重要的提示：<br> <strong>“因七牛强制过期『dn-lbstatics.qbox.me』域名，与客服沟通无果，只能更换域名到『busuanzi.ibruce.info』！”</strong><br> 所以定位到问题，原来是不蒜子使用的七牛的域名被强制过期。<br> 需要把 dn-lbstatics.qbox.me 域名更换为 busuanzi.ibruce.info</p><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><h4 id="找到含busuanzi插件设置的文件"><a href="#找到含busuanzi插件设置的文件" class="headerlink" title="找到含busuanzi插件设置的文件"></a>找到含busuanzi插件设置的文件</h4><p><img src="/2018/12/26/不蒜子统计阅读次数失效/1.jpg" alt="1"></p><h4 id="修改指向的网址"><a href="#修改指向的网址" class="headerlink" title="修改指向的网址"></a>修改指向的网址</h4><p><img src="/2018/12/26/不蒜子统计阅读次数失效/2.jpg" alt="2"></p><h4 id="修改完后"><a href="#修改完后" class="headerlink" title="修改完后"></a>修改完后</h4><p><img src="/2018/12/26/不蒜子统计阅读次数失效/3.jpg" alt="3"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;官方通知&quot;&gt;&lt;a href=&quot;#官方通知&quot; class=&quot;headerlink&quot; title=&quot;官方通知&quot;&gt;&lt;/a&gt;官方通知&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu下Sublime配置python编译环境及新手使用指导</title>
    <link href="https://nymrli.top/2018/12/26/Ubuntu%E4%B8%8BSublime%E9%85%8D%E7%BD%AEpython%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E6%96%B0%E6%89%8B%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC/"/>
    <id>https://nymrli.top/2018/12/26/Ubuntu下Sublime配置python编译环境及新手使用指导/</id>
    <published>2018-12-26T00:41:18.000Z</published>
    <updated>2018-12-26T00:45:21.407Z</updated>
    
    <content type="html"><![CDATA[<p>####Sublime下配置python编译环境及搭建虚拟环境:(windows下大致相同)</p><h4 id="1-编译环境配置"><a href="#1-编译环境配置" class="headerlink" title="1.编译环境配置"></a>1.编译环境配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = &apos;6f4c264a24d933ce70df5dedcf1dcaee&apos; + &apos;ebe013ee18cced0ef93d5f746d80ef60&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)</span><br></pre></td></tr></table></figure><p>1.点击 <a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">官方网址</a> 从 Sublime Text 3 官方获取用于安装的代码。从菜单栏View –&gt;Show Console或者使用Ctrl+`(esc键下面的按键)，调出sublime的控制台，将官网中的python代码粘贴进去并按Enter执行，最终可以安装完成。在控制台中粘贴刚才的代码，然后点击回车。最后重启ST3。<br>2.现在你可以通过快捷键 cmd+shift+P 打开 Package Control 来安装其他的插件了。输入 install 然后你就能看见屏幕上出现了 Package Control: Install Package，点击回车,然后搜索sublimeREPL</p><p><img src="/2018/12/26/Ubuntu下Sublime配置python编译环境及新手使用指导/1.png" alt="1"></p><p>安装成功后，可以在菜单栏的’TOOL’中找到SublimeREPL，如图所示</p><p><img src="/2018/12/26/Ubuntu下Sublime配置python编译环境及新手使用指导/2.png" alt=""></p><h4 id="2-将菜单栏改为中文"><a href="#2-将菜单栏改为中文" class="headerlink" title="2.将菜单栏改为中文"></a>2.将菜单栏改为中文</h4><hr><p>若需要将菜单栏改成中文可如上操作下载插件“ConvertToUTF8”或是安装插件“ChineseLocalizations”(本人使用的是这个，没试ConvertToUTF8的效果)</p><p><img src="/2018/12/26/Ubuntu下Sublime配置python编译环境及新手使用指导/3.png" alt=""></p><p>(参考博客:<a href="http://blog.51cto.com/11970781/2087971" target="_blank" rel="noopener">http://blog.51cto.com/11970781/2087971</a>)</p><h4 id="3-安装Anaconda插件"><a href="#3-安装Anaconda插件" class="headerlink" title="3.安装Anaconda插件"></a>3.安装Anaconda插件</h4><hr><blockquote><p>1.点击刚刚生成的Package Control -&gt;输入install<br>2.进入安装界面，安装好后再在新窗口命令行中输入Anaconda并点击第一个备选项进行安装。 安装完成后会显示messages文档。</p></blockquote><p>安装Anaconda插件完成之后，会看到如下选项栏，说明Anaconda安装成功。</p><ul><li>Goto Definitions 能够在你的整个工程中查找并且显示任意一个变量，函数或者类的定义。</li><li>Find Usage 能够快速的查找某个变量，函数或者类在某个特定文件中的什么地方被使用了。</li><li>Show Documentation： 能够显示一个函数或者类的说明性字符串(当然，是在定义了字符串的情况下)</li></ul><p>Anaconda会自动补全代码，之前用惯了pycharm发现突然没了代码补全后很不习惯，Anaconda的补全功能虽然没有pycharm那么好用，但还是不错的<br>还有需要注意的是，安装Anaconda插件后，如果python代码没有遵循PEP8规范，会出现白色的框框，或是可以使用快捷键Ctrl+Alt+R进行规范代码(这个可以去除，步骤如下)</p><p><img src="/2018/12/26/Ubuntu下Sublime配置python编译环境及新手使用指导/4.png" alt=""></p><p>在Settings-User选项中添加配置:<code>{&quot;anaconda_linting&quot;:false}</code></p><h4 id="4-安装虚拟环境"><a href="#4-安装虚拟环境" class="headerlink" title="4.安装虚拟环境"></a>4.安装虚拟环境</h4><blockquote><p>1.首先使用终端安装virtualenv，<code>pip3 install virtualenv</code><br>2.在需要创建的地方进行虚拟环境的搭建，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir pytest(文件夹名)</span><br><span class="line">cd pytest</span><br><span class="line">virtualenv venv</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="/2018/12/26/Ubuntu下Sublime配置python编译环境及新手使用指导/5.png" alt=""></p><p>在终端进入虚拟环境的话是在pytest文件夹下输入命令<code>source /bin/activate</code><br>而要在sublime中进入虚拟环境的话就得按照如下操作：<br>１．首先在sublime中安装virtualenv插件，Ctrl + Shift + P，然后输入install,回车，然后搜索virtualenv。</p><ol start="2"><li>安装完成后，直接按Ctrl + Shift + P，再输入Activate，若没有该选项则virtualenv安装中出现问题，需要重新安装。如果有的会选择Activate就能发现刚刚创建的虚拟环境，选中后回车即可进入虚拟环境</li><li>如果Activate选中后没有出现我们刚刚创建的虚拟环境，则需要我们手动添加路径.Ctrl + Shift + P，然后输入<code>Add directory</code>，回车，屏幕下面会出现输入行（Directory path）:再将刚创建的虚拟环境路径填入即可</li></ol><p><img src="/2018/12/26/Ubuntu下Sublime配置python编译环境及新手使用指导/6.png" alt=""></p><hr><p>另外，我曾碰到过Add directory后仍然没用的情况。那时，可选择“”Project”=&gt;”Add folder to project”选择文件后=&gt;”Save Project as”==&gt;保存好即可<br>工程配置文件为：<br><code>.sublime-workspace</code>、<code>.sublime-project</code><br>其中sublime-project为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"build_systems":</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">"file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",</span><br><span class="line">"name": "Anaconda Python Builder",</span><br><span class="line">"selector": "source.python",</span><br><span class="line">"shell_cmd": "\"python\" -u \"$file\""</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">"folders":</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">"path": "爬虫"</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">"virtualenv": "G:\\pachong\\venv"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样环境就配置好了。按Ctrl+B编译时，观察”Tools”-&gt;”Build System”-&gt;是否为”Python+ Virtualenv”，如果不是，则选用这个再Ctrl+B就是在虚拟环境中编译了!</p><hr><p>ubuntu下sublime默认情况下好像不能输入中文，需要用下面命令就可以完美支持中文输入：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br><span class="line"><span class="meta">$</span> git clone https://github.com/lyfeyaj/sublime-text-imfix.git</span><br><span class="line"><span class="meta">$</span> cd sublime-text-imfix</span><br><span class="line"><span class="meta">$</span> ./sublime-imfix</span><br></pre></td></tr></table></figure></p><p>转自<a href="https://blog.csdn.net/CV_YOU/article/details/77702383" target="_blank" rel="noopener">博客</a><br>截图好像有点问题，菜单栏都没有截到，用到的三个分别为“项目(Project)”，“首选项(Preferences)”，“帮助(Help)”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####Sublime下配置python编译环境及搭建虚拟环境:(windows下大致相同)&lt;/p&gt;
&lt;h4 id=&quot;1-编译环境配置&quot;&gt;&lt;a href=&quot;#1-编译环境配置&quot; class=&quot;headerlink&quot; title=&quot;1.编译环境配置&quot;&gt;&lt;/a&gt;1.编译环境配置
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>PythonWeb--flask部署内网电脑</title>
    <link href="https://nymrli.top/2018/12/21/PythonWeb-flask%E9%83%A8%E7%BD%B2%E5%86%85%E7%BD%91%E7%94%B5%E8%84%91/"/>
    <id>https://nymrli.top/2018/12/21/PythonWeb-flask部署内网电脑/</id>
    <published>2018-12-21T14:08:04.000Z</published>
    <updated>2018-12-22T04:37:07.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PythonWeb–flask部署问题"><a href="#PythonWeb–flask部署问题" class="headerlink" title="PythonWeb–flask部署问题"></a>PythonWeb–flask部署问题</h1><p>以前在云服务器上都是用<code>root</code>权限部署的,很流畅..这次用了活动室电脑是管理员权限<code>apollo3d</code>..于是出现了很大的问题….</p><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>活动室电脑的IP是通过路由器分配的IP,如<code>192.168.1.145</code>,这是一个局域网,别人是不可能通过这个IP访问到你的服务器的.（访问都是通过公网的。除非两台电脑在同一个局域网内）。</p><p>于是想到直接连活动室的网不就行了吗（如果活动室的是公网IP，只要对路由器设置个<strong>端口映射</strong>就行了），但发现，活动室的IP也是校园网分配的，已经经过了多次的NAT，于是这个方法也没用。</p><p>搜了下网上关于“<u>内网中的电脑当做服务器</u>”，找到了方案就是“<strong>内网穿透</strong>”，而能实现这个功能的软件不少如<code>花生壳</code>、<code>frp</code>…在此,我用<code>花生壳</code>达成了目的,花了6元…</p><h4 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h4><p>注册账号后会送给你一个域名，而“内网穿透”的功能是需要买的。他实现的原理大致是将动态变化的IP绑定在了这个域名上，每次IP变换的时候就重新DNS解析，所以达成了“IP跟随”</p><p><img src="/2018/12/21/PythonWeb-flask部署内网电脑/1.jpg" alt="1"></p><p>设置好后，就可以直接通过域名访问到内网下的电脑了！</p><h2 id="非root权限——管理员权限"><a href="#非root权限——管理员权限" class="headerlink" title="非root权限——管理员权限"></a>非root权限——管理员权限</h2><p>之前都是部署在<code>/var/www</code>目录下的,这次也没多想,也照样…结果踩了坑,弄了几小时.</p><p>先是<code>pip install virtualenv</code>安装了<code>virtualenv</code>库,然后用<code>virtualenv env</code>新建了个虚拟环境</p><p>但问题来了，windows下的目录结构跟linux下的有些小小的不同,导致运行<code>uwsgi</code>报错<code>No module flask</code>时一直没找到原因</p><h4 id="linux下结构"><a href="#linux下结构" class="headerlink" title="linux下结构:"></a>linux下结构:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--|env</span><br><span class="line">-----|lib</span><br><span class="line">-------|python</span><br><span class="line">---------|site-packagess</span><br><span class="line">---------|.....</span><br><span class="line">-----|includes</span><br><span class="line">--------|python3.5m</span><br><span class="line">-----|bin</span><br><span class="line">-------|python3.5</span><br><span class="line">-------|pip</span><br><span class="line">-------|activate</span><br></pre></td></tr></table></figure><h4 id="正常情况下只要激活了虚拟环境-那么pip安装的库应该都是在该虚拟环境下的-这次出了什么问题呢"><a href="#正常情况下只要激活了虚拟环境-那么pip安装的库应该都是在该虚拟环境下的-这次出了什么问题呢" class="headerlink" title="正常情况下只要激活了虚拟环境,那么pip安装的库应该都是在该虚拟环境下的,这次出了什么问题呢?"></a>正常情况下只要激活了<code>虚拟环境</code>,那么pip安装的库应该都是在该虚拟环境下的,这次出了什么问题呢?</h4><h5 id="1-猜测没有site-packages"><a href="#1-猜测没有site-packages" class="headerlink" title="1.猜测没有site-packages"></a>1.猜测没有<code>site-packages</code></h5><p>当时因为linux终端显示的原因没看到<code>site-packages</code>,于是就以为没有linux下建立的虚拟环境没有<code>site-packages</code>,但事实证明这个是没有关系的..</p><h5 id="2-uwsgi-ini没有指定虚拟环境"><a href="#2-uwsgi-ini没有指定虚拟环境" class="headerlink" title="2.uwsgi.ini没有指定虚拟环境"></a>2.<code>uwsgi.ini</code>没有指定虚拟环境</h5><p>网上给出的都是因为<strong>没有进入虚拟环境执行</strong>或者是<strong>配置中没有指定虚拟环境路径</strong></p><h5 id="3-加了sudo"><a href="#3-加了sudo" class="headerlink" title="3.加了sudo"></a>3.加了<code>sudo</code></h5><p>根据报错显示知道，<code>sudo pip install -r requirements.txt</code>的库都安装到了默认python目录下了…原因是因为加了<code>sudo</code>.</p><p>▲<strong>一定不要使用sudo pip … ,这里是在虚拟环境中安装python包，如果使用了sudo权限，python包会被安装在主机非虚拟环境下，在虚拟环境中找不到这个包。</strong></p><blockquote><p> 永远不要使用sudo pip install; 你可以在不知情的情况下覆盖重要的东西。使用pip install –user代替</p></blockquote><p>于是那就不加吧,命令改为<code>pip install -r requirements.txt</code>,此时有报错<code>Could not install packages due to anEnvironmentError: [Error 13] Permission denied:...,consider using &#39;--user&#39; options</code>,既然提示用<code>--user</code>参数那就试试吧.</p><p>结果返回的是<code>Can not perform a &#39;--user&#39; install. User site-packages are not visible in this virtualenv</code>,这是为什么还是不行呢?</p><p><strong><a href="https://pip.pypa.io/en/latest/user_guide/" target="_blank" rel="noopener">官方解释</a></strong></p><p><code>pip install --user</code> 遵循四条规则：</p><ol><li><p>当全局安装的软件包位于python路径上，并且它们 与安装要求<em>冲突</em>时，它们将被忽略，而<em>不会被</em> 卸载。</p></li><li><p>当全局安装的软件包位于python路径上并且它们<em>满足</em> 安装要求时，pip什么都不做，并报告满足要求（类似于在<code>--system-site-packages</code> virtualenv中安装软件包时全局软件包如何满足要求）。</p></li><li><p>由于用户站点不在python路径上，因此pip不会<code>--user</code>在<code>--no-site-packages</code>的virtualenv（即默认类型的virtualenv）中执行安装。安装没有意义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.path)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'C:\\Users\\10630\\Desktop'</span>, <span class="string">'D:\\python\\python36.zip'</span>, <span class="string">'D:\\python\\DLLs'</span>, <span class="string">'D:\\python\\lib'</span>, <span class="string">'D:\\python'</span>, <span class="string">'C:\\Users\\10630\\AppData\\Roaming\\Python\\Python36\\site-packages'</span>, <span class="string">'D:\\python\\lib\\site-packages'</span>, <span class="string">'D:\\python\\lib\\site-packages\\win32'</span>, <span class="string">'D:\\python\\lib\\site-packages\\win32\\lib'</span>, <span class="string">'D:\\python\\lib\\site-packages\\Pythonwin'</span>]</span><br></pre></td></tr></table></figure></li><li><p>在<code>--system-site-packages</code>virtualenv中，pip不会安装与virtualenv site-packages中的包冲突的包。-user安装缺少sys.path优先级并且毫无意义。</p></li></ol><p>那应该就是3的原因了…需要在当前的<code>env</code>虚拟环境中将权限开放,我的做法是<code>sudo chmod 777 -R *</code></p><hr><h3 id="最终解决方式"><a href="#最终解决方式" class="headerlink" title="最终解决方式:"></a>最终解决方式:</h3><p>于是我并没有再纠结这个,而是选择了不在<code>/var/www</code>这个目录下,因为这个目录下的权限关系非常严格,于是我在<code>~/Documents/env</code>新建了个虚拟环境,一切又如以前一样解决了.</p><h2 id="Ubuntu下使用matplotlib库-需要安装python3-tk"><a href="#Ubuntu下使用matplotlib库-需要安装python3-tk" class="headerlink" title="Ubuntu下使用matplotlib库,需要安装python3-tk"></a>Ubuntu下使用<code>matplotlib</code>库,需要安装<code>python3-tk</code></h2><p><a href="https://www.cnblogs.com/ilym/p/8387702.html" target="_blank" rel="noopener">`”raise ImportError(str(msg) + ‘, please install the python3-tk package’) ImportError: No module named ‘_tkinter’, please install the python3-tk package”的错误</a></p><p>解决方案:<code>sudo apt-get install python3-tk</code>(如果没更新源,最好更新下源)</p><hr><h3 id="附录"><a href="#附录" class="headerlink" title="附录:"></a>附录:</h3><h4 id="sudo-pip-install-vs-pip-install-user"><a href="#sudo-pip-install-vs-pip-install-user" class="headerlink" title="sudo-pip-install-vs-pip-install-user:"></a>sudo-pip-install-vs-pip-install-user:</h4><h5 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h5><p>sudo pip install可能意味着您要在系统范围内安装软件包。对于某些软件包，例如virtualenvwrapper，这可能是有用的，但除此之外，我将避免安装系统范围的软件包并为每个应用程序创建virtualenv并将pip安装到该virtualenv（可以在没有sudo的情况下完成）。</p><h5 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install</span><br></pre></td></tr></table></figure><p>在python安装中全局安装包，即对所有用户安装。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --user</span><br></pre></td></tr></table></figure><p>安装到本地用户目录，即〜/ .local / lib / python - 只是你。</p><p>例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install jupyter</span><br><span class="line">$ jupyter notebook</span><br></pre></td></tr></table></figure><p>将运行jupyter，打开Web浏览器，允许您使用笔记本。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --user jupyter</span><br><span class="line">$ jupyter notebook</span><br></pre></td></tr></table></figure><p>在将本地目录添加到PATH之前，将不执行任何操作。</p><p>最近pypi中包含了恶意代码。切勿使用sudo来安装pip。这与以root身份运行病毒相同。将本地文件夹添加到PATH或使用virtualenv。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PythonWeb–flask部署问题&quot;&gt;&lt;a href=&quot;#PythonWeb–flask部署问题&quot; class=&quot;headerlink&quot; title=&quot;PythonWeb–flask部署问题&quot;&gt;&lt;/a&gt;PythonWeb–flask部署问题&lt;/h1&gt;&lt;p&gt;以前
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="后端" scheme="https://nymrli.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="flask" scheme="https://nymrli.top/tags/flask/"/>
    
      <category term="配置环境" scheme="https://nymrli.top/tags/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
</feed>
