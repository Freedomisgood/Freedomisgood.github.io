<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>果粒橙的博客</title>
  
  <subtitle>别装作很努力，因为结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2018-09-01T11:02:44.530Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>果粒橙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>例题4:1-3 古老的密码、刽子手的游戏，救济金发放</title>
    <link href="https://nymrli.top/2018/09/01/%E4%BE%8B%E9%A2%984-1-3-%E5%8F%A4%E8%80%81%E7%9A%84%E5%AF%86%E7%A0%81%E3%80%81%E5%88%BD%E5%AD%90%E6%89%8B%E7%9A%84%E6%B8%B8%E6%88%8F%EF%BC%8C%E6%95%91%E6%B5%8E%E9%87%91%E5%8F%91%E6%94%BE/"/>
    <id>https://nymrli.top/2018/09/01/例题4-1-3-古老的密码、刽子手的游戏，救济金发放/</id>
    <published>2018-09-01T10:46:59.000Z</published>
    <updated>2018-09-01T11:02:44.530Z</updated>
    
    <content type="html"><![CDATA[<h4 id="例题4-1-古老的密码"><a href="#例题4-1-古老的密码" class="headerlink" title="例题4-1 古老的密码"></a>例题4-1 古老的密码</h4><blockquote><ul><li>因为字母可以重排,所以顺序不重要,而又同时因为可以映射,所以字母具体是什么不重要==&gt;只要统计<strong>排序</strong>后的结果相同就行了</li><li>RE(Runtime error)错法加一: 题号提交错误</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bubblesort</span><span class="params">(<span class="keyword">int</span> *cnt)</span><span class="comment">//冒泡排序,从大到小顺序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> min=cnt[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;<span class="number">26</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">for</span> ( j = i+<span class="number">1</span>; j &lt; <span class="number">26</span>; ++j)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (cnt[i] &lt; cnt[j])</span><br><span class="line">           &#123;</span><br><span class="line">               min = cnt[i];</span><br><span class="line">               cnt[i]=cnt[j];</span><br><span class="line">               cnt[j] = min;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">2</span>][<span class="number">105</span>];<span class="comment">//存放猜测字符串的</span></span><br><span class="line">    <span class="keyword">int</span> cnt[<span class="number">2</span>][<span class="number">27</span>]; <span class="comment">//存放字母出现次数</span></span><br><span class="line">    <span class="keyword">int</span> nlen[<span class="number">2</span>];<span class="comment">//字符串的长度</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s[<span class="number">0</span>],s[<span class="number">1</span>])!= EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            nlen[i]= <span class="built_in">strlen</span>(s[i]);</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; nlen[i]; ++j)</span><br><span class="line">                cnt[i][s[i][j]-<span class="string">'A'</span>] ++;</span><br><span class="line">            Bubblesort(cnt[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">26</span>; ++k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt[<span class="number">0</span>][k] != cnt[<span class="number">1</span>][k])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k==<span class="number">26</span>) <span class="built_in">printf</span>(<span class="string">"YES\n"</span> );<span class="comment">//如果26个字母出现次数比完全相等,则可以说相同.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;例题4-1-古老的密码&quot;&gt;&lt;a href=&quot;#例题4-1-古老的密码&quot; class=&quot;headerlink&quot; title=&quot;例题4-1 古老的密码&quot;&gt;&lt;/a&gt;例题4-1 古老的密码&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;因为字母可以重排,所以顺序不重
      
    
    </summary>
    
    
      <category term="ACM竞赛入门" scheme="https://nymrli.top/tags/ACM%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8/"/>
    
      <category term="C" scheme="https://nymrli.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>WampSever配置本地环境，解决打开打开本地网站问题</title>
    <link href="https://nymrli.top/2018/09/01/WampSever%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%89%93%E5%BC%80%E6%89%93%E5%BC%80%E6%9C%AC%E5%9C%B0%E7%BD%91%E7%AB%99%E9%97%AE%E9%A2%98/"/>
    <id>https://nymrli.top/2018/09/01/WampSever配置本地环境，解决打开打开本地网站问题/</id>
    <published>2018-09-01T06:19:39.000Z</published>
    <updated>2018-09-01T06:26:52.393Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/09/01/WampSever配置本地环境，解决打开打开本地网站问题/v2-1d83ff5569ea18de71d329033fb91131_r.jpg" alt="What&#39;s WAMP"></p><a id="more"></a><blockquote><p>WampServer是一款由法国人开发的Apache Web服务器、PHP解释器以及MySQL数据库的整合软件包。免去了开发人员将时间花费在繁琐的配置环境过程，从而腾出更多精力去做开发。 </p></blockquote><p>直接点击本地的.html是静态加载的，需要动态加载的文件是无法被加载的。会出现如下情况。</p><p><img src="https://pic1.zhimg.com/v2-b270887c1a810a4209f04783cc85a4c6_b.jpg" alt="img"></p><p>于是选用了Wamp搭本地服务器浏览网站，这样就能成功加载动态文件了。</p><hr><p>在此分享下配置WampSever时碰到的问题和解决的方法：</p><h2 id="服务器是否已正常运行"><a href="#服务器是否已正常运行" class="headerlink" title="服务器是否已正常运行"></a>服务器是否已正常运行</h2><p>如果能登上则表示服务器能够正常运行。(在地址栏中输入localhost:端口(或是127.0.0.1:端口) 或是左键图标选择’localhost’)</p><p><img src="https://pic2.zhimg.com/v2-8ec52c0b806ddee374b1cc8d83d3783c_b.jpg" alt="img"></p><blockquote><p>localhost 指你所在的计算机本身。 在windows系统它成了127.0.0.1的别名 ，在Unix系统下，查看网卡配置会发现作为本地回环的方式，一定程度上使用localhost比127.0.0.1要快一些。 在Hosts文件中，localhost指向的IP是127.0.0.1这个关系是可以修改的。 </p></blockquote><hr><h2 id="查看、修改端口"><a href="#查看、修改端口" class="headerlink" title="查看、修改端口"></a>查看、修改端口</h2><p><img src="https://pic3.zhimg.com/v2-c07b053bd933cb51af4b8a4dd7564be5_b.jpg" alt="img"></p><hr><h2 id="配置本地环境、添加项目、打开本地网站"><a href="#配置本地环境、添加项目、打开本地网站" class="headerlink" title="配置本地环境、添加项目、打开本地网站"></a>配置本地环境、添加项目、打开本地网站</h2><p><img src="https://pic4.zhimg.com/v2-2f30ae78528547838cdd4b722b1d5633_b.jpg" alt="img"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目中是空的,需要手动将要打开的网站放到'www'目录中</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/v2-ada47a62bcf8b7e72c647bc9d10680a2_b.jpg" alt="img"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以选择输入路径，也可以直接左键选择'www目录'打开</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/v2-c497a4056dd6067e37c6997099388ef5_b.jpg" alt="img"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将要打开网站的文件夹复制到'www目录下'，会发现刚添加的文件夹出现在了项目中。</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/v2-0328f2435494b1f8e6373858fe485309_b.jpg" alt="img"></p><hr><h2 id="勾选’Add-localhost-in-url’"><a href="#勾选’Add-localhost-in-url’" class="headerlink" title="勾选’Add localhost in url’"></a>勾选’Add localhost in url’</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">看似到此已经大功告成，然而再点击进去这些文件夹时会出现如下情况：</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/v2-78dbeb073cdef02d3e2cd1f01699f6c9_b.jpg" alt="img"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以看到的是<span class="built_in">URL</span>并不对，我们是想要实现通过web服务器的方式访问这些网站，然而这个明显没达到我们想要的效果，根据提示，我找到了原因。</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/v2-351e9cc2e38d8afa45572fa200e708c3_b.jpg" alt="img"></p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">右键选择<span class="symbol">'Wamp</span> <span class="type">Settings'</span>中将<span class="symbol">'Add</span> localhost <span class="keyword">in</span> url'选项勾上后再次如上打开项目即可。（记得重新打开一次localhost页面或是刷新一下）</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/v2-ff266d60eaa59b23c8e36d97df1e6967_b.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以看到网站成功地通过web服务器打开了，那些之前提示需要动态加载的文件也成功加载了。</span><br></pre></td></tr></table></figure><hr><p><img src="https://pic2.zhimg.com/v2-ff266d60eaa59b23c8e36d97df1e6967_b.jpg" alt="img"></p><p>撒花完结！~200成功！</p><p>▲.看到这，我相信你也明白了为什么必须要有’Add localhost in url’这步了。同时也猜到了，其实直接在网址里面输入正确的网址也是可以的，如<a href="http://localhost:8080/data-visualize-chain-master/,结果也是能打开的。" target="_blank" rel="noopener">http://localhost:8080/data-visualize-chain-master/,结果也是能打开的。</a></p><p>希望能对你们有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/09/01/WampSever配置本地环境，解决打开打开本地网站问题/v2-1d83ff5569ea18de71d329033fb91131_r.jpg&quot; alt=&quot;What&amp;#39;s WAMP&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="WAMP" scheme="https://nymrli.top/tags/WAMP/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下Sublime配置Python环境使用指导:</title>
    <link href="https://nymrli.top/2018/09/01/Ubuntu%E4%B8%8BSublime%E9%85%8D%E7%BD%AEPython%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC/"/>
    <id>https://nymrli.top/2018/09/01/Ubuntu下Sublime配置Python环境使用指导/</id>
    <published>2018-09-01T06:04:47.000Z</published>
    <updated>2018-09-01T06:26:28.406Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/09/01/Ubuntu下Sublime配置Python环境使用指导/v2-e120837a2c6bb4df19299c085c8c7cf1_r.jpg" alt="Sublime Text"></p><a id="more"></a><h2 id="Sublime配置python编译环境及搭建虚拟环境-windows下大致相同"><a href="#Sublime配置python编译环境及搭建虚拟环境-windows下大致相同" class="headerlink" title="Sublime配置python编译环境及搭建虚拟环境:(windows下大致相同)"></a>Sublime配置python编译环境及搭建虚拟环境:(windows下大致相同)</h2><h2 id="1-编译环境配置"><a href="#1-编译环境配置" class="headerlink" title="1.编译环境配置"></a>1.编译环境配置</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = <span class="string">'6f4c264a24d933ce70df5dedcf1dcaee'</span> + <span class="string">'ebe013ee18cced0ef93d5f746d80ef60'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="keyword">by</span> = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.<span class="built_in">replace</span>(<span class="string">' '</span>, <span class="string">'%20'</span>)).<span class="built_in">read</span>(); dh = hashlib.sha256(<span class="keyword">by</span>).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="built_in">open</span>(os.path.join( ipp, pf), <span class="string">'wb'</span> ).<span class="built_in">write</span>(<span class="keyword">by</span>)</span><br></pre></td></tr></table></figure><p>1.点击 <a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">官方网址</a> 从 Sublime Text 3 官方获取用于安装的代码。从菜单栏View –&gt;Show Console或者使用Ctrl+`(esc键下面的按键)，调出sublime的控制台，将官网中的python代码粘贴进去并按Enter执行，最终可以安装完成。在控制台中粘贴刚才的代码，然后点击回车。最后重启ST3。 2.现在你可以通过快捷键 cmd+shift+P 打开 Package Control 来安装其他的插件了。输入 install 然后你就能看见屏幕上出现了 Package Control: Install Package，点击回车,然后搜索sublimeREPL</p><p><img src="https://pic3.zhimg.com/v2-2d3d09607e573acd80a4f6229f3394cc_b.jpg" alt="img"></p><p>安装成功后，可以在菜单栏的’TOOL’中找到SublimeREPL，如图所示</p><p><img src="https://pic3.zhimg.com/v2-e4b801e2bcc987e5e28196020de9221a_b.jpg" alt="img"></p><h2 id="2-将菜单栏改为中文"><a href="#2-将菜单栏改为中文" class="headerlink" title="2.将菜单栏改为中文"></a>2.将菜单栏改为中文</h2><p>若需要将菜单栏改成中文可如上操作下载插件“ConvertToUTF8”或是安装插件“ChineseLocalizations”(本人使用的是这个，没试ConvertToUTF8的效果)</p><p><img src="https://pic3.zhimg.com/v2-76bf62cdf099b08b240db97abe40ae24_b.jpg" alt="img"></p><p>(参考博客:<a href="http://blog.51cto.com/11970781/2087971" target="_blank" rel="noopener">http://blog.51cto.com/11970781/2087971</a>)</p><h2 id="3-安装Anaconda插件"><a href="#3-安装Anaconda插件" class="headerlink" title="3.安装Anaconda插件"></a>3.安装Anaconda插件</h2><blockquote><p>1.点击刚刚生成的Package Control -&gt;输入install 2.进入安装界面，安装好后再在新窗口命令行中输入Anaconda并点击第一个备选项进行安装。 安装完成后会显示messages文档。</p></blockquote><p>安装Anaconda插件完成之后，会看到如下选项栏，说明Anaconda安装成功。 - Goto Definitions 能够在你的整个工程中查找并且显示任意一个变量，函数或者类的定义。 - Find Usage 能够快速的查找某个变量，函数或者类在某个特定文件中的什么地方被使用了。 - Show Documentation： 能够显示一个函数或者类的说明性字符串(当然，是在定义了字符串的情况下)</p><p>Anaconda会自动补全代码，之前用惯了pycharm发现突然没了代码补全后很不习惯，Anaconda的补全功能虽然没有pycharm那么好用，但还是不错的 还有需要注意的是，安装Anaconda插件后，如果python代码没有遵循PEP8规范，会出现白色的框框，或是可以使用快捷键Ctrl+Alt+R进行规范代码(这个可以去除，步骤如下)</p><p><img src="https://pic4.zhimg.com/v2-de4ef9695d2206a9be7fe1b44a0c4dea_b.jpg" alt="img"></p><p>在Settings-User选项中添加配置:{“anaconda_linting”:false}</p><h2 id="4-安装虚拟环境"><a href="#4-安装虚拟环境" class="headerlink" title="4.安装虚拟环境"></a>4.安装虚拟环境</h2><blockquote><p>1.首先使用终端安装virtualenv，pip3 install virtualenv2.在需要创建的地方进行虚拟环境的搭建，代码如下：</p></blockquote><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> pytest(文件夹名)</span><br><span class="line"><span class="built_in">cd</span> pytest</span><br><span class="line">virtualenv venv</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/v2-ad5fc970663d250a39227203a0ebe72a_b.jpg" alt="img"></p><p>在终端进入虚拟环境的话是在pytest文件夹下输入命令source /bin/activate而要在sublime中进入虚拟环境的话就得按照如下操作： １．首先在sublime中安装virtualenv插件，Ctrl + Shift + P，然后输入install,回车，然后搜索virtualenv。 2. 安装完成后，直接按Ctrl + Shift + P，再输入Activate，若没有该选项则virtualenv安装中出现问题，需要重新安装。如果有的会选择Activate就能发现刚刚创建的虚拟环境，选中后回车即可进入虚拟环境 3. 如果Activate选中后没有出现我们刚刚创建的虚拟环境，则需要我们手动添加路径.Ctrl + Shift + P，然后输入Add directory，回车，屏幕下面会出现输入行（Directory path）:再将刚创建的虚拟环境路径填入即可</p><p><img src="https://pic4.zhimg.com/v2-38e50b714f4a324bc70f7038c641c78b_b.jpg" alt="img"></p><p>另外，我曾碰到过Add directory后仍然没用的情况。那时，可选择“”Project”=&gt;”Add folder to project”选择文件后=&gt;”Save Project as”==&gt;保存好即可</p><p>工程配置文件为：</p><p>.sublime-workspace、.sublime-project</p><p>其中sublime-project为:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"build_systems"</span>:</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"file_regex"</span>: <span class="string">"^[ ]File "</span>(...?)<span class="string">", line ([0-9]*)"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Anaconda Python Builder"</span>,</span><br><span class="line">            <span class="attr">"selector"</span>: <span class="string">"source.python"</span>,</span><br><span class="line">            <span class="attr">"shell_cmd"</span>: <span class="string">""</span>python<span class="string">" -u "</span>$file<span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"folders"</span>:</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"爬虫"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"virtualenv"</span>: <span class="string">"G:\pachong\venv"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样环境就配置好了。按Ctrl+B编译时，观察”Tools”-&gt;”Build System”-&gt;是否为”Python+ Virtualenv”，如果不是，则选用这个再Ctrl+B就是在虚拟环境中编译了!</p><p>ubuntu下sublime默认情况下好像不能输入中文，需要用下面命令就可以完美支持中文输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">update</span> &amp;&amp; sudo apt-<span class="keyword">get</span> <span class="keyword">upgrade</span></span><br><span class="line">git <span class="keyword">clone</span> https://github.com/lyfeyaj/sublime-<span class="built_in">text</span>-imfix.git</span><br><span class="line">cd sublime-<span class="built_in">text</span>-imfix</span><br><span class="line">./sublime-imfix</span><br></pre></td></tr></table></figure><p>转自<a href="https://blog.csdn.net/cv_you" target="_blank" rel="noopener">CV_YOU的博客</a></p><p><a href="https://blog.csdn.net/CV_YOU/article/details/77702383" target="_blank" rel="noopener">完美解决Sublime无法输入中文问题</a></p><p>截图好像有点问题，菜单栏都没有截到，用到的三个分别为“项目(Project)”，“首选项(Preferences)”，“帮助(Help)”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/09/01/Ubuntu下Sublime配置Python环境使用指导/v2-e120837a2c6bb4df19299c085c8c7cf1_r.jpg&quot; alt=&quot;Sublime Text&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Sublime Text" scheme="https://nymrli.top/tags/Sublime-Text/"/>
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>python pywin32 PyUserInput实现自动化脚本</title>
    <link href="https://nymrli.top/2018/08/31/python-win32api-win32gui-win32con-PyUserInput%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/"/>
    <id>https://nymrli.top/2018/08/31/python-win32api-win32gui-win32con-PyUserInput实现自动化脚本/</id>
    <published>2018-08-31T11:43:00.000Z</published>
    <updated>2018-08-31T11:56:56.677Z</updated>
    
    <content type="html"><![CDATA[<p>pywin32用<a href="https://www.cnblogs.com/nymrli/p/9556691.html" target="_blank" rel="noopener">spy++</a>工具查找到句柄，再结合<a href="https://www.cnblogs.com/nymrli/p/9557023.html" target="_blank" rel="noopener">PyUserInput</a>就能很好地实现自动化脚本。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">import win32gui</span><br><span class="line">import win32con</span><br><span class="line">import win32api</span><br><span class="line"></span><br><span class="line"><span class="meta"># 从顶层窗口向下搜索主窗口，无法搜索子窗口</span></span><br><span class="line"><span class="meta"># FindWindow(lpClassName=None, lpWindowName=None)  窗口类名 窗口标题名</span></span><br><span class="line">handle = win32gui.FindWindow(<span class="string">"Notepad"</span>, None) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 获取窗口位置</span></span><br><span class="line">left, top, right, bottom = win32gui.GetWindowRect(handle)</span><br><span class="line"></span><br><span class="line"><span class="meta">#获取某个句柄的类名和标题</span></span><br><span class="line">title = win32gui.GetWindowText(handle)     </span><br><span class="line">clsname = win32gui.GetClassName(handle)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 打印句柄</span></span><br><span class="line"><span class="meta"># 十进制</span></span><br><span class="line">print(handle)</span><br><span class="line"><span class="meta"># 十六进制</span></span><br><span class="line">print(<span class="string">"%x"</span> %(handle) )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 搜索子窗口</span></span><br><span class="line"><span class="meta"># 枚举子窗口</span></span><br><span class="line">hwndChildList = []     </span><br><span class="line">win32gui.EnumChildWindows(handle, lambda hwnd, param: param.append(hwnd),  hwndChildList)</span><br><span class="line"></span><br><span class="line"><span class="meta"># FindWindowEx(hwndParent=0, hwndChildAfter=0, lpszClass=None, lpszWindow=None) </span></span><br><span class="line"><span class="meta"># 父窗口句柄 若不为0，则按照z-index的顺序从hwndChildAfter向后开始搜索子窗体，否则从第一个子窗体开始搜索。 子窗口类名 子窗口标题</span></span><br><span class="line">subHandle = win32gui.FindWindowEx(handle, <span class="number">0</span>, <span class="string">"EDIT"</span>, None)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 获得窗口的菜单句柄</span></span><br><span class="line">menuHandle = win32gui.GetMenu(subHandle)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 获得子菜单或下拉菜单句柄   </span></span><br><span class="line"><span class="meta"># 参数：菜单句柄 子菜单索引号</span></span><br><span class="line">subMenuHandle = win32gui.GetSubMenu(menuHandle, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 获得菜单项中的的标志符，注意，分隔符是被编入索引的  </span></span><br><span class="line"><span class="meta"># 参数：子菜单句柄 项目索引号 </span></span><br><span class="line">menuItemHandle = win32gui.GetMenuItemID(subMenuHandle, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 发送消息，加入消息队列，无返回 </span></span><br><span class="line"><span class="meta"># 参数：句柄 消息类型 WParam IParam</span></span><br><span class="line">win32gui.postMessage(subHandle, win32con.WM_COMMAND, menuItemHandle, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># wParam的定义是32位整型，high word就是他的31至16位，low word是它的15至0位。</span></span><br><span class="line"><span class="meta"># 当参数超过两个，wParam和lParam不够用时，可以将wParam就给拆成两个int16来使用。</span></span><br><span class="line"><span class="meta"># 这种时候在python里记得用把HIWORD的常数向左移16位，再加LOWORD，即wParam = HIWORD&lt;&lt;16+LOWORD。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 下选框内容更改</span></span><br><span class="line"><span class="meta"># 参数：下选框句柄； 消息内容； </span></span><br><span class="line"><span class="meta">#参数下选框的哪一个item，以0起始的待选选项的索引；如果该值为-1，将从组合框列表中删除当前选项，并使当前选项为空；</span></span><br><span class="line"><span class="meta"># 参数CB_Handle为下选框句柄，PCB_handle下选框父窗口句柄</span></span><br><span class="line"><span class="keyword">if</span> win32api.SendMessage(CB_handle, win32con.CB_SETCURSEL, <span class="number">1</span>, <span class="number">0</span>) == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line"><span class="meta"># 下选框的父窗口命令</span></span><br><span class="line"><span class="meta"># 参数：父窗口句柄； 命令； </span></span><br><span class="line"><span class="meta"># 参数：WParam：高位表示类型，低位表示内容；参数IParam，下选框句柄</span></span><br><span class="line"><span class="meta"># CBN_SELENDOK当用户选择了有效的列表项时发送，提示父窗体处理用户的选择。 LOWORD为组合框的ID. HIWORD为CBN_SELENDOK的值。</span></span><br><span class="line">            win32api.SendMessage(PCB_handle, win32con.WM_COMMAND, <span class="number">0x90000</span>, CB_handle) </span><br><span class="line"><span class="meta"># CBN_SELCHANGE当用户更改了列表项的选择时发送，不论用户是通过鼠标选择或是通过方向键选择都会发送此通知。LOWORD为组合框的ID. HIWORD为CBN_SELCHANGE的值。</span></span><br><span class="line">            win32api.SendMessage(PCB_handle, win32con.WM_COMMAND, <span class="number">0x10000</span>, CB_handle) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 设置文本框内容，等窗口处理完毕后返回true。中文需编码成gbk </span></span><br><span class="line"><span class="meta"># 参数：句柄；消息类型；</span></span><br><span class="line"><span class="meta"># 参数WParam，无需使用； </span></span><br><span class="line"><span class="meta"># 参数IParam，要设置的内容，字符串</span></span><br><span class="line">win32api.SendMessage(handle, win32con.WM_SETTEXT, <span class="number">0</span>, os.path.abspath(fgFilePath).encode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 控件点击确定,处理消息后返回0</span></span><br><span class="line"><span class="meta"># 参数:窗口句柄; 消息类型; 参数WParam HIWORD为0（未使用），LOWORD为控件的ID; 参数IParam  0（未使用）,确定控件的句柄</span></span><br><span class="line">win32api.SendMessage(Mhandle, win32con.WM_COMMAND, <span class="number">1</span>, confirmBTN_handle)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 获取窗口文本不含截尾空字符的长度</span></span><br><span class="line"><span class="meta"># 参数：窗口句柄； 消息类型； 参数WParam； 参数IParam</span></span><br><span class="line">bufSize = win32api.SendMessage(subHandle, win32con.WM_GETTEXTLENGTH, <span class="number">0</span>, <span class="number">0</span>) +<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 利用api生成Buffer</span></span><br><span class="line">strBuf = win32gui.PyMakeBuffer(bufSize)</span><br><span class="line">print(strBuf)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 发送消息获取文本内容</span></span><br><span class="line"><span class="meta"># 参数：窗口句柄； 消息类型；文本大小； 存储位置</span></span><br><span class="line">length = win32gui.SendMessage(subHandle, win32con.WM_GETTEXT, bufSize, strBuf)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 反向内容，转为字符串</span></span><br><span class="line"><span class="meta"># text = str(strBuf[:-1])</span></span><br><span class="line"></span><br><span class="line">address, length = win32gui.PyGetBufferAddressAndLen(strBuf) </span><br><span class="line">text = win32gui.PyGetString(address, length) </span><br><span class="line"><span class="meta"># print('text: ', text)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 鼠标单击事件</span></span><br><span class="line"><span class="meta">#鼠标定位到(30,50)</span></span><br><span class="line">win32api.SetCursorPos([<span class="number">30</span>,<span class="number">150</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">#执行左单键击，若需要双击则延时几毫秒再点击一次即可</span></span><br><span class="line">win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP | win32con.MOUSEEVENTF_LEFTDOWN, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#右键单击</span></span><br><span class="line">win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTUP | win32con.MOUSEEVENTF_RIGHTDOWN, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">def click1(x,y):                #第一种</span><br><span class="line">    win32api.SetCursorPos((x,y))</span><br><span class="line">    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,x,y,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,x,y,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">def click2(x,y):               #第二种</span><br><span class="line">    ctypes.windll.user32.SetCursorPos(x,y)</span><br><span class="line">    ctypes.windll.user32.mouse_event(<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    ctypes.windll.user32.mouse_event(<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">def click_it(pos):          #第三种</span><br><span class="line">    handle= win32gui.WindowFromPoint(pos)</span><br><span class="line">    client_pos =win32gui.ScreenToClient(handle,pos)</span><br><span class="line">    tmp=win32api.MAKELONG(client_pos[<span class="number">0</span>],client_pos[<span class="number">1</span>])</span><br><span class="line">    win32gui.SendMessage(handle, win32con.WM_ACTIVATE,win32con.WA_ACTIVE,<span class="number">0</span>)</span><br><span class="line">    win32gui.SendMessage(handle, win32con.WM_LBUTTONDOWN,win32con.MK_LBUTTON,tmp)</span><br><span class="line">    win32gui.SendMessage(handle, win32con.WM_LBUTTONUP,win32con.MK_LBUTTON,tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 发送回车</span></span><br><span class="line">win32api.keybd_event(<span class="number">13</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">win32api.keybd_event(<span class="number">13</span>,<span class="number">0</span>,win32con.KEYEVENTF_KEYUP,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 关闭窗口</span></span><br><span class="line">win32gui.PostMessage(win32lib.findWindow(classname, titlename), win32con.WM_CLOSE, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 检查窗口是否最小化，如果是最大化</span></span><br><span class="line"><span class="keyword">if</span>(win32gui.IsIconic(hwnd)):</span><br><span class="line"><span class="meta">#     win32gui.ShowWindow(hwnd, win32con.SW_SHOWNORMAL)</span></span><br><span class="line">    win32gui.ShowWindow(hwnd, <span class="number">8</span>)</span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># SW_HIDE：隐藏窗口并激活其他窗口。nCmdShow=0。</span></span><br><span class="line"><span class="meta"># SW_MAXIMIZE：最大化指定的窗口。nCmdShow=3。</span></span><br><span class="line"><span class="meta"># SW_MINIMIZE：最小化指定的窗口并且激活在Z序中的下一个顶层窗口。nCmdShow=6。</span></span><br><span class="line"><span class="meta"># SW_RESTORE：激活并显示窗口。如果窗口最小化或最大化，则系统将窗口恢复到原来的尺寸和位置。在恢复最小化窗口时，应用程序应该指定这个标志。nCmdShow=9。</span></span><br><span class="line"><span class="meta"># SW_SHOW：在窗口原来的位置以原来的尺寸激活和显示窗口。nCmdShow=5。</span></span><br><span class="line"><span class="meta"># SW_SHOWDEFAULT：依据在STARTUPINFO结构中指定的SW_FLAG标志设定显示状态，STARTUPINFO 结构是由启动应用程序的程序传递给CreateProcess函数的。nCmdShow=10。</span></span><br><span class="line"><span class="meta"># SW_SHOWMAXIMIZED：激活窗口并将其最大化。nCmdShow=3。</span></span><br><span class="line"><span class="meta"># SW_SHOWMINIMIZED：激活窗口并将其最小化。nCmdShow=2。</span></span><br><span class="line"><span class="meta"># SW_SHOWMINNOACTIVE：窗口最小化，激活窗口仍然维持激活状态。nCmdShow=7。</span></span><br><span class="line"><span class="meta"># SW_SHOWNA：以窗口原来的状态显示窗口。激活窗口仍然维持激活状态。nCmdShow=8。</span></span><br><span class="line"><span class="meta"># SW_SHOWNOACTIVATE：以窗口最近一次的大小和状态显示窗口。激活窗口仍然维持激活状态。nCmdShow=4。</span></span><br><span class="line"><span class="meta"># SW_SHOWNORMAL：激活并显示一个窗口。如果窗口被最小化或最大化，系统将其恢复到原来的尺寸和大小。应用程序在第一次显示窗口的时候应该指定此标志。nCmdShow=1。</span></span><br></pre></td></tr></table></figure><p>感谢<a href="https://blog.csdn.net/qq_16234613/article/details/79155632" target="_blank" rel="noopener">python win32api win32gui win32con 窗口句柄 发送消息 常用方法 键盘输入</a>，代码主要来自于他</p><h4 id="▲-需要注意在windows和mac下接口参数可能有所不同。"><a href="#▲-需要注意在windows和mac下接口参数可能有所不同。" class="headerlink" title="▲.需要注意在windows和mac下接口参数可能有所不同。"></a>▲.需要注意在windows和mac下接口参数可能有所不同。</h4><h4 id="win32虽然也可控制键盘，但不如使用PyUserInput的方便。安装PyUserInput教程"><a href="#win32虽然也可控制键盘，但不如使用PyUserInput的方便。安装PyUserInput教程" class="headerlink" title="win32虽然也可控制键盘，但不如使用PyUserInput的方便。安装PyUserInput教程"></a>win32虽然也可控制键盘，但不如使用PyUserInput的方便。<a href="https://www.cnblogs.com/nymrli/p/9557023.html" target="_blank" rel="noopener">安装PyUserInput教程</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymouse <span class="keyword">import</span> PyMouse</span><br><span class="line"><span class="keyword">from</span> pykeyboard <span class="keyword">import</span> PyKeyboard</span><br><span class="line"><span class="comment">#实例化</span></span><br><span class="line">m = PyMouse()</span><br><span class="line">k = PyKeyboard()</span><br><span class="line"></span><br><span class="line">x_dim, y_dim = m.screen_size()</span><br><span class="line"><span class="comment"># 鼠标点击 参数:x,y,button=1(左键)、2(右键)、3(中间),次数</span></span><br><span class="line">m.click(x_dim, y_dim, button=<span class="number">1</span>,n=<span class="number">1</span>)  </span><br><span class="line"><span class="comment"># 键盘输入 参数:str,间隔</span></span><br><span class="line">k.type_string(<span class="string">'Hello, World!'</span>,interval=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按住一个键</span></span><br><span class="line">k.press_key(<span class="string">'H'</span>)</span><br><span class="line"><span class="comment"># 松开一个键</span></span><br><span class="line">k.release_key(<span class="string">'H'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于===&gt;按住并松开，tap一个键</span></span><br><span class="line">k.tap_key(<span class="string">'e'</span>)</span><br><span class="line"><span class="comment"># tap支持重复的间歇点击键,参数:str,次数,间隔</span></span><br><span class="line">k.tap_key(<span class="string">'l'</span>,n=<span class="number">2</span>,interval=<span class="number">5</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建组合键===&gt;press_key和release_key结合使用</span></span><br><span class="line">k.press_key(k.alt_key)</span><br><span class="line">k.tap_key(k.tab_key)</span><br><span class="line">k.release_key(k.alt_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊功能键</span></span><br><span class="line">k.tap_key(k.function_keys[<span class="number">5</span>]) <span class="comment"># Tap F5</span></span><br><span class="line">k.tap_key(k.numpad_keys[<span class="string">'Home'</span>]) <span class="comment"># Tap 'Home' on the numpad</span></span><br><span class="line">k.tap_key(k.numpad_keys[<span class="number">5</span>], n=<span class="number">3</span>) <span class="comment"># Tap 5 on the numpad, thrice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac系统按键</span></span><br><span class="line">k.press_keys([<span class="string">'Command'</span>,<span class="string">'shift'</span>,<span class="string">'3'</span>])</span><br><span class="line"><span class="comment"># Windows系统按键</span></span><br><span class="line">k.press_keys([k.windows_l_key,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line">其中pymouse的PyMouseEvent和pykeyboard的PyKeyboardEvent还可用于监听鼠标和键盘事件的输入</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clickonacci</span><span class="params">(PyMouseEvent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        PyMouseEvent.__init__(self)</span><br><span class="line">        self.fibo = fibo()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">click</span><span class="params">(self, x, y, button, press)</span>:</span></span><br><span class="line">        <span class="string">'''Print Fibonacci numbers when the left click is pressed.'''</span></span><br><span class="line">        <span class="keyword">if</span> button == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> press:</span><br><span class="line">                print(<span class="string">'Press times:%d'</span>.format(press))</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># Exit if any other mouse button used</span></span><br><span class="line">            self.stop()</span><br><span class="line"></span><br><span class="line">C = Clickonacci()</span><br><span class="line">C.run()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TapRecord</span><span class="params">(PyKeyboardEvent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        PyKeyboardEvent.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tap</span><span class="params">(self, keycode, character, press)</span>:</span></span><br><span class="line">        print(time.time(), keycode, character, press)</span><br><span class="line"></span><br><span class="line">t = TapRecord()</span><br><span class="line">t.run()</span><br><span class="line"><span class="comment">#这些对象是一个架构用于监听鼠标和键盘的输入；他们除了监听之外不会做任何事，需要继承重构他们#PyKeyboardEvent为编写完成，所以这里是一个继承PyMouseEvent的例子：</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pywin32用&lt;a href=&quot;https://www.cnblogs.com/nymrli/p/9556691.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;spy++&lt;/a&gt;工具查找到句柄，再结合&lt;a href=&quot;https://www.c
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="自动化运维" scheme="https://nymrli.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Python字典基本操作介绍</title>
    <link href="https://nymrli.top/2018/08/30/Python%E5%AD%97%E5%85%B8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%BB%8B%E7%BB%8D/"/>
    <id>https://nymrli.top/2018/08/30/Python字典基本操作介绍/</id>
    <published>2018-08-30T13:14:27.000Z</published>
    <updated>2018-09-01T06:03:37.532Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h4><ul><li><code>info={}</code></li><li><code>info=dict()</code></li></ul><hr><h4 id="初始化字典"><a href="#初始化字典" class="headerlink" title="初始化字典"></a>初始化字典</h4><h5 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h5><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">key</span> = <span class="string">'name'</span></span><br><span class="line">info = &#123; <span class="built_in">key</span> <span class="string">'cold'</span>&#125;</span><br><span class="line">==&#123;<span class="string">'name'</span><span class="string">'cold'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h5><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">info</span> = <span class="keyword">dict</span>(key = <span class="string">'cold'</span>)</span><br><span class="line">==&#123;<span class="string">'key'</span><span class="string">'cold'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="法三"><a href="#法三" class="headerlink" title="法三"></a>法三</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#还有可以使用dict(zip(a,b))其中a,b都是列表,会生成以A中元素为键,B中元素为值的字典</span></span><br></pre></td></tr></table></figure><hr><h4 id="插入新的键值对-更新"><a href="#插入新的键值对-更新" class="headerlink" title="插入新的键值对(更新)"></a>插入新的键值对(更新)</h4><ul><li>info.update(name=’cold’, blog=’<a href="http://www.linuxzen.com&#39;" target="_blank" rel="noopener">www.linuxzen.com&#39;</a>)</li><li>在字典有没有k这个键时可以使用dict.setdefault(key,value)</li><li>还可以使用dict(var = value)其中var可以是变量,也可以不是,注意不用加</li><li>或是_dict[‘xxx’]=’yyy’</li></ul><hr><h4 id="获得键值"><a href="#获得键值" class="headerlink" title="获得键值"></a>获得键值</h4><ul><li>确定存在的情况下-<ul><li>info.get(‘xxx’)</li><li>info[‘xxx’]</li></ul></li><li>不确定是否存在<ul><li>info.get(‘xxx’)</li></ul></li></ul><hr><h4 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h4><ul><li>获得key,再通过key来获得valuefor key in dicprint(%d,%d%(key,_dict[key]))</li><li>使用dict.items()for key,value in dic.items()print ‘key is %s,value is %s’%(key,value)</li></ul><hr><h4 id="字典删除"><a href="#字典删除" class="headerlink" title="字典删除"></a>字典删除</h4><p><code>del info[&#39;xxx&#39;]</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;创建字典&quot;&gt;&lt;a href=&quot;#创建字典&quot; class=&quot;headerlink&quot; title=&quot;创建字典&quot;&gt;&lt;/a&gt;创建字典&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;info={}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info=dict()&lt;/code&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hello 搭建Hexo博客</title>
    <link href="https://nymrli.top/2018/08/30/hello-hexo/"/>
    <id>https://nymrli.top/2018/08/30/hello-hexo/</id>
    <published>2018-08-30T13:14:27.000Z</published>
    <updated>2018-09-01T10:33:39.636Z</updated>
    
    <content type="html"><![CDATA[<p><strong>电脑环境是Windows，安装好git后，所有搭建操作均在git bash内完成</strong></p><h4 id="1-需要安装git-node-js-npm"><a href="#1-需要安装git-node-js-npm" class="headerlink" title="1.需要安装git, node.js, npm"></a>1.需要安装git, node.js, npm</h4><blockquote><p>注:第一次安装Git会让配置user信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="variable">$git</span><span class="built_in"> config </span>--global user.name <span class="string">"yourname"</span>   #（yourname是git的用户名）</span><br><span class="line">&gt; <span class="variable">$git</span><span class="built_in"> config </span>--global user.email <span class="string">"youremail"</span>）</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="2-使用npm安装hexo：-npm-install-g-hexo"><a href="#2-使用npm安装hexo：-npm-install-g-hexo" class="headerlink" title="2.使用npm安装hexo： npm install -g hexo"></a>2.使用npm安装hexo： <code>npm install -g hexo</code></h4><h4 id="3-创建hexo文件夹，并单击鼠标右键选择-Git-bash：-我的创建路径是：E-hexo）"><a href="#3-创建hexo文件夹，并单击鼠标右键选择-Git-bash：-我的创建路径是：E-hexo）" class="headerlink" title="3.创建hexo文件夹，并单击鼠标右键选择 Git bash：(我的创建路径是：E:\hexo）"></a>3.创建hexo文件夹，并单击鼠标右键选择 Git bash：(我的创建路径是：E:\hexo）</h4><h4 id="4-在刚刚打开的git-bash命令框中操作："><a href="#4-在刚刚打开的git-bash命令框中操作：" class="headerlink" title="4.在刚刚打开的git bash命令框中操作："></a>4.在刚刚打开的git bash命令框中操作：</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> init #hexo 会自动创建网站所需要的文件</span><br><span class="line"><span class="variable">$npm</span> install #安装依赖包</span><br><span class="line"><span class="variable">$hexo</span> generate  # 等价于hexo g</span><br><span class="line"><span class="variable">$hexo</span><span class="built_in"> server </span>#现在可以用127.0.0.1:4000访问hexo默认的hello world界面,等价于hexo s</span><br></pre></td></tr></table></figure><h4 id="5-部署到github-https-github-com-，"><a href="#5-部署到github-https-github-com-，" class="headerlink" title="5.部署到github (https://github.com/)，"></a>5.部署到github (<a href="https://github.com/)，" target="_blank" rel="noopener">https://github.com/)，</a></h4><ul><li>首先注册登录,然后创建页面仓库，Repository name 命名必须是 youname.github.io ，（youname 就是你注册时候用的name）</li><li><code>ssh-keygen -t rsa -C &quot;email&quot; #生成ssh密钥</code>，按三次回车键，密码为空,这边会生成id_rsa和_rsa.pub文件，打开id_rsa.pub，复制全文添加到GitHub 的Add SSH key中。</li><li>最后可以验证一下<code>ssh -T git@github.com</code>,看出现的是不是<code>Hi &quot;Yourname&quot;</code>如果出现了你的github用户名,则成功了</li></ul><h4 id="6-下载Hexo主题"><a href="#6-下载Hexo主题" class="headerlink" title="6.下载Hexo主题"></a>6.下载Hexo主题</h4><ul><li><p><code>$git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia  #下载hexo的yilia 模板到自己的文件目录下</code></p></li><li><p>打开项目目录下的<strong>_config.yml</strong>文件，更改theme：yilia</p><blockquote><p> ▲注意: <strong>_config.yml</strong>文件中配置时:后面都要加空格,与:隔开</p></blockquote></li></ul><h4 id="7-开启评论功能：使用gitment"><a href="#7-开启评论功能：使用gitment" class="headerlink" title="7.开启评论功能：使用gitment"></a>7.开启评论功能：使用gitment</h4><p><code>$npm install gitment --save  #安装gitment</code></p><p>然后在 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a> 进行注册，获取Client ID和Client Secret</p><blockquote><p>▲注意:<strong>其中Authorization callback URL是个坑</strong>:</p><pre><code>这一项不能乱填,不让就不能&quot;初始化评论&quot;..</code></pre><hr><p>应该怎么填呢?</p><ul><li>如果你绑定了自己的域名就直接写自己的域名: <code>https://nymrli.top/</code></li><li>如果没有的话才填写<code>http://Freedomisgood.github.io</code>,否则会一直弹回博客首页,而不能”初始化评论”或者”发表评论”</li></ul><blockquote><p>其中的原因就在于,既可以通过<code>www.nymrli.top</code>解析，也可通过<code>nymrli.top</code>解析,还可以通<code>http://Freedomisgood.github.io</code>解析,而Authorization callback URL只能写一个.(最终解析到的网站)…===&gt;就是<code>nymrli.top</code></p><p>△.感谢<a href="https://github.com/imsun/gitment/issues/95" target="_blank" rel="noopener">IsResultXaL</a>提供的思路</p></blockquote></blockquote><p>打开themes/yilia目录下的_config.yml文件进行修改并保存：</p><p><img src="https://images2018.cnblogs.com/blog/1350574/201808/1350574-20180831193448575-798041221.jpg" alt=""></p><p>再次生成网站,提交网站:<code>hexo d -g</code>就可以输入网址:<a href="https://yourname.github.io打开你的博客了" target="_blank" rel="noopener">https://yourname.github.io打开你的博客了</a></p><h4 id="8-显示文章摘要图片"><a href="#8-显示文章摘要图片" class="headerlink" title="8.显示文章摘要图片"></a>8.显示文章摘要图片</h4><ul><li><p>1 把主页配置文件<code>_config.yml</code> 里的<code>post_asset_folder:</code>这个选项设置为<code>true</code></p></li><li><p>在hexo目录下打开git Bsh或者power Shell,<code>npm install hexo-asset-image --save</code>安装插件</p></li><li><p>再运行<code>hexo n &quot;xxxx&quot;</code>来生成md博文时，<code>/source/_posts</code>文件夹内除了<code>xxxx.md</code>文件还有一个<strong>同名的文件夹</strong></p></li><li><p>4 最后在<code>xxxx.md</code>中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">你想输入的替代文字</span>](<span class="link">xxxx/图片名.jpg</span>)</span><br></pre></td></tr></table></figure></li></ul><p>▲ .之前一直失败,原因在于,我写图片链接的时候是直接拖动图片到编辑器中的,路径为<code>![v2-代替文字](E:\hexo\source\_posts\xxxx\图片名.jpg)</code>,后来一直错误,无法正常显示后，发现只需要写成<code>![代替文字](xxxx\图片名.jpg)</code>即可..</p><h5 id="文章总体框架"><a href="#文章总体框架" class="headerlink" title="文章总体框架:"></a>文章总体框架:</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">photo</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-08</span><span class="bullet">-30</span> <span class="number">21</span><span class="string">:14:27</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">![代替文字](xxxx\图片名.jpg)</span></span><br><span class="line"><span class="string">&lt;!--more--&gt;</span></span><br><span class="line"><span class="string">正文</span></span><br></pre></td></tr></table></figure><blockquote><p>→推一个不错的文章<a href="https://blog.csdn.net/u014732537/article/details/79862980" target="_blank" rel="noopener">Hexo+Coding+Github部署个人博客Error全集</a>,如果出现未能解决的问题,希望能从这篇文章略微得到启发.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;电脑环境是Windows，安装好git后，所有搭建操作均在git bash内完成&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-需要安装git-node-js-npm&quot;&gt;&lt;a href=&quot;#1-需要安装git-node-js-npm&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="hexo" scheme="https://nymrli.top/tags/hexo/"/>
    
  </entry>
  
</feed>
