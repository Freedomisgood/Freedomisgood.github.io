<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>果粒橙的博客</title>
  
  <subtitle>别装作很努力，因为结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2018-10-18T03:37:23.461Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>果粒橙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python中关于round函数的注意事项</title>
    <link href="https://nymrli.top/2018/10/18/python%E4%B8%AD%E5%85%B3%E4%BA%8Eround%E5%87%BD%E6%95%B0%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://nymrli.top/2018/10/18/python中关于round函数的注意事项/</id>
    <published>2018-10-18T03:37:00.000Z</published>
    <updated>2018-10-18T03:37:23.461Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python中关于round函数的注意事项"><a href="#python中关于round函数的注意事项" class="headerlink" title="python中关于round函数的注意事项"></a>python中关于round函数的注意事项</h3><blockquote><p>round函数很简单，对浮点数进行近似取值，保留几位小数。</p></blockquote><p>比如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">10.0</span>/<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">3.33</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">20</span>/<span class="number">7</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment">#第一个参数是一个浮点数，第二个参数是保留的小数位数，可选，如果不写的话默认保留到整数。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[round]函数文档-py3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">round</span><span class="params">(number, ndigits=None)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    round(number[, ndigits]) -&gt; number</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Round a number to a given precision in decimal digits (default 0 digits).</span></span><br><span class="line"><span class="string">    This returns an int when called with one argument, otherwise the</span></span><br><span class="line"><span class="string">    same type as the number. ndigits may be negative.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>翻译一下什么意思呢?: 将数字四舍五入到给定精度,如果不给第二个精度参数的话就默认保留到0位(即整数)</p></blockquote><h4 id="这么简单的函数，能有什么坑呢？"><a href="#这么简单的函数，能有什么坑呢？" class="headerlink" title="这么简单的函数，能有什么坑呢？"></a>这么简单的函数，能有什么坑呢？</h4><p><strong>1、round的结果跟python版本有关</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-------python2---------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">0.5</span>)</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#======python3==========</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">0.5</span>)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>原因在于:</p><p>在python2.7的doc中，round()的最后写着，“Values are rounded to the closest multiple of 10 to the power minus <em>ndigits</em>; if two multiples are equally close, rounding is done away from 0.” 保留值将保留到离上一位更近的一端（四舍六入），<u>如果距离两端一样远，则保留到离0远的一边</u>。所以round(0.5)会近似到1，而round(-0.5)会近似到-1。</p><p>但是到了python3.5的doc中，文档变成了“values are rounded to the closest multiple of 10 to the power minus <em>ndigits</em>; if two multiples are equally close, rounding is done toward the even choice.” <u>如果距离两边一样远，会保留到偶数的一边</u>。比如round(0.5)和round(-0.5)都会保留到0，而round(1.5)会保留到2。</p></blockquote><p><strong>然而需要注意的是</strong></p><p><strong>2、特殊数字round出来的结果可能未必是想要的。</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; round(<span class="number">2.675</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">2.67</span></span><br></pre></td></tr></table></figure><p>官方举例:python2和python3的doc</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Note</span><br><span class="line"></span><br><span class="line">The behavior <span class="keyword">of</span> <span class="built_in">round</span>() <span class="keyword">for</span> floats can be surprising: <span class="keyword">for</span> example, <span class="built_in">round</span>(<span class="number">2.675</span>, <span class="number">2</span>) gives <span class="number">2.67</span> instead <span class="keyword">of</span> <span class="keyword">the</span> expected <span class="number">2.68</span>. This is <span class="keyword">not</span> <span class="keyword">a</span> bug: <span class="keyword">it</span>’s <span class="keyword">a</span> <span class="built_in">result</span> <span class="keyword">of</span> <span class="keyword">the</span> fact that most decimal fractions can’t be represented exactly <span class="keyword">as</span> <span class="keyword">a</span> float. See Floating Point Arithmetic: Issues <span class="keyword">and</span> Limitations <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure><p>简单的说就是，round(2.675, 2) 的结果，不论我们从python2还是3来看，结果都应该是2.68的，结果它偏偏是2.67，为什么？这跟浮点数的精度有关。我们知道在机器中浮点数不一定能精确表达，因为换算成一串1和0后可能是无限位数的，机器已经做出了截断处理)。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离2.67要更近一点点，所以保留两位小数时就近似到了2.67。</p><p><strong>例子</strong>2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">123.45</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">123.5</span></span><br></pre></td></tr></table></figure><p>意思就是说计算机需要先将十进制123.45转换为二进制,这个过程会导致二进制的值比123.45略大(比如123.45000001之类的),那么自然就得到123.5这个值了.</p><hr><p>以上。除非对精确度没什么要求，否则尽量避开用round()函数。近似计算我们还有其他的选择：</p><ol><li><ul><li>使用math模块中的一些函数，比如math.ceiling（天花板除法）。</li></ul></li><li><ul><li>python自带整除，python2中是/，3中是//，还有div函数。</li></ul></li><li><ul><li>字符串格式化可以做截断使用，例如 “%.2f” % value（保留两位小数并变成字符串……如果还想用浮点数请披上float()的外衣）。</li></ul></li><li><ul><li>当然，对浮点数精度要求如果很高的话，请用嘚瑟馍，不对不对，请用decimal模块。</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python中关于round函数的注意事项&quot;&gt;&lt;a href=&quot;#python中关于round函数的注意事项&quot; class=&quot;headerlink&quot; title=&quot;python中关于round函数的注意事项&quot;&gt;&lt;/a&gt;python中关于round函数的注意事项&lt;/
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>HDOJ Problem 1002 - A + B Problem II</title>
    <link href="https://nymrli.top/2018/10/18/HDOJ-Problem-1002-A-B-Problem-II/"/>
    <id>https://nymrli.top/2018/10/18/HDOJ-Problem-1002-A-B-Problem-II/</id>
    <published>2018-10-18T03:36:23.000Z</published>
    <updated>2018-10-18T03:36:44.900Z</updated>
    
    <content type="html"><![CDATA[<h4 id="HDOJ-Problem-1002-A-B-Problem-II"><a href="#HDOJ-Problem-1002-A-B-Problem-II" class="headerlink" title="HDOJ Problem 1002 - A + B Problem II:"></a>HDOJ Problem 1002 - A + B Problem II:</h4><p><strong>大数定理</strong></p><h5 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h5><blockquote><p>I have a very simple problem for you. Given two integers A and B, your job is to calculate the Sum of A + B.</p></blockquote><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><blockquote><p>The first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line consists of two positive integers, A and B. Notice that the integers are very large, that means you should not process them by using 32-bit integer. You may assume the length of each integer will not exceed 1000.</p></blockquote><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><blockquote><p>For each test case, you should output two lines. The first line is “Case #:”, # means the number of the test case. The second line is the an equation “A + B = Sum”, Sum means the result of A + B. Note there are some spaces int the equation. Output a blank line between two test cases.</p></blockquote><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">112233445566778899 </span><span class="number">998877665544332211</span></span><br></pre></td></tr></table></figure><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Case</span> <span class="number">1</span>:</span><br><span class="line"><span class="number">1</span> + <span class="number">2</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Case</span> <span class="number">2</span>:</span><br><span class="line"><span class="number">112233445566778899</span> + <span class="number">998877665544332211</span> = <span class="number">1111111111111111110</span></span><br></pre></td></tr></table></figure><hr><p>解法一:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">1000</span>],b[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> aar[<span class="number">1001</span>],bar[<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> alen,blen,maxlen;</span><br><span class="line"><span class="keyword">int</span> time;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; time;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=time;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">alen = <span class="built_in">strlen</span>(a);</span><br><span class="line">blen = <span class="built_in">strlen</span>(b);</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=alen<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">aar[tmp++] = a[j]-<span class="string">'0'</span>;</span><br><span class="line">tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=blen<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">bar[tmp++] = b[j]-<span class="string">'0'</span>;</span><br><span class="line"><span class="comment">//123 ==&gt;  321 为了保证之后便于计算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( alen &gt; blen)&#123;</span><br><span class="line">maxlen = alen;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=blen;j&lt;alen;j++)&#123;<span class="comment">//长度不同时,短的那个需要补零</span></span><br><span class="line">bar[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">aar[alen] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( alen &lt; blen)&#123;</span><br><span class="line">maxlen = blen;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=alen;j&lt;blen;j++)</span><br><span class="line">&#123;</span><br><span class="line">aar[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">bar[blen] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">maxlen = alen;</span><br><span class="line">aar[maxlen]=<span class="number">0</span>;</span><br><span class="line">bar[maxlen]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;maxlen;j++)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; aar[j] &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bar[j] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">aar[j] += bar[j];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(aar[j] &gt;= <span class="number">10</span>)&#123;<span class="comment">//如果当前位大于10则进一位</span></span><br><span class="line">aar[j] -=<span class="number">10</span>;</span><br><span class="line">aar[j+<span class="number">1</span>] += <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//将a+b的和保存在aar数组里</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Case:"</span> &lt;&lt; i&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">" + "</span> &lt;&lt; b &lt;&lt; <span class="string">" = "</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (aar[maxlen] == <span class="number">0</span> )<span class="comment">//判断第一位是否为0,如果是的话就从第二位开始读,这个是逆序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=maxlen<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--) <span class="built_in">cout</span> &lt;&lt; aar[j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=maxlen;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; aar[j];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i != time)<span class="comment">//注意要求的输出格式</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解法二"><a href="#解法二" class="headerlink" title="解法二:"></a>解法二:</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i,j,y,n,k,h,p,lena,lenb;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000</span>],b[<span class="number">1000</span>],sum[<span class="number">1000</span>],f[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> a1,b1;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(y=<span class="number">1</span>;y&lt;=n;y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a1&gt;&gt;b1;</span><br><span class="line">lena=a1.length();</span><br><span class="line">lenb=b1.length();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">a[i]=<span class="number">0</span>;b[i]=<span class="number">0</span>;f[i]=<span class="number">0</span>;<span class="comment">//f数组是记录a+b和</span></span><br><span class="line">        <span class="comment">//这个补零是先全都设为0,再把不为0的填入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=lena<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="comment">/*1234 ==&gt; 4321*/</span></span><br><span class="line">    a[lena<span class="number">-1</span>-i]=a1[i]-<span class="string">'0'</span>;<span class="comment">//字符'9' - '0' 才是数字9</span></span><br><span class="line"><span class="keyword">for</span>(i=lenb<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    b[lenb<span class="number">-1</span>-i]=b1[i]-<span class="string">'0'</span>;</span><br><span class="line">    k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;lenb || i&lt;lena;i++)&#123;<span class="comment">//i--&gt; max( lena , lenb )</span></span><br><span class="line">h=a[i]+b[i]+k;<span class="comment">//k是下一位是否进一</span></span><br><span class="line">f[i]=h%<span class="number">10</span>;<span class="comment">//f[i]必然是0-9</span></span><br><span class="line">k=h/<span class="number">10</span>;<span class="comment">//如果h大于10,则k=1,如果h小于10,则k=0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k!=<span class="number">0</span>)<span class="comment">//如果k=1,则最高位加一</span></span><br><span class="line">    f[i++]=k; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;y&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt; a1 &lt;&lt;<span class="string">" + "</span>&lt;&lt; b1 &lt;&lt;<span class="string">" = "</span>;</span><br><span class="line">p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;<span class="comment">//将之前为了计算时的倒序,再反正过来</span></span><br><span class="line"> <span class="keyword">if</span>(p==<span class="number">0</span> &amp;&amp; f[j]==<span class="number">0</span>)&#123;<span class="comment">//目的是去前导0,实则这步多余了</span></span><br><span class="line">     <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//如果最高位是0的话i就不会++,如果是1的话,那么f[j]就不会是0,所以这步必然是进入else</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">     p=<span class="number">1</span>;</span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;f[j];</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="▲总结"><a href="#▲总结" class="headerlink" title="▲总结:"></a>▲总结:</h5><ul><li>1.为什么用字符数组==&gt;因为数字太大,long long也存储不下</li><li>2.用int数组记录每一位的数字,然后模拟手算</li><li>3.为什么倒置==&gt;因为为了让末尾对齐,方便计算”个位对个位,十位对十位……”</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;HDOJ-Problem-1002-A-B-Problem-II&quot;&gt;&lt;a href=&quot;#HDOJ-Problem-1002-A-B-Problem-II&quot; class=&quot;headerlink&quot; title=&quot;HDOJ Problem 1002 - A + B Pr
      
    
    </summary>
    
    
      <category term="ACM竞赛入门" scheme="https://nymrli.top/tags/ACM%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 26. 删除排序数组中的重复项</title>
    <link href="https://nymrli.top/2018/10/18/LeetCode-26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>https://nymrli.top/2018/10/18/LeetCode-26-删除排序数组中的重复项/</id>
    <published>2018-10-18T03:35:36.000Z</published>
    <updated>2018-10-18T03:35:50.502Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-26-删除排序数组中的重复项"><a href="#LeetCode-26-删除排序数组中的重复项" class="headerlink" title="LeetCode 26. 删除排序数组中的重复项"></a>LeetCode 26. 删除排序数组中的重复项</h3><p>给定一个排序数组，你需要在<strong>原地</strong>删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在<strong>原地修改输入数组</strong>并在使用 O(1) 额外空间的条件下完成。</p><p><strong>示例 1:</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 <span class="number">2</span>, 并且原数组 nums 的前两个元素被修改为 <span class="number">1</span>, <span class="number">2</span>。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 <span class="number">5</span>, 并且原数组 nums 的前五个元素被修改为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以<strong>“引用”</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">len</span> = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数里修改输入数组对于调用者是可见的。</span></span><br><span class="line"><span class="comment">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">print</span>(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="方法：双指针法"><a href="#方法：双指针法" class="headerlink" title="方法：双指针法"></a>方法：双指针法</h4><p><strong>算法</strong></p><p>数组完成排序后，我们可以放置两个指针 i和 j，其中 i 是慢指针，而 j 是快指针。<strong>只要 nums[i] = nums[j]，我们就增加 j 以跳过重复项</strong>。</p><p>当我们遇到 nums[j] != nums[i] 时，跳过重复项的运行已经结束，因此我们必须把它（nums[j]）的值复制到 nums[i + 1]。然后递增 i，接着我们将再次重复相同的过程，直到 j 到达数组的末尾为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] != nums[i]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)， 假设数组的长度是 n，那么 i 和 j 分别最多遍历 n 步。</li><li>空间复杂度：O(1)。</li></ul><h5 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现:"></a>Python实现:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> len(nums)</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[s] != nums[f]:</span><br><span class="line">                s += <span class="number">1</span></span><br><span class="line">                nums[s] = nums[f]</span><br><span class="line">        <span class="keyword">return</span> s + <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LeetCode-26-删除排序数组中的重复项&quot;&gt;&lt;a href=&quot;#LeetCode-26-删除排序数组中的重复项&quot; class=&quot;headerlink&quot; title=&quot;LeetCode 26. 删除排序数组中的重复项&quot;&gt;&lt;/a&gt;LeetCode 26. 删除排
      
    
    </summary>
    
    
      <category term="ACM竞赛入门" scheme="https://nymrli.top/tags/ACM%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>素数判别</title>
    <link href="https://nymrli.top/2018/10/15/%E7%B4%A0%E6%95%B0%E5%88%A4%E5%88%AB/"/>
    <id>https://nymrli.top/2018/10/15/素数判别/</id>
    <published>2018-10-15T14:30:55.000Z</published>
    <updated>2018-10-15T14:31:57.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="素数判别"><a href="#素数判别" class="headerlink" title="素数判别"></a>素数判别</h3><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime_2</span><span class="params">( <span class="keyword">int</span> num )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> tmp =<span class="built_in">sqrt</span>( num);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">2</span>;i &lt;=tmp; i++)</span><br><span class="line">        <span class="keyword">if</span>(num %i== <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line">一个数若可以进行因数分解，那么分解时得到的两个数一定是一个小于等于<span class="built_in">sqrt</span>(n)，一个大于等于<span class="built_in">sqrt</span>(n)。若<span class="built_in">sqrt</span>(n)左侧找不到约数，那么右侧也一定找不到约数</span><br></pre></td></tr></table></figure><h5 id="方法二-筛选法"><a href="#方法二-筛选法" class="headerlink" title="方法二(筛选法)"></a>方法二(筛选法)</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100000<span class="comment">//求MAX范围内的素数</span></span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> su[MAX],cnt;</span><br><span class="line"><span class="keyword">bool</span> isprime[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(isprime,<span class="number">1</span>,<span class="keyword">sizeof</span>(isprime));<span class="comment">//初始化认为所有数都为素数</span></span><br><span class="line">    isprime[<span class="number">0</span>]=isprime[<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//0和1不是素数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">2</span>;i&lt;=MAX;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isprime[i])<span class="comment">//保存素数</span></span><br><span class="line">        &#123;</span><br><span class="line">            su[cnt++]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j=i*<span class="number">2</span>;j&lt;=MAX;j+=i)<span class="comment">//素数的倍数都为合数</span></span><br><span class="line">        &#123;</span><br><span class="line">            isprime[j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    prime();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;cnt;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d  "</span>,su[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法三-剪枝"><a href="#方法三-剪枝" class="headerlink" title="方法三(剪枝)"></a>方法三(剪枝)</h5><blockquote><p>证明：令x≥1，将大于等于5的自然数表示如下：</p><p><code>······ 6x-1，6x，6x+1，6x+2，6x+3，6x+4 | 6x+5，6(x+1），6(x+1)+1 ······</code></p><p>可以看到，不在6的倍数两侧，即6x两侧的数为6x+2，6x+3，6x+4，由于2(3x+1)，3(2x+1)，2(3x+2)，所以它们一定不是素数，再除去6x本身，显然，素数要出现只可能出现在6x的相邻两侧。这里有个题外话，关于孪生素数，有兴趣的道友可以再另行了解一下，由于与我们主题无关，暂且跳过。这里要注意的一点是，在6的倍数相邻两侧并不是一定就是质数。===&gt;只需判断6两侧的是不是质数(6x-1、6x+1)</p><p>此时判断质数可以6个为单元快进，即将方法（2）循环中i++步长加大为6，加快判断速度，原因是，假如要判定的数为n，则n必定是6x-1或6x+1的形式，对于循环中6i-1，6i，6i+1,6i+2，6i+3，6i+4，其中如果n能被6i，6i+2，6i+4整除，则n至少得是一个偶数，但是6x-1或6x+1的形式明显是一个奇数，故不成立；另外，如果n能被6i+3整除，则n至少能被3整除，但是6x能被3整除，故6x-1或6x+1（即n）不可能被3整除，故不成立。===&gt;综上，循环中只需要考虑6i-1和6i+1的情况(被本身更小的因数所除如22/11)，即循环的步长可以定为6，每次判断循环变量k和k+2的情况即可，理论上讲整体速度应该会是方法（2）的3倍。代码如下：</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> isPrime_3( <span class="built_in">int</span> <span class="built_in">num</span> )</span><br><span class="line">&#123;</span><br><span class="line">                 <span class="comment">//两个较小数另外处理</span></span><br><span class="line">                 <span class="keyword">if</span>(<span class="built_in">num</span> ==<span class="number">2</span>|| <span class="built_in">num</span>==<span class="number">3</span> )</span><br><span class="line">                                 <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">                 <span class="comment">//不在6的倍数两侧的一定不是质数</span></span><br><span class="line">                 <span class="keyword">if</span>(<span class="built_in">num</span> %<span class="number">6</span>!= <span class="number">1</span>&amp;&amp;<span class="built_in">num</span> %<span class="number">6</span>!= <span class="number">5</span>)</span><br><span class="line">                                 <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">                 <span class="built_in">int</span> tmp =sqrt( <span class="built_in">num</span>);</span><br><span class="line">                 <span class="comment">//在6的倍数两侧的也可能不是质数</span></span><br><span class="line">                 <span class="keyword">for</span>(<span class="built_in">int</span> i= <span class="number">5</span>;i &lt;=tmp; i+=<span class="number">6</span> )</span><br><span class="line">                                 <span class="keyword">if</span>(<span class="built_in">num</span> %i== <span class="number">0</span>||<span class="built_in">num</span> %(i+ <span class="number">2</span>)==<span class="number">0</span> )</span><br><span class="line">                                                 <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">                 <span class="comment">//排除所有，剩余的是质数</span></span><br><span class="line">                 <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>for循环i从5开始而不是从7开始的原因</strong>:</p><p>从5、7开始的区别在于i &lt;= sqrt(num)..如果是5的话，判断条件为25；如果是7的话，判断的条件就为49。 </p><p>而仔细观察49内的所有质数，发现25之前的质数都是6k左右的数(6k-1,6k+1)，而25以后，就不定都有了。如26则不为质数。 所以如果从5开始的话，那么25以内的数 都不会进入for循环，经过<code>if(num %6!= 1&amp;&amp;num %6!= 5)</code>的筛选后，就都是素数了。 而如果是从7开始，那么25-49之内的数不符合条件却不会进入for循环，所以26缺少这个for的循环判断后就被误判为素数了。</p><p> ==&gt;以我浅薄的数学见识理解，25以内素数规律的巧合性使得 这些数不需要进入for循环判断，所以相比于从7开始的错误，5开始是正确的 </p><h5 id="给出Py代码"><a href="#给出Py代码" class="headerlink" title="给出Py代码"></a>给出Py代码</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line">def prime_num(<span class="built_in">num</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">num</span> == <span class="number">2</span> <span class="keyword">or</span> <span class="built_in">num</span> == <span class="number">3</span>:</span><br><span class="line"><span class="literal">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">num</span>%<span class="number">6</span> != <span class="number">1</span> <span class="keyword">and</span> <span class="built_in">num</span>%<span class="number">6</span>!=<span class="number">5</span>:</span><br><span class="line"><span class="literal">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,math.ceil(math.<span class="built_in">sqrt</span>(<span class="built_in">num</span>))+<span class="number">1</span>,<span class="number">6</span>):  <span class="comment">#就剩6k-1 和 6k+1</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">num</span>%i == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">num</span>%(i<span class="number">-2</span>)==<span class="number">0</span>:</span><br><span class="line"><span class="literal">return</span> <span class="number">0</span></span><br><span class="line"><span class="literal">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>参考:<a href="https://blog.csdn.net/huang_miao_xin/article/details/51331710" target="_blank" rel="noopener">https://blog.csdn.net/huang_miao_xin/article/details/51331710</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;素数判别&quot;&gt;&lt;a href=&quot;#素数判别&quot; class=&quot;headerlink&quot; title=&quot;素数判别&quot;&gt;&lt;/a&gt;素数判别&lt;/h3&gt;&lt;h5 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法
      
    
    </summary>
    
    
      <category term="ACM竞赛入门" scheme="https://nymrli.top/tags/ACM%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>\r - \n - \r\n的区别</title>
    <link href="https://nymrli.top/2018/10/13/%E5%9B%9E%E8%BD%A6%E5%92%8C%E6%8D%A2%E8%A1%8C%E5%8C%BA%E5%88%AB/"/>
    <id>https://nymrli.top/2018/10/13/回车和换行区别/</id>
    <published>2018-10-13T12:33:33.000Z</published>
    <updated>2018-10-13T12:34:31.882Z</updated>
    
    <content type="html"><![CDATA[<h4 id="r-n-r-n-的区别"><a href="#r-n-r-n-的区别" class="headerlink" title="\r  -  \n - \r\n  的区别"></a>\r  -  \n - \r\n  的区别</h4><h5 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示:"></a>代码演示:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>:              string s1 = <span class="string">"已经习惯了回车和换行一次搞定\n，敲一个回车键，即是回"</span>;</span><br><span class="line"><span class="number">2</span>:   </span><br><span class="line"><span class="number">3</span>:              Console.WriteLine(s1);</span><br><span class="line"><span class="number">4</span>:              s1 = <span class="string">"已经习惯了回车和换行一次搞定\r，敲一个回车键，即是回"</span>;</span><br><span class="line"><span class="number">5</span>:              Console.WriteLine(s1);</span><br><span class="line"><span class="number">6</span>:              s1 = <span class="string">"已经习惯了回车和换行一次搞定\r\n，敲一个回车键，即是回"</span>;</span><br><span class="line"><span class="number">7</span>:              Console.WriteLine(s1);</span><br><span class="line"><span class="number">8</span>:              Console.ReadLine();</span><br></pre></td></tr></table></figure><p>Result:==&gt;</p><p><img src="https://images0.cnblogs.com/blog/535270/201401/08141919-a381bad2fd714daea5e652c4bd18f41e.png" alt=""></p><h5 id="回车、换行的区别"><a href="#回车、换行的区别" class="headerlink" title="回车、换行的区别:"></a>回车、换行的区别:</h5><blockquote><p>\r , \n, \r\n的区别其实是回车与换行的区别 </p></blockquote><table><thead><tr><th>符号</th><th>ASCII码</th><th>意义</th></tr></thead><tbody><tr><td>\n</td><td>10</td><td>换行</td></tr><tr><td>\r</td><td>13</td><td>回车CR</td></tr></tbody></table><p><strong>先来段历史</strong></p><blockquote><p>回车”（Carriage Return）和“换行”（Line Feed）这两个概念的来历和区别。</p><p>在计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33，Linux/Unix下的tty概念也来自于此）的玩意，每秒钟可以打10个字符。但是它有一个问题，就是打完一行换行的时候，要用去0.2秒，正好可以打两个字符。要是在这0.2秒里面，又有新的字符传过来，那么这个字符将丢失。</p><p>于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做“回车”，告诉打字机把打印头定位在左边界；另一个叫做“换行”，告诉打字机把纸向下移一行。这就是“换行”和“回车”的来历，从它们的英语名字上也可以看出一二。</p><p>后来，计算机发明了，这两个概念也就被般到了计算机上。那时，存储器很贵，一些科学家认为在每行结尾加两个字符太浪费了，加一个就可以。于是，就出现了分歧。</p></blockquote><p>在Windows中：</p><p>‘\r’ 回车，回到当前行的行首，而不会换到下一行，如果接着输出的话，本行以前的内容会被逐一覆盖；</p><p>‘\n’ 换行，换到当前位置的下一行，而不会回到行首；</p><p>Unix系统里，每行结尾只有“&lt;换行&gt;”，即”\n”；Windows系统里面，每行结尾是“&lt;回车&gt;&lt;换行&gt;”，即“\r\n”；Mac系统里，每行结尾是“&lt;回车&gt;”，即”\r”；。一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。</p><p><code>例 $ echo -en &#39;12\n34\r56\n\r78\r\n&#39; &gt; tmp.txt</code></p><p><img src="http://img.my.csdn.net/uploads/201301/02/1357098340_3393.jpg" alt=""></p><p><img src="http://img.my.csdn.net/uploads/201301/02/1357098349_7560.jpg" alt=""></p><p>==&gt;Linux中遇到换行符(“\n”)会进行回车+换行的操作，回车符反而只会作为控制字符(“^M”)显示，不发生回车的操作。而windows中要回车符+换行符(“\r\n”)才会回车+换行，缺少一个控制符或者顺序不对都不能正确的另起一行。</p><hr><p>▲注意点：</p><p>在解析文本或其他格式的文件内容时，常常要碰到判定回车换行的地方，这个时候就要注意既要判定”**r**\n”又要判定”\n”。</p><p>写程序时可能得到一行,将其进行trim掉’**r**’,这样能得到你所需要的string了。</p><hr><h5 id="拓展程序测试"><a href="#拓展程序测试" class="headerlink" title="拓展程序测试"></a>拓展程序测试</h5><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*==========================程序二===============================*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        FILE *fp;</span><br><span class="line">        <span class="keyword">if</span>((fp=fopen(<span class="string">"test.txt"</span>,<span class="string">"w"</span>)) == <span class="literal">NULL</span>)    &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"open file error\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">                <span class="built_in">fprintf</span>(fp,<span class="string">"test\n"</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==========================程序二===============================*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        FILE *fp;</span><br><span class="line">        <span class="keyword">if</span>((fp=fopen(<span class="string">"test.bin"</span>,<span class="string">"wb"</span>)) == <span class="literal">NULL</span>)    &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"open file error\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">                <span class="built_in">fprintf</span>(fp,<span class="string">"test\n"</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​    程序一输出文件大小是600字节，程序二输出文件大小是500字节，用记事本打开程序一的输出没有什么问题，每行一个test，打开程序二的输出发现所有的test连成一行，test之间是一个黑色方框符号分隔。用UltraEdit-32以16进制编辑模式打开test.bin可以查看到黑色方框符号就是0A也就是\n，打开test.txt则会发现换行是\r\n，这就是两个文件大小相差100字节的原因。Unix类系统用户打开windows中的文件就会遇到这种苦恼。<br>为什么会有这种区别呢？<br>     毕竟是源自Unix系统，C语言中使用\n表示换行，而在实际的文件中换行符号需要同操作系统一致，所以当我们在<strong>C中使用fopen打开一个文本文件时流实现了实际换行符与C中\n之间的转换</strong>。在windows中当我们用fopen打开文本文件，然后从中读到\r\n时流会转换为\n，而当我们往文件中写入\n时流会转换为\r\n。<strong>程序一是打开文本文件，程序二打开的是二进制文件，因为流只对文本文件进行换行表示的转换，以二进制模式打开流不会做任何处理</strong>。所以当你以二进制模式打开一个文本文件时将产生错乱，你必须亲自将\r\n解释为\n,同样的问题也会出现在以文本模式打开二进制文件的情况.这也解释了为什么Unix类系统中的文件不区分文本文件和二进制文件的原因。</p></blockquote><p>当我们使用标准输入输出函数时有这种情况吗？<br>再回到我们熟悉的标准输入输出stdin,stdout<br>​    C的控制台程序在加载进内存成为进程运行前C运行时库自动打开三个设备并关联到三个流：标准输入流stdin，标准输出流stdout，标准出错流stderr</p><p>​    通常在通用计算机中，没有重定向前这三个流对应的设备是：键盘，显示器，显示器。<strong>这三个都是字符设备，所以是以文本文件的模式打开的</strong>，在windows下当我们在键盘上敲入回车键时产生字符\r\n，但是在OS内核把键盘驱动中读到的字符发送给流的缓冲区时流会将之转换为\n，当我们向控制台输出\n时流将之转换为\r\n再传递至内核，当我们绕过标准输入输出直接调用windows中coredll.lib进行控制台输入输出时就必须面对这一现实，程序员负责实现这一转换。</p><p>摘自:<a href="https://www.cnblogs.com/xiaotiannet/p/3510586.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaotiannet/p/3510586.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;r-n-r-n-的区别&quot;&gt;&lt;a href=&quot;#r-n-r-n-的区别&quot; class=&quot;headerlink&quot; title=&quot;\r  -  \n - \r\n  的区别&quot;&gt;&lt;/a&gt;\r  -  \n - \r\n  的区别&lt;/h4&gt;&lt;h5 id=&quot;代码演示&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="编程" scheme="https://nymrli.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>云服务器Ubuntu更改默认python版本</title>
    <link href="https://nymrli.top/2018/10/12/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8Ubuntu%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4python%E7%89%88%E6%9C%AC/"/>
    <id>https://nymrli.top/2018/10/12/云服务器Ubuntu更改默认python版本/</id>
    <published>2018-10-12T05:07:48.000Z</published>
    <updated>2018-10-12T05:08:26.679Z</updated>
    
    <content type="html"><![CDATA[<h4 id="云服务器Ubuntu更改默认python版本"><a href="#云服务器Ubuntu更改默认python版本" class="headerlink" title="云服务器Ubuntu更改默认python版本"></a>云服务器Ubuntu更改默认python版本</h4><h5 id="1、基于用户修改-Python-版本："><a href="#1、基于用户修改-Python-版本：" class="headerlink" title="1、基于用户修改 Python 版本："></a><strong>1、基于用户修改 Python 版本：</strong></h5><p>想要为某个特定用户修改 Python 版本，只需要在其 home 目录下创建一个 <code>alias</code>(别名) 即可。打开该用户的 <code>~/.bashrc</code>文件，添加新的别名信息来修改默认使用的 Python 版本。</p><blockquote><p><code>vim ~/.bashrc</code></p><p>增加一行<code>alias python=python3</code></p><p><code>source ~/.bashrc</code><br>再输入<code>python --version</code>,就能发现显示的是Python 3.x啦</p></blockquote><h5 id="2、-在系统级修改-Python-版本-建议"><a href="#2、-在系统级修改-Python-版本-建议" class="headerlink" title="2、 在系统级修改 Python 版本(建议)"></a><strong>2、 在系统级修改 Python 版本</strong>(建议)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> update-alternatives --list python</span></span><br><span class="line">update-alternatives: error: no alternatives for python</span><br></pre></td></tr></table></figure><p>如果出现以上所示的错误信息，则表示 Python 的替代版本尚未被 <code>update-alternatives</code> 命令识别。想解决这个问题，我们需要更新一下替代列表，将 <code>python2.7</code> 和 <code>python3.4</code> 放入其中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1</span></span><br><span class="line">update-alternatives: using /usr/bin/python2.7 to provide /usr/bin/python (python) in auto mode</span><br><span class="line"><span class="meta">#</span><span class="bash"> update-alternatives --install /usr/bin/python python /usr/bin/python3.4 2</span></span><br><span class="line">update-alternatives: using /usr/bin/python3.4 to provide /usr/bin/python (python) in auto mode</span><br></pre></td></tr></table></figure><blockquote><p>–install 选项使用了多个参数用于创建符号链接。最后一个参数指定了此选项的优先级，如果我们没有手动来设置替代选项，那么具有最高优先级的选项就会被选中。这个例子中，我们为 /usr/bin/python3.4 设置的优先级为2，所以update-alternatives 命令会自动将它设置为默认 Python 版本。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 接下来，我们再次列出可用的 Python 替代版本。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> update-alternatives --list python</span></span><br><span class="line">/usr/bin/python2.7</span><br><span class="line">/usr/bin/python3.4</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;云服务器Ubuntu更改默认python版本&quot;&gt;&lt;a href=&quot;#云服务器Ubuntu更改默认python版本&quot; class=&quot;headerlink&quot; title=&quot;云服务器Ubuntu更改默认python版本&quot;&gt;&lt;/a&gt;云服务器Ubuntu更改默认python
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="服务器" scheme="https://nymrli.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>nginx+uwsi搭建django环境服务器</title>
    <link href="https://nymrli.top/2018/10/12/nginx+uwsi%E6%90%AD%E5%BB%BAdjango%E7%8E%AF%E5%A2%83%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://nymrli.top/2018/10/12/nginx+uwsi搭建django环境服务器/</id>
    <published>2018-10-12T04:44:09.000Z</published>
    <updated>2018-10-12T04:45:38.227Z</updated>
    
    <content type="html"><![CDATA[<h3 id="阿里云搭建服务器"><a href="#阿里云搭建服务器" class="headerlink" title="阿里云搭建服务器"></a>阿里云搭建服务器</h3><h4 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> upgrade</span><br></pre></td></tr></table></figure><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br><span class="line">sudo /etc/init.d/nginx start (start可以改成restart/stop)</span><br><span class="line"><span class="meta">#</span><span class="bash">或是sudo service nginx start</span></span><br><span class="line">然后浏览器输入服务器IP,观察是否有welcom to nginx!</span><br></pre></td></tr></table></figure><h4 id="安装py3和virtualenv"><a href="#安装py3和virtualenv" class="headerlink" title="安装py3和virtualenv"></a>安装py3和virtualenv</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install git <span class="keyword">python3</span> <span class="keyword">python3</span>-pip</span><br><span class="line">sudo pip3 install virtualenv</span><br></pre></td></tr></table></figure><h4 id="修改python版本"><a href="#修改python版本" class="headerlink" title="修改python版本:"></a>修改python版本:</h4><h5 id="法一-不建议"><a href="#法一-不建议" class="headerlink" title="法一:(不建议)"></a>法一:(不建议)</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ gedit ~/.bashrc   #gedit .bash_aliases</span><br><span class="line">在顶部加入一行alias <span class="keyword">python</span>=<span class="keyword">python3</span></span><br><span class="line">$ <span class="keyword">source</span> ~/.bashrc    #或是<span class="keyword">source</span> ~/.bash_aliases <span class="keyword">o</span></span><br><span class="line">$ <span class="keyword">python</span> --<span class="keyword">version</span></span><br><span class="line">就会发现是Python <span class="number">3.5</span>.<span class="number">2</span>啦</span><br><span class="line"></span><br><span class="line">/*<span class="built_in">or</span></span><br><span class="line">Open your .bashrc <span class="keyword">file</span> nano ~/.bashrc. Type alias <span class="keyword">python</span>=<span class="keyword">python3</span> <span class="keyword">on</span> <span class="keyword">to</span> <span class="keyword">a</span> <span class="keyword">new</span> <span class="built_in">line</span> at the top of the <span class="keyword">file</span> then save the <span class="keyword">file</span> with ctrl+<span class="keyword">o</span> <span class="built_in">and</span> <span class="keyword">close</span> the <span class="keyword">file</span> with ctrl+<span class="keyword">x</span>. Then, back at your <span class="keyword">command</span> <span class="built_in">line</span> <span class="built_in">type</span> <span class="keyword">source</span> ~/.bashrc. Now your alias should <span class="keyword">be</span> permanent.</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h5 id="Ubuntu16-04切换python3和python2"><a href="#Ubuntu16-04切换python3和python2" class="headerlink" title="Ubuntu16.04切换python3和python2"></a><a href="https://www.cnblogs.com/lin135/p/7799650.html" target="_blank" rel="noopener">Ubuntu16.04切换python3和python2</a></h5><h5 id="▲-切换Python3为默认版本：-建议"><a href="#▲-切换Python3为默认版本：-建议" class="headerlink" title="▲.切换Python3为默认版本：(建议)"></a>▲.切换<strong>Python3</strong>为默认版本：(建议)</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">update</span>-alternatives --install /usr/bin/<span class="keyword">python</span> <span class="keyword">python</span> /usr/bin/python2 <span class="number">100</span></span><br><span class="line">sudo <span class="keyword">update</span>-alternatives --install /usr/bin/<span class="keyword">python</span> <span class="keyword">python</span> /usr/bin/<span class="keyword">python3</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><p>切换<strong>Python2</strong>为默认版本：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">update</span>-alternatives <span class="comment">--config python</span></span><br></pre></td></tr></table></figure><h4 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/var/www</span></span><br><span class="line">sudo virtualenv env35</span><br></pre></td></tr></table></figure><h4 id="下载和配置网站"><a href="#下载和配置网站" class="headerlink" title="下载和配置网站"></a>下载和配置网站</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="keyword">clone</span> <span class="title">https</span>://github.com/KyrieWang233/homework_submission-<span class="literal">master</span>.git</span><br><span class="line">source env35/bin/activate</span><br><span class="line">cd home...</span><br><span class="line">sudo pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">python</span> manage.<span class="keyword">py</span> collectstatic</span><br><span class="line">sudo <span class="keyword">python</span> manage.<span class="keyword">py</span> migrate</span><br><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> createsuperuser</span><br><span class="line">sudo <span class="keyword">vim</span> settings.<span class="keyword">py</span>将其中的ALLOWED_HOST=[*]改为自己的IP</span><br><span class="line"></span><br><span class="line">然后输入 <span class="keyword">python</span> manage.<span class="keyword">py</span> runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure><h4 id="安装、测试uwsgi"><a href="#安装、测试uwsgi" class="headerlink" title="安装、测试uwsgi"></a>安装、测试uwsgi</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">sudo</span> <span class="comment">pip3</span> <span class="comment">install</span> <span class="comment">uwsgi</span></span><br><span class="line"><span class="comment">uwsgi</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">http</span> <span class="comment">:8000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">module</span> <span class="comment">homework_submission</span><span class="string">.</span><span class="comment">wsgi</span></span><br></pre></td></tr></table></figure><h4 id="编辑-var-www下的uwsgi-ini"><a href="#编辑-var-www下的uwsgi-ini" class="headerlink" title="编辑/var/www下的uwsgi.ini"></a>编辑/var/www下的uwsgi.ini</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="attribute">chdir</span>=/var/www/homework_submission-master</span><br><span class="line"><span class="attribute">module</span>=homework_submission.wsgi</span><br><span class="line"><span class="attribute">home</span>=/var/www/env35</span><br><span class="line"><span class="attribute">master</span>=<span class="literal">True</span></span><br><span class="line"><span class="attribute">processes</span>=10</span><br><span class="line">socket= :8001</span><br><span class="line">chmod <span class="attribute">socket</span>=666</span><br><span class="line"><span class="attribute">vacuum</span>=<span class="literal">True</span></span><br><span class="line"><span class="attribute">max-requests</span>=5000</span><br></pre></td></tr></table></figure><h4 id="编辑-var-www下的nginx-conf"><a href="#编辑-var-www下的nginx-conf" class="headerlink" title="编辑/var/www下的nginx.conf"></a>编辑/var/www下的nginx.conf</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">upstream django&#123;</span><br><span class="line">server 127.0.0.1:8001;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name sast.nymrli.top;</span><br><span class="line">charset utf-8;</span><br><span class="line">client_max_body_size 75M;</span><br><span class="line">location /static&#123;</span><br><span class="line">alias /var/www/homework_submission-master/static;  </span><br><span class="line">&#125;</span><br><span class="line">location /&#123;</span><br><span class="line">uwsgi_pass django;</span><br><span class="line">include /var/www/uwsgi_params;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编辑-var-www下的uwsgi-params"><a href="#编辑-var-www下的uwsgi-params" class="headerlink" title="编辑/var/www下的uwsgi_params"></a>编辑/var/www下的uwsgi_params</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uwsgi_param</span> QUERY_STRING <span class="variable">$query_string</span>;</span><br><span class="line"><span class="attribute">uwsgi_param</span> REQUEST_METHOD <span class="variable">$request_method</span>;</span><br><span class="line"><span class="attribute">uwsgi_param</span> CONTENT_TYPE <span class="variable">$content_type</span>;</span><br><span class="line"><span class="attribute">uwsgi_param</span> CONTENT_LENGTH <span class="variable">$content_length</span>;     </span><br><span class="line"></span><br><span class="line"><span class="attribute">uwsgi_param</span> REQUEST_URI     <span class="variable">$request_uri</span>;     </span><br><span class="line"><span class="attribute">uwsgi_param</span> PATH_INFO     <span class="variable">$document_uri</span>;     </span><br><span class="line"><span class="attribute">uwsgi_param</span> DOCUMENT_ROOT    <span class="variable">$document_root</span>;     </span><br><span class="line"><span class="attribute">uwsgi_param</span> SERVER_PROTOCOL <span class="variable">$server_protocol</span>;     </span><br><span class="line"><span class="attribute">uwsgi_param</span> REQUEST_SCHEME <span class="variable">$scheme</span>;     </span><br><span class="line"><span class="attribute">uwsgi_param</span> HTTPS     <span class="variable">$https</span> if_not_empty;     </span><br><span class="line"></span><br><span class="line"><span class="attribute">uwsgi_param</span> REMOTE_ADDR     <span class="variable">$remote_addr</span>;     </span><br><span class="line"><span class="attribute">uwsgi_param</span> REMOTE_PORT     <span class="variable">$remote_port</span>;     </span><br><span class="line"><span class="attribute">uwsgi_param</span> SERVER_PORT    <span class="variable">$server_port</span>;   </span><br><span class="line"><span class="attribute">uwsgi_param</span> SERVER_NAME    <span class="variable">$server_name</span>;</span><br></pre></td></tr></table></figure><h4 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx</span><br><span class="line">cd sites-enabled</span><br><span class="line">rm default</span><br><span class="line">ln -s /var/www/nginx.conf homework_submission</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><h4 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h4><p><code>/etc/init.d/nginx restart</code></p><h4 id="运行uwsgi"><a href="#运行uwsgi" class="headerlink" title="运行uwsgi"></a>运行uwsgi</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/var/www</span></span><br><span class="line">uwsgi <span class="params">--ini</span> uwsgi.ini</span><br></pre></td></tr></table></figure><h4 id="让uwsgi自启动"><a href="#让uwsgi自启动" class="headerlink" title="让uwsgi自启动"></a>让uwsgi自启动</h4><blockquote><p>vim /etc/rc.local(注意非虚拟环境也得安装uwsgi模块)</p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">添加下面代码:</span><br><span class="line">/usr/<span class="keyword">local</span>/bin/uwsgi <span class="comment">--ini /var/www/uwsgi.ini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="uwsgi的热启动"><a href="#uwsgi的热启动" class="headerlink" title="uwsgi的热启动"></a>uwsgi的热启动</h4><blockquote><p>在uwsgi.ini中加入</p><p><code>py-autoreload=1</code></p><p>重启一下:<code>killall -9 uwsgi</code>、<code>/usr/local/bin/uwsgi --ini /var/www/uwsgi.ini</code></p></blockquote><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>关于etc/ linit. d</strong></p><p>如果你使用过inux系统,那么你一定听说过 init. d目录,这个目录到底是干嘛的呢?它归根结底只做了一件事情,但这件事情非同小可,是为整个系统做的,因此它非常重要。init.d目录包含许多系统各种服务的启动和停止脚本</p><p><strong>关于 /etc/rc.local</strong></p><p>rc.local也是我经常使用的一个脚本,该脚本是在系统初始化级别脚本运行之后再执行的,因此可以安’, ‘地在里面添加你想在系统启动之后执行的脚本.</p><p><strong>总结</strong></p><p>Linux是灵活的,正因为它的灵活性,我们总是可以找到许多不同的办法来解决同一个问题，服务的例子就是一个很好的佐证,有了 /etc/init.d目录下的脚本,再加上 /etc/rc. local这个利器，你可以放心的确保你的服务可以完美的启动和运行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;阿里云搭建服务器&quot;&gt;&lt;a href=&quot;#阿里云搭建服务器&quot; class=&quot;headerlink&quot; title=&quot;阿里云搭建服务器&quot;&gt;&lt;/a&gt;阿里云搭建服务器&lt;/h3&gt;&lt;h4 id=&quot;更新源&quot;&gt;&lt;a href=&quot;#更新源&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="服务器" scheme="https://nymrli.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发遇到的坑</title>
    <link href="https://nymrli.top/2018/10/04/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://nymrli.top/2018/10/04/小程序开发遇到的坑/</id>
    <published>2018-10-04T12:26:58.000Z</published>
    <updated>2018-10-04T12:30:16.418Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="小程序开发遇到的坑"><a href="#小程序开发遇到的坑" class="headerlink" title="小程序开发遇到的坑"></a>小程序开发遇到的坑</h3><h4 id="function-与-gt-的区别"><a href="#function-与-gt-的区别" class="headerlink" title="function 与 =&gt; 的区别"></a><a href="https://www.cnblogs.com/hammerc/p/7390424.html" target="_blank" rel="noopener">function 与 =&gt; 的区别</a></h4><blockquote><p>在JS中，箭头函数并不是简单的function(){}匿名函数的简写语法糖，实际上，箭头函数和匿名函数有个明显的区别：<strong>箭头函数内部的this是词法作用域，在编写函数时就已经确定了。</strong>而匿名函数的this指向运行时实际调用该方法的对象，无法在编写函数时确定。</p></blockquote><h4 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h4><ul><li>不可以当做构造函数，也就是说，不可以使用 new 命令，否则会抛出错误。</li><li><strong><em>this、arguments、caller等对象在函数体内都不存在。</em></strong></li><li>不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数。</li></ul><blockquote><p>==&gt;箭头函数除了传入的参数之外，其它的对象都没有！<strong>在箭头函数引用了this、arguments或者参数之外的变量，那它们一定不是箭头函数本身包含的，而是从父级作用域继承的。</strong></p></blockquote><h5 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例:"></a>代码实例:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">this</span>.func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.num); <span class="comment">// 100</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.num); <span class="comment">// undefined</span></span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Test();</span><br><span class="line">obj.func();</span><br><span class="line"><span class="comment">//这里的方法里调用了setTimeout函数，该函数500毫秒后调用我们定义的函数时，实际上是window对象调用的，所以这时匿名函数的this是指向window而不是指向obj了。</span></span><br></pre></td></tr></table></figure><p>在箭头函数出现之前一般都是这么写的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">this</span>.func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.num); <span class="comment">// 100</span></span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;<span class="comment">//保存一份当前的this对象</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(that.num); <span class="comment">// 100</span></span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Test();</span><br><span class="line">obj.func();</span><br><span class="line"><span class="comment">//这是利用了闭包的概念。箭头函数可以看做这种方式的语法糖。</span></span><br><span class="line"><span class="comment">//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">this</span>.func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.num); <span class="comment">// 100</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.num); <span class="comment">// 100//箭头函数没有this,所以从上层父级继承</span></span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Test();</span><br><span class="line">obj.func();</span><br></pre></td></tr></table></figure><p>▲同时需要注意的是:this是指向当前的对象，随着上下文作用域的切换this的执行this的指向会发生改变，我们可以先保存一份this的值然后再使用：<code>var that = this</code></p><hr><h4 id="生成带参数的二维码"><a href="#生成带参数的二维码" class="headerlink" title="生成带参数的二维码"></a>生成带参数的二维码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> onShow:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_code</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      wx.request(&#123;</span><br><span class="line">        url: <span class="string">'https://api.weixin.qq.com/cgi- bin/token?grant_type=client_credential&amp;appid='</span> + that.data.APP_ID + <span class="string">'&amp;secret='</span> + that.data.APP_SECRET,</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// console.log(res.data.access_token);</span></span><br><span class="line">          wx.request(&#123;</span><br><span class="line">            data: &#123;</span><br><span class="line">            <span class="string">'path'</span>: <span class="string">"pages/index"</span></span><br><span class="line">            &#125;, </span><br><span class="line">          url: <span class="string">'https://api.weixin.qq.com/wxa/getwxacode?access_token='</span> + res.data.access_token,</span><br><span class="line">            method: <span class="string">'POST'</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(res.data);<span class="comment">//2jin zhi </span></span><br><span class="line">              &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    get_code();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//官方接口得到的是图片的二进制流</span></span><br></pre></td></tr></table></figure><p>通过草料微信小程序生成二维码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    APP_ID: <span class="string">'wx05818046869e4078'</span>,</span><br><span class="line">    APP_SECRET: <span class="string">'5d4429375e84d6ab9476b643f8733af9'</span>,</span><br><span class="line">    path: <span class="string">'pages/index'</span>,</span><br><span class="line">    photo:<span class="literal">null</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  onShow:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(that.data.APP_ID + <span class="string">' '</span> + that.data.APP_SECRET + <span class="string">' '</span> + that.data.path)</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: <span class="string">'https://cli.im/home/weapp/create'</span>,</span><br><span class="line">      method:<span class="string">'POST'</span>,</span><br><span class="line">      data:&#123;</span><br><span class="line">        <span class="string">'weapp_id'</span>: that.data.APP_ID,</span><br><span class="line"><span class="string">'weapp_secret'</span>: that.data.APP_SECRET,</span><br><span class="line"><span class="string">'weapp_url'</span>: that.data.path</span><br><span class="line">      &#125;,</span><br><span class="line">      header:&#123;</span><br><span class="line">        <span class="string">'content- type'</span>: <span class="string">'application/x- www- form- urlencoded'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      success:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data.data)</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            photo: res.data.data</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="组件的自定义数据属性"><a href="#组件的自定义数据属性" class="headerlink" title="组件的自定义数据属性:"></a>组件的自定义数据属性:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view bindtap=<span class="string">"f0"</span> data- xxx- yyy=<span class="string">'blabla'</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/在点击触发事件f0的参数event中,dataset为自定义参数的字典,其中,键值为驼峰命名法.xxxYyy</span></span><br></pre></td></tr></table></figure><p>▲.bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定可以阻止冒泡事件向上冒泡</p><hr><h4 id="wx-requests是异步调用的"><a href="#wx-requests是异步调用的" class="headerlink" title="wx.requests是异步调用的"></a>wx.requests是异步调用的</h4><blockquote><p>wx.requests这个api是不会阻塞的,什么时候收到response就什么时候调用回调函数(success…),如果在wx.requests方法调用后还有运行代码(1),则(1)比回调函数早执行</p></blockquote><h4 id="组件"><a href="#组件" class="headerlink" title="组件:"></a>组件:</h4><blockquote><p>以某种方式对 <strong>业务逻辑</strong>和<em> </em>功能**的封装</p><p>特点:高内聚,可复用</p></blockquote><ul><li><p>视图组件</p></li><li><p>表单组件</p></li><li><p>媒体组件</p></li><li><p>画布组件</p></li><li><p>基础内容组件</p></li><li><p>导航组件</p></li><li><p>地图组件</p></li><li><p>开放能力组件</p></li></ul><h5 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件:"></a>自定义组件:</h5><p>​    内容略</p><hr><h3 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性:"></a>ES6新特性:</h3><h4 id="js中let和var定义变量的区别"><a href="#js中let和var定义变量的区别" class="headerlink" title="js中let和var定义变量的区别"></a>js中let和var定义变量的区别</h4><ul><li><h5 id="声明后未赋值，表现相同"><a href="#声明后未赋值，表现相同" class="headerlink" title="声明后未赋值，表现相同:"></a>声明后未赋值，表现相同:</h5><ul><li>如果未在 <strong>let 、var</strong> 语句中初始化您的变量，则将自动为其分配 JavaScript 值 <strong>undefined</strong></li></ul></li><li><h5 id="使用未声明的变量，表现不同"><a href="#使用未声明的变量，表现不同" class="headerlink" title="使用未声明的变量，表现不同:"></a>使用未声明的变量，表现不同:</h5><ul><li>var有变量提升，let无变量提升</li></ul></li><li><h5 id="重复声明同一个变量时，表现不同："><a href="#重复声明同一个变量时，表现不同：" class="headerlink" title="重复声明同一个变量时，表现不同："></a>重复声明同一个变量时，表现不同：</h5><ul><li>var重复声明时覆盖，let重复声明时报错</li></ul></li><li><h5 id="变量作用范围，表现不同："><a href="#变量作用范围，表现不同：" class="headerlink" title="变量作用范围，表现不同："></a>变量作用范围，表现不同：</h5><ul><li><p>使用 <strong>let</strong> 语句声明一个变量，该变量的范围限于声明它的块中。 </p></li><li><p>==&gt;代码演示:</p></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> varTest = <span class="string">'test var OK.'</span>;</span><br><span class="line">  <span class="keyword">let</span> letTest = <span class="string">'test let OK.'</span>;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> varTest = <span class="string">'varTest changed.'</span>;</span><br><span class="line">    <span class="keyword">let</span> letTest = <span class="string">'letTest changed.'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(varTest); </span><br><span class="line">    <span class="comment">//输出"varTest changed."，内部"&#123;&#125;"中声明的varTest变量覆盖外部的letTest声明</span></span><br><span class="line">  <span class="built_in">console</span>.log(letTest); </span><br><span class="line">    <span class="comment">//输出"test let OK."，内部"&#123;&#125;"中声明的letTest和外部的letTest不是同一个变量</span></span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;小程序开发遇到的坑&quot;&gt;&lt;a href=&quot;#小程序开发遇到的坑&quot; class=&quot;headerlink&quot; title=&quot;小程序开发遇到的坑&quot;&gt;&lt;/a&gt;小程序开发遇到的坑&lt;/h3&gt;&lt;h4 id=&quot;function-与-gt-的区别&quot;&gt;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://nymrli.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="微信小程序" scheme="https://nymrli.top/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>带表头的单链表的基本操作</title>
    <link href="https://nymrli.top/2018/09/27/%E5%B8%A6%E8%A1%A8%E5%A4%B4%E7%9A%84%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://nymrli.top/2018/09/27/带表头的单链表的基本操作/</id>
    <published>2018-09-27T14:12:17.000Z</published>
    <updated>2018-09-27T14:25:50.649Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Notpresent 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType elem;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">head</span>;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">&#125;Headlist;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(Headlist *L)</span></span>&#123;</span><br><span class="line">L-&gt;head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;head) <span class="keyword">return</span> ERROR;</span><br><span class="line">L-&gt;head-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(Headlist *L)</span></span>&#123;</span><br><span class="line">Node *p=L-&gt;head,*pre=<span class="literal">NULL</span>;</span><br><span class="line">Node *r=p-&gt;link;</span><br><span class="line">p-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">p=r;<span class="comment">//r保存原来的结点顺序</span></span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">r = p-&gt;link;<span class="comment">//r继续取下一个结点</span></span><br><span class="line">pre = L-&gt;head;<span class="comment">//pre重新构造L,从头开始循环</span></span><br><span class="line"><span class="keyword">while</span>(pre-&gt;link != <span class="literal">NULL</span> &amp;&amp; pre-&gt;link-&gt;elem &lt; p-&gt;elem)  </span><br><span class="line">            <span class="comment">// 如果链表非空 且 新链表与当前结点数值比较</span></span><br><span class="line">pre = pre-&gt;link;</span><br><span class="line">        <span class="comment">//如果当前要插入的结点值大于循环中当前已排序结点,则取已排序链表下一个结点继续比较</span></span><br><span class="line">p-&gt;link = pre-&gt;link;    </span><br><span class="line">        <span class="comment">//找到p要插入的位置后,插入:若3&lt;pre=5&lt;bigger=7&lt;8,p=6,则 p=&gt;bigger</span></span><br><span class="line">pre-&gt;link = p;<span class="comment">// pre=&gt;p,插入即可</span></span><br><span class="line">p=r;<span class="comment">// p继续取下个结点依次按原来顺序循环遍历原来链表</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleleab</span><span class="params">(Headlist *L, <span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123; </span><br><span class="line">     Node *q = L-&gt;head,*p=L-&gt;head-&gt;link;  <span class="comment">// q为上一个,p为当前的</span></span><br><span class="line">     <span class="keyword">while</span>( p )</span><br><span class="line">     <span class="keyword">if</span>(p-&gt;elem &gt;= a &amp;&amp; p-&gt;elem &lt;= b)</span><br><span class="line">     &#123;</span><br><span class="line">     q-&gt;link = p-&gt;link;<span class="comment">// 1 - 2 - 3  1==&gt;3,1的指针域指向3</span></span><br><span class="line">     <span class="built_in">free</span>(p);<span class="comment">//释放2</span></span><br><span class="line">     p = q-&gt;link;<span class="comment">// 当前的指针变成3</span></span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        p = p-&gt;link;</span><br><span class="line">        q = p-&gt;link;</span><br><span class="line">     &#125;      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Converse</span><span class="params">(Headlist *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *p = <span class="literal">NULL</span>,*cur= <span class="literal">NULL</span>; </span><br><span class="line">Node *q = L-&gt;head-&gt;link;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;head &amp;&amp; L-&gt;head-&gt;link)&#123;<span class="comment">//如果表不存在或是为空,则return ERROR</span></span><br><span class="line"><span class="keyword">while</span>( q != <span class="literal">NULL</span> )<span class="comment">//q按照原来的顺序依次遍历各结点</span></span><br><span class="line">&#123;</span><br><span class="line">cur = q;<span class="comment">//cur为当前结点</span></span><br><span class="line">q = q-&gt;link;<span class="comment">//q保存下一个结点</span></span><br><span class="line">L-&gt;head-&gt;link = cur;<span class="comment">//为了不动头结点,所以头结点link始终指向当前要加的结点</span></span><br><span class="line">cur-&gt;link = p;<span class="comment">//当前的link指向上一个结点</span></span><br><span class="line">p = cur;<span class="comment">//保存上一个结点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(Headlist *L,<span class="keyword">int</span> j,ElemType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *p=<span class="literal">NULL</span>,*q=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(j&lt;<span class="number">-1</span> || j&gt; L-&gt; n<span class="number">-1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L-&gt;head;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=j;i++) p=p-&gt;link;</span><br><span class="line">q = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">q-&gt;elem = x;</span><br><span class="line">q-&gt;link = p-&gt;link;</span><br><span class="line">p-&gt;link = q;</span><br><span class="line">L-&gt;n++;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Output</span><span class="params">(Headlist L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *p = L.head-&gt;link;</span><br><span class="line"><span class="keyword">if</span>(!L.n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;elem );</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Destory</span><span class="params">(Headlist *L)</span></span>&#123;</span><br><span class="line">Node *p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(L-&gt;head)&#123;<span class="comment">//不断删除head所指向的内存,直到head被释放</span></span><br><span class="line">p = L-&gt;head-&gt;link;  </span><br><span class="line"><span class="built_in">free</span>(L-&gt;head);</span><br><span class="line">L-&gt;head = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Delete</span><span class="params">(Headlist *L,<span class="keyword">int</span> j)</span></span>&#123;<span class="comment">//下标j</span></span><br><span class="line">Node *p = L-&gt;head,*q = L-&gt;head;<span class="comment">// q = tmp</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">if</span> ( j&lt;<span class="number">0</span> || j&gt;L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span> ;i&lt;=j<span class="number">-1</span>;i++) p = p-&gt;link;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">q-&gt;link = p-&gt;link;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Find</span><span class="params">(Headlist *L,<span class="keyword">int</span> j,ElemType *x)</span></span>&#123;</span><br><span class="line">Node *p= L-&gt;head;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> ( j&lt;<span class="number">0</span> || j&gt;L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span> ;i&lt;=j;i++) p = p-&gt;link;</span><br><span class="line">*x = p-&gt;elem;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">Headlist <span class="built_in">list</span>;</span><br><span class="line">Init(&amp;<span class="built_in">list</span>);</span><br><span class="line"> Insert(&amp;<span class="built_in">list</span>,<span class="number">-1</span>,<span class="number">3</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">-1</span>,<span class="number">5</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">2</span>,<span class="number">7</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the linked list is :"</span>); </span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nAfter sorted:"</span>);</span><br><span class="line">Sort(&amp;<span class="built_in">list</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nAfter Conversed:"</span>);</span><br><span class="line">Converse(&amp;<span class="built_in">list</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nAfter delete index of 0,the list is:"</span>);</span><br><span class="line">Delete(&amp;<span class="built_in">list</span>,<span class="number">0</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">Find(&amp;<span class="built_in">list</span>,<span class="number">2</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nthe index of 2:%d\n"</span>,x);</span><br><span class="line"></span><br><span class="line">Destory(&amp;<span class="built_in">list</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无论是什么都要略过head表头结点,表头结点的elem是任意的.</span></span><br></pre></td></tr></table></figure><h4 id="一-实验中遇到的主要问题及解决方法"><a href="#一-实验中遇到的主要问题及解决方法" class="headerlink" title="(一)实验中遇到的主要问题及解决方法"></a>(一)实验中遇到的主要问题及解决方法</h4><blockquote><p>1.题目二，带表头的单链表在插入时出现了点问题，书上给出的方法是错的，且是C++代码。于是在尝试理解他的想法及每步Debug中终于写出了正确的代码。（L-&gt;head-&gt;link = NULL,其中L-&gt;head-&gt;data 不填）</p><p>2.题目二中带表头节点的单链表中插入时for( j=0;j&lt;=i; j++) 和之前j&lt;i以及删除时for( j=0;j&lt;=i-1; j++) 和之前j&lt;i-1有很大不同,通过debug知道了是为了略过第一个表头节点。</p><p>3.逆置过程中,为了不动表头,略过第一个表头结点时出现了点麻烦.并且在第一个元素逆置后指向NULL,第二个结点指向第一个结点时没有想明白,后来才想到了先让<em>P=NULL,然后记录上一个结点就能达到效果了.同时还有个问题是一直没有保存原来链表的顺序,再因为</em>P=NULL导致会访问到非法内存而程序崩溃</p></blockquote><h4 id="（二）实验心得"><a href="#（二）实验心得" class="headerlink" title="（二）实验心得"></a>（二）实验心得</h4><blockquote><p>2.题目二中,带表头单链表和不带表头单链表,在删除和插入时的循环条件不同要注意.及初始化时带表头的L-&gt;head-&gt;link= NULL; 与 无表头的 L-&gt;first = NULL;</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>带表头的单链表应用——多项式</title>
    <link href="https://nymrli.top/2018/09/27/%E5%B8%A6%E8%A1%A8%E5%A4%B4%E7%9A%84%E5%8D%95%E9%93%BE%E8%A1%A8%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    <id>https://nymrli.top/2018/09/27/带表头的单链表应用——多项式/</id>
    <published>2018-09-27T14:04:31.000Z</published>
    <updated>2018-09-27T14:26:11.753Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Notpresent 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType ceof;</span><br><span class="line">ElemType <span class="built_in">exp</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PNode</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;PNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PNode</span> *<span class="title">head</span>;</span></span><br><span class="line">&#125;polynominal;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">p-&gt;head = (PNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">p-&gt;head-&gt;<span class="built_in">exp</span> = <span class="number">-1</span>;</span><br><span class="line">p-&gt;head-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Create</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">PNode *pn = <span class="literal">NULL</span>,*q=<span class="literal">NULL</span>,*pre=<span class="literal">NULL</span>;</span><br><span class="line">    Init(p);</span><br><span class="line"><span class="comment">//p-&gt;head = (PNode *)malloc(sizeof(PNode));</span></span><br><span class="line"><span class="comment">//p-&gt;head-&gt;exp = -1;</span></span><br><span class="line"><span class="comment">//p-&gt;head-&gt;link = NULL;</span></span><br><span class="line"><span class="keyword">for</span> (;;)   <span class="comment">// &lt;==&gt;while(1)</span></span><br><span class="line">&#123;</span><br><span class="line">pn = (PNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ceof:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pn-&gt;ceof);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"exp:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pn-&gt;<span class="built_in">exp</span>);</span><br><span class="line"><span class="keyword">if</span> (pn-&gt;<span class="built_in">exp</span> &lt; <span class="number">0</span>) &#123;<span class="built_in">printf</span>(<span class="string">"End the input\n"</span>); <span class="keyword">break</span>;&#125;</span><br><span class="line">pre = p-&gt;head;<span class="comment">//pre从链表头开始</span></span><br><span class="line">q=p-&gt;head-&gt;link;</span><br><span class="line"><span class="keyword">while</span>(q &amp;&amp; q-&gt;<span class="built_in">exp</span> &gt; pn-&gt;<span class="built_in">exp</span>)&#123;<span class="comment">//pn为当前结点,q为链表中结点</span></span><br><span class="line">pre = q;<span class="comment">//</span></span><br><span class="line">q = q-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line">pn-&gt;link = q;<span class="comment">// 在pre和q之间插入pn,(q为null时,相当于末尾插入pn)</span></span><br><span class="line">pre-&gt;link = pn;<span class="comment">// pre =&gt; pn =&gt; q</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Sort</span><span class="params">(polynominal *L)</span></span>&#123;<span class="comment">//从大到小</span></span><br><span class="line">PNode *p=L-&gt;head,*pre=<span class="literal">NULL</span>;</span><br><span class="line">PNode *r=p-&gt;link;</span><br><span class="line">p-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">p=r;<span class="comment">//r保存原来的结点顺序</span></span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">r = p-&gt;link;<span class="comment">//r继续取下一个结点</span></span><br><span class="line">pre = L-&gt;head;<span class="comment">//pre重新构造L,从头开始循环</span></span><br><span class="line"><span class="keyword">while</span>(pre-&gt;link != <span class="literal">NULL</span> &amp;&amp; pre-&gt;link-&gt;<span class="built_in">exp</span> &lt; p-&gt;<span class="built_in">exp</span>)  </span><br><span class="line">            <span class="comment">// 如果链表非空 且 新链表与当前结点数值比较</span></span><br><span class="line">pre = pre-&gt;link;</span><br><span class="line">        <span class="comment">//如果当前要插入的结点值大于循环中当前已排序结点,则取已排序链表下一个结点继续比较</span></span><br><span class="line">p-&gt;link = pre-&gt;link;   </span><br><span class="line">        <span class="comment">//找到p要插入的位置后,插入:若3&lt;pre=5&lt;bigger=7&lt;8,p=6,则 p=&gt;bigger</span></span><br><span class="line">pre-&gt;link = p;<span class="comment">// pre=&gt;p,插入即可</span></span><br><span class="line">p=r;<span class="comment">// p继续取下个结点依次按原来顺序循环遍历原来链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Add</span><span class="params">(polynominal *px,polynominal *qx)</span></span>&#123;<span class="comment">//目的:将q改成p+q</span></span><br><span class="line">PNode *q1=qx-&gt;head, *p=px-&gt;head-&gt;link;<span class="comment">//q1指向qx表头结点</span></span><br><span class="line">PNode *q=q1-&gt;link;<span class="comment">//p指向多项式px第一个结点,q指向qx第一个</span></span><br><span class="line">PNode *temp = <span class="literal">NULL</span>;<span class="comment">//q1是q前驱</span></span><br><span class="line"><span class="keyword">while</span>( q &amp;&amp; p)&#123;</span><br><span class="line"><span class="keyword">while</span>( p-&gt;<span class="built_in">exp</span> &lt; q-&gt;<span class="built_in">exp</span> )&#123;<span class="comment">//找到qx中 大于等于q指数项的项,q不断右移</span></span><br><span class="line">q1 = q;</span><br><span class="line">q = q-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;<span class="built_in">exp</span> == q-&gt;<span class="built_in">exp</span> )&#123;</span><br><span class="line">q-&gt;ceof = q-&gt;ceof + p-&gt;ceof;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;ceof == <span class="number">0</span>)&#123;</span><br><span class="line">q1-&gt;link = q-&gt;link;<span class="comment">//释放当前q的内存</span></span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">q = q1-&gt;link;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//p\q都右移</span></span><br><span class="line">q1 = q;<span class="comment">//q1</span></span><br><span class="line">q = q-&gt;link;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//p-&gt;exp &gt; q-&gt;exp </span></span><br><span class="line">temp = (PNode * )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">temp-&gt;ceof = p-&gt;ceof;</span><br><span class="line">temp-&gt;<span class="built_in">exp</span> = p-&gt;<span class="built_in">exp</span>;</span><br><span class="line">temp-&gt;link = q1-&gt;link;</span><br><span class="line">q1-&gt;link = temp;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">PNode *q = p-&gt;head-&gt;link;</span><br><span class="line"><span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>( q!=<span class="literal">NULL</span> )&#123;</span><br><span class="line"><span class="keyword">if</span>(q-&gt;link == <span class="literal">NULL</span>) last =<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dx^%d"</span>, q-&gt;ceof,q-&gt;<span class="built_in">exp</span>);</span><br><span class="line"><span class="keyword">if</span>(!last) <span class="built_in">printf</span>(<span class="string">"+"</span>);<span class="comment">//此处注意个+的小细节</span></span><br><span class="line">q = q-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">PNode *q = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;head)&#123;<span class="comment">//不断删除head所指向的内存,直到head被释放</span></span><br><span class="line">q = p-&gt;head-&gt;link;</span><br><span class="line"><span class="built_in">free</span>(p-&gt;head);</span><br><span class="line">p-&gt;head = q;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********合并同类项*****************/</span></span><br><span class="line"><span class="comment">/***********合并即free*****************/</span></span><br><span class="line"><span class="function">Status <span class="title">unify</span><span class="params">(polynominal *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PNode *p=<span class="literal">NULL</span>;</span><br><span class="line">    PNode *q=<span class="literal">NULL</span>;</span><br><span class="line">    PNode *last=<span class="literal">NULL</span>;</span><br><span class="line">    PNode *tmp;</span><br><span class="line">    <span class="comment">//while(p-&gt;link != NULL)&#123;</span></span><br><span class="line">    <span class="keyword">for</span>(p=t-&gt;head-&gt;link;p!=<span class="literal">NULL</span>;p=p-&gt;link)&#123; <span class="comment">//选择</span></span><br><span class="line">        last = p;</span><br><span class="line">        <span class="keyword">for</span>(q=last-&gt;link; q!=<span class="literal">NULL</span> ; )&#123;  <span class="comment">//q指针向后推移指向下一结点</span></span><br><span class="line">        <span class="keyword">if</span>(q-&gt;<span class="built_in">exp</span> == p-&gt;<span class="built_in">exp</span>)&#123;<span class="comment">//相等计算</span></span><br><span class="line">            p-&gt;ceof += q-&gt;ceof;<span class="comment">//q为 滑动项</span></span><br><span class="line">            tmp = q-&gt;link;</span><br><span class="line">            last-&gt;link = q-&gt;link;     <span class="comment">//last保存上一个q   </span></span><br><span class="line">            <span class="built_in">free</span>(q);<span class="comment">// 吧q的空间释放掉</span></span><br><span class="line">            q= tmp;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        last= q;</span><br><span class="line">        q=q-&gt;link;&#125;<span class="comment">//如果不相等就判断下一个</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">polynominal <span class="title">Multiply</span><span class="params">(polynominal *px,polynominal *qx)</span></span>&#123;</span><br><span class="line">PNode *p = px-&gt;head;</span><br><span class="line">PNode *q = qx-&gt;head;</span><br><span class="line">PNode *x = <span class="literal">NULL</span>;</span><br><span class="line">PNode *tmp = <span class="literal">NULL</span>;</span><br><span class="line">polynominal newpoly;</span><br><span class="line">Init(&amp;newpoly);</span><br><span class="line">x = newpoly.head;</span><br><span class="line"><span class="keyword">for</span> (p=px-&gt;head-&gt;link; p!=<span class="literal">NULL</span>; p=p-&gt;link)&#123;</span><br><span class="line"><span class="keyword">for</span> (q=qx-&gt;head-&gt;link; q!=<span class="literal">NULL</span>; q=q-&gt;link)&#123;</span><br><span class="line">tmp = (PNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">tmp-&gt;ceof = p-&gt;ceof * q-&gt;ceof;</span><br><span class="line">tmp-&gt;<span class="built_in">exp</span> = p-&gt;<span class="built_in">exp</span> + q-&gt;<span class="built_in">exp</span>;</span><br><span class="line">tmp-&gt;link = x-&gt;link;<span class="comment">//新生成的结点指向上一个生成的结点的地址</span></span><br><span class="line">x-&gt;link = tmp;<span class="comment">//使链表记录当前tmp结点</span></span><br><span class="line">x = x-&gt;link;<span class="comment">//取下一个结点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">unify(&amp;newpoly);</span><br><span class="line">Sort(&amp;newpoly);</span><br><span class="line"><span class="keyword">return</span> newpoly;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">polynominal p,q;</span><br><span class="line">polynominal mul;</span><br><span class="line">Create(&amp;p);</span><br><span class="line">Output(&amp;p);</span><br><span class="line">    <span class="comment">// printf("After unify:\n");Unify</span></span><br><span class="line">    <span class="comment">// unify(&amp;p);</span></span><br><span class="line">    <span class="comment">// Output(p);</span></span><br><span class="line"></span><br><span class="line">Create(&amp;q);</span><br><span class="line">Output(&amp;q);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add(&amp;p,&amp;q);ADD</span></span><br><span class="line"><span class="comment">// printf("q:");</span></span><br><span class="line"><span class="comment">// Output(q);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"After Multiplied:\n"</span>);</span><br><span class="line">mul = Multiply(&amp;p,&amp;q);</span><br><span class="line">Output(&amp;mul);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其中Sort,unify,add,multiply,需要捉摸一下</span></span><br></pre></td></tr></table></figure><h4 id="一-实验中遇到的主要问题及解决方法"><a href="#一-实验中遇到的主要问题及解决方法" class="headerlink" title="(一)实验中遇到的主要问题及解决方法"></a>(一)实验中遇到的主要问题及解决方法</h4><blockquote><p>1.题目二，带表头的单链表在插入时出现了点问题，书上给出的方法是错的，且是C++代码。于是在尝试理解他的想法及每步Debug中终于写出了正确的代码。（L-&gt;head-&gt;link = NULL,其中L-&gt;head-&gt;data 不填）</p><p>2.题目二中带表头节点的单链表中插入时for( j=0;j&lt;=i; j++) 和之前j&lt;i以及删除时for( j=0;j&lt;=i-1; j++) 和之前j&lt;i-1有很大不同,通过debug知道了是为了略过第一个表头节点。</p><p>3.逆置过程中,为了不动表头,略过第一个表头结点时出现了点麻烦.并且在第一个元素逆置后指向NULL,第二个结点指向第一个结点时没有想明白,后来才想到了先让<em>P=NULL,然后记录上一个结点就能达到效果了.同时还有个问题是一直没有保存原来链表的顺序,再因为</em>P=NULL导致会访问到非法内存而程序崩溃</p><p>4.合并同类项的过程中,使用了选择排序类似的思想,但是在里层for(q=last-&gt;link; q!=NULL ; )出了问题,一开始写成 for(q=last-&gt;link; q!=NULL ; q=q-&gt;link)但是如果指数相等,q就会被free掉,此时q=q-&gt;link就会出问题</p></blockquote><h4 id="（二）实验心得"><a href="#（二）实验心得" class="headerlink" title="（二）实验心得"></a>（二）实验心得</h4><blockquote><p>1.题目一中，顺序表是malloc动态申请的空间，是连续的，可以直接通过下标访问。</p><p>2.题目二中,带表头单链表和不带表头单链表,在删除和插入时的循环条件不同要注意.及初始化时带表头的L-&gt;head-&gt;link = NULL; 与 无表头的 L-&gt;first = NULL;</p><p>3.Debug过程中F10和F11的区别,在malloc和free处按F11会进入malloc函数、free函数的汇编的运行过程</p><p>4.排序和逆置时都要有个指针记住原来链表的顺序,然后才能再依次按顺序进行.</p><p> 5.理清要做的事,再下手写代码,画图有时很重要.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>小程序蓝牙</title>
    <link href="https://nymrli.top/2018/09/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%93%9D%E7%89%99API/"/>
    <id>https://nymrli.top/2018/09/20/小程序蓝牙API/</id>
    <published>2018-09-20T02:57:01.000Z</published>
    <updated>2018-10-04T12:30:02.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="提供蓝牙模块API"><a href="#提供蓝牙模块API" class="headerlink" title="提供蓝牙模块API"></a>提供蓝牙模块API</h3><h4 id="wx-openBluetoothAdapter-OBJECT"><a href="#wx-openBluetoothAdapter-OBJECT" class="headerlink" title="wx.openBluetoothAdapter(OBJECT)"></a>wx.openBluetoothAdapter(OBJECT)</h4><p>​    初始化小程序蓝牙模块</p><h4 id="wx-closeBluetoothAdapter-OBJECT"><a href="#wx-closeBluetoothAdapter-OBJECT" class="headerlink" title="wx.closeBluetoothAdapter(OBJECT)"></a>wx.closeBluetoothAdapter(OBJECT)</h4><p>​    关闭蓝牙模块，使其进入未初始化状态。</p><h4 id="wx-getBluetoothAdapterState-OBJECT"><a href="#wx-getBluetoothAdapterState-OBJECT" class="headerlink" title="wx.getBluetoothAdapterState(OBJECT)"></a>wx.getBluetoothAdapterState(OBJECT)</h4><p>​    获取本机蓝牙适配器状态</p><h4 id="wx-onBluetoothAdapterStateChange-CALLBACK"><a href="#wx-onBluetoothAdapterStateChange-CALLBACK" class="headerlink" title="wx.onBluetoothAdapterStateChange(CALLBACK)"></a>wx.onBluetoothAdapterStateChange(CALLBACK)</h4><p>​    监听蓝牙适配器状态变化事件</p><h4 id="wx-startBluetoothDevicesDiscovery-OBJECT"><a href="#wx-startBluetoothDevicesDiscovery-OBJECT" class="headerlink" title="wx.startBluetoothDevicesDiscovery(OBJECT)"></a>wx.startBluetoothDevicesDiscovery(OBJECT)</h4><p>​    开始搜寻附近的蓝牙外围设备。注意，该操作比较耗费系统资源，请在搜索并连接到设备后调用 stop 方法停止搜索。</p><h4 id="wx-stopBluetoothDevicesDiscovery-OBJECT"><a href="#wx-stopBluetoothDevicesDiscovery-OBJECT" class="headerlink" title="wx.stopBluetoothDevicesDiscovery(OBJECT)"></a>wx.stopBluetoothDevicesDiscovery(OBJECT)</h4><p>​    停止搜寻附近的蓝牙外围设备。若已经找到需要的蓝牙设备并不需要继续搜索时，建议调用该接口停止蓝牙搜索。</p><h4 id="wx-getBluetoothDevices-OBJECT"><a href="#wx-getBluetoothDevices-OBJECT" class="headerlink" title="wx.getBluetoothDevices(OBJECT)"></a>wx.getBluetoothDevices(OBJECT)</h4><p>​    获取在小程序蓝牙模块生效期间所有已发现的蓝牙设备，包括已经和本机处于连接状态的设备。</p><h4 id="wx-onBluetoothDeviceFound-CALLBACK"><a href="#wx-onBluetoothDeviceFound-CALLBACK" class="headerlink" title="wx.onBluetoothDeviceFound(CALLBACK)"></a>wx.onBluetoothDeviceFound(CALLBACK)</h4><p>​    监听寻找到新设备的事件</p><h4 id="wx-createBLEConnection-OBJECT"><a href="#wx-createBLEConnection-OBJECT" class="headerlink" title="wx.createBLEConnection(OBJECT)"></a>wx.createBLEConnection(OBJECT)</h4><p>​    连接低功耗蓝牙设备。</p><h4 id="wx-closeBLEConnection-OBJECT"><a href="#wx-closeBLEConnection-OBJECT" class="headerlink" title="wx.closeBLEConnection(OBJECT)"></a>wx.closeBLEConnection(OBJECT)</h4><p>​    断开与低功耗蓝牙设备的连接</p><h4 id="wx-getBLEDeviceServices-OBJECT"><a href="#wx-getBLEDeviceServices-OBJECT" class="headerlink" title="wx.getBLEDeviceServices(OBJECT)"></a>wx.getBLEDeviceServices(OBJECT)</h4><p>​    获取蓝牙设备所有 service（服务）</p><h4 id="wx-getBLEDeviceCharacteristics-OBJECT"><a href="#wx-getBLEDeviceCharacteristics-OBJECT" class="headerlink" title="wx.getBLEDeviceCharacteristics(OBJECT)"></a>wx.getBLEDeviceCharacteristics(OBJECT)</h4><p>​    获取蓝牙设备某个服务中的所有 characteristic（特征值）</p><h4 id="wx-readBLECharacteristicValue-OBJECT"><a href="#wx-readBLECharacteristicValue-OBJECT" class="headerlink" title="wx.readBLECharacteristicValue(OBJECT)"></a>wx.readBLECharacteristicValue(OBJECT)</h4><p>​    读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持<code>read</code>才可以成功调用，具体参照 characteristic 的 properties 属性</p><h4 id="wx-writeBLECharacteristicValue-OBJECT"><a href="#wx-writeBLECharacteristicValue-OBJECT" class="headerlink" title="wx.writeBLECharacteristicValue(OBJECT)"></a>wx.writeBLECharacteristicValue(OBJECT)</h4><p>​    向低功耗蓝牙设备特征值中写入二进制数据。注意：必须设备的特征值支持<code>write</code>才可以成功调用，具体参照 characteristic 的 properties 属性</p><pre><code>tips: 并行调用多次读写接口存在读写失败的可能性*</code></pre><h4 id="wx-notifyBLECharacteristicValueChange-OBJECT"><a href="#wx-notifyBLECharacteristicValueChange-OBJECT" class="headerlink" title="wx.notifyBLECharacteristicValueChange(OBJECT)"></a>wx.notifyBLECharacteristicValueChange(OBJECT)</h4><p>​    启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值。注意：必须设备的特征值支持<code>notify</code>或者<code>indicate</code>才可以成功调用，具体参照 characteristic 的 properties 属性</p><p>​    另外，必须先启用<code>notify</code>才能监听到设备 characteristicValueChange 事件</p><h4 id="wx-onBLEConnectionStateChange-CALLBACK"><a href="#wx-onBLEConnectionStateChange-CALLBACK" class="headerlink" title="wx.onBLEConnectionStateChange(CALLBACK)"></a>wx.onBLEConnectionStateChange(CALLBACK)</h4><p>​    监听低功耗蓝牙连接状态的改变事件，包括开发者主动连接或断开连接，设备丢失，连接异常断开等等</p><h4 id="wx-onBLECharacteristicValueChange-CALLBACK"><a href="#wx-onBLECharacteristicValueChange-CALLBACK" class="headerlink" title="wx.onBLECharacteristicValueChange(CALLBACK)"></a>wx.onBLECharacteristicValueChange(CALLBACK)</h4><p>​    监听低功耗蓝牙设备的特征值变化。必须先启用<code>notify</code>接口才能接收到设备推送的notification。</p><p>### </p><h3 id="示例代码如下"><a href="#示例代码如下" class="headerlink" title="示例代码如下:"></a>示例代码如下:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/bluetooth/bluetooth.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">  onLoad:<span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 页面初始化 options为页面跳转所带来的参数</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//初始化蓝牙适配器</span></span><br><span class="line">  openBluetooth:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    wx.openBluetoothAdapter(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.errMsg)</span><br><span class="line">        <span class="comment">// success</span></span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title:<span class="string">"初始化蓝牙适配器成功"</span>,</span><br><span class="line">          duration:<span class="number">2000</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">//关闭蓝牙模块</span></span><br><span class="line">closeBluetooth:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> wx.openBluetoothAdapter()</span><br><span class="line"> </span><br><span class="line">  wx.closeBluetoothAdapter(&#123;</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// success</span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"success"</span>+res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//获取本机蓝牙适配器状态</span></span><br><span class="line">getBluetoothAdapterState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">wx.getBluetoothAdapterState(&#123;</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"res:"</span>+res)</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"errMsg:"</span>+res.errMsg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//监听蓝牙适配器状态变化事件</span></span><br><span class="line">  onBluetoothAdapterStateChange:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    wx.onBluetoothAdapterStateChange(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`adapterState changed, now is`</span>, res)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"> <span class="comment">// 开始搜寻附近的蓝牙外围设备</span></span><br><span class="line">  startBluetoothDevicesDiscovery:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    wx.startBluetoothDevicesDiscovery(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"> <span class="comment">// 停止搜寻附近的蓝牙外围设备</span></span><br><span class="line">  stopBluetoothDevicesDiscovery:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    wx.stopBluetoothDevicesDiscovery(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">  <span class="comment">//获取所有已发现的蓝牙设备</span></span><br><span class="line">  getBluetoothDevices:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    wx.getBluetoothDevices(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// success</span></span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//监听寻找到新设备的事件</span></span><br><span class="line">  onBluetoothDeviceFound:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    wx.onBluetoothDeviceFound(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// callback</span></span><br><span class="line">       <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//根据 uuid 获取处于已连接状态的设备</span></span><br><span class="line">  getConnectedBluetoothDevices:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  wx.getConnectedBluetoothDevices(&#123;</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//连接低功耗蓝牙设备</span></span><br><span class="line">createBLEConnection:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  wx.createBLEConnection(&#123;</span><br><span class="line">    deviceId: <span class="string">'AC:BC:32:C1:47:80'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// success</span></span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// fail</span></span><br><span class="line">    &#125;,</span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// complete</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//断开与低功耗蓝牙设备的连接</span></span><br><span class="line">closeBLEConnection:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  wx.closeBLEConnection(&#123;</span><br><span class="line">    deviceId: <span class="string">'AC:BC:32:C1:47:80'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//监听低功耗蓝牙连接的错误事件，包括设备丢失，连接异常断开等等</span></span><br><span class="line">onBLEConnectionStateChanged:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  wx.onBLEConnectionStateChanged(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`device <span class="subst">$&#123;res.deviceId&#125;</span> state has changed, connected: <span class="subst">$&#123;res.connected&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//获取蓝牙设备所有 service（服务）</span></span><br><span class="line">getBLEDeviceServices:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  wx.getBLEDeviceServices(&#123;</span><br><span class="line">    deviceId: <span class="string">'48:3B:38:88:E3:83'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// success</span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'device services:'</span>, res.services.serviceId)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// fail</span></span><br><span class="line">    &#125;,</span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// complete</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//获取蓝牙设备所有 characteristic（特征值）</span></span><br><span class="line">getBLEDeviceCharacteristics:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  wx.getBLEDeviceCharacteristics(&#123;</span><br><span class="line">    deviceId: <span class="string">'48:3B:38:88:E3:83'</span>,</span><br><span class="line">    serviceId: <span class="string">'serviceId'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// success</span></span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// fail</span></span><br><span class="line">    &#125;,</span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// complete</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;提供蓝牙模块API&quot;&gt;&lt;a href=&quot;#提供蓝牙模块API&quot; class=&quot;headerlink&quot; title=&quot;提供蓝牙模块API&quot;&gt;&lt;/a&gt;提供蓝牙模块API&lt;/h3&gt;&lt;h4 id=&quot;wx-openBluetoothAdapter-OBJECT&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="前端" scheme="https://nymrli.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="微信小程序" scheme="https://nymrli.top/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>电信路由器上网</title>
    <link href="https://nymrli.top/2018/09/20/%E7%94%B5%E4%BF%A1%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%8A%E7%BD%91/"/>
    <id>https://nymrli.top/2018/09/20/电信路由器上网/</id>
    <published>2018-09-20T02:01:16.000Z</published>
    <updated>2018-10-04T07:32:40.777Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>链接: <a href="https://pan.baidu.com/s/1QaW7DMhjb2YHd0ZVWterSw" target="_blank" rel="noopener">https://pan.baidu.com/s/1QaW7DMhjb2YHd0ZVWterSw</a></p><p>密码：联系QQ1063052964,或是在下方评论处留言QQ</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;链接: &lt;a href=&quot;https://pan.baidu.com/s/1QaW7DMhjb2YHd0ZVWterSw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1Q
      
    
    </summary>
    
    
      <category term="生活福利" scheme="https://nymrli.top/tags/%E7%94%9F%E6%B4%BB%E7%A6%8F%E5%88%A9/"/>
    
  </entry>
  
  <entry>
    <title>小程序入门学习</title>
    <link href="https://nymrli.top/2018/09/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>https://nymrli.top/2018/09/20/小程序入门学习/</id>
    <published>2018-09-20T01:57:01.000Z</published>
    <updated>2018-09-20T02:06:14.438Z</updated>
    
    <content type="html"><![CDATA[<h4 id="IDE搭建"><a href="#IDE搭建" class="headerlink" title="IDE搭建:"></a>IDE搭建:</h4><p>下载:<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">微信公众平台官网</a></p><h4 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识:"></a>预备知识:</h4><blockquote><p>个人认为入门小程序相对比较简单,需要了解HTML+CSS 大概知道是干啥的就行,JavaScrip还是要看看的，推荐教程 <a href="https://link.jianshu.com/?t=http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="noopener">廖雪峰的博客</a>以及<a href="http://www.w3school.com.cn/js/index.asp" target="_blank" rel="noopener">W3Cschool的JS教程</a></p></blockquote><h4 id="项目目录结构介绍"><a href="#项目目录结构介绍" class="headerlink" title="项目目录结构介绍:"></a>项目目录结构介绍:</h4><p><img src="/2018/09/20/小程序入门学习/目录.jpg" alt="目录"></p><blockquote><p>小程序中一共有<strong>四种类型</strong>的文件:</p><ul><li>js ———- JavaScrip文件</li><li>json ——– 项目配置文件，负责窗口颜色等等</li><li>wxml ——- 类似HTML文件</li><li>wxss ——- 类似CSS文件</li></ul></blockquote><h5 id="重要文件-APP讲解"><a href="#重要文件-APP讲解" class="headerlink" title="重要文件-APP讲解:"></a>重要文件-APP讲解:</h5><ul><li><p>app.json(必需) :<code>监听并处理小程序的生命周期函数、声明全局变量。</code></p></li><li><p>app.js(建议保存) : <code>*作为配置整个APP的入口,可以什么都不写只输入{}.对整个小程序的全局配置。记录了页面组成(定义了每个页面)，配置小程序的窗口 背景色，配置导航条样式，配置默认标题。*</code></p><p>​    ==&gt;没有最简单的小程序也能运行.</p></li><li><p>app.wxml</p></li><li><p>app.wxss</p></li></ul><p><strong>===&gt; 所以只有<code>app.js和app.json</code>的项目是最简单的小程序</strong></p><h5 id="具体页面下的"><a href="#具体页面下的" class="headerlink" title="具体页面下的"></a>具体页面下的</h5><blockquote><ul><li>js文件配置页面入口</li><li>wxml配置布局</li></ul><p>一起完成对页面的渲染</p></blockquote><blockquote><ul><li>wxss样式文件</li><li>json配置文件</li></ul><p>会覆盖app.json和app.wxss全局设置的内容,实现单个网页的个性化</p></blockquote><hr><p><strong>app.js</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">   <span class="comment">//* 页面的初始数据</span></span><br><span class="line">  data: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// * 生命周期函数--监听页面加载</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> <span class="params">(options)</span> </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//* 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//* 生命周期函数--监听页面显示</span></span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//* 生命周期函数--监听页面隐藏</span></span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//* 生命周期函数--监听页面卸载</span></span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">//* 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line">  onPullDownRefresh: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">//* 页面上拉触底事件的处理函数</span></span><br><span class="line">  onReachBottom: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//* 用户点击右上角分享</span></span><br><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2018/09/20/小程序入门学习/Api介绍.png" alt="Api介绍"></p><hr><p><strong>app.json</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"pages"</span>:[</span><br><span class="line">  <span class="string">"pages/index/index"</span></span><br><span class="line">  <span class="comment">//pages 里面的路径其实是指向js文件的,其中第一个就是登陆首页</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>实现路由配置,及全局的某些设置</p></blockquote><p><img src="/2018/09/20/小程序入门学习/api2.png" alt="api2"></p><p><img src="/2018/09/20/小程序入门学习/小程序.jpg" alt="小程序"></p><hr><p>app.js**</p><p>定义了每个页面,每个页面的.js又调用了Page()方法实现该页面的配置信息</p><h4 id="小程序事件"><a href="#小程序事件" class="headerlink" title="小程序事件"></a>小程序事件</h4><blockquote><p>事件 == 事件类型+具体事件</p></blockquote><h5 id="具体事件"><a href="#具体事件" class="headerlink" title="具体事件"></a>具体事件</h5><ul><li>tap</li><li>longtap</li><li>toustart、touchend、touchmove、touchcancel(电话中断)</li><li>submint、input……</li></ul><h5 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h5><ul><li>bind    冒泡事件</li><li>catch      非冒泡事件</li></ul><ul><li>currentTarget 被绑定的组件<ul><li>dataset 控件相应的属性</li></ul></li><li>target 发生事件的组件</li></ul><h4 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h4><ul><li><code>navigateTo({ url :&#39;xxx&#39; })</code></li><li><code>&lt;navigator url=&quot;../logs/logs?id=1&amp;title=&#39;as&#39;&quot; &gt; &lt;/navigator&gt;</code></li></ul><h4 id="Flex容器和元素"><a href="#Flex容器和元素" class="headerlink" title="Flex容器和元素"></a>Flex容器和元素</h4><h5 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h5><ul><li>flex-direction :         决定主轴方向</li><li>flex-wrap :                处理如何换行</li><li>flex-flow :                 flex-dirction和flex-wrap合并简写</li><li>justify-content:        元素在主轴的对齐方式<ul><li>space-bewteen 两端对齐</li><li>center 居中对齐</li><li>flex-start 左侧对齐</li><li>flex-end 右侧对齐</li></ul></li><li>align-items :              元素在交叉轴的对齐方式<ul><li>stretch  拉伸,当没设置item高度时,占满整个容器</li><li>baseline :以文字为底线对齐</li></ul></li></ul><h5 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h5><ul><li>flex-grow (默认0): 当有多余空间时,元素的放大比例</li><li>flex-shrink(默认1) : 当空间不足时,元素的放大比例</li><li>flex-basis: 元素在主轴上占据的空间</li><li>flex : flex-grow、flex-shrink、flex-basis的合并简写</li><li>order : 定义元素的排列顺序</li><li>align-self : 定义元素自身的对齐方式</li></ul><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><blockquote><p><strong>相对定位:  相对定位的元素是相对自身进行定位,参照物是自己</strong></p><p><strong>绝对定位 : 绝对定位的元素是相对离它最近的一个已定位的父级元素进行定位</strong>,如果没有,则以整个页面进行定位</p></blockquote><h4 id="margin和padding的区别"><a href="#margin和padding的区别" class="headerlink" title="margin和padding的区别"></a>margin和padding的区别</h4><blockquote><p>margin是指从 <em>自身<u>边框</u></em> 到 <em>另一个<u>容器边框</u></em>  之间的距离，就是容器外距离。（外边距）</p><p>padding是指 <u><em>自身边框</em></u> 到 <u><em>自身内部另一个容器边框</em></u> 之间的距离，就是容器内距离。（内边距）</p></blockquote><p>rpx 动态单位</p><h4 id="css布局实例"><a href="#css布局实例" class="headerlink" title="css布局实例"></a>css布局实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wxml:  </span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'list-item'</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;listItem&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'list-item-images'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">'../../images/img2.png'</span> <span class="attr">class</span>=<span class="string">'list-item-images-img'</span> /&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- &lt;image class='avatar' src='../../images/avatar.png'/&gt;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"list-item-text"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">wxss</span>:</span><br><span class="line"><span class="selector-class">.list-item</span>&#123;</span><br><span class="line">  height:500rpx;//整个 图片+文字 一共高为500rpx</span><br><span class="line">  <span class="selector-tag">width</span>: 100%;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-item-images</span>&#123;</span><br><span class="line">  height: 300rpx;// 其中图片的高度为300rpx</span><br><span class="line">  <span class="selector-tag">width</span>: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.list-item-images image&#123;//图片高、宽全部伸展</span><br><span class="line">  <span class="selector-tag">height</span>: 100%;</span><br><span class="line">  <span class="selector-tag">width</span>: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/09/20/小程序入门学习/Users\10630\Desktop\Txt\小程序开发\CSS效果图.jpg" alt="CSS效果图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;IDE搭建&quot;&gt;&lt;a href=&quot;#IDE搭建&quot; class=&quot;headerlink&quot; title=&quot;IDE搭建:&quot;&gt;&lt;/a&gt;IDE搭建:&lt;/h4&gt;&lt;p&gt;下载:&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram
      
    
    </summary>
    
    
      <category term="前端" scheme="https://nymrli.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="微信小程序" scheme="https://nymrli.top/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spy++使用介绍</title>
    <link href="https://nymrli.top/2018/09/02/Spy-%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>https://nymrli.top/2018/09/02/Spy-使用介绍/</id>
    <published>2018-09-02T11:39:45.000Z</published>
    <updated>2018-09-02T11:40:26.032Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Spy++ (SPYXX.EXE) 是一个基于 Win32 的实用工具，它提供系统的进程、线程、窗口和窗口消息的图形视图。使用 Spy++ 可以执行下列操作： 显示系统对象（包括进程、线程和窗口）之间关系的图形树。 搜索指定的窗口、线程、进程或消息。 查看选定的窗口、线程、进程或消息的属性。</p></blockquote><p>我们可以使用微软的Spy++来查看窗口类名等信息，然后再结合pywin32实现。</p><h4 id="加载初始界面"><a href="#加载初始界面" class="headerlink" title="加载初始界面:"></a>加载初始界面:</h4><p><img src="https://images2018.cnblogs.com/blog/1350574/201808/1350574-20180829202226101-432781308.jpg" alt=""></p><h5 id="然后点击工具栏的望远镜。如图所示"><a href="#然后点击工具栏的望远镜。如图所示" class="headerlink" title="然后点击工具栏的望远镜。如图所示:"></a>然后点击工具栏的望远镜。如图所示:</h5><p><img src="https://images2018.cnblogs.com/blog/1350574/201808/1350574-20180829202408509-1040679679.jpg" alt=""></p><p>出现搜索窗口，然后通过移动靶心到想要查找句柄的窗口后单击就行了。==&gt;它的句柄、标题、类都会显示</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://images2018.cnblogs.com/blog/1350574/201808/1350574-20180829202438546-172174720.jpg" alt=""></h2><p>再点击确定。</p><p>此时会有两种情况。</p><ul><li>成功搜索到</li><li>搜索不到<blockquote><p>原因是你查找的窗口是在打开spy++后打开的，解决的办法就是按F5进行刷新，然后就行了</p></blockquote></li></ul><p><img src="https://images2018.cnblogs.com/blog/1350574/201808/1350574-20180829202623152-1227390007.jpg" alt=""></p><p>成功后都会出现如下：<br><img src="https://images2018.cnblogs.com/blog/1350574/201808/1350574-20180829202746383-481316317.jpg" alt=""></p><hr><p>右键，点击“属性”能看到更多详细内容。<br><img src="https://images2018.cnblogs.com/blog/1350574/201808/1350574-20180829203653870-1326129222.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Spy++ (SPYXX.EXE) 是一个基于 Win32 的实用工具，它提供系统的进程、线程、窗口和窗口消息的图形视图。使用 Spy++ 可以执行下列操作： 显示系统对象（包括进程、线程和窗口）之间关系的图形树。 搜索指定的窗口、线程、进程或消息
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="自动化运维" scheme="https://nymrli.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>解决安装PyUserInput、pyHook遇到的问题——AttributeError: &#39;HookManager&#39; object has no attribute &#39;keyboard_hook</title>
    <link href="https://nymrli.top/2018/09/02/%E8%A7%A3%E5%86%B3%E5%AE%89%E8%A3%85PyUserInput%E3%80%81pyHook%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94AttributeError-HookManager-object-has-no-attribute-keyboard-hook/"/>
    <id>https://nymrli.top/2018/09/02/解决安装PyUserInput、pyHook遇到的问题——AttributeError-HookManager-object-has-no-attribute-keyboard-hook/</id>
    <published>2018-09-02T11:33:32.000Z</published>
    <updated>2018-09-02T11:33:55.065Z</updated>
    
    <content type="html"><![CDATA[<p>安装PyUserInput失败。</p><hr><p>经查看发现是pyHook（pyHook是一个用来进行键盘、鼠标等层面事件监控的库。这个库的正常工作需要pythoncom等操作系统的API的支持。）无法安装，不知道是不是因为这个库可以被用于一些比较邪恶的目的。经搜索发现直接pip install pyHook是找不到相关包的，但可以下源码编译安装，可以在 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyhook" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyhook</a> 这里可以直接下载到.whl文件，这个文件可以作为pip install 的参数来进行安装。</p><blockquote><p>直接输入<code>pip install pyHook-1.5.1-cp36-cp36m-win_amd64.whl</code>好像还是不行，经提示使用<code>G:\Py_opencv\venv\Scripts\python.exe -m pip install pyHook-1.5.1-cp36-cp36m-win_amd64.whl</code>第一个参数是python解释器，-m选项可以让python以脚本的方式运行一个模块，pip install后面就是要安装的包名。</p></blockquote><hr><p><code>pyHook-1.5.1-cp36-cp36m-win_amd64.whl</code></p><blockquote><p>pyHook:库名<br>1.5.1：版本号<br>cp3.6m：Cpython3.6版本,编码是ucs2,UCS2认为每个字符占用2个字节，UCS4认为每个字节占用4个字符，都是UNICODE的编码形式。<br>win_amd64:windows64位环境<br>whl:压缩包，在其中包含了py文件，以及经过编译的pyd文件。可以使用pip安装</p></blockquote><p>电脑系统环境查看，可以右键“我的电脑”-&gt;“属性”查看<br><img src="https://images2018.cnblogs.com/blog/1350574/201808/1350574-20180829215445695-1950893699.jpg" alt=""></p><p>然后再直接在命令行里输入pip install pyuserinput或是在pycharm下载安装都可以了。（需要先安装pywin32）</p><hr><p>上述下载的pyHook是基于Python2的,在python3下会报错:<br><code>TypeError: MouseSwitch() missing 8 required positional arguments: &#39;msg&#39;, &#39;x&#39;, &#39;y&#39;, &#39;data&#39;, &#39;flags&#39;, &#39;time&#39;, &#39;hwnd&#39;, and &#39;window_name&#39;</code><br>或者<code>AttributeError: &#39;HookManager&#39; object has no attribute &#39;keyboard_hook&#39;</code></p><p>感谢:<a href="https://www.cnblogs.com/Alier/p/7978971.html" target="_blank" rel="noopener">python3.5安装pyHook,解决【TypeError: MouseSwitch() missing 8 required positional arguments: ‘msg’, ‘x’, ‘y’, ‘data’, ‘time’, ‘hwnd’, and ‘window_name’】这个错误！</a>、<a href="使用Python 3.5/3.6监听本机任意窗口中的按键操作">使用Python 3.5/3.6监听本机任意窗口中的按键操作</a>提供的解决方法</p><blockquote><p>需要的模块：扩展库pyhook_py3k（注意，不要使用pyhook），pywin32。<br>第一步，安装pywin32，地址：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32</a><br>第二步，下载pyhook_py3k，地址：<a href="https://github.com/Answeror/pyhook_py3k" target="_blank" rel="noopener">https://github.com/Answeror/pyhook_py3k</a><br>第三步，下载swig.exe，地址：<a href="http://www.swig.org/download.html" target="_blank" rel="noopener">http://www.swig.org/download.html</a> ==&gt;.zip格式解压<br>第四步，解压缩pyhook_py3k，并进行编译，命令：python setup.py build_ext –swig=..\swigwin-3.0.12\swig.exe，可以根据实际情况修改swig.exe的路径，另外本机最好已安装VC2008<br>第五步，安装编译好的pyhook_py3k，命令：pip install .</p></blockquote><p>然后就可以正常操作了!!~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装PyUserInput失败。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;经查看发现是pyHook（pyHook是一个用来进行键盘、鼠标等层面事件监控的库。这个库的正常工作需要pythoncom等操作系统的API的支持。）无法安装，不知道是不是因为这个库可以被用于一些比较邪恶的目的。经搜索
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="自动化运维" scheme="https://nymrli.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>开学小蓝车180天免费卡</title>
    <link href="https://nymrli.top/2018/09/02/%E5%BC%80%E5%AD%A6%E5%B0%8F%E8%93%9D%E8%BD%A6180%E5%A4%A9%E5%85%8D%E8%B4%B9%E5%8D%A1/"/>
    <id>https://nymrli.top/2018/09/02/开学小蓝车180天免费卡/</id>
    <published>2018-09-02T08:44:54.000Z</published>
    <updated>2018-10-23T13:44:42.538Z</updated>
    
    <content type="html"><![CDATA[<p>各位看客老爷,可以加下我的公众号哦!虽然没啥东东….微信搜索公众号”我只要瓶果粒橙就好”</p><p>原来是180天的,现在好像只有30还是60天了..</p><a id="more"></a><p><img src="/2018/09/02/开学小蓝车180天免费卡/9.2.jpg" alt="图片上显示60天,但领取后会变成180天"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;各位看客老爷,可以加下我的公众号哦!虽然没啥东东….微信搜索公众号”我只要瓶果粒橙就好”&lt;/p&gt;
&lt;p&gt;原来是180天的,现在好像只有30还是60天了..&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活福利" scheme="https://nymrli.top/tags/%E7%94%9F%E6%B4%BB%E7%A6%8F%E5%88%A9/"/>
    
  </entry>
  
  <entry>
    <title>例题4:1-3 古老的密码、刽子手的游戏，救济金发放</title>
    <link href="https://nymrli.top/2018/09/01/%E4%BE%8B%E9%A2%984-1-3-%E5%8F%A4%E8%80%81%E7%9A%84%E5%AF%86%E7%A0%81%E3%80%81%E5%88%BD%E5%AD%90%E6%89%8B%E7%9A%84%E6%B8%B8%E6%88%8F%EF%BC%8C%E6%95%91%E6%B5%8E%E9%87%91%E5%8F%91%E6%94%BE/"/>
    <id>https://nymrli.top/2018/09/01/例题4-1-3-古老的密码、刽子手的游戏，救济金发放/</id>
    <published>2018-09-01T10:46:59.000Z</published>
    <updated>2018-09-01T12:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="例题4-1-古老的密码"><a href="#例题4-1-古老的密码" class="headerlink" title="例题4-1 古老的密码"></a>例题4-1 古老的密码</h4><blockquote><ul><li>因为字母可以重排,所以顺序不重要,而又同时因为可以映射,所以字母具体是什么不重要==&gt;只要统计<strong>排序</strong>后的结果相同就行了</li><li>RE(Runtime error)错法加一: 题号提交错误</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bubblesort</span><span class="params">(<span class="keyword">int</span> *cnt)</span><span class="comment">//冒泡排序,从大到小顺序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> min=cnt[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;<span class="number">26</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">for</span> ( j = i+<span class="number">1</span>; j &lt; <span class="number">26</span>; ++j)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (cnt[i] &lt; cnt[j])</span><br><span class="line">           &#123;</span><br><span class="line">               min = cnt[i];</span><br><span class="line">               cnt[i]=cnt[j];</span><br><span class="line">               cnt[j] = min;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">2</span>][<span class="number">105</span>];<span class="comment">//存放猜测字符串的</span></span><br><span class="line">    <span class="keyword">int</span> cnt[<span class="number">2</span>][<span class="number">27</span>]; <span class="comment">//存放字母出现次数</span></span><br><span class="line">    <span class="keyword">int</span> nlen[<span class="number">2</span>];<span class="comment">//字符串的长度</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s[<span class="number">0</span>],s[<span class="number">1</span>])!= EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            nlen[i]= <span class="built_in">strlen</span>(s[i]);</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; nlen[i]; ++j)</span><br><span class="line">                cnt[i][s[i][j]-<span class="string">'A'</span>] ++;</span><br><span class="line">            Bubblesort(cnt[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">26</span>; ++k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt[<span class="number">0</span>][k] != cnt[<span class="number">1</span>][k])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k==<span class="number">26</span>) <span class="built_in">printf</span>(<span class="string">"YES\n"</span> );<span class="comment">//如果26个字母出现次数比完全相等,则可以说相同.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题4-2-刽子手的游戏"><a href="#例题4-2-刽子手的游戏" class="headerlink" title="例题4-2 刽子手的游戏"></a>例题4-2 刽子手的游戏</h4><blockquote><ul><li>注意<strong>全局变量是否使用的问题</strong>,全局变量尽量少用…但维护内容较多的情况下,可以考虑</li><li>采用”自顶向下”的顺序</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100</span></span><br><span class="line"><span class="keyword">char</span> ans[maxn],gue[maxn];</span><br><span class="line"><span class="keyword">int</span> left,chance;</span><br><span class="line"><span class="keyword">int</span> win,lose;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">guess</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> bad=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(ans); ++i)<span class="comment">//判断ch字母是否在字符串中</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ans[i]==ch)</span><br><span class="line">&#123;</span><br><span class="line">ans[i] = <span class="string">' '</span>;</span><br><span class="line">bad =<span class="number">0</span>;</span><br><span class="line">left--;<span class="comment">//如果在的话,还剩未猜中字母数-1,机会不变</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span> (bad) chance--;<span class="comment">//如果不在的话机会-1</span></span><br><span class="line"><span class="keyword">if</span>(!chance) lose=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!left) win=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rnd;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%s%s"</span>,&amp;rnd,ans,gue)==<span class="number">3</span> &amp;&amp; rnd !=<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Round %d\n"</span>,rnd);</span><br><span class="line">win = lose =<span class="number">0</span>;</span><br><span class="line">left= <span class="built_in">strlen</span>(ans);</span><br><span class="line">chance = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> anslen=<span class="built_in">strlen</span>(gue);</span><br><span class="line"><span class="keyword">for</span>( i=<span class="number">0</span>;i&lt; anslen;i++) &#123; guess(gue[i]); <span class="keyword">if</span>(win || lose) <span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(win) <span class="built_in">printf</span>(<span class="string">"You win.\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(lose) <span class="built_in">printf</span>(<span class="string">"You lose.\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"You chickened out.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">1000</span>],g[<span class="number">1000</span>];<span class="comment">//储存字符串 </span></span><br><span class="line"><span class="keyword">int</span> abook[<span class="number">26</span>],gbook[<span class="number">26</span>];<span class="comment">//标记26个字母出现频率 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">int</span> alen,glen;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> suc,fau;</span><br><span class="line">    <span class="keyword">int</span> acount;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k)==<span class="number">1</span>&amp;&amp;k!=<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,a,g);</span><br><span class="line">        <span class="built_in">memset</span>(abook,<span class="number">0</span>,<span class="keyword">sizeof</span>(abook));</span><br><span class="line">        <span class="built_in">memset</span>(gbook,<span class="number">0</span>,<span class="keyword">sizeof</span>(gbook));</span><br><span class="line">        alen=<span class="built_in">strlen</span>(a);</span><br><span class="line">        glen=<span class="built_in">strlen</span>(g);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;alen;i++)<span class="comment">//统计答案字母频率 </span></span><br><span class="line">            abook[a[i]-<span class="string">'a'</span>]++;</span><br><span class="line">        </span><br><span class="line">        acount=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(abook[i])<span class="comment">//统计答案的字母组成个数（扣除雷同字母） </span></span><br><span class="line">                acount++;</span><br><span class="line">        </span><br><span class="line">        suc=<span class="number">0</span>;<span class="comment">//猜对次数</span></span><br><span class="line">        fau=<span class="number">0</span>;<span class="comment">//猜错次数</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;glen;i++)&#123;<span class="comment">//以猜测字母为基准进行扫描 </span></span><br><span class="line">            j=g[i]-<span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(abook[j]==<span class="number">0</span>)&#123;<span class="comment">//答案无此字母，猜测错误 </span></span><br><span class="line">                fau++;</span><br><span class="line">                <span class="keyword">if</span>(fau==<span class="number">7</span>)<span class="comment">//彻底失败 </span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(abook[j]!=<span class="number">0</span>)&#123;<span class="comment">//猜中字母 </span></span><br><span class="line">                suc++;</span><br><span class="line">                abook[j]=<span class="number">0</span>;<span class="comment">//将此字母从答案中剔除出去，此句比较关键!(再猜无效) </span></span><br><span class="line">                <span class="keyword">if</span>(suc==acount)<span class="comment">//成功 </span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Round %d\n"</span>,k);</span><br><span class="line">        <span class="keyword">if</span>(fau&gt;=<span class="number">7</span>)<span class="comment">//猜错7次及以上 </span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"You lose.\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(suc==acount)<span class="comment">//全部猜对 </span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"You win.\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"You chickened out.\n"</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题4-3-救济金发放"><a href="#例题4-3-救济金发放" class="headerlink" title="例题4-3 救济金发放"></a>例题4-3 救济金发放</h4><blockquote><ul><li>圆圈如何轮回==&gt;本质上是要求,大于n变成1,小于1变成n…实现<code>1.越界后归正。2.(xxx)%n,</code></li><li>领过设为1,没领过(初始)设为1</li></ul></blockquote><h5 id="较为简洁、清晰的做法"><a href="#较为简洁、清晰的做法" class="headerlink" title="较为简洁、清晰的做法"></a>较为简洁、清晰的做法</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> book[<span class="number">100</span>];<span class="comment">//领过的标记1，没领过的标记0 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,m;</span><br><span class="line">    <span class="keyword">int</span> kcount,mcount;</span><br><span class="line">    <span class="keyword">int</span> ki,mi;</span><br><span class="line">    <span class="keyword">int</span> kout,mout;</span><br><span class="line">    <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">int</span> ncount;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;k,&amp;m)==<span class="number">3</span>&amp;&amp;n&amp;&amp;k&amp;&amp;m)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(book,<span class="number">0</span>,<span class="keyword">sizeof</span>(book));</span><br><span class="line">        ncount=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        ki=<span class="number">0</span>;</span><br><span class="line">        mi=n+<span class="number">1</span>;</span><br><span class="line">        first=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(ncount!=n)&#123;<span class="comment">//n个人全被处理完毕//处理手法有些类似快速排序</span></span><br><span class="line">            kcount=<span class="number">0</span>;</span><br><span class="line">            mcount=<span class="number">0</span>;</span><br><span class="line">            <span class="comment">//每数一个人,都要判断是不是该越过他.只有0(未领过,才计数)</span></span><br><span class="line">            <span class="keyword">while</span>(kcount!=k)&#123;<span class="comment">//k系列处理 </span></span><br><span class="line">                ki++;</span><br><span class="line">                <span class="keyword">if</span>(ki&gt;n)<span class="comment">//ki越界处理 </span></span><br><span class="line">                    ki=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(book[ki]==<span class="number">0</span>)<span class="comment">//未被选中计数  ki为当前值 </span></span><br><span class="line">                    kcount++;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(mcount!=m)&#123;<span class="comment">//m系列处理 </span></span><br><span class="line">                mi--;</span><br><span class="line">                <span class="keyword">if</span>(mi&lt;<span class="number">1</span>)<span class="comment">//mi越界处理 </span></span><br><span class="line">                    mi=n; </span><br><span class="line">                <span class="keyword">if</span>(book[mi]==<span class="number">0</span>)<span class="comment">//未被选中计数 mi为当前值 </span></span><br><span class="line">                    mcount++;</span><br><span class="line">        &#125;</span><br><span class="line">            book[ki]=<span class="number">1</span>;<span class="comment">//不用担心ki==mi(重复设置为1不影响)</span></span><br><span class="line">            book[mi]=<span class="number">1</span>; </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(first)&#123;<span class="comment">//打印处理</span></span><br><span class="line">                first=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(ki!=mi)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%3d%3d"</span>,ki,mi);</span><br><span class="line">                    ncount+=<span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%3d"</span>,ki); </span><br><span class="line">                    ncount++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(ki!=mi)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">",%3d%3d"</span>,ki,mi);</span><br><span class="line">                    ncount+=<span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">",%3d"</span>,ki);</span><br><span class="line">                    ncount++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="书上做法"><a href="#书上做法" class="headerlink" title="书上做法"></a>书上做法</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,m,a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> d,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="comment">//每数一个人都要判断他是否已经领过</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        p = (n+p+d)%n;</span><br><span class="line">    &#125;<span class="keyword">while</span>(!a[p]);<span class="comment">//==0,领过</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d,%d,%d"</span>,&amp;n,&amp;k,&amp;m)==<span class="number">3</span> &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) a[i]=i;</span><br><span class="line">        <span class="keyword">int</span> left =n;</span><br><span class="line">        <span class="keyword">int</span> p1 =n,p2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left)</span><br><span class="line">        &#123;</span><br><span class="line">            p1= go(p1,<span class="number">-1</span>,k);</span><br><span class="line">            p2= go(p2,<span class="number">1</span>,m);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,p1);left--;</span><br><span class="line">            <span class="keyword">if</span>(p1!=p2) <span class="built_in">printf</span>(<span class="string">" %d"</span>,p2);</span><br><span class="line">            a[p1]=a[p2]=<span class="number">0</span>;<span class="comment">//领了设置为0</span></span><br><span class="line">            <span class="keyword">if</span>(left) <span class="built_in">printf</span>(<span class="string">","</span>);<span class="comment">//注意输出格式</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;例题4-1-古老的密码&quot;&gt;&lt;a href=&quot;#例题4-1-古老的密码&quot; class=&quot;headerlink&quot; title=&quot;例题4-1 古老的密码&quot;&gt;&lt;/a&gt;例题4-1 古老的密码&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;因为字母可以重排,所以顺序不重
      
    
    </summary>
    
    
      <category term="ACM竞赛入门" scheme="https://nymrli.top/tags/ACM%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8/"/>
    
      <category term="C" scheme="https://nymrli.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>WampSever配置本地环境，解决打开打开本地网站问题</title>
    <link href="https://nymrli.top/2018/09/01/WampSever%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%89%93%E5%BC%80%E6%89%93%E5%BC%80%E6%9C%AC%E5%9C%B0%E7%BD%91%E7%AB%99%E9%97%AE%E9%A2%98/"/>
    <id>https://nymrli.top/2018/09/01/WampSever配置本地环境，解决打开打开本地网站问题/</id>
    <published>2018-09-01T06:19:39.000Z</published>
    <updated>2018-09-01T06:26:52.393Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/09/01/WampSever配置本地环境，解决打开打开本地网站问题/v2-1d83ff5569ea18de71d329033fb91131_r.jpg" alt="What&#39;s WAMP"></p><a id="more"></a><blockquote><p>WampServer是一款由法国人开发的Apache Web服务器、PHP解释器以及MySQL数据库的整合软件包。免去了开发人员将时间花费在繁琐的配置环境过程，从而腾出更多精力去做开发。 </p></blockquote><p>直接点击本地的.html是静态加载的，需要动态加载的文件是无法被加载的。会出现如下情况。</p><p><img src="https://pic1.zhimg.com/v2-b270887c1a810a4209f04783cc85a4c6_b.jpg" alt="img"></p><p>于是选用了Wamp搭本地服务器浏览网站，这样就能成功加载动态文件了。</p><hr><p>在此分享下配置WampSever时碰到的问题和解决的方法：</p><h2 id="服务器是否已正常运行"><a href="#服务器是否已正常运行" class="headerlink" title="服务器是否已正常运行"></a>服务器是否已正常运行</h2><p>如果能登上则表示服务器能够正常运行。(在地址栏中输入localhost:端口(或是127.0.0.1:端口) 或是左键图标选择’localhost’)</p><p><img src="https://pic2.zhimg.com/v2-8ec52c0b806ddee374b1cc8d83d3783c_b.jpg" alt="img"></p><blockquote><p>localhost 指你所在的计算机本身。 在windows系统它成了127.0.0.1的别名 ，在Unix系统下，查看网卡配置会发现作为本地回环的方式，一定程度上使用localhost比127.0.0.1要快一些。 在Hosts文件中，localhost指向的IP是127.0.0.1这个关系是可以修改的。 </p></blockquote><hr><h2 id="查看、修改端口"><a href="#查看、修改端口" class="headerlink" title="查看、修改端口"></a>查看、修改端口</h2><p><img src="https://pic3.zhimg.com/v2-c07b053bd933cb51af4b8a4dd7564be5_b.jpg" alt="img"></p><hr><h2 id="配置本地环境、添加项目、打开本地网站"><a href="#配置本地环境、添加项目、打开本地网站" class="headerlink" title="配置本地环境、添加项目、打开本地网站"></a>配置本地环境、添加项目、打开本地网站</h2><p><img src="https://pic4.zhimg.com/v2-2f30ae78528547838cdd4b722b1d5633_b.jpg" alt="img"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目中是空的,需要手动将要打开的网站放到'www'目录中</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/v2-ada47a62bcf8b7e72c647bc9d10680a2_b.jpg" alt="img"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以选择输入路径，也可以直接左键选择'www目录'打开</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/v2-c497a4056dd6067e37c6997099388ef5_b.jpg" alt="img"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将要打开网站的文件夹复制到'www目录下'，会发现刚添加的文件夹出现在了项目中。</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/v2-0328f2435494b1f8e6373858fe485309_b.jpg" alt="img"></p><hr><h2 id="勾选’Add-localhost-in-url’"><a href="#勾选’Add-localhost-in-url’" class="headerlink" title="勾选’Add localhost in url’"></a>勾选’Add localhost in url’</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">看似到此已经大功告成，然而再点击进去这些文件夹时会出现如下情况：</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/v2-78dbeb073cdef02d3e2cd1f01699f6c9_b.jpg" alt="img"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以看到的是<span class="built_in">URL</span>并不对，我们是想要实现通过web服务器的方式访问这些网站，然而这个明显没达到我们想要的效果，根据提示，我找到了原因。</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/v2-351e9cc2e38d8afa45572fa200e708c3_b.jpg" alt="img"></p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">右键选择<span class="symbol">'Wamp</span> <span class="type">Settings'</span>中将<span class="symbol">'Add</span> localhost <span class="keyword">in</span> url'选项勾上后再次如上打开项目即可。（记得重新打开一次localhost页面或是刷新一下）</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/v2-ff266d60eaa59b23c8e36d97df1e6967_b.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以看到网站成功地通过web服务器打开了，那些之前提示需要动态加载的文件也成功加载了。</span><br></pre></td></tr></table></figure><hr><p><img src="https://pic2.zhimg.com/v2-ff266d60eaa59b23c8e36d97df1e6967_b.jpg" alt="img"></p><p>撒花完结！~200成功！</p><p>▲.看到这，我相信你也明白了为什么必须要有’Add localhost in url’这步了。同时也猜到了，其实直接在网址里面输入正确的网址也是可以的，如<a href="http://localhost:8080/data-visualize-chain-master/,结果也是能打开的。" target="_blank" rel="noopener">http://localhost:8080/data-visualize-chain-master/,结果也是能打开的。</a></p><p>希望能对你们有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/09/01/WampSever配置本地环境，解决打开打开本地网站问题/v2-1d83ff5569ea18de71d329033fb91131_r.jpg&quot; alt=&quot;What&amp;#39;s WAMP&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="WAMP" scheme="https://nymrli.top/tags/WAMP/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下Sublime配置Python环境使用指导:</title>
    <link href="https://nymrli.top/2018/09/01/Ubuntu%E4%B8%8BSublime%E9%85%8D%E7%BD%AEPython%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC/"/>
    <id>https://nymrli.top/2018/09/01/Ubuntu下Sublime配置Python环境使用指导/</id>
    <published>2018-09-01T06:04:47.000Z</published>
    <updated>2018-10-23T14:20:00.900Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/09/01/Ubuntu下Sublime配置Python环境使用指导/v2-e120837a2c6bb4df19299c085c8c7cf1_r.jpg" alt="Sublime Text"></p><a id="more"></a><h2 id="Sublime配置python编译环境及搭建虚拟环境-windows下大致相同"><a href="#Sublime配置python编译环境及搭建虚拟环境-windows下大致相同" class="headerlink" title="Sublime配置python编译环境及搭建虚拟环境:(windows下大致相同)"></a>Sublime配置python编译环境及搭建虚拟环境:(windows下大致相同)</h2><h2 id="1-编译环境配置"><a href="#1-编译环境配置" class="headerlink" title="1.编译环境配置"></a>1.编译环境配置</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = <span class="string">'6f4c264a24d933ce70df5dedcf1dcaee'</span> + <span class="string">'ebe013ee18cced0ef93d5f746d80ef60'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="keyword">by</span> = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.<span class="built_in">replace</span>(<span class="string">' '</span>, <span class="string">'%20'</span>)).<span class="built_in">read</span>(); dh = hashlib.sha256(<span class="keyword">by</span>).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="built_in">open</span>(os.path.join( ipp, pf), <span class="string">'wb'</span> ).<span class="built_in">write</span>(<span class="keyword">by</span>)</span><br></pre></td></tr></table></figure><p>1.点击 <a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">官方网址</a> 从 Sublime Text 3 官方获取用于安装的代码。从菜单栏View –&gt;Show Console或者使用Ctrl+`(esc键下面的按键)，调出sublime的控制台，将官网中的python代码粘贴进去并按Enter执行，最终可以安装完成。在控制台中粘贴刚才的代码，然后点击回车。最后重启ST3。 2.现在你可以通过快捷键 cmd+shift+P 打开 Package Control 来安装其他的插件了。输入 install 然后你就能看见屏幕上出现了 Package Control: Install Package，点击回车,然后搜索sublimeREPL</p><p><img src="/2018/09/01/Ubuntu下Sublime配置Python环境使用指导/1.png" alt="1"></p><p>安装成功后，可以在菜单栏的’TOOL’中找到SublimeREPL，如图所示</p><p><img src="/2018/09/01/Ubuntu下Sublime配置Python环境使用指导/2.png" alt="2"></p><h2 id="2-将菜单栏改为中文"><a href="#2-将菜单栏改为中文" class="headerlink" title="2.将菜单栏改为中文"></a>2.将菜单栏改为中文</h2><p>若需要将菜单栏改成中文可如上操作下载插件“ConvertToUTF8”或是安装插件“ChineseLocalizations”(本人使用的是这个，没试ConvertToUTF8的效果)</p><p><img src="/2018/09/01/Ubuntu下Sublime配置Python环境使用指导/3.png" alt="3"></p><p>(参考博客:<a href="http://blog.51cto.com/11970781/2087971" target="_blank" rel="noopener">http://blog.51cto.com/11970781/2087971</a>)</p><h2 id="3-安装Anaconda插件"><a href="#3-安装Anaconda插件" class="headerlink" title="3.安装Anaconda插件"></a>3.安装Anaconda插件</h2><blockquote><p>1.点击刚刚生成的Package Control -&gt;输入install 2.进入安装界面，安装好后再在新窗口命令行中输入Anaconda并点击第一个备选项进行安装。 安装完成后会显示messages文档。</p></blockquote><p>安装Anaconda插件完成之后，会看到如下选项栏，说明Anaconda安装成功。 - Goto Definitions 能够在你的整个工程中查找并且显示任意一个变量，函数或者类的定义。 - Find Usage 能够快速的查找某个变量，函数或者类在某个特定文件中的什么地方被使用了。 - Show Documentation： 能够显示一个函数或者类的说明性字符串(当然，是在定义了字符串的情况下)</p><p>Anaconda会自动补全代码，之前用惯了pycharm发现突然没了代码补全后很不习惯，Anaconda的补全功能虽然没有pycharm那么好用，但还是不错的 还有需要注意的是，安装Anaconda插件后，如果python代码没有遵循PEP8规范，会出现白色的框框，或是可以使用快捷键Ctrl+Alt+R进行规范代码(这个可以去除，步骤如下)</p><p><img src="/2018/09/01/Ubuntu下Sublime配置Python环境使用指导/4.png" alt="4"></p><p>在Settings-User选项中添加配置:{“anaconda_linting”:false}</p><h2 id="4-安装虚拟环境"><a href="#4-安装虚拟环境" class="headerlink" title="4.安装虚拟环境"></a>4.安装虚拟环境</h2><blockquote><p>1.首先使用终端安装virtualenv，pip3 install virtualenv2.在需要创建的地方进行虚拟环境的搭建，代码如下：</p></blockquote><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> pytest(文件夹名)</span><br><span class="line"><span class="built_in">cd</span> pytest</span><br><span class="line">virtualenv venv</span><br></pre></td></tr></table></figure><p><img src="/2018/09/01/Ubuntu下Sublime配置Python环境使用指导/5.png" alt="5"></p><p>在终端进入虚拟环境的话是在pytest文件夹下输入命令source /bin/activate而要在sublime中进入虚拟环境的话就得按照如下操作： １．首先在sublime中安装virtualenv插件，Ctrl + Shift + P，然后输入install,回车，然后搜索virtualenv。 2. 安装完成后，直接按Ctrl + Shift + P，再输入Activate，若没有该选项则virtualenv安装中出现问题，需要重新安装。如果有的会选择Activate就能发现刚刚创建的虚拟环境，选中后回车即可进入虚拟环境 3. 如果Activate选中后没有出现我们刚刚创建的虚拟环境，则需要我们手动添加路径.Ctrl + Shift + P，然后输入Add directory，回车，屏幕下面会出现输入行（Directory path）:再将刚创建的虚拟环境路径填入即可</p><p><img src="/2018/09/01/Ubuntu下Sublime配置Python环境使用指导/6.png" alt="6"></p><p>另外，我曾碰到过Add directory后仍然没用的情况。那时，可选择“”Project”=&gt;”Add folder to project”选择文件后=&gt;”Save Project as”==&gt;保存好即可</p><p>工程配置文件为：</p><p>.sublime-workspace、.sublime-project</p><p>其中sublime-project为:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"build_systems"</span>:</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"file_regex"</span>: <span class="string">"^[ ]File "</span>(...?)<span class="string">", line ([0-9]*)"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Anaconda Python Builder"</span>,</span><br><span class="line">            <span class="attr">"selector"</span>: <span class="string">"source.python"</span>,</span><br><span class="line">            <span class="attr">"shell_cmd"</span>: <span class="string">""</span>python<span class="string">" -u "</span>$file<span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"folders"</span>:</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"爬虫"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"virtualenv"</span>: <span class="string">"G:\pachong\venv"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样环境就配置好了。按Ctrl+B编译时，观察”Tools”-&gt;”Build System”-&gt;是否为”Python+ Virtualenv”，如果不是，则选用这个再Ctrl+B就是在虚拟环境中编译了!</p><p>ubuntu下sublime默认情况下好像不能输入中文，需要用下面命令就可以完美支持中文输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">update</span> &amp;&amp; sudo apt-<span class="keyword">get</span> <span class="keyword">upgrade</span></span><br><span class="line">git <span class="keyword">clone</span> https://github.com/lyfeyaj/sublime-<span class="built_in">text</span>-imfix.git</span><br><span class="line">cd sublime-<span class="built_in">text</span>-imfix</span><br><span class="line">./sublime-imfix</span><br></pre></td></tr></table></figure><p>转自<a href="https://blog.csdn.net/cv_you" target="_blank" rel="noopener">CV_YOU的博客</a></p><p><a href="https://blog.csdn.net/CV_YOU/article/details/77702383" target="_blank" rel="noopener">完美解决Sublime无法输入中文问题</a></p><p>截图好像有点问题，菜单栏都没有截到，用到的三个分别为“项目(Project)”，“首选项(Preferences)”，“帮助(Help)”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/09/01/Ubuntu下Sublime配置Python环境使用指导/v2-e120837a2c6bb4df19299c085c8c7cf1_r.jpg&quot; alt=&quot;Sublime Text&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Sublime Text" scheme="https://nymrli.top/tags/Sublime-Text/"/>
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>python pywin32 PyUserInput实现自动化脚本</title>
    <link href="https://nymrli.top/2018/08/31/python-win32api-win32gui-win32con-PyUserInput%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/"/>
    <id>https://nymrli.top/2018/08/31/python-win32api-win32gui-win32con-PyUserInput实现自动化脚本/</id>
    <published>2018-08-31T11:43:00.000Z</published>
    <updated>2018-08-31T11:56:56.677Z</updated>
    
    <content type="html"><![CDATA[<p>pywin32用<a href="https://www.cnblogs.com/nymrli/p/9556691.html" target="_blank" rel="noopener">spy++</a>工具查找到句柄，再结合<a href="https://www.cnblogs.com/nymrli/p/9557023.html" target="_blank" rel="noopener">PyUserInput</a>就能很好地实现自动化脚本。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">import win32gui</span><br><span class="line">import win32con</span><br><span class="line">import win32api</span><br><span class="line"></span><br><span class="line"><span class="meta"># 从顶层窗口向下搜索主窗口，无法搜索子窗口</span></span><br><span class="line"><span class="meta"># FindWindow(lpClassName=None, lpWindowName=None)  窗口类名 窗口标题名</span></span><br><span class="line">handle = win32gui.FindWindow(<span class="string">"Notepad"</span>, None) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 获取窗口位置</span></span><br><span class="line">left, top, right, bottom = win32gui.GetWindowRect(handle)</span><br><span class="line"></span><br><span class="line"><span class="meta">#获取某个句柄的类名和标题</span></span><br><span class="line">title = win32gui.GetWindowText(handle)     </span><br><span class="line">clsname = win32gui.GetClassName(handle)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 打印句柄</span></span><br><span class="line"><span class="meta"># 十进制</span></span><br><span class="line">print(handle)</span><br><span class="line"><span class="meta"># 十六进制</span></span><br><span class="line">print(<span class="string">"%x"</span> %(handle) )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 搜索子窗口</span></span><br><span class="line"><span class="meta"># 枚举子窗口</span></span><br><span class="line">hwndChildList = []     </span><br><span class="line">win32gui.EnumChildWindows(handle, lambda hwnd, param: param.append(hwnd),  hwndChildList)</span><br><span class="line"></span><br><span class="line"><span class="meta"># FindWindowEx(hwndParent=0, hwndChildAfter=0, lpszClass=None, lpszWindow=None) </span></span><br><span class="line"><span class="meta"># 父窗口句柄 若不为0，则按照z-index的顺序从hwndChildAfter向后开始搜索子窗体，否则从第一个子窗体开始搜索。 子窗口类名 子窗口标题</span></span><br><span class="line">subHandle = win32gui.FindWindowEx(handle, <span class="number">0</span>, <span class="string">"EDIT"</span>, None)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 获得窗口的菜单句柄</span></span><br><span class="line">menuHandle = win32gui.GetMenu(subHandle)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 获得子菜单或下拉菜单句柄   </span></span><br><span class="line"><span class="meta"># 参数：菜单句柄 子菜单索引号</span></span><br><span class="line">subMenuHandle = win32gui.GetSubMenu(menuHandle, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 获得菜单项中的的标志符，注意，分隔符是被编入索引的  </span></span><br><span class="line"><span class="meta"># 参数：子菜单句柄 项目索引号 </span></span><br><span class="line">menuItemHandle = win32gui.GetMenuItemID(subMenuHandle, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 发送消息，加入消息队列，无返回 </span></span><br><span class="line"><span class="meta"># 参数：句柄 消息类型 WParam IParam</span></span><br><span class="line">win32gui.postMessage(subHandle, win32con.WM_COMMAND, menuItemHandle, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># wParam的定义是32位整型，high word就是他的31至16位，low word是它的15至0位。</span></span><br><span class="line"><span class="meta"># 当参数超过两个，wParam和lParam不够用时，可以将wParam就给拆成两个int16来使用。</span></span><br><span class="line"><span class="meta"># 这种时候在python里记得用把HIWORD的常数向左移16位，再加LOWORD，即wParam = HIWORD&lt;&lt;16+LOWORD。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 下选框内容更改</span></span><br><span class="line"><span class="meta"># 参数：下选框句柄； 消息内容； </span></span><br><span class="line"><span class="meta">#参数下选框的哪一个item，以0起始的待选选项的索引；如果该值为-1，将从组合框列表中删除当前选项，并使当前选项为空；</span></span><br><span class="line"><span class="meta"># 参数CB_Handle为下选框句柄，PCB_handle下选框父窗口句柄</span></span><br><span class="line"><span class="keyword">if</span> win32api.SendMessage(CB_handle, win32con.CB_SETCURSEL, <span class="number">1</span>, <span class="number">0</span>) == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line"><span class="meta"># 下选框的父窗口命令</span></span><br><span class="line"><span class="meta"># 参数：父窗口句柄； 命令； </span></span><br><span class="line"><span class="meta"># 参数：WParam：高位表示类型，低位表示内容；参数IParam，下选框句柄</span></span><br><span class="line"><span class="meta"># CBN_SELENDOK当用户选择了有效的列表项时发送，提示父窗体处理用户的选择。 LOWORD为组合框的ID. HIWORD为CBN_SELENDOK的值。</span></span><br><span class="line">            win32api.SendMessage(PCB_handle, win32con.WM_COMMAND, <span class="number">0x90000</span>, CB_handle) </span><br><span class="line"><span class="meta"># CBN_SELCHANGE当用户更改了列表项的选择时发送，不论用户是通过鼠标选择或是通过方向键选择都会发送此通知。LOWORD为组合框的ID. HIWORD为CBN_SELCHANGE的值。</span></span><br><span class="line">            win32api.SendMessage(PCB_handle, win32con.WM_COMMAND, <span class="number">0x10000</span>, CB_handle) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 设置文本框内容，等窗口处理完毕后返回true。中文需编码成gbk </span></span><br><span class="line"><span class="meta"># 参数：句柄；消息类型；</span></span><br><span class="line"><span class="meta"># 参数WParam，无需使用； </span></span><br><span class="line"><span class="meta"># 参数IParam，要设置的内容，字符串</span></span><br><span class="line">win32api.SendMessage(handle, win32con.WM_SETTEXT, <span class="number">0</span>, os.path.abspath(fgFilePath).encode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 控件点击确定,处理消息后返回0</span></span><br><span class="line"><span class="meta"># 参数:窗口句柄; 消息类型; 参数WParam HIWORD为0（未使用），LOWORD为控件的ID; 参数IParam  0（未使用）,确定控件的句柄</span></span><br><span class="line">win32api.SendMessage(Mhandle, win32con.WM_COMMAND, <span class="number">1</span>, confirmBTN_handle)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 获取窗口文本不含截尾空字符的长度</span></span><br><span class="line"><span class="meta"># 参数：窗口句柄； 消息类型； 参数WParam； 参数IParam</span></span><br><span class="line">bufSize = win32api.SendMessage(subHandle, win32con.WM_GETTEXTLENGTH, <span class="number">0</span>, <span class="number">0</span>) +<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 利用api生成Buffer</span></span><br><span class="line">strBuf = win32gui.PyMakeBuffer(bufSize)</span><br><span class="line">print(strBuf)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 发送消息获取文本内容</span></span><br><span class="line"><span class="meta"># 参数：窗口句柄； 消息类型；文本大小； 存储位置</span></span><br><span class="line">length = win32gui.SendMessage(subHandle, win32con.WM_GETTEXT, bufSize, strBuf)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 反向内容，转为字符串</span></span><br><span class="line"><span class="meta"># text = str(strBuf[:-1])</span></span><br><span class="line"></span><br><span class="line">address, length = win32gui.PyGetBufferAddressAndLen(strBuf) </span><br><span class="line">text = win32gui.PyGetString(address, length) </span><br><span class="line"><span class="meta"># print('text: ', text)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 鼠标单击事件</span></span><br><span class="line"><span class="meta">#鼠标定位到(30,50)</span></span><br><span class="line">win32api.SetCursorPos([<span class="number">30</span>,<span class="number">150</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">#执行左单键击，若需要双击则延时几毫秒再点击一次即可</span></span><br><span class="line">win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP | win32con.MOUSEEVENTF_LEFTDOWN, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#右键单击</span></span><br><span class="line">win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTUP | win32con.MOUSEEVENTF_RIGHTDOWN, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">def click1(x,y):                #第一种</span><br><span class="line">    win32api.SetCursorPos((x,y))</span><br><span class="line">    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,x,y,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,x,y,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">def click2(x,y):               #第二种</span><br><span class="line">    ctypes.windll.user32.SetCursorPos(x,y)</span><br><span class="line">    ctypes.windll.user32.mouse_event(<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    ctypes.windll.user32.mouse_event(<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">def click_it(pos):          #第三种</span><br><span class="line">    handle= win32gui.WindowFromPoint(pos)</span><br><span class="line">    client_pos =win32gui.ScreenToClient(handle,pos)</span><br><span class="line">    tmp=win32api.MAKELONG(client_pos[<span class="number">0</span>],client_pos[<span class="number">1</span>])</span><br><span class="line">    win32gui.SendMessage(handle, win32con.WM_ACTIVATE,win32con.WA_ACTIVE,<span class="number">0</span>)</span><br><span class="line">    win32gui.SendMessage(handle, win32con.WM_LBUTTONDOWN,win32con.MK_LBUTTON,tmp)</span><br><span class="line">    win32gui.SendMessage(handle, win32con.WM_LBUTTONUP,win32con.MK_LBUTTON,tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 发送回车</span></span><br><span class="line">win32api.keybd_event(<span class="number">13</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">win32api.keybd_event(<span class="number">13</span>,<span class="number">0</span>,win32con.KEYEVENTF_KEYUP,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 关闭窗口</span></span><br><span class="line">win32gui.PostMessage(win32lib.findWindow(classname, titlename), win32con.WM_CLOSE, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 检查窗口是否最小化，如果是最大化</span></span><br><span class="line"><span class="keyword">if</span>(win32gui.IsIconic(hwnd)):</span><br><span class="line"><span class="meta">#     win32gui.ShowWindow(hwnd, win32con.SW_SHOWNORMAL)</span></span><br><span class="line">    win32gui.ShowWindow(hwnd, <span class="number">8</span>)</span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># SW_HIDE：隐藏窗口并激活其他窗口。nCmdShow=0。</span></span><br><span class="line"><span class="meta"># SW_MAXIMIZE：最大化指定的窗口。nCmdShow=3。</span></span><br><span class="line"><span class="meta"># SW_MINIMIZE：最小化指定的窗口并且激活在Z序中的下一个顶层窗口。nCmdShow=6。</span></span><br><span class="line"><span class="meta"># SW_RESTORE：激活并显示窗口。如果窗口最小化或最大化，则系统将窗口恢复到原来的尺寸和位置。在恢复最小化窗口时，应用程序应该指定这个标志。nCmdShow=9。</span></span><br><span class="line"><span class="meta"># SW_SHOW：在窗口原来的位置以原来的尺寸激活和显示窗口。nCmdShow=5。</span></span><br><span class="line"><span class="meta"># SW_SHOWDEFAULT：依据在STARTUPINFO结构中指定的SW_FLAG标志设定显示状态，STARTUPINFO 结构是由启动应用程序的程序传递给CreateProcess函数的。nCmdShow=10。</span></span><br><span class="line"><span class="meta"># SW_SHOWMAXIMIZED：激活窗口并将其最大化。nCmdShow=3。</span></span><br><span class="line"><span class="meta"># SW_SHOWMINIMIZED：激活窗口并将其最小化。nCmdShow=2。</span></span><br><span class="line"><span class="meta"># SW_SHOWMINNOACTIVE：窗口最小化，激活窗口仍然维持激活状态。nCmdShow=7。</span></span><br><span class="line"><span class="meta"># SW_SHOWNA：以窗口原来的状态显示窗口。激活窗口仍然维持激活状态。nCmdShow=8。</span></span><br><span class="line"><span class="meta"># SW_SHOWNOACTIVATE：以窗口最近一次的大小和状态显示窗口。激活窗口仍然维持激活状态。nCmdShow=4。</span></span><br><span class="line"><span class="meta"># SW_SHOWNORMAL：激活并显示一个窗口。如果窗口被最小化或最大化，系统将其恢复到原来的尺寸和大小。应用程序在第一次显示窗口的时候应该指定此标志。nCmdShow=1。</span></span><br></pre></td></tr></table></figure><p>感谢<a href="https://blog.csdn.net/qq_16234613/article/details/79155632" target="_blank" rel="noopener">python win32api win32gui win32con 窗口句柄 发送消息 常用方法 键盘输入</a>，代码主要来自于他</p><h4 id="▲-需要注意在windows和mac下接口参数可能有所不同。"><a href="#▲-需要注意在windows和mac下接口参数可能有所不同。" class="headerlink" title="▲.需要注意在windows和mac下接口参数可能有所不同。"></a>▲.需要注意在windows和mac下接口参数可能有所不同。</h4><h4 id="win32虽然也可控制键盘，但不如使用PyUserInput的方便。安装PyUserInput教程"><a href="#win32虽然也可控制键盘，但不如使用PyUserInput的方便。安装PyUserInput教程" class="headerlink" title="win32虽然也可控制键盘，但不如使用PyUserInput的方便。安装PyUserInput教程"></a>win32虽然也可控制键盘，但不如使用PyUserInput的方便。<a href="https://www.cnblogs.com/nymrli/p/9557023.html" target="_blank" rel="noopener">安装PyUserInput教程</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymouse <span class="keyword">import</span> PyMouse</span><br><span class="line"><span class="keyword">from</span> pykeyboard <span class="keyword">import</span> PyKeyboard</span><br><span class="line"><span class="comment">#实例化</span></span><br><span class="line">m = PyMouse()</span><br><span class="line">k = PyKeyboard()</span><br><span class="line"></span><br><span class="line">x_dim, y_dim = m.screen_size()</span><br><span class="line"><span class="comment"># 鼠标点击 参数:x,y,button=1(左键)、2(右键)、3(中间),次数</span></span><br><span class="line">m.click(x_dim, y_dim, button=<span class="number">1</span>,n=<span class="number">1</span>)  </span><br><span class="line"><span class="comment"># 键盘输入 参数:str,间隔</span></span><br><span class="line">k.type_string(<span class="string">'Hello, World!'</span>,interval=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按住一个键</span></span><br><span class="line">k.press_key(<span class="string">'H'</span>)</span><br><span class="line"><span class="comment"># 松开一个键</span></span><br><span class="line">k.release_key(<span class="string">'H'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于===&gt;按住并松开，tap一个键</span></span><br><span class="line">k.tap_key(<span class="string">'e'</span>)</span><br><span class="line"><span class="comment"># tap支持重复的间歇点击键,参数:str,次数,间隔</span></span><br><span class="line">k.tap_key(<span class="string">'l'</span>,n=<span class="number">2</span>,interval=<span class="number">5</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建组合键===&gt;press_key和release_key结合使用</span></span><br><span class="line">k.press_key(k.alt_key)</span><br><span class="line">k.tap_key(k.tab_key)</span><br><span class="line">k.release_key(k.alt_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊功能键</span></span><br><span class="line">k.tap_key(k.function_keys[<span class="number">5</span>]) <span class="comment"># Tap F5</span></span><br><span class="line">k.tap_key(k.numpad_keys[<span class="string">'Home'</span>]) <span class="comment"># Tap 'Home' on the numpad</span></span><br><span class="line">k.tap_key(k.numpad_keys[<span class="number">5</span>], n=<span class="number">3</span>) <span class="comment"># Tap 5 on the numpad, thrice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac系统按键</span></span><br><span class="line">k.press_keys([<span class="string">'Command'</span>,<span class="string">'shift'</span>,<span class="string">'3'</span>])</span><br><span class="line"><span class="comment"># Windows系统按键</span></span><br><span class="line">k.press_keys([k.windows_l_key,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line">其中pymouse的PyMouseEvent和pykeyboard的PyKeyboardEvent还可用于监听鼠标和键盘事件的输入</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clickonacci</span><span class="params">(PyMouseEvent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        PyMouseEvent.__init__(self)</span><br><span class="line">        self.fibo = fibo()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">click</span><span class="params">(self, x, y, button, press)</span>:</span></span><br><span class="line">        <span class="string">'''Print Fibonacci numbers when the left click is pressed.'''</span></span><br><span class="line">        <span class="keyword">if</span> button == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> press:</span><br><span class="line">                print(<span class="string">'Press times:%d'</span>.format(press))</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># Exit if any other mouse button used</span></span><br><span class="line">            self.stop()</span><br><span class="line"></span><br><span class="line">C = Clickonacci()</span><br><span class="line">C.run()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TapRecord</span><span class="params">(PyKeyboardEvent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        PyKeyboardEvent.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tap</span><span class="params">(self, keycode, character, press)</span>:</span></span><br><span class="line">        print(time.time(), keycode, character, press)</span><br><span class="line"></span><br><span class="line">t = TapRecord()</span><br><span class="line">t.run()</span><br><span class="line"><span class="comment">#这些对象是一个架构用于监听鼠标和键盘的输入；他们除了监听之外不会做任何事，需要继承重构他们#PyKeyboardEvent为编写完成，所以这里是一个继承PyMouseEvent的例子：</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pywin32用&lt;a href=&quot;https://www.cnblogs.com/nymrli/p/9556691.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;spy++&lt;/a&gt;工具查找到句柄，再结合&lt;a href=&quot;https://www.c
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="自动化运维" scheme="https://nymrli.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
</feed>
