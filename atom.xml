<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mrli&#39;s Blog</title>
  
  <subtitle>别装作很努力，结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2019-10-07T10:28:33.241Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>Mrli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>蒙特卡洛树搜索MCTS</title>
    <link href="https://nymrli.top/2019/10/07/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A0%91%E6%90%9C%E7%B4%A2MCTS/"/>
    <id>https://nymrli.top/2019/10/07/蒙特卡洛树搜索MCTS/</id>
    <published>2019-10-07T09:18:02.000Z</published>
    <updated>2019-10-07T10:28:33.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="蒙特卡洛树搜索mcts"><a class="markdownIt-Anchor" href="#蒙特卡洛树搜索mcts"></a> 蒙特卡洛树搜索MCTS</h1><h2 id="跟围棋的关联"><a class="markdownIt-Anchor" href="#跟围棋的关联"></a> 跟围棋的关联</h2><h3 id="alphago"><a class="markdownIt-Anchor" href="#alphago"></a> AlphaGo</h3><h3 id="alphago-zero"><a class="markdownIt-Anchor" href="#alphago-zero"></a> AlphaGo Zero</h3><ul><li>蒙特卡洛树搜索——内含用于树遍历的 PUCT 函数的某些变体</li><li>残差卷积神经网络——其中的策略和价值网络被用于评估棋局，以进行下一步落子位置的先验概率估算。</li><li>强化学习——通过自我对弈进行神经网络训练</li></ul><p>AlphaGo Zero跟AlphaGo的最大区别是抛弃人类棋谱的，完全通过自我对弈来学会下棋的，并且仅用40小时就到达了AlphaGo的棋力。</p><p>过程是这样，首先生成棋谱，然后将棋谱作为输入训练神经网络，训练好的神经网络用来预测落子和胜率。如下图：</p><p><img src="https://img-blog.csdn.net/2018031214442364" alt=""></p><p>在AlphaGo Zero中蒙特卡洛树搜索主要是用来生成棋谱的</p><h2 id="蒙特卡洛树搜索"><a class="markdownIt-Anchor" href="#蒙特卡洛树搜索"></a> 蒙特卡洛树搜索</h2><blockquote><p>Q:MCTS干了什么?</p><p>A:给出一个「游戏状态」并选择「胜率最高的下一步」</p><p>适用于<strong>有限两人零和回合制游戏</strong></p></blockquote><p>MCTS算法是一种决策算法，每次模拟（simulation）分为4步：</p><ol><li>Tree traversal(树的遍历):<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mi>C</mi><mi>B</mi><mn>1</mn><mrow><mo fence="true">(</mo><msub><mi>S</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow><mo>=</mo><mover accent="true"><mrow><msub><mi>V</mi><mrow><mi>i</mi></mrow></msub></mrow><mo stretchy="true">‾</mo></mover><mo>+</mo><mi>c</mi><msqrt><mrow><mfrac><mrow><mi>log</mi><mi>N</mi></mrow><mrow><msub><mi>n</mi><mrow><mi>i</mi></mrow></msub></mrow></mfrac></mrow></msqrt><mo separator="true">,</mo><mi>c</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">U C B 1\left(S_{i}\right)=\overline{V_{i}}+c \sqrt{\frac{\log N}{n_{i}}}, c=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.226118em;"></span><span class="strut bottom" style="height:1.84002em;vertical-align:-0.613902em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">1</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="overline mord"><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord"><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.22222em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span style="top:-0.80333em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped overline-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathit">c</span><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.036118000000000094em;"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing size2">√</span></span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord reset-textstyle textstyle cramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.44610799999999995em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mord mathit" style="margin-right:0.10903em;">N</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span><span style="top:-1.146118em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathit">c</span><span class="mrel">=</span><span class="mord mathrm">2</span></span></span></span><br>其中，表<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><msub><mi>V</mi><mrow><mi>i</mi></mrow></msub></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{V_{i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8833300000000001em;"></span><span class="strut bottom" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="overline mord"><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord"><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.22222em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span style="top:-0.80333em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped overline-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span></span></span></span>示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>状态的平均value(下面会进一步解释）</li><li>Node expansion(拓展节点)</li><li>Rollout (random simulation)(模拟)</li><li>Backpropagation(方向传播)</li></ol><h3 id="蒙特卡洛计算过程"><a class="markdownIt-Anchor" href="#蒙特卡洛计算过程"></a> 蒙特卡洛计算过程</h3><blockquote><p>UCB其实就是UCT(UCB for Tree)，但是教授视频中给的是UCB，因此这边也用UCB写</p></blockquote><p>第一、二步的流程（遍历、拓展节点）：</p><p>1.从状态S0开始，要在下面两个动作中进行选择（假设只有两个动作可选），选择的标准就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mi>C</mi><mi>B</mi><mn>1</mn><mrow><mo fence="true">(</mo><msub><mi>S</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">U C B 1\left(S_{i}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">1</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span></span></span></span>值，<strong>选择最大化 UCT 的节点作为下一个节点</strong>。初始情况两个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mi>C</mi><mi>B</mi><mn>1</mn><mrow><mo fence="true">(</mo><msub><mi>S</mi><mrow><mn>1</mn></mrow></msub><mo fence="true">)</mo></mrow><mo>=</mo><mi>U</mi><mi>C</mi><mi>B</mi><mn>1</mn><mrow><mo fence="true">(</mo><msub><mi>S</mi><mrow><mn>2</mn></mrow></msub><mo fence="true">)</mo></mrow><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">U C B 1\left(S_{1}\right)=U C B 1\left(S_{2}\right)=\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">1</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.10903em;">U</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">1</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathrm">∞</span></span></span></span>,按顺序选择S1<br>2.判断目前的结点S1(current node)是不是叶节点，这里叶节点是指其没有被展开（expansion）过。<br>3.接下来，按照流程图，需要判断结点S1被访问的系数是否为0。是0，则要进行Rollout。(Rollout其实就是在接下来的步骤中每一步都随机采取动作，直到停止点（围棋中的对局结束），得到一个最终的value。)==&gt;假设Rollout最终值为20.<br>4.Backpropagation，即利用Rollout最终得到的value来更新路径上每个结点的T,N值。(之后把Rollout的结果删除：MCTS的想法就是要从出S0发不断的进行迭代，不断更新结点值，直到达到一定的迭代次数或者时间。)<br>5.如果没有达到一定的迭代次数或者时间，继续从根节点进行1-4</p><p><img src="https://img-blog.csdn.net/20171024211039397?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGp5dDI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>第三步rollout模拟:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*这个函数接受一个表示博弈状态的参数，然后返回下一步行动。实际上，它被设计得非常快，从而可以让很多模拟快速进行——默认的 rollout policy 函数是一个均衡分布的随机数生成函数。*/</span><br><span class="line">Rollout(S_i):</span><br><span class="line">loop forever:</span><br><span class="line">/* 如果当前状态结点是个终止结点 */</span><br><span class="line">if S_i is a terminal state:</span><br><span class="line">/* 那么直接返回它的value值*/</span><br><span class="line">return value(S_i)</span><br><span class="line">/* 找到下一个动作 */</span><br><span class="line">A_i = random(available-actions(S_i))</span><br><span class="line">/* 选择下一个状态进行拓展 */</span><br><span class="line">S_i = simulate(A_i,S_i)</span><br></pre></td></tr></table></figure><p>例子说明见:<a href="https://blog.csdn.net/ljyt2/article/details/78332802" target="_blank" rel="noopener">蒙特卡洛树搜索（MCTS）算法-计算过程</a>，视频讲解见B站:<a href="https://www.bilibili.com/video/av67847675?from=search&amp;seid=7487786042631726209" target="_blank" rel="noopener">【MCTS】Youtube上迄今为止最好的蒙特卡罗树搜索讲解</a></p><p>相比极大极小法（minimax）。这个策略假定你的对手发挥了最好的博弈水平，然后以此调整策略来最大化你的收益。简单地说，给定状态，你想要找到一个能产生最大收益的 move ，假定你的对手想要最小化你的收益（最大化他自己的收益）。因此，名字叫作<strong>极小化极大</strong>。</p><p><strong>极小化极大算法的最大劣势</strong>是，需要扩展整个博弈树。对于分支因子较高的博弈（例如围棋或者国际象棋），这会导致庞大的博弈树从而失败。</p><h3 id="uct树的置信上限ucb-for-trees"><a class="markdownIt-Anchor" href="#uct树的置信上限ucb-for-trees"></a> UCT树的置信上限(UCB for Trees)</h3><blockquote><p>Upper Confidence Bounds(置信上限)</p></blockquote><p>UCT是一个让我们从已访问的节点中选择下一个节点来进行遍历的函数，也是MCTS的核心函数。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mi>C</mi><mi>T</mi><mrow><mo fence="true">(</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo separator="true">,</mo><mi>v</mi><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><mi>Q</mi><mrow><mo fence="true">(</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow><mrow><mi>N</mi><mrow><mo fence="true">(</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow></mfrac><mo>+</mo><mi>c</mi><msqrt><mrow><mfrac><mrow><mi>log</mi><mo>(</mo><mi>N</mi><mo>(</mo><mi>v</mi><mo>)</mo><mo>)</mo></mrow><mrow><mi>N</mi><mrow><mo fence="true">(</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow></mfrac></mrow></msqrt></mrow><annotation encoding="application/x-tex">UCT\left(v_{i}, v\right)=\frac{Q\left(v_{i}\right)}{N\left(v_{i}\right)}+c \sqrt{\frac{\log (N(v))}{N\left(v_{i}\right)}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.23001em;"></span><span class="strut bottom" style="height:1.84002em;vertical-align:-0.6100099999999999em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">Q</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">+</span><span class="mord mathit">c</span><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.0400100000000001em;"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing size2">√</span></span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord reset-textstyle textstyle cramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span><span style="top:-1.15001em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span></span></span></span></p><h3 id="exploitation-component利用"><a class="markdownIt-Anchor" href="#exploitation-component利用"></a> exploitation component(利用)</h3><p>第一部分是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>Q</mi><mrow><mo fence="true">(</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow><mrow><mi>N</mi><mrow><mo fence="true">(</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{Q\left(v_{i}\right)}{N\left(v_{i}\right)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.01em;"></span><span class="strut bottom" style="height:1.53em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">Q</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span> ，也称作exploitation component</p><p>可以看做是子节点Vi的胜率估计（总收益/总次数=平均每次的收益）。但是不能只选择胜率高的下一步，因为这种贪婪方式的搜索会很快导致游戏结束，这往往会导致搜索不充分，错过最优解。</p><p>举个简单的例子。现在假设MCTS的UCT函数只用了探索成分，从根节点开始，我们对所有子节点进行了一次模拟，然后在下一步中只访问至少赢了一次的子节点。那么在第一次模拟中那些不幸未被选中的节点（实际中rollout策略函数通常是随机的）将会被立刻抛弃</p><h3 id="exploration-component探索"><a class="markdownIt-Anchor" href="#exploration-component探索"></a> exploration component(探索)</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><msqrt><mrow><mfrac><mrow><mi>log</mi><mo>(</mo><mi>N</mi><mo>(</mo><mi>v</mi><mo>)</mo><mo>)</mo></mrow><mrow><mi>N</mi><mrow><mo fence="true">(</mo><msub><mi>v</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow></mfrac></mrow></msqrt></mrow><annotation encoding="application/x-tex">c \sqrt{\frac{\log (N(v))}{N\left(v_{i}\right)}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.23001em;"></span><span class="strut bottom" style="height:1.84002em;vertical-align:-0.6100099999999999em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.0400100000000001em;"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing size2">√</span></span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord reset-textstyle textstyle cramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span><span style="top:-1.15001em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span></span></span></span>，这个成分更倾向于那些想对较少被探索的节点N(Vi)小。</p><p>参数c是exploitation和exploration之间的折中系数。</p><h3 id="mcts的终止"><a class="markdownIt-Anchor" href="#mcts的终止"></a> MCTS的终止</h3><p>终止条件(or)：</p><ul><li>达到一定的迭代次数</li><li>达到规定的搜索时间</li></ul><p>当MSCT程序结束时，最佳的移动通常是访问次数最多的那个节点，也是UCT最大的点。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考:</h2><p><a href="https://blog.csdn.net/mergerly/article/details/83788862" target="_blank" rel="noopener">深度学习入门：AlphaGo Zero蒙特卡洛树搜索</a></p><p><a href="https://blog.csdn.net/ljyt2/article/details/78332802" target="_blank" rel="noopener">蒙特卡洛树搜索（MCTS）算法-计算过程</a></p><p><a href="https://www.bilibili.com/video/av67847675?from=search&amp;seid=7487786042631726209" target="_blank" rel="noopener">【MCTS】Youtube上迄今为止最好的蒙特卡罗树搜索讲解</a></p><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现:</h2><p><a href="https://blog.csdn.net/white_gl/article/details/56521880" target="_blank" rel="noopener">python实现的基于蒙特卡洛树搜索(MCTS)与UCB的五子棋游戏</a></p><p><a href="https://github.com/int8/monte-carlo-tree-search" target="_blank" rel="noopener">mctspy：蒙特卡洛树搜索算法的python实现</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;蒙特卡洛树搜索mcts&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#蒙特卡洛树搜索mcts&quot;&gt;&lt;/a&gt; 蒙特卡洛树搜索MCTS&lt;/h1&gt;
&lt;h2 id=&quot;跟围棋的关联&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre
      
    
    </summary>
    
    
      <category term="RL" scheme="https://nymrli.top/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>Python多进程</title>
    <link href="https://nymrli.top/2019/10/06/Python%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>https://nymrli.top/2019/10/06/Python多进程/</id>
    <published>2019-10-06T12:17:44.000Z</published>
    <updated>2019-10-07T04:15:31.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python多进程"><a class="markdownIt-Anchor" href="#python多进程"></a> Python多进程</h1><h2 id="守护进程"><a class="markdownIt-Anchor" href="#守护进程"></a> 守护进程</h2><blockquote><p>守护进程其实就是**“子进程“是否伴随主进程一起结束**:守护==&gt;伴随，即守护进程会伴随主进程的代码运行完毕后而死掉</p></blockquote><p>进程：当父进程需要将一个任务并发出去执行，需要将该任务放到以个子进程里<br>守护：当该子进程内的代码在父进程代码运行完毕后就没有存在的意义了，就应该<br>将该子进程设置为守护进程，会在父进程代码结束后死掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"end123"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">456</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"end456"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1=Process(target=foo)</span><br><span class="line">    p2=Process(target=bar)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将子进程p1设置为守护进程，守护进程要放在进程start之前</span></span><br><span class="line">    <span class="comment"># 所以p1会在print("main-------")打印完成后死掉，所以p1进程不会打印</span></span><br><span class="line">    p1.daemon=<span class="keyword">True</span></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    print(<span class="string">"main-------"</span>)</span><br></pre></td></tr></table></figure><h2 id="进程锁"><a class="markdownIt-Anchor" href="#进程锁"></a> 进程锁</h2><blockquote><p>主要使用multiprocessing下的Lock对象</p><p>就是将要执行任务的部门代码（只涉及到修改共享数据的代码）变成串行，作用是让进程不乱掉，下面代码就是可以避免 i 乱打印</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(l, i)</span>:</span></span><br><span class="line">    l.acquire()    <span class="comment">#锁住进程</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">'hello world'</span>, i)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        l.release()    <span class="comment">#释放锁</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        Process(target=f, args=(lock, num)).start()</span><br></pre></td></tr></table></figure><p>（理解为用锁来限制，同一时间只能让一个人拿着锁去改数据，先抢到锁的人<br>就有优先购买的权限）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要就是用的这三个</span></span><br><span class="line">lock = lock()</span><br><span class="line">lock.acquire() <span class="comment"># 拿钥匙，开门</span></span><br><span class="line">lock.release() <span class="comment">#还钥匙，关门</span></span><br></pre></td></tr></table></figure><h3 id="抢票demo"><a class="markdownIt-Anchor" href="#抢票demo"></a> 抢票demo</h3><p>写法一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟抢票软件的原理：</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Lock,Process</span><br><span class="line"><span class="keyword">import</span> json,os,time,random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span>               </span><br><span class="line">    <span class="comment">#查票功能实现并行访问</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'db.txt'</span>,<span class="string">'rt'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic=json.load(f)</span><br><span class="line">        print(<span class="string">'%s 查看余票数为 %s'</span>%(os.getpid(),dic[<span class="string">'count'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span>               </span><br><span class="line">    <span class="comment">#购票因为牵涉到对后台数据的修改，所以加互斥锁目的是逐一进行访问修改，以免数据错乱</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'db.txt'</span>, <span class="string">'rt'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">'count'</span>] &gt;<span class="number">0</span>:</span><br><span class="line">        <span class="comment">#有票</span></span><br><span class="line">        dic[<span class="string">'count'</span>]-=<span class="number">1</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))         </span><br><span class="line">        <span class="comment">#在购票时，模拟网络延迟...</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'db.txt'</span>, <span class="string">'wt'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(dic,f)</span><br><span class="line">        print(<span class="string">'%s 购票成功'</span>%os.getpid())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'%s 没有余票'</span>%os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(mutex)</span>:</span></span><br><span class="line">    <span class="comment">#查看（并行访问）</span></span><br><span class="line">    check()</span><br><span class="line">    <span class="comment">#抢票（加入互斥锁，实现串行访问，先到先得原则）</span></span><br><span class="line">    mutex.acquire()</span><br><span class="line">    get()</span><br><span class="line">    mutex.release() <span class="comment">#第一个购买完成后，解锁，后续进入继续购买</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">     mutex=Lock()   <span class="comment">#调用Lock类拿到一个对象</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">         p=Process(target=task,args=(mutex,))</span><br><span class="line">         p.start()</span><br></pre></td></tr></table></figure><p>写法二:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 火车票</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Lock</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ticket'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line">    print(<span class="string">'余票: %s'</span>%dic[<span class="string">'ticket'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_ticket</span><span class="params">(i,lock)</span>:</span></span><br><span class="line">    lock.acquire() <span class="comment">#拿钥匙进门</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ticket'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">'ticket'</span>] &gt; <span class="number">0</span> :</span><br><span class="line">        dic[<span class="string">'ticket'</span>] -= <span class="number">1</span></span><br><span class="line">        print(<span class="string">'\033[32m%s买到票了\033[0m'</span>%i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'\033[31m%s没买到票\033[0m'</span>%i)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ticket'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(dic,f)</span><br><span class="line">    lock.release()      <span class="comment"># 还钥匙</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        p = Process(target=show,args=(i,))</span><br><span class="line">        p.start()</span><br><span class="line">    lock = Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        p = Process(target=buy_ticket, args=(i,lock))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><h2 id="进程间的通信"><a class="markdownIt-Anchor" href="#进程间的通信"></a> 进程间的通信**</h2><blockquote><p>用一块儿共享的内存==&gt;实现进程间的共享</p></blockquote><p>特点:</p><ul><li>一定是内存空间</li><li>能够自动帮忙处理锁的问题</li></ul><p>实现进程间的通讯（IPC）的方式有很多种，如：管道(Pipe)，消息队列(Queue: == PIPE+锁（队列）)，共享内存，信号，信号量，套接字</p><table><thead><tr><th>管道</th><th>消息队列</th><th>共享内存</th><th></th></tr></thead><tbody><tr><td>开辟空间</td><td>内存</td><td>内存</td><td>内存</td></tr><tr><td>读写方式</td><td>两端读写[双向/单向]</td><td>先进先出</td><td>覆盖之前的内容</td></tr><tr><td>效率</td><td>一般</td><td>一般</td><td>较高</td></tr><tr><td>应用</td><td>多用于父子进程</td><td>广泛灵活</td><td>需要注意互斥</td></tr></tbody></table><p>注意：<br>1.队列占用的是内存空间<br>2.不应该往队列中放大数据，应该只存放数据量较小的精简的内容</p><h2 id="生产者消费者模型"><a class="markdownIt-Anchor" href="#生产者消费者模型"></a> <strong>生产者消费者模型</strong></h2><blockquote><p>生产者：比喻的是程序中负责产生数据的任务<br>消费者：比喻的是程序中负责处理数据的任务</p><p>生产者———&gt;共享的介质(队列)&lt;————消费者</p></blockquote><p>Q:作用是什么?<br>A: 实现生产者与消费者的解耦和，生产者可以不停的生产，消费者也可以不停的消费从而平衡了生产者的生产能力与消费者消费能力，提升了而整体运行的效率</p><p>Q:什么时候用?<br>A:当我们程序中存在明显的两类任务，一类是负责产生数据，一类是负责处理数据，此时就应该考虑使用生产者消费者模型来提升程序的效率</p><h2 id="多进程中的join"><a class="markdownIt-Anchor" href="#多进程中的join"></a> <strong>多进程中的join()</strong></h2><p><em><strong>在进程中可以阻塞主进程的执行, 直到等待子线程全部完成之后, 才继续运行主线程后面的代码</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(num)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(num)</span><br><span class="line"><span class="comment">#定义一个用来装子线程的列表</span></span><br><span class="line">threads = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    <span class="comment">#target 指定子线程要执行的funtion, args 指定该funtion需要传入的参数</span></span><br><span class="line">    thread = threading.Thread(target = test, args = [i])</span><br><span class="line">    <span class="comment">#上面的 thread 是一个个参数i都不同的线程, 现在把它一个个装进列表 threads 里面</span></span><br><span class="line">    threads.append(thread)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">    <span class="comment">#for 循环执行 threads 列表里面的全部线程, 没有用 join()线程是无序执行的,</span></span><br><span class="line">    <span class="comment"># 就连最后一句print('end')可能比所有子线程都要先执行</span></span><br><span class="line">    i.start()</span><br><span class="line">print(<span class="string">'end'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>将其修改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tsreads:</span><br><span class="line">    i.start()</span><br><span class="line">    i.join()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">[Finished in 5.2s]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>每个都会隔一秒的进行输出,因为for循环也是主进程操作,也会被阻塞直到子进程完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tsreads:</span><br><span class="line">    i.start()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">i.join()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">[Finished in 1.2s]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>在这里看一看出来, join()还是阻挡了主线程的执行, 让所有的子线程执行完毕之后再执行, 而且前面的子线程的执行都是无序地执行完毕了</p><p>△.一般来说，join函数应该在所有的start函数之后(即一般情况下，让所有进程都执行，然后等待子进程结束，再进行下面的主进程)。</p><h2 id="python多进程之manager"><a class="markdownIt-Anchor" href="#python多进程之manager"></a> Python多进程之Manager</h2><blockquote><p>可以用来进程间共享对象、资源、变量===&gt;使用公共内存</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Manager</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 这里实现的就是多个进程之间共享内存，并修改数据</span></span><br><span class="line"><span class="comment"># 这里不需要加锁，因为manager已经默认给你加锁了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(d,l)</span>:</span></span><br><span class="line">    d[<span class="number">1</span>] = <span class="string">'1'</span></span><br><span class="line">    d[<span class="string">'2'</span>] = <span class="number">2</span></span><br><span class="line">    d[<span class="number">0.25</span>] = <span class="keyword">None</span></span><br><span class="line">    l.append(os.getpid())</span><br><span class="line">    print(l)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">with</span> Manager() <span class="keyword">as</span> manager:</span><br><span class="line">        d = manager.dict()  <span class="comment">#生成一个字典</span></span><br><span class="line">        l = manager.list(range(<span class="number">5</span>))  <span class="comment">#生成一个列表</span></span><br><span class="line">        p_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            p = Process(target=f,args=(d,l))</span><br><span class="line">            p.start()</span><br><span class="line">            p_list.append(p)</span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> p_list:</span><br><span class="line">            res.join()</span><br><span class="line">        print(d)</span><br><span class="line">        print(l)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock, Value</span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, salary)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.salary = Value(<span class="string">'i'</span>, salary)</span><br><span class="line">        self.data = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increase</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.salary.value += <span class="number">100</span></span><br><span class="line">        self.data.append(self.salary.value)</span><br><span class="line">        print(self.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPay</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name + <span class="string">':'</span> + str(self.salary.value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyManager</span><span class="params">(BaseManager)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    继承即可</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Manager</span><span class="params">()</span>:</span></span><br><span class="line">    m = MyManager()</span><br><span class="line">    m.start()</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">MyManager.register(<span class="string">'Employee'</span>, Employee)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(em, lock)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        em.increase()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manager = Manager()</span><br><span class="line">    em = manager.Employee(<span class="string">'zhangsan'</span>, <span class="number">1000</span>)</span><br><span class="line">    lock = Lock()</span><br><span class="line">    proces = [Process(target=func, args=(em, lock)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> proces:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> proces:</span><br><span class="line">        p.join()</span><br><span class="line">    print(em.getPay())</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br><span class="line"><span class="string">[1100]</span></span><br><span class="line"><span class="string">[1100, 1200]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600, 1700]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]</span></span><br><span class="line"><span class="string">zhangsan:2000</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="queue"><a class="markdownIt-Anchor" href="#queue"></a> Queue</h2><p>其实就是一个队列（FIFO），两个进程可以通过传入的参数q，来获得里面的内容，从而数据共享、通信。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入Queue,Process</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue,Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="comment">#写入进程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wp</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"%s开始写入："</span>%os.getpid)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"WANG"</span>:</span><br><span class="line">        <span class="comment">#将信息写入队列</span></span><br><span class="line">        q.put(i)</span><br><span class="line">        print(i)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取进程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rd</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"%s开始读取"</span>%os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            <span class="comment">#从队列读取信息</span></span><br><span class="line">            print(<span class="string">"read to %s"</span>%q.get())</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#创建队列</span></span><br><span class="line">    q = Queue()</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#创建写入进程</span></span><br><span class="line">    w = Process(target=wp,args=(q,))</span><br><span class="line">    <span class="comment">#启动写入进程</span></span><br><span class="line">    w.start()</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#创建读取进程</span></span><br><span class="line">    r = Process(target=rd,args=(q,))</span><br><span class="line">    <span class="comment">#启动读取进程</span></span><br><span class="line">    r.start()</span><br></pre></td></tr></table></figure><h2 id="pipe管道"><a class="markdownIt-Anchor" href="#pipe管道"></a> Pipe管道</h2><blockquote><p>和队列的功能差不多，实现两个进程之间数据的传递，只不过是FILO的:</p></blockquote><p><img src="/2019/10/06/Python多进程/Python%E5%A4%9A%E8%BF%9B%E7%A8%8B%5Cpipe.png" alt="pipe"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''管道pipe'''</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(conn)</span>:</span></span><br><span class="line">    conn.send(<span class="string">'hello'</span>)  <span class="comment">#发送hello</span></span><br><span class="line">    print(conn.recv())  <span class="comment">#收到牛逼</span></span><br><span class="line">    conn.close()        <span class="comment">#关闭</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parent_conn, child_conn = Pipe()    <span class="comment">#管道会产生两个返回值</span></span><br><span class="line">    p = Process(target=f, args=(child_conn,))   <span class="comment">#创建一个子进程</span></span><br><span class="line">    p.start()</span><br><span class="line">    print(parent_conn.recv())  <span class="comment">#收到'hello'"</span></span><br><span class="line">    parent_conn.send(<span class="string">'牛逼'</span>)  <span class="comment">#发送牛逼</span></span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h2 id="借鉴"><a class="markdownIt-Anchor" href="#借鉴"></a> 借鉴:</h2><p><a href="https://www.cnblogs.com/yangzhizong/p/9301530.html" target="_blank" rel="noopener">Python守护进程、进程互斥锁、进程间通信ICP（Queue队列）、生产者消费者模型</a></p><p><a href="https://blog.csdn.net/weixin_37111106/article/details/85120706" target="_blank" rel="noopener">多进程 之 join()</a></p><p><a href="https://blog.csdn.net/woainiwss/article/details/52013810" target="_blank" rel="noopener">Java 多线程中两个线程交替执行</a></p><p><a href="https://blog.csdn.net/u011865919/article/details/94722802" target="_blank" rel="noopener">Python多进程消息队列实现进程间通讯</a></p><p><a href="https://www.cnblogs.com/Fantinai/p/8433136.html" target="_blank" rel="noopener">Queue详细内容</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python多进程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#python多进程&quot;&gt;&lt;/a&gt; Python多进程&lt;/h1&gt;
&lt;h2 id=&quot;守护进程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#守护进程
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Openmv使用</title>
    <link href="https://nymrli.top/2019/10/06/Openmv%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2019/10/06/Openmv使用/</id>
    <published>2019-10-06T01:45:28.000Z</published>
    <updated>2019-10-06T02:03:09.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="openmv使用"><a class="markdownIt-Anchor" href="#openmv使用"></a> Openmv使用</h1><h2 id="下载openmv-ide"><a class="markdownIt-Anchor" href="#下载openmv-ide"></a> 下载Openmv IDE</h2><ul><li><a href="https://openmv.io/pages/download" target="_blank" rel="noopener">Openmv官网</a></li><li><a href="https://singtown.com/openmv-download/" target="_blank" rel="noopener">中国代理——星瞳</a></li><li><a href="https://github.com/openmv/openmv/releases" target="_blank" rel="noopener">Github_release</a></li></ul><p>推荐下载星瞳的，这个是中文版的，并且其他两个下载非常慢。</p><h2 id="demo例程"><a class="markdownIt-Anchor" href="#demo例程"></a> Demo例程：</h2><blockquote><p>openmv虽然比较贵,但是它的功能非常强大,已经提供了相当多的例程了。具体例程可以去星瞳的官网上查看，说明非常详细。</p></blockquote><p>在此，我只介绍点我们这次需要用到的功能。</p><p>我使用的是OPENMV-H7 R1，芯片是STM32H743，镜头为IR 1080P 2.8mm</p><p>Hello World</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hello World Example</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Welcome to the OpenMV IDE! Click on the green run arrow button below to run the script!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line">sensor.reset()                      <span class="comment"># Reset and initialize the sensor.</span></span><br><span class="line">sensor.set_pixformat(sensor.RGB565) <span class="comment"># Set pixel format to RGB565 (or GRAYSCALE)</span></span><br><span class="line">sensor.set_framesize(sensor.QVGA)   <span class="comment"># Set frame size to QVGA (320x240)</span></span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)     <span class="comment"># Wait for settings take effect.</span></span><br><span class="line">clock = time.clock()                <span class="comment"># Create a clock object to track the FPS.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    clock.tick()                    <span class="comment"># Update the FPS clock.</span></span><br><span class="line">    img = sensor.snapshot()         <span class="comment"># Take a picture and return the image.</span></span><br><span class="line">    print(clock.fps())              <span class="comment"># Note: OpenMV Cam runs about half as fast when connected</span></span><br><span class="line">                                    <span class="comment"># to the IDE. The FPS should increase once disconnected.</span></span><br></pre></td></tr></table></figure><h3 id="二维码识别"><a class="markdownIt-Anchor" href="#二维码识别"></a> 二维码识别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># QRCode Example</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example shows the power of the OpenMV Cam to detect QR Codes</span></span><br><span class="line"><span class="comment"># using lens correction (see the qrcodes_with_lens_corr.py script for higher performance).</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line">sensor.reset()</span><br><span class="line">sensor.set_pixformat(sensor.RGB565)</span><br><span class="line">sensor.set_framesize(sensor.QVGA)</span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)</span><br><span class="line">sensor.set_auto_gain(<span class="keyword">False</span>) <span class="comment"># must turn this off to prevent image washout...</span></span><br><span class="line">clock = time.clock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line">    img = sensor.snapshot()</span><br><span class="line">    img.lens_corr(<span class="number">1.8</span>) <span class="comment"># strength of 1.8 is good for the 2.8mm lens.</span></span><br><span class="line">    <span class="keyword">for</span> code <span class="keyword">in</span> img.find_qrcodes():</span><br><span class="line">        img.draw_rectangle(code.rect(), color = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        print(code)</span><br><span class="line">    print(clock.fps())</span><br></pre></td></tr></table></figure><p>代码是用python编写的，文件系统为microPython，具有Cpython解释器翻译成机器码。需要脱机运行的文件命名为main.py即可(具体详情见microPython规范)。可放于flash或者32GB以下的SD卡中，SD卡读取优先级高于Flash，且flash内容容易丢失，且擦写次数有限，建议使用SD卡。</p><p>主要需要用的库：</p><ul><li>sersor:通过这个对象可以控制摄像头及相关配置；</li><li>image：处理图像的功能函数都在这个库里<ul><li>sensor.snapshot()会返回一个&lt;class ‘Image’&gt;</li></ul></li><li>time：跟Python自带的time模块不同，这个是专门用来记录摄像头用时的</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;openmv使用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#openmv使用&quot;&gt;&lt;/a&gt; Openmv使用&lt;/h1&gt;
&lt;h2 id=&quot;下载openmv-ide&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;
      
    
    </summary>
    
    
      <category term="嵌入式" scheme="https://nymrli.top/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>TD-afterstate</title>
    <link href="https://nymrli.top/2019/10/03/TD-afterstate/"/>
    <id>https://nymrli.top/2019/10/03/TD-afterstate/</id>
    <published>2019-10-03T11:28:36.000Z</published>
    <updated>2019-10-03T11:30:03.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="td-afterstate"><a class="markdownIt-Anchor" href="#td-afterstate"></a> TD-afterstate</h1><blockquote><p>afterstae: 当前执行一个动作后的状态，可以理解为中间态</p><p>是处理问题的一个改动,一种思想</p></blockquote><p>以俄罗斯方块为例:</p><p>状态是由当前的局面和一个随机方块组成，执行一个下落动作之后会产生一个局面就称为afterstate，即动作结束后不能进行新的动作（没有新方块）的状态。</p><p>中间态和下一个随机方块构成了下一个状态</p><p>对于没有这种随机性的问题，afterstate就是next state</p><p>td做预测，afterstate做控制</p><p><img src="/2019/10/03/TD-afterstate/afterstate.png" alt="afterstate"></p><h2 id="更多"><a class="markdownIt-Anchor" href="#更多"></a> 更多:</h2><p><a href="https://zhuanlan.zhihu.com/p/27591256" target="_blank" rel="noopener">强化学习经典入门书的读书笔记系列–第六篇Temporal-Difference</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;td-afterstate&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#td-afterstate&quot;&gt;&lt;/a&gt; TD-afterstate&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;afterstae: 当前执行一个动作后的状态，可以
      
    
    </summary>
    
    
      <category term="RL" scheme="https://nymrli.top/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>git命令详解</title>
    <link href="https://nymrli.top/2019/09/29/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://nymrli.top/2019/09/29/git命令详解/</id>
    <published>2019-09-29T09:39:07.000Z</published>
    <updated>2019-10-06T14:29:14.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git命令详解"><a class="markdownIt-Anchor" href="#git命令详解"></a> git命令详解</h1><h2 id="自己的仓库管理"><a class="markdownIt-Anchor" href="#自己的仓库管理"></a> 自己的仓库管理：</h2><p><code>git add &lt;filename&gt;</code></p><ul><li>将文件添加到暂存区中  (其中git add.可以将当前目录的子目录文件都添加到暂存区中)</li></ul><p><code>git commit -m &quot;...&quot;:</code></p><ul><li>保存仓库的历史记录,其中 -m &quot;…&quot;提交信息(概述)</li></ul><p><code>git config --global user.name &quot;...&quot;</code>、<code>git config --global user.email &quot;...&quot;</code>:</p><ul><li>配置提交作者信息</li></ul><p><code>git log</code>:</p><ul><li><strong>查看</strong>提交日志(当前状态为终点) 会产生版本库里一系列单独提交的历史</li></ul><p><code>git diff ID1/ID2</code>:</p><ul><li>查看版本差异</li></ul><p><code>git mv 新名字,旧名字</code></p><ul><li>重命名:</li></ul><p><code>git branch -a [-v]</code></p><ul><li>分支一展表, -r 查看远程git服务器上的分支</li></ul><p><code>git checkout 分支名</code>:</p><ul><li>切换分支</li><li>-b创建,且切换到新建分支 等价于<code>git branch 分支名</code> + <code>git checkout 分支名</code></li></ul><p><code>git branch -d [分支名称]</code></p><ul><li>删除一个分支, -d选项只能删除已经参与过合并的分支，对于未参与合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项、</li></ul><p><code>git rest --head ID</code> :</p><ul><li>退回之前提交版本</li></ul><p><code>git status</code>  :</p><ul><li>查看仓库当前状态；</li></ul><p><code>git reflog</code>  :</p><ul><li>查看当前仓库的操作日志</li></ul><p><code>git rebase -i</code>:</p><ul><li>压缩历史(如果出现拼写错误时需要): <code>git rebase -i HEAD~2</code></li></ul><p><code>git merge --no-f 分支名</code>  :</p><ul><li>合并分支</li></ul><p><code>git remote set-url origin https://github.com/Freedomisgood/NjuptGo.git</code></p><ul><li>修改仓库指定新的远程仓库</li></ul><h2 id="远程仓库"><a class="markdownIt-Anchor" href="#远程仓库"></a> 远程仓库</h2><p>如果本地没有仓库，则clone:<br><code>git clone http://github.com/xxx/yyy.git</code></p><p>在本地增加远程仓库信息：<code>git remote add apollo3d http://github.com/xxx/yyy.git</code>,此时远程库名为origin、apollo3d</p><p>删除远程分支<code>git push origin --delete kickof</code></p><p>git push代码到远程新分支<br><code>git push origin master:my_remote_new_branch</code></p><h3 id="git-pull"><a class="markdownIt-Anchor" href="#git-pull"></a> git pull</h3><p>如果本地有仓库，则拉取更新命令为:<br><code>git pull &lt;远程库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p><p>比如，取回远程库中的online分支，与本地的online分支进行merge，要写成：</p><p>git pull origin online:online<br>如果是要与本地当前分支merge，则冒号后面的&lt;本地分支名&gt;可以不写</p><p><code>git pull origin online</code><br>通常，git会将本地库分支与远程分支之间建立一种追踪关系。比如，在git clone的时候，所有本地分支默认与远程库的同名分支建立追踪关系。也就是说，本地的master分支自动追踪origin/master分支。因此，如果当前处于本地online分支上，并且本地online分支与远程的online分支有追踪关系，那么远程的分支名可以省略：</p><p>比如，取回远程库中的online分支，与本地的online分支进行merge，要写成：</p><p><code>git pull origin</code></p><p>其实，git pull 命令等同于先做了git fetch ，再做了git merge。即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin online</span><br><span class="line">git checkout online</span><br><span class="line">git merge origin/online</span><br></pre></td></tr></table></figure><h3 id="git-push"><a class="markdownIt-Anchor" href="#git-push"></a> git push</h3><h4 id="二推送本地分支到远程仓库"><a class="markdownIt-Anchor" href="#二推送本地分支到远程仓库"></a> 二.推送本地分支到远程仓库</h4><p>（一）.创建本地分支<code>git checkout -b 新分支名</code><br>（二）.推送本地分支到远程仓库<code>git push --set-upstream origin 分支名</code></p><h4 id="三-将远程git仓库里的指定分支拉取到本地本地不存在的分支"><a class="markdownIt-Anchor" href="#三-将远程git仓库里的指定分支拉取到本地本地不存在的分支"></a> 三、将远程git仓库里的指定分支拉取到本地（本地不存在的分支）</h4><p><code>git checkout -b 本地分支名 origin/远程分支名</code></p><h2 id="修改了gitignore生效指令"><a class="markdownIt-Anchor" href="#修改了gitignore生效指令"></a> 修改了.gitignore生效指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached . // 删除本地缓存</span><br><span class="line">git add . // 添加要提交的文件</span><br><span class="line">git commit -m &apos;update .gitignore&apos; // 更新本地的缓存</span><br></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li>Git远程操作详解:<a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/06/git_remote.html</a></li><li>使用git将项目上传到github（最简单方法）:<a href="https://www.cnblogs.com/cxk1995/p/5800196.html" target="_blank" rel="noopener">https://www.cnblogs.com/cxk1995/p/5800196.html</a></li><li>&lt;&lt;Git入门与实践&gt;&gt;:日本</li><li><a href="https://blog.csdn.net/yxlshk/article/details/79944535" target="_blank" rel="noopener">Git恢复之前版本的两种方法reset、revert（图文详解）</a></li></ul><h2 id="采坑记录"><a class="markdownIt-Anchor" href="#采坑记录"></a> 采坑记录</h2><p>Q: 不小心<code>git reset --hard HEAD^</code>导致工作区文件全没了</p><p>A:解决方案:</p><ul><li><p><a href="https://stackoverflow.com/questions/7374069/undo-git-reset-hard-with-uncommitted-files-in-the-staging-area" target="_blank" rel="noopener">Undo git reset --hard with uncommitted files in the staging area</a></p></li><li><p><a href="https://blog.csdn.net/w47_csdn/article/details/82701947" target="_blank" rel="noopener">恢复git reset --hard删除的文件</a></p><p>根据这篇博客操作的结果<code>git cat-file -p ID &gt; a.md</code>是个对比文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">100644 blob cdca566953e3b7b56897b2fa6995129170403212Q-learning.ipynb</span><br><span class="line">100644 blob 47735fcc505315aa61583dad9dc4facb7c00fbdcQ-learning.py</span><br><span class="line">100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391__init__.py</span><br><span class="line">040000 tree db76babbe2f2df4566b607e732c0c835418f9a83__pycache__</span><br><span class="line">100644 blob debb716313cfbf28c055e89ce4a625a1d7801f5bagents.py</span><br><span class="line">100644 blob 30ec43da68efe5eb5e8e31cb431fea981e256b6aapproximator.py</span><br><span class="line">100644 blob 1e8ac820d62943d16fa56fa981d72e27239527d9core.py</span><br><span class="line">100644 blob a0cfa7ac7f9f15a658ace5c5c7c5bbe73f680502myringworld.py</span><br><span class="line">100644 blob 69cb25ba30f4350454a0e731a70890cbf2530217ringworld.py</span><br><span class="line">100644 blob 5638e012cb1b68783e6cdf45d2e769cca96e591futils.py</span><br><span class="line">100644 blob 96aa662c03d991487e6da8120884b6f647be7202viewer.py</span><br></pre></td></tr></table></figure></li><li><p>△.<a href="https://blog.csdn.net/lijiafa/article/details/78275936" target="_blank" rel="noopener">关于git reset --hard导致文件丢失的血的教训</a>——亲测有效</p><ul><li>解决add了但没有commit的文件，可以用上述方法找回</li></ul></li></ul><p>分支git branch参数区别</p><p><img src="/2019/09/29/git命令详解/branch.jpg" alt="branch"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git命令详解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#git命令详解&quot;&gt;&lt;/a&gt; git命令详解&lt;/h1&gt;
&lt;h2 id=&quot;自己的仓库管理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#自己的仓库管理
      
    
    </summary>
    
    
      <category term="git" scheme="https://nymrli.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>numpy使用记录</title>
    <link href="https://nymrli.top/2019/09/28/numpy%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://nymrli.top/2019/09/28/numpy使用记录/</id>
    <published>2019-09-28T03:13:29.000Z</published>
    <updated>2019-09-28T10:16:49.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="numpy使用记录"><a class="markdownIt-Anchor" href="#numpy使用记录"></a> Numpy使用记录</h1><h2 id="numpy中的random"><a class="markdownIt-Anchor" href="#numpy中的random"></a> numpy中的random</h2><p>numpy.random.choice(a, size=None, replace=True, p=None)</p><ul><li>a : 如果是一维数组，就表示从这个一维数组中随机采样；如果是int型，就表示从0到a-1这个序列中随机采样。</li><li>size : 采样结果的数量，默认为1.可以是整数，表示要采样的数量；也可以为tuple，如(m, n, k)，则要采样的数量为m * n * k，size为(m, n, k)</li><li>replace : boolean型，采样的样本是否要更换？这个地方我不太理解，测了一下发现replace指定为True时，采样的元素会有重复；当replace指定为False时，采样不会重复。</li><li>p : 一个一维数组，制定了a中每个元素采样的概率，若为默认的None，则a中每个元素被采样的概率相同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">choice(a[, size, replace, p])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(<span class="number">5</span>, <span class="number">3</span>, replace=<span class="keyword">False</span>)</span><br><span class="line">array([<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#This is equivalent to np.random.permutation(np.arange(5))[:3]</span></span><br><span class="line"><span class="comment"># Generate a non-uniform random sample from np.arange(5) of size 3 without replacement:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(<span class="number">5</span>, <span class="number">3</span>, replace=<span class="keyword">False</span>, p=[<span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0.3</span>, <span class="number">0.6</span>, <span class="number">0</span>])</span><br><span class="line">array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>np.random.randint</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">2</span>,<span class="number">5</span>,size=(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 函数原型randint(low[, high, size])</span></span><br><span class="line"><span class="comment"># - 返回随机的整数，位于半开区间 [low, high)。</span></span><br></pre></td></tr></table></figure><p>np.random.rand</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.rand(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">array([[ <span class="number">0.14022471</span>,  <span class="number">0.96360618</span>],  <span class="comment">#random</span></span><br><span class="line">       [ <span class="number">0.37601032</span>,  <span class="number">0.25528411</span>],  <span class="comment">#random</span></span><br><span class="line">       [ <span class="number">0.49313049</span>,  <span class="number">0.94909878</span>]]) <span class="comment">#random</span></span><br><span class="line"><span class="comment"># 跟random_sample([size])、random([size])和ranf([size])一样</span></span><br></pre></td></tr></table></figure><h2 id="array操作"><a class="markdownIt-Anchor" href="#array操作"></a> array操作</h2><blockquote><p>广播啥的就不介绍了，主要是介绍一点函数方法的使用</p></blockquote><p><strong>array、asarray、asanyarray</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(a)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">c = np.array(a)</span><br><span class="line">c[<span class="number">1</span>]=<span class="number">3</span></span><br><span class="line">print(a,c)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] [<span class="number">1</span> <span class="number">3</span> <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">b = np.asarray(a)</span><br><span class="line">b[<span class="number">1</span>]=<span class="number">3</span></span><br><span class="line">print(a,b)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">3</span> <span class="number">3</span>] [<span class="number">1</span> <span class="number">3</span> <span class="number">3</span>]</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>array和asarray的不同在于array对目标做一个拷贝，而asarray不会</li><li>np.asanyarray 会返回 ndarray 或者ndarray的子类，而np.asarray 只返回 ndarray.</li></ul><p>np.where</p><blockquote><p>这个函数非常有用，非常香，但是他的参数需要narray</p></blockquote><p>np.where(cond,x,y)：满足条件（cond）输出x，不满足输出y</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;numpy使用记录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#numpy使用记录&quot;&gt;&lt;/a&gt; Numpy使用记录&lt;/h1&gt;
&lt;h2 id=&quot;numpy中的random&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python random</title>
    <link href="https://nymrli.top/2019/09/27/Python-random/"/>
    <id>https://nymrli.top/2019/09/27/Python-random/</id>
    <published>2019-09-27T14:11:59.000Z</published>
    <updated>2019-09-29T09:01:11.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-random"><a class="markdownIt-Anchor" href="#python-random"></a> Python random</h1><blockquote><p>老是忘记random中每个函数之间的区别，而且常常跟numpy里的random也经常搞混，因此还是写篇文章记一下吧。</p></blockquote><h2 id="random模块"><a class="markdownIt-Anchor" href="#random模块"></a> random模块</h2><h3 id="choice和sample"><a class="markdownIt-Anchor" href="#choice和sample"></a> choice和sample</h3><p>python中random.choice()可以从给定的可迭代对象中随机挑选出一个。</p><p>而python中random.sample()方法则可以随机地从给定的可迭代对象中提取出N个<strong>不同</strong>的元素，<strong>列表的维数没有限制</strong>。（即第二参数给出个数N）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.sample([chr(<span class="number">97</span> + x) <span class="keyword">for</span> x <span class="keyword">in</span> range(int(<span class="number">9</span>))],<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 函数原型sample(self, population, k)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'e'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line">print( random.randint(<span class="number">1</span>,<span class="number">10</span>) )        <span class="comment"># 产生 1 到 10 的一个整数型随机数  </span></span><br><span class="line">print( random.random() )             <span class="comment"># 产生 0 到 1 之间的随机浮点数</span></span><br><span class="line">print( random.uniform(<span class="number">1.1</span>,<span class="number">5.4</span>) )     <span class="comment"># 产生  1.1 到 5.4 之间的随机浮点数，区间可以不是整数</span></span><br><span class="line">print( random.choice(<span class="string">'tomorrow'</span>) )   <span class="comment"># 从序列中随机选取一个元素</span></span><br><span class="line"><span class="comment"># 函数原型def choice(self, seq)</span></span><br><span class="line">print( random.randrange(<span class="number">1</span>,<span class="number">100</span>,<span class="number">2</span>) )   <span class="comment"># 生成从1到100的间隔为2的随机整数</span></span><br></pre></td></tr></table></figure><h3 id="shuffle"><a class="markdownIt-Anchor" href="#shuffle"></a> shuffle</h3><p>正如字面所示，也就是打乱的意思</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]                <span class="comment"># 将序列a中的元素顺序打乱</span></span><br><span class="line">random.shuffle(a)</span><br><span class="line">print(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h2 id="numpy中的random"><a class="markdownIt-Anchor" href="#numpy中的random"></a> numpy中的random</h2><p>numpy.random.choice(a, size=None, replace=True, p=None)</p><ul><li>a : 如果是一维数组，就表示从这个一维数组中随机采样；如果是int型，就表示从0到a-1这个序列中随机采样。</li><li>size : 采样结果的数量，默认为1.可以是整数，表示要采样的数量；也可以为tuple，如(m, n, k)，则要采样的数量为m * n * k，size为(m, n, k)</li><li>replace : boolean型，采样的样本是否要更换？这个地方我不太理解，测了一下发现replace指定为True时，采样的元素会有重复；当replace指定为False时，采样不会重复。</li><li>p : 一个一维数组，制定了a中每个元素采样的概率，若为默认的None，则a中每个元素被采样的概率相同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">choice(a[, size, replace, p])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(<span class="number">5</span>, <span class="number">3</span>, replace=<span class="keyword">False</span>)</span><br><span class="line">array([<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#This is equivalent to np.random.permutation(np.arange(5))[:3]</span></span><br><span class="line"><span class="comment"># Generate a non-uniform random sample from np.arange(5) of size 3 without replacement:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(<span class="number">5</span>, <span class="number">3</span>, replace=<span class="keyword">False</span>, p=[<span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0.3</span>, <span class="number">0.6</span>, <span class="number">0</span>])</span><br><span class="line">array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>np.random.randint</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">2</span>,<span class="number">5</span>,size=(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 函数原型randint(low[, high, size])</span></span><br><span class="line"><span class="comment"># - 返回随机的整数，位于半开区间 [low, high)。</span></span><br></pre></td></tr></table></figure><p>np.random.rand</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.rand(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">array([[ <span class="number">0.14022471</span>,  <span class="number">0.96360618</span>],  <span class="comment">#random</span></span><br><span class="line">       [ <span class="number">0.37601032</span>,  <span class="number">0.25528411</span>],  <span class="comment">#random</span></span><br><span class="line">       [ <span class="number">0.49313049</span>,  <span class="number">0.94909878</span>]]) <span class="comment">#random</span></span><br><span class="line"><span class="comment"># 跟random_sample([size])、random([size])和ranf([size])一样</span></span><br></pre></td></tr></table></figure><p>▲需要注意的是np.random.randint和random.randint的区间不同，前者左闭右开()，后者左右都是闭区间[]▲</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-random&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#python-random&quot;&gt;&lt;/a&gt; Python random&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;老是忘记random中每个函数之间的区别，而且常常跟
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>OpenAI Gym使用、rendering画图</title>
    <link href="https://nymrli.top/2019/09/26/OpenAI-Gym%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2019/09/26/OpenAI-Gym使用/</id>
    <published>2019-09-26T09:53:27.000Z</published>
    <updated>2019-10-07T10:01:00.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="openai-gym使用-rendering画图"><a class="markdownIt-Anchor" href="#openai-gym使用-rendering画图"></a> OpenAI Gym使用、rendering画图</h1><blockquote><p>gym开源库：包含一个测试问题集，每个问题成为环境（environment），可以用于自己的RL算法开发。这些环境有共享的接口，允许用户设计通用的算法。其包含了deep mind 使用的Atari游戏测试床。</p></blockquote><p>在强化学习中有2个基本概念，一个是环境（environment），称为外部世界，另一个为智能体agent（<strong>写的算法</strong>）。agent发送action至environment，environment返回观察和回报。</p><p><a href="http://gym.openai.com/docs/" target="_blank" rel="noopener">Gym官方文档</a></p><h2 id="hello-gym"><a class="markdownIt-Anchor" href="#hello-gym"></a> Hello gym</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="comment"># 创建一个小车倒立摆模型</span></span><br><span class="line">env = gym.make(‘CartPole-v0’)</span><br><span class="line"><span class="comment"># 初始化环境</span></span><br><span class="line">env.reset()</span><br><span class="line"><span class="comment"># 刷新当前环境，并显示</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    env.render()</span><br><span class="line">    env.step(env.action_space.sample()) <span class="comment"># take a random action</span></span><br></pre></td></tr></table></figure><p><img src="https://gym.openai.com/assets/docs/aeloop-138c89d44114492fd02822303e6b4b07213010bb14ca5856d2d49d6b62d88e53.svg" alt=""></p><p>设计理念图,一个环境的step函数返回需要的信息，有4种返回值</p><ul><li><strong>observation</strong></li><li><strong>reward</strong></li><li><strong>done</strong> :判断是否到了重新设定(<em>reset</em>)环境</li><li><strong>info</strong> :用于调试的诊断信息，有时也用于学习，但智能体（agent ）在正式的评价中不允许使用该信息进行学习。</li></ul><p>该进程通过调用<strong>reset()<strong>来启动，它返回一个初始</strong>observation</strong>。 所以之前代码的更恰当的方法是遵守<strong>done</strong>的标志：</p><h2 id="空间spaces"><a class="markdownIt-Anchor" href="#空间spaces"></a> 空间（Spaces）</h2><p>在上面的例子中，已经从环境的动作空间中抽取随机动作。但这些行动究竟是什么呢？ 每个环境都带有<strong>action_space</strong> 和<strong>observation_space</strong>对象。这些属性是<a href="https://github.com/openai/gym/blob/master/gym/core.py" target="_blank" rel="noopener">Space</a>类型，它们描述格式化的有效的行动和观察。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line">env = gym.make(<span class="string">'CartPole-v0'</span>)</span><br><span class="line"><span class="comment"># 离散空间允许固定范围的非负数，因此在这种情况下，有效的动作是0或1. </span></span><br><span class="line">print(env.action_space)</span><br><span class="line"><span class="comment">#&gt; Discrete(2)</span></span><br><span class="line">print(env.observation_space)</span><br><span class="line"><span class="comment">#&gt; Box(4,)</span></span><br></pre></td></tr></table></figure><p>Box空间表示一个n维box，所以有效的观察将是4个数字的数组。 也可以检查Box的范围：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(env.observation_space.high)</span><br><span class="line"><span class="comment">#&gt; array([ 2.4       ,         inf,  0.20943951,         inf])</span></span><br><span class="line">print(env.observation_space.low)</span><br><span class="line"><span class="comment">#&gt; array([-2.4       ,        -inf, -0.20943951,        -inf])</span></span><br></pre></td></tr></table></figure><p>这种内省可以帮助编写适用于许多不同环境的通用代码。box和discrete是最常见的空间。你可以从一个空间中取样，或者检查某物是否属于它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gym <span class="keyword">import</span> spaces</span><br><span class="line">space = spaces.Discrete(<span class="number">8</span>) <span class="comment"># Set with 8 elements &#123;0, 1, 2, ..., 7&#125;</span></span><br><span class="line">x = space.sample()</span><br><span class="line"><span class="keyword">assert</span> space.contains(x)</span><br><span class="line"><span class="keyword">assert</span> space.n == <span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="envrender画图"><a class="markdownIt-Anchor" href="#envrender画图"></a> Env.render画图</h2><blockquote><p>参考<a href="https://www.jianshu.com/p/b3c4d2b95c58" target="_blank" rel="noopener">Gym 简单画图</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先，导入库文件（包括gym模块和gym中的渲染模块）</span></span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">from</span> gym.envs.classic_control <span class="keyword">import</span> rendering</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们生成一个类，该类继承 gym.Env. 同时，可以添加元数据，改变渲染环境时的参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(gym.Env)</span>:</span></span><br><span class="line">    <span class="comment"># 如果你不想改参数，下面可以不用写</span></span><br><span class="line">    metadata = &#123;</span><br><span class="line">        <span class="string">'render.modes'</span>: [<span class="string">'human'</span>, <span class="string">'rgb_array'</span>],</span><br><span class="line">        <span class="string">'video.frames_per_second'</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 我们在初始函数中定义一个 viewer ，即画板</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.viewer = rendering.Viewer(<span class="number">600</span>, <span class="number">400</span>)   <span class="comment"># 600x400 是画板的长和框</span></span><br><span class="line"><span class="comment"># 继承Env render函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self, mode=<span class="string">'human'</span>, close=False)</span>:</span></span><br><span class="line">        <span class="comment"># 下面就可以定义你要绘画的元素了</span></span><br><span class="line">        line1 = rendering.Line((<span class="number">100</span>, <span class="number">300</span>), (<span class="number">500</span>, <span class="number">300</span>))</span><br><span class="line">        line2 = rendering.Line((<span class="number">100</span>, <span class="number">200</span>), (<span class="number">500</span>, <span class="number">200</span>))</span><br><span class="line">        <span class="comment"># 给元素添加颜色</span></span><br><span class="line">        line1.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        line2.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 把图形元素添加到画板中</span></span><br><span class="line">        self.viewer.add_geom(line1)</span><br><span class="line">        self.viewer.add_geom(line2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.viewer.render(return_rgb_array=mode == <span class="string">'rgb_array'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 最后运行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Test()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        t.render()</span><br></pre></td></tr></table></figure><p><strong>△.值得注意的是，画板的水平方向是 x 轴， 垂直方向是 y 轴， 且原点在左下角</strong></p><h3 id="画个圆"><a class="markdownIt-Anchor" href="#画个圆"></a> <strong>画个圆</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self, mode=<span class="string">'human'</span>, close=False)</span>:</span></span><br><span class="line">    <span class="comment"># 画一个直径为 30 的园</span></span><br><span class="line">    circle = rendering.make_circle(<span class="number">30</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加一个平移操作</span></span><br><span class="line">    circle_transform = rendering.Transform(translation=(<span class="number">100</span>, <span class="number">200</span>))</span><br><span class="line">    <span class="comment"># 让圆添加平移这个属性,</span></span><br><span class="line">    circle.add_attr(circle_transform)</span><br><span class="line">    </span><br><span class="line">    self.viewer.add_geom(circle)</span><br><span class="line">    <span class="keyword">return</span> self.viewer.render(return_rgb_array=mode == <span class="string">'rgb_array'</span>)</span><br></pre></td></tr></table></figure><p>△注意.是圆心在平移</p><h2 id="ringviewr"><a class="markdownIt-Anchor" href="#ringviewr"></a> RingViewr</h2><blockquote><p>研究rings时写的render</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">from</span> gym.envs.classic_control <span class="keyword">import</span> rendering</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ringViewer</span><span class="params">(rendering.Viewer)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    画板,直接继承自rendering.Viewer</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,width, height, display=None)</span>:</span></span><br><span class="line">        super(ringViewer, self).__init__(width, height, display=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pos2loc</span><span class="params">(pos=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        根据位置索引确定画图坐标</span></span><br><span class="line"><span class="string">        :param pos: 位置索引0-9</span></span><br><span class="line"><span class="string">        :return: loc</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSize</span><span class="params">(size)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        设置画圆的半径</span></span><br><span class="line"><span class="string">        :param size:[0-2]</span></span><br><span class="line"><span class="string">        :return: radius</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getColor</span><span class="params">(c=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        根据颜色索引选择圆圈颜色</span></span><br><span class="line"><span class="string">        :param c:</span></span><br><span class="line"><span class="string">        :return: list</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawNewring</span><span class="params">(self, newring:list=None)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        画新生成的圆</span></span><br><span class="line"><span class="string">        :param newring:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(newring)):</span><br><span class="line">            <span class="keyword">if</span> newring[i] != <span class="number">0</span>:</span><br><span class="line">                ring = rendering.make_circle(radius=self.getSize(i),</span><br><span class="line">                                             res=<span class="number">50</span>,</span><br><span class="line">                                             filled=<span class="keyword">False</span>)</span><br><span class="line">                r, g, b = self.getColor(newring[i])</span><br><span class="line">                ring.set_color(r, g, b)</span><br><span class="line">                ring_transform = rendering.Transform(translation=(<span class="number">150</span>,<span class="number">30</span>))</span><br><span class="line">                ring.add_attr(ring_transform)</span><br><span class="line">                self.add_geom(ring)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_drawQG</span><span class="params">(self, qgs: list=None)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        画棋盘上各个棋格的圆圈</span></span><br><span class="line"><span class="string">        :param qgs:</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">for</span> num,qg <span class="keyword">in</span> enumerate(qgs):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(qg)):</span><br><span class="line">                <span class="keyword">if</span> qg[i] != <span class="number">0</span>:</span><br><span class="line">                    ring = rendering.make_circle(radius=self.getSize(i),</span><br><span class="line">                                                 res = <span class="number">50</span>,</span><br><span class="line">                                                 filled=<span class="keyword">False</span>)</span><br><span class="line">                    r, g, b = self.getColor(qg[i])</span><br><span class="line">                    ring.set_color(r, g, b)</span><br><span class="line">                    ring_transform = rendering.Transform(translation=self.pos2loc(num))</span><br><span class="line">                    ring.add_attr(ring_transform)</span><br><span class="line">                    self.add_geom(ring)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getQG</span><span class="params">(self, qg: list=None)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        将len=27的list转换为[[],[],...]</span></span><br><span class="line"><span class="string">        :param qg: (27,1)的list</span></span><br><span class="line"><span class="string">        :return: (9,1)的list</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        qgs = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                tmp = []</span><br><span class="line">                <span class="keyword">for</span> z <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                    tmp.append(qg[<span class="number">9</span>*x+<span class="number">3</span>*y+z])</span><br><span class="line">                qgs.append(tmp)</span><br><span class="line">        self._drawQG(qgs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testenv</span><span class="params">(gym.Env)</span>:</span></span><br><span class="line">    <span class="comment"># 如果你不想改参数，下面可以不用写</span></span><br><span class="line">    metadata = &#123;</span><br><span class="line">        <span class="string">'render.modes'</span>: [<span class="string">'human'</span>, <span class="string">'rgb_array'</span>],</span><br><span class="line">        <span class="string">'video.frames_per_second'</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.viewer = ringViewer(<span class="number">300</span>, <span class="number">400</span>)   <span class="comment"># 600x400 是画板的长和框</span></span><br><span class="line">        self.state:list = []</span><br><span class="line">        self.state:list = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setState</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        self.state = state</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setNewring</span><span class="params">(self, newring=None)</span>:</span></span><br><span class="line">        self.newring = newring</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self, mode=<span class="string">'human'</span>, close=False)</span>:</span></span><br><span class="line">        <span class="comment"># 由于没有找到viewer源码中删除组件的代码,于是每次在渲染前 清空上一次geoms和onetime_geoms列表 来达到消除的目的</span></span><br><span class="line">        <span class="keyword">if</span> self.state.any():</span><br><span class="line">            self.viewer.geoms.clear()</span><br><span class="line">            self.viewer.onetime_geoms.clear()</span><br><span class="line">            self.viewer.getQG(self.state)</span><br><span class="line">        <span class="keyword">if</span> self.newring:</span><br><span class="line">            self.viewer.drawNewring(self.newring)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.viewer.render(return_rgb_array=mode == <span class="string">'rgb_array'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    v = Testenv()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        v.setState(np.random.randint(<span class="number">0</span>,<span class="number">6</span>,(<span class="number">27</span>)))</span><br><span class="line">        v.setNewring([random.randint(<span class="number">0</span>,<span class="number">5</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>)])</span><br><span class="line">        print(v.state)</span><br><span class="line">        print(v.newring)</span><br><span class="line">        v.render()</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>△.由于没有找到viewer源码中删除组件的代码,于是每次在渲染前 清空上一次geoms和onetime_geoms列表 来达到消除的目的</p><p>效果图如下</p><p><img src="/2019/09/26/OpenAI-Gym使用/ring.jpg" alt="ring"></p><h2 id="深入剖析gym环境构建转"><a class="markdownIt-Anchor" href="#深入剖析gym环境构建转"></a> <a href="https://blog.csdn.net/WASEFADG/article/details/81043075" target="_blank" rel="noopener">深入剖析gym环境构建[转]</a></h2><blockquote><p>由于该博客的代码展示实在太乱,于是重新帮他排版了一下</p></blockquote><p>我们继续讲，从第1小节的尾巴开始。有三个重要的函数：</p><ul><li>env = gym.make(‘CartPole-v0’)</li><li>env.reset()</li><li>env.render()</li></ul><p>第一个函数是创建环境，我们会在第3小节具体讲如何创建自己的环境，所以这个函数暂时不讲。第二个函数env.reset()和第三个函数env.render()是每个环境文件都包含的函数。我们以cartpole为例，对这两个函数进行讲解。</p><p>Cartpole的环境文件在~你的gym目录<code>/gym/envs/classic_control/cartpole.py</code>.</p><p>该文件定义了一个CartPoleEnv的环境类，该类的成员函数有：seed(), step(),reset()和render(). 第1小节调用的就是CartPoleEnv的两个成员函数reset()和render()。下面，我们先讲讲这两个函数，再介绍step()函数</p><h3 id="21-reset函数详解"><a class="markdownIt-Anchor" href="#21-reset函数详解"></a> 2.1 reset()函数详解</h3><p>reset()为重新初始化函数。那么这个函数有什么用呢？</p><p>在强化学习算法中，智能体需要一次次地尝试，累积经验，然后从经验中学到好的动作。一次尝试我们称之为一条轨迹或一个episode. 每次尝试都要到达终止状态. 一次尝试结束后，智能体需要从头开始，这就需要智能体具有<strong>重新初始化</strong>的功能。函数reset()就是这个作用。</p><p>reset()的源代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"># 利用均匀随机分布初试化环境的状态</span></span><br><span class="line">    self.state = self.np_random.uniform(low=-0.05, high=0.05, size=(4,))</span><br><span class="line">    <span class="comment"># 设置当前步数为None</span></span><br><span class="line">    self.steps_beyond_done = <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># 返回环境的初始化状态</span></span><br><span class="line">    <span class="keyword">return</span> np.array(self.state)</span><br></pre></td></tr></table></figure><h3 id="22-render函数详解"><a class="markdownIt-Anchor" href="#22-render函数详解"></a> 2.2 render()函数详解</h3><p>render()函数在这里扮演<strong>图像引擎</strong>的角色。一个仿真环境必不可少的两部分是<strong>物理引擎</strong>和<strong>图像引擎</strong>。物理引擎模拟环境中物体的运动规律；图像引擎用来显示环境中的物体图像。其实，对于强化学习算法，该函数可以没有。但是，为了便于直观显示当前环境中物体的状态，图像引擎还是有必要的。另外，加入图像引擎可以方便我们调试代码。下面具体介绍gym如何利用图像引擎来创建图像。</p><p>我们直接看源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gym.envs.classic_control <span class="keyword">import</span> rendering</span><br><span class="line"><span class="comment"># 这一句导入rendering模块，利用rendering模块中的画图函数进行图形的绘制</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myenv</span><span class="params">(gym.Env)</span></span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">_render</span><span class="params">(self, mode=’human’, close=False)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> close:</span><br><span class="line">        <span class="keyword">pass</span> <span class="comment">#省略，直接看关键代码部分</span></span><br><span class="line">        <span class="keyword">if</span> self.viewer <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># 如绘制600*400的窗口函数为：</span></span><br><span class="line">            self.viewer = rendering.Viewer(screen_width, screen_height)</span><br><span class="line">        <span class="comment"># 其中screen_width=600， screen_height=400</span></span><br><span class="line">        <span class="comment"># 创建小车的代码为：</span></span><br><span class="line">            l,r,t,b = -cartwidth/<span class="number">2</span>, cartwidth/<span class="number">2</span>, cartheight/<span class="number">2</span>, -cartheight/<span class="number">2</span></span><br><span class="line">            axleoffset =cartheight/<span class="number">4.0</span></span><br><span class="line">            cart = rendering.FilledPolygon([(l,b), (l,t), (r,t), (r,b)])</span><br><span class="line">        <span class="comment"># 其中rendering.FilledPolygon为填充一个矩形。</span></span><br></pre></td></tr></table></figure><p>创建完cart的形状，接下来给cart添加平移属性和旋转属性。将车的位移设置到cart的平移属性中，cart就会根据系统的状态变化左右运动。具体代码解释，我已上传到github上面了，<a href="https://link.zhihu.com/?target=https%3A//github.com/gxnk/reinforcement-learning-code" target="_blank" rel="noopener">gxnk/reinforcement-learning-code</a>　。想深入了解的同学可去下载学习。</p><h3 id="23-step函数详解"><a class="markdownIt-Anchor" href="#23-step函数详解"></a> 2.3 step()函数详解</h3><p>该函数在仿真器中扮演<strong>物理引擎</strong>的角色。其输入是动作a，输出是：下一步状态，立即回报，是否终止，调试项。</p><p>该函数描述了智能体与环境交互的所有信息，是环境文件中最重要的函数。在该函数中，一般利用智能体的运动学模型和动力学模型计算下一步的状态和立即回报，并判断是否达到终止状态。</p><p>我们直接看源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_step</span><span class="params">(self, action)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> self.action_space.contains(action), <span class="string">"%r (%s) invalid"</span>%(action, type(action))</span><br><span class="line">    state = self.state</span><br><span class="line">    x, x_dot, theta, theta_dot = state <span class="comment">#系统的当前状态</span></span><br><span class="line">    force = self.force_mag <span class="keyword">if</span> action==<span class="number">1</span> <span class="keyword">else</span> -self.force_mag <span class="comment">#输入动作，即作用到车上的力</span></span><br><span class="line">    costheta = math.cos(theta) <span class="comment">#余弦函数</span></span><br><span class="line">    sintheta = math.sin(theta) <span class="comment">#正弦函数</span></span><br><span class="line">    <span class="comment">#底下是车摆的动力学方程式，即加速度与动作之间的关系。</span></span><br><span class="line">    temp = (force + self.polemass_length * theta_dot * theta_dot * sintheta) / self.total_mass</span><br><span class="line">    thetaacc = (self.gravity * sintheta - costheta* temp) / (self.length * (<span class="number">4.0</span>/<span class="number">3.0</span> - self.masspole * costheta * costheta / self.total_mass)) <span class="comment">#摆的角加速度</span></span><br><span class="line">    xacc = temp - self.polemass_length * thetaacc * costheta / self.total_mass <span class="comment">#小车的平移加速</span></span><br><span class="line">    x = x + self.tau * x_dot</span><br><span class="line">    x_dot = x_dot + self.tau * xacc</span><br><span class="line">    theta = theta + self.tau * theta_dot</span><br><span class="line">    theta_dot = theta_dot + self.tau * thetaacc <span class="comment">#积分求下一步的状态</span></span><br><span class="line">    self.state = (x,x_dot,theta,theta_dot)</span><br></pre></td></tr></table></figure><p>2.4 一个简单的demo</p><p>下面，我给出一个最简单的demo，让大家体会一下上面三个函数如何使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">env = gym.make(<span class="string">'CartPole-v0'</span>)   </span><br><span class="line"><span class="comment">#创造环境observation = env.reset()       </span></span><br><span class="line"><span class="comment">#初始化环境，observation为环境状态</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">100</span>):    </span><br><span class="line">    action = env.action_space.sample()  </span><br><span class="line">    <span class="comment">#随机采样动作    </span></span><br><span class="line">    observation, reward, done, info = env.step(action)  </span><br><span class="line">    <span class="comment">#与环境交互，获得下一步的时刻    </span></span><br><span class="line">    <span class="keyword">if</span> done:                     </span><br><span class="line">        <span class="keyword">break</span>    </span><br><span class="line">    env.render()         </span><br><span class="line">    <span class="comment">#绘制场景    </span></span><br><span class="line">    count+=<span class="number">1</span>    </span><br><span class="line">    time.sleep(<span class="number">0.2</span>)      </span><br><span class="line">    <span class="comment">#每次等待0.2s</span></span><br><span class="line">    print(count)             </span><br><span class="line">    <span class="comment">#打印该次尝试的步数</span></span><br></pre></td></tr></table></figure><p>第3小节：创建自己的gym环境并利示例qlearning的方法</p><p>在上一小节中以cartpole为例子深入剖析了gym环境文件的重要组成。我们知道，一个gym环境最少的组成需要包括reset()函数和step()函数。当然，图像显示函数render()一般也是需要的。这一节，我会以机器人找金币为例给大家演示如何构建一个全新的gym环境，并以此环境为例，示例最经典的强化学习算法qlearning算法。在3.1节中，给出机器人找金币的问题陈述；第3.2节中，给出构建gym环境的过程；第3.3节中，利用qlearning方法实现机器人找金币的智能决策。全部代码已传到github上。</p><p>3.1 机器人找金币的问题陈述</p><p><img src="https://pic3.zhimg.com/80/v2-954718f1e5f4246a91f38386db310439_hd.jpg" alt="img"></p><p>图1.1 机器人找金币</p><p>如图1.1 为机器人在网格世界找金币的示意图。该网格世界一共有８个状态，其中状态６和状态8为死亡区域，状态７为金币区域。机器人的初始位置为网格世界中任意一个状态。机器人从初始状态出发寻找金币。机器人进行一次探索，进入死亡区域或找到金币，本次探测结束。机器人找到金币的回报为１，进入死亡区域回报为－１，机器人在区域１－５之间转换时，回报为０。我们的目标是找到一个策略使得机器人不管处在什么状态（１－５）都能找到金币。对于这个机器人找金币的游戏，我们可以利用强化学习的方法来实现。</p><h3 id="构建网格世界的gym环境"><a class="markdownIt-Anchor" href="#构建网格世界的gym环境"></a> 构建网格世界的gym环境</h3><blockquote><p>该例子的代码,除了本篇博客有以外,<a href="https://blog.csdn.net/extremebingo/article/details/80867486" target="_blank" rel="noopener">OpenAI Gym构建自定义强化学习环境</a>有更仔细和规范的代码贴出</p></blockquote><p>一个gym的环境文件，其主体是个类，在这里我们定义类名为：GridEnv, 其初始化为环境的基本参数，因为机器人找金币的过程是一个马尔科夫过程，我们在强化学习入门课程的第一讲已经介绍过了一个马尔科夫过程应该包括状态空间，动作空间，回报函数，状态转移概率。因此，我们在类GridEnv的初始化时便给出了相应的定义。网格世界的全部代码在<a href="https://link.zhihu.com/?target=https%3A//github.com/gxnk/reinforcement-learning-code" target="_blank" rel="noopener">gxnk/reinforcement-learning-code</a>,文件名为 grid_mdp.py. 我们看源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 状态空间为：</span></span><br><span class="line">self.states = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="comment"># 动作空间为：</span></span><br><span class="line">　　self.actions = [<span class="string">'n'</span>,<span class="string">'e'</span>,<span class="string">'s'</span>,<span class="string">'w'</span>]</span><br><span class="line"><span class="comment"># 回报函数为：</span></span><br><span class="line">　　self.rewards = dict(); <span class="comment">#回报的数据结构为字典</span></span><br><span class="line">　　self.rewards[<span class="string">'1_s'</span>] = <span class="number">-1.0</span></span><br><span class="line">　　self.rewards[<span class="string">'3_s'</span>] = <span class="number">1.0</span></span><br><span class="line">self.rewards[<span class="string">'5_s'</span>] = <span class="number">-1.0</span></span><br><span class="line"><span class="comment"># 状态转移概率为：</span></span><br><span class="line">　　self.t = dict(); <span class="comment">#状态转移的数据格式为字典</span></span><br><span class="line">　　self.t[<span class="string">'1_s'</span>] = <span class="number">6</span></span><br><span class="line">　　self.t[<span class="string">'1_e'</span>] = <span class="number">2</span></span><br><span class="line">　　self.t[<span class="string">'2_w'</span>] = <span class="number">1</span></span><br><span class="line">　　self.t[<span class="string">'2_e'</span>] = <span class="number">3</span></span><br><span class="line">　　self.t[<span class="string">'3_s'</span>] = <span class="number">7</span></span><br><span class="line">　　self.t[<span class="string">'3_w'</span>] = <span class="number">2</span></span><br><span class="line">　　self.t[<span class="string">'3_e'</span>] = <span class="number">4</span></span><br><span class="line">　　self.t[<span class="string">'4_w'</span>] = <span class="number">3</span></span><br><span class="line">　　self.t[<span class="string">'4_e'</span>] = <span class="number">5</span></span><br><span class="line">　　self.t[<span class="string">'5_s'</span>] = <span class="number">8</span></span><br><span class="line">　　self.t[<span class="string">'5_w'</span>] = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>有了状态空间，动作空间和状态转移概率，我们便可以写step(a)函数了。这里特别注意的是，step()函数的输入是动作，输出为：下一个时刻的动作，回报，是否终止，调试信息。尤其需要注意的是输出的顺序不要弄错了。对于调试信息，可以为空，但不能缺少，否则会报错，常用{}来代替。我们看源代码：</p><h4 id="step函数的建立"><a class="markdownIt-Anchor" href="#step函数的建立"></a> step函数的建立:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_step</span><span class="params">(self, action)</span>:</span></span><br><span class="line">    <span class="comment">#系统当前状态</span></span><br><span class="line">    state = self.state</span><br><span class="line">      ＃判断系统当前状态是否为终止状态</span><br><span class="line">    <span class="keyword">if</span> state <span class="keyword">in</span> self.terminate_states:</span><br><span class="line">    <span class="keyword">return</span> state, <span class="number">0</span>, <span class="keyword">True</span>, &#123;&#125;</span><br><span class="line">    key = <span class="string">"%d_%s"</span>%(state, action) <span class="comment">#将状态和动作组成字典的键值</span></span><br><span class="line">    <span class="comment">#状态转移</span></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> self.t:</span><br><span class="line">    next_state = self.t[key]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    next_state = state</span><br><span class="line">        self.state = next_state</span><br><span class="line">        is_terminal = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">if</span> next_state <span class="keyword">in</span> self.terminate_states:</span><br><span class="line">    is_terminal = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.rewards:</span><br><span class="line">    r = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    r = self.rewards[key]</span><br><span class="line"><span class="keyword">return</span> next_state, r,is_terminal,&#123;&#125;</span><br></pre></td></tr></table></figure><p>step()函数就是这么简单。下面我们重点介绍下如何写render()函数。从图1.1机器人找金币的示意图我们可以看到，网格世界是由一些线和圆组成的。因此，我们可以调用rendering中的画图函数来绘制这些图像。</p><h4 id="render函数的建立"><a class="markdownIt-Anchor" href="#render函数的建立"></a> render函数的建立:</h4><p>整个图像是一个600*400的窗口，可用如下代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gym.envs.classic_control <span class="keyword">import</span> rendering</span><br><span class="line"></span><br><span class="line">self.viewer = rendering.Viewer(screen_width, screen_height)</span><br><span class="line"><span class="comment"># 创建网格世界，一共包括11条直线，事先算好每条直线的起点和终点坐标，然后绘制这些直线，代码如下：</span></span><br><span class="line"><span class="comment">#创建网格世界</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.line1 = rendering.Line((<span class="number">100</span>,<span class="number">300</span>),(<span class="number">500</span>,<span class="number">300</span>))</span><br><span class="line">    self.line2 = rendering.Line((<span class="number">100</span>, <span class="number">200</span>), (<span class="number">500</span>, <span class="number">200</span>))</span><br><span class="line">    self.line3 = rendering.Line((<span class="number">100</span>, <span class="number">300</span>), (<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">    self.line4 = rendering.Line((<span class="number">180</span>, <span class="number">300</span>), (<span class="number">180</span>, <span class="number">100</span>))</span><br><span class="line">    self.line5 = rendering.Line((<span class="number">260</span>, <span class="number">300</span>), (<span class="number">260</span>, <span class="number">100</span>))</span><br><span class="line">    self.line6 = rendering.Line((<span class="number">340</span>, <span class="number">300</span>), (<span class="number">340</span>, <span class="number">100</span>))</span><br><span class="line">    self.line7 = rendering.Line((<span class="number">420</span>, <span class="number">300</span>), (<span class="number">420</span>, <span class="number">100</span>))</span><br><span class="line">    self.line8 = rendering.Line((<span class="number">500</span>, <span class="number">300</span>), (<span class="number">500</span>, <span class="number">100</span>))</span><br><span class="line">    self.line9 = rendering.Line((<span class="number">100</span>, <span class="number">100</span>), (<span class="number">180</span>, <span class="number">100</span>))</span><br><span class="line">    self.line10 = rendering.Line((<span class="number">260</span>, <span class="number">100</span>), (<span class="number">340</span>, <span class="number">100</span>))</span><br><span class="line">    self.line11 = rendering.Line((<span class="number">420</span>, <span class="number">100</span>), (<span class="number">500</span>, <span class="number">100</span>))</span><br><span class="line">    <span class="comment"># 接下来，创建死亡区域，我们用黑色的圆圈代表死亡区域，源代码如下：</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建第一个骷髅</span></span><br><span class="line">    self.kulo1 = rendering.make_circle(<span class="number">40</span>)</span><br><span class="line">    self.circletrans = rendering.Transform(translation=(<span class="number">140</span>,<span class="number">150</span>))</span><br><span class="line">    self.kulo1.add_attr(self.circletrans)</span><br><span class="line">    self.kulo1.set_color(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 创建第二个骷髅</span></span><br><span class="line">    self.kulo2 = rendering.make_circle(<span class="number">40</span>)</span><br><span class="line">    self.circletrans = rendering.Transform(translation=(<span class="number">460</span>, <span class="number">150</span>))</span><br><span class="line">    self.kulo2.add_attr(self.circletrans)</span><br><span class="line">    self.kulo2.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 创建金币区域，用金色的圆来表示：</span></span><br><span class="line">    <span class="comment"># 创建金条</span></span><br><span class="line">    self.gold = rendering.make_circle(<span class="number">40</span>)</span><br><span class="line">    self.circletrans = rendering.Transform(translation=(<span class="number">300</span>, <span class="number">150</span>))</span><br><span class="line">    self.gold.add_attr(self.circletrans)</span><br><span class="line">    self.gold.set_color(<span class="number">1</span>, <span class="number">0.9</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建机器人，我们依然用圆来表示机器人，为了跟死亡区域和金币区域不同，我们可以设置不同的颜色：</span></span><br><span class="line">    <span class="comment"># 创建机器人</span></span><br><span class="line">    self.robot= rendering.make_circle(<span class="number">30</span>)</span><br><span class="line">    self.robotrans = rendering.Transform()</span><br><span class="line">    self.robot.add_attr(self.robotrans)</span><br><span class="line">    self.robot.set_color(<span class="number">0.8</span>, <span class="number">0.6</span>, <span class="number">0.4</span>)</span><br><span class="line">    <span class="comment"># 创建完之后，给11条直线设置颜色，并将这些创建的对象添加到几何中代码如下：</span></span><br><span class="line">    self.line1.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line2.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line3.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line4.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line5.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line6.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line7.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line8.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line9.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line10.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line11.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 添加组件到Viewer中</span></span><br><span class="line">    self.viewer.add_geom(self.line1)</span><br><span class="line">    self.viewer.add_geom(self.line2)</span><br><span class="line">    self.viewer.add_geom(self.line3)</span><br><span class="line">    self.viewer.add_geom(self.line4)</span><br><span class="line">    self.viewer.add_geom(self.line5)</span><br><span class="line">    self.viewer.add_geom(self.line6)</span><br><span class="line">    self.viewer.add_geom(self.line7)</span><br><span class="line">    self.viewer.add_geom(self.line8)</span><br><span class="line">    self.viewer.add_geom(self.line9)</span><br><span class="line">    self.viewer.add_geom(self.line10)</span><br><span class="line">    self.viewer.add_geom(self.line11)</span><br><span class="line">    self.viewer.add_geom(self.kulo1)</span><br><span class="line">    self.viewer.add_geom(self.kulo2)</span><br><span class="line">    self.viewer.add_geom(self.gold)</span><br><span class="line">    self.viewer.add_geom(self.robot)</span><br><span class="line">    <span class="comment"># 接下来，开始设置机器人的位置。机器人的位置根据其当前所处的状态不同，所在的位置不同。我们事先计算出每个状态处机器人位置的中心坐标，并存储到两个向量中，并在类初始化中给出：</span></span><br><span class="line">        self.x=[<span class="number">140</span>,<span class="number">220</span>,<span class="number">300</span>,<span class="number">380</span>,<span class="number">460</span>,<span class="number">140</span>,<span class="number">300</span>,<span class="number">460</span>]</span><br><span class="line">        self.y=[<span class="number">250</span>,<span class="number">250</span>,<span class="number">250</span>,<span class="number">250</span>,<span class="number">250</span>,<span class="number">150</span>,<span class="number">150</span>,<span class="number">150</span>]</span><br><span class="line">    <span class="comment"># 根据这两个向量和机器人当前的状态，我们就可以设置机器人当前的圆心坐标了即：</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.state <span class="keyword">is</span> <span class="keyword">None</span>: <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        self.robotrans.set_translation(self.x[self.state<span class="number">-1</span>], self.y[self.state- <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最后还需要一个返回语句：</span></span><br><span class="line">        <span class="keyword">return</span> self.viewer.render(return_rgb_array=mode == <span class="string">'rgb_array'</span>)</span><br></pre></td></tr></table></figure><p>以上便完成了render()函数的建立</p><h4 id="reset函数的建立"><a class="markdownIt-Anchor" href="#reset函数的建立"></a> reset()函数的建立：</h4><p>reset()函数常常用随机的方法初始化机器人的状态，即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_reset</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.state = self.states[int(random.random() * len(self.states))]</span><br><span class="line">    <span class="keyword">return</span> self.state</span><br></pre></td></tr></table></figure><h4 id="环境的注册"><a class="markdownIt-Anchor" href="#环境的注册"></a> 环境的注册</h4><p>全部的代码请去github上下载学习。下面重点讲一讲如何将建好的环境进行注册，以便通过gym的标准形式进行调用。其实环境的注册很简单，只需要３步：</p><p>第一步：将我们自己的环境文件（我创建的文件名为grid_mdp.py)拷贝到你的gym安装目录/gym/gym/envs/classic_control文件夹中。（拷贝在这个文件夹中因为要使用rendering模块。当然，也有其他办法。该方法不唯一）</p><p>第二步：打开该文件夹（第一步中的文件夹）下的__init__.py文件，在文件末尾加入语句：<code>from gym.envs.classic_control.grid_mdp import GridEnv</code></p><p>第三步：进入文件夹你的gym安装目录/gym/gym/envs，打开该文件夹下的__init__.py文件，添加代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">register(</span><br><span class="line">    <span class="comment"># gym.make(‘id’)时的id</span></span><br><span class="line">    id=<span class="string">'GridWorld-v0'</span>,</span><br><span class="line">    <span class="comment"># 函数路口</span></span><br><span class="line">    entry_point=<span class="string">'gym.envs.classic_control:GridEnv'</span>,</span><br><span class="line">    max_episode_steps=<span class="number">200</span>,</span><br><span class="line">    reward_threshold=<span class="number">100.0</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第一个参数id就是你调用gym.make(‘id’)时的id,　这个id你可以随便选取，我取的，名字是GridWorld-v0</p><p>第二个参数就是函数路口了。</p><p>后面的参数原则上来说可以不必要写。</p><p>经过以上三步，就完成了注册。</p><p>下面，我们给个简单的demo来测试下我们的环境的效果吧：</p><p>我们依然写个终端程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"></span><br><span class="line">env = gym.make(<span class="string">'GridWorld-v0'</span>)</span><br><span class="line">env.reset()</span><br><span class="line">env.render()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;openai-gym使用-rendering画图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#openai-gym使用-rendering画图&quot;&gt;&lt;/a&gt; OpenAI Gym使用、rendering画图&lt;/h1&gt;
&lt;blockquo
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="RL" scheme="https://nymrli.top/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装selenium执行Python程序</title>
    <link href="https://nymrli.top/2019/09/24/Linux%E5%AE%89%E8%A3%85selenium%E6%89%A7%E8%A1%8CPython%E7%A8%8B%E5%BA%8F/"/>
    <id>https://nymrli.top/2019/09/24/Linux安装selenium执行Python程序/</id>
    <published>2019-09-24T14:13:20.000Z</published>
    <updated>2019-09-24T14:25:19.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux安装selenium执行python程序"><a class="markdownIt-Anchor" href="#linux安装selenium执行python程序"></a> Linux安装selenium执行Python程序</h1><ol><li><p>配置python运行环境</p></li><li><p>安装selenium,<code>sudo pip install selenium</code></p></li><li><p>安装chrome</p><blockquote><p>提供下载网站<a href="https://www.chromedownloads.net/chrome64linux-stable/" target="_blank" rel="noopener">chromedownloads</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libxss1 libappindicator1 libindicator7</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i google-chrome-stable_current_amd64-75.0.3770.80.deb </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行sudo dpkg -i google-chrome*.deb后报错的话，那就执行一下sudo apt-get install -f</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装后在/usr/bin目录下查看是否有google-chrome文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查chrome版本：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> google-chrome-stable --version</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当时无法查到版本,并报错error <span class="keyword">while</span> loading shared libraries: libasound.so.2,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入sudo apt-get install -f后解决</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> google-chrome-stable --version</span></span><br></pre></td></tr></table></figure></li><li><p>安装chromedriver</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget -N http://chromedriver.storage.googleapis.com/75.0.3770.8/chromedriver_linux64.zip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> unzip chromedriver_linux64.zip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod +x chromedriver</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mv -f chromedriver /usr/<span class="built_in">local</span>/share/chromedriver</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s /usr/<span class="built_in">local</span>/share/chromedriver /usr/<span class="built_in">local</span>/bin/chromedriver</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s /usr/<span class="built_in">local</span>/share/chromedriver /usr/bin/chromedrive</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chromedriver -v</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果发现版本不对，chrome可以使用这样卸载：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum remove google-chrome</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chromedriver可以直接删除目录：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo rm -f /usr/bin/chromedriver</span></span><br></pre></td></tr></table></figure></li><li><p>编写python测试代码</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-dev-shm-usage'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com/'</span>)</span><br></pre></td></tr></table></figure><h2 id="报错记录"><a class="markdownIt-Anchor" href="#报错记录"></a> 报错记录:</h2><p><code>Message: unknown error: Chrome failed to start: exited abnormally (unknown error: DevToolsActivePort file doesn't exist) (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)</code></p><p><strong>解决方法：添加参数</strong>chrome_options.add_argument(’–no-sandbox’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'user-agent=%s'</span> % random.choice(MY_USER_AGENT_PC))</span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">'/usr/local/bin/chromedriver'</span>, chrome_options=chrome_options)</span><br><span class="line">driver.set_window_size(<span class="number">1366</span>, <span class="number">1000</span>)  <span class="comment"># 调整页面尺寸</span></span><br><span class="line">driver.implicitly_wait(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linux安装selenium执行python程序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#linux安装selenium执行python程序&quot;&gt;&lt;/a&gt; Linux安装selenium执行Python程序&lt;/h1&gt;
&lt;ol&gt;
&lt;
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="Linux" scheme="https://nymrli.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04+CUDA toolkit10.1+cudNN7.6+bazel0.26.1</title>
    <link href="https://nymrli.top/2019/09/23/Ubuntu16-04-CUDA-toolkit10-1-cudNN7-6-bazel0-26-1/"/>
    <id>https://nymrli.top/2019/09/23/Ubuntu16-04-CUDA-toolkit10-1-cudNN7-6-bazel0-26-1/</id>
    <published>2019-09-23T08:38:55.000Z</published>
    <updated>2019-10-07T10:10:45.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ubuntu-1604-cuda-toolkit-101-cudnn76-bazel-0261"><a class="markdownIt-Anchor" href="#ubuntu-1604-cuda-toolkit-101-cudnn76-bazel-0261"></a> Ubuntu 16.04 + CUDA toolkit 10.1 + cudNN7.6 + bazel 0.26.1</h2><blockquote><p>保证<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">cuDNN</a>跟<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">CUDA SDK</a>的版本一致即可.</p><p>从源码编译的话需要查看显卡的计算能力,可在<a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="noopener">查看GPU计算能力</a>，在配置的时候填入即可，跟CUDA SDK的版本无关</p><p>▲必须注册账号后，才能选择下载</p></blockquote><p>▲最好先看我的踩坑记录，先确保自己知道有这些坑</p><p>▲.<strong>全程保持能连接外网（翻墙）</strong></p><h3 id="安装nvidia驱动"><a class="markdownIt-Anchor" href="#安装nvidia驱动"></a> <strong>安装NVIDIA驱动</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ubuntu-drivers devices <span class="comment"># 查看</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看NVIDIA驱动版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg --list | grep nvidia-*</span></span><br></pre></td></tr></table></figure><p>显卡驱动与CUDA版本对应关系</p><p>最新的根据<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html" target="_blank" rel="noopener">官网查看</a></p><p><img src="https://img-blog.csdnimg.cn/20190308104315129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUX3hpYW9fYmFp,size_16,color_FFFFFF,t_70" alt=""></p><p><a href="https://www.nvidia.cn/Download/index.aspx?lang=cn#" target="_blank" rel="noopener">下载NVIDIA驱动</a></p><p>▲注意:得对应匹配!!!</p><h3 id="cuda-toolkit-101"><a class="markdownIt-Anchor" href="#cuda-toolkit-101"></a> CUDA toolkit 10.1</h3><p>安装之前先看显卡的驱动版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装过程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i cuda-repo-ubuntu1604-10-1-local-10.1.243-418.87.00_1.0-1_amd64.deb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install cuda</span></span><br></pre></td></tr></table></figure><p>设置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim ~/.bashrc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-8.0/bin:<span class="variable">$PATH</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-8.0/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生效</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure><p>验证安装完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvcc -V</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/samples/1_Utilities/deviceQuery</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./deviceQuery</span></span><br></pre></td></tr></table></figure><p>△.如果显示Result:PASS才是安装成功。这一步一定要保证错误，不然之后bazel编译时报错就很难分析问题！！！！！(只有在驱动安装好的情况下才能运行成功,不然会报no CUDA-capable device is detected，或者GPU is lost)</p><p>如果失败,卸载重装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/bin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ./uninstall_cuda_9.2.pl</span></span><br></pre></td></tr></table></figure><h3 id="安装-python-和-tensorflow-软件包依赖项"><a class="markdownIt-Anchor" href="#安装-python-和-tensorflow-软件包依赖项"></a> 安装 Python 和 TensorFlow 软件包依赖项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-dev python-pip  # or python3-dev python3-pip</span><br></pre></td></tr></table></figure><p>安装 TensorFlow pip 软件包依赖项（如果使用虚拟环境，请省略 <code>--user</code> 参数）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -U --user pip six numpy wheel setuptools mock future&gt;=0.17.1</span><br><span class="line">pip install -U --user keras_applications==1.0.6 --no-deps</span><br><span class="line">pip install -U --user keras_preprocessing==1.0.5 --no-deps</span><br></pre></td></tr></table></figure><h3 id="cudnn-763"><a class="markdownIt-Anchor" href="#cudnn-763"></a> cudNN 7.6.3</h3><p>选择<a href="https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.3.30/Production/10.1_20190822/cudnn-10.1-linux-x64-v7.6.3.30.tgz" target="_blank" rel="noopener">cuDNN Library for Linux</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压cudNN</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp  cudnn-8.0-linux-x64-v5.1.solitairetheme8 /usr/<span class="built_in">local</span>/cuda/cudnn-8.0-linux-x64-v5.1.tgz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf cudnn-8.0-linux-x64-v5.1.tgz</span></span><br><span class="line"></span><br><span class="line">sudo cp cuda/include/cudnn.h /usr/local/cuda/include</span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br><span class="line">sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure><h3 id="bazel"><a class="markdownIt-Anchor" href="#bazel"></a> Bazel</h3><p>构建Tensorflow需要用bazel,而wget下载很慢,需要代理,可以试着去<a href="https://github.com/bazelbuild/bazel/releases" target="_blank" rel="noopener">github</a>上下载后再传到服务器</p><p>后来<code>./configure</code>配置TensorFlow时,提示Bazel版本太高…(这个问题出现在我下载的不是github下载下来的tensorflow，网盘下载的可能版本太低了)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WARNING: --batch mode is deprecated. Please instead explicitly shut down your Bazel server using the command "bazel shutdown".</span><br><span class="line">You have bazel 0.29.1 installed.</span><br><span class="line">Please downgrade your bazel installation to version 0.26.1 or lower to build TensorFlow! To downgrade: download the installer for the old version (from https://github.com/bazelbuild/bazel/releases) then run the installer.</span><br></pre></td></tr></table></figure><h3 id="从源码构建和安装tensorflow"><a class="markdownIt-Anchor" href="#从源码构建和安装tensorflow"></a> <a href="https://www.tensorflow.org/install/source" target="_blank" rel="noopener">从源码构建和安装Tensorflow</a></h3><blockquote><p>第一次安装的是2.0的版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tensorflow/tensorflow.git</span><br><span class="line"><span class="built_in">cd</span> tensorflow</span><br><span class="line">(tf) apollo3d@apollo1:~/Downloads/tensorflow-master$ ./configure </span><br><span class="line">WARNING: --batch mode is deprecated. Please instead explicitly shut down your Bazel server using the <span class="built_in">command</span> <span class="string">"bazel shutdown"</span>.</span><br><span class="line">You have bazel 0.26.0 installed.</span><br><span class="line">Please specify the location of python. [Default is /home/apollo3d/tf/bin/python]: /usr/bin/python3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Found possible Python library paths:</span><br><span class="line">  /usr/<span class="built_in">local</span>/lib/python3.5/dist-packages</span><br><span class="line">  /usr/lib/python3/dist-packages</span><br><span class="line">Please input the desired Python library path to use.  Default is [/usr/<span class="built_in">local</span>/lib/python3.5/dist-packages]</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with XLA JIT support? [Y/n]: </span><br><span class="line">XLA JIT support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with OpenCL SYCL support? [y/N]: </span><br><span class="line">No OpenCL SYCL support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with ROCm support? [y/N]: </span><br><span class="line">No ROCm support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with CUDA support? [y/N]: y</span><br><span class="line">CUDA support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with TensorRT support? [y/N]: </span><br><span class="line">No TensorRT support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Found CUDA 10.1 <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line">Found cuDNN 7 <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please specify a list of comma-separated CUDA compute capabilities you want to build with.</span><br><span class="line">You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.</span><br><span class="line">Please note that each additional compute capability significantly increases your build time and binary size, and that TensorFlow only supports compute capabilities &gt;= 3.5 [Default is: 3.5,7.0]: 5.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you want to use clang as CUDA compiler? [y/N]: N</span><br><span class="line">Clang will be used as CUDA compiler.</span><br><span class="line"></span><br><span class="line">Do you wish to download a fresh release of clang? (Experimental) [y/N]: N</span><br><span class="line">Clang will be downloaded and used to compile tensorflow.</span><br><span class="line"></span><br><span class="line">Please specify optimization flags to use during compilation when bazel option <span class="string">"--config=opt"</span> is specified [Default is -march=native -Wno-sign-compare]: --config=v2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Would you like to interactively configure ./WORKSPACE <span class="keyword">for</span> Android builds? [y/N]: </span><br><span class="line">Not configuring the WORKSPACE <span class="keyword">for</span> Android builds.</span><br><span class="line"></span><br><span class="line">Preconfigured Bazel build configs. You can use any of the below by adding <span class="string">"--config=&lt;&gt;"</span> to your build <span class="built_in">command</span>. See .bazelrc <span class="keyword">for</span> more details.</span><br><span class="line">--config=mkl         <span class="comment"># Build with MKL support.</span></span><br><span class="line">--config=monolithic  <span class="comment"># Config for mostly static monolithic build.</span></span><br><span class="line">--config=ngraph      <span class="comment"># Build with Intel nGraph support.</span></span><br><span class="line">--config=numa        <span class="comment"># Build with NUMA support.</span></span><br><span class="line">--config=dynamic_kernels<span class="comment"># (Experimental) Build kernels into separate shared objects.</span></span><br><span class="line">--config=v2          <span class="comment"># Build TensorFlow 2.x instead of 1.x.</span></span><br><span class="line">Preconfigured Bazel build configs to DISABLE default on features:</span><br><span class="line">--config=noaws       <span class="comment"># Disable AWS S3 filesystem support.</span></span><br><span class="line">--config=nogcp       <span class="comment"># Disable GCP support.</span></span><br><span class="line">--config=nohdfs      <span class="comment"># Disable HDFS support.</span></span><br><span class="line">--config=nonccl      <span class="comment"># Disable NVIDIA NCCL support.</span></span><br><span class="line">Configuration finished</span><br></pre></td></tr></table></figure><blockquote><p>第二次1.14</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">(pythonEnv) apollo3d@apollo1:~/Downloads/tensorflow$ ./configure </span><br><span class="line">WARNING: Running Bazel server needs to be killed, because the startup options are different.</span><br><span class="line">WARNING: --batch mode is deprecated. Please instead explicitly shut down your Bazel server using the <span class="built_in">command</span> <span class="string">"bazel shutdown"</span>.</span><br><span class="line">You have bazel 0.26.0 installed.</span><br><span class="line">Please specify the location of python. [Default is /home/apollo3d/pythonEnv/bin/python]: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: module <span class="string">'site'</span> has no attribute <span class="string">'getsitepackages'</span></span><br><span class="line">Found possible Python library paths:</span><br><span class="line">  /home/apollo3d/pythonEnv/lib/python3.5/site-packages</span><br><span class="line">Please input the desired Python library path to use.  Default is [/home/apollo3d/pythonEnv/lib/python3.5/site-packages]</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with XLA JIT support? [Y/n]: </span><br><span class="line">XLA JIT support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with OpenCL SYCL support? [y/N]: n</span><br><span class="line">No OpenCL SYCL support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with ROCm support? [y/N]: </span><br><span class="line">No ROCm support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with CUDA support? [y/N]: y</span><br><span class="line">CUDA support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with TensorRT support? [y/N]: </span><br><span class="line">No TensorRT support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Found CUDA 10.1 <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line">Found cuDNN 7 <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please specify a list of comma-separated CUDA compute capabilities you want to build with.</span><br><span class="line">You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.</span><br><span class="line">Please note that each additional compute capability significantly increases your build time and binary size, and that TensorFlow only supports compute capabilities &gt;= 3.5 [Default is: 5.2]: 5.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you want to use clang as CUDA compiler? [y/N]: n</span><br><span class="line">nvcc will be used as CUDA compiler.</span><br><span class="line"></span><br><span class="line">Please specify <span class="built_in">which</span> gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with MPI support? [y/N]: </span><br><span class="line">No MPI support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Please specify optimization flags to use during compilation when bazel option <span class="string">"--config=opt"</span> is specified [Default is -march=native -Wno-sign-compare]: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Would you like to interactively configure ./WORKSPACE <span class="keyword">for</span> Android builds? [y/N]: </span><br><span class="line">Not configuring the WORKSPACE <span class="keyword">for</span> Android builds.</span><br><span class="line"></span><br><span class="line">Preconfigured Bazel build configs. You can use any of the below by adding <span class="string">"--config=&lt;&gt;"</span> to your build <span class="built_in">command</span>. See .bazelrc <span class="keyword">for</span> more details.</span><br><span class="line">--config=mkl         <span class="comment"># Build with MKL support.</span></span><br><span class="line">--config=monolithic  <span class="comment"># Config for mostly static monolithic build.</span></span><br><span class="line">--config=gdr         <span class="comment"># Build with GDR support.</span></span><br><span class="line">--config=verbs       <span class="comment"># Build with libverbs support.</span></span><br><span class="line">--config=ngraph      <span class="comment"># Build with Intel nGraph support.</span></span><br><span class="line">--config=numa        <span class="comment"># Build with NUMA support.</span></span><br><span class="line">--config=dynamic_kernels<span class="comment"># (Experimental) Build kernels into separate shared objects.</span></span><br><span class="line">Preconfigured Bazel build configs to DISABLE default on features:</span><br><span class="line">--config=noaws       <span class="comment"># Disable AWS S3 filesystem support.</span></span><br><span class="line">--config=nogcp       <span class="comment"># Disable GCP support.</span></span><br><span class="line">--config=nohdfs      <span class="comment"># Disable HDFS support.</span></span><br><span class="line">--config=noignite    <span class="comment"># Disable Apache Ignite support.</span></span><br><span class="line">--config=nokafka     <span class="comment"># Disable Apache Kafka support.</span></span><br><span class="line">--config=nonccl      <span class="comment"># Disable NVIDIA NCCL support.</span></span><br><span class="line">Configuration finished</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">INFO: Elapsed time: 4826.834s, Critical Path: 298.31s</span><br><span class="line">INFO: 24978 processes: 24978 <span class="built_in">local</span>.</span><br><span class="line">INFO: Build completed successfully, 26636 total actions</span><br><span class="line"><span class="comment"># 大概用了一个半小时</span></span><br></pre></td></tr></table></figure><p>△.期间可能多次出现<code>ERROR:[GET returned 404 Not Found, connect timed out]</code>,继续重试即可</p><h3 id="编译-pip-软件包"><a class="markdownIt-Anchor" href="#编译-pip-软件包"></a> 编译 pip 软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ (tf) apollo3d@apollo1:~/Downloads/tensorflow-master$ bazel build -c --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package</span><br><span class="line"><span class="comment"># -c 不链接直接编译</span></span><br><span class="line">Starting <span class="built_in">local</span> Bazel server and connecting to it...</span><br><span class="line">WARNING: The following configs were expanded more than once: [cuda_clang, using_cuda, download_clang_use_lld]. For repeatable flags, repeats are counted twice and may lead to unexpected behavior.</span><br><span class="line">WARNING: option <span class="string">'--crosstool_top'</span> was expanded to from both option <span class="string">'--config=cuda_clang'</span> (<span class="built_in">source</span> /home/apollo3d/Downloads/tensorflow-master/.tf_configure.bazelrc) and option <span class="string">'--config=download_clang'</span> (<span class="built_in">source</span> /home/apollo3d/Downloads/tensorflow-master/.tf_configure.bazelrc)</span><br><span class="line"></span><br><span class="line">$ bazel-bin/tensorfLow/tools/pip_package/build_pip_package ~/</span><br><span class="line">tensorflow/bin <span class="comment"># 传入一个表示Python whell文件存储路径的参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在虚拟环境打开的情况下安装</span></span><br></pre></td></tr></table></figure><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录：</h2><p>windows上安装cuda时一直显示不能安装，就是系统默认安装的版本太低了，或者根本就没有安装。只有到<a href="https://www.geforce.cn/drivers" target="_blank" rel="noopener">显卡驱动下载</a>安装了驱动后，才能正常安装CUDA</p><p><strong>windows安装建议</strong></p><p>安装完linux后,我在自己笔记本上又安装了个Windows10的，两个是相通的，windows的很快我就安装好了。主要卡壳的时间全都是浪费在了驱动版本安装错误，只要把<strong>驱动的版本</strong>弄对了。然后依次安装NVIDIA驱动、CUDA、Cudnn就可以了。</p><h2 id="采坑记录"><a class="markdownIt-Anchor" href="#采坑记录"></a> 采坑记录</h2><p>▲下载tensorflow，一定要从官网下载最新的。千万不要去网盘上下载，我就是被这个坑了很久。最后从github下了后才逐渐正常。（github下载会很慢，可以见我的另外一篇文章，如何提速）</p><p>▲<code>./configure</code>的配置也很重要，除了CUDA选项其他都选默认</p><p><a href="https://blog.csdn.net/Junizxr/article/details/83578579" target="_blank" rel="noopener">Linux系统下安装TensorFlow的GPU版本</a></p><p><a href="https://blog.csdn.net/IT_xiao_bai/article/details/88342921" target="_blank" rel="noopener">CUDA、显卡驱动和Tensorflow版本之间的对应关系</a></p><blockquote><p>Linux x86_64 Driver Version与CUDA Toolkit的对应，一定要对应好，CUDA超出了Driver Version的话，是无法使用的<a href="https://blog.csdn.net/Junizxr/article/details/83578579" target="_blank" rel="noopener">^提示</a></p></blockquote><p>==&gt;CUDA 10.1的需要Linux x86_64 Driver Version&gt;=410.48。同时，tensorflow-gpu默认安装的是1.14版本，要求的cudNN为7，CUDA为9</p><p>▲<strong>google.xxxx.xxxx==&gt;unknown hosts</strong></p><p>报了这个错以后才发现，服务器的DNS没配置（云服务器一般不会出现这样的问题）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/resolv.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dynamic resolv.conf(5) file <span class="keyword">for</span> glibc resolver(3) generated by resolvconf(8)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN</span></span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 8.8.4.4</span><br></pre></td></tr></table></figure><p><strong>▲An error occurred during the fetch of repository ‘llvm’:Error 404 ， cant connect</strong></p><p>多次重试即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> (tf) apollo3d@apollo1:~/Downloads/tensorflow-master$ bazel build -c --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package</span></span><br></pre></td></tr></table></figure><p><strong>▲报错 AttributeError: ‘_NamespacePath’ object has no attribute 'sort’</strong></p><p>重新安装setuptools</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(pythonEnv) $ pip uninstall setuptools</span><br><span class="line">(pythonEnv) $ pip install setuptools</span><br><span class="line">(pythonEnv) $ pip  install googleapis-common-protos</span><br></pre></td></tr></table></figure><p>执行上述命令需要相当长的一段时间，具体时长取决于你的计算机性能。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Target //tensorflow/tools/pip_package:build_pip_package up-to-date:</span><br><span class="line">  bazel-bin/tensorflow/tools/pip_package/build_pip_package</span><br><span class="line">INFO: Elapsed time: 77.892s, Critical Path: 77.18s</span><br><span class="line">INFO: 45 processes: 45 local.</span><br><span class="line">INFO: Build completed successfully, 46 total actions</span><br></pre></td></tr></table></figure><p>待Bazel成功完成上述任务后会输出，运行输出的可执行程序，并传入一个表示Python whee文件存储路径的参数：</p><p><code>bazel-bin/tensorflow/tools/pip_package/build_pip_package ~/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(pythonEnv) apollo3d@apollo1:~/Downloads/tensorflow$ bazel-bin/tensorflow/tools/pip_package/build_pip_package ~/</span><br><span class="line">2019年 09月 24日 星期二 14:34:05 CST : === Preparing sources in dir: /tmp/tmp.pguTqrHuLA</span><br><span class="line">~/Downloads/tensorflow ~/Downloads/tensorflow</span><br><span class="line">~/Downloads/tensorflow</span><br><span class="line">/tmp/tmp.pguTqrHuLA/tensorflow/include ~/Downloads/tensorflow</span><br><span class="line">~/Downloads/tensorflow</span><br><span class="line">2019年 09月 24日 星期二 14:34:11 CST : === Building wheel</span><br><span class="line">warning: no files found matching &apos;*.pyd&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.pd&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.dylib&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.dll&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.lib&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.csv&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.h&apos; under directory &apos;tensorflow_core/include/tensorflow&apos;</span><br><span class="line">warning: no files found matching &apos;*&apos; under directory &apos;tensorflow_core/include/third_party&apos;</span><br><span class="line">2019年 09月 24日 星期二 14:34:33 CST : === Output wheel file is in: /home/apollo3d/</span><br></pre></td></tr></table></figure><p><strong>pip安装</strong></p><p>上述命令将在~/tensorlowbn下创建一个Python.wh文件。请确保你的“tensor-fow Virtualenv不境处于活动状态，然后用pip安装该whee文件（请注意该二进制文件的具体名称会依所安装的TensorFlow版本、所使用的操作系统和Python版本而不同）：</p><p><code>(pythonEnv) apollo3d@apollo1:~$ pip install tensorflow-2.0.0rc2-cp35-cp35m-linux_x86_64.whl</code></p><p><strong>▲安装成功后，使用时报错</strong></p><p>使用TensorFlow时报错FutureWarning: Passing (type, 1) or ‘1type’ as a synonym of type is deprecated; in a future version of numpy…</p><p>报错原因：numpy1-17-0版本过高，使用numpy-1.16-0版本即可</p><p>解决方法：重新安装numpy-1.16-0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip uninstall numpy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install numpy==1.16.0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ubuntu-1604-cuda-toolkit-101-cudnn76-bazel-0261&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ubuntu-1604-cuda-toolkit-101-cudnn76-bazel-0261
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Github下载、访问慢解决方法[转]</title>
    <link href="https://nymrli.top/2019/09/23/Github%E4%B8%8B%E8%BD%BD%E3%80%81%E8%AE%BF%E9%97%AE%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-%E8%BD%AC/"/>
    <id>https://nymrli.top/2019/09/23/Github下载、访问慢解决方法-转/</id>
    <published>2019-09-23T08:36:21.000Z</published>
    <updated>2019-09-29T09:38:38.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="github下载-访问慢解决方法转"><a class="markdownIt-Anchor" href="#github下载-访问慢解决方法转"></a> <a href="https://www.jianshu.com/p/0493dcc15d6f" target="_blank" rel="noopener">Github下载、访问慢解决方法[转]</a></h1><blockquote><p>下载tensorflow就16KiB/s,改完后能有900+KiB/s</p></blockquote><p>修改hosts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">151.101.44.249 github.global.ssl.fastly.net</span><br><span class="line">192.30.253.113 github.com</span><br><span class="line">103.245.222.133 assets-cdn.github.com</span><br><span class="line">23.235.47.133 assets-cdn.github.com</span><br><span class="line">203.208.39.104 assets-cdn.github.com</span><br><span class="line">204.232.175.78 documentcloud.github.com</span><br><span class="line">204.232.175.94 gist.github.com</span><br><span class="line">107.21.116.220 help.github.com</span><br><span class="line">207.97.227.252 nodeload.github.com</span><br><span class="line">199.27.76.130 raw.github.com</span><br><span class="line">107.22.3.110 status.github.com</span><br><span class="line">204.232.175.78 training.github.com</span><br><span class="line">207.97.227.243 www.github.com</span><br><span class="line">185.31.16.184 github.global.ssl.fastly.net</span><br><span class="line">185.31.18.133 avatars0.githubusercontent.com</span><br><span class="line">185.31.19.133 avatars1.githubusercontent.com</span><br><span class="line">192.30.253.120 codeload.github.com</span><br></pre></td></tr></table></figure><p>windows更新:<code>ipconfig /flushdns</code></p><p>linux重启网络服务:<code>service network restart</code>&lt;===&gt;<code>/etc/init.d/networking restart</code>(两个都没尝试)</p><p>我重新打开终端就行了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;github下载-访问慢解决方法转&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#github下载-访问慢解决方法转&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.jianshu.com/p/0493dcc15d6f&quot; targ
      
    
    </summary>
    
    
      <category term="生活福利" scheme="https://nymrli.top/tags/%E7%94%9F%E6%B4%BB%E7%A6%8F%E5%88%A9/"/>
    
      <category term="git" scheme="https://nymrli.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>同性交友网站Github的骚操作</title>
    <link href="https://nymrli.top/2019/09/21/%E5%90%8C%E6%80%A7%E4%BA%A4%E5%8F%8B%E7%BD%91%E7%AB%99Github%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
    <id>https://nymrli.top/2019/09/21/同性交友网站Github的骚操作/</id>
    <published>2019-09-21T03:56:19.000Z</published>
    <updated>2019-09-29T09:38:32.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同性交友网站github的骚操作"><a class="markdownIt-Anchor" href="#同性交友网站github的骚操作"></a> 同性交友网站Github的骚操作</h1><h2 id="单击列表"><a class="markdownIt-Anchor" href="#单击列表"></a> 单击列表</h2><p>当提Issue的时候，总会贴很长的代码，有没有什么办法美观一点呢，方法如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span><span class="tag">&lt;<span class="name">summary</span>&gt;</span>Content of debug log<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">Paste content here ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/2019/09/21/同性交友网站Github的骚操作/list.jpg" alt="list"></p><h2 id="copy-readme"><a class="markdownIt-Anchor" href="#copy-readme"></a> Copy README</h2><p>Q：别人的REAMDE都那么炫酷，怎么办呢？</p><p>A:点击他人的README.md文件，然后显示<code>Raw</code>就能看到html辣，由于markdown语法是支持嵌入html，因此只要把结构复制、改下内容就成了。</p><p><img src="/2019/09/21/同性交友网站Github的骚操作/copy.jpg" alt="copy"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://travis-ci.com/xkcoding/spring-boot-demo"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"Travis-CI"</span> <span class="attr">src</span>=<span class="string">"https://travis-ci.com/xkcoding/spring-boot-demo.svg?branch=master"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.codacy.com/app/xkcoding/spring-boot-demo?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=xkcoding/spring-boot-demo&amp;amp;utm_campaign=Badge_Grade"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"Codacy"</span> <span class="attr">src</span>=<span class="string">"https://api.codacy.com/project/badge/Grade/1f2e3d437b174bfc943dae1600332ec1"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://xkcoding.com"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"author"</span> <span class="attr">src</span>=<span class="string">"https://img.shields.io/badge/author-Yangkai.Shen-blue.svg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.oracle.com/technetwork/java/javase/downloads/index.html"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"JDK"</span> <span class="attr">src</span>=<span class="string">"https://img.shields.io/badge/JDK-1.8.0_162-orange.svg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://docs.spring.io/spring-boot/docs/2.1.0.RELEASE/reference/html/"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"Spring Boot"</span> <span class="attr">src</span>=<span class="string">"https://img.shields.io/badge/Spring Boot-2.1.0.RELEASE-brightgreen.svg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/xkcoding/spring-boot-demo/blob/master/LICENSE"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"LICENSE"</span> <span class="attr">src</span>=<span class="string">"https://img.shields.io/github/license/xkcoding/spring-boot-demo.svg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/xkcoding/spring-boot-demo/stargazers"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"star"</span> <span class="attr">src</span>=<span class="string">"https://img.shields.io/github/stars/xkcoding/spring-boot-demo.svg?label=Stars&amp;style=social"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/xkcoding/spring-boot-demo/network/members"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"star"</span> <span class="attr">src</span>=<span class="string">"https://img.shields.io/github/forks/xkcoding/spring-boot-demo.svg?label=Fork&amp;style=social"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/xkcoding/spring-boot-demo/watchers"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"star"</span> <span class="attr">src</span>=<span class="string">"https://img.shields.io/github/watchers/xkcoding/spring-boot-demo.svg?label=Watch&amp;style=social"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>中文 | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./README.en.md"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="项目条幅"><a class="markdownIt-Anchor" href="#项目条幅"></a> 项目条幅</h2><p><img src="/2019/09/21/同性交友网站Github的骚操作/NJUPT.jpg" alt="NJUPT"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![Stargazers</span>](<span class="link">https://img.shields.io/github/stars/NJUPTFreeExams/NJUPT-CS-Free-Exams.svg?style=for-the-badge</span>)](<span class="link">https://github.com/NJUPTFreeExams/NJUPT-CS-Free-Exams/stargazers</span>)</span><br><span class="line">[<span class="string">![Forks</span>](<span class="link">https://img.shields.io/github/forks/NJUPTFreeExams/NJUPT-CS-Free-Exams.svg?style=for-the-badge</span>)](<span class="link">https://github.com/NJUPTFreeExams/NJUPT-CS-Free-Exams/network/members</span>)</span><br><span class="line">[<span class="string">![cloed prs</span>](<span class="link">https://img.shields.io/github/issues-pr-closed-raw/NJUPTFreeExams/NJUPT-CS-Free-Exams.svg?style=for-the-badge</span>)](<span class="link">https://github.com/NJUPTFreeExams/NJUPT-CS-Free-Exams/pulls</span>)</span><br><span class="line">!</span><br></pre></td></tr></table></figure><h2 id="贡献者名单"><a class="markdownIt-Anchor" href="#贡献者名单"></a> 贡献者名单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">## 贡献者名单</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/imguozr"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://avatars1.githubusercontent.com/u/30227124?v=4"</span> <span class="attr">width</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/Wonz5130"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://avatars1.githubusercontent.com/u/35889526?v=4"</span> <span class="attr">width</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/Wen-He"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://avatars0.githubusercontent.com/u/18651139?v=4"</span> <span class="attr">width</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/chenkangyang"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://avatars2.githubusercontent.com/u/28588778?v=4"</span> <span class="attr">width</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/Davont"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://avatars0.githubusercontent.com/u/28757633?v=4"</span> <span class="attr">width</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;同性交友网站github的骚操作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#同性交友网站github的骚操作&quot;&gt;&lt;/a&gt; 同性交友网站Github的骚操作&lt;/h1&gt;
&lt;h2 id=&quot;单击列表&quot;&gt;&lt;a class=&quot;markdownI
      
    
    </summary>
    
    
      <category term="生活福利" scheme="https://nymrli.top/tags/%E7%94%9F%E6%B4%BB%E7%A6%8F%E5%88%A9/"/>
    
      <category term="git" scheme="https://nymrli.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>搭建Jupyter、JupyterLab服务器</title>
    <link href="https://nymrli.top/2019/09/21/%E6%90%AD%E5%BB%BAJupyter%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://nymrli.top/2019/09/21/搭建Jupyter服务器/</id>
    <published>2019-09-21T01:53:01.000Z</published>
    <updated>2019-10-07T10:24:11.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建jupyter服务器"><a class="markdownIt-Anchor" href="#搭建jupyter服务器"></a> 搭建Jupyter服务器</h1><p>1.配置好Python环境及安装pip</p><p>2.安装jupyter:</p><p><code>pip3 install jupyter</code> (此处使用的是python3)</p><p>3.生成配置文件</p><p><code>jupyter notebook --generate-config</code></p><p>4.生成密钥:</p><p>终端输入<code>$ ipython</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> notebook.auth <span class="keyword">import</span> passwd</span><br><span class="line">In [<span class="number">2</span>]: passwd()</span><br><span class="line">Enter password: </span><br><span class="line">Verify password: </span><br><span class="line"><span class="comment">#此时会让你两次输入密码，然后就会生成秘钥</span></span><br><span class="line"><span class="comment">#＊＊＊＊＊＊＊＊＊＊＊＊</span></span><br></pre></td></tr></table></figure><p>5.修改配置文件<code>vim ~/.jupyter/jupyter_notebook_config.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c=get_config()</span><br><span class="line">c.IPKernelApp.pylab =<span class="string">"inline"</span></span><br><span class="line">c.NotebookApp.ip=<span class="string">'*'</span> <span class="comment"># 设置所有ip皆可访问</span></span><br><span class="line">c.NotebookApp.password = <span class="string">'sha1:x'</span>   <span class="comment"># 刚生成的密文</span></span><br><span class="line">c.NotebookApp.open_browser = <span class="keyword">False</span>  <span class="comment"># 禁止自动打开浏览器</span></span><br><span class="line">c.NotebookApp.port = <span class="number">9999</span> <span class="comment"># 指定运行端口</span></span><br><span class="line">c.NotebookApp.notebook_dir = <span class="string">'/home/apollo3d/tf/jupyter_home'</span> <span class="comment"># 指定Jupyter的工作目录</span></span><br></pre></td></tr></table></figure><h1 id="拓展云服务器搭建神器jupyterlab转"><a class="markdownIt-Anchor" href="#拓展云服务器搭建神器jupyterlab转"></a> 拓展:<a href="https://blog.csdn.net/ds19991999/article/details/83663349?tdsourcetag=s_pctim_aiomsg#commentBox" target="_blank" rel="noopener">云服务器搭建神器JupyterLab(转)</a></h1><blockquote><p><a href="https://github.com/jupyterlab/jupyterlab" target="_blank" rel="noopener"><code>JupyterLab</code></a>是一个交互式的开发环境，其用于应对包含着<code>notebook</code>、代码以及数据的工作场景。</p></blockquote><h2 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1、前言</h2><p>如果说vim是编辑器之神，那么JupyterLab就是笔记本之神。</p><p>从2017年开始我注意到这一神奇的IDE笔记本，第一眼见到它，就觉得它真的太强大了，作为一个交互式的Python开发工具，其实也不算开发工具，准确的来说，它是一个演示代码的科学数据工具，支持markdown预览，支持Draw扩展，支持丰富的文件格式和多种开发语言，拥有众多插件诸于GitHub， Google-Dirve， Git和TOC，更重要的是，它是把浏览器当作开发工具，十分有创意。JupyterLab的开发者众多，GitHub上面的isuue也十分活跃，众多的大牛开发者也纷纷加入到JupyterLab的阵营，为JupyterLab的发展作贡献，JupyterLab得到迅速发展。</p><p>好的工具当然是要好好利用了，回归正题，怎样通过云服务器搭建一个可远程使用的JupyterLab?</p><h2 id="2-添加ppa源"><a class="markdownIt-Anchor" href="#2-添加ppa源"></a> 2、添加ppa源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@iZwz9huxtbd86xp91s3j16Z:~# sudo add-apt-repository ppa:chronitis/jupyter</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo: add-apt-repository: <span class="built_in">command</span> not found</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 出现这种情况,可以如下解决</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> $ sudo apt-get install software-properties-common</span></span><br></pre></td></tr></table></figure><h2 id="3-配置python"><a class="markdownIt-Anchor" href="#3-配置python"></a> 3、配置python</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install python-pip python-dev build-essential </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip install --upgrade pip <span class="comment"># </span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip install --upgrade virtualenv <span class="comment">#安装虚拟环境</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级pip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip3 install --upgrade pip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip2 install --upgrade pip</span></span><br></pre></td></tr></table></figure><p>如果没有换源,先进行换源,下载速度会快很多</p><ul><li>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a></li><li>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a></li><li>豆瓣(douban) <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a></li><li>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a></li><li>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ~/.pip/pip.conf</span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p><code>npm</code>和<code>yarn</code>也可以换源，更简单，自行<code>google</code>。</p><p><code>pip</code>国内的一些镜像包,换源之后出现<code>python2</code>版本过低的情况导致以前的包下载不了，那就直接将文件夹<code>~/.pip/pip.conf</code>删除就可以恢复原来的源。</p><p>pip指向问题<br>有时候会出现pip,pip2,pip3都TM指向python2，这个之后就需要改一下这这三个文件。</p><p>编辑这三个文件，将第一行注释分别改为python\python2\python3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~ $which pip</span><br><span class="line">/usr/local/bin/pip</span><br><span class="line">21:36 alien@alien-Inspiron-3443:</span><br><span class="line">~ $which pip2</span><br><span class="line">/usr/local/bin/pip2</span><br><span class="line">21:36 alien@alien-Inspiron-3443:</span><br><span class="line">~ $which pip3</span><br><span class="line">/usr/local/bin/pip3</span><br></pre></td></tr></table></figure><h3 id="安装yarn和nodejs"><a class="markdownIt-Anchor" href="#安装yarn和nodejs"></a> 安装<code>yarn</code>和<code>nodejs</code></h3><h4 id="配置仓库"><a class="markdownIt-Anchor" href="#配置仓库"></a> 配置仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class="line">echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list</span><br></pre></td></tr></table></figure><h4 id="安装yarn"><a class="markdownIt-Anchor" href="#安装yarn"></a> 安装<code>yarn</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install yarn</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果这边安装后,报错NameError: name <span class="string">'CoreConfig'</span> is not defined,那么需要更新nodejs版本</span></span><br></pre></td></tr></table></figure><p>注意这里<code>yarn</code>自动安装了<code>nodejs</code>，不过版本太低，安装<code>jupyterlab</code>的时候会出问题，而且使用<code>n</code>或者<code>nvm</code>安装的<code>nodejs</code>也有问题，总之<code>nodejs</code>要按照下面这种方式就没事，这个是官方的<code>bug</code>，官方<code>issue</code>也提到过，但是目前还未解决。</p><p>如果版本过低,安装插件、或是<code>jupyter lab build</code>发生<code>NameError: name 'CoreConfig' is not defined</code>错误,则可能是nodejs版本过低导致.我出现这个Bug后找了提了issue也没解决,后来突然想起了这边提到的<strong>nodejs版本问题</strong>,于是更新后解决…<a href="#nodejs%E6%9B%B4%E6%96%B0">nodejs更新方式见附录</a></p><h4 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装<code>nodejs</code></h4><p>创建一个新文件，输入两行<code>deb</code>，结束之后<code>Ctrl+C</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/apt/sources.list.d/nodesource.list</span><br><span class="line">deb https://deb.nodesource.com/node_6.x xenial main</span><br><span class="line">deb-src https://deb.nodesource.com/node_6.x xenial main</span><br></pre></td></tr></table></figure><p>导入公匙并安装<code>nodejs</code>，这个版本的<code>nodejs</code>对<code>jupyterlab</code>支持比较友好。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo apt-key add -</span><br><span class="line">sudo apt-get update</span><br><span class="line">apt-cache policy nodejs</span><br><span class="line">sudo apt-get install nodejs</span><br><span class="line">nodejs --version</span><br><span class="line"></span><br><span class="line">​```shell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 安装`ipython,matplotlib,scipy,pandas,numpy`</span></span></span><br><span class="line"></span><br><span class="line">最好`python2`和`python3`都安装。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装`JupyterLab`及其配置</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 配置同上文Jupyter配置</span></span><br><span class="line"></span><br><span class="line">​```shell</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo pip3 install jupyterlab</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成密码</span></span><br><span class="line">jupyter-notebook password</span><br></pre></td></tr></table></figure><h3 id="创建哈希密码"><a class="markdownIt-Anchor" href="#创建哈希密码"></a> 创建哈希密码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> notebook.auth <span class="keyword">import</span> passwd</span><br><span class="line">passwd()</span><br><span class="line"><span class="comment"># 输入你自己设置登录JupyterLab界面的密码，</span></span><br><span class="line"><span class="comment"># 然后就会生产下面这样的密码，将它记下来，待会儿用</span></span><br><span class="line"><span class="string">'sha1:b92f3fb7d848:a5d40ab2e26aa3b296ae1faa17aa34d3df351704'</span></span><br></pre></td></tr></table></figure><h3 id="修改jupyterlab配置文件"><a class="markdownIt-Anchor" href="#修改jupyterlab配置文件"></a> 修改<code>JupyterLab</code>配置文件</h3><p>先生成一个配置文件，记下输出的配置文件地址</p><p><code>jupyter lab --generate-config</code>-&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.allow_root = <span class="keyword">True</span> <span class="comment">#允许以root方式运行jupyterlab</span></span><br><span class="line">c.NotebookApp.ip = <span class="string">'0.0.0.0'</span> <span class="comment">#允许任意ip段访问</span></span><br><span class="line">c.NotebookApp.notebook_dir = <span class="string">u'/root/JupyterLab'</span> <span class="comment"># 设置jupyterlab页面的根目录</span></span><br><span class="line">c.NotebookApp.open_browser = <span class="keyword">False</span><span class="comment">#默认运行时不启动浏览器，因为服务器默认只有终端</span></span><br><span class="line">c.NotebookApp.password = <span class="string">u'sha1:b92f3fb7d848:a5d40ab2e26aa3b296ae1faa17aa34d3df351704'</span><span class="comment">#设置之前生产的哈希密码</span></span><br><span class="line">c.NotebookApp.port = <span class="number">8080</span><span class="comment">#设置访问端口</span></span><br></pre></td></tr></table></figure><p>到此，<code>JupyterLab</code>已经安装成功了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jupyter-lab --version</span><br><span class="line">0.33.12</span><br><span class="line">jupyter lab build</span><br></pre></td></tr></table></figure><p><code>jupyter lab build</code>时间有点久，如果没报错就成功了</p><h2 id="jupyterlab扩展安装"><a class="markdownIt-Anchor" href="#jupyterlab扩展安装"></a> <code>JupyterLab</code>扩展安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jupyter labextension list # 查看已经安装的扩展及其状态：</span><br><span class="line">jupyter labextension install @mflevine/jupyterlab_html # 比如安装一个扩展jupyterlab_html，支持html预览:</span><br><span class="line">jupyter labextension uninstall @mflevine/jupyterlab_html #卸载扩展:</span><br><span class="line">jupyter labextension update --all#更新所有扩展:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装一个生成目录的插件</span></span><br><span class="line">jupyter labextension install @jupyterlab/toc</span><br></pre></td></tr></table></figure><p>还有功能</p><ul><li>支持做图</li><li><code>markdown</code></li><li>多标签</li><li>内部打开网页</li><li><code>latex</code></li></ul><h3 id="快捷键"><a class="markdownIt-Anchor" href="#快捷键"></a> 快捷键</h3><p>编辑模式命令</p><ul><li>执行当前cell，执行后不自动调转到下一个cell：Ctrl-Enter</li><li>使当前的cell进入编辑模式：Enter</li><li>退出当前cell的编辑模式：Esc</li></ul><p>命令模式:</p><ul><li>删除当前的cell：双D</li><li>为当前的cell加入line number：单L</li><li>将当前的cell转化为具有一级标题的maskdown：单1</li><li>将当前的cell转化为具有二级标题的maskdown：单2</li><li>将当前的cell转化为具有三级标题的maskdown：单3</li><li>撤销对某个cell的删除：z</li><li>浏览器的各个Tab之间切换：Up和Dn</li></ul><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><h2 id="nodejs更新"><a class="markdownIt-Anchor" href="#nodejs更新"></a> nodejs更新</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看更新前的版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br><span class="line">v4.2.1</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo npm cache clean -f</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install -g n</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo n stable</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> 软链接,VERSION改成新的版本(删了后按TAB键)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -sf /usr/<span class="built_in">local</span>/n/versions/node/&lt;VERSION&gt;/bin/node /usr/bin/nodejs</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看是否更新成功</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br><span class="line">v10.16.3</span><br></pre></td></tr></table></figure><h2 id="安装内核"><a class="markdownIt-Anchor" href="#安装内核"></a> 安装内核</h2><p>安装Python内核</p><blockquote><p>如果需要python2和python3同时存在的话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip2 install ipykernel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip3 install ipykernel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看已经安装的内核</span></span><br><span class="line">jupyter kernelspec list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除你不需要的内核</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter kernelspec remove &lt;kernel_name&gt;</span></span><br><span class="line">/root/JupyterLab</span><br></pre></td></tr></table></figure><p>安装ijavascript</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:chronitis/jupyter</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ijavascript</span><br><span class="line"><span class="meta">#</span><span class="bash"> ihaskell、ijulia、irkernel、iruby</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/jupyter/jupyter/wiki/Jupyter-kernels</span></span><br></pre></td></tr></table></figure><h2 id="插件安装"><a class="markdownIt-Anchor" href="#插件安装"></a> 插件安装</h2><h3 id="jupyterlab-toc"><a class="markdownIt-Anchor" href="#jupyterlab-toc"></a> <a href="https://github.com/ian-r-rose/jupyterlab-toc" target="_blank" rel="noopener">jupyterlab-toc</a>(目录功能)</h3><p>Installation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter labextension install @jupyterlab/toc</span><br></pre></td></tr></table></figure><h3 id="jupyterlab-tensorboard"><a class="markdownIt-Anchor" href="#jupyterlab-tensorboard"></a> <a href="https://github.com/chaoleili/jupyterlab_tensorboard" target="_blank" rel="noopener">Jupyterlab-Tensorboard</a></h3><p>Installation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jupyter labextension install jupyterlab_tensorboard</span><br></pre></td></tr></table></figure><p><img src="http://image.rexking6.top/img/clip1545289777.png" alt="img"></p><p><img src="http://image.rexking6.top/img/clip1545289896.png" alt="img"></p><p><img src="http://image.rexking6.top/img/clip1545289906.png" alt="img"></p><p><img src="http://image.rexking6.top/img/clip1545289922.png" alt="img">](<a href="http://image.rexking6.top/img/clip1545289922.png" target="_blank" rel="noopener">http://image.rexking6.top/img/clip1545289922.png</a>)</p><h3 id="jupyterlab-drawio"><a class="markdownIt-Anchor" href="#jupyterlab-drawio"></a> <a href="https://github.com/QuantStack/jupyterlab-drawio" target="_blank" rel="noopener">JupyterLab drawio</a>(processon图)</h3><p>Installation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter labextension install jupyterlab-drawio</span><br></pre></td></tr></table></figure><p><img src="http://image.rexking6.top/img/clip1545289579.png" alt="img"></p><p>注,图片来自<a href="http://blog.rexking6.top/2018/12/20/JupyterLab%E6%8F%92%E4%BB%B6/" target="_blank" rel="noopener">RexKing6’s Note</a></p><h3 id="variableinspector"><a class="markdownIt-Anchor" href="#variableinspector"></a> variableinspector</h3><blockquote><p>像matlab一样查看工作区变量</p></blockquote><p><code>jupyter labextension install @lckr/jupyterlab_variableinspector</code></p><h3 id="go_to_definition插件"><a class="markdownIt-Anchor" href="#go_to_definition插件"></a> go_to_definition插件</h3><p>在lab中按alt+ 点击变量名 or 函数名，可以跳转到其对应的最初定义的地方(注意看闪烁光标的位置变化)。</p><p><img src="https://pic2.zhimg.com/v2-14d06c618b4fa8a7fffb2455576a5bb9_b.webp" alt="img"></p><h2 id="快捷键-2"><a class="markdownIt-Anchor" href="#快捷键-2"></a> 快捷键</h2><p>Up : 选中上方单元<br>K : 选中上方单元<br>Down : 选中下方单元<br>J : 选中下方单元<br>Shift-K : 扩大选中上方单元<br>Shift-J : 扩大选中下方单元<br>A : 在上方插入新单元<br>B : 在下方插入新单元<br>X : 剪切选中的单元<br>C : 复制选中的单元<br>Shift-V : 粘贴到上方单元<br>V : 粘贴到下方单元<br>Z : 恢复删除的最后一个单元<br>D,D : 删除选中的单元<br>Shift-M : 合并选中的单元<br>I,I : 中断Notebook内核0,0<br>0,0 :重启Notebook内核<br>Tab : 代码补全或缩进<br>Shift-Tab : 提示<br>Ctrl-] : 缩进<br>Ctrl-[ : 解除缩进<br>Ctrl-A : 全选<br>Ctrl-Z : 复原<br>Ctrl-Shift-Z : 再做<br>Ctrl-Y : 再做<br>Ctrl-Home : 跳到单元开头<br>Ctrl-Up : 跳到单元开头<br>Ctrl-End : 跳到单元末尾<br>Ctrl-Down : 跳到单元末尾<br>Ctrl-Left : 跳到左边一个字首<br>Ctrl-Right : 跳到右边一个字首<br>Ctrl-Backspace : 删除前面一个字<br>Ctrl-Delete : 删除后面一个字<br>Esc : 进入命令模式<br>Ctrl-M : 进入命令模式<br>Shift-Enter : 运行本单元，选中下一单元<br>Ctrl-Enter : 运行本单元<br>Alt-Enter : 运行本单元，在下面插入一单元<br>Ctrl-Shift-- : 分割单元<br>Ctrl-Shift-Subtract : 分割单元<br>Ctrl-S : 文件存盘<br>Shift : 忽略<br>Up : 光标上移或转入上一单元<br>Down :光标下移或转入下一单元</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建jupyter服务器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#搭建jupyter服务器&quot;&gt;&lt;/a&gt; 搭建Jupyter服务器&lt;/h1&gt;
&lt;p&gt;1.配置好Python环境及安装pip&lt;/p&gt;
&lt;p&gt;2.安装jupyter:&lt;/p
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>深度学习</title>
    <link href="https://nymrli.top/2019/09/19/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://nymrli.top/2019/09/19/深度学习/</id>
    <published>2019-09-19T12:32:44.000Z</published>
    <updated>2019-10-05T07:28:34.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度学习神经网络"><a class="markdownIt-Anchor" href="#深度学习神经网络"></a> 深度学习——神经网络</h1><h2 id="构建网络的总原则"><a class="markdownIt-Anchor" href="#构建网络的总原则"></a> 构建网络的总原则</h2><p>一、增大网络容量，直到过拟命<br>二、采取措施抑制过拟合<br>三、继续增大网络容量，直到过拟合</p><h2 id="线性回归"><a class="markdownIt-Anchor" href="#线性回归"></a> 线性回归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Commented out IPython magic to ensure Python compatibility.</span></span><br><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># %matplotlib inline</span></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">80</span>,<span class="number">50</span>)</span><br><span class="line">y = <span class="number">3</span>*x + np.random.randn(<span class="number">50</span>)*<span class="number">15</span></span><br><span class="line"><span class="comment"># print(x,y,sep='\n')</span></span><br><span class="line">plt.scatter(x,y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化模型</span></span><br><span class="line">model = keras.Sequential()</span><br><span class="line"><span class="comment"># 增加一层：全连接层</span></span><br><span class="line">model.add(layers.Dense(<span class="number">1</span>,input_dim=<span class="number">1</span>))</span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译模型</span></span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>,</span><br><span class="line">             loss=<span class="string">'mse'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">model.fit(x,y,epochs=<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="comment">#for setp in range(3001):</span></span><br><span class="line"><span class="comment">#    cost = model.train_on_batch(x_data,y_data)</span></span><br><span class="line"><span class="comment">#    if step % 500 == 0:</span></span><br><span class="line"><span class="comment">#        print('cost:',cost)</span></span><br><span class="line"><span class="comment">#w,b = model.layers[0].get_weights()</span></span><br><span class="line"></span><br><span class="line">predict_y = model.predict(x)</span><br><span class="line">plt.scatter(x,y,s=<span class="number">10</span>,c=<span class="string">'r'</span>)</span><br><span class="line">plt.plot(x,predict_y)</span><br></pre></td></tr></table></figure><p>非线性回归</p><h2 id="激活函数"><a class="markdownIt-Anchor" href="#激活函数"></a> 激活函数</h2><p>softmax</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>i</mi></mrow></msub><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mrow><mi>i</mi></mrow></msup></mrow><mrow><msub><mo>∑</mo><mrow><mi>j</mi></mrow></msub><msup><mi>e</mi><mrow><mi>j</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">S_{i}=\frac{e^{i}}{\sum_{j} e^{j}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.97786em;"></span><span class="strut bottom" style="height:1.6300869999999998em;vertical-align:-0.6522269999999999em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.3449999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mop"><span class="op-symbol small-op mop" style="top:0.074995em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05724em;">j</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05724em;">j</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><h3 id="sigmod"><a class="markdownIt-Anchor" href="#sigmod"></a> sigmod:</h3><h4 id="logistic"><a class="markdownIt-Anchor" href="#logistic"></a> logistic:</h4><blockquote><p>范围是[0,1]</p></blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>=</mo><mfrac><mrow><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><mi>t</mi></mrow></msup></mrow><mrow><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><mi>t</mi></mrow></msup><mo>+</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>1</mn><mo>+</mo><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><mo>−</mo><mi>t</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">f(t)=\frac{\mathrm{e}^{t}}{\mathrm{e}^{t}+1}=\frac{1}{1+\mathrm{e}^{-t}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9556399999999999em;"></span><span class="strut bottom" style="height:1.358971em;vertical-align:-0.403331em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class=""><span class="mord scriptstyle cramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class=""><span class="mord scriptstyle uncramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span><span class="mbin">+</span><span class=""><span class="mord scriptstyle cramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord">−</span><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><h3 id="relu"><a class="markdownIt-Anchor" href="#relu"></a> reLU</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo>(</mo><mn>0</mn><mo separator="true">,</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">f(x)=max(0,x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mopen">(</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathit">x</span><span class="mclose">)</span></span></span></span></p><h3 id="tanh"><a class="markdownIt-Anchor" href="#tanh"></a> tanh</h3><blockquote><p>跟sigmoid函数很像,但是范围是[-1,1],而不是[0,1],实质是sigmoid函数平移</p></blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>tanh</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mfrac><mrow><mi>sinh</mi><mi>x</mi></mrow><mrow><mi>cosh</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mrow><mi>x</mi></mrow></msup><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mrow><msup><mi>e</mi><mrow><mi>x</mi></mrow></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\tanh(x)=\frac{\sinh x}{\cosh x}=\frac{e^{x}-e^{-x}}{e^{x}+e^{-x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.939765em;"></span><span class="strut bottom" style="height:1.343096em;vertical-align:-0.403331em;"></span><span class="base textstyle uncramped"><span class="mop">tanh</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mop">cosh</span><span class="mord mathit">x</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mop">sinh</span><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord">−</span><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mord">−</span><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><p>TensorFlow中其他的函数：</p><p>●tf.nn.elu(x)： 指数线性单元； 如果输入小于0， 返回exp(x)-1； 否<br>则， 返回x；<br>●tf.softsign(x)： 返回x/(abs(x)+1)；<br>●tf.nn.bias_add(value,bias)： 增加一个bias到value。</p><h2 id="tensorflow"><a class="markdownIt-Anchor" href="#tensorflow"></a> Tensorflow:</h2><blockquote><ul><li>张量——数据  :</li><li>多维数组,阶:张量的维数</li><li>计算图——神经网络</li><li>搭建神经网络的计算过程,只搭建,不运算</li></ul><p>会话——执行计算图===&gt;优化线上的权重====&gt;权重</p></blockquote><p>神经网络实现过程</p><blockquote><p>1.准备数据集,提取特征,作为输入<br>2.搭建NN结构,从输入到输出==&gt;(NN前向传播)</p><p>3.大量特征数据喂给NN,迭代优化NN参数==&gt;(NN反向传播)</p><p>4.使用训练好的模型预测和分类</p></blockquote><p><strong>====&gt;八股:准备,前传,后传,迭代&lt;====</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x  = tf.placehold(tf.float32,shape=(<span class="number">1</span>,<span class="number">2</span>))   <span class="comment">#占位符</span></span><br><span class="line">sess.run(要计算的节点,feed_dict=&#123;x:[[<span class="number">1.3</span>,<span class="number">2.0</span>]]&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Init_op =  tf.global_variables_initializer()</span><br><span class="line">sess.run(Init_op)</span><br></pre></td></tr></table></figure><p>y = matmul(x,w1)`相乘</p><h1 id="tensorflow机器学习项目实战笔记"><a class="markdownIt-Anchor" href="#tensorflow机器学习项目实战笔记"></a> 《TensorFlow机器学习项目实战》笔记</h1><h2 id="张量"><a class="markdownIt-Anchor" href="#张量"></a> 张量</h2><p>TensorFlow基于张量数据管理。 张量是数学领域的概念， 并且被开<br>发为向量和矩阵的线性代数项的泛化。 一个张量就是一个张量类的实例， 是绑定了相关运算的一个<strong>特定类型的多维数组</strong>。</p><p>张量的属性</p><ul><li>有一个静态的类型和动态的维数</li><li>只有张量类型的对象才能在计算图的节点中<br>传递。</li><li>秩rank</li><li>数据类型type</li><li>形状shape</li></ul><h2 id="numpy数组到tensorflow张量"><a class="markdownIt-Anchor" href="#numpy数组到tensorflow张量"></a> numpy数组到TensorFlow张量</h2><p>TensorFlow与numpy是可互操作的， 通常调用eval()函数会返回<br>numpy对象。因为张量对象只是一个操作结果的符号化句柄， 所以它并不持有该操作的结果 ,必须使用eval()方法来获得实际的<br>值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf <span class="comment">#we import tensorflow</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment">#we import numpy</span></span><br><span class="line">sess = tf.Session() <span class="comment">#start a new Session Object</span></span><br><span class="line">x_data = np.array([[<span class="number">1.</span>,<span class="number">2.</span>,<span class="number">3.</span>],</span><br><span class="line">[<span class="number">3.</span>,<span class="number">2.</span>,<span class="number">6.</span>]]) <span class="comment"># 2x3 matrix</span></span><br><span class="line">x = tf.convert_to_tensor(x_data,</span><br><span class="line">dtype=tf.float32) <span class="comment">#Finally, we create the</span></span><br><span class="line"><span class="comment">#tensor, starting from the fload 3x matrix</span></span><br></pre></td></tr></table></figure><p>tf.convert_to_tensor``： 该方法将Python对象转化为tensor对象。 它的<br>输入可以是tensor对象、 numpy数组、 Python列表和Python标量。</p><p>数据流图(data flow graph)</p><blockquote><p>数据流图是完整的TensorFlow计算</p></blockquote><ul><li><p>节点(node) 表示操作(operation) ,实现数学运算， 同时也表示数据或变量的供给(feed) ， 或输出结果 。一旦其输入边缘上的所有张量都到位， 则开始异步地并行执行</p></li><li><p>边(edge) 表示各操作之间流通的数据 ,描述节点之间的输入/输出关系。 这些数据边缘专门传输张量</p></li></ul><p>计算图(computation graph)</p><blockquote><p>由用户在创建张量(tensor) 和操作(op</p></blockquote><p>有用的操作对象方法如下：<br>●tf.Operation.type： 返回操作的类型(例如， MatMul) ；<br>●tf.Operation.inputs： 返回表示操作的输入张量对象列表；<br>●tf.Graph.get_operations()： 返回计算图中的操作列表；<br>●tf.Graph.version： 返回计算图的版本信息。</p><h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h2><blockquote><p>正如字面意思所示,是个变化的量。在TensorFlow具体表现为需要更新的参数</p></blockquote><p>在大多数计算中， 会多次执行计算图。 大多数张量的生存周期不会<br>超过单次执行周期。 然而， 变量是一种特殊的操作， 它返回一个持久<br>的、 可变的张量的句柄， 存活于多次计算图执行之中。 对于TensorFlow<br>的机器学习应用， 模型的参数通常存储在变量中， 并且在运行模型的训<br>练阶段被更新。</p><h2 id="placehold"><a class="markdownIt-Anchor" href="#placehold"></a> placehold</h2><p>给之后喂给的数据占位</p><h2 id="会话"><a class="markdownIt-Anchor" href="#会话"></a> 会话</h2><p>客户端程序通过创建会话(Session)与TensorFlow系统交互。<br>Session对象是运行环境的表示。Session对象开始为空，当程序员创建不同的操作和张量时，它们将被自动添加到Session，直到Run方法被调用，才开始运算。<br>Run方法输入是需要计算的操作，以及一组可选的张量，用来代替图中某些节点的输出。<br>如果我们调用这个方法，并且有命名操作所依赖的操作，Session对象将执行所有这些操作，然后继续执行命名操作。<br>用以下简单的代码可以创建一个会话：<br>s=tf.Session()</p><p>矩阵运算</p><p>转置、 乘法、 获取行列式和逆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tf. transpose(x). eval()<span class="comment"># Transpose</span></span><br><span class="line">tf. matmul(x,y). eval()<span class="comment"># Matrix</span></span><br><span class="line">tf. matrix determinant(floatx). eval()<span class="comment"># 行列式</span></span><br><span class="line">tf.matrix_inverse(floatx).eval() <span class="comment"># 求逆</span></span><br></pre></td></tr></table></figure><p>约简(reduction) 是一种跨维度张量操作， 计算结果比原张量缩减<br>一个维度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf </span><br><span class="line">In[<span class="number">2</span>]: sess=tf. InteractiveSession()</span><br><span class="line"></span><br><span class="line">In[<span class="number">3</span>]:x=tf. constant([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">                    [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],</span><br><span class="line">                    [<span class="number">-1</span>,<span class="number">2</span>,<span class="number">-3</span>]])</span><br><span class="line"></span><br><span class="line">In[<span class="number">5</span>]: tf.reduce_prod(x, reduction_indices=<span class="number">1</span>). eval() <span class="comment"># reduce prod,行操作,0为列操作</span></span><br><span class="line">    <span class="number">0</span>ut[<span class="number">5</span>]: array([<span class="number">6</span>,<span class="number">6</span>,<span class="number">-6</span>], dtype=int32)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: tf. reduce_min(x, reduction_indices=<span class="number">1</span>). eval()<span class="comment"># reduce min</span></span><br><span class="line">    <span class="number">0</span>ut[<span class="number">6</span>]: array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">-3</span>], dtype=int32)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: tf. reduce_max(x, reduction_indices=<span class="number">1</span>). eval()<span class="comment"># reduce max</span></span><br><span class="line">    <span class="number">0</span>ut[<span class="number">7</span>]: array([<span class="number">3</span>,<span class="number">3</span>,<span class="number">-1</span>], dtype=int32)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: tf. reduce_mean(x, reduction indices=<span class="number">1</span>). eval()<span class="comment"># reduce mean</span></span><br><span class="line">    <span class="number">0</span>ut[<span class="number">8</span>]: array([ <span class="number">2</span>,<span class="number">2</span>,<span class="number">-2</span>], dtype=int32) </span><br><span class="line">In[<span class="number">9</span>]: tf. reduce_all(boolean_tensor, reduction_indices=<span class="number">1</span>). eval()<span class="comment"># reduce all </span></span><br><span class="line">    Out[<span class="number">9</span>]: array([ <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>], dtype=bool)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: tf. reduce_any(boolean_tensor,</span><br></pre></td></tr></table></figure><p>序列实用程序包括诸如argmin和argmax(显示维度的最小和最大<br>值) ， listdiff(显示列表之间的交集的补码) ， where(显示张量上的真<br>实值的索引) 和unique(在列表上去除重复的元素) 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf sess=tf. InteractiveSession()</span><br><span class="line">x=tf. constant([[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">-5</span>],</span><br><span class="line">…:[<span class="number">0</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">5</span>],……:[<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>],…:[<span class="number">6</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0j</span>j)</span><br><span class="line">listx=tf. constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line">listy=tf. constant([<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line">boolx=tf. constant([[ <span class="keyword">True</span>, <span class="keyword">False</span>],</span><br><span class="line">[ <span class="keyword">False</span>, <span class="keyword">True</span>]])</span><br><span class="line">                             </span><br><span class="line">tf. argmin(x,<span class="number">1</span>). eval()<span class="comment"># Position of the maximum value of columns</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>])</span><br><span class="line">                             </span><br><span class="line">tf. argmax(x,<span class="number">1</span>). eval()<span class="comment"># Position of the minimum value of rows</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>])</span><br><span class="line">                             </span><br><span class="line">tf. listdiff(listx, listy)[<span class="number">0</span>]. eval()<span class="comment">#List differences</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>], dtype=int32)</span><br><span class="line">                             </span><br><span class="line">tf.where(boolx). eval()<span class="comment"># Show true values</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([[o,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line">                             </span><br><span class="line">tf. unique(listx)[<span class="number">0</span>]. eval()<span class="comment"># Unique values in list</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>], dtype=int32)</span><br></pre></td></tr></table></figure><p>形状变换 :</p><p>例如squeeze和expand_dims。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf </span><br><span class="line">In [<span class="number">2</span>]: sess=tf. InteractiveSession()</span><br><span class="line">In [<span class="number">3</span>]:x=tf. constant([[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">-5</span>],</span><br><span class="line">                    ……:[<span class="number">0</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">5</span>],</span><br><span class="line">                    …:[<span class="number">4</span>,<span class="number">3153</span>,</span><br><span class="line">                    …:[<span class="number">6</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>]])</span><br><span class="line">tf. shape(x). eval()<span class="comment"># Shape of the tensor</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([<span class="number">4</span>,<span class="number">4</span>], dtype=int32)</span><br><span class="line">tf. size(x). eval()<span class="comment"># size of the tensor</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">16</span></span><br><span class="line">tf. rank(x). eval()<span class="comment"># rank of the tensor</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span></span><br><span class="line">tf. reshape(x,[<span class="number">8</span>,<span class="number">2</span>]). eval()<span class="comment">#</span></span><br><span class="line">converting to a <span class="number">10</span>×<span class="number">2</span> matrix</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">array([[ <span class="number">2</span>,<span class="number">5</span>],</span><br><span class="line">[<span class="number">3</span>,<span class="number">-5</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">3</span>],</span><br><span class="line">[<span class="number">-2</span>,<span class="number">5</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">4</span>],</span><br><span class="line">[<span class="number">3</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">5</span>,<span class="number">3</span>],</span><br><span class="line">[<span class="number">6</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">4</span>,<span class="number">0</span>]], dtype=int32)</span><br><span class="line">tf. squeeze(x). eval()<span class="comment"># squeezing</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([[ <span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">-5</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">5</span>],</span><br><span class="line"><span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>],</span><br><span class="line">[<span class="number">6</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>]], dtype=int32)</span><br><span class="line">tf. expand_dims(x,<span class="number">1</span>). eval()<span class="comment"># Expanding dims</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">array([[[ <span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">-5</span>]],</span><br><span class="line">[[ <span class="number">0</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">5</span>]],</span><br><span class="line">[[<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>]],</span><br><span class="line">[i <span class="number">6</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0j</span>ji, dtype=int32)</span><br></pre></td></tr></table></figure><p>切片(slicing) 和连接(joining) :提取矩阵切片、 拆分、 添加填充(add padding) ， 以及打包(pack) 和解包(unpack) 行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf sess=tf. InteractiveSession()</span><br><span class="line">t_matrix=tf. constant([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">                    ……:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">                    …:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">t_array=tf. constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>])</span><br><span class="line">t array2=tf. constant([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]) tf. </span><br><span class="line"></span><br><span class="line">slice(t _matrix,[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>]). eval()</span><br><span class="line"><span class="comment"># cutting an slice</span></span><br><span class="line">&gt;&gt;&gt;array([[<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">[<span class="number">8</span>,<span class="number">9</span>]], dtype=int32)</span><br><span class="line">tf. split(<span class="number">0</span>,<span class="number">2</span>,t_array)<span class="comment"># splitting the array in two</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[&lt;tf. Tensor <span class="string">' split:0'</span> shape=(<span class="number">4</span>,) dtype=int32&gt;,</span><br><span class="line">&lt;tf. Tensor <span class="string">' split:1'</span> shape=(<span class="number">4</span>,) dtype=int32&gt;]</span><br><span class="line"></span><br><span class="line">tf. tile([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>]). eval()<span class="comment"># tiling this little tensor 3 times重复</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>], dtype=int32)</span><br><span class="line"></span><br><span class="line">tf. pad(t_matrix,[[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">1</span>]]). evai()<span class="comment">#padding</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array(i[o,o,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>],[o<span class="number">.0</span><span class="number">.7</span><span class="number">.8</span><span class="number">.9</span><span class="number">.01</span>.</span><br><span class="line">[o,o,o,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]], dtype=int32)</span><br><span class="line"></span><br><span class="line">tf. concat(<span class="number">0</span>,[t_array, t_array2]). eval()<span class="comment"># concatenating list</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,</span><br><span class="line"><span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>], dtype=int32)</span><br><span class="line"></span><br><span class="line">tf. pack([t_array,t_array2]). eval()<span class="comment"># packing 拼接</span></span><br><span class="line"><span class="number">0</span>ut[<span class="number">11</span>]:array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>],</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]], dtype=int32)</span><br><span class="line">    </span><br><span class="line">sess.run(tf. unpack(t_matrix))<span class="comment">#Unpacking, we need the run method to view the tensors</span></span><br><span class="line">&gt;&gt;&gt;[array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],dtype=int32),</span><br><span class="line">array([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],dtype=int32),</span><br><span class="line">array([<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];dtype=int32)</span><br><span class="line">    </span><br><span class="line">In [<span class="number">13</span>]: tf. reverse(t_matrix,</span><br><span class="line">[ <span class="keyword">False</span>, <span class="keyword">True</span>]). eval()<span class="comment"># Reverse matrix,行不变,列反转</span></span><br><span class="line"><span class="number">0</span>ut[<span class="number">13</span>]: array([[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">6</span>,<span class="number">5</span>,<span class="number">41</span>;</span><br><span class="line"><span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>]], dtype=int32)</span><br></pre></td></tr></table></figure><p>从磁盘读取信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表格式——CSV </span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">sess=tf.Session()</span><br><span class="line">filename_queue= tf.train.string_input_producer(</span><br><span class="line">tf.train.match_filenames_once(<span class="string">"./*.csv"</span>),</span><br><span class="line">shuffle=<span class="keyword">True</span>)</span><br><span class="line">reader=tf.TextLineReader(skip_header_lines=<span class="number">1</span>)</span><br><span class="line">key, value=reader.read(filename_queue)</span><br><span class="line">record_defaults=[[<span class="number">0.</span>],[<span class="number">0.</span>],[<span class="number">0</span>],[<span class="number">0.</span>],[<span class="string">""</span>]]</span><br><span class="line">col1, col2, col3, col4, col5=</span><br><span class="line">tf.decode_csv(value,</span><br><span class="line">record_defaults=record_defaults)<span class="comment"># Convert CSV</span></span><br><span class="line">records to tensors.Each</span><br><span class="line"><span class="comment"># column maps to one tensor.</span></span><br><span class="line">features=tf.pack([ col1, col2, col3, col4])</span><br><span class="line">tf.initialize_all_variables().run(session=sess)</span><br><span class="line">coord=tf.train.Coordinator()</span><br><span class="line">threads=</span><br><span class="line">tf.train.start_queue_runners(coord=coord, sess=sess)</span><br><span class="line"><span class="keyword">for</span> iteration <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">example=sess.run([ features])</span><br><span class="line">print(example)</span><br><span class="line">coord.request_stop()</span><br><span class="line">coord.join(threads)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载和处理图像</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf sess=tf.Session()</span><br><span class="line">filename_queue=</span><br><span class="line">tf.train.string_input_producer(tf.train.match_filenames_once(<span class="string">'./blue_jay.jpg'</span>))</span><br><span class="line">reader=tf.WholeFileReader()</span><br><span class="line">key, value= reader.read(filename_queue)</span><br><span class="line">image=tf.image.decode_jpeg(value)</span><br><span class="line">fliplmageUpDown=tf.image.encode _jpeg(tf.image.fli </span><br><span class="line">p_up_down(image))<span class="comment"># 获得上下翻转的图片                                   </span></span><br><span class="line">fliplmageleftRight=tf.image.encode_jpeg(tf.image.flip_left_right(image))<span class="comment"># 获得左右翻转的图片    </span></span><br><span class="line">tf.initialize_all_variables().run(session=sess)</span><br><span class="line">coord=tf.train.Coordinator()</span><br><span class="line">threads=</span><br><span class="line">tf.train.start_queue_runners(coord=coord, sess=sess)</span><br><span class="line">example=sess.run(fliplmageLeftRight)</span><br><span class="line"><span class="keyword">print</span> example file=open (<span class="string">"flippedUpDown.jpg"</span>,<span class="string">"wb+"</span>)</span><br><span class="line">file.write (fliplmageUpDown.eval(session=sess))<span class="comment"># 写入上下翻转图</span></span><br><span class="line">file.close()</span><br><span class="line">file=open (<span class="string">"flippedLeftRight.jpg"</span>,<span class="string">"wb+"</span>)<span class="comment"># 写入左右翻转图</span></span><br><span class="line">file.write</span><br><span class="line">(fliplmageLeftRight.eval(session=sess))</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>流程:</p><ol><li>创建一个文件队列对象:<code>tf.train.string_input_producer(tf.train.match_filenames_once('xxx'))</code></li><li>创建一个reader对象</li><li>读取,并解码</li><li>提取特征</li><li><code>initialize_all_variables</code>-&gt;<code>Coordinator</code>-&gt;<code>start_queue_runners</code>-&gt;run</li></ol><h2 id="logit函数"><a class="markdownIt-Anchor" href="#logit函数"></a> logit函数</h2><p>\operatorname{logit}(\mathrm{p})=\log \left(\frac{\mathrm{p}}{1-\mathrm{p}}\right)</p><p>该函数实现了从区间[0,1]到区间(-∞,+∞)之间的映射。 那么我们只要将y用一个输入的线性函数替换， 那么就实现了输入的线性变化和区间[0,1]之间的映射。</p><p><img src="/2019/09/19/深度学习/E:%5Chexo%5Csource_posts%5C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%5Clogit.jpg" alt="logit"></p><h2 id="logistic函数"><a class="markdownIt-Anchor" href="#logistic函数"></a> logistic函数</h2><p>对数几率函数的逆函数</p><p>\operatorname{logit}^{-1}(\alpha)=\operatorname{logistic}(\alpha)=\frac{1}{1+\exp (-\alpha)}=\frac{\operatorname{ep}(\alpha)}{\exp (\alpha)+1}</p><p>这是一个Sigmoid函数。<br>Logistic函数将使得我们能够在我们的回归任务表示为二项选择。</p><p><img src="/2019/09/19/深度学习/E:%5Chexo%5Csource_posts%5C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%5Csigmoid.jpg" alt="sigmoid"></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>=</mo><mfrac><mrow><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><mi>t</mi></mrow></msup></mrow><mrow><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><mi>t</mi></mrow></msup><mo>+</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>1</mn><mo>+</mo><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><mo>−</mo><mi>t</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sigma(t)=\frac{\mathrm{e}^{t}}{\mathrm{e}^{t}+1}=\frac{1}{1+\mathrm{e}^{-t}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9556399999999999em;"></span><span class="strut bottom" style="height:1.358971em;vertical-align:-0.403331em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class=""><span class="mord scriptstyle cramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class=""><span class="mord scriptstyle uncramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span><span class="mbin">+</span><span class=""><span class="mord scriptstyle cramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord">−</span><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><p>一般的解释就是t为一个独立变量， 该函数将t映射到区间[0,1]之<br>间。 但是我们提升了这个模型， 将t转变为变量x的一个线性映射(当x<br>是一个多变量的向量时， t就是该向量中各个元素的线性组合) 。</p><p>我们可以将t表示如下：<br>t=wx+b<br>我们就能够得到以下方程 \operatorname{logit}(\mathrm{p})=\operatorname{In}\left(\frac{p}{1-p}\right)=w x+b</p><p>对于所有的元素， 我们计算了回归方程， 得出如下概率。 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>p</mi></mrow><mo>^</mo></mover><mo>=</mo><mfrac><mrow><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><msub><mi>β</mi><mrow><mn>0</mn></mrow></msub><mo>+</mo><msub><mi>β</mi><mrow><mn>1</mn></mrow></msub><mi>x</mi></mrow></msup></mrow><mrow><mn>1</mn><mo>+</mo><msup><mrow><mi mathvariant="normal">e</mi></mrow><mrow><msub><mi>β</mi><mrow><mn>0</mn></mrow></msub><mo>+</mo><msub><mi>β</mi><mrow><mn>1</mn></mrow></msub><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\hat{p}=\frac{\mathrm{e}^{\beta_{0}+\beta_{1} x}}{1+\mathrm{e}^{\beta_{0}+\beta_{1} x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.99532em;"></span><span class="strut bottom" style="height:1.436116em;vertical-align:-0.44079599999999997em;"></span><span class="base textstyle uncramped"><span class="mord accent"><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord textstyle cramped"><span class="mord mathit">p</span></span></span><span style="top:0em;margin-left:0.16668em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="accent-body"><span>^</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.38246499999999994em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span><span class="mbin">+</span><span class=""><span class="mord scriptstyle cramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.32177857142857147em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord"><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="vlist"><span style="top:0.29964em;margin-right:0.1em;margin-left:-0.05278em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptscriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="vlist"><span style="top:0.29964em;margin-right:0.1em;margin-left:-0.05278em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptscriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class=""><span class="mord scriptstyle uncramped"><span class="mord mathrm">e</span></span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="vlist"><span style="top:0.29964em;margin-right:0.1em;margin-left:-0.05278em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptscriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="vlist"><span style="top:0.29964em;margin-right:0.1em;margin-left:-0.05278em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptscriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><p>线性函数的参数起什么作用呢？ 它们可以改变直线的斜率和<br>Sigmoid函数零的位置。 通过调整线性方程中的参数， 来缩小预测值与<br>真实值之间的差距。</p><p>Logistic函数的属性<br>函数空间中每个曲线都可以被描述成它所应用的可能目标。 具体到Logistic函数：<br>●事件的可能性p依赖于一个或者多个变量。 比如， 根据之前的资<br>历,预测获奖的可能性。<br>●对于特定的观察， 估算事件发生的可能性。<br>●预测改变独立变量对二项响应的影响。<br>●通过计算可能性， 将观测分配到某个确定的类。</p><p>损失函数</p><p>loss <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo>−</mo><msub><mo>∑</mo><mrow><mi>i</mi></mrow></msub><msub><mi>y</mi><mrow><mi>i</mi></mrow></msub><mo>∙</mo><mi>log</mi><mrow><mo fence="true">(</mo><mi>y</mi><mi>p</mi><mi>r</mi><mi>e</mi><msub><mi>d</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow><mo>+</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><msub><mi>y</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow><mo>∙</mo><mi>log</mi><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mi>y</mi><mi>p</mi><mi>r</mi><mi>e</mi><msub><mi>d</mi><mrow><mi>i</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">=-\sum_{i} y_{i} \bullet \log \left(y p r e d_{i}\right)+\left(1-y_{i}\right) \bullet \log \left(1-y p r e d_{i}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.0500099999999999em;vertical-align:-0.30001em;"></span><span class="base textstyle uncramped"><span class="mrel">=</span><span class="mord">−</span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">∙</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathit">p</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">e</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">+</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∙</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathit">p</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">e</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span></span></span></span></p><p>该损失函数的主要性质就是偏爱相似行为， 而当误差超过0.5的时<br>候， 惩罚会急剧增加。</p><p>多类分类应用——Softmax回归</p><p>当我们面对多于二类的情况， 通常有两种方法： 一对多和一对所<br>有。<br>●第一类技术计算多个模型。 针对每个类都计算一个“一vs所有<br>(one against all) ”的概率。<br>●第二类技术只计算出一个概率集合， 每个概率表示属于其中某一<br>类的可能性。<br>●第二种技术的输出是Softmax回归格式， 这是Logistic回归对于n类<br>的泛化。</p><p>损失函数</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>s</mi><mi>s</mi><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi></mrow></msub><msub><mo>∑</mo><mrow><mi>c</mi></mrow></msub><msub><mi>y</mi><mrow><mi>c</mi></mrow></msub><mo>∙</mo><mi>log</mi><mrow><mo fence="true">(</mo><mi>y</mi><mi>p</mi><mi>r</mi><mi>e</mi><msub><mi>d</mi><mrow><mi>c</mi></mrow></msub><mo fence="true">)</mo></mrow><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi></mrow></msub><msub><mo>∑</mo><mrow><mi>c</mi></mrow></msub><msub><mi>y</mi><mrow><mi>c</mi></mrow></msub><mo>∙</mo><mfrac><mrow><msup><mi>e</mi><mrow><mo>−</mo><msub><mi>x</mi><mrow><mi>c</mi></mrow></msub></mrow></msup></mrow><mrow><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>c</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>log</mi><mrow><mo fence="true">(</mo><msup><mi>e</mi><mrow><mo>−</mo><msub><mi>x</mi><mrow><mi>j</mi></mrow></msub></mrow></msup><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">loss=\sum_{i} \sum_{c} y_{c} \bullet \log \left(y p r e d_{c}\right)=\sum_{i} \sum_{c} y_{c} \bullet \frac{e^{-x_{c}}}{\sum_{j=0}^{c-1} \log \left(e^{-x_{j}}\right)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.939765em;"></span><span class="strut bottom" style="height:1.749765em;vertical-align:-0.81em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit">s</span><span class="mrel">=</span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">c</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">c</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">∙</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathit">p</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">e</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">c</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">c</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">c</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">∙</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.5075000000000001em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mop"><span class="op-symbol small-op mop" style="top:0.074995em;">∑</span><span class="vlist"><span style="top:0.2862857142857143em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mrel">=</span><span class="mord mathrm">0</span></span></span></span><span style="top:-0.4043214285714285em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">c</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle textstyle uncramped" style="top:0.07500000000000001em;">(</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.47143571428571435em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord">−</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.31472000000000006em;margin-right:0.1em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptscriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05724em;">j</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle textstyle uncramped" style="top:0.07500000000000001em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mord">−</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.1em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptscriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">c</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><h2 id="感知器算法"><a class="markdownIt-Anchor" href="#感知器算法"></a> 感知器算法</h2><blockquote><p>简单来说就是一个二元分类函数</p></blockquote><p>简化版的感知器算法如下：<br>① 以一个随机分布初始化权值和偏差(通常比较小) ；<br>② 选择一个输入向量， 并将其放入神经网络中；<br>③ 将输入与权重相乘， 并加上偏差， 计算网络的输出y’；<br>④ 感知器的函数如下：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mrow><mrow><mn>1</mn></mrow></mrow></mtd><mtd><mrow><mrow><mi>i</mi><mi>f</mi><mspace width="0.277778em"></mspace><mi>w</mi><mo>⋅</mo><mi>x</mi><mo>+</mo><mi>b</mi><mo>&gt;</mo><mn>0</mn></mrow></mrow></mtd></mtr><mtr><mtd><mrow><mrow><mn>0</mn></mrow></mrow></mtd><mtd><mrow><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi></mrow></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f(x)=\left\{\begin{array}{ll}{1} &amp; {if \; w \cdot x+b&gt;0} \\ {0} &amp; otherwise \end{array}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.45em;"></span><span class="strut bottom" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mrel">=</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist"><span style="top:-0.6099999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span style="top:0.5900000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist"><span style="top:-0.6099999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">i</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mord mspace thickspace"></span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mbin">⋅</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathit">b</span><span class="mrel">&gt;</span><span class="mord mathrm">0</span></span></span></span><span style="top:0.5900000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord textstyle uncramped"><span class="mord mathit">o</span><span class="mord mathit">t</span><span class="mord mathit">h</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">e</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><p>⑤ 如果y′≠y， 将权重wi加上Δw=yxi；</p><p>⑥ 返回第②步。</p><h2 id="tensorflow中损失优化方法"><a class="markdownIt-Anchor" href="#tensorflow中损失优化方法"></a> TensorFlow中损失优化方法</h2><p>●tf.train.GradientDescentOptimizer(learning_rate, use_locking,<br>name)： 原始梯度下降方法， 唯一参数就是学习率。<br>●tf.train.AdagradOptimizer： 自适应调整学习率， 累加历史梯度的平<br>方， 作为分母， 防止有些方向的梯度值过大， 提高优化效率， 善于处理<br>稀疏梯度。<br>●tf.train.AdadeltaOptimizer： 扩展AdaGrad优化方法， 只累加最近的<br>梯度值， 而不对整个历史上的梯度值进行累加。<br>●tf.train.AdamOptimizertf.train.AdamOptimizer． (learningrate, beta1,<br>beta2, epsilon, use locking, name)： 梯度的一阶矩估计和二阶矩估计动态<br>调整每个参数的学习率。 Adam是自适应矩估计(Adaptive Moment<br>Estimation) 的首字母缩写。</p><h2 id="sklearn预处理函数"><a class="markdownIt-Anchor" href="#sklearn预处理函数"></a> Sklearn预处理函数</h2><p>我们看一些下面的Sklearn数据预处理函数：<br>●preprocessing.StandardScaler()： 数据正规化(Normalization) 是机<br>器学习估计的一个常见要求， 为了模型能更好地收敛， 我们通常会将数<br>据集预处理到一个零均值单位方差的高斯状分布。 通常， 我们会将数据<br>的各个维度都减去它的均值， 然后乘上一个非零的数。 这个非零的数就<br>是数据集的标准差。 对于该任务， 我们直接使用StandardScaler， 它已经<br>实现了我们上面提到的操作。 它也保留了变换操作， 让我们可以直接用<br>在测试集上。<br>●StandardScaler .fit_transform()： 将数据调整到所需要的形式。<br>StandardScaler对象会存储数据变化的变量， 这样我们可以把数据解正规<br>化到原先的格式。<br>●cross_validation.train_test_split： 该方法能够将数据集分割成训练<br>集和测试集。 我们只需要提供两者的比例， 该方法能够自动帮我们处<br>理</p><h2 id="书籍推荐"><a class="markdownIt-Anchor" href="#书籍推荐"></a> 书籍推荐</h2><p>了解tensorflow基础对象——《面向机器智能的tensorflow实践》</p><p>进阶操作tensor对象——《Tensorflow机器学习项目实战》</p><h2 id="hello-tensorflow"><a class="markdownIt-Anchor" href="#hello-tensorflow"></a> Hello TensorFlow</h2><blockquote><p><code>import tensorflow as tf</code>如果报错dtype…可以降低numpy的版本(从1.16-&gt;1.17)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">% matplotlib inline </span><br><span class="line">a=tf.random_normal([<span class="number">2</span>,<span class="number">20</span>])</span><br><span class="line">sess=tf.Session()</span><br><span class="line">out=sess.run(a)</span><br><span class="line">x,y=out</span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">plt. show()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">%matplotlib inline</span></span><br><span class="line"><span class="string">这是一条专门的命令，用于通知笔记本将matplotib图表直接显示在浏览器中。</span></span><br><span class="line"><span class="string">下面逐行分析其余代码，如果你不理解某些术语，请不必担心，后面章节还会一一进行讲解：</span></span><br><span class="line"><span class="string">1)用TensorFlow定义一个由随机数构成的2×20的矩阵，并将其赋给变量a。</span></span><br><span class="line"><span class="string">2)启动TensorFlow Session，并将其赋予一个ses对象。</span></span><br><span class="line"><span class="string">3)用sess.run()方法执行对象a，并将输出(NumPy数组)赋给ot。</span></span><br><span class="line"><span class="string">4)将这个2×20的矩阵划分为两个1×10的向量x和y。</span></span><br><span class="line"><span class="string">5)利用pyplot模块绘制散点图，x对应横轴，y对应纵轴。</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="sesstfsession"><a class="markdownIt-Anchor" href="#sesstfsession"></a> sess=tf.Session()</h3><p>Session对象在运行时负责对数据流图进行监督，并且是运行数据流图的主要接口。在本练习之后，我们还将对Session对象进行更为深入的探讨，但现在只需了解在TensorFow中，如果希望运行自己的代码，必须定义一个Session对象。上述代码将Session对象赋给了变量sess，以便后期能够对其进行访问。</p><ul><li>target指定了所要使用的执行引擎。对于大多数应用，该参数取为默认的空字符串。在分布式设置中使用Session对象时，该参数用于连接不同的tftrain Server实例(本书后续章节将对此进行介绍)。</li><li>graph参数指定了将要在Session对象中加载的Graph对象，其默认值为None，表示将使用当前默认数据流图。当使用多个数据流图时，最好的方式是显式传入你希望运行的Graph对象(而非在一个with语句块内创建Session对象)。</li><li>config参数允许用户指定配置Session对象所需的选项，如限制CPU或GPU的使用数目，为数据流图设置优化参数及日志选项等。</li></ul><p>Sesionnn()方法接收一个参数<strong>fetches</strong>，以及其他三个可选参数：<strong>feed_dict</strong>、options和rnn_metadata。本书不打算对options和run_metadata进行介绍，因为它们尚处在实验阶段(因此以后很可能会有变动)，且目前用途非常有限，但理解ed_dict非常重要，下文将对其进行讲解。</p><p>1.fetches参数<br>fetches参数接收任意的数据流图元素(Op或Tensor对象)，后者指定了用户希望执行的对象。如果请求对象为Tensor对象，则rnun()的输出将为一NumPy数组：如果请求对象为一个Op，则输出将为None。</p><p>除了利用fetches获取Tensor对象输出外，还将看到这样的例子：有时也会赋予ftches一个指向某个Op的句柄，这是在运行中的一种有价值的用法。<br>tf.initialize_all_variables()使是一个这样的例子，它会准备将要使用的所有TensorFow Variable对象(本章稍后将介绍Variable对象)。我们仍然将该Op传给etches参数，但Session.run()的结果将为None：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行初始化Variable对象所需的计算，但返回值为None sess.run(tf.initialize_all_variables())</span><br></pre></td></tr></table></figure><p>2.feed_dict参数</p><p>参数feed_dict用于覆盖数据流图中的Tensor对象值，它需要Python字典对象作为输入。字典中的“键”为指向应当被覆盖的Tensor对象的句柄，而字典的“值”可以是数字、字符串、列表或NumPy数组(之前介绍过)。这些“值”的类型必须与Tensor的“键”相同，或能够转换为相同的类型。下面通过一些代码来展示如何利用feed_dict重写之前的数据流图中a的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">inport tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment">#创建Op、Tensor对象等(使用默认的数据流图)</span></span><br><span class="line">a=tf.add(<span class="number">2</span>，<span class="number">5</span>)</span><br><span class="line">b=tf.mul(a，<span class="number">3</span>)</span><br><span class="line"><span class="comment">#利用默认的数据流图启动一个Session对象</span></span><br><span class="line">sess=tf.Session()</span><br><span class="line"><span class="comment">#定义一个字典，比如将a的值替换为15</span></span><br><span class="line">replace_dict=&#123;a：<span class="number">15</span>&#125;</span><br><span class="line"><span class="comment">#运行Session对象，将replace_dict赋给feed_dict</span></span><br><span class="line">sess.run(b，feed_dict=replace_dict)<span class="comment">#返回45</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">请注意，即便a的计算结果通常为7，我们传给eeddict的字典也会将它替换为15。在相当多的场合中，fed_dict都极为有用。由于张量的值是预先提供的，数据流图不再需要对该张量的任何普通依赖节点进行计算。这意味着如果有一个规模较大的数据流图，并希望用一些虚构的值对某些部分进行测试，TensorFlow将不会在不必要的计算上浪费时间。对于指定输入值，eed_dict也十分有用，在稍后的占位符一节中我们将对此进行介绍。</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="tfplacehold"><a class="markdownIt-Anchor" href="#tfplacehold"></a> tf.placehold</h3><p>之前定义的数据流图并未使用真正的“输入”，它总是使用相同的数值5和3。我们真正希望做的是从客户那里接收输入值，这样便可对数据流图中所描述的变换<br>以各种不同类型的数值进行复用，借助“占位符”可达到这个目的。正如其名称所预示的那样，占位符的行为与Tesor对象一致，但在创建时无须为它们指定具体的数值。它们的作用是为运行时即将到来的某个Tensor对象预留位置，因此实际上变成了“输入”节点。利用tfplaceholderOp可创建占位符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">inport numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#创建一个长度为2、数据类型为int32的占位向量</span></span><br><span class="line">a=tf.placeholder(tf.int32，shape=[<span class="number">2</span>]，name=<span class="string">"my_input"</span>)</span><br><span class="line"><span class="comment">#将该占位向量视为其他任意Tensor对象，加以使用</span></span><br><span class="line">b=tf.reduce_prod(a，name=<span class="string">"prod_b"</span>)</span><br><span class="line">c=tf.reduce_sum(a，name=<span class="string">"sum_c"</span>)</span><br><span class="line"><span class="comment">#完成数据流图的定义</span></span><br><span class="line">d=tf.add(b，c，name=<span class="string">"add_d"</span>)</span><br></pre></td></tr></table></figure><p>调用tf.placehoder()时，dtype参数是必须指定的，而shape参数可选：</p><ul><li>dtype指定了将传给该占位符的值的数据类型。该参数是必须指定的，因为需要确保不出现类型不匹配的错误。</li><li>shape指定了所要传入的Tensor对象的形状。请参考前文中对Tensor形状的讨论。shape参数的默认值为None，表示可接收任意形状的Tensor对象。<br>与任何Op一样，也可在fpaceholer中指定一个name标识符。<br>为了给占位符传入一个实际的值，需要使用Sesionnm()中的eed_dict参数。我们将指向占位符输出的句柄作为字典(在上述代码中，对应变量a)的“键”，而<br>将希望传入的Tensor对象作为字典的“值”：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个TensorFlow Session对象</span></span><br><span class="line">sess=tf.Session()</span><br><span class="line"><span class="comment">#创建一个将传给feed_dict参数的字典</span></span><br><span class="line"><span class="comment">#键：a’，指向占位符输出Tensor对象的句柄</span></span><br><span class="line"><span class="comment">#值：一个值为[5，3]、类型为int32的向量</span></span><br><span class="line">input_dict=&#123;a:np.array([<span class="number">5</span>，<span class="number">3</span>]，dtype=np.int32)&#125;</span><br><span class="line"><span class="comment">#计算d的值，将input_dict的“值”传给a</span></span><br><span class="line">sess.run(d，feed_dict=input_dict)</span><br></pre></td></tr></table></figure><p>必须在eed dixt中为待计算的节点的每个依赖占位符包含一个键值对。在上面的代码中，需要计算d的输出，而它依赖于a的输出。如果还定义了一些d不依赖的其他占位符，则无需将它们包含在eed_dict中。<br>placeholder的值是无法计算的—如果试图将其传入Session.nn()，将引发一个异常。</p><h3 id="variable对象"><a class="markdownIt-Anchor" href="#variable对象"></a> Variable对象</h3><h4 id="1创建variable对象"><a class="markdownIt-Anchor" href="#1创建variable对象"></a> 1.创建Variable对象</h4><p>Tensor对象和Op对象都是不可变的(immmtable)，但机器学习任务的本质决定了需要一种机制保存随时间变化的值。借助TensorFbw中的Varable对象，便可达到这个目的。Variabe对象包含了在对Session.un()多次调用中可持久化的可变张量值。Variabk对象的创建可通过Variabe类的构造方法tVariable()完成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">inport tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment">#为Variable对象传入一个初始值3</span></span><br><span class="line">my_var=tf.Variable(<span class="number">3</span>，name=<span class="string">"my_variable"</span>)</span><br><span class="line"><span class="comment">#Variable对象可用于任何可能会使用Tensor对象的TensorFlbw函数或Op中，其当前值将传给使用它的Op：</span></span><br><span class="line">add=tf.add(<span class="number">5</span>，my_var)</span><br><span class="line">mul=tf.mul(<span class="number">8</span>，my_var)</span><br><span class="line"><span class="comment">#Variables对象的初值通常是全0、全1或用随机数填充的阶数较高的张量。为使创建具有这些常见类型初值的张量更加容易，TensorFlow提供了大量辅助Op，如tferos()、tfones()、tfrandom normal()和tfrandomuiform()，每个Op都接收一个sape参数，以指定所创建的Tensor对象的形状：</span></span><br><span class="line"><span class="comment">#2×2的零矩阵</span></span><br><span class="line">zeros=tf.zeros([<span class="number">2</span>，<span class="number">2</span>])</span><br><span class="line"><span class="comment">#长度为6的全1向量</span></span><br><span class="line">ones=tf.ones([<span class="number">6</span>])</span><br><span class="line"><span class="comment">#3×3×3的张量，其元素服从0~10的均匀分布</span></span><br><span class="line">uniform=tf.random_uniform([<span class="number">3</span>，<span class="number">3</span>，<span class="number">3</span>]，minval=<span class="number">0</span>，maxval=<span class="number">10</span>)</span><br><span class="line"><span class="comment">#3×3×3的张量，其元素服从0均值、标准差为2的正态分布</span></span><br><span class="line">normal=tf.random_normal([<span class="number">3</span>，<span class="number">3</span>，<span class="number">3</span>]，mean=<span class="number">0.0</span>，stddev=<span class="number">2.0</span>)</span><br></pre></td></tr></table></figure><p>除了tfrandom normal()外，经常还会看到人们使用ttrmncated nomal()，因为它不会创建任何<strong>偏离均值超过2倍标准差的值</strong>，从而可以防止有一个或两个元素与该张量中的其他元素显著不同的情况出现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#该Tensor对象不会返回任何小于3.0或大于7.0的值</span></span><br><span class="line">trunc=tf.truncated_normal([<span class="number">2</span>，<span class="number">2</span>]，mean=<span class="number">5.0</span>，stddev=<span class="number">1.0</span>)</span><br><span class="line">可像手工初始化张量那样将这些Op作为Variable对象的初值传入：</span><br><span class="line"><span class="comment">#默认均值为0，默认标准差为1.0</span></span><br><span class="line">randon_var=tf.Variable(tf.truncated_normal([<span class="number">2</span>，<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><h4 id="2variable对象的初始化"><a class="markdownIt-Anchor" href="#2variable对象的初始化"></a> 2.Variable对象的初始化</h4><p>Variable对象与大多数其他TensorFlow对象在Graph中存在的方式都比较类似，但它们的状态实际上是由Session对象管理的。因此，为使用Varinbe对象，需要采取一些额外的步骤—必须在一个Session对象内对Variable对象进行初始化。这样会使Session对象开始追踪这个Variable对象的值的变化。Varabe对象的初始化通常是通过将tinitialize_all_variabkes()Op传给Sessionrun()完成的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">init=tf.initialize_all_variables()</span><br><span class="line">sess=tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"><span class="comment">#如果只需要对数据流图中定义的一个Variable对象子集初始化，可使用tfinitialie variables()。该函数可接收一个要进行初始化的Variable对象列表：</span></span><br><span class="line">var1=tf.Variable(<span class="number">0</span>，name=<span class="string">"initialize_me"</span>)</span><br><span class="line">var2=tf.Variable(<span class="number">1</span>，name=<span class="string">"no_initialization"</span>)</span><br><span class="line">init=tf.initialize_variables([var1]，name=<span class="string">"init_var1"</span>)</span><br><span class="line">sess=tf.Session()</span><br><span class="line">sess.run(init)</span><br></pre></td></tr></table></figure><h4 id="3variable对象的修改"><a class="markdownIt-Anchor" href="#3variable对象的修改"></a> 3.Variable对象的修改</h4><p>要修改Variablk对象的值，可使用Variable.assign()方法。该方法的作用是为Variable对象赋予新值。请注意，Variable.assign()是一个Op，要使其生效必须在一个Session对象中运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个初值为1的Variable对象</span></span><br><span class="line">my_var=tf.Variable(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#创建一个Op，使其在每次运行时都将该Variable对象乘以2</span></span><br><span class="line">my_var_times_two=my_var.assign(my_var*<span class="number">2</span>)</span><br><span class="line"><span class="comment">#初始化Op init=tf.initialize_all_variables()</span></span><br><span class="line"><span class="comment">#启动一个会话</span></span><br><span class="line">sess=tf.Session()</span><br><span class="line"><span class="comment">#初始化Variable对象</span></span><br><span class="line">sess.run(init)</span><br><span class="line"><span class="comment">#将Variable对象乘以2，并将其返回</span></span><br><span class="line">sess.run(my_var_times_two)</span><br><span class="line"><span class="comment">##输出：2</span></span><br><span class="line"><span class="comment">#再次相乘</span></span><br><span class="line">sess.run(my_var_times_two)</span><br><span class="line"><span class="comment">##输出：4</span></span><br><span class="line"><span class="comment">#再次相乘</span></span><br><span class="line">sess.run(my_var_times_two)</span><br><span class="line"><span class="comment">##输出：8</span></span><br><span class="line">对于Variablk对象的简单自增和自减，TensorFlow提供了Variable.asign add()方法和Variable.assignsub()方法：</span><br><span class="line"><span class="comment">#自增1</span></span><br><span class="line">sess.run(my_var.assign_add(<span class="number">1</span>))</span><br><span class="line"><span class="comment">#自减1</span></span><br><span class="line">sess.run(my_var.assign_sub(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>△由于不同Session对象会各自独立地维护Varablk对象的值，因此每个Session对象都拥有自己的、在Graph对象中定义的Variabe对象的当前值：</p><h4 id="4trainable参数"><a class="markdownIt-Anchor" href="#4trainable参数"></a> 4.trainable参数</h4><p>在本书的后续章节将介绍各种能够自动训练机器学习模型的Optinmizer类，这意味着这些类将自动修改Variable对象的值，而无须显式做出请求。在大多数情况下，这与读者的期望一致，但如果要求Graph对象中的一些Variabk对象只可手工修改，而不允许使用Optimizer类时，可在创建这些Variable对象时将其raimbe参数设为False：not_trainable=tf.Variable(0，trainable=False)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深度学习神经网络&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#深度学习神经网络&quot;&gt;&lt;/a&gt; 深度学习——神经网络&lt;/h1&gt;
&lt;h2 id=&quot;构建网络的总原则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#构
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>常用域名记录解释</title>
    <link href="https://nymrli.top/2019/09/17/%E5%B8%B8%E7%94%A8%E5%9F%9F%E5%90%8D%E8%AE%B0%E5%BD%95%E8%A7%A3%E9%87%8A/"/>
    <id>https://nymrli.top/2019/09/17/常用域名记录解释/</id>
    <published>2019-09-17T09:47:35.000Z</published>
    <updated>2019-09-17T09:47:50.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用域名记录解释"><a class="markdownIt-Anchor" href="#常用域名记录解释"></a> 常用域名记录解释</h1><h2 id="a记录"><a class="markdownIt-Anchor" href="#a记录"></a> A记录</h2><p>A记录是用来创建到IP地址的记录。</p><p><strong>A记录设置技巧</strong></p><p>1、如果想创建不带www的记录，<a href="http://xn--ezloo-k97h.com" target="_blank" rel="noopener">即ezloo.com</a>，在主机记录中填写@或者留空，不同的注册商可能不一样。</p><p>2、创建多个域名到同一个IP，比如给博客建了二级域名，可以使用*.blog.ezloo.com来指向一个IP，这样的话，不管是访问a.blog.ezloo.com还是b.blog.ezloo.com都能到同一个IP。</p><p>3、如果你给同一个二级域名设置了多个A记录，比如你建了两个blog的A记录，其中一个指向了111.111.111.111，另一个指向了111.111.111.112，那么在查询的时候，每次返回的数据包含了两个IP地址，但是在返回的过程中数据排列的顺序每次都不相同。由于大 部分的客户端只选择第一条记录所以通过这种方式可以实现一定程度的负载均衡。</p><p>在命令行下可以通过nslookup -qt=a <a href="https://www.ezloo.com/" target="_blank" rel="noopener">www.ezloo.com</a>来查看A记录。</p><h2 id="mx记录"><a class="markdownIt-Anchor" href="#mx记录"></a> MX记录</h2><p>在命令行下可以通过 nslookup -qt=mx <a href="http://ezloo.com" target="_blank" rel="noopener">ezloo.com</a> 来查看MX记录。</p><p>mx 记录的权重对 Mail 服务是很重要的，当发送邮件时，Mail 服务器先对域名进行解析，查找 mx 记录。先找权重数最小的服务器（比如说是 10），如果能连通，那么就将服务器发送过去；如果无法连通 mx 记录为 10 的服务器，那么才将邮件发送到权重为 20 的 mail 服务器上。</p><p>这里有一个重要的概念，权重 20 的服务器在配置上只是暂时缓存 mail ，当权重 20 的服务器能连通权重为 10 的服务器时，仍会将邮件发送的权重为 10 的 Mail 服务器上。当然，这个机制需要在 Mail 服务器上配置。（<a href="http://blog.ixpub.net/viewthread-1308142" target="_blank" rel="noopener">http://blog.ixpub.net/viewthread-1308142</a>）</p><h2 id="cname记录"><a class="markdownIt-Anchor" href="#cname记录"></a> CNAME记录</h2><p><a href="http://en.wikipedia.org/wiki/CNAME_record" target="_blank" rel="noopener">CNAME</a>记录也成别名记录，它允许你将多个记录映射到同一台计算机上。比如你建了如下几条记录：</p><p>a1 CNAME <a href="http://a.ezloo.com" target="_blank" rel="noopener">a.ezloo.com</a><br>a2 CNAME <a href="http://a.ezloo.com" target="_blank" rel="noopener">a.ezloo.com</a><br>a3 CNAME <a href="http://a.ezloo.com" target="_blank" rel="noopener">a.ezloo.com</a><br>a A 111.222.111.222</p><p>我们访问a1（a2，a3）.ezloo.com的时候，域名解析服务器会返回一个CNAME记录，<a href="http://xn--a-4o6ap5qc3lbrf.ezloo.com" target="_blank" rel="noopener">并且指向a.ezloo.com</a>，然后我们的本地电脑会再发送一个请求，请求a.ezloo.com的解析，返回IP地址。</p><p>当我们要指向很多的域名到一台电脑上的时候，用CNAME比较方便，就如上面的例子，我们如果服务器更换IP了，我们只要更换a.ezloo.com的A记录即可。</p><p>在命令行下可以使用nslookup -qt=cname a.ezloo.com来查看CNAME记录。</p><h2 id="txt记录"><a class="markdownIt-Anchor" href="#txt记录"></a> TXT记录</h2><p>TXT记录一般是为某条记录设置说明，比如你新建了一条a.ezloo.com的TXT记录，TXT记录内容&quot;this is a test TXT record.&quot;，然后你用 nslookup -qt=txt <a href="http://a.ezloo.com" target="_blank" rel="noopener">a.ezloo.com</a> ，你就能看到&quot;this is a test TXT record&quot;的字样。</p><p>除外，TXT还可以用来验证域名的所有，比如你的域名使用了Google的某项服务，Google会要求你建一个TXT记录，然后Google验证你对此域名是否具备管理权限。</p><p>在命令行下可以使用nslookup -qt=txt a.ezloo.com来查看TXT记录。</p><h2 id="aaaa记录"><a class="markdownIt-Anchor" href="#aaaa记录"></a> AAAA记录</h2><p>AAAA记录是一个指向IPv6地址的记录。</p><p>可以使用nslookup -qt=aaaa a.ezloo.com来查看AAAA记录。</p><h2 id="ns记录"><a class="markdownIt-Anchor" href="#ns记录"></a> NS记录</h2><p>NS记录是域名服务器记录，用来指定域名由哪台服务器来进行解析。可以使用nslookup -qt=ns ezloo.com来查看。</p><h2 id="ttl值"><a class="markdownIt-Anchor" href="#ttl值"></a> TTL值</h2><p>TTL=time to live，表示解析记录在DNS服务器中的缓存时间。比如当我们请求解析<a href="https://www.ezloo.com/" target="_blank" rel="noopener">www.ezloo.com</a>的时候，DNS服务器发现没有该记录，就会下个NS服务器发出请求，获得记录之后，该记录在DNS服务器上保存TTL的时间长度。当我们再次发出请求解析<a href="https://www.ezloo.com/" target="_blank" rel="noopener">www.ezloo.com</a> 的时候，DNS服务器直接返回刚才的记录，不去请求NS服务器。TTL的时间长度单位是秒，一般为3600秒。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用域名记录解释&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常用域名记录解释&quot;&gt;&lt;/a&gt; 常用域名记录解释&lt;/h1&gt;
&lt;h2 id=&quot;a记录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#a记录&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="网络知识" scheme="https://nymrli.top/tags/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习笔记</title>
    <link href="https://nymrli.top/2019/09/17/Spring-Boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://nymrli.top/2019/09/17/Spring-Boot学习笔记/</id>
    <published>2019-09-17T09:01:40.000Z</published>
    <updated>2019-09-17T09:08:24.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-boot"><a class="markdownIt-Anchor" href="#spring-boot"></a> Spring Boot</h1><h2 id="hello-word"><a class="markdownIt-Anchor" href="#hello-word"></a> hello word</h2><p>第一个controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:demo </span></span><br><span class="line"><span class="comment"> * File Name:HelloController.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.example.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月15日下午8:27:56 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;cupsize&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String cupsize;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"hello"</span>,method= RequestMethod.GET)</span><br><span class="line"><span class="comment">//@GetMapping("/hello")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cupsize;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">5000</span></span><br><span class="line"><span class="comment">#  servlet:</span></span><br><span class="line"><span class="comment">#    context-path: /girl</span></span><br><span class="line"><span class="attr">cupsize:</span> <span class="string">B</span></span><br><span class="line"><span class="string">spring.datasource.url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/</span></span><br><span class="line"><span class="string">spring.datasource.username:</span> <span class="string">root</span> <span class="string">spring.datasource.password:</span> <span class="number">123456</span></span><br><span class="line"><span class="string">spring.datasource.driver-class-name:</span> <span class="string">com.mysql.jdbc</span></span><br></pre></td></tr></table></figure><h2 id="controller的使用"><a class="markdownIt-Anchor" href="#controller的使用"></a> Controller的使用</h2><p>@Controller处理http请求Spring4之后新加的注解，原来返回json</p><ul><li><p>需要返回模板,即<code>return “index”;</code></p><ul><li><p>需要在POM.XML中添加spring-boot-starter-thymeleaf的依赖</p></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>@RestController等价于&lt;==&gt;@Controller+@ResponseBody</p><ul><li>可以返回JSON格式</li></ul><p>@RequestMapping 配置url映射</p><ul><li><p>▲如果没有指定Method那么所有方式都可以</p></li><li><p>给某个方法指定url路由</p><p><code>@RequestMapping(value={&quot;/hello&quot;,&quot;/hil&quot;},method=RequestMethod.GET)</code></p></li><li><p>给整个class指定路由</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:demo </span></span><br><span class="line"><span class="comment"> * File Name:HelloController.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.example.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月15日下午8:27:56 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> GirlProperties girlProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/say"</span>, method= RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> girlProperties.getCupSize();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@RequestMapping(value=xxx,method=RequestMethod.GET)</code>等价于<code>XxxMapping</code></p><ul><li>GetMapping</li><li>PostMapping</li></ul></li><li><p>@PathVariable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/say/&#123;id&#125;"</span>, method= RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"id:"</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@RequestParam</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/say"</span>, method= RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Integer mid) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"id:"</span> + mid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/say"</span>, method= RequestMethod.GET)</span><br><span class="line"><span class="comment">// defaultValue值必须为String</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(@RequestParam(value=<span class="string">"id"</span>, required=<span class="keyword">false</span>, defaultValue=<span class="string">"0"</span>)</span> Integer mid) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"id:"</span> + mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据库管理"><a class="markdownIt-Anchor" href="#数据库管理"></a> 数据库管理</h2><p>JPA（Java Persistence APl）定义了一系列对象持久化的标准，目前实现这一规范的产品有Hibernate、TopLink等。</p><h3 id="启用jpa"><a class="markdownIt-Anchor" href="#启用jpa"></a> 启用JPA</h3><p>application.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//127.0.0.1:3306/dbgirl?characterEncoding=utf-8&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span></span><br><span class="line">    username: root</span><br><span class="line">    password: cl123123</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: create</span><br><span class="line">    show-sql: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h3 id="增删改查curd"><a class="markdownIt-Anchor" href="#增删改查curd"></a> 增删改查CURD</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:demo </span></span><br><span class="line"><span class="comment"> * File Name:Girl.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.example.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月16日下午6:34:14 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span> </span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String cupSize;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Girl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCupSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cupSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCupSize</span><span class="params">(String cupSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cupSize = cupSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"&#123;\"id\":\""</span> + id + <span class="string">"\",\"cupSize\":\""</span> + cupSize + <span class="string">"\",\"age\":\""</span> + age + <span class="string">"\"&#125;  "</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GirlControllr.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:demo </span></span><br><span class="line"><span class="comment"> * File Name:GirlController.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.example.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月17日下午3:44:06 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.DeleteMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PutMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GirlController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> GirlRepository girlRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(value= <span class="string">"/girls"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Girl&gt; <span class="title">girlList</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> girlRepository.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/girls"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Girl <span class="title">addGirl</span><span class="params">(@RequestParam(<span class="string">"cupSize"</span>)</span> String cupSize, </span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> Integer age) </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"cupsize"</span>+cupSize);</span><br><span class="line">Girl girl= <span class="keyword">new</span> Girl();</span><br><span class="line">girl.setCupSize(cupSize);</span><br><span class="line">girl.setAge(age);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> girlRepository.save(girl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(value=<span class="string">"/girls/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Girl <span class="title">girlFindOne</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> girlRepository.findById(id).get();</span><br><span class="line"><span class="comment">//return girlRepository.getOne(id); 无效，需要实例json</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping</span>(value=<span class="string">"/girls/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Girl <span class="title">girlUpdate</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id,</span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(<span class="string">"cupSize"</span>)</span> String cupSize, </span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> Integer age)  </span>&#123;</span><br><span class="line">Girl girl = <span class="keyword">new</span> Girl();</span><br><span class="line">girl.setId(id);</span><br><span class="line">girl.setAge(age);</span><br><span class="line">girl.setCupSize(cupSize);</span><br><span class="line"><span class="keyword">return</span> girlRepository.save(girl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping</span>(value=<span class="string">"/girls/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">girlDelete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">girlRepository.deleteById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(value=<span class="string">"/girls/age/&#123;age&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Girl&gt; <span class="title">girlListByAge</span><span class="params">(@PathVariable(<span class="string">"age"</span>)</span> Integer age)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> girlRepository.findByAge(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲注意.视频中的findOne已经被淘汰，因为springboot版本问题，新的版本不再支持findone(id)方法。</p><p>可用<code>findById(id).get()</code>或<code>getOne(id)</code>来替换，区别是前者当参数id为空时返回null，后者直接报异常，因为getOne返回的是对象的引用。</p><p>我试了下getOne会报错，据说是要设置json的返回格式？</p><h3 id="自定义搜索方式findbyage"><a class="markdownIt-Anchor" href="#自定义搜索方式findbyage"></a> 自定义搜索方式findByAge</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:demo </span></span><br><span class="line"><span class="comment"> * File Name:GirlRepository.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.example.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月17日下午3:44:33 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GirlRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Girl</span>, <span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Girl&gt; <span class="title">findByAge</span><span class="params">(Integer age)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库事务管理"><a class="markdownIt-Anchor" href="#数据库事务管理"></a> 数据库事务管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:demo </span></span><br><span class="line"><span class="comment"> * File Name:GirlController.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.example.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月17日下午3:44:06 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/girls/two"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">girlTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        girlService.insertTwo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:demo </span></span><br><span class="line"><span class="comment"> * File Name:GirlService.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.example.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月17日下午4:39:00 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GirlService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> GirlRepository girlRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Girl girlA = <span class="keyword">new</span> Girl();</span><br><span class="line">        girlA.setCupSize(<span class="string">"A"</span>);</span><br><span class="line">        girlA.setAge(<span class="number">18</span>);</span><br><span class="line">        girlRepository.save(girlA);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Girl girlB = <span class="keyword">new</span> Girl();</span><br><span class="line">        girlB.setCupSize(<span class="string">"BBBB"</span>);</span><br><span class="line">        girlB.setAge(<span class="number">19</span>);</span><br><span class="line">        girlRepository.save(girlB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目开发过程中，使用了Spring data jpa自动创建表。但是默认情况下，创建出来的表类型为MyISAM。</p><p>（MySQL数据库默认的存储引擎类型是MyISAM，这种存储引擎类型不支持事务处理。）改成InnoDB存储引擎会就可以了。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jpa:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">MYSQL</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br></pre></td></tr></table></figure><p>在navicat中数据库—&gt;表—&gt;单击表名，在右边可以出现表的所有信息</p><p><img src="/2019/09/17/Spring-Boot学习笔记/mysq%E5%AD%98%E5%82%A8l%E5%BC%95%E6%93%8E.jpg" alt="mysq存储l引擎"></p><p><a href="https://www.imooc.com/video/16357" target="_blank" rel="noopener">Spring Boot 2.0深度实践-初遇Spring Boot</a></p><ul><li>多模块：web、persistence、mdel</li><li>项目打包——多模块重构后</li></ul><h2 id="运行模式"><a class="markdownIt-Anchor" href="#运行模式"></a> 运行模式</h2><p>IDEA: 有图形界面的开发环境</p><p>JAR/WAR: 线上、服务器上的生产环境</p><ul><li><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mvn install </span><br><span class="line">$ <span class="built_in">cd</span> target</span><br><span class="line">$ java -jar</span><br></pre></td></tr></table></figure></li></ul><p>MAVEN插件: 无图形界面的开发环境</p><ul><li><code>mvn spring-boot:run</code></li></ul><h2 id="热加载"><a class="markdownIt-Anchor" href="#热加载"></a> 热加载：</h2><p>pom.xml中加上依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>热部署:</p><p>就是容器状态在运行的情况下重新部署整个项目.在这种情况下一般整个内存会清空,重新加载.简单来说就是Tomcat或者其他的web服务器会帮我们重新加载项目.这种方式可能会造成sessin丢失等情况.</p><p>热加载:</p><p>就是容器状态在运行的情况下重新加载改变编译后的类.在这种情况下内存不会清空,sessin不会丢失,但容易造成内存溢出,或者找不到方法。因为内存无法转变成对像.一般改变类的结构和模型就会有异常，在已经有的变量和方法中改变是不会出问题的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring-boot&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#spring-boot&quot;&gt;&lt;/a&gt; Spring Boot&lt;/h1&gt;
&lt;h2 id=&quot;hello-word&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;
      
    
    </summary>
    
    
      <category term="后端" scheme="https://nymrli.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Java" scheme="https://nymrli.top/tags/Java/"/>
    
      <category term="Web" scheme="https://nymrli.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>如何成为一位老司机——考驾照经历</title>
    <link href="https://nymrli.top/2019/09/14/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%BD%8D%E8%80%81%E5%8F%B8%E6%9C%BA%E2%80%94%E2%80%94%E8%80%83%E9%A9%BE%E7%85%A7%E7%BB%8F%E5%8E%86/"/>
    <id>https://nymrli.top/2019/09/14/如何成为一位老司机——考驾照经历/</id>
    <published>2019-09-14T04:32:33.000Z</published>
    <updated>2019-09-15T08:07:31.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何成为一位老司机考驾照经历"><a class="markdownIt-Anchor" href="#如何成为一位老司机考驾照经历"></a> 如何成为一位老司机——考驾照经历</h1><p>大一下报的名，几经转折，终于在2019-9-12，中秋放假前一天拿到了本本。</p><h2 id="科一理论考试"><a class="markdownIt-Anchor" href="#科一理论考试"></a> 科一理论考试</h2><p>太久远了，已经忘记了…</p><h2 id="科二"><a class="markdownIt-Anchor" href="#科二"></a> 科二</h2><h3 id="训练"><a class="markdownIt-Anchor" href="#训练"></a> 训练</h3><h4 id="倒车入库"><a class="markdownIt-Anchor" href="#倒车入库"></a> 倒车入库：</h4><p>左边小镜子底座盖过黄线，向左打死。<br>正手倒车时，靠近左边直角距离3个手指回正，然后看左边镜子出现直角，然后。<br>左手是一到二指头。</p><p>▲入库重在自己调整，记住准则：左右镜子，哪边空隙大，方向盘往哪边打</p><h4 id="小四项"><a class="markdownIt-Anchor" href="#小四项"></a> 小四项：</h4><h5 id="直角转弯"><a class="markdownIt-Anchor" href="#直角转弯"></a> 直角转弯:</h5><ul><li>人在路中间，直角重合于车窗黑线后向左打死。</li></ul><h5 id="s弯道"><a class="markdownIt-Anchor" href="#s弯道"></a> S弯道：</h5><ul><li>确保人在路中间，可以略微偏左。左边小镜子底座压住右边黄线。方向盘一圈右手放在2点方向。如果黄线偏下，那么往1点方向调整，否则往3点方向调整。然后保持到车头中间碰到左边黄线回正；然后向前一小段距离，使得右边镜子与黄线只差一条线的距离，然后向右一圈，左手11点，保持小镜子与黄线夹角是钝角，然后一直保持到项目结束。</li></ul><h5 id="坡道停车"><a class="markdownIt-Anchor" href="#坡道停车"></a> 坡道停车：</h5><ul><li>对准坡道上的黄线大约在车头的右边三分之一处。上去之后，保持黄线在小镜子的左边三分之一处，大约与车身成三角形，接近接触。</li></ul><h5 id="侧方停车"><a class="markdownIt-Anchor" href="#侧方停车"></a> 侧方停车：</h5><ul><li><p>车头盖过蓝线后看右边后视镜，到第二根白线在后视镜中央开始倒车，直至消失时，向右一圈到11点，然后保持直至右边的黄线跑到两个把手的中间时回正，接着看左边，头伸出一点，看后车轮压倒虚线时立马向左打死，然后直至车身完全进入。</p></li><li><p>出去时，左方向灯和换1档，缓速出来，等到车头中央碰到黄线时回正，然后稍微开个0.5s向后一圈左右，车身回正。</p></li></ul><p><a href="https://pan.baidu.com/s/1NKVIC6cgtvp_8tGO4pk2xw" target="_blank" rel="noopener">视频资源——SXH科二教练</a>,提取码：gvqa</p><h3 id="考试"><a class="markdownIt-Anchor" href="#考试"></a> 考试</h3><p>我考的是6号线，也就是S弯结束后立马是直角的那条线。考试的直角给我的感觉是比谷峰训练的时候多很多，所以其实不用担心。至于这个S弯结束后立马是直角，根据模拟的时候开就行了，即出来就向右打死，然后开到路中间</p><h2 id="科三"><a class="markdownIt-Anchor" href="#科三"></a> 科三</h2><blockquote><p>灯光+上路行驶</p></blockquote><h3 id="训练-2"><a class="markdownIt-Anchor" href="#训练-2"></a> 训练</h3><h4 id="灯光"><a class="markdownIt-Anchor" href="#灯光"></a> 灯光</h4><p><img src="/2019/09/14/如何成为一位老司机——考驾照经历/kes2.jpg" alt="kes2"></p><h4 id="起步和靠边停车"><a class="markdownIt-Anchor" href="#起步和靠边停车"></a> 起步和靠边停车</h4><p><img src="/2019/09/14/如何成为一位老司机——考驾照经历/kes1.jpg" alt="kes1"></p><p>图片来自于科三教练——杨作栋</p><h3 id="考试-2"><a class="markdownIt-Anchor" href="#考试-2"></a> 考试</h3><p>科三比科二简单很多。科二10节课，科三只有8节也能说明一二。但感觉科三与科二最不同的地方是，科三记的点比科二自然很多。在转头看左右后视镜，我在临近考试的最后两天最后一节课上才练的，一开始觉得右边的后视镜为什么离得那么远，跑了两圈后就发现，看后视镜是件很自然的事，因为你就需要右边的信息。</p><p>而在考试过程中，虽然有安全员在旁边，可能会比科二紧张一些，但是整体上来讲，科三还是很容易的，只要记得，每次完成一个东西后，左右看后视镜基本上就行了。</p><p>▲.我考试的时候，前面有个挂了的人倒是补上了我一个盲点，原来提示前方路口后，如果你打了右方向灯，那么接着往后看。之前我还以为只有真过路口、点刹的时候才需要。只不过面对这种现象，还是之前说的，不管做了什么，左右摇头就是了。</p><p>挂到五档也不用担心，我当时考试时有两条路的路况绝对算不上好，但是我一共还是3次挂到了五档，所以其实升挡的机会还是很多的。</p><p>最后，需要注意的是灯光一定不能错。我是第三个考的，第一个女生灯光挂了一次；第二个男生，起步没打左方向灯，也挂了。</p><h2 id="科四理论考试"><a class="markdownIt-Anchor" href="#科四理论考试"></a> 科四理论考试</h2><p>刷了1280道题，由于有10道多选题的存在，所以真正考试的时候还是比较慌的，一上来就错了两题，最终考了94.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何成为一位老司机考驾照经历&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#如何成为一位老司机考驾照经历&quot;&gt;&lt;/a&gt; 如何成为一位老司机——考驾照经历&lt;/h1&gt;
&lt;p&gt;大一下报的名，几经转折，终于在2019-9-12，中秋放假前一天拿到
      
    
    </summary>
    
    
      <category term="生活福利" scheme="https://nymrli.top/tags/%E7%94%9F%E6%B4%BB%E7%A6%8F%E5%88%A9/"/>
    
  </entry>
  
  <entry>
    <title>软件测试大赛</title>
    <link href="https://nymrli.top/2019/09/14/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%A4%A7%E8%B5%9B/"/>
    <id>https://nymrli.top/2019/09/14/软件测试大赛/</id>
    <published>2019-09-14T04:07:12.000Z</published>
    <updated>2019-09-16T12:29:58.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件测试大赛"><a class="markdownIt-Anchor" href="#软件测试大赛"></a> 软件测试大赛</h1><h2 id="初学流程"><a class="markdownIt-Anchor" href="#初学流程"></a> 初学流程</h2><ol><li>首先了解比赛,查看帮助文档<a href="http://www.mooctest.net/summer-faq" target="_blank" rel="noopener">平台帮助</a></li><li>然后在<a href="http://www.mooctest.net/download" target="_blank" rel="noopener">工具下载</a>中下载工具、eclipse插件</li><li>最后根据教程中将插件安装好即可</li></ol><h2 id="移动应用测试开发"><a class="markdownIt-Anchor" href="#移动应用测试开发"></a> 移动应用测试开发</h2><h3 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置"></a> 环境配置</h3><h4 id="配置java环境"><a class="markdownIt-Anchor" href="#配置java环境"></a> 配置Java环境</h4><p>略,见<a href="https://www.runoob.com/java/java-environment-setup.html" target="_blank" rel="noopener">Java 开发环境配置_菜鸟教程</a></p><h4 id="安装adb"><a class="markdownIt-Anchor" href="#安装adb"></a> 安装ADB</h4><p>1.菜单——&gt;Tools——&gt;Settings，将Server地址为 <a href="http://mirrors.neusoft.edu.cn" target="_blank" rel="noopener">mirrors.neusoft.edu.cn</a>， 端口 80 ，并且在Others里勾选 Forcehttps://…,最后一定要选择菜单——&gt;Packages菜单——&gt;Reload</p><p>注:其他<a href="http://ask.android-studio.org/?/article/34" target="_blank" rel="noopener">可用的镜像</a></p><p>2.把 AndroidSDK路径下的tools和 platform-tools两个目录路径加入到系统环境变量 Path</p><ul><li></li></ul><p>3.在终端(cmd)输入命令 adb ，回车，输出 adb 版本和帮助信息说明环境配置成功</p><h4 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装Node.js</h4><p>略</p><h4 id="安装appium"><a class="markdownIt-Anchor" href="#安装appium"></a> 安装Appium</h4><p>1)下载安装文件： <a href="http://pan.baidu.com/s/1jGvAISu" target="_blank" rel="noopener">http://pan.baidu.com/s/1jGvAISu</a> Windows下载zip文件，MAC请下载dmg<br>2)直接双击appium-installer.exe文件安装就好(务必记住安装路径)，桌面会生成一个Appium的图标<br>此时已经可以通过Appium在桌面快捷方式启动Appium桌面应用程序，并点击应用程序右上侧启动状按钮启动Appium，若成功启动会输出数行[info]级别的日志，打印出Appium server启动成功后占用的端口。</p><p>如果无法显示<code>appium-doctor</code>,可以<code>npm install -g appium</code>安装</p><h3 id="uiautomatorviewer使用"><a class="markdownIt-Anchor" href="#uiautomatorviewer使用"></a> UIautomatorviewer使用</h3><blockquote><p>Android 4.1发布的，uiautomator是用来做UI测试的。也就是普通的手工测试，点击每个控件元素 看看输出的结果是否符合预期。比如 登陆界面 分别输入正确和错误的用户名密码然后点击登陆按钮看看是否能否登陆以及是否有错误提示等。</p></blockquote><p>找到Andriod sdk安装目录下的uiautomatorviewer.bat,E:\android-sdk-windows\tools\uiautomatorviewer.bat,双击打开</p><p>由于自动获得手机信息失败,因此我只能通过手工进行获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error obtaining UI hierarchy</span><br><span class="line">Reason:</span><br><span class="line">Error while creating temporary file to save snapshot:null</span><br></pre></td></tr></table></figure><p>自动导入成功的结果：</p><p><img src="https://images2015.cnblogs.com/blog/968033/201606/968033-20160624171643110-403576910.gif" alt=""></p><h4 id="手工获取手机信息"><a class="markdownIt-Anchor" href="#手工获取手机信息"></a> 手工获取手机信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> dump资源文件 再导出到本地</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> adb shell uiautomator dump</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> adb pull /sdcard/window_dump.xml</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取截图 导出</span></span><br><span class="line">adb shell screencap -p /data/local/tmp/app.png</span><br><span class="line">adb pull /data/local/tmp/app.png .</span><br></pre></td></tr></table></figure><p>传到Window里，有了截图文件和资源文件，点击UI Automator Viewer菜单栏第一个图标手工导入后即可解析，分析UI</p><p><img src="/2019/09/14/软件测试大赛/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%A4%A7%E8%B5%9B%5Capp.jpg" alt="app"></p><ol><li><strong>获取快照</strong><ul><li>当你要分析一个页面时，首先将手机的页面停留在你要分析的页面，然后用数据线连接电脑。</li></ul></li><li><strong>页面层级</strong><ul><li>右上方的整个区域，就是当前页面布局的层级关系</li></ul></li><li><strong>不可用区域</strong><ul><li>右上方的整个区域中的第二个按钮Toggle NAF Nodes，按下后出现的黄色区域代表，这些控件是不被Uiautomator工具识别，无法获取到这些控件的实例</li></ul></li><li><strong>属性详情</strong>：<ul><li>右下方的整个区域，是当前选中的页面或者是控件的属性信息。写代码的时候就是需要通过查看属性中的控件的id或者是text等来获取控件的实例，然后点击操作它。</li></ul></li></ol><h4 id="编写脚本"><a class="markdownIt-Anchor" href="#编写脚本"></a> 编写脚本</h4><ol><li><strong>创建项目</strong>：创建新的Java项目(注意不是Android项目)。在该项目中来创建测试代码。</li><li><strong>导入库和包</strong>：在Project Explorer视图中，右键点击测试项目，选择“ Properties &gt; Java Build Path”，然后选择“Libraries” tab界面。在“Libraries”界面选择“ Add Library &gt; JUnit”来添加<strong>JUnit3</strong> 库；然后点击“Add External JARs… ”并导航到Android SDK目录。选择platforms目录下面的 <strong>uiautomator.jar</strong> 和 <strong>android.jar</strong>文件。</li></ol><p><a href="https://www.cnblogs.com/lazytest/p/5612709.html" target="_blank" rel="noopener">uiautomatorviewer</a></p><p><a href="https://www.cnblogs.com/givemelove/p/8486903.html" target="_blank" rel="noopener">uiautomatorviewer详解、脚本介绍</a></p><h3 id="junit使用"><a class="markdownIt-Anchor" href="#junit使用"></a> Junit使用</h3><h4 id="demo坑点记录"><a class="markdownIt-Anchor" href="#demo坑点记录"></a> DEMO坑点记录:</h4><p>1.JUnit4和JRE1.7配套使用,Junit5需要8以上。而JUnit4和JUnit5都不支持JRE11，所以当时我的报错是<code>The import org.apache cannot be resolved</code>.</p><p>2.右键项目-&gt;build path -&gt; Config build path -&gt; Libraries后还是报错,<code>java.lang.NoClassDefFoundError: org/junit/runner/manipulation/Filter</code>…解决方法是:①菜单栏-&gt;projects-&gt;clean②build path -&gt; Config build path -&gt; Libraries-&gt;remove重新导入Junit③运行OK</p><h4 id="编写规范"><a class="markdownIt-Anchor" href="#编写规范"></a> 编写规范</h4><p>1.测试方法上必须使用@Test进行修饰<br>2.测试方法必须使用public void 进行修饰，不能带任何的参数<br>3.新建一个源代码目录来存放我们的测试代码<br>4.测试类的包应该和被测试类保持一致<br>5.测试单元中的每个方法必须可以独立测试，测试方法间不能有任何的依赖<br>6.测试类使用Test作为类名的后缀（不是必须）<br>7.测试方法使用test作为方法名的前缀（不星必须）|</p><h4 id="运行流程"><a class="markdownIt-Anchor" href="#运行流程"></a> 运行流程</h4><p>1.@BeforeClass修饰的方法会在所有方法被调用前被执行，而且该方法是静态的，所以当测试类被加载后接着就会运行它，而且在内存中它只会存在一份实例，它<strong>比较适合加载配置文件</strong>。<br>2.@AfterClass所修饰的方法通常用来对资源的清理，如关闭数据库的连接<br>3.@Before和@After会在<strong>每个测试方法</strong>即(@Test修饰的方法函数)的前后各执行一次。</p><p>@Test：将一个普通的方法修饰成为一个测试方法</p><ul><li><p>@Test（expected=XX.class）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>(expected=ArithmeticException.class)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">divided</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">assertEquals(<span class="number">0</span>, <span class="keyword">new</span> calculate().divide(<span class="number">6</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Test（timeout=毫秒）</p></li></ul><p>@BeforeClass：它会在所有的方法运行前被执行，static修饰<br>@AfterClass：它会在所有的方法运行结束后被执行，static修饰<br>@Before：会在每一个测试方法被运行前执行一次<br>@After：会在每一个测试方法运行后被执行一次<br>@lgnore：所修饰的测试方法会被测试运行器忽略<br>@RunWith：可以更改测试运行器org.junit.runner.Runner</p><h4 id="测试套件"><a class="markdownIt-Anchor" href="#测试套件"></a> 测试套件</h4><p>1.测试套件就是组织测试类一起运行的<br>写一个作为测试套件的入口类，这个类里不包含其他的方法<br>更改测试运行器Suite.class<br>将要测试的类作为数组传入到Suite.SuiteClasses（0）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:softTest </span></span><br><span class="line"><span class="comment"> * File Name:SuiteTest.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.test.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月15日下午1:57:13 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">package</span> com.test.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite.SuiteClasses;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Suite.class)</span><br><span class="line"><span class="meta">@Suite</span>.SuiteClasses(&#123;calculateTest.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuiteTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数化设置"><a class="markdownIt-Anchor" href="#参数化设置"></a> 参数化设置</h4><p>1.更改默认的测试运行器为RunWith（Parameterized.class）<br>2.声明变量来存放预期值和结果值<br>3.声明一个返回值为Collection的公共静态方法，并使用@Parameters进行修饰<br>4.为测试类声明一个带有参数的公共构造函数，并在其中为之声明变量赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Project Name:softTest </span></span><br><span class="line"><span class="comment"> * File Name:parameterTest.java </span></span><br><span class="line"><span class="comment"> * Package Name:com.test.demo </span></span><br><span class="line"><span class="comment"> * Date:2019年9月15日下午2:06:38 </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, chenzhou1025@126.com All Rights Reserved. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">package</span> com.test.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized.Parameters;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">parameterTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> expected = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> input1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> input2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Parameters</span></span><br><span class="line">    <span class="comment">// 给构造函数赋值的时候被调用的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;Object[]&gt; t() &#123;</span><br><span class="line"><span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][] &#123;</span><br><span class="line">&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>&#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">parameterTest</span><span class="params">(<span class="keyword">int</span> expected, <span class="keyword">int</span> input1, <span class="keyword">int</span> input2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.expected = expected;</span><br><span class="line"><span class="keyword">this</span>.input1 = input1;</span><br><span class="line"><span class="keyword">this</span>.input2 = input2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">assertEquals(expected, <span class="keyword">new</span> calculate().add(input1, input2));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意点"><a class="markdownIt-Anchor" href="#注意点"></a> 注意点：</h3><h4 id="定位控件的参数选择要求"><a class="markdownIt-Anchor" href="#定位控件的参数选择要求"></a> 定位控件的参数选择要求：</h4><ol><li><p>对脚本控件定位参数的选择要追求在要求范围内的唯一性：</p><ul><li><p>参数选择优先级：控件 Resource-id (driver.findElementById())&gt; 控件 XPath(driver.findElementByXPath())</p><ul><li>id举例：<code>com.floral.life:id/tv_title</code></li><li>Xpath举例：<code>//android.widget.TextView[@text='鲜切花 ']，</code>▲.(此处’鲜切花 '的花字后面还有一个空格，所以不要自己输入属性值，应该直接把在 UI Automator Viewer 中的值直接拷贝到代码中去)。</li></ul></li><li><p>Xpath选择时，首要选择 text、content-desc 这种特殊性较强的属性值，不要选择 index、bounds 这种多个控件极易相同(即未满足全局唯一)的属性值。</p></li><li><p>脚本中使用 XPath 进行定位时，务必与脚本编写要求中的 XPath 格式完全一致，即<code>//控件类名[@控件属性名='控件属性值']</code>不要使用<code>//*[@控件属性名='控件属性值']</code>等一系列其他格式</p></li></ul></li><li><p>脚本中不要使用 driver.findElementsByxxx()一类的方法，不要用该方法<br>定位多个控件得到一个 list 再循环来操作 list 中控件(除非该控件的 XPath都不能满足在测试范围内的全局唯一)。</p></li><li><p>脚本中允许自定义函数，但对于 driver.findElementById()这类原生方法，不要进行封装。</p></li><li><p>逻辑上是一句话的代码务必写在一行内，不要在函数的参数处换行。</p></li></ol><h2 id="开发者测试"><a class="markdownIt-Anchor" href="#开发者测试"></a> 开发者测试</h2><p>同样需要配置Java sdk和Andriod SDK环境,除此之外还需要配置maven</p><h3 id="配置maven"><a class="markdownIt-Anchor" href="#配置maven"></a> 配置maven</h3><p>1.在<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">maven官网</a>下载<a href="http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.zip" target="_blank" rel="noopener"><br>apache-maven-3.6.2-bin.zip</a>后解压,根据<a href="https://www.bilibili.com/video/av37883702?from=search&amp;seid=16282408693429403604" target="_blank" rel="noopener">视频</a>配置好maven</p><p>2.发现最初安装eclipse时没有安装maven,于是安装maven.菜单–&gt;windwos–&gt;install new software–&gt;输入 <a href="http://download.eclipse.org/technology/m2e/milestones/1.4%E5%90%8E%E5%9B%9E%E8%BD%A6" target="_blank" rel="noopener">http://download.eclipse.org/technology/m2e/milestones/1.4后回车</a></p><p>环境配置好后,测试一下</p><p><img src="/2019/09/14/软件测试大赛/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%A4%A7%E8%B5%9B%5C%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.jpg" alt="测试结果"></p><ul><li>branchscore是主要评分规则</li><li>变异得分无法实时查看，使用选手最后一次的提交脚本统一运行</li></ul><h3 id="编程建议"><a class="markdownIt-Anchor" href="#编程建议"></a> 编程建议:</h3><ol><li>必须使用断言<ul><li>确认最后提交的测试用例全部正确， Webide或者客户端能运行得分</li><li>使用setup()和teardown()方法进行环境初始化</li><li>使用timeout限制测试用例运行时间，避免测试用例出现无响应情况</li></ul></li><li>Evosuite生成的捕获异常的自动测试用例，可能导致变异无法跑通，<br>学生自己注意</li><li>测试点注意事项:</li></ol><ul><li><p>对double类型进行判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> a = <span class="number">1.0</span>;</span><br><span class="line">assertEquals(<span class="number">1.0</span>,a,<span class="number">0.00001</span>) <span class="comment">// bingo</span></span><br><span class="line">    <span class="comment">//assertEquals(1.0,a,0.00001)     wrong</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对控制台输出进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinPackageTest</span></span>&#123;</span><br><span class="line">    String sep；</span><br><span class="line">    BinPackage bp；</span><br><span class="line">    PrintStream console=<span class="keyword">null</span>；</span><br><span class="line">    ByteArray InputStream in=<span class="keyword">null</span>；</span><br><span class="line">    ByteArrayOutputStream out=<span class="keyword">null</span>；</span><br><span class="line">    InputStream input=<span class="keyword">null</span>；</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    bp=<span class="keyword">new</span> BinPackage()；</span><br><span class="line">    out=<span class="keyword">new</span> ByteArrayoutputstream()；</span><br><span class="line">    input=System.in；</span><br><span class="line">    console=System.out；</span><br><span class="line">    System.setout(<span class="keyword">new</span> PrintStream(out))；</span><br><span class="line">    sep=System.getProperty(<span class="string">"line.separator"</span>)；</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.setIn(input)；</span><br><span class="line">    out.close()；</span><br><span class="line">    System.setout(console)；</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span>(timeout=<span class="number">4000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    in=<span class="keyword">new</span> ByteArrayInputStream((<span class="string">"2"</span>+sep+<span class="string">"12"</span>tsep +<span class="string">"3"</span>+sep+<span class="string">"211"</span>+sep+<span class="string">"222"</span>+sep+<span class="string">"232"</span>).getBytes())；</span><br><span class="line">    System.setIn(in)；</span><br><span class="line">    bp.entrance()；</span><br><span class="line">    string ans=out.tostring()；</span><br><span class="line">    assertEquals(<span class="string">"false"</span>+ sep+<span class="string">"true"</span>+sep+<span class="string">"22"</span>+sep+<span class="string">"false"</span>+sep，ans)；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对异常报错进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Rule;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.rules.ExpectedException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> DOUBLE_DELTA=<span class="number">1e-15</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ExpectedException  thrown=ExpectedException.none();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>(timeout=<span class="number">4000</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Bank bank=<span class="keyword">new</span> Bank();</span><br><span class="line">        Account checkingAccount=<span class="keyword">new</span> Account(Account.CHECKING);</span><br><span class="line">        Customer bill=<span class="keyword">new</span> Customer(<span class="string">"Bi11"</span>).openAccount(checkingAccount);</span><br><span class="line">        bank.addCustomer(bil1);</span><br><span class="line">        thrown.expect(I1legalArgumentException.class);</span><br><span class="line">        thrown.expectMessage(<span class="string">"amount must be greater than zero"</span>);</span><br><span class="line">        checkingAccount.withdraw(-<span class="number">100</span>.e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="nextday-参数化单元测试测试用例设计"><a class="markdownIt-Anchor" href="#nextday-参数化单元测试测试用例设计"></a> <a href="https://www.cnblogs.com/juking/p/6885925.html" target="_blank" rel="noopener">Nextday 参数化单元测试(测试用例)设计</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;软件测试大赛&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#软件测试大赛&quot;&gt;&lt;/a&gt; 软件测试大赛&lt;/h1&gt;
&lt;h2 id=&quot;初学流程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#初学流程&quot;&gt;&lt;/a&gt; 初学
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Java" scheme="https://nymrli.top/tags/Java/"/>
    
      <category term="软件测试" scheme="https://nymrli.top/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java自动化构建工具——Maven</title>
    <link href="https://nymrli.top/2019/09/13/Java%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94Maven/"/>
    <id>https://nymrli.top/2019/09/13/Java自动化构建工具——Maven/</id>
    <published>2019-09-13T03:45:50.000Z</published>
    <updated>2019-09-15T08:07:30.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java自动化构建工具maven"><a class="markdownIt-Anchor" href="#java自动化构建工具maven"></a> Java自动化构建工具——Maven</h1><h2 id="目前的技术在开发中存在的问题-maven作用"><a class="markdownIt-Anchor" href="#目前的技术在开发中存在的问题-maven作用"></a> 目前的技术在开发中存在的问题、Maven作用</h2><p>①一个项目就是一个工程</p><ul><li>如果项目非常庞大，就不适合继续使用package来划分模块。最好是每一个模块对应一个工程，利于分工协作。</li></ul><p>△借助于Maven就可以将一个项目拆分成多个工程。</p><p>②项目中需要的jar包必须手动“复制”、“粘贴”到WEB-INF/lib目录下</p><ul><li>带来的问题是：同样的jar包文件重复出现在不同的项目工程中，一方面浪费存储空间，另外也让工程比较臃肿。</li></ul><p>△借助Maven，可以将jar包仅仅保存在“仓库”中，有需要使用的工程“引用”这个文件接口，并不需要真的把jar包复制过来。</p><p>③jar包需要别人替我们准备好，或到官网下载</p><ul><li>不同技术的官网提供jar包下载的形式是五花八门的。<br>有些技术的官网就是通过Maven或SVN等专门的工具来提供下载的。<br>如果是以不规范的方式下载的jar包，那么其中的内容很可能也是不规范的。</li></ul><p>△借助于Maven可以以一种规范的方式下载jar包。因为所有知名框架或第三方工具的jar包以及按照统一的规范存放在了Maven的中央仓库中。<br>以规范的方式下载的jar包，内容也是可靠的。</p><p>④一个jar包依赖的其他jar包需要自己手动加入到项目中</p><ul><li>FileUpload组件→IO组件。commons-fileupload-1.3.jar依赖于commons-io-2.0.1.jar。如果所有jar包之间的依赖关系都需要程序员自己非常清楚的了解，那么就会极大的增加学习成本。</li></ul><p>△Maven会自动将被依赖的jar包导入进来。</p><h2 id="maven是什么what"><a class="markdownIt-Anchor" href="#maven是什么what"></a> Maven是什么[What]</h2><p>①Maven是一款服务于Java平台的自动化构建工具。<br>Make→Ant→Maven→Gradle妹文、麦文<br>②构建<br>[1]概念：以&quot;ava源文件”、“框架配置文件”、&quot;JSP”、“HTML”、“图片”等资源为“原材料”，去“生产”一个可以运行的项目的过程。</p><ul><li>编译</li><li>部署</li><li>搭建</li></ul><p>[2]编译：Java源文件[User.java]→编译→Class字节码文件[User.class]→交给JVM去执行<br>[3]部署：一个BS项目最终运行的并不是动态Web工程本身，而是这个动态Web工程“编译的结果&quot;<br>生的鸡→处理一熟的鸡<br>动态Web工程→编译、部署→编译结果</p><h2 id="构建过程中的各个环节"><a class="markdownIt-Anchor" href="#构建过程中的各个环节"></a> 构建过程中的各个环节</h2><p>[1]清理：将以前编译得到的旧的class字节码文件删除，为下一次编译做准备<br>[2]编译：将Java源程序编程成class字节码文件<br>[3]测试：自动测试，自动调用junit程序<br>[4]报告：测试程序执行的结果<br>[5]打包：动态Web工程打war包，Java工程打jar包<br>[6]安装：Maven特定的概念——将打包得到的文件复制到“仓库”中的指定位置<br>[7]部署：将动态Web工程生成的war包复制到Servlet容器的指定目录下，使其可以运行</p><h2 id="常用maven命令"><a class="markdownIt-Anchor" href="#常用maven命令"></a> 常用Maven命令</h2><p>①注意：执行与构建过程相关的Maven命令，必须进入pom.xml所在的目录。<br>与构建过程相关：编译、测试、打包、……<br>②常用命令<br>[1]mvn clean：清理<br>[2]mvn compile：编译主程序<br>[3]mvn test-compile：编译测试程序<br>[4]mvn test：执行测试<br>[5]mvn package：打包</p><h2 id="联网问题"><a class="markdownIt-Anchor" href="#联网问题"></a> 联网问题</h2><p>①Maven的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须由特定的插件来完成。而插件本身并不包含在Maven的核心程序中。<br>②当我们执行的Maven命令需要用到某些插件时，Maven核心程序会首先到本地仓库中查找。<br>③本地仓库的默认位置：[系统中当前用户的家目录]/.m2/repository 如<code>C:/Users/[登录当前系统的用户名]/.m2/repository</code><br>④Maven核心程序如果在本地仓库中找不到需要的插件，那么它会自动连接外网，到中央仓库下载。<br>⑤如果此时无法连接外网，则构建失败。<br>⑥修改默认本地仓库的位置可以让Maven核心程序到我们事先准备好的目录下查找插件<br>[1]找到Maven解压目录<code>/conf/settings.xml</code><br>[2]在settings.xml文件中找到localRepository标签<br>[3]将<code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code>从注释中取出<code>E:/apache-maven-3.6.2/MavenRepo</code><br>[4]将标签体内容修改为已经准备好的Maven仓库目录</p><h3 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充:</h3><p>换镜像,可以在settings.xml的第153行左右,设置阿里云镜像</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/av63847523/?p=3" target="_blank" rel="noopener">介绍Maven的视频</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java自动化构建工具maven&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java自动化构建工具maven&quot;&gt;&lt;/a&gt; Java自动化构建工具——Maven&lt;/h1&gt;
&lt;h2 id=&quot;目前的技术在开发中存在的问题-maven作用&quot;
      
    
    </summary>
    
    
      <category term="Java" scheme="https://nymrli.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>打jar包和使用jar包</title>
    <link href="https://nymrli.top/2019/09/13/%E6%89%93jar%E5%8C%85%E5%92%8C%E4%BD%BF%E7%94%A8jar%E5%8C%85/"/>
    <id>https://nymrli.top/2019/09/13/打jar包和使用jar包/</id>
    <published>2019-09-13T03:45:11.000Z</published>
    <updated>2019-09-15T08:07:31.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打jar包和使用jar包"><a class="markdownIt-Anchor" href="#打jar包和使用jar包"></a> 打jar包和使用jar包</h1><h2 id="一-为什么要打jar包"><a class="markdownIt-Anchor" href="#一-为什么要打jar包"></a> 一、为什么要打jar包</h2><p>给别人用的时候一般给别人的是class文件。如果有很多类这么办？把类变成一个压缩包！windows下的压缩包是.zip格式等，而eclipse压缩包是.jar格式。</p><h2 id="二-如何查看jar包"><a class="markdownIt-Anchor" href="#二-如何查看jar包"></a> 二、如何查看jar包</h2><p>用<strong>解压缩软件解压</strong>即可。可以看到里面有哪些class文件。</p><h2 id="三-如何开发jar包"><a class="markdownIt-Anchor" href="#三-如何开发jar包"></a> 三、如何开发jar包</h2><p>开发jar包的人员开发流程：</p><h3 id="步骤1编写类"><a class="markdownIt-Anchor" href="#步骤1编写类"></a> 步骤1:编写类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GetSum.java</span></span><br><span class="line"><span class="keyword">package</span> cn.itcast.sum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetSum</span></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤2打包成jar包"><a class="markdownIt-Anchor" href="#步骤2打包成jar包"></a> 步骤2:打包成jar包</h3><p>在要导出的类上,右键-&gt;Export-&gt;java -&gt; JAR file,然后选择路径,如D:/sum.jar -&gt;导出。</p><p>打开jar包可以看到jar包中含有class文件。</p><h2 id="四-如何使用jar包"><a class="markdownIt-Anchor" href="#四-如何使用jar包"></a> 四、如何使用jar包</h2><p>当别人发过来一个jar包(jar包里面有很多class文件)后，比如上面的sum.jar包，如何使用呢？</p><p>有两种方法。第一种方法一般不用，太low了。</p><h4 id="使用方法一这个方法太low了不用"><a class="markdownIt-Anchor" href="#使用方法一这个方法太low了不用"></a> 使用方法一：这个方法太low了，不用</h4><p>步骤1:编写Test.java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test.java</span></span><br><span class="line"><span class="keyword">import</span> cn.itcast.sum.*;<span class="comment">//光设置classpath的环境变量还是不够，还要导入包 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> a = GetSum.getSum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">            System.out.println(); </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤2:在cmd窗口中使用</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">set</span> classpath = D:/sum.jar;                        //设置环境变量，知道在哪里找jar包。只在当前的窗口有效。</span><br><span class="line">&gt;javac Test.java</span><br><span class="line">&gt;java Test</span><br></pre></td></tr></table></figure><h4 id="使用方法二一般使用这个方法"><a class="markdownIt-Anchor" href="#使用方法二一般使用这个方法"></a> 使用方法二：一般使用这个方法</h4><p>步骤1:在工程目录下新建文件夹lib：File-&gt;New-&gt;Folder,文件名lib，将需要使用的jar包复制进去（ctrl c、ctrl v）。在工程上右键刷新就可以看到jar包了</p><p>步骤2:在需要使用的jar包上，右键-&gt;build path -&gt;Add to build Path，发现多了一个小奶瓶～</p><p>步骤3:编写测试类Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test.java</span></span><br><span class="line"><span class="keyword">import</span> cn.itcast.GetSum;<span class="comment">//不用自己导入。当下面输入GetSum.getSum()时候，按Ctrl+Shift+o自动输入包名。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> a = GetSum.getSum(<span class="number">1</span>,<span class="number">2</span>);            <span class="comment">//直接使用jar包下面的class类</span></span><br><span class="line">            System.out.println(); </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>鼠标点到getSum()上，然后按F3，是看不到源码的。出现下面这种界面。这是因为<strong>源码不在jdk里面</strong>。<br>可以点击Attach Source按钮，然后点击&quot;External File…&quot;或者&quot;External Folder&quot;找到jar包对应的源码。（jar包中有class文件，并不是源码。）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;打jar包和使用jar包&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#打jar包和使用jar包&quot;&gt;&lt;/a&gt; 打jar包和使用jar包&lt;/h1&gt;
&lt;h2 id=&quot;一-为什么要打jar包&quot;&gt;&lt;a class=&quot;markdownIt-Anc
      
    
    </summary>
    
    
      <category term="Java" scheme="https://nymrli.top/tags/Java/"/>
    
  </entry>
  
</feed>
