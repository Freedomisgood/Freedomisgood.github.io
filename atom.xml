<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>果粒橙的博客</title>
  
  <subtitle>别装作很努力，因为结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2018-12-28T11:45:36.780Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>果粒橙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构实验1——线性表及多项式的运</title>
    <link href="https://nymrli.top/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C1%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%8F%8A%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E8%BF%90.html"/>
    <id>https://nymrli.top/数据结构实验1——线性表及多项式的运.html</id>
    <published>2018-12-28T11:42:11.000Z</published>
    <updated>2018-12-28T11:45:36.780Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链表操作"><a href="#链表操作" class="headerlink" title="链表操作"></a>链表操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Notpresent 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType elem;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">first</span>;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">&#125;SingleList;</span><br><span class="line"></span><br><span class="line">SingleList <span class="built_in">list</span>;<span class="comment">//声明全局的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(SingleList *L)</span></span>&#123;</span><br><span class="line">L-&gt;first = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Find</span><span class="params">(SingleList L,<span class="keyword">int</span> i,ElemType *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *p;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">0</span> || i&gt; L.n<span class="number">-1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L.first;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; ++i) p=p-&gt;link;</span><br><span class="line">*x = p-&gt;elem;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(SingleList *L,<span class="keyword">int</span> j,ElemType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *p,*q;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(j&lt;<span class="number">-1</span> || j&gt; L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L-&gt;first;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;j;i++) p=p-&gt;link;<span class="comment">//p==&gt;a(i-1)</span></span><br><span class="line"></span><br><span class="line">q = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">q-&gt;elem = x;</span><br><span class="line"><span class="keyword">if</span> (j&gt;<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">q-&gt;link = p-&gt;link;<span class="comment">// a(i-1)==&gt;???  ===&gt;  a(i)-&gt;???</span></span><br><span class="line">p-&gt;link = q ;<span class="comment">//a(i-1)-&gt;a(i)</span></span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">q-&gt;link = L-&gt;first;</span><br><span class="line">L-&gt;first = q;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;n++;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Delete</span><span class="params">(SingleList *L,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">Node *p,*q;</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">if</span> ( j&lt;<span class="number">0</span> || j&gt;L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line">q = L-&gt;first;</span><br><span class="line">p = L-&gt;first;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;j<span class="number">-1</span>;i++) q = q-&gt;link;<span class="comment">//q指向 a(i-1)</span></span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">0</span>)</span><br><span class="line">L-&gt;first = L-&gt;first-&gt;link;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p = q-&gt;link;<span class="comment">//此时p指向a(i)</span></span><br><span class="line">q-&gt;link = p-&gt;link;<span class="comment">//将q指向a(a+1)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">L-&gt;n -- ;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Output</span><span class="params">(SingleList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *p;</span><br><span class="line"><span class="keyword">if</span>(!L.n) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L.first;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;elem );</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory</span><span class="params">(SingleList *L)</span></span>&#123;</span><br><span class="line">Node *p;</span><br><span class="line"><span class="keyword">while</span>(L-&gt;first)&#123;</span><br><span class="line">p = L-&gt;first-&gt;link;  <span class="comment">//保存后继节点地址,防止断链</span></span><br><span class="line"><span class="built_in">free</span>(L-&gt;first);<span class="comment">//释放first节点所指节点的存储空间   从前往后释放</span></span><br><span class="line">L-&gt;first = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,x;</span><br><span class="line"></span><br><span class="line">Init(&amp;<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,i<span class="number">-1</span>,i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the linked list is :"</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">Delete(&amp;<span class="built_in">list</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nafter deleting the list is:"</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Find(<span class="built_in">list</span>,<span class="number">0</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nthe value is %d\n"</span>,x );</span><br><span class="line"></span><br><span class="line">Destory(&amp;<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带表头节点的单链表"><a href="#带表头节点的单链表" class="headerlink" title="带表头节点的单链表"></a>带表头节点的单链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Notpresent 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType elem;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">head</span>;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">&#125;Headlist;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(Headlist *L)</span></span>&#123;</span><br><span class="line">L-&gt;head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;head) <span class="keyword">return</span> ERROR;</span><br><span class="line">L-&gt;head-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Sort</span><span class="params">(Headlist *L)</span></span>&#123;</span><br><span class="line">Node *p=L-&gt;head,*pre=<span class="literal">NULL</span>;</span><br><span class="line">Node *r=p-&gt;link;</span><br><span class="line">p-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">p=r;<span class="comment">//r保存原来的结点顺序</span></span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">r = p-&gt;link;<span class="comment">//r继续取下一个结点</span></span><br><span class="line">pre = L-&gt;head;<span class="comment">//pre重新构造L,从头开始循环</span></span><br><span class="line"><span class="keyword">while</span>(pre-&gt;link != <span class="literal">NULL</span> &amp;&amp; pre-&gt;link-&gt;elem &lt; p-&gt;elem)  </span><br><span class="line">            <span class="comment">// 如果链表非空 且 新链表与当前结点数值比较</span></span><br><span class="line">pre = pre-&gt;link;</span><br><span class="line">        <span class="comment">//如果当前要插入的结点值大于循环中当前已排序结点,则取已排序链表下一个结点继续比较</span></span><br><span class="line">p-&gt;link = pre-&gt;link;    </span><br><span class="line">        <span class="comment">//找到p要插入的位置后,插入:若3&lt;pre=5&lt;bigger=7&lt;8,p=6,则 p=&gt;bigger</span></span><br><span class="line">pre-&gt;link = p;<span class="comment">// pre=&gt;p,插入即可</span></span><br><span class="line">p=r;<span class="comment">// p继续取下个结点依次按原来顺序循环遍历原来链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">deleleab</span><span class="params">(Headlist *L, <span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123; </span><br><span class="line">     Node *q = L-&gt;head,*p=L-&gt;head-&gt;link;  <span class="comment">// q为上一个,p为当前的</span></span><br><span class="line">     <span class="keyword">while</span>( p )</span><br><span class="line">     <span class="keyword">if</span>(p-&gt;elem &gt;= a &amp;&amp; p-&gt;elem &lt;= b)</span><br><span class="line">     &#123;</span><br><span class="line">     q-&gt;link = p-&gt;link;<span class="comment">// 1 - 2 - 3  1==&gt;3,1的指针域指向3</span></span><br><span class="line">     <span class="built_in">free</span>(p);<span class="comment">//释放2</span></span><br><span class="line">     p = q-&gt;link;<span class="comment">// 当前的指针变成3</span></span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        p = p-&gt;link;</span><br><span class="line">        q = p-&gt;link;</span><br><span class="line">     &#125;     </span><br><span class="line">     <span class="keyword">return</span> OK; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Converse</span><span class="params">(Headlist *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *p = <span class="literal">NULL</span>,*cur= <span class="literal">NULL</span>; </span><br><span class="line">Node *q = L-&gt;head-&gt;link;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;head &amp;&amp; L-&gt;head-&gt;link)&#123;<span class="comment">//如果表不存在或是为空,则return ERROR</span></span><br><span class="line"><span class="keyword">while</span>( q != <span class="literal">NULL</span> )<span class="comment">//q按照原来的顺序依次遍历各结点</span></span><br><span class="line">&#123;</span><br><span class="line">cur = q;<span class="comment">//cur为当前结点</span></span><br><span class="line">q = q-&gt;link;<span class="comment">//q保存下一个结点</span></span><br><span class="line">L-&gt;head-&gt;link = cur;<span class="comment">//为了不动头结点,所以头结点link始终指向当前要加的结点</span></span><br><span class="line">cur-&gt;link = p;<span class="comment">//当前的link指向上一个结点</span></span><br><span class="line">p = cur;<span class="comment">//保存上一个结点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(Headlist *L,<span class="keyword">int</span> j,ElemType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">Node *p=<span class="literal">NULL</span>,*q=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(j&lt;<span class="number">-1</span> || j&gt; L-&gt; n<span class="number">-1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L-&gt;head;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=j;i++) p=p-&gt;link;</span><br><span class="line">q = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">q-&gt;elem = x;</span><br><span class="line">q-&gt;link = p-&gt;link;</span><br><span class="line">p-&gt;link = q;</span><br><span class="line">L-&gt;n++;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Output</span><span class="params">(Headlist L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *p = L.head-&gt;link;</span><br><span class="line"><span class="keyword">if</span>(!L.n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;elem );</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Destory</span><span class="params">(Headlist *L)</span></span>&#123;</span><br><span class="line">Node *p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(L-&gt;head)&#123;</span><br><span class="line">p = L-&gt;head-&gt;link; </span><br><span class="line"><span class="built_in">free</span>(L-&gt;head);</span><br><span class="line">L-&gt;head = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Delete</span><span class="params">(Headlist *L,<span class="keyword">int</span> j)</span></span>&#123;<span class="comment">//下标j</span></span><br><span class="line">Node *p = L-&gt;head,*q = L-&gt;head;<span class="comment">// q = tmp</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">if</span> ( j&lt;<span class="number">0</span> || j&gt;L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span> ;i&lt;=j<span class="number">-1</span>;i++) p = p-&gt;link;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">q-&gt;link = p-&gt;link;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Find</span><span class="params">(Headlist *L,<span class="keyword">int</span> j,ElemType *x)</span></span>&#123;</span><br><span class="line">Node *p= L-&gt;head;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> ( j&lt;<span class="number">0</span> || j&gt;L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span> ;i&lt;=j;i++) p = p-&gt;link;</span><br><span class="line">*x = p-&gt;elem;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">Headlist <span class="built_in">list</span>;</span><br><span class="line">Init(&amp;<span class="built_in">list</span>);</span><br><span class="line"> Insert(&amp;<span class="built_in">list</span>,<span class="number">-1</span>,<span class="number">3</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">-1</span>,<span class="number">5</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">2</span>,<span class="number">7</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the linked list is :"</span>); </span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nAfter sorted:"</span>);</span><br><span class="line">Sort(&amp;<span class="built_in">list</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nAfter Conversed:"</span>);</span><br><span class="line">Converse(&amp;<span class="built_in">list</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nAfter delete index of 0,the list is:"</span>);</span><br><span class="line">Delete(&amp;<span class="built_in">list</span>,<span class="number">0</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">Find(&amp;<span class="built_in">list</span>,<span class="number">2</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nthe index of 2:%d\n"</span>,x);</span><br><span class="line"></span><br><span class="line">Destory(&amp;<span class="built_in">list</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表实现多项式加减、相乘"><a href="#单链表实现多项式加减、相乘" class="headerlink" title="单链表实现多项式加减、相乘"></a>单链表实现多项式加减、相乘</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Notpresent 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType ceof;</span><br><span class="line">ElemType <span class="built_in">exp</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PNode</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;PNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PNode</span> *<span class="title">head</span>;</span></span><br><span class="line">&#125;polynominal;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">p-&gt;head = (PNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">p-&gt;head-&gt;<span class="built_in">exp</span> = <span class="number">-1</span>;</span><br><span class="line">p-&gt;head-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Create</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">PNode *pn = <span class="literal">NULL</span>,*q=<span class="literal">NULL</span>,*pre=<span class="literal">NULL</span>;</span><br><span class="line">p-&gt;head = (PNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">p-&gt;head-&gt;<span class="built_in">exp</span> = <span class="number">-1</span>;</span><br><span class="line">p-&gt;head-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line">pn = (PNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ceof:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pn-&gt;ceof);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"exp:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pn-&gt;<span class="built_in">exp</span>);</span><br><span class="line"><span class="keyword">if</span> (pn-&gt;<span class="built_in">exp</span> &lt; <span class="number">0</span>) &#123;<span class="built_in">printf</span>(<span class="string">"End the input\n"</span>); <span class="keyword">break</span>;&#125;</span><br><span class="line">pre = p-&gt;head;<span class="comment">//pre从链表头开始</span></span><br><span class="line">q=p-&gt;head-&gt;link;</span><br><span class="line"><span class="keyword">while</span>(q &amp;&amp; q-&gt;<span class="built_in">exp</span> &gt; pn-&gt;<span class="built_in">exp</span>)&#123;<span class="comment">//pn为当前结点,q为链表中结点</span></span><br><span class="line">pre = q;<span class="comment">//</span></span><br><span class="line">q = q-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line">pn-&gt;link = q;</span><br><span class="line">        <span class="comment">// 在pre和q之间插入pn,(q为null时,相当于末尾插入pn)</span></span><br><span class="line">pre-&gt;link = pn;<span class="comment">// pre =&gt; pn =&gt; q</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Sort</span><span class="params">(polynominal *L)</span></span>&#123;<span class="comment">//从大到小</span></span><br><span class="line">PNode *p=L-&gt;head,*pre=<span class="literal">NULL</span>;</span><br><span class="line">PNode *r=p-&gt;link;</span><br><span class="line">p-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">p=r;<span class="comment">//r保存原来的结点顺序</span></span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">r = p-&gt;link;<span class="comment">//r继续取下一个结点</span></span><br><span class="line">pre = L-&gt;head;<span class="comment">//pre重新构造L,从头开始循环</span></span><br><span class="line"><span class="keyword">while</span>(pre-&gt;link != <span class="literal">NULL</span> &amp;&amp; pre-&gt;link-&gt;<span class="built_in">exp</span> &lt; p-&gt;<span class="built_in">exp</span>)  </span><br><span class="line">            <span class="comment">// 如果链表非空 且 新链表与当前结点数值比较</span></span><br><span class="line">pre = pre-&gt;link;</span><br><span class="line">        <span class="comment">//如果当前要插入的结点值大于循环中当前已排序结点,则取已排序链表下一个结点继续比较</span></span><br><span class="line">p-&gt;link = pre-&gt;link;    </span><br><span class="line">        <span class="comment">//找到p要插入的位置后,插入:若3&lt;pre=5&lt;bigger=7&lt;8,p=6,则 p=&gt;bigger</span></span><br><span class="line">pre-&gt;link = p;<span class="comment">// pre=&gt;p,插入即可</span></span><br><span class="line">p=r;<span class="comment">// p继续取下个结点依次按原来顺序循环遍历原来链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Add</span><span class="params">(polynominal *px,polynominal *qx)</span></span>&#123;<span class="comment">//目的:将q改成p+q</span></span><br><span class="line">PNode *q1=qx-&gt;head, *p=px-&gt;head-&gt;link;<span class="comment">//q1指向qx表头结点</span></span><br><span class="line">PNode *q=q1-&gt;link;<span class="comment">//p指向多项式px第一个结点,q指向qx第一个</span></span><br><span class="line">PNode *temp = <span class="literal">NULL</span>;<span class="comment">//q1是q前驱</span></span><br><span class="line"><span class="keyword">while</span>( q &amp;&amp; p)&#123;</span><br><span class="line"><span class="keyword">while</span>( p-&gt;<span class="built_in">exp</span> &lt; q-&gt;<span class="built_in">exp</span> )&#123;<span class="comment">//找到qx中 大于等于q指数项的项,q不断右移</span></span><br><span class="line">q1 = q;</span><br><span class="line">q = q-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;<span class="built_in">exp</span> == q-&gt;<span class="built_in">exp</span> )&#123;</span><br><span class="line">q-&gt;ceof = q-&gt;ceof + p-&gt;ceof;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;ceof == <span class="number">0</span>)&#123;</span><br><span class="line">q1-&gt;link = q-&gt;link;<span class="comment">//释放当前q的内存</span></span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">q = q1-&gt;link;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//p\q都右移</span></span><br><span class="line">q1 = q;<span class="comment">//q1</span></span><br><span class="line">q = q-&gt;link;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//p-&gt;exp &gt; q-&gt;exp </span></span><br><span class="line">temp = (PNode * )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">temp-&gt;ceof = p-&gt;ceof;</span><br><span class="line">temp-&gt;<span class="built_in">exp</span> = p-&gt;<span class="built_in">exp</span>;</span><br><span class="line">temp-&gt;link = q1-&gt;link;</span><br><span class="line">q1-&gt;link = temp;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">PNode *q = p-&gt;head-&gt;link;</span><br><span class="line"><span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>( q!=<span class="literal">NULL</span> )&#123;</span><br><span class="line"><span class="keyword">if</span>(q-&gt;link == <span class="literal">NULL</span>) last =<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dx^%d"</span>, q-&gt;ceof,q-&gt;<span class="built_in">exp</span>);</span><br><span class="line"><span class="keyword">if</span>(!last) <span class="built_in">printf</span>(<span class="string">"+"</span>);</span><br><span class="line">q = q-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">PNode *q = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;head)&#123;</span><br><span class="line">q = p-&gt;head-&gt;link;</span><br><span class="line"><span class="built_in">free</span>(p-&gt;head);</span><br><span class="line">p-&gt;head = q;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********合并同类项*****************/</span></span><br><span class="line"><span class="comment">/***********合并即free*****************/</span></span><br><span class="line"><span class="function">Status <span class="title">unify</span><span class="params">(polynominal *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PNode *p=<span class="literal">NULL</span>;</span><br><span class="line">    PNode *q=<span class="literal">NULL</span>;</span><br><span class="line">    PNode *last=<span class="literal">NULL</span>;</span><br><span class="line">    PNode *tmp;</span><br><span class="line">    <span class="comment">//while(p-&gt;link != NULL)&#123;</span></span><br><span class="line">    <span class="keyword">for</span>(p=t-&gt;head-&gt;link;p!=<span class="literal">NULL</span>;p=p-&gt;link)&#123; <span class="comment">//选择</span></span><br><span class="line">        last = p;</span><br><span class="line">        <span class="keyword">for</span>(q=last-&gt;link; q!=<span class="literal">NULL</span> ; )&#123;  <span class="comment">//q指针向后推移指向下一结点</span></span><br><span class="line">        <span class="keyword">if</span>(q-&gt;<span class="built_in">exp</span> == p-&gt;<span class="built_in">exp</span>)&#123;<span class="comment">//相等计算</span></span><br><span class="line">            p-&gt;ceof += q-&gt;ceof;<span class="comment">//q为 滑动项</span></span><br><span class="line">            tmp = q-&gt;link;</span><br><span class="line">            last-&gt;link = q-&gt;link;     <span class="comment">//last保存上一个q   </span></span><br><span class="line">            <span class="built_in">free</span>(q);<span class="comment">// 吧q的空间释放掉</span></span><br><span class="line">            q= tmp;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        last= q;</span><br><span class="line">        q=q-&gt;link;&#125;<span class="comment">//如果不相等就判断下一个</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">polynominal <span class="title">Multiply</span><span class="params">(polynominal *px,polynominal *qx)</span></span>&#123;</span><br><span class="line">PNode *p = px-&gt;head;</span><br><span class="line">PNode *q = qx-&gt;head;</span><br><span class="line">PNode *x = <span class="literal">NULL</span>;</span><br><span class="line">PNode *tmp = <span class="literal">NULL</span>;</span><br><span class="line">polynominal newpoly;</span><br><span class="line">Init(&amp;newpoly);</span><br><span class="line">x = newpoly.head;</span><br><span class="line"><span class="keyword">for</span> (p=px-&gt;head-&gt;link; p!=<span class="literal">NULL</span>; p=p-&gt;link)&#123;</span><br><span class="line"><span class="keyword">for</span> (q=qx-&gt;head-&gt;link; q!=<span class="literal">NULL</span>; q=q-&gt;link)&#123;</span><br><span class="line">tmp = (PNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">tmp-&gt;ceof = p-&gt;ceof * q-&gt;ceof;</span><br><span class="line">tmp-&gt;<span class="built_in">exp</span> = p-&gt;<span class="built_in">exp</span> + q-&gt;<span class="built_in">exp</span>;</span><br><span class="line">tmp-&gt;link = x-&gt;link;<span class="comment">//新生成的结点指向上一个生成的结点的地址</span></span><br><span class="line">x-&gt;link = tmp;<span class="comment">//使链表记录当前tmp结点</span></span><br><span class="line">x = x-&gt;link;<span class="comment">//取下一个结点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">unify(&amp;newpoly);</span><br><span class="line">Sort(&amp;newpoly);</span><br><span class="line"><span class="keyword">return</span> newpoly;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">polynominal p,q;</span><br><span class="line">polynominal mul;</span><br><span class="line">Create(&amp;p);</span><br><span class="line">Output(&amp;p);</span><br><span class="line"><span class="comment">// printf("After unify:\n");Unify</span></span><br><span class="line"><span class="comment">// unify(&amp;p);</span></span><br><span class="line"><span class="comment">// Output(p);</span></span><br><span class="line">Create(&amp;q);</span><br><span class="line">Output(&amp;q);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"After Multiplied:\n"</span>);<span class="comment">//Mul</span></span><br><span class="line">mul = Multiply(&amp;p,&amp;q);</span><br><span class="line">Output(&amp;mul);</span><br><span class="line"></span><br><span class="line">Add(&amp;p,&amp;q);<span class="comment">//ADD</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"After added:"</span>);</span><br><span class="line">Output(&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;链表操作&quot;&gt;&lt;a href=&quot;#链表操作&quot; class=&quot;headerlink&quot; title=&quot;链表操作&quot;&gt;&lt;/a&gt;链表操作&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据结构实验2——二叉树的基本操作及哈夫曼编码译码系统的实现</title>
    <link href="https://nymrli.top/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C2%E2%80%94%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E8%AF%91%E7%A0%81%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0.html"/>
    <id>https://nymrli.top/数据结构实验2——二叉树的基本操作及哈夫曼编码译码系统的实现.html</id>
    <published>2018-12-28T11:35:38.000Z</published>
    <updated>2018-12-28T11:40:12.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二叉树的遍历及计算"><a href="#二叉树的遍历及计算" class="headerlink" title="二叉树的遍历及计算"></a>二叉树的遍历及计算</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span></span><br><span class="line">T Data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">LChild</span>,*<span class="title">RChild</span>;</span></span><br><span class="line">&#125;BTNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">BTNode *root;</span><br><span class="line">&#125;BTTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*先序建树*/</span></span><br><span class="line"><span class="function">BTNode* <span class="title">PreCreateBt</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ch = getchar();</span><br><span class="line"><span class="keyword">if</span>( ch == <span class="string">'#'</span> ) t = <span class="literal">NULL</span>; </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">t = (BTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">t-&gt;Data = ch;</span><br><span class="line">t-&gt;LChild = PreCreateBt(t-&gt;LChild);</span><br><span class="line">t-&gt;RChild = PreCreateBt(t-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrebuildTree</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line">tree-&gt;root = PreCreateBt(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*先序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTransverse</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, t-&gt;Data);</span><br><span class="line">PreOrderTransverse(t-&gt;LChild);</span><br><span class="line">PreOrderTransverse(t-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreePreOrder</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) PreOrderTransverse(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*中序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTransverse</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">InOrderTransverse(t-&gt;LChild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, t-&gt;Data);</span><br><span class="line">InOrderTransverse(t-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeInOrder</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) InOrderTransverse(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*后序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AfterOrderTransverse</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">AfterOrderTransverse(t-&gt;LChild);</span><br><span class="line">AfterOrderTransverse(t-&gt;RChild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, t-&gt;Data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeAfterOrder</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) AfterOrderTransverse(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结点数目*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countNode</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( t != <span class="literal">NULL</span>) <span class="keyword">return</span> countNode(t-&gt;LChild)+countNode(t-&gt;RChild)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//如果t为空,则该t的父亲结点是子结点,该t结点不需要计数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Nodenum</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) <span class="keyword">return</span> countNode(tree-&gt;root);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*叶子结点数目*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countLeafNode</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( t != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>( t-&gt;LChild == <span class="literal">NULL</span> &amp;&amp; t-&gt;RChild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> countLeafNode(t-&gt;LChild)+countLeafNode(t-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//如果t为空,则该t的父亲结点是子结点,该t结点不需要计数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">leafNodenum</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) <span class="keyword">return</span> countLeafNode(tree-&gt;root);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*计算树的高度*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">coutTreeHeight</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> l = coutTreeHeight(t-&gt;LChild);</span><br><span class="line"><span class="keyword">int</span> r = coutTreeHeight(t-&gt;RChild);</span><br><span class="line"><span class="keyword">if</span> ( l &gt; r) <span class="keyword">return</span> l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> r+<span class="number">1</span>;</span><br><span class="line"><span class="comment">// return max(r,l)+1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TreeHeight</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) <span class="keyword">return</span> coutTreeHeight(tree-&gt;root);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*翻转整个二叉树(左右子树交换)*/</span></span><br><span class="line"><span class="function">BTNode* <span class="title">ReverseLeftRightChild</span><span class="params">(BTNode *t)</span></span>&#123;<span class="comment">//先序遍历</span></span><br><span class="line"> <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>( t-&gt;LChild!=<span class="literal">NULL</span> || t-&gt;RChild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">   BTNode *p,*q;</span><br><span class="line">p = ReverseLeftRightChild(t-&gt;LChild);</span><br><span class="line">q = ReverseLeftRightChild(t-&gt;RChild);</span><br><span class="line">t-&gt;LChild = q;</span><br><span class="line">t-&gt;RChild = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReverseBtree</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) ReverseLeftRightChild(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>&#123;</span><br><span class="line">BTTree tree;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"先序建树:"</span>);</span><br><span class="line">PrebuildTree(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n先序遍历:"</span>);</span><br><span class="line">TreePreOrder(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n中序遍历:"</span>);</span><br><span class="line">TreeInOrder(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n后序遍历:"</span>);</span><br><span class="line">TreeAfterOrder(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n结点数目:%d\n"</span>,Nodenum(&amp;tree));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n叶子结点数目:%d\n"</span>,leafNodenum(&amp;tree));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n树的高度:%d\n"</span>,TreeHeight(&amp;tree));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"翻转二叉树:\n"</span>);</span><br><span class="line">ReverseBtree(&amp;tree);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n后序遍历:"</span>);</span><br><span class="line">TreeAfterOrder(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> n 5           <span class="comment">//叶子数目</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> m (2*n-1)     <span class="comment">//结点总数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxval 10000.0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100   <span class="comment">//哈夫曼编码的最大位数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"> <span class="keyword">char</span> ch;</span><br><span class="line"> <span class="keyword">float</span> weight;</span><br><span class="line"> <span class="keyword">int</span> lchild,rchild,parent;</span><br><span class="line">&#125;hufmtree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"> <span class="keyword">char</span> bits[n];   <span class="comment">//位串</span></span><br><span class="line"> <span class="keyword">int</span> start;      <span class="comment">//编码在位串中的起始位置</span></span><br><span class="line"> <span class="keyword">char</span> ch;        <span class="comment">//字符</span></span><br><span class="line">&#125;codetype;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//建立哈夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">huffman</span><span class="params">(hufmtree tree[])</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i,j,p1,p2;<span class="comment">//p1,p2分别记住每次合并时 权值最小 和 次小 的两个根结点的下标</span></span><br><span class="line">   <span class="keyword">float</span> small1,small2,f;</span><br><span class="line">   <span class="keyword">char</span> c;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;    <span class="comment">//初始化</span></span><br><span class="line">    tree[i].parent=<span class="number">0</span>;</span><br><span class="line">    tree[i].lchild=<span class="number">-1</span>;</span><br><span class="line">    tree[i].rchild=<span class="number">-1</span>;</span><br><span class="line">    tree[i].weight=<span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;        <span class="comment">//读入前n个叶子结点的字符及权值</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"输入第%d个字符为和权值:"</span>,i+<span class="number">1</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%c %f"</span>,&amp;c,&amp;f);</span><br><span class="line">      getchar();</span><br><span class="line">      tree[i].ch=c;</span><br><span class="line">      tree[i].weight=f;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">for</span>(i=n;i&lt;m;i++)&#123;               <span class="comment">//进行n-1次合并，产生n-1个新结点</span></span><br><span class="line">    p1=<span class="number">0</span>;p2=<span class="number">0</span>;</span><br><span class="line">    small1=maxval;small2=maxval;   <span class="comment">//maxval是float类型的最大值</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)               <span class="comment">//选出两个权值最小的根结点</span></span><br><span class="line">     <span class="keyword">if</span>(tree[j].parent==<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">if</span>(tree[j].weight&lt;small1)&#123;</span><br><span class="line">       small2=small1;               <span class="comment">//改变最小权、次小权及对应的位置</span></span><br><span class="line">       small1=tree[j].weight;</span><br><span class="line">       p2=p1;</span><br><span class="line">       p1=j;</span><br><span class="line">      &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(tree[j].weight&lt;small2)&#123;</span><br><span class="line">          small2=tree[j].weight;  <span class="comment">//改变次小权及位置</span></span><br><span class="line">          p2=j;</span><br><span class="line">        &#125;</span><br><span class="line">    tree[p1].parent=i;</span><br><span class="line">    tree[p2].parent=i;</span><br><span class="line">    tree[i].lchild=p1;  <span class="comment">//最小权根结点是新结点的左孩子</span></span><br><span class="line">    tree[i].rchild=p2;  <span class="comment">//次小权根结点是新结点的右孩子</span></span><br><span class="line">    tree[i].weight=tree[p1].weight+tree[p2].weight;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;<span class="comment">//huffman</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据哈夫曼树求出哈夫曼编码</span></span><br><span class="line"><span class="comment">//codetype code[]为求出的哈夫曼编码</span></span><br><span class="line"><span class="comment">//hufmtree tree[]为已知的哈夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">huffmancode</span><span class="params">(codetype code[],hufmtree tree[])</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i,c,p;               </span><br><span class="line">   codetype cd;               <span class="comment">//缓冲变量</span></span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">      cd.start=n;</span><br><span class="line">      cd.ch=tree[i].ch;</span><br><span class="line">      c=i;                      <span class="comment">//从叶结点出发向上回溯</span></span><br><span class="line">      p=tree[i].parent;         <span class="comment">//tree[p]是tree[i]的双亲</span></span><br><span class="line">      <span class="keyword">while</span>(p!=<span class="number">0</span>)&#123;</span><br><span class="line">         cd.start--;</span><br><span class="line">         <span class="keyword">if</span>(tree[p].lchild==c) cd.bits[cd.start]=<span class="string">'0'</span>;   </span><br><span class="line">         <span class="comment">//tree[i]是左子树，生成代码'0'</span></span><br><span class="line">         <span class="keyword">else</span> cd.bits[cd.start]=<span class="string">'1'</span>;   </span><br><span class="line">         <span class="comment">//tree[i]是右子树，生成代码'1'</span></span><br><span class="line">         c=p;</span><br><span class="line">         p=tree[p].parent;</span><br><span class="line">      &#125;</span><br><span class="line">      code[i]=cd;    <span class="comment">//第i+1个字符的编码存入code[i]</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;<span class="comment">//huffmancode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//哈夫曼树译码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(hufmtree tree[])</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i,j;</span><br><span class="line">   <span class="keyword">char</span> b[maxsize];</span><br><span class="line">   i=m<span class="number">-1</span>;             <span class="comment">//从根结点开始往下搜索</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"输入发送的编码(以'#'为结束标志)："</span>);</span><br><span class="line">   gets(b);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"译码后的字符为"</span>);</span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">0</span>;b[j]!=<span class="string">'#'</span>;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(b[j]==<span class="string">'0'</span>) i=tree[i].lchild;         <span class="comment">//走向左孩子</span></span><br><span class="line">      <span class="keyword">else</span> i=tree[i].rchild;                  <span class="comment">//走向右孩子</span></span><br><span class="line">      <span class="keyword">if</span>(tree[i].lchild==<span class="number">-1</span>) &#123;                <span class="comment">//tree[i]是叶结点</span></span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%c"</span>,tree[i].ch);</span><br><span class="line">       i=m<span class="number">-1</span>;                                 <span class="comment">//回到根结点</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(tree[i].lchild!=<span class="number">-1</span> &amp;&amp; b[j]!= <span class="string">'#'</span>)   <span class="comment">//电文读完，但尚未到叶子结点</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\nERROR\n"</span>);               <span class="comment">//输入电文有错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(hufmtree tree[],codetype code[])</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i,j;<span class="comment">//循环变量</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"【哈夫曼编码】\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"总共有%d个字符\n"</span>,n);</span><br><span class="line">  huffman(tree);<span class="comment">//建立哈夫曼树</span></span><br><span class="line">  huffmancode(code,tree);<span class="comment">//根据哈夫曼树求出哈夫曼编码</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"【输出每个字符的哈夫曼编码】\n"</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c: "</span>,code[i].ch);</span><br><span class="line">  <span class="keyword">for</span>(j=code[i].start;j&lt;n;j++)</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c"</span>,code[i].bits[j]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> hufmtree tree[m];</span><br><span class="line"> codetype code[n];</span><br><span class="line"> input(tree,code);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"【哈夫曼译码】\n"</span>);</span><br><span class="line"> decode(tree);<span class="comment">//依次读入电文，根据哈夫曼树译码</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二叉树的遍历及计算&quot;&gt;&lt;a href=&quot;#二叉树的遍历及计算&quot; class=&quot;headerlink&quot; title=&quot;二叉树的遍历及计算&quot;&gt;&lt;/a&gt;二叉树的遍历及计算&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="C" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实验4——各种内排序算法的实现及性能比较</title>
    <link href="https://nymrli.top/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C4%E2%80%94%E2%80%94%E5%90%84%E7%A7%8D%E5%86%85%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83.html"/>
    <id>https://nymrli.top/数据结构实验4——各种内排序算法的实现及性能比较.html</id>
    <published>2018-12-28T11:20:19.000Z</published>
    <updated>2018-12-28T11:30:20.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**生成随机数**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RandCreate</span><span class="params">(<span class="keyword">int</span> *a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        a[i] = <span class="number">1</span> + (rand()%<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***交换数组中,两个下标的值***/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    tmp = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单选择排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**简单选择排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minx,i,j;</span><br><span class="line">    <span class="keyword">for</span> (i= <span class="number">0</span>; i &lt; N<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">        minx = i;   <span class="comment">//默认标记为每次第一位元素下标</span></span><br><span class="line">        <span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; N; ++j) <span class="keyword">if</span>( l[minx] &gt; l[j] ) minx = j;</span><br><span class="line">        <span class="keyword">if</span>( minx != i) Swap(l,minx,i); <span class="comment">//判断起始位置是否为最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**直接插入排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;                                 <span class="comment">//i标识待插入元素下标</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt; N;i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> insertItem = l[i];              <span class="comment">//标记每次第一位元素</span></span><br><span class="line">        <span class="keyword">for</span>(j = i<span class="number">-1</span>;j &gt;= <span class="number">0</span>;j --)&#123;</span><br><span class="line">            <span class="comment">//不断将有序序列中元素向后移动,为待插入元素空出一个位置</span></span><br><span class="line">            <span class="keyword">if</span>(insertItem &lt; l[j]) l[j+<span class="number">1</span>] = l[j];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        l[j+<span class="number">1</span>] = insertItem;          <span class="comment">//待插入元素有序存放至有序序列中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="comment">//i标识每趟排序范围最后一个元素下标,每趟排序元素下标范围是0~i</span></span><br><span class="line">    <span class="keyword">for</span>(i = N<span class="number">-1</span>;i &gt; <span class="number">0</span>;i --)&#123;</span><br><span class="line">        <span class="keyword">int</span> isSwap = <span class="number">0</span>;         <span class="comment">//教材错误,应该放到第二层循环前</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j&lt;i;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l[j] &gt; l[j+<span class="number">1</span>])&#123;</span><br><span class="line">                Swap(l,j,j+<span class="number">1</span>);</span><br><span class="line">                isSwap = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isSwap) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//如果本趟排序没有发生元素交换,则直接可以认为排序已完成</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//序列划分方法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = low,j = high + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pivot = l[low];                 <span class="comment">//pivot是分割元素</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">do</span> i++;</span><br><span class="line">        <span class="keyword">while</span>(l[i] &lt; pivot);      <span class="comment">//i前进</span></span><br><span class="line">        <span class="keyword">do</span> j--;</span><br><span class="line">        <span class="keyword">while</span>(l[j] &gt; pivot);      <span class="comment">//j前进</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) Swap(l,i,j);</span><br><span class="line">    &#125;<span class="keyword">while</span>(i &lt; j);</span><br><span class="line">    Swap(l,low,j);</span><br><span class="line">    <span class="keyword">return</span> j;                                   <span class="comment">//此时j是分割元素下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;   <span class="comment">//快速排序的递归函数</span></span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">if</span>(low &lt; high)&#123;                            <span class="comment">//当前待排序序列至少包含2个元素</span></span><br><span class="line">        k = Partition(l,low,high);</span><br><span class="line">        QuickSort(l,low,k<span class="number">-1</span>);</span><br><span class="line">        QuickSort(l,k+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="comment">//快速排序算法的主调用函数</span></span><br><span class="line">    QuickSort(l,<span class="number">0</span>,N<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两路合并排序"><a href="#两路合并排序" class="headerlink" title="两路合并排序"></a>两路合并排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Merge函数,参考了陈慧南老师的《数据结构——C语言描述》教材</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> Temp[],<span class="keyword">int</span> i1,<span class="keyword">int</span> j1,<span class="keyword">int</span> i2,<span class="keyword">int</span> j2,<span class="keyword">int</span> *k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = i1,j = i2;</span><br><span class="line">    <span class="keyword">while</span>((i &lt;= j1)&amp;&amp;(j&lt;=j2))&#123;                       <span class="comment">//若两个子序列都不空,则循环</span></span><br><span class="line">        <span class="keyword">if</span>(l[i] &lt;= l[j])&#123;</span><br><span class="line">            Temp[(*k)++] = l[i++];         <span class="comment">//将较小元素存入Temp[*k]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> Temp[(*k)++] = l[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= j1) Temp[(*k)++] = l[i++];  <span class="comment">//将子序列1中剩余元素存入Temp</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= j2) Temp[(*k)++] = l[j++];  <span class="comment">//将子序列2中剩余元素存入Temp</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//MergeSort函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Temp[N];</span><br><span class="line">    <span class="keyword">int</span> i1,j1,i2,j2,i,k,size = <span class="number">1</span>;              </span><br><span class="line">    <span class="comment">//i1,j1和i2,j2分别是两个子序列的上,下界</span></span><br><span class="line">    <span class="keyword">while</span>(size &lt; N)&#123;</span><br><span class="line">        i1 = <span class="number">0</span>;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i1+size &lt; N)&#123;              </span><br><span class="line">            <span class="comment">//若i1+size &lt; n,则说明存在两个子序列,需要再两两合并</span></span><br><span class="line">            i2 = i1+size;                      <span class="comment">//确定子序列2的下界和子序列1的上界</span></span><br><span class="line">            j1 = i2<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i2+size<span class="number">-1</span> &gt; N<span class="number">-1</span>)&#123;         <span class="comment">//设置子序列2的上界</span></span><br><span class="line">                j2 = N<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> j2 = i2+size<span class="number">-1</span>;</span><br><span class="line">            Merge(l,Temp,i1,j1,i2,j2,&amp;k);  <span class="comment">//合并相邻两个子序列</span></span><br><span class="line">            i1 = j2+<span class="number">1</span>;                        <span class="comment">//确定下一次合并第一个子序列的下界</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; k;i ++)&#123;</span><br><span class="line">            l[i] = Temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        size *= <span class="number">2</span>;                            <span class="comment">//子序列长度扩大一倍</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">heap</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">&#125;heap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**向下调整为最大堆**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustHeap</span><span class="params">(<span class="keyword">int</span> Heap[],<span class="keyword">int</span> s,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = Heap[s];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*s+<span class="number">1</span>;j &lt;= m; j *= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; m &amp;&amp;Heap[j] &lt; Heap[j+<span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; Heap[j]) <span class="keyword">break</span>;</span><br><span class="line">        Heap[s] = Heap[j];</span><br><span class="line">        s = j;</span><br><span class="line">    &#125;</span><br><span class="line">    Heap[s] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**建堆**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHeap</span><span class="params">(<span class="keyword">int</span> *heap,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = (n<span class="number">-2</span>)/<span class="number">2</span>;i &gt;= <span class="number">0</span>;i --) AdjustHeap(heap,i,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**堆初始化**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapInit</span><span class="params">(heap *hp,<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    hp-&gt;n = n;</span><br><span class="line">    hp-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(<span class="keyword">int</span>) *n);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>;i &lt; n;i ++) hp-&gt;data[i] = a[i];</span><br><span class="line">    CreateHeap(hp-&gt;data ,N<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**堆排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(heap *hp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i=hp-&gt;n/<span class="number">2</span> ; i&gt;<span class="number">0</span> ;i--) AdjustHeap(hp-&gt;data,i,hp-&gt;n);</span><br><span class="line">    <span class="keyword">for</span>( i = hp-&gt; n<span class="number">-1</span> ;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        Swap( hp-&gt;data,<span class="number">0</span>,i);</span><br><span class="line">        AdjustHeap(hp-&gt;data,<span class="number">0</span>,i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总体代码"><a href="#总体代码" class="headerlink" title="总体代码"></a>总体代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RandCreate</span><span class="params">(<span class="keyword">int</span> *a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        a[i] = <span class="number">1</span> + (rand()%<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***交换数组中,两个下标的值***/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    tmp = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**简单选择排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minx,i,j;</span><br><span class="line">    <span class="keyword">for</span> (i= <span class="number">0</span>; i &lt; N<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">        minx = i;   <span class="comment">//默认标记为每次第一位元素下标</span></span><br><span class="line">        <span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; N; ++j) <span class="keyword">if</span>( l[minx] &gt; l[j] ) minx = j;</span><br><span class="line">        <span class="keyword">if</span>( minx != i) Swap(l,minx,i); <span class="comment">//判断起始位置是否为最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**直接插入排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;                                 <span class="comment">//i标识待插入元素下标</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt; N;i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> insertItem = l[i];              <span class="comment">//标记每次第一位元素</span></span><br><span class="line">        <span class="keyword">for</span>(j = i<span class="number">-1</span>;j &gt;= <span class="number">0</span>;j --)&#123;</span><br><span class="line">            <span class="comment">//不断将有序序列中元素向后移动,为待插入元素空出一个位置</span></span><br><span class="line">            <span class="keyword">if</span>(insertItem &lt; l[j]) l[j+<span class="number">1</span>] = l[j];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        l[j+<span class="number">1</span>] = insertItem;          <span class="comment">//待插入元素有序存放至有序序列中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**冒泡排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="comment">//i标识每趟排序范围最后一个元素下标,每趟排序元素下标范围是0~i</span></span><br><span class="line">    <span class="keyword">for</span>(i = N<span class="number">-1</span>;i &gt; <span class="number">0</span>;i --)&#123;</span><br><span class="line">        <span class="keyword">int</span> isSwap = <span class="number">0</span>;         <span class="comment">//教材错误,应该放到第二层循环前</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j&lt;i;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l[j] &gt; l[j+<span class="number">1</span>])&#123;</span><br><span class="line">                Swap(l,j,j+<span class="number">1</span>);</span><br><span class="line">                isSwap = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isSwap) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//如果本趟排序没有发生元素交换,则直接可以认为排序已完成</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**快速排序**/</span></span><br><span class="line"><span class="comment">//序列划分方法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = low,j = high + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pivot = l[low];                 <span class="comment">//pivot是分割元素</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">do</span> i++;</span><br><span class="line">        <span class="keyword">while</span>(l[i] &lt; pivot);      <span class="comment">//i前进</span></span><br><span class="line">        <span class="keyword">do</span> j--;</span><br><span class="line">        <span class="keyword">while</span>(l[j] &gt; pivot);      <span class="comment">//j前进</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) Swap(l,i,j);</span><br><span class="line">    &#125;<span class="keyword">while</span>(i &lt; j);</span><br><span class="line">    Swap(l,low,j);</span><br><span class="line">    <span class="keyword">return</span> j;                                   <span class="comment">//此时j是分割元素下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;   <span class="comment">//快速排序的递归函数</span></span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">if</span>(low &lt; high)&#123;                            <span class="comment">//当前待排序序列至少包含2个元素</span></span><br><span class="line">        k = Partition(l,low,high);</span><br><span class="line">        QuickSort(l,low,k<span class="number">-1</span>);</span><br><span class="line">        QuickSort(l,k+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="comment">//快速排序算法的主调用函数</span></span><br><span class="line">    QuickSort(l,<span class="number">0</span>,N<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**快速排序**/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**两路合并排序**/</span></span><br><span class="line"><span class="comment">//Merge函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> Temp[],<span class="keyword">int</span> i1,<span class="keyword">int</span> j1,<span class="keyword">int</span> i2,<span class="keyword">int</span> j2,<span class="keyword">int</span> *k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = i1,j = i2;</span><br><span class="line">    <span class="keyword">while</span>((i &lt;= j1)&amp;&amp;(j&lt;=j2))&#123;                       <span class="comment">//若两个子序列都不空,则循环</span></span><br><span class="line">        <span class="keyword">if</span>(l[i] &lt;= l[j])&#123;</span><br><span class="line">            Temp[(*k)++] = l[i++];         <span class="comment">//将较小元素存入Temp[*k]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> Temp[(*k)++] = l[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= j1) Temp[(*k)++] = l[i++];  <span class="comment">//将子序列1中剩余元素存入Temp</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= j2) Temp[(*k)++] = l[j++];  <span class="comment">//将子序列2中剩余元素存入Temp</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//MergeSort函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Temp[N];</span><br><span class="line">    <span class="keyword">int</span> i1,j1,i2,j2,i,k,size = <span class="number">1</span>;              <span class="comment">//i1,j1和i2,j2分别是两个子序列的上,下界</span></span><br><span class="line">    <span class="keyword">while</span>(size &lt; N)&#123;</span><br><span class="line">        i1 = <span class="number">0</span>;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i1+size &lt; N)&#123;              <span class="comment">//若i1+size &lt; n,则说明存在两个子序列,需要再两两合并</span></span><br><span class="line">            i2 = i1+size;                      <span class="comment">//确定子序列2的下界和子序列1的上界</span></span><br><span class="line">            j1 = i2<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i2+size<span class="number">-1</span> &gt; N<span class="number">-1</span>)&#123;         <span class="comment">//设置子序列2的上界</span></span><br><span class="line">                j2 = N<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> j2 = i2+size<span class="number">-1</span>;</span><br><span class="line">            Merge(l,Temp,i1,j1,i2,j2,&amp;k);  <span class="comment">//合并相邻两个子序列</span></span><br><span class="line">            i1 = j2+<span class="number">1</span>;                        <span class="comment">//确定下一次合并第一个子序列的下界</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; k;i ++)&#123;</span><br><span class="line">            l[i] = Temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        size *= <span class="number">2</span>;                            <span class="comment">//子序列长度扩大一倍</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**两路合并排序**/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****堆排序*****/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">heap</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">&#125;heap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**向下调整为最大堆**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustHeap</span><span class="params">(<span class="keyword">int</span> Heap[],<span class="keyword">int</span> s,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = Heap[s];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*s+<span class="number">1</span>;j &lt;= m; j *= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; m &amp;&amp;Heap[j] &lt; Heap[j+<span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; Heap[j]) <span class="keyword">break</span>;</span><br><span class="line">        Heap[s] = Heap[j];</span><br><span class="line">        s = j;</span><br><span class="line">    &#125;</span><br><span class="line">    Heap[s] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**建堆**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHeap</span><span class="params">(<span class="keyword">int</span> *heap,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = (n<span class="number">-2</span>)/<span class="number">2</span>;i &gt;= <span class="number">0</span>;i --) AdjustHeap(heap,i,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**堆初始化**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapInit</span><span class="params">(heap *hp,<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    hp-&gt;n = n;</span><br><span class="line">    hp-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(<span class="keyword">int</span>) *n);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>;i &lt; n;i ++) hp-&gt;data[i] = a[i];</span><br><span class="line">    CreateHeap(hp-&gt;data ,N<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**堆排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(heap *hp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i=hp-&gt;n/<span class="number">2</span> ; i&gt;<span class="number">0</span> ;i--) AdjustHeap(hp-&gt;data,i,hp-&gt;n);</span><br><span class="line">    <span class="keyword">for</span>( i = hp-&gt; n<span class="number">-1</span> ;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        Swap( hp-&gt;data,<span class="number">0</span>,i);</span><br><span class="line">        AdjustHeap(hp-&gt;data,<span class="number">0</span>,i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*****堆排序*****/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    srand(time( <span class="literal">NULL</span> ));</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">6</span>][N];</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    RandCreate(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">6</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">            a[i][j] = a[<span class="number">0</span>][j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start1 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    SelectSort(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">double</span> end1 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff1 = difftime(end1,start1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"简单选择排序时间:"</span>,diff1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start2 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    InsertSort(a[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">double</span> end2 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff2 = difftime(end2,start2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"直接插入排序时间:"</span>,diff2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start3 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    BubbleSort(a[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">double</span> end3 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff3 = difftime(end3,start3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"冒泡排序时间:"</span>,diff3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start5 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    MergeSort(a[<span class="number">4</span>]);</span><br><span class="line">    <span class="keyword">double</span> end5 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff5 = difftime(end5,start5);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"两路排序时间:"</span>,diff5);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start4 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    QSort(a[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">double</span> end4 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff4 = difftime(end4,start4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"快速排序时间:"</span>,diff4);</span><br><span class="line"></span><br><span class="line">    heap hp;</span><br><span class="line">    heapInit(&amp;hp,a[<span class="number">5</span>],N);</span><br><span class="line">    <span class="keyword">double</span> start6 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    HeapSort(&amp;hp);</span><br><span class="line">    <span class="keyword">double</span> end6 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff6 = difftime(end6,start6);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"堆排序时间:"</span>,diff6);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;部分代码&quot;&gt;&lt;a href=&quot;#部分代码&quot; class=&quot;headerlink&quot; title=&quot;部分代码&quot;&gt;&lt;/a&gt;部分代码&lt;/h2&gt;&lt;h3 id=&quot;辅助函数&quot;&gt;&lt;a href=&quot;#辅助函数&quot; class=&quot;headerlink&quot; title=&quot;辅助函数&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="C" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>南邮《信号与系统B》复习知识点大纲</title>
    <link href="https://nymrli.top/%E5%8D%97%E9%82%AE%E3%80%8A%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9FB%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%A7%E7%BA%B2.html"/>
    <id>https://nymrli.top/南邮《信号与系统B》复习知识点大纲.html</id>
    <published>2018-12-26T14:15:36.000Z</published>
    <updated>2018-12-26T14:17:24.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h2><p>请将图片右键另存为，保存到本地放大查看。</p><h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><p><img src="/信号与系统--第一章 (南邮果粒橙" alt="信号与系统--第一章 (南邮果粒橙)">.jpg)</p><hr><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><p><img src="/信号与系统——第二章 (南邮果粒橙" alt="信号与系统——第二章 (南邮果粒橙)">.jpg)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;友情提示&quot;&gt;&lt;a href=&quot;#友情提示&quot; class=&quot;headerlink&quot; title=&quot;友情提示&quot;&gt;&lt;/a&gt;友情提示&lt;/h2&gt;&lt;p&gt;请将图片右键另存为，保存到本地放大查看。&lt;/p&gt;
&lt;h3 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="学业" scheme="https://nymrli.top/tags/%E5%AD%A6%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>不蒜子统计阅读次数失效——Cxo主题</title>
    <link href="https://nymrli.top/%E4%B8%8D%E8%92%9C%E5%AD%90%E7%BB%9F%E8%AE%A1%E9%98%85%E8%AF%BB%E6%AC%A1%E6%95%B0%E5%A4%B1%E6%95%88.html"/>
    <id>https://nymrli.top/不蒜子统计阅读次数失效.html</id>
    <published>2018-12-26T00:57:37.000Z</published>
    <updated>2018-12-26T01:11:43.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方通知"><a href="#官方通知" class="headerlink" title="官方通知"></a>官方通知</h3><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ！！！！2018年9月 - 重要提示 ！！！！大家好，因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』！因我是最早的一批七牛用户，为七牛至少带来了数百个邀请用户，很痛心，很无奈！各位继续使用不蒜子提供的服务，只需把原有的：<span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>域名改一下即可：<span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>只需要修改该js域名，其他均未改变。若有疑问，可以加入不蒜子交流QQ群：`419260983`，对您带来的不便，非常抱歉！！！还是那句话，不蒜子不会中断服务！！！！</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a></p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>由于定位到是<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a>统计功能突然有问题了，所以前往<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子官网</a>进行查看，发现官网有一段很重要的提示：<br> <strong>“因七牛强制过期『dn-lbstatics.qbox.me』域名，与客服沟通无果，只能更换域名到『busuanzi.ibruce.info』！”</strong><br> 所以定位到问题，原来是不蒜子使用的七牛的域名被强制过期。<br> 需要把 dn-lbstatics.qbox.me 域名更换为 busuanzi.ibruce.info</p><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><h4 id="找到含busuanzi插件设置的文件"><a href="#找到含busuanzi插件设置的文件" class="headerlink" title="找到含busuanzi插件设置的文件"></a>找到含busuanzi插件设置的文件</h4><p><img src="/1.jpg" alt="1"></p><h4 id="修改指向的网址"><a href="#修改指向的网址" class="headerlink" title="修改指向的网址"></a>修改指向的网址</h4><p><img src="/2.jpg" alt="2"></p><h4 id="修改完后"><a href="#修改完后" class="headerlink" title="修改完后"></a>修改完后</h4><p><img src="/3.jpg" alt="3"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;官方通知&quot;&gt;&lt;a href=&quot;#官方通知&quot; class=&quot;headerlink&quot; title=&quot;官方通知&quot;&gt;&lt;/a&gt;官方通知&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu下Sublime配置python编译环境及新手使用指导</title>
    <link href="https://nymrli.top/Ubuntu%E4%B8%8BSublime%E9%85%8D%E7%BD%AEpython%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E6%96%B0%E6%89%8B%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC.html"/>
    <id>https://nymrli.top/Ubuntu下Sublime配置python编译环境及新手使用指导.html</id>
    <published>2018-12-26T00:41:18.000Z</published>
    <updated>2018-12-26T00:45:21.407Z</updated>
    
    <content type="html"><![CDATA[<p>####Sublime下配置python编译环境及搭建虚拟环境:(windows下大致相同)</p><h4 id="1-编译环境配置"><a href="#1-编译环境配置" class="headerlink" title="1.编译环境配置"></a>1.编译环境配置</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = <span class="string">'6f4c264a24d933ce70df5dedcf1dcaee'</span> + <span class="string">'ebe013ee18cced0ef93d5f746d80ef60'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="keyword">by</span> = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.<span class="built_in">replace</span>(<span class="string">' '</span>, <span class="string">'%20'</span>)).<span class="built_in">read</span>(); dh = hashlib.sha256(<span class="keyword">by</span>).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="built_in">open</span>(os.path.join( ipp, pf), <span class="string">'wb'</span> ).<span class="built_in">write</span>(<span class="keyword">by</span>)</span><br></pre></td></tr></table></figure><p>1.点击 <a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">官方网址</a> 从 Sublime Text 3 官方获取用于安装的代码。从菜单栏View –&gt;Show Console或者使用Ctrl+`(esc键下面的按键)，调出sublime的控制台，将官网中的python代码粘贴进去并按Enter执行，最终可以安装完成。在控制台中粘贴刚才的代码，然后点击回车。最后重启ST3。<br>2.现在你可以通过快捷键 cmd+shift+P 打开 Package Control 来安装其他的插件了。输入 install 然后你就能看见屏幕上出现了 Package Control: Install Package，点击回车,然后搜索sublimeREPL</p><p><img src="/1.png" alt="1"></p><p>安装成功后，可以在菜单栏的’TOOL’中找到SublimeREPL，如图所示</p><p><img src="/2.png" alt=""></p><h4 id="2-将菜单栏改为中文"><a href="#2-将菜单栏改为中文" class="headerlink" title="2.将菜单栏改为中文"></a>2.将菜单栏改为中文</h4><hr><p>若需要将菜单栏改成中文可如上操作下载插件“ConvertToUTF8”或是安装插件“ChineseLocalizations”(本人使用的是这个，没试ConvertToUTF8的效果)</p><p><img src="/3.png" alt=""></p><p>(参考博客:<a href="http://blog.51cto.com/11970781/2087971" target="_blank" rel="noopener">http://blog.51cto.com/11970781/2087971</a>)</p><h4 id="3-安装Anaconda插件"><a href="#3-安装Anaconda插件" class="headerlink" title="3.安装Anaconda插件"></a>3.安装Anaconda插件</h4><hr><blockquote><p>1.点击刚刚生成的Package Control -&gt;输入install<br>2.进入安装界面，安装好后再在新窗口命令行中输入Anaconda并点击第一个备选项进行安装。 安装完成后会显示messages文档。</p></blockquote><p>安装Anaconda插件完成之后，会看到如下选项栏，说明Anaconda安装成功。</p><ul><li>Goto Definitions 能够在你的整个工程中查找并且显示任意一个变量，函数或者类的定义。</li><li>Find Usage 能够快速的查找某个变量，函数或者类在某个特定文件中的什么地方被使用了。</li><li>Show Documentation： 能够显示一个函数或者类的说明性字符串(当然，是在定义了字符串的情况下)</li></ul><p>Anaconda会自动补全代码，之前用惯了pycharm发现突然没了代码补全后很不习惯，Anaconda的补全功能虽然没有pycharm那么好用，但还是不错的<br>还有需要注意的是，安装Anaconda插件后，如果python代码没有遵循PEP8规范，会出现白色的框框，或是可以使用快捷键Ctrl+Alt+R进行规范代码(这个可以去除，步骤如下)</p><p><img src="/4.png" alt=""></p><p>在Settings-User选项中添加配置:<code>{&quot;anaconda_linting&quot;:false}</code></p><h4 id="4-安装虚拟环境"><a href="#4-安装虚拟环境" class="headerlink" title="4.安装虚拟环境"></a>4.安装虚拟环境</h4><blockquote><p>1.首先使用终端安装virtualenv，<code>pip3 install virtualenv</code><br>2.在需要创建的地方进行虚拟环境的搭建，代码如下：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> pytest(文件夹名)</span><br><span class="line"><span class="built_in">cd</span> pytest</span><br><span class="line">virtualenv venv</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="/5.png" alt=""></p><p>在终端进入虚拟环境的话是在pytest文件夹下输入命令<code>source /bin/activate</code><br>而要在sublime中进入虚拟环境的话就得按照如下操作：<br>１．首先在sublime中安装virtualenv插件，Ctrl + Shift + P，然后输入install,回车，然后搜索virtualenv。</p><ol start="2"><li>安装完成后，直接按Ctrl + Shift + P，再输入Activate，若没有该选项则virtualenv安装中出现问题，需要重新安装。如果有的会选择Activate就能发现刚刚创建的虚拟环境，选中后回车即可进入虚拟环境</li><li>如果Activate选中后没有出现我们刚刚创建的虚拟环境，则需要我们手动添加路径.Ctrl + Shift + P，然后输入<code>Add directory</code>，回车，屏幕下面会出现输入行（Directory path）:再将刚创建的虚拟环境路径填入即可</li></ol><p><img src="/6.png" alt=""></p><hr><p>另外，我曾碰到过Add directory后仍然没用的情况。那时，可选择“”Project”=&gt;”Add folder to project”选择文件后=&gt;”Save Project as”==&gt;保存好即可<br>工程配置文件为：<br><code>.sublime-workspace</code>、<code>.sublime-project</code><br>其中sublime-project为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"build_systems":</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">"file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",</span><br><span class="line">"name": "Anaconda Python Builder",</span><br><span class="line">"selector": "source.python",</span><br><span class="line">"shell_cmd": "\"python\" -u \"$file\""</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">"folders":</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">"path": "爬虫"</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">"virtualenv": "G:\\pachong\\venv"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样环境就配置好了。按Ctrl+B编译时，观察”Tools”-&gt;”Build System”-&gt;是否为”Python+ Virtualenv”，如果不是，则选用这个再Ctrl+B就是在虚拟环境中编译了!</p><hr><p>ubuntu下sublime默认情况下好像不能输入中文，需要用下面命令就可以完美支持中文输入：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update &amp;&amp; sudo apt-get upgrade</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/lyfeyaj/sublime-text-imfix.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> sublime-text-imfix</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sublime-imfix</span></span><br></pre></td></tr></table></figure></p><p>转自<a href="https://blog.csdn.net/CV_YOU/article/details/77702383" target="_blank" rel="noopener">博客</a><br>截图好像有点问题，菜单栏都没有截到，用到的三个分别为“项目(Project)”，“首选项(Preferences)”，“帮助(Help)”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####Sublime下配置python编译环境及搭建虚拟环境:(windows下大致相同)&lt;/p&gt;
&lt;h4 id=&quot;1-编译环境配置&quot;&gt;&lt;a href=&quot;#1-编译环境配置&quot; class=&quot;headerlink&quot; title=&quot;1.编译环境配置&quot;&gt;&lt;/a&gt;1.编译环境配置
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>PythonWeb--flask部署内网电脑</title>
    <link href="https://nymrli.top/PythonWeb-flask%E9%83%A8%E7%BD%B2%E5%86%85%E7%BD%91%E7%94%B5%E8%84%91.html"/>
    <id>https://nymrli.top/PythonWeb-flask部署内网电脑.html</id>
    <published>2018-12-21T14:08:04.000Z</published>
    <updated>2018-12-22T04:37:07.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PythonWeb–flask部署问题"><a href="#PythonWeb–flask部署问题" class="headerlink" title="PythonWeb–flask部署问题"></a>PythonWeb–flask部署问题</h1><p>以前在云服务器上都是用<code>root</code>权限部署的,很流畅..这次用了活动室电脑是管理员权限<code>apollo3d</code>..于是出现了很大的问题….</p><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>活动室电脑的IP是通过路由器分配的IP,如<code>192.168.1.145</code>,这是一个局域网,别人是不可能通过这个IP访问到你的服务器的.（访问都是通过公网的。除非两台电脑在同一个局域网内）。</p><p>于是想到直接连活动室的网不就行了吗（如果活动室的是公网IP，只要对路由器设置个<strong>端口映射</strong>就行了），但发现，活动室的IP也是校园网分配的，已经经过了多次的NAT，于是这个方法也没用。</p><p>搜了下网上关于“<u>内网中的电脑当做服务器</u>”，找到了方案就是“<strong>内网穿透</strong>”，而能实现这个功能的软件不少如<code>花生壳</code>、<code>frp</code>…在此,我用<code>花生壳</code>达成了目的,花了6元…</p><h4 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h4><p>注册账号后会送给你一个域名，而“内网穿透”的功能是需要买的。他实现的原理大致是将动态变化的IP绑定在了这个域名上，每次IP变换的时候就重新DNS解析，所以达成了“IP跟随”</p><p><img src="/1.jpg" alt="1"></p><p>设置好后，就可以直接通过域名访问到内网下的电脑了！</p><h2 id="非root权限——管理员权限"><a href="#非root权限——管理员权限" class="headerlink" title="非root权限——管理员权限"></a>非root权限——管理员权限</h2><p>之前都是部署在<code>/var/www</code>目录下的,这次也没多想,也照样…结果踩了坑,弄了几小时.</p><p>先是<code>pip install virtualenv</code>安装了<code>virtualenv</code>库,然后用<code>virtualenv env</code>新建了个虚拟环境</p><p>但问题来了，windows下的目录结构跟linux下的有些小小的不同,导致运行<code>uwsgi</code>报错<code>No module flask</code>时一直没找到原因</p><h4 id="linux下结构"><a href="#linux下结构" class="headerlink" title="linux下结构:"></a>linux下结构:</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">-<span class="params">|env</span></span></span><br><span class="line"><span class="ruby">-----<span class="params">|lib</span></span></span><br><span class="line"><span class="ruby">-------<span class="params">|python</span></span></span><br><span class="line"><span class="ruby">---------<span class="params">|site-packagess</span></span></span><br><span class="line"><span class="ruby">---------<span class="params">|.....</span></span></span><br><span class="line"><span class="ruby">-----<span class="params">|includes</span></span></span><br><span class="line"><span class="ruby">--------<span class="params">|python3.5m</span></span></span><br><span class="line"><span class="ruby">-----<span class="params">|bin</span></span></span><br><span class="line"><span class="ruby">-------<span class="params">|python3.5</span></span></span><br><span class="line"><span class="ruby">-------<span class="params">|pip</span></span></span><br><span class="line"><span class="ruby">-------<span class="params">|activate</span></span></span><br></pre></td></tr></table></figure><h4 id="正常情况下只要激活了虚拟环境-那么pip安装的库应该都是在该虚拟环境下的-这次出了什么问题呢"><a href="#正常情况下只要激活了虚拟环境-那么pip安装的库应该都是在该虚拟环境下的-这次出了什么问题呢" class="headerlink" title="正常情况下只要激活了虚拟环境,那么pip安装的库应该都是在该虚拟环境下的,这次出了什么问题呢?"></a>正常情况下只要激活了<code>虚拟环境</code>,那么pip安装的库应该都是在该虚拟环境下的,这次出了什么问题呢?</h4><h5 id="1-猜测没有site-packages"><a href="#1-猜测没有site-packages" class="headerlink" title="1.猜测没有site-packages"></a>1.猜测没有<code>site-packages</code></h5><p>当时因为linux终端显示的原因没看到<code>site-packages</code>,于是就以为没有linux下建立的虚拟环境没有<code>site-packages</code>,但事实证明这个是没有关系的..</p><h5 id="2-uwsgi-ini没有指定虚拟环境"><a href="#2-uwsgi-ini没有指定虚拟环境" class="headerlink" title="2.uwsgi.ini没有指定虚拟环境"></a>2.<code>uwsgi.ini</code>没有指定虚拟环境</h5><p>网上给出的都是因为<strong>没有进入虚拟环境执行</strong>或者是<strong>配置中没有指定虚拟环境路径</strong></p><h5 id="3-加了sudo"><a href="#3-加了sudo" class="headerlink" title="3.加了sudo"></a>3.加了<code>sudo</code></h5><p>根据报错显示知道，<code>sudo pip install -r requirements.txt</code>的库都安装到了默认python目录下了…原因是因为加了<code>sudo</code>.</p><p>▲<strong>一定不要使用sudo pip … ,这里是在虚拟环境中安装python包，如果使用了sudo权限，python包会被安装在主机非虚拟环境下，在虚拟环境中找不到这个包。</strong></p><blockquote><p> 永远不要使用sudo pip install; 你可以在不知情的情况下覆盖重要的东西。使用pip install –user代替</p></blockquote><p>于是那就不加吧,命令改为<code>pip install -r requirements.txt</code>,此时有报错<code>Could not install packages due to anEnvironmentError: [Error 13] Permission denied:...,consider using &#39;--user&#39; options</code>,既然提示用<code>--user</code>参数那就试试吧.</p><p>结果返回的是<code>Can not perform a &#39;--user&#39; install. User site-packages are not visible in this virtualenv</code>,这是为什么还是不行呢?</p><p><strong><a href="https://pip.pypa.io/en/latest/user_guide/" target="_blank" rel="noopener">官方解释</a></strong></p><p><code>pip install --user</code> 遵循四条规则：</p><ol><li><p>当全局安装的软件包位于python路径上，并且它们 与安装要求<em>冲突</em>时，它们将被忽略，而<em>不会被</em> 卸载。</p></li><li><p>当全局安装的软件包位于python路径上并且它们<em>满足</em> 安装要求时，pip什么都不做，并报告满足要求（类似于在<code>--system-site-packages</code> virtualenv中安装软件包时全局软件包如何满足要求）。</p></li><li><p>由于用户站点不在python路径上，因此pip不会<code>--user</code>在<code>--no-site-packages</code>的virtualenv（即默认类型的virtualenv）中执行安装。安装没有意义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.path)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'C:\\Users\\10630\\Desktop'</span>, <span class="string">'D:\\python\\python36.zip'</span>, <span class="string">'D:\\python\\DLLs'</span>, <span class="string">'D:\\python\\lib'</span>, <span class="string">'D:\\python'</span>, <span class="string">'C:\\Users\\10630\\AppData\\Roaming\\Python\\Python36\\site-packages'</span>, <span class="string">'D:\\python\\lib\\site-packages'</span>, <span class="string">'D:\\python\\lib\\site-packages\\win32'</span>, <span class="string">'D:\\python\\lib\\site-packages\\win32\\lib'</span>, <span class="string">'D:\\python\\lib\\site-packages\\Pythonwin'</span>]</span><br></pre></td></tr></table></figure></li><li><p>在<code>--system-site-packages</code>virtualenv中，pip不会安装与virtualenv site-packages中的包冲突的包。-user安装缺少sys.path优先级并且毫无意义。</p></li></ol><p>那应该就是3的原因了…需要在当前的<code>env</code>虚拟环境中将权限开放,我的做法是<code>sudo chmod 777 -R *</code></p><hr><h3 id="最终解决方式"><a href="#最终解决方式" class="headerlink" title="最终解决方式:"></a>最终解决方式:</h3><p>于是我并没有再纠结这个,而是选择了不在<code>/var/www</code>这个目录下,因为这个目录下的权限关系非常严格,于是我在<code>~/Documents/env</code>新建了个虚拟环境,一切又如以前一样解决了.</p><h2 id="Ubuntu下使用matplotlib库-需要安装python3-tk"><a href="#Ubuntu下使用matplotlib库-需要安装python3-tk" class="headerlink" title="Ubuntu下使用matplotlib库,需要安装python3-tk"></a>Ubuntu下使用<code>matplotlib</code>库,需要安装<code>python3-tk</code></h2><p><a href="https://www.cnblogs.com/ilym/p/8387702.html" target="_blank" rel="noopener">`”raise ImportError(str(msg) + ‘, please install the python3-tk package’) ImportError: No module named ‘_tkinter’, please install the python3-tk package”的错误</a></p><p>解决方案:<code>sudo apt-get install python3-tk</code>(如果没更新源,最好更新下源)</p><hr><h3 id="附录"><a href="#附录" class="headerlink" title="附录:"></a>附录:</h3><h4 id="sudo-pip-install-vs-pip-install-user"><a href="#sudo-pip-install-vs-pip-install-user" class="headerlink" title="sudo-pip-install-vs-pip-install-user:"></a>sudo-pip-install-vs-pip-install-user:</h4><h5 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h5><p>sudo pip install可能意味着您要在系统范围内安装软件包。对于某些软件包，例如virtualenvwrapper，这可能是有用的，但除此之外，我将避免安装系统范围的软件包并为每个应用程序创建virtualenv并将pip安装到该virtualenv（可以在没有sudo的情况下完成）。</p><h5 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install</span><br></pre></td></tr></table></figure><p>在python安装中全局安装包，即对所有用户安装。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --user</span><br></pre></td></tr></table></figure><p>安装到本地用户目录，即〜/ .local / lib / python - 只是你。</p><p>例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install jupyter</span><br><span class="line">$ jupyter notebook</span><br></pre></td></tr></table></figure><p>将运行jupyter，打开Web浏览器，允许您使用笔记本。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --user jupyter</span><br><span class="line">$ jupyter notebook</span><br></pre></td></tr></table></figure><p>在将本地目录添加到PATH之前，将不执行任何操作。</p><p>最近pypi中包含了恶意代码。切勿使用sudo来安装pip。这与以root身份运行病毒相同。将本地文件夹添加到PATH或使用virtualenv。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PythonWeb–flask部署问题&quot;&gt;&lt;a href=&quot;#PythonWeb–flask部署问题&quot; class=&quot;headerlink&quot; title=&quot;PythonWeb–flask部署问题&quot;&gt;&lt;/a&gt;PythonWeb–flask部署问题&lt;/h1&gt;&lt;p&gt;以前
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="后端" scheme="https://nymrli.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="flask" scheme="https://nymrli.top/tags/flask/"/>
    
      <category term="配置环境" scheme="https://nymrli.top/tags/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>Pandas速成</title>
    <link href="https://nymrli.top/Pandas%E9%80%9F%E6%88%90.html"/>
    <id>https://nymrli.top/Pandas速成.html</id>
    <published>2018-12-21T13:57:29.000Z</published>
    <updated>2018-12-21T13:57:48.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pandas速成"><a href="#Pandas速成" class="headerlink" title="Pandas速成"></a>Pandas速成</h2><ul><li>Series : 一位数组, 只允许存储相同的数据类型</li><li>Time-Series : 以时间为索引的Series</li><li>DataFrame : 二维的表格型数据结构  , 可以理解为是Series 的容器</li><li>Panel : 三维数组,可以理解为DataFrame 的容器</li></ul><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">index = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">myseries = pd.Series(arr,index)</span><br><span class="line">print(myseries)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Series中第一个元素&#123;&#125;'</span>.format(myseries[<span class="number">0</span>]))</span><br><span class="line">print(<span class="string">'Series中索引为C的元素'</span>.format(myseries[<span class="string">'c'</span>]))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">dtype: int32</span><br><span class="line">Series中第一个元素<span class="number">1</span></span><br><span class="line">Series中索引为C的元素</span><br></pre></td></tr></table></figure><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">arr= np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">])</span><br><span class="line">rowindex = [<span class="string">'row1'</span>,<span class="string">'row2'</span>,<span class="string">'row3'</span>]</span><br><span class="line">colindex = [<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>]</span><br><span class="line">dataframe= pd.DataFrame(data=arr,index=  rowindex,columns=colindex)</span><br><span class="line">print(dataframe)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">      col1  col2  col3</span><br><span class="line">row1     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">row2     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span></span><br><span class="line">row3     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">arr= np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">])</span><br><span class="line">rowindex = [<span class="string">'row1'</span>,<span class="string">'row2'</span>,<span class="string">'row3'</span>]</span><br><span class="line">colindex = [<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>]</span><br><span class="line">dataframe= pd.<span class="symbol">DataFrame</span>(data=arr,index =  rowindex,columns=colindex)</span><br><span class="line">print(dataframe.<span class="symbol">_ixs</span>(<span class="number">0</span>))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">col1    <span class="number">1</span></span><br><span class="line">col2    <span class="number">2</span></span><br><span class="line">col3    <span class="number">3</span></span><br><span class="line"><span class="symbol">Name</span>: row1, dtype: int32</span><br></pre></td></tr></table></figure><h4 id="获取行列"><a href="#获取行列" class="headerlink" title="获取行列"></a>获取行列</h4><ul><li>1.ix[ ]<ul><li>先行后列</li></ul></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(dataframe.ix<span class="string">[[0]]</span>)#获得第一行内容</span><br><span class="line"># <span class="built_in">print</span>(dataframe.ix[<span class="string">'row1'</span>])#以索引名称获得</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dataframe.ix<span class="string">[[0]]</span>)`#获得第一列内容</span><br><span class="line"><span class="built_in">print</span>(dataframe.ix[:,<span class="string">'col1'</span>])</span><br></pre></td></tr></table></figure><ul><li>2.loc[ ]<ul><li>loc,是基于索引的名称选取数据集，这里的索引名称可以是数字,先行后列。注意，[0:2]是选取名称为0， 1， 2行的数据，一共三，只能写行和列的名称，不能写序号。</li></ul></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(dataframe.loc[<span class="string">'row1'</span>])</span></span></span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">col1    <span class="number">1</span></span><br><span class="line">col2    <span class="number">2</span></span><br><span class="line">col3    <span class="number">3</span></span><br><span class="line">Name: row1, dtype: int32</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(dataframe.loc[:,<span class="string">'col1'</span>])</span></span>  #获得<span class="string">'col1'</span>列的值</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(dataframe.loc[<span class="string">'row1'</span>,<span class="string">'col1'</span>])</span></span>#获得某行某列的值</span><br></pre></td></tr></table></figure><ul><li>3.iloc[]<ul><li>iloc，它是基于索引位来选取数据集，也就是数字序号来选取，0:2就是选取 0，1这两行，需要注意的是这里是前闭后开集合。只能写行和列的序号，不能写名称，否则会报错。</li></ul></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(dataframe.iloc[<span class="number">2</span>])</span></span></span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">col1    <span class="number">3</span></span><br><span class="line">col2    <span class="number">4</span></span><br><span class="line">col3    <span class="number">5</span></span><br><span class="line">Name: row3, dtype: int32</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(dataframe.iloc[<span class="number">0</span>,:])</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Pandas速成&quot;&gt;&lt;a href=&quot;#Pandas速成&quot; class=&quot;headerlink&quot; title=&quot;Pandas速成&quot;&gt;&lt;/a&gt;Pandas速成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Series : 一位数组, 只允许存储相同的数据类型&lt;/li&gt;
&lt;li&gt;Tim
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>BaiduMap_API</title>
    <link href="https://nymrli.top/BaiduMap-API.html"/>
    <id>https://nymrli.top/BaiduMap-API.html</id>
    <published>2018-12-21T13:55:50.000Z</published>
    <updated>2018-12-21T13:56:37.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Baidu-Map-API"><a href="#Baidu-Map-API" class="headerlink" title="Baidu Map API"></a>Baidu Map API</h2><h3 id="核心类Map"><a href="#核心类Map" class="headerlink" title="核心类Map"></a>核心类Map</h3><table><thead><tr><th>构造函数</th><th>描述</th></tr></thead><tbody><tr><td>Map(container: String \</td><td>HTMLElement, opts: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a0b1" target="_blank" rel="noopener">MapOptions</a>)</td><td>在指定的容器内创建地图实例，之后需要调用Map.centerAndZoom()方法对地图进行初始化。未进行初始化的地图将不能进行任何操作</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"MAP"</span>);</span><br><span class="line">map.centerAndZoom(points[<span class="number">0</span>], <span class="number">15</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>enableDragging()</td><td>none</td><td>启用地图拖拽，默认启用</td></tr><tr><td>enableScrollWheelZoom()</td><td>none</td><td>启用滚轮放大缩小，默认禁用</td></tr><tr><td>enableDoubleClickZoom()</td><td>none</td><td>启用双击放大，默认启用</td></tr><tr><td>enableKeyboard()</td><td>none</td><td>启用键盘操作，默认禁用。</td></tr><tr><td>enablePinchToZoom()</td><td>none</td><td>启用双指操作缩放，默认启用</td></tr><tr><td>enableAutoResize()</td><td>none</td><td>启用自动适应容器尺寸变化，默认启用</td></tr><tr><td>setMinZoom(zoom: Number)</td><td>none</td><td>设置地图允许的最小级别。取值不得小于地图类型所允许的最小级别</td></tr><tr><td>getCenter()</td><td><a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0" target="_blank" rel="noopener">Point</a></td><td>返回地图当前中心点</td></tr><tr><td>getDistance(start: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0" target="_blank" rel="noopener">Point</a>, end: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0" target="_blank" rel="noopener">Point</a>)</td><td>Number</td><td>返回两点之间的距离，单位是米</td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>centerAndZoom(center: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0" target="_blank" rel="noopener">Point</a>, zoom: Number)</td><td>none</td><td>设初始化地图。 如果center类型为Point时，zoom必须赋值，范围3-19级，若调用高清底图（针对移动端开发）时，zoom可赋值范围为3-18级。如果center类型为字符串时，比如“北京”，zoom可以忽略，地图将自动根据center适配最佳zoom级别</td></tr><tr><td>panTo(center: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0" target="_blank" rel="noopener">Point</a>, opts: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a0b2" target="_blank" rel="noopener">PanOptions</a>)</td><td>none</td><td>将地图的中心点更改为给定的点。如果该点在当前的地图视图中已经可见，则会以平滑动画的方式移动到中心点位置。可以通过配置强制移动过程不使用动画效果</td></tr><tr><td>setCenter(center: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0" target="_blank" rel="noopener">Point</a> \</td><td>String)</td><td>none</td><td>设置地图中心点。center除了可以为坐标点以外，还支持<strong>城市名</strong></td></tr><tr><td>getZoom()</td><td>Number</td><td>返回地图当前缩放级别</td></tr><tr><td>setZoom(zoom: Number)</td><td>none</td><td>将视图切换到指定的缩放等级，中心点坐标不变。注意：当有信息窗口在地图上打开时，地图缩放将保证信息窗口所在的坐标位置不动</td></tr><tr><td>addOverlay(overlay: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a3b0" target="_blank" rel="noopener">Overlay</a>)</td><td>none</td><td>将覆盖物添加到地图中，<strong>一个覆盖物实例只能向地图中添加一次</strong></td></tr><tr><td>clearOverlays()</td><td>none</td><td>清除地图上所有覆盖物</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="控件类"><a href="#控件类" class="headerlink" title="控件类"></a>控件类</h3><h4 id="Control基类"><a href="#Control基类" class="headerlink" title="Control基类"></a>Control基类</h4><table><thead><tr><th>initialize(map: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a0b0" target="_blank" rel="noopener">Map</a>)</th><th>HTMLElement</th><th>抽象方法。调用Map.addControl()方法添加控件时将调用此方法，从而实现该控件的初始化。自定义控件时需要实现此方法，并将元素的DOM元素在该方法中返回。DOM元素需要添加到地图的容器中，使用map.getContainer()方法可获得地图容器元素</th></tr></thead><tbody><tr><td>setAnchor(anchor: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a2b1" target="_blank" rel="noopener">ControlAnchor</a>)</td><td>none</td><td>设置控件停靠的位置</td></tr><tr><td>getAnchor()</td><td><a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a2b1" target="_blank" rel="noopener">ControlAnchor</a></td><td>返回控件停靠的位置</td></tr><tr><td>setOffset(offset: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b3" target="_blank" rel="noopener">Size</a>)</td><td>none</td><td>设置控件停靠的偏移量</td></tr><tr><td>getOffset()</td><td><a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b3" target="_blank" rel="noopener">Size</a></td><td>返回控件停靠的偏移量</td></tr><tr><td>show()</td><td>none</td><td>显示控件</td></tr><tr><td>hide()</td><td>none</td><td>隐藏控件</td></tr><tr><td>isVisible()</td><td>Boolean</td><td>判断控件的可见性</td></tr></tbody></table><h5 id="ControlAnchor-此常量表示控件的定位。"><a href="#ControlAnchor-此常量表示控件的定位。" class="headerlink" title="ControlAnchor: 此常量表示控件的定位。"></a>ControlAnchor: 此常量表示控件的定位。</h5><table><thead><tr><th>常量</th><th>描述</th></tr></thead><tbody><tr><td>BMAP_ANCHOR_TOP_LEFT</td><td>控件将定位到地图的左上角</td></tr><tr><td>BMAP_ANCHOR_TOP_RIGHT</td><td>控件将定位到地图的右上角</td></tr><tr><td>BMAP_ANCHOR_BOTTOM_LEFT</td><td>控件将定位到地图的左下角</td></tr><tr><td>BMAP_ANCHOR_BOTTOM_RIGHT</td><td>控件将定位到地图的右下角</td></tr></tbody></table><ul><li>NavigationControl<ul><li>此类表示地图的平移缩放控件，可以对地图进行上下左右四个方向的平移和缩放操作。</li></ul></li><li>GeolocationControl<ul><li>此类是负责进行地图定位的控件，使用html5浏览器定位功能，此类继承Control所有功能。</li></ul></li><li>OverviewMapControl<ul><li>此类表示缩略地图控件。</li></ul></li><li>ScaleControl<ul><li>此类表示比例尺控件。</li></ul></li><li>CopyrightControl<ul><li>此类表示版权控件，您可以在地图上添加自己的版权信息。每一个版权信息需要包含如下内容：版权的唯一标识、版权内容和其适用的区域范围。</li></ul></li></ul><h3 id="覆盖物类"><a href="#覆盖物类" class="headerlink" title="覆盖物类"></a>覆盖物类</h3><h4 id="Marker-此类表示地图上一个图像标注。"><a href="#Marker-此类表示地图上一个图像标注。" class="headerlink" title="Marker:此类表示地图上一个图像标注。"></a>Marker:此类表示地图上一个图像标注。</h4><table><thead><tr><th>构造函数</th><th>描述</th></tr></thead><tbody><tr><td>Marker(point: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0" target="_blank" rel="noopener">Point</a>, opts: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a3b3" target="_blank" rel="noopener">MarkerOptions</a>)</td><td>创建一个图像标注实例。point参数指定了图像标注所在的地理位置</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">markers = <span class="keyword">new</span> BMap.Marker(<span class="keyword">new</span> BMap.Point(<span class="number">118.93015</span>,<span class="number">32.1091</span>),&#123;<span class="string">"title"</span>:<span class="string">'Point'</span>&#125;);</span><br><span class="line">label = <span class="keyword">new</span> BMap.Label(<span class="string">'label'</span>);</span><br><span class="line">markers.setLabel(l);</span><br><span class="line">map.addOverlay(markers);</span><br></pre></td></tr></table></figure><h5 id="Icon此类表示标注覆盖物所使用的图标。"><a href="#Icon此类表示标注覆盖物所使用的图标。" class="headerlink" title="Icon此类表示标注覆盖物所使用的图标。"></a>Icon此类表示标注覆盖物所使用的图标。</h5><table><thead><tr><th>构造函数</th><th>描述</th></tr></thead><tbody><tr><td>Icon(url: String, size: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b3" target="_blank" rel="noopener">Size</a>, opts: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a3b6" target="_blank" rel="noopener">IconOptions</a>)</td><td>以给定的图像地址和大小创建图标对象实例</td></tr></tbody></table><h5 id="Label此类表示地图上的文本标注。"><a href="#Label此类表示地图上的文本标注。" class="headerlink" title="Label此类表示地图上的文本标注。"></a>Label此类表示地图上的文本标注。</h5><table><thead><tr><th>构造函数</th><th>描述</th></tr></thead><tbody><tr><td>Label(content: String, opts: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a3b10" target="_blank" rel="noopener">LabelOptions</a>)</td><td>创建一个文本标注实例。point参数指定了文本标注所在的地理位置</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">label = <span class="keyword">new</span> BMap.Label(<span class="string">""</span>, &#123;<span class="attr">offset</span>: <span class="keyword">new</span> BMap.Size(<span class="number">-20</span>, <span class="number">-20</span>)&#125;);  </span><br><span class="line">car = <span class="keyword">new</span> BMap.Marker(points[<span class="number">0</span>]);  </span><br><span class="line">car.setLabel(label);  </span><br><span class="line">map.addOverlay(car);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Baidu-Map-API&quot;&gt;&lt;a href=&quot;#Baidu-Map-API&quot; class=&quot;headerlink&quot; title=&quot;Baidu Map API&quot;&gt;&lt;/a&gt;Baidu Map API&lt;/h2&gt;&lt;h3 id=&quot;核心类Map&quot;&gt;&lt;a href=&quot;#核心类
      
    
    </summary>
    
    
      <category term="API" scheme="https://nymrli.top/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Postman模拟上传文件</title>
    <link href="https://nymrli.top/Postman%E6%A8%A1%E6%8B%9F%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6.html"/>
    <id>https://nymrli.top/Postman模拟上传文件.html</id>
    <published>2018-12-20T10:57:35.000Z</published>
    <updated>2018-12-20T12:11:59.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Postman模拟"><a href="#Postman模拟" class="headerlink" title="Postman模拟"></a>Postman模拟</h2><h3 id="1-首先得知道前端的样子"><a href="#1-首先得知道前端的样子" class="headerlink" title="1.首先得知道前端的样子:"></a>1.首先得知道前端的样子:</h3><p><img src="/html.jpg" alt="html"></p><h3 id="2-针对前端字段进行模拟POST"><a href="#2-针对前端字段进行模拟POST" class="headerlink" title="2.针对前端字段进行模拟POST"></a>2.针对前端字段进行模拟POST</h3><p><img src="/Postman上传文件.jpg" alt="Postman上传文件"></p><p>▲这边<code>key</code>为<code>&lt;input&gt;</code>中的<code>name</code>属性</p><h4 id="▲▲URL最后的’-‘"><a href="#▲▲URL最后的’-‘" class="headerlink" title="▲▲URL最后的’/‘:"></a>▲▲URL最后的’/‘:</h4><h3 id="POST请求URL要对应"><a href="#POST请求URL要对应" class="headerlink" title="POST请求URL要对应"></a>POST请求URL要对应</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@app</span>.route(<span class="string">'/photo/'</span>,methods = [<span class="string">'GET'</span>,<span class="string">'POST'</span>] )</span><br><span class="line"><span class="attribute">http</span>:<span class="comment">//127.0.0.1:5000/photo/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@app</span>.route(<span class="string">'/photo'</span>,methods = [<span class="string">'GET'</span>,<span class="string">'POST'</span>] )</span><br><span class="line"><span class="attribute">http</span>:<span class="comment">//127.0.0.1:5000/photo</span></span><br></pre></td></tr></table></figure><p>​    当Web服务器接收到对某个末尾不含斜杠的url请求时，例如“<a href="http://www.abc.com/abc”，这时服务器会搜索网站根目录下有没有名为“abc”的文件，**如果没有就把abc当做目录处理**，然后返回abc目录下的默认首页。当Web服务器接收到的是末尾带斜杠的请求时就会直接当做目录处理。，当浏览器解析" target="_blank" rel="noopener">http://www.abc.com/abc”，这时服务器会搜索网站根目录下有没有名为“abc”的文件，**如果没有就把abc当做目录处理**，然后返回abc目录下的默认首页。当Web服务器接收到的是末尾带斜杠的请求时就会直接当做目录处理。，当浏览器解析</a> /ie 这样的url时，服务器会执行301转向到/ie/，两个链接都有效，但是第二种更快。</p><p>​    对于静态资源服务器来说，请求<code>https://imgss.github.io/demo/</code>这样的路径能访问到页面，是因为服务器会自动在demo路径下尝试找<code>index.html</code>之类的文件并发给浏览器，所以html的当前路径一定是demo下的，也是因为这样，浏览器才会通过重定向自动加上<code>/</code>，防止相对路径解析出错，保证浏览器能正确的请求到资源。</p><h2 id="requests模拟"><a href="#requests模拟" class="headerlink" title="requests模拟"></a>requests模拟</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://127.0.0.1:5000/photo/'</span></span><br><span class="line">filename = &#123;</span><br><span class="line"><span class="string">'src'</span> : open(<span class="string">"C:\\Users\\10630\\Desktop\\为什么电流被一分为2.jpg"</span>,<span class="string">'rb'</span>)</span><br><span class="line">&#125;</span><br><span class="line">html = requests.post(url,files=filename)</span><br><span class="line">print(html.text)</span><br><span class="line"><span class="comment"># &#123;"msg":"success","status":200&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Postman模拟&quot;&gt;&lt;a href=&quot;#Postman模拟&quot; class=&quot;headerlink&quot; title=&quot;Postman模拟&quot;&gt;&lt;/a&gt;Postman模拟&lt;/h2&gt;&lt;h3 id=&quot;1-首先得知道前端的样子&quot;&gt;&lt;a href=&quot;#1-首先得知道前端的样子&quot;
      
    
    </summary>
    
    
      <category term="后端" scheme="https://nymrli.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Postman" scheme="https://nymrli.top/tags/Postman/"/>
    
  </entry>
  
  <entry>
    <title>flask-sqlalchemy踩坑——外键</title>
    <link href="https://nymrli.top/flask-sqlalchemy%E8%B8%A9%E5%9D%91.html"/>
    <id>https://nymrli.top/flask-sqlalchemy踩坑.html</id>
    <published>2018-12-19T11:47:54.000Z</published>
    <updated>2018-12-19T11:56:43.863Z</updated>
    
    <content type="html"><![CDATA[<h4 id="12-19：外键使用"><a href="#12-19：外键使用" class="headerlink" title="12.19：外键使用"></a>12.19：外键使用</h4><p>今天要设计一个如图关系的表关系时,踩了好几个坑…记录下</p><p><img src="/E-R图.jpg" alt="E-R图"></p><p>代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'account'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    Username = db.Column(db.String(<span class="number">30</span>),nullable=<span class="keyword">True</span>,unique=<span class="keyword">True</span>)</span><br><span class="line">    PWD = db.Column(db.String(<span class="number">20</span>),nullable=<span class="keyword">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">20</span>),nullable=<span class="keyword">True</span>,unique=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'info'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">20</span>),db.ForeignKey(<span class="string">'account.email'</span>))</span><br><span class="line">    timestamp = db.Column(db.Float,nullable=<span class="keyword">True</span>,unique=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tmp</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'tmp'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    tmp = db.Column(db.Float,db.ForeignKey(<span class="string">'info.timestamp'</span>)) <span class="comment"># 一组的开始时间</span></span><br><span class="line">    nowtime = db.Column(db.FLOAT,nullable=<span class="keyword">True</span>)       <span class="comment"># 当前记录的时间</span></span><br><span class="line">    longitude = db.Column(db.FLOAT,nullable=<span class="keyword">True</span>)</span><br><span class="line">    latitude = db.Column(db.FLOAT,nullable=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><ol><li><code>id</code>的类型是<code>int</code>,没有<code>id</code>这种类型</li><li>▲.外键必须是主表的<strong>唯一键(unique)</strong>（如上，学生表 sid 是主键，而主键是唯一的，所以能够作为分数表 stu 的外键）</li><li>外键不一定须要作为从表的主键。外键也不一定是主表的主键。主表的唯一键就能够作为从表的外键。</li><li>外键的类型必须与父表的主键类型完全一致(类型和长度)</li></ol><hr><h5 id="总结下来："><a href="#总结下来：" class="headerlink" title="总结下来："></a>总结下来：</h5><p><img src="/1.jpg" alt="1"></p><p><img src="/2.png" alt="2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;12-19：外键使用&quot;&gt;&lt;a href=&quot;#12-19：外键使用&quot; class=&quot;headerlink&quot; title=&quot;12.19：外键使用&quot;&gt;&lt;/a&gt;12.19：外键使用&lt;/h4&gt;&lt;p&gt;今天要设计一个如图关系的表关系时,踩了好几个坑…记录下&lt;/p&gt;
&lt;p&gt;&lt;im
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="flask" scheme="https://nymrli.top/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实验3——图的基本运算及职能交通中的最佳路径选择问题</title>
    <link href="https://nymrli.top/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C3%E2%80%94%E2%80%94%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E5%8F%8A%E8%81%8C%E8%83%BD%E4%BA%A4%E9%80%9A%E4%B8%AD%E7%9A%84%E6%9C%80%E4%BD%B3%E8%B7%AF%E5%BE%84%E9%80%89%E6%8B%A9%E9%97%AE%E9%A2%98.html"/>
    <id>https://nymrli.top/数据结构实验3——图的基本运算及职能交通中的最佳路径选择问题.html</id>
    <published>2018-12-16T09:50:05.000Z</published>
    <updated>2018-12-16T10:30:17.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验3-图的基本运算及职能交通中的最佳路径选择问题"><a href="#实验3-图的基本运算及职能交通中的最佳路径选择问题" class="headerlink" title="实验3.图的基本运算及职能交通中的最佳路径选择问题"></a>实验3.图的基本运算及职能交通中的最佳路径选择问题</h2><h3 id="3-2-邻接矩阵的DFS和BFS"><a href="#3-2-邻接矩阵的DFS和BFS" class="headerlink" title="3.2-邻接矩阵的DFS和BFS"></a>3.2-邻接矩阵的DFS和BFS</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2  <span class="comment">//表示上溢</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3  <span class="comment">//表示下溢</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NotPresent 4 <span class="comment">//表示元素不存在</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5  <span class="comment">//表示有重复元素</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> BOOL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************队列操作**************/</span></span><br><span class="line"><span class="comment">//循环队列的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">int</span> maxSize;    <span class="comment">//最大容量</span></span><br><span class="line">    ElemType *element;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个能容纳mSize个单元的空队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create</span><span class="params">(Queue *Q,<span class="keyword">int</span> mSize)</span></span>&#123;</span><br><span class="line">    Q-&gt;maxSize=mSize;</span><br><span class="line">    Q-&gt;element=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*mSize);</span><br><span class="line">    Q-&gt;front=Q-&gt;rear=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//判断队列是否为空,若是,则返回TRUE;否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">IsEmpty</span><span class="params">(Queue *Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Q-&gt;front==Q-&gt;rear;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//判断队列是否已满,若是,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">IsFULL</span><span class="params">(Queue *Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Q-&gt;rear+<span class="number">1</span>)%Q-&gt;maxSize==Q-&gt;front;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//获取队头元素,并通过x返回.若操作成功,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">Front</span><span class="params">(Queue *Q,ElemType *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(Q))      <span class="comment">//空队列处理</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    *x=Q-&gt;element[(Q-&gt;front+<span class="number">1</span>)%Q-&gt;maxSize];</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//入队.在队列Q的队尾插入元素x(入队操作)。操作成功,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">EnQueue</span><span class="params">(Queue *Q,ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFULL(Q))      <span class="comment">//溢出处理</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    Q-&gt;rear=(Q-&gt;rear+<span class="number">1</span>)%Q-&gt;maxSize;</span><br><span class="line">    Q-&gt;element[Q-&gt;rear]=x;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//出队.从队列Q中删除队头元素(出队操作)。操作成功,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">DeQueue</span><span class="params">(Queue *Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(Q))&#123;   <span class="comment">//空队列处理</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    Q-&gt;front=(Q-&gt;front+<span class="number">1</span>)%Q-&gt;maxSize;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/************队列操作**************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接矩阵的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType **a;     <span class="comment">//邻接矩阵</span></span><br><span class="line">    <span class="keyword">int</span> n;            <span class="comment">//图的当前顶点数</span></span><br><span class="line">    <span class="keyword">int</span> e;            <span class="comment">//图的当前边数</span></span><br><span class="line">    ElemType noEdge;  <span class="comment">//两顶点间无边时的值</span></span><br><span class="line">&#125;mGraph;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接矩阵的初始化</span></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(mGraph *mg,<span class="keyword">int</span> nSize,ElemType noEdgeValue)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    mg-&gt;n = nSize;               <span class="comment">//初始化顶点数</span></span><br><span class="line">    mg-&gt;e = <span class="number">0</span>;                   <span class="comment">//初始化时没有边</span></span><br><span class="line">    mg-&gt;noEdge = noEdgeValue;    <span class="comment">//初始化没有边时的取值</span></span><br><span class="line">    mg-&gt;a = (ElemType**)<span class="built_in">malloc</span>(nSize*<span class="keyword">sizeof</span>(ElemType *));  <span class="comment">//生成长度为n的一维指针数组</span></span><br><span class="line">    <span class="keyword">if</span>(!mg-&gt;a) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; mg-&gt;n;i ++)&#123;   <span class="comment">//动态生成二维数组</span></span><br><span class="line">        mg-&gt;a[i] = (ElemType*)<span class="built_in">malloc</span>(nSize*<span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; mg-&gt;n;j ++)&#123;</span><br><span class="line">            mg-&gt;a[i][j] = mg-&gt;noEdge;</span><br><span class="line">        &#125;</span><br><span class="line">        mg-&gt;a[i][i] = <span class="number">0</span>;        <span class="comment">//自回路设置为0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接矩阵的撤销(改成了int型，有返回值),先释放一维数组,再释放指针数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Destory</span><span class="params">(mGraph *mg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; mg-&gt;n;i ++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(mg-&gt;a[i]);  <span class="comment">//释放n个一维数组的存储空间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(mg-&gt;a);         <span class="comment">//释放一维数组的存储空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接矩阵的边的搜索</span></span><br><span class="line"><span class="function">Status <span class="title">Exist</span><span class="params">(mGraph *mg,<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span>||v &lt; <span class="number">0</span>||u &gt; mg-&gt;n<span class="number">-1</span>||v &gt; mg-&gt;n<span class="number">-1</span> ||u == v||mg-&gt;a[u][v] == mg-&gt;noEdge) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接矩阵的边的插入</span></span><br><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(mGraph *mg,<span class="keyword">int</span> u,<span class="keyword">int</span> v,ElemType w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span>||v &lt; <span class="number">0</span>||u &gt; mg-&gt;n<span class="number">-1</span>||v &gt; mg-&gt;n<span class="number">-1</span> ||u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(mg-&gt;a[u][v] != mg-&gt;noEdge) <span class="keyword">return</span> Duplicate;  </span><br><span class="line">    <span class="comment">//若待插入边已存在,则返回出错信息</span></span><br><span class="line">    mg-&gt;a[u][v] = w;                                 <span class="comment">//插入新边</span></span><br><span class="line">    mg-&gt;e ++;                                        <span class="comment">//增加一条边</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接矩阵的边的删除</span></span><br><span class="line"><span class="function">Status <span class="title">Remove</span><span class="params">(mGraph *mg,<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span>||v &lt; <span class="number">0</span>||u &gt; mg-&gt;n<span class="number">-1</span>||v &gt; mg-&gt;n<span class="number">-1</span> ||u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(mg-&gt;a[u][v] == mg-&gt;noEdge) <span class="keyword">return</span> NotPresent;  </span><br><span class="line">    <span class="comment">//若待删除边不存在,则返回出错信息</span></span><br><span class="line">    mg-&gt;a[u][v] = mg-&gt;noEdge;                         <span class="comment">//删除边</span></span><br><span class="line">    mg-&gt;e --;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(mGraph mg,<span class="keyword">int</span> v,<span class="keyword">int</span> visited[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,v );</span><br><span class="line">    visited[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; mg.n; j++)&#123;             <span class="comment">//遍历v的邻接点</span></span><br><span class="line">        <span class="keyword">if</span>(!visited[j] &amp;&amp; mg.a[v][j] &gt; <span class="number">0</span>)&#123;  <span class="comment">//当未被访问且有权值</span></span><br><span class="line">            DFS(mg,j,visited);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DFS搜索全图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSGraph</span><span class="params">(mGraph mg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> *visited = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(mg.n * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));   <span class="comment">//访问为1,未访问为0</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; mg.n;i++) visited[i] = <span class="number">0</span>;   <span class="comment">//visted数组初始化</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt; mg.n; i++)</span><br><span class="line">            <span class="keyword">if</span>( !visited[i] ) </span><br><span class="line">                DFS(mg,i,visited);</span><br><span class="line">    <span class="built_in">free</span>(visited);           <span class="comment">//整个图的DFS遍历后,释放visted数组</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(mGraph mg,<span class="keyword">int</span> v,<span class="keyword">int</span> visited[])</span></span>&#123;</span><br><span class="line">    Queue q;</span><br><span class="line">    Create(&amp;q,mg.n);</span><br><span class="line">    visited[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,v);</span><br><span class="line">    EnQueue(&amp;q,v);                         <span class="comment">//将当前顶点v放入队列</span></span><br><span class="line">    <span class="keyword">while</span>( !IsEmpty(&amp;q) )&#123;</span><br><span class="line">        Front(&amp;q,&amp;v);</span><br><span class="line">        DeQueue(&amp;q);                       <span class="comment">//队首顶点出队列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; mg.n;i ++)&#123;       <span class="comment">//遍历图的每一项</span></span><br><span class="line">            <span class="keyword">if</span>( !visited[i] &amp;&amp; mg.a[v][i] &gt; <span class="number">0</span>)&#123;       </span><br><span class="line">                <span class="comment">//若未被访问且有权值,则将其访问并放入队列</span></span><br><span class="line">                visited[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">                EnQueue(&amp;q,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS搜索全图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSGraph</span><span class="params">(mGraph mg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> *visited = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(mg.n * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));   <span class="comment">//访问为1,未访问为0</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; mg.n;i++) visited[i] = <span class="number">0</span>;   <span class="comment">//visted数组初始化</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt; mg.n; i++)</span><br><span class="line">            <span class="keyword">if</span>( !visited[i] ) </span><br><span class="line">                BFS(mg,i,visited);</span><br><span class="line">    <span class="built_in">free</span>(visited);           <span class="comment">//整个图的BFS遍历后,释放visted数组</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mGraph g;</span><br><span class="line">    <span class="keyword">int</span> nSize,edge,u,v,i;</span><br><span class="line">    ElemType w;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the mgraph's Size:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nSize);</span><br><span class="line">    Init(&amp;g,nSize,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the mgraph's Edge num:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;edge);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; edge;i ++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Please enter the edge(Pu,Pv,Weight):"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        Insert(&amp;g,u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"DFS:"</span>);</span><br><span class="line">    DFSGraph(g);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nBFS:"</span>);</span><br><span class="line">    BFSGraph(g);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/1.png" alt="1"></p><h3 id="3-4-邻接表的BFS和DFS"><a href="#3-4-邻接表的BFS和DFS" class="headerlink" title="3.4-邻接表的BFS和DFS"></a>3.4-邻接表的BFS和DFS</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2  <span class="comment">//表示上溢</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3  <span class="comment">//表示下溢</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NotPresent 4 <span class="comment">//表示元素不存在</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5  <span class="comment">//表示有重复元素</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> BOOL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************队列操作**************/</span></span><br><span class="line"><span class="comment">//循环队列的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">int</span> maxSize;    <span class="comment">//最大容量</span></span><br><span class="line">    ElemType *element;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个能容纳mSize个单元的空队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create</span><span class="params">(Queue *Q,<span class="keyword">int</span> mSize)</span></span>&#123;</span><br><span class="line">    Q-&gt;maxSize=mSize;</span><br><span class="line">    Q-&gt;element=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*mSize);</span><br><span class="line">    Q-&gt;front=Q-&gt;rear=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//判断队列是否为空,若是,则返回TRUE;否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">IsEmpty</span><span class="params">(Queue *Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Q-&gt;front==Q-&gt;rear;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//判断队列是否已满,若是,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">IsFULL</span><span class="params">(Queue *Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Q-&gt;rear+<span class="number">1</span>)%Q-&gt;maxSize==Q-&gt;front;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//获取队头元素,并通过x返回.若操作成功,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">Front</span><span class="params">(Queue *Q,ElemType *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(Q))      <span class="comment">//空队列处理</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    *x=Q-&gt;element[(Q-&gt;front+<span class="number">1</span>)%Q-&gt;maxSize];</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//入队.在队列Q的队尾插入元素x(入队操作)。操作成功,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">EnQueue</span><span class="params">(Queue *Q,ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFULL(Q))      <span class="comment">//溢出处理</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    Q-&gt;rear=(Q-&gt;rear+<span class="number">1</span>)%Q-&gt;maxSize;</span><br><span class="line">    Q-&gt;element[Q-&gt;rear]=x;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//出队.从队列Q中删除队头元素(出队操作)。操作成功,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">DeQueue</span><span class="params">(Queue *Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(Q))&#123;   <span class="comment">//空队列处理</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    Q-&gt;front=(Q-&gt;front+<span class="number">1</span>)%Q-&gt;maxSize;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/************队列操作**************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ENode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjVex;              <span class="comment">//任意顶点u相邻的顶点</span></span><br><span class="line">    ElemType w;              <span class="comment">//边的权值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ENode</span> *<span class="title">nextArc</span>;</span>   <span class="comment">//指向下一个边结点</span></span><br><span class="line">&#125;ENode;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;           <span class="comment">//图的当前顶点数</span></span><br><span class="line">    <span class="keyword">int</span> e;           <span class="comment">//图的当前边数</span></span><br><span class="line">    ENode **a;       <span class="comment">//指向一维指针数组</span></span><br><span class="line">&#125;LGraph;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表的初始化</span></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(LGraph *lg,<span class="keyword">int</span> nSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>  i;</span><br><span class="line">    lg-&gt;n = nSize;</span><br><span class="line">    lg-&gt;e = <span class="number">0</span>;</span><br><span class="line">    lg-&gt;a = (ENode**)<span class="built_in">malloc</span>(nSize*<span class="keyword">sizeof</span>(ENode*));      </span><br><span class="line">    <span class="comment">//动态生成长度为n的一维指针数组</span></span><br><span class="line">    <span class="keyword">if</span>(!lg-&gt;a) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; lg-&gt;n;i ++) lg-&gt;a[i] = <span class="literal">NULL</span>;          <span class="comment">//将指针数组a置空</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接表的撤销</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Destory</span><span class="params">(LGraph *lg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ENode *p,*q;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; lg-&gt;n;i ++)&#123;        <span class="comment">//链表的撤销操作</span></span><br><span class="line">        p = lg-&gt;a[i];                 <span class="comment">//指针p指向顶点i的单链表的第一个边结点</span></span><br><span class="line">        q = p;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;                     <span class="comment">//释放顶点i的单链表中所有边结点</span></span><br><span class="line">            p = p-&gt;nextArc;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">            q = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(lg-&gt;a);                     <span class="comment">//释放一维指针数组a的存储空间</span></span><br><span class="line">    <span class="keyword">return</span> OK;                        <span class="comment">//改为int型函数,有返回值</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接表的搜索边</span></span><br><span class="line"><span class="function">Status <span class="title">Exist</span><span class="params">(LGraph *lg,<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    ENode *p;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span>||v &lt; <span class="number">0</span>||u &gt; lg-&gt;n<span class="number">-1</span> ||v &gt; lg-&gt;n<span class="number">-1</span> ||u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    p = lg-&gt;a[u];                   <span class="comment">//指针p指向顶点u的单链表的第一个边结点</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;adjVex != v)&#123;</span><br><span class="line">        p = p-&gt;nextArc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> ERROR;            </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接表的插入边</span></span><br><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(LGraph *lg,<span class="keyword">int</span> u,<span class="keyword">int</span> v,ElemType w)</span></span>&#123;</span><br><span class="line">    ENode *p;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span>||v &lt; <span class="number">0</span>||u &gt; lg-&gt;n<span class="number">-1</span>||v &gt; lg-&gt;n<span class="number">-1</span> ||u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(Exist(lg,u,v)) <span class="keyword">return</span> Duplicate;  <span class="comment">//此边已存在,返回错误</span></span><br><span class="line">    p = (ENode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ENode));   <span class="comment">//为新的边结点分配存储空间</span></span><br><span class="line">    p-&gt;adjVex = v;</span><br><span class="line">    p-&gt;w = w;</span><br><span class="line">    p -&gt; nextArc = lg-&gt;a[u];             <span class="comment">//将新的边结点插入单链表的最前面</span></span><br><span class="line">    lg-&gt;a[u] = p;</span><br><span class="line">    lg-&gt;e ++;                       </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//邻接表的删除边</span></span><br><span class="line"><span class="function">Status <span class="title">Remove</span><span class="params">(LGraph *lg,<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    ENode *p,*q;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span> || v &lt; <span class="number">0</span> || u &gt; lg-&gt;n<span class="number">-1</span> || v &gt; lg-&gt;n<span class="number">-1</span> || u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    p = lg-&gt;a[u];</span><br><span class="line">    q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;adjVex != v)&#123;         <span class="comment">//查找待删除边是否存在</span></span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;nextArc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> NotPresent;       </span><br><span class="line">    <span class="keyword">if</span>(q) q-&gt;nextArc = p-&gt;nextArc;     <span class="comment">//从单链表删除此边</span></span><br><span class="line">    <span class="keyword">else</span> lg-&gt;a[u] = p-&gt;nextArc;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    lg-&gt;e --;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(LGraph lg,<span class="keyword">int</span> v,<span class="keyword">int</span> visited[])</span></span>&#123;</span><br><span class="line">    ENode *j;</span><br><span class="line">    Queue q;</span><br><span class="line">    Create(&amp;q,lg.n);</span><br><span class="line">    visited[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, v);</span><br><span class="line">    EnQueue(&amp;q,v);              <span class="comment">//访问的节点入队</span></span><br><span class="line">    <span class="keyword">while</span>( !IsEmpty(&amp;q) )&#123;       <span class="comment">//一直到该层没有节点为止</span></span><br><span class="line">        Front(&amp;q,&amp;v);           <span class="comment">// 取出父节点</span></span><br><span class="line">        DeQueue(&amp;q);</span><br><span class="line">        <span class="keyword">for</span> (j=lg.a[v]; j!= <span class="literal">NULL</span>;j=j-&gt;nextArc )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( !visited[j-&gt;adjVex])&#123;</span><br><span class="line">                visited[j-&gt;adjVex] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, j-&gt;adjVex);</span><br><span class="line">                EnQueue(&amp;q,j-&gt;adjVex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSGraph</span><span class="params">(LGraph lg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> *visited = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)* lg.n);    <span class="comment">//记录n个节点的访问情况</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; lg.n;i++) visited[i] = <span class="number">0</span>;   <span class="comment">//visted数组初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lg.n; ++i)</span><br><span class="line">        <span class="keyword">if</span>( !visited[i] ) BFS(lg,i,visited);</span><br><span class="line">    <span class="built_in">free</span>(visited);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(LGraph lg,<span class="keyword">int</span> v,<span class="keyword">int</span> visited[])</span></span>&#123;</span><br><span class="line">    ENode *j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,v );</span><br><span class="line">    visited[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = lg.a[v];j!=<span class="literal">NULL</span>;j= j-&gt;nextArc)     <span class="comment">//lg.a链表的循环</span></span><br><span class="line">        <span class="keyword">if</span>( !visited[j-&gt;adjVex] ) </span><br><span class="line">            DFS(lg,j-&gt;adjVex,visited);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSGraph</span><span class="params">(LGraph lg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> *visited = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)* lg.n);    <span class="comment">//记录n个节点的访问情况</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; lg.n ; i++) visited[i] = <span class="number">0</span>;               <span class="comment">//visted数组初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lg.n; ++i)</span><br><span class="line">        <span class="keyword">if</span>( !visited[i] ) DFS(lg,i,visited);</span><br><span class="line">    <span class="built_in">free</span>(visited);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LGraph g;</span><br><span class="line">    <span class="keyword">int</span> i,u,v,enode,edge;</span><br><span class="line">    ElemType w;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the number of mgraph's Nodes:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;enode);</span><br><span class="line">    Init(&amp;g,enode);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the mgraph's Edge num:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;edge);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; edge;i ++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Please enter the edge(Pu,Pv,Weight):"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        Insert(&amp;g,u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"DFS:"</span>);</span><br><span class="line">    DFSGraph(g);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nBFS:"</span>);</span><br><span class="line">    BFSGraph(g);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2.png" alt="2"></p><p>以上大多直接从<a href="https://blog.csdn.net/Wonz5130/article" target="_blank" rel="noopener">学长的博客</a>搬运过来.</p><h3 id="3-5-飞机换乘最短距离-Dijkstra单源最短路径"><a href="#3-5-飞机换乘最短距离-Dijkstra单源最短路径" class="headerlink" title="3.5- 飞机换乘最短距离(Dijkstra单源最短路径)"></a>3.5- 飞机换乘最短距离(Dijkstra单源最短路径)</h3><p>编写程序，实现智能交通中的最佳路径选择问题：设有n个地点，编号为0~n-1，m条路径的起点、终点和代价由用户输入提供，采用实验3.1所示邻接矩阵为存储结构，寻找最佳路径方案(如花费时间最少、路径长度最短、交通费用最小等，任选其一即可)。</p><p>借了学长的整体框架,将邻接矩阵改成了邻接表,并完成了题目要求的给定起点、终点，算最短路径。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2  <span class="comment">//表示上溢</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3  <span class="comment">//表示下溢</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NotPresent 4 <span class="comment">//表示元素不存在</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5  <span class="comment">//表示有重复元素</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFTY 32657 <span class="comment">//表示正无穷</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> BOOL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ENode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjVex;              <span class="comment">//任意顶点u相邻的顶点</span></span><br><span class="line">    ElemType w;              <span class="comment">//边的权值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ENode</span> *<span class="title">nextArc</span>;</span>   <span class="comment">//指向下一个边结点</span></span><br><span class="line">&#125;ENode;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;           <span class="comment">//图的当前顶点数</span></span><br><span class="line">    <span class="keyword">int</span> e;           <span class="comment">//图的当前边数</span></span><br><span class="line">    ENode **a;       <span class="comment">//指向一维指针数组</span></span><br><span class="line">&#125;LGraph;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表的初始化</span></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(LGraph *lg,<span class="keyword">int</span> nSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>  i;</span><br><span class="line">    lg-&gt;n = nSize;</span><br><span class="line">    lg-&gt;e = <span class="number">0</span>;</span><br><span class="line">    lg-&gt;a = (ENode**)<span class="built_in">malloc</span>(nSize*<span class="keyword">sizeof</span>(ENode*));      </span><br><span class="line">    <span class="comment">//动态生成长度为n的一维指针数组</span></span><br><span class="line">    <span class="keyword">if</span>(!lg-&gt;a) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; lg-&gt;n;i ++) lg-&gt;a[i] = <span class="literal">NULL</span>;          </span><br><span class="line">    <span class="comment">//将指针数组a置空</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接表的撤销</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Destory</span><span class="params">(LGraph *lg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ENode *p,*q;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; lg-&gt;n;i ++)&#123;        <span class="comment">//链表的撤销操作</span></span><br><span class="line">        p = lg-&gt;a[i];                 <span class="comment">//指针p指向顶点i的单链表的第一个边结点</span></span><br><span class="line">        q = p;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;                     <span class="comment">//释放顶点i的单链表中所有边结点</span></span><br><span class="line">            p = p-&gt;nextArc;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">            q = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(lg-&gt;a);                     <span class="comment">//释放一维指针数组a的存储空间</span></span><br><span class="line">    <span class="keyword">return</span> OK;                        <span class="comment">//改为int型函数,有返回值</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接表的搜索边</span></span><br><span class="line"><span class="function">Status <span class="title">Exist</span><span class="params">(LGraph *lg,<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    ENode *p;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span>||v &lt; <span class="number">0</span>||u &gt; lg-&gt;n<span class="number">-1</span> ||v &gt; lg-&gt;n<span class="number">-1</span> ||u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    p = lg-&gt;a[u];                   <span class="comment">//指针p指向顶点u的单链表的第一个边结点</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;adjVex != v)&#123;</span><br><span class="line">        p = p-&gt;nextArc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> ERROR;            </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接表的插入边</span></span><br><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(LGraph *lg,<span class="keyword">int</span> u,<span class="keyword">int</span> v,ElemType w)</span></span>&#123;</span><br><span class="line">    ENode *p;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span>||v &lt; <span class="number">0</span>||u &gt; lg-&gt;n<span class="number">-1</span>||v &gt; lg-&gt;n<span class="number">-1</span> ||u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(Exist(lg,u,v)) <span class="keyword">return</span> Duplicate;  <span class="comment">//此边已存在,返回错误</span></span><br><span class="line">    p = (ENode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ENode));   <span class="comment">//为新的边结点分配存储空间</span></span><br><span class="line">    p-&gt;adjVex = v;</span><br><span class="line">    p-&gt;w = w;</span><br><span class="line">    p -&gt; nextArc = lg-&gt;a[u];             <span class="comment">//将新的边结点插入单链表的最前面</span></span><br><span class="line">    lg-&gt;a[u] = p;</span><br><span class="line">    lg-&gt;e ++;                       </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//邻接表的删除边</span></span><br><span class="line"><span class="function">Status <span class="title">Remove</span><span class="params">(LGraph *lg,<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    ENode *p,*q;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span> || v &lt; <span class="number">0</span> || u &gt; lg-&gt;n<span class="number">-1</span> || v &gt; lg-&gt;n<span class="number">-1</span> || u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    p = lg-&gt;a[u];</span><br><span class="line">    q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;adjVex != v)&#123;         <span class="comment">//查找待删除边是否存在</span></span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;nextArc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> NotPresent;       </span><br><span class="line">    <span class="keyword">if</span>(q) q-&gt;nextArc = p-&gt;nextArc;     <span class="comment">//从单链表删除此边</span></span><br><span class="line">    <span class="keyword">else</span> lg-&gt;a[u] = p-&gt;nextArc;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    lg-&gt;e --;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">//选出最小的d[i],i ∈ V-S</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Choose</span><span class="params">(<span class="keyword">int</span> d[],<span class="keyword">int</span> n,<span class="keyword">int</span> s[])</span></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> minpos;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ElemType min;</span><br><span class="line">    min = INFTY;</span><br><span class="line">    minpos = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i ++)&#123;         <span class="comment">//这里i初值改为0</span></span><br><span class="line">        <span class="keyword">if</span>( d[i] &lt;= min &amp;&amp; !s[i])&#123;  <span class="comment">//&lt;改为&lt;=</span></span><br><span class="line">            <span class="comment">// printf("Choose: d[%d]:%d ",i, d[i]);  </span></span><br><span class="line">            <span class="comment">//可以将这段注释打开理解</span></span><br><span class="line">            min = d[i];</span><br><span class="line">            minpos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minpos;                <span class="comment">//返回下标位置</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//Dijkstra算法</span></span><br><span class="line"><span class="function">Status <span class="title">Dijkstra</span><span class="params">(LGraph g,<span class="keyword">int</span> v,<span class="keyword">int</span> d[],<span class="keyword">int</span> path[])</span></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i,k,w,distance = <span class="number">0</span>;       <span class="comment">//增加了一个distance记录最短距离之和</span></span><br><span class="line">    <span class="keyword">int</span> *s;</span><br><span class="line">    <span class="keyword">if</span>(v &lt; <span class="number">0</span> || v &gt; g.n<span class="number">-1</span>)  <span class="keyword">return</span> ERROR;</span><br><span class="line">    ENode *j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*对辅助数据结构的初始化*/</span></span><br><span class="line">    s = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(g.n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">/*非源点结点初始化*/</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; g.n;i ++)&#123;      </span><br><span class="line">        s[i] = <span class="number">0</span>;                 <span class="comment">//表示顶点i是否在s中</span></span><br><span class="line">        <span class="keyword">for</span>( j=g.a[v];j!=<span class="literal">NULL</span>; j=j-&gt;nextArc) </span><br><span class="line">            <span class="keyword">if</span>(j-&gt;adjVex == i ) </span><br><span class="line">                d[i] = j-&gt;w;         <span class="comment">//v到i的距离</span></span><br><span class="line">        <span class="keyword">if</span>(i != v &amp;&amp; d[i] &lt; INFTY) path[i] = v;          </span><br><span class="line">        <span class="comment">//如果与源点有边相通,标识指向i的源点v</span></span><br><span class="line">        <span class="keyword">else</span> path[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*源点初始化*/</span></span><br><span class="line">    s[v] = <span class="number">1</span>;                     <span class="comment">//顶点v为源点,将原点v加入集合S</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The order:%d "</span>,v);              <span class="comment">//输出源点0</span></span><br><span class="line">    d[v] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*对辅助数据结构的初始化*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= g.n<span class="number">-1</span>;i ++)&#123;   <span class="comment">//最多产生n-1条最短路径,&lt;改为&lt;=</span></span><br><span class="line">        k = Choose(d, g.n ,s);      <span class="comment">//求当前路径最短者k</span></span><br><span class="line">        s[k] = <span class="number">1</span>;                 <span class="comment">//将k加入集合S中</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,k);</span><br><span class="line">        <span class="keyword">for</span>( j = g.a[k]; j!=<span class="literal">NULL</span>; j= j-&gt;nextArc)&#123;  <span class="comment">//更新d和path</span></span><br><span class="line">            <span class="keyword">if</span>( !s[j-&gt;adjVex] &amp;&amp; d[k] + j-&gt;w &lt; d[ j-&gt;adjVex ])&#123;        </span><br><span class="line">            <span class="comment">//未被访问过,且 当前边+到前个结点的权值 &lt; 现在的路径长度</span></span><br><span class="line">            <span class="comment">//j-&gt;adjVex为所有与v相邻接的顶点</span></span><br><span class="line">                d[j-&gt;adjVex ] = d[k] + j-&gt;w;</span><br><span class="line">                distance = d[j-&gt;adjVex ];  <span class="comment">//计算所有路径中的min距离</span></span><br><span class="line">                path[j-&gt;adjVex ] = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LGraph g;</span><br><span class="line">    <span class="keyword">int</span> nSize,edge,u,v,i;</span><br><span class="line">    <span class="keyword">int</span> s,t;  <span class="comment">//起点,终点</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) d[i] = INFTY;</span><br><span class="line">    <span class="keyword">int</span> path[<span class="number">100</span>];</span><br><span class="line">    ElemType w;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the number of mgraph's Nodes:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nSize);</span><br><span class="line">    Init(&amp;g,nSize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the mgraph's Edge num:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;edge);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; edge;i ++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Please enter the edge(Pu,Pv,Weight):"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        Insert(&amp;g,u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the Start Point :"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the Destination Point :"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"></span><br><span class="line">    Dijkstra(g,<span class="number">0</span>,d,path);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nThe shortest distance from %d to Point %d:%d\n"</span>,s,t, d[t]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/3.png" alt="3"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实验3-图的基本运算及职能交通中的最佳路径选择问题&quot;&gt;&lt;a href=&quot;#实验3-图的基本运算及职能交通中的最佳路径选择问题&quot; class=&quot;headerlink&quot; title=&quot;实验3.图的基本运算及职能交通中的最佳路径选择问题&quot;&gt;&lt;/a&gt;实验3.图的基本运算及
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图论" scheme="https://nymrli.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="实验作业" scheme="https://nymrli.top/tags/%E5%AE%9E%E9%AA%8C%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——图</title>
    <link href="https://nymrli.top/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E5%9B%BE.html"/>
    <id>https://nymrli.top/数据结构——图.html</id>
    <published>2018-12-16T03:41:46.000Z</published>
    <updated>2018-12-26T01:11:22.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构——图"><a href="#数据结构——图" class="headerlink" title="数据结构——图"></a>数据结构——图</h1><h2 id="连通图"><a href="#连通图" class="headerlink" title="连通图"></a>连通图</h2><ul><li>无向图<ul><li><strong>连通图</strong> : 图中任意两点都连通 </li><li><strong>连通</strong>:如果从v到w存在一条(无向)路径,则称v和w是连通的</li><li><strong>路径:</strong>V到w的路径是一系列顶点{V,v1,V2，vn,w}的集合,其中任一对相邻的顶点间都有图中的边。路径的长度是路径中的边数(如果带权,则是所有边的权重和)。如果v到w之间的所有顶点都不同,则称简单路径<ul><li>▲路径是边的超集,一条路径中可以有多条边</li></ul></li><li><strong>回路</strong>:起点等于终点的路径 ==&gt; 有回路的路径为非简单路径</li></ul></li><li>有向图:<ul><li><strong>强连通</strong> : 有向图中顶点v和W之间存在双向路径,则称v和w是强连通的强连通图</li><li><strong>强连通图</strong> : 有向图中任意两顶点均强连通强连通分量:有向图的极大强连通子图</li><li><strong>弱连通图</strong> : 将有向图中边的方向擦去,能变成连通图的图叫 <strong>弱连通图</strong></li></ul></li></ul><h2 id="图不连通咋办"><a href="#图不连通咋办" class="headerlink" title="图不连通咋办?"></a>图不连通咋办?</h2><ul><li>非连通图<ul><li>无向图<ul><li>连通分量: 无向图的极大连通子图<ul><li>极大顶点数 : 再加1个顶点就不连通了</li><li>极大边数 : 包含子图中所有顶点相连的所有边</li></ul></li></ul></li><li></li></ul></li></ul><p>图的边可以是具有<u>某种属性的对象</u>: 007案例中的岸边 </p><h2 id="最小代价生成树"><a href="#最小代价生成树" class="headerlink" title="最小代价生成树"></a>最小代价生成树</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><blockquote><p> 最小生成树问题 : 村村通—&gt; 使图连通的( 最少的边 \ 花销最小的 ) </p></blockquote><ul><li>树<ul><li>连通的</li><li>无回路</li><li>V个顶点 , v-1条边</li></ul></li><li>生成<ul><li>包含所有的顶点</li><li>V-1条边都在图里</li><li>任意加一条边都会构成回路</li></ul></li><li>最小<ul><li>边的权重和最小</li></ul></li></ul><p><strong>▲ 最小代价生成树不存在 <----> 图不连通</----></strong></p><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法:"></a>贪心算法:</h4><ul><li>贪: 每一步是最好的</li><li><p>好: 权重是最小的</p></li><li><p>约束: </p><ul><li>只能用图里有的边</li><li>正好用掉 v-1条边</li><li>不能有回路</li></ul></li></ul><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现:"></a>算法实现:</h3><h4 id="Prim算法——让小树成长："><a href="#Prim算法——让小树成长：" class="headerlink" title="Prim算法——让小树成长："></a>Prim算法——让小树成长：</h4><p><img src="/prim.jpg" alt="prim"></p><h4 id="kruskal——将森林合并成树"><a href="#kruskal——将森林合并成树" class="headerlink" title="kruskal——将森林合并成树:"></a>kruskal——将森林合并成树:</h4><blockquote><p>更贪心,直接将权重最小的边收进来</p></blockquote><p><img src="/kru.jpg" alt="kru"></p><h3 id="拓补排序"><a href="#拓补排序" class="headerlink" title="拓补排序"></a>拓补排序</h3><h4 id="AOV"><a href="#AOV" class="headerlink" title="AOV"></a>AOV</h4><blockquote><p>以顶点来表示活动。 一个活动是另一个活动的先决条件</p></blockquote><blockquote><p>不断抹去 <strong>没有前驱顶点(入度为0)</strong> 的顶点</p></blockquote><p><img src="/tobo.jpg" alt="tobo"></p><h5 id="提倡的做法-将入度为0的顶点放到容器中"><a href="#提倡的做法-将入度为0的顶点放到容器中" class="headerlink" title="提倡的做法: 将入度为0的顶点放到容器中"></a>提倡的做法: 将入度为0的顶点放到容器中</h5><p><img src="/tobo2.jpg" alt="tobo2"></p><p>▲.这种方法还可以用来检测是不是有向无环图(DAG)</p><h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><h4 id="AOE"><a href="#AOE" class="headerlink" title="AOE:"></a>AOE:</h4><blockquote><p>一般用于安排项目的工序</p><p>由绝不允许延误的活动组成的路径</p></blockquote><p><img src="/关键路径.jpg" alt="关键路径"></p><p><strong>关键路径长度</strong>: <code>earliest(n)</code></p><p><strong>没有机动时间的路径为关键路径</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构——图&quot;&gt;&lt;a href=&quot;#数据结构——图&quot; class=&quot;headerlink&quot; title=&quot;数据结构——图&quot;&gt;&lt;/a&gt;数据结构——图&lt;/h1&gt;&lt;h2 id=&quot;连通图&quot;&gt;&lt;a href=&quot;#连通图&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图论" scheme="https://nymrli.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>win自带邮件使用</title>
    <link href="https://nymrli.top/win%E8%87%AA%E5%B8%A6%E9%82%AE%E4%BB%B6%E4%BD%BF%E7%94%A8.html"/>
    <id>https://nymrli.top/win自带邮件使用.html</id>
    <published>2018-12-16T02:48:27.000Z</published>
    <updated>2018-12-16T03:07:15.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>创意大赛忘记提交附件的经历，让我决定这几天把邮箱的问题彻底解决了。</p></blockquote><h3 id="一-打开Windows自带的邮件"><a href="#一-打开Windows自带的邮件" class="headerlink" title="一.打开Windows自带的邮件"></a>一.打开Windows自带的邮件</h3><h4 id="1-附件栏里"><a href="#1-附件栏里" class="headerlink" title="1.附件栏里"></a>1.附件栏里</h4><p><img src="/hexo\source\_posts\win自带邮件使用\1.jpg" alt="1"></p><h4 id="2-直接搜索”邮件”"><a href="#2-直接搜索”邮件”" class="headerlink" title="2.直接搜索”邮件”"></a>2.直接搜索”邮件”</h4><p><img src="/hexo\source\_posts\win自带邮件使用\2.jpg" alt="2"></p><h3 id="二-添加账号"><a href="#二-添加账号" class="headerlink" title="二.添加账号"></a>二.添加账号</h3><h5 id="打开后界面是这样的-左边是我已经添加好的账号"><a href="#打开后界面是这样的-左边是我已经添加好的账号" class="headerlink" title="打开后界面是这样的,左边是我已经添加好的账号"></a>打开后界面是这样的,左边是我已经添加好的账号</h5><p><img src="/hexo\source\_posts\win自带邮件使用\3.jpg" alt="3"></p><h4 id="1-点击下面的”齿轮”"><a href="#1-点击下面的”齿轮”" class="headerlink" title="1.点击下面的”齿轮”"></a>1.点击下面的”齿轮”</h4><p><img src="/hexo\source\_posts\win自带邮件使用\4.jpg" alt="4"></p><h4 id="2-点击”管理账号”"><a href="#2-点击”管理账号”" class="headerlink" title="2.点击”管理账号”"></a>2.点击”管理账号”</h4><p><img src="/hexo\source\_posts\win自带邮件使用\5.jpg" alt="5"></p><h4 id="3-点击”添加账户”"><a href="#3-点击”添加账户”" class="headerlink" title="3.点击”添加账户”"></a>3.点击”添加账户”</h4><p><img src="/hexo\source\_posts\win自带邮件使用\6.jpg" alt="6"></p><h5 id="将信息按规则填好后-需要注意的是▲-在按登录之前需要翻墙-否则会出现如图”我们无法找到你的设置“"><a href="#将信息按规则填好后-需要注意的是▲-在按登录之前需要翻墙-否则会出现如图”我们无法找到你的设置“" class="headerlink" title="将信息按规则填好后.需要注意的是▲.在按登录之前需要翻墙,否则会出现如图”我们无法找到你的设置“."></a>将信息按规则填好后.需要注意的是▲.在按登录之前需要<strong>翻墙</strong>,否则会出现如图”<u>我们无法找到你的设置</u>“.</h5><h5 id="其次要注意的是-密码为IMAP或者POP、SMTP的密码，授权码查询如下"><a href="#其次要注意的是-密码为IMAP或者POP、SMTP的密码，授权码查询如下" class="headerlink" title="其次要注意的是,密码为IMAP或者POP、SMTP的密码，授权码查询如下"></a>其次要注意的是,密码为IMAP或者POP、SMTP的密码，授权码查询如下</h5><h6 id="网易："><a href="#网易：" class="headerlink" title="网易："></a>网易：</h6><p>图一</p><p><img src="/hexo\source\_posts\win自带邮件使用\7.jpg" alt="7"></p><p>图二：</p><p><img src="/hexo\source\_posts\win自带邮件使用\8.jpg" alt="8"></p><p>图三：</p><p>此步他会要求你设置自己的<u>授权码</u></p><p><img src="/hexo\source\_posts\win自带邮件使用\9.jpg" alt="9"></p><h6 id="QQ邮箱："><a href="#QQ邮箱：" class="headerlink" title="QQ邮箱："></a>QQ邮箱：</h6><p>图一：</p><p><img src="/hexo\source\_posts\win自带邮件使用\10.jpg" alt="10"></p><p>图二：</p><p>此步他会要求你发送“配置邮箱客户端”到某个号码上，然后会生成授权码。<strong>这个不是自己设置的</strong></p><p><img src="/hexo\source\_posts\win自带邮件使用\11.jpg" alt="11"></p><hr><p>翻墙成功，在确保密码也正确的情况下就可以按“登录”了。</p><h4 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h4><h5 id="添加账号："><a href="#添加账号：" class="headerlink" title="添加账号："></a>添加账号：</h5><h6 id="从“开始“中打开"><a href="#从“开始“中打开" class="headerlink" title="从“开始“中打开"></a>从“开始“中打开</h6><p><img src="/hexo\source\_posts\win自带邮件使用\12.jpg" alt="12"></p><p><img src="/hexo\source\_posts\win自带邮件使用\13.jpg" alt="13"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;创意大赛忘记提交附件的经历，让我决定这几天把邮箱的问题彻底解决了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一-打开Windows自带的邮件&quot;&gt;&lt;a href=&quot;#一-打开Windows自带的邮件&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="邮件" scheme="https://nymrli.top/tags/%E9%82%AE%E4%BB%B6/"/>
    
      <category term="Window10" scheme="https://nymrli.top/tags/Window10/"/>
    
  </entry>
  
  <entry>
    <title>2018-12-15小记</title>
    <link href="https://nymrli.top/2018-12-15%E5%B0%8F%E8%AE%B0.html"/>
    <id>https://nymrli.top/2018-12-15小记.html</id>
    <published>2018-12-15T14:22:25.000Z</published>
    <updated>2018-12-18T12:13:57.125Z</updated>
    
    <content type="html"><![CDATA[<blockquote><pre><code>数据结构上机,由于最近烦心事也比较多,没有任何准备,在机房想要自己把代码敲出来也是不现实的。于是，就搜吧。无意中搜到了[学长的博客](https://me.csdn.net/Wonz5130),大二转计科，看了他努力的点滴，也颇有感触，于是下笔，略述己见。</code></pre></blockquote><blockquote><p>   之前一直在博客里都是发的技术性的文章，有时想说点话，也找不到合适的人。发条说说，不懂的人不知所措，懂的人也无从安慰，于是也只好作罢。也曾想过在博客里写，太又感觉未免太过矫情，今日所感，还是决定记录些情感、回忆。</p></blockquote><pre><code>大一上报了院科协与校科协，入大学前已经略有琢磨过C语言学习的我自然没有再接着学C，于是趁着Python的大热，也正是听说了Python的简洁、可以做爬虫、网站、人工智能等有趣的时就决定学了这门语言。于是加入了Python组，碰到了李林伟与王宇学长，李林伟学长很负责，大一的课几乎都是由他授的，当初还有事嫌他讲的不够好，现在自己当了讲师后才发现根本无暇准备。大一的时光很多都泡在了图书馆，一个学期下来已经借了20+本书了，整个学年下来一共借了40+本书，虽然没有全部看完，都明显的感觉到自己的努力。大二一般都是在看视频，图书馆很少去了，书也借的少了。大一还学了单片机，说来也可惜，第一次院级比赛优之杰做了个所有授课内容如 蜂鸣器、LCD1602、跑马灯、矩阵按键 的作品已经很了不起了，就没有再深入学些什么，不知那些更优秀的人已经开始准备电赛、飞思卡尔了。很遗憾吧，最终在下学期的4月份“海善达杯”结束后就再也没碰过单片机，所有学过的单片机代码也逐渐忘却。大二，一直呆在学科楼220，但没有怎么忙Apollo的项目，说来也比较惭愧。这半个学期也已经过了，感觉自己一直在忙些奇奇怪怪的事，学了前端HTML、CSS、JS；还学了微信小程序，为的就是想参加一些比赛，但到如今却都凉了。为了天翼杯做了个物联网的猫粮，但是天翼杯初赛就被刷；参加创意大赛，结果自己忘记提交附件了；同时，学长的不看好，让我也对完成点子的作品产生了怀疑：这种没技术含量的作品真的能获奖吗？无论如何，最近也得不到答案了。这让我对开发产生了一种厌恶与疲倦，下学期想好好弄弄算法或是机器学习了，静下心来弄点真技术。有的时候真的会比较迷茫吧？考研还是工作的问题，每隔一段时间都会思考。昨天的分光计无疑让我又一次受挫。准备了3天的物理实验，结果最后誊错数据，同时也是最后几个离开实验室的。确实，分光计真的很简单，但有模糊的地方、以及平时没解决放过的地方在你最薄弱的时候就可能一下子要了你的命。无法确定是否要修正、无法确定是否要算θ0……导致没有一开始就画表，导致了最后的誊错，感觉像是命中注定，就如同创意大赛的没有提交。最近过的很背，期望能够有个水逆退散、柳暗花明。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;数据结构上机,由于最近烦心事也比较多,没有任何准备,在机房想要自己把代码敲出来也是不现实的。于是，就搜吧。无意中搜到了[学长的博客](https://me.csdn.net/Wonz5130),大二转计科，看了他努力的点滴，也颇有感
      
    
    </summary>
    
    
      <category term="生活小记" scheme="https://nymrli.top/tags/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python中邮件的发送</title>
    <link href="https://nymrli.top/Python%E4%B8%AD%E9%82%AE%E4%BB%B6%E7%9A%84%E5%8F%91%E9%80%81.html"/>
    <id>https://nymrli.top/Python中邮件的发送.html</id>
    <published>2018-12-12T14:17:38.000Z</published>
    <updated>2018-12-12T14:25:42.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python普通的邮件发送"><a href="#Python普通的邮件发送" class="headerlink" title="Python普通的邮件发送"></a>Python普通的邮件发送</h2><p>需要一个安全的连接，例如SSL，因此接下来我们会使用SSL的方式去登录，但是在那之前，我们需要做一些准备，打开qq邮箱，点击设置-&gt;账户，找到<strong>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</strong>，开启IMAP/SMTP服务，然后根据要求使用手机发送到指定号码，获取授权码，这个<strong>授权码就是你接下来登录要使用的密码</strong>.</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> email.mime.<span class="built_in">text</span> import MIMEText</span><br><span class="line">import smtplib</span><br><span class="line"></span><br><span class="line"><span class="variable">_user</span> = <span class="string">'1063052964@qq.com'</span></span><br><span class="line"><span class="variable">_pwd</span> = <span class="string">'pykhotuhghdjbeci'</span></span><br><span class="line"><span class="variable">_to</span> = <span class="string">'2035420834@qq.com'</span></span><br><span class="line">msg = MIMEText(mail_body)<span class="comment">//MIMEText中_subtype默认为plain,html格式,只需改这个参数</span></span><br><span class="line">msg[<span class="string">"Subject"</span>] = <span class="string">'来自[不吐不快]网站的网友意见'</span></span><br><span class="line">msg[<span class="string">"From"</span>] = <span class="variable">_user</span></span><br><span class="line">msg[<span class="string">"To"</span>] = <span class="variable">_to</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s = smtplib.SMTP_SSL(<span class="string">"smtp.qq.com"</span>, <span class="number">465</span>)  <span class="comment">//或是使用s = smtplib.SMTP("smtp.qq.com",25)</span></span><br><span class="line">    s.login(<span class="variable">_user</span>, <span class="variable">_pwd</span>)</span><br><span class="line">    s.sendmail(<span class="variable">_user</span>, <span class="variable">_to</span>, msg.as_string())</span><br><span class="line">    s.quit()</span><br><span class="line">    message = <span class="string">'感谢你的来信'</span></span><br><span class="line">except:</span><br><span class="line">    message = <span class="string">'发送失败'</span></span><br></pre></td></tr></table></figure><p>▲smtplib.SMTP_SSL([host[, port[, local_hostname[, keyfile[, certfile[, timeout]]]]]])</p><p>这是一个派生自SMTP的子类，通过SSL加密的套接字连接（使用此类，您需要使用SSL支持编译的套接字模块）。如果未指定主机，则使用“（本地主机）”。如果省略端口，则使用标准的SMTP-over-SSL端口（465）</p><p>本机已安装了支持 SMTP 的服务，如：sendmail:</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line">from email.mime.<span class="keyword">text</span> <span class="keyword">import</span> MIMEText</span><br><span class="line">from email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line">message[<span class="string">'From'</span>] = Header(<span class="string">"菜鸟教程"</span>, <span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><p>第三方SMTP发送邮件:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> formataddr</span><br><span class="line"></span><br><span class="line">msg[<span class="string">'From'</span>]=formataddr([<span class="string">"FromRunoob"</span>,my_sender])  # 括号里的对应发件人邮箱昵称、发件人邮箱账号</span><br><span class="line">msg[<span class="string">'To'</span>]=formataddr([<span class="string">"FK"</span>,my_user])              # 括号里的对应收件人邮箱昵称、收件人邮箱账号</span><br><span class="line">*没有formataddr的昵称默认为账号*</span><br></pre></td></tr></table></figure><h4 id="Python-发送带附件的邮件"><a href="#Python-发送带附件的邮件" class="headerlink" title="Python 发送带附件的邮件:"></a>Python 发送带附件的邮件:</h4><blockquote><p>发送带附件的邮件，首先要创建MIMEMultipart()实例，然后构造附件，如果有多个附件，可依次构造，最后利用smtplib.smtp发送。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"> </span><br><span class="line">sender = <span class="string">'from@runoob.com'</span></span><br><span class="line">receivers = [<span class="string">'429240967@qq.com'</span>]  <span class="comment"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建一个带附件的实例</span></span><br><span class="line">message = MIMEMultipart()</span><br><span class="line">message[<span class="string">'From'</span>] = Header(<span class="string">"菜鸟教程"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">message[<span class="string">'To'</span>] =  Header(<span class="string">"测试"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">subject = <span class="string">'Python SMTP 邮件测试'</span></span><br><span class="line">message[<span class="string">'Subject'</span>] = Header(subject, <span class="string">'utf-8'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#邮件正文内容</span></span><br><span class="line">message.attach(MIMEText(<span class="string">'这是菜鸟教程Python 邮件发送测试……'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 构造附件1，传送当前目录下的 test.txt 文件</span></span><br><span class="line">att1 = MIMEText(open(<span class="string">'test.txt'</span>, <span class="string">'rb'</span>).read(), <span class="string">'base64'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">att1[<span class="string">"Content-Type"</span>] = <span class="string">'application/octet-stream'</span></span><br><span class="line"><span class="comment"># 这里的filename可以任意写，写什么名字，邮件中显示什么名字</span></span><br><span class="line">att1[<span class="string">"Content-Disposition"</span>] = <span class="string">'attachment; filename="test.txt"'</span></span><br><span class="line">message.attach(att1)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 构造附件2，传送当前目录下的 runoob.txt 文件</span></span><br><span class="line">att2 = MIMEText(open(<span class="string">'runoob.txt'</span>, <span class="string">'rb'</span>).read(), <span class="string">'base64'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">att2[<span class="string">"Content-Type"</span>] = <span class="string">'application/octet-stream'</span></span><br><span class="line">att2[<span class="string">"Content-Disposition"</span>] = <span class="string">'attachment; filename="runoob.txt"'</span></span><br><span class="line">message.attach(att2)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    smtpObj = smtplib.SMTP(<span class="string">'localhost'</span>)</span><br><span class="line">    smtpObj.sendmail(sender, receivers, message.as_string())</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"邮件发送成功"</span></span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Error: 无法发送邮件"</span></span><br></pre></td></tr></table></figure><h4 id="在-HTML-文本中添加图片"><a href="#在-HTML-文本中添加图片" class="headerlink" title="在 HTML 文本中添加图片"></a>在 HTML 文本中添加图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"> </span><br><span class="line">sender = <span class="string">'from@runoob.com'</span></span><br><span class="line">receivers = [<span class="string">'429240967@qq.com'</span>]  <span class="comment"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></span><br><span class="line"> </span><br><span class="line">msgRoot = MIMEMultipart(<span class="string">'related'</span>)//创建MIMEMultipart()实例</span><br><span class="line">msgRoot[<span class="string">'From'</span>] = Header(<span class="string">"菜鸟教程"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">msgRoot[<span class="string">'To'</span>] =  Header(<span class="string">"测试"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">subject = <span class="string">'Python SMTP 邮件测试'</span></span><br><span class="line">msgRoot[<span class="string">'Subject'</span>] = Header(subject, <span class="string">'utf-8'</span>)</span><br><span class="line"> </span><br><span class="line">msgAlternative = MIMEMultipart(<span class="string">'alternative'</span>)</span><br><span class="line">msgRoot.attach(msgAlternative)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">mail_msg = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;p&gt;Python 邮件发送测试...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;a href="http://www.runoob.com"&gt;菜鸟教程链接&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;图片演示：&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;img src="cid:image1"&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">msgAlternative.attach(MIMEText(mail_msg, <span class="string">'html'</span>, <span class="string">'utf-8'</span>))//内容</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定图片为当前目录</span></span><br><span class="line">fp = open(<span class="string">'test.png'</span>, <span class="string">'rb'</span>)</span><br><span class="line">msgImage = MIMEImage(fp.read())</span><br><span class="line">fp.close()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义图片 ID，在 HTML 文本中引用</span></span><br><span class="line">msgImage.add_header(<span class="string">'Content-ID'</span>, <span class="string">'&lt;image1&gt;'</span>)</span><br><span class="line">msgRoot.attach(msgImage)//附件</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    smtpObj = smtplib.SMTP(<span class="string">'localhost'</span>)</span><br><span class="line">    smtpObj.sendmail(sender, receivers, msgRoot.as_string())</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"邮件发送成功"</span></span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Error: 无法发送邮件"</span></span><br></pre></td></tr></table></figure><p><a href="http://www.runoob.com/python/python-email.html" target="_blank" rel="noopener">Python SMTP发送邮件</a></p><hr><h2 id="flask-email"><a href="#flask-email" class="headerlink" title="flask-email"></a>flask-email</h2><p><a href="https://pythonhosted.org/Flask-Mail/" target="_blank" rel="noopener">官方文档</a></p><h4 id="阻塞发送"><a href="#阻塞发送" class="headerlink" title="阻塞发送"></a>阻塞发送</h4><h5 id="最简单的调用"><a href="#最简单的调用" class="headerlink" title="最简单的调用"></a>最简单的调用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail,Message</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'MAIL_SERVER'</span>] = <span class="string">'smtp.qq.com'</span></span><br><span class="line">app.config[<span class="string">'MAIL_PORT'</span>] = <span class="number">587</span></span><br><span class="line">app.config[<span class="string">'MAIL_USE_TLS'</span>] = <span class="keyword">True</span></span><br><span class="line">app.config[<span class="string">'MAIL_USERNAME'</span>] = <span class="string">'1063052964@qq.com'</span></span><br><span class="line">app.config[<span class="string">'MAIL_PASSWORD'</span>] = <span class="string">'#'</span></span><br><span class="line"></span><br><span class="line">mail = Mail(app)</span><br><span class="line"></span><br><span class="line">msg = Message(<span class="string">'邮件主题'</span>, sender=<span class="string">'1063052964@qq.com'</span>, recipients=[<span class="string">'2035420834@qq.com'</span>])</span><br><span class="line">msg.body = <span class="string">'邮件内容'</span></span><br><span class="line">msg.html = <span class="string">"&lt;h1&gt;邮件的html模板&lt;h1&gt; body"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    mail.send(msg)</span><br></pre></td></tr></table></figure><h5 id="读取配置-视图函数中调用"><a href="#读取配置-视图函数中调用" class="headerlink" title="读取配置+视图函数中调用"></a>读取配置+视图函数中调用</h5><p>[config.py]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置邮箱信息</span></span><br><span class="line">MAIL_SERVER = <span class="string">'smtp.qq.com'</span></span><br><span class="line">MAIL_PORT = <span class="number">465</span></span><br><span class="line">MAIL_USE_TLS = <span class="keyword">False</span></span><br><span class="line">MAIL_USE_SSL = <span class="keyword">True</span></span><br><span class="line"><span class="comment"># 注意此处，很多人配置发不出去和这个是有关系的</span></span><br><span class="line">MAIL_PASSWORD = <span class="string">'**********'</span></span><br><span class="line">MAIL_USERNAME = <span class="string">'********@qq.com'</span></span><br><span class="line"><span class="comment"># qq郵箱默認走ssl，所以創建的smtp對象必須要支持加密傳輸，且需要指定port=465</span></span><br></pre></td></tr></table></figure><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Message,Mail</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line">mail = Mail(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendMail</span><span class="params">()</span>:</span></span><br><span class="line">    msg = Message(<span class="string">'test'</span>, sender = <span class="string">'1063052964@qq.com'</span>, recipients=[<span class="string">"2035420834@qq.com"</span>])</span><br><span class="line">    <span class="comment"># recipients是个列表，包含所有收件人</span></span><br><span class="line">    <span class="comment"># 此处的test是邮箱的主题，sender和config中的MAIL_USERNAME要一致哦</span></span><br><span class="line">    msg.body = <span class="string">'123'</span></span><br><span class="line">    msg.html = <span class="string">'&lt;b&gt;test&lt;/b&gt;body'</span></span><br><span class="line">    mail.send(msg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    sendMail()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><blockquote><p>tips:tip：具体工程中，配置可以写在单独一个文件如”.env”，然后利用python-envcfg来读取配置，如：<br>app.config.from_object(‘envcfg.raw’)</p></blockquote><h4 id="异步发送"><a href="#异步发送" class="headerlink" title="异步发送"></a>异步发送</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Message,Mail</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line">mail = Mail(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_async_email</span><span class="params">(app,msg)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        mail.send(message=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendMail</span><span class="params">()</span>:</span></span><br><span class="line">    msg = Message(<span class="string">'test'</span>,sender=<span class="string">'106305964@qq.com'</span>,\</span><br><span class="line">                        recipients=[<span class="string">"870545361@qq.com"</span>])</span><br><span class="line">    <span class="comment"># recipients是个列表，包含所有收件人</span></span><br><span class="line">    <span class="comment"># 此处的test是邮箱的主题，sender和config中的MAIL_USERNAME要一致哦</span></span><br><span class="line">    msg.body = <span class="string">'testbody'</span></span><br><span class="line">    msg.html = <span class="string">'&lt;b&gt;test&lt;/b&gt;body'</span></span><br><span class="line">    <span class="comment"># 邮件发送给目标，可以有文本，两种方式呈现，你能看见怎样的取决于你的客户端</span></span><br><span class="line">    thr = Thread(target=send_async_email,args=[app,msg])</span><br><span class="line">    <span class="comment"># 使用多线程，在实际开发中，若是不使用异步、多线程等方式，网页会卡住</span></span><br><span class="line">    thr.start()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>▲. 许多Flask的扩展都是假定自己运行在一个活动的应用和请求上下文中，Flask-Mail的send函数使用到current_app 这个上下文了，所以当 mail.send()函数在一个线程中执行的时候需要人为的创建一个上下文。在示例 send_async_email 中使用了 app.app_context() 来创建一个上下文。</p><p>既然异步的邮件发送功能已经实现了，如果将来我们需要实现其它异步的函数，还有什么需要改进的吗？我们需要为每一个实现异步功能的函数拷贝多线程的代码吗？这并不好。</p><p>我们可以通过实现一个 <a href="http://www.python.org/dev/peps/pep-0318/" target="_blank" rel="noopener">装饰器</a> 来解决这个问题。有了装饰器，上面的代码可以修改为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .decorators <span class="keyword">import</span> <span class="keyword">async</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@async</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_async_email</span><span class="params">(app, msg)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        mail.send(msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_email</span><span class="params">(subject, sender, recipients, text_body, html_body)</span>:</span></span><br><span class="line">    msg = Message(subject, sender=sender, recipients=recipients)</span><br><span class="line">    msg.body = text_body</span><br><span class="line">    msg.html = html_body</span><br><span class="line">    send_async_email(app, msg)</span><br></pre></td></tr></table></figure><p>好的多了吧，对不对？</p><p>这个神奇的代码其实很简单。我们把它放入一个新文件(文件 <em>app/decorators.py</em>):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        thr = Thread(target = f, args = args, kwargs = kwargs)</span><br><span class="line">        thr.start()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>作为一个练习，大家可以考虑考虑如何用 <code>*multiprocessing*</code> 模块来实现上面的功能。</p><p>摘自<a href="http://www.pythondoc.com/flask-mega-tutorial/email.html" target="_blank" rel="noopener">flask文档</a></p><hr><h2 id="django-core-mail邮件"><a href="#django-core-mail邮件" class="headerlink" title="django.core.mail邮件"></a>django.core.mail邮件</h2><p>EmailMessage: 标题. 内容.发件人.收件人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line">send_mail(<span class="string">u'邮件标题'</span>, <span class="string">u'邮件内容'</span>, <span class="string">'from@example.com'</span>,</span><br><span class="line">    [<span class="string">'to@example.com'</span>], fail_silently=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h3 id="send-mail"><a href="#send-mail" class="headerlink" title="send_mail()"></a>send_mail()</h3><blockquote><p><code>subject</code>, <code>message</code>, <code>from_email</code> and <code>recipient_list</code> 这四个参数是必须的。</p><ul><li><code>subject</code>: 字符串，表示邮件标题。</li><li><code>message</code>: 字符串，表示邮件内容。</li><li><code>from_email</code>: 字符串，表示发件邮箱。</li><li><code>recipient_list</code>: 字符串列表，列表中每个成员都是一个邮箱地址，而且每个收件人都会在 “收件人/To:” 栏看到出现在 <code>recipient_list</code> 中的其他收件人。</li><li><code>fail_silently</code>: （可选）布尔值。为 <code>False</code> 时， <code>send_mail</code> 会抛出 <a href="https://docs.python.org/2.7/library/smtplib.html#smtplib.SMTPException" target="_blank" rel="noopener"><code>smtplib.SMTPException</code></a> 异常。 <a href="https://docs.python.org/2.7/library/smtplib.html#module-smtplib" target="_blank" rel="noopener"><code>smtplib</code></a> 文档列出了所有可能的异常。 这些异常都是 <a href="https://docs.python.org/2.7/library/smtplib.html#smtplib.SMTPException" target="_blank" rel="noopener"><code>SMTPException</code></a> 的子类。</li><li><code>auth_user</code>: （可选）SMTP服务器的认证用户名。没提供该参数的情况下，Django会使用 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/ref/settings.html#std:setting-EMAIL_HOST_USER" target="_blank" rel="noopener"><code>EMAIL_HOST_USER</code></a> 配置项的设置。</li><li><code>auth_password</code>: （可选）SMTP服务器的认证密码，没提供该参数的情况下，Django会使用 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/ref/settings.html#std:setting-EMAIL_HOST_PASSWORD" target="_blank" rel="noopener"><code>EMAIL_HOST_PASSWORD</code></a>配置项的设置。</li><li><code>connection</code>: （可选）发送邮件的后端。没提供该参数的情况下，Django会使用默认后端的实例。可查看 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#topic-email-backends" target="_blank" rel="noopener">Email backends</a> 了解更多细节。</li></ul></blockquote><p><a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.send_mass_mail" target="_blank" rel="noopener"><code>send_mass_mail()</code></a> 和 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.send_mail" target="_blank" rel="noopener"><code>send_mail()</code></a> 的区别在于： <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.send_mail" target="_blank" rel="noopener"><code>send_mail()</code></a> 每发送一封邮件就会打开一次邮件服务器链接，而<a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.send_mass_mail" target="_blank" rel="noopener"><code>send_mass_mail()</code></a> 则是打开一次链接，发送所有的邮件。 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.send_mass_mail" target="_blank" rel="noopener"><code>send_mass_mail()</code></a> 明显更高效。</p><h3 id="main-admins"><a href="#main-admins" class="headerlink" title="main_admins()"></a>main_admins()</h3><p><code>mail_admins</code>(<em>subject</em>, <em>message</em>, <em>fail_silently=False</em>, <em>connection=None</em>, <em>html_message=None</em>)</p><p><code>django.core.mail.mail_admins()</code> 是一个给网站后台管理员(admin)发邮件的快捷方法，管理员设置放在 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/ref/settings.html#std:setting-ADMINS" target="_blank" rel="noopener"><code>ADMINS</code></a> 配置项。</p><p><code>mail_admins()</code> 使用 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/ref/settings.html#std:setting-EMAIL_SUBJECT_PREFIX" target="_blank" rel="noopener"><code>EMAIL_SUBJECT_PREFIX</code></a> 配置项的值做为邮件标题的前缀，默认情况下是 <code>&quot;[Django] &quot;</code> 。</p><h3 id="mail-managers"><a href="#mail-managers" class="headerlink" title="mail_managers()"></a>mail_managers()</h3><p>mail_managers`(<em>subject</em>, <em>message</em>, <em>fail_silently=False</em>, <em>connection=None</em>, <em>html_message=None</em>)</p><p>mail_managers<code>(*subject*, *message*, *fail_silently=False*, *connection=None*, *html_message=None*)</code>django.core.mail.mail_managers()<code>is just like</code>mail_admins()<code>，不同之处在于该方法的邮件接收人是网站负责人(manager)， 可以在 [</code>MANAGERS`]配置项设置网站负责人</p><h4 id="EmailMessage-对象"><a href="#EmailMessage-对象" class="headerlink" title="EmailMessage 对象"></a>EmailMessage 对象</h4><ul><li><em>class </em><code>EmailMessage</code></li></ul><p><a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.EmailMessage" target="_blank" rel="noopener"><code>EmailMessage</code></a> 类使用下列参数初始化（除非使用位置参数，否则默认顺序如下）。所有参数均可选，均可在调用 <code>send()</code>方法之前的任何时间对其赋值。</p><p>加入了 <code>cc</code> 参数（cc是抄送）</p><ul><li><p><code>subject</code>: 邮件的标题行</p></li><li><p><code>body</code>: 邮件的主体内容文本，须是纯文本信息。</p></li><li><p><code>from_email</code>: 发送者的地址。 <a href="mailto:`fred@example.com" target="_blank" rel="noopener">`fred@example.com</a><code>或</code>Fred <a href="mailto:&#102;&#x72;&#101;&#x64;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;" target="_blank" rel="noopener">&#102;&#x72;&#101;&#x64;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a><code>格式都是合法的。如果忽略该参数，Django就会使用 [</code>DEFAULT_FROM_EMAIL`](<a href="https://django-chinese-docs-14.readthedocs.io/en/latest/ref/settings.html#std:setting-DEFAULT_FROM_EMAIL" target="_blank" rel="noopener">https://django-chinese-docs-14.readthedocs.io/en/latest/ref/settings.html#std:setting-DEFAULT_FROM_EMAIL</a>) 配置项。</p></li><li><p><code>to</code>: 收件人地址列表或元组。</p></li><li><p><code>bcc</code>: 发送邮件时用于”Bcc”头信息的一组列表或元组，也就是暗送的收件人。</p></li><li><p><code>connection</code>: 一个邮件后端实例。用同一个链接发送多封邮件就要用到该参数。忽略该参数时，会在调用 <code>send()</code> 时自动创建一个新链接。</p></li><li><p><code>attachments</code>: 置于邮件报文内的附件列表。列表元素可以是　<code>email.MIMEBase.MIMEBase</code> 实例，也可以是 <code>(filename, content, mimetype)</code> 三部分构成的元组。</p></li><li><p><code>headers</code>: 置于邮件报文内的其他头信息(header)的字典。字典的key是头信息的名称，字典的value是头信息的值。 这样做能确保头信息的名称和对应值会以正确的格式保存于邮件报文中。</p></li><li><p><code>cc</code>: 发送邮件时放于”Cc”头信息的一系列列表或元组。</p><p>例如:</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">email = <span class="type">EmailMessage</span>(<span class="symbol">'Hello'</span>, <span class="symbol">'Body</span> goes here', <span class="symbol">'from</span>@example.com',</span><br><span class="line">            [<span class="symbol">'to1</span>@example.com', <span class="symbol">'to2</span>@example.com'], [<span class="symbol">'bcc</span>@example.com'],</span><br><span class="line">            headers = &#123;<span class="symbol">'Reply</span>-<span class="type">To'</span>: <span class="symbol">'another</span>@example.com'&#125;)</span><br></pre></td></tr></table></figure><p>该类方法如下:</p><ul><li><p><code>send(fail_silently=False)</code> 发送邮件报文。如果在构造邮件时如果指定了某个链接(connection)，就会使用该链接发邮件。 否则，就会使用默认后端的实例发邮件。如果关键字参数 <code>fail_silently</code> 为 <code>True</code> ，就会忽略邮件发送时抛出的异常。</p></li><li><p><code>message()</code> 构造了一个 <code>django.core.mail.SafeMIMEText</code> 对象 (Python的 <code>email.MIMEText.MIMEText</code> 类的子类) 或是 <code>django.core.mail.SafeMIMEMultipart</code> 对象（该对象保存即将发送出去邮件报文）。如需扩展 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.EmailMessage" target="_blank" rel="noopener"><code>EmailMessage</code></a>类，一般情况下要覆写该方法，将你所需的内容添加到MIME对象中。</p></li><li><p><code>recipients()</code> 返回邮件中所有收件人的列表，不管收件人是在 <code>to</code> 还是 <code>bcc</code> 属性中。这是另一个经常被继承覆写的方法， 因为SMTP服务器在发送邮件报文时，要接收完整的收件人列表。即使你自己的类使用其他方式来指定收件人，也仍然需要使用该方法返回收件人列表。</p></li><li><p><code>attach()</code> 创建一个新的文件附件，并把它添加到邮件报文中。 有两种方法调用 <code>attach()</code>:</p><ul><li><p>传递一个单独的 <code>email.MIMEBase.MIMEBase</code> 实例做为参数。该实例会直接添加到最终的邮件报文中。</p></li><li><p>或者，给 <code>attach()</code> 传递三个参数: <code>filename</code>, <code>content</code> 和 <code>mimetype</code>. <code>filename</code> 是出现在邮件中的附件文件的名称， <code>content</code> 是附件的内容，而 <code>mimetype</code> 是附件所使用的MIME类型。 如果忽略 <code>mimetype</code>, Django会自动根据附件文件名来推测MIME内容类型。</p><p>例如:</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message.attach(<span class="symbol">'design</span>.png', img_data, <span class="symbol">'image</span>/png')</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>attach_file()</code> 使用当前文件系统下的某个文件做为附件。调用时，传入某个文件的完整路径，以及该附件的MIME类型(可选的)。 忽略MIME类型的话，Django会自动根据附件文件名来推测MIME类型。最简单的用法如下:</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message</span>.attach_file(<span class="string">'/images/weather_map.png'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="发送多用途邮件"><a href="#发送多用途邮件" class="headerlink" title="发送多用途邮件"></a>发送多用途邮件</h4><p>在同一封邮件中包含多种版本的内容是非常有用的；典型的例子就是发送既有纯文本版本内容又有HTML版本内容的邮件。 在Django的邮件库中，可以使用 <code>EmailMultiAlternatives</code> 类来达到该目的。 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.EmailMessage" target="_blank" rel="noopener"><code>EmailMessage</code></a> 的子类有一个<code>attach_alternative()</code> 方法用来包含其他版本的邮件主体内容。所有其他方法(包括类的初始化方法)都直接继承自 <a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.EmailMessage" target="_blank" rel="noopener"><code>EmailMessage</code></a> 。</p><p>发送一封文本/HTML混合邮件，代码如下:</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail import EmailMultiAlternatives</span><br><span class="line"></span><br><span class="line">subject, from_email, <span class="keyword">to</span> = <span class="comment">'hello', 'from@example.com', 'to@example.com'</span></span><br><span class="line">text_content = <span class="comment">'This is an important message.'</span></span><br><span class="line">html_content = <span class="comment">'<span class="doctag">&lt;p&gt;</span>This is an <span class="doctag">&lt;strong&gt;</span>important<span class="doctag">&lt;/strong&gt;</span> message.<span class="doctag">&lt;/p&gt;</span>'</span></span><br><span class="line">msg = EmailMultiAlternatives(subject, text_content, from_email, [<span class="keyword">to</span>])</span><br><span class="line">msg.attach_alternative(html_content, <span class="string">"text/html"</span>)</span><br><span class="line">msg.send()</span><br></pre></td></tr></table></figure><p>默认情况下，<a href="https://django-chinese-docs-14.readthedocs.io/en/latest/topics/email.html#django.core.mail.EmailMessage" target="_blank" rel="noopener"><code>EmailMessage</code></a> 类中的 <code>body</code> 参数的MIME类型是 <code>&quot;text/plain&quot;</code> 。 大多数情况下，没必要更改该MIME，因为这样能保证每个收件人能够阅读该邮件，而不论他们使用的是什么邮件客户端。 不过，在能确保收件人能处理多用途邮件的情况下，可以使用:class:~django.core.mail.EmailMessage 类的 <code>content_subtype</code> 属性 来更改邮件内容类型。主类型总是 <code>&quot;text&quot;</code> ，子类型可以设置为别的版本(比如html)，例如:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msg = EmailMessage(subject, html_content, from_email, [<span class="keyword">to</span>])</span><br><span class="line">msg.content_subtype = <span class="string">"html"</span>  <span class="meta"># 主内体现在变成 text/html</span></span><br><span class="line">msg.<span class="built_in">send</span>()</span><br></pre></td></tr></table></figure><h4 id="获取邮件发送后端的实例"><a href="#获取邮件发送后端的实例" class="headerlink" title="获取邮件发送后端的实例"></a>获取邮件发送后端的实例</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django.core.mail 的 get_connection() 函式返回你当前使用的邮件后端的实例。</span><br><span class="line"></span><br><span class="line">get_connection(<span class="attribute">backend</span>=None, <span class="attribute">fail_silently</span>=<span class="literal">False</span>, <span class="number">*a</span>rgs, **kwargs)</span><br></pre></td></tr></table></figure><ul><li><h4 id="SMTP-backend-–默认的后端"><a href="#SMTP-backend-–默认的后端" class="headerlink" title="SMTP backend    –默认的后端"></a>SMTP backend    –默认的后端</h4></li><li><h4 id="Console-backend"><a href="#Console-backend" class="headerlink" title="Console backend"></a>Console backend</h4></li><li><h4 id="File-backend-–该后端并不建议在生产环境下使用–它仅仅是为开发提供方便"><a href="#File-backend-–该后端并不建议在生产环境下使用–它仅仅是为开发提供方便" class="headerlink" title="File backend –该后端并不建议在生产环境下使用–它仅仅是为开发提供方便"></a>File backend –该后端并不建议在生产环境下使用–它仅仅是为开发提供方便</h4></li><li><h4 id="In-memory-backend-内存后端"><a href="#In-memory-backend-内存后端" class="headerlink" title="In-memory backend(内存后端)"></a>In-memory backend(内存后端)</h4></li><li><h4 id="Dummy-backend-空后端"><a href="#Dummy-backend-空后端" class="headerlink" title="Dummy backend(空后端)"></a>Dummy backend(空后端)</h4></li></ul><h4 id="需要在-settings-py中设置的东西"><a href="#需要在-settings-py中设置的东西" class="headerlink" title="需要在 settings.py中设置的东西:"></a>需要在 settings.py中设置的东西:</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">EMAIL_BACKEND</span> = <span class="string">'django.core.mail.backends.smtp.EmailBackend'</span></span><br><span class="line"><span class="attr">EMAIL_USE_SSL</span> = <span class="literal">True</span></span><br><span class="line"><span class="attr">EMAIL_HOST</span> = <span class="string">'smtp.gmail.com'</span></span><br><span class="line"><span class="attr">EMAIL_PORT</span> = <span class="number">587</span></span><br><span class="line"><span class="attr">EMAIL_HOST_USER</span> = <span class="string">'urusername@gmail.com'</span></span><br><span class="line"><span class="attr">EMAIL_HOST_PASSWORD</span> = <span class="string">'password'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python普通的邮件发送&quot;&gt;&lt;a href=&quot;#Python普通的邮件发送&quot; class=&quot;headerlink&quot; title=&quot;Python普通的邮件发送&quot;&gt;&lt;/a&gt;Python普通的邮件发送&lt;/h2&gt;&lt;p&gt;需要一个安全的连接，例如SSL，因此接下来我们会使用
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="flask" scheme="https://nymrli.top/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>使用Cerbot申请免费证书升级 http到https</title>
    <link href="https://nymrli.top/%E4%BD%BF%E7%94%A8Cerbot%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6%E5%8D%87%E7%BA%A7-http%E5%88%B0https.html"/>
    <id>https://nymrli.top/使用Cerbot申请免费证书升级-http到https.html</id>
    <published>2018-12-08T08:10:03.000Z</published>
    <updated>2018-12-08T08:10:18.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Cerbot-免费证书-简单-升级-http-到-https"><a href="#使用-Cerbot-免费证书-简单-升级-http-到-https" class="headerlink" title="使用 Cerbot 免费证书 简单 升级 http 到 https"></a><a href="https://www.cnblogs.com/kiscall/p/5564448.html" target="_blank" rel="noopener">使用 Cerbot 免费证书 简单 升级 http 到 https</a></h1><p>1、安装 <em>cerbot</em>:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/letsencrypt/letsencrypt</span><br><span class="line">cd letsencrypt</span><br></pre></td></tr></table></figure><p><em>要求</em>：</p><ul><li><em>Python</em> 2.7</li><li>Git环境</li><li>连接外网</li></ul><p>2、运行:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> 根据自己的需求调整代码</span><br><span class="line"><span class="string">./certbot-auto</span> certonly <span class="params">--standalone</span> <span class="params">--email</span> admin@example.com -d example.com -d www.example.com -d other.example.net</span><br></pre></td></tr></table></figure><p>成功提示:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IMPORTANT NOTES:</span><br><span class="line">Congratulations! Your certificate <span class="keyword">and</span> chain have been saved <span class="keyword">at</span>:</span><br><span class="line">   /etc/letsencrypt/live/sast.nymrli.top/fullchain.pem</span><br><span class="line">   Your key <span class="built_in">file</span> has been saved <span class="keyword">at</span>:</span><br><span class="line">   /etc/letsencrypt/live/sast.nymrli.top/privkey.pem</span><br><span class="line">   Your cert will expire <span class="keyword">on</span> <span class="number">2019</span><span class="number">-02</span><span class="number">-08.</span> To obtain a new <span class="keyword">or</span> tweaked</span><br><span class="line">   <span class="built_in">version</span> <span class="keyword">of</span> this certificate <span class="keyword">in</span> <span class="keyword">the</span> future, simply <span class="built_in">run</span> certbot-auto</span><br><span class="line">   again. To non-interactively renew *all* <span class="keyword">of</span> your certificates, <span class="built_in">run</span></span><br><span class="line">   <span class="string">"certbot-auto renew"</span></span><br><span class="line"> - If you like Certbot, please consider supporting our work <span class="keyword">by</span>:</span><br></pre></td></tr></table></figure><p>3、配置<em>Nginx</em>:</p><p>server 不再监听80端口，因为TLS要使用的是443端口，然后引入证书和key</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen <span class="number">443</span> ssl;</span><br><span class="line">    server_name sast.nymrli.top;     <span class="comment">//这里是你的域名</span></span><br><span class="line">    index index_page.html;</span><br><span class="line">    root <span class="meta-keyword">/var/</span>www/homework_submission-master/;        <span class="comment">//网站目录</span></span><br><span class="line">    ssl_certificate   <span class="meta-keyword">/etc/</span>letsencrypt<span class="meta-keyword">/live/</span>sast.nymrli.top/fullchain.pem;    <span class="comment">//前面生成的证书，改一下里面的域名就行，不建议更换路径</span></span><br><span class="line">    ssl_certificate_key <span class="meta-keyword">/etc/</span>letsencrypt<span class="meta-keyword">/live/</span>sast.nymrli.top/privkey.pem;   <span class="comment">//前面生成的密钥，改一下里面的域名就行，不建议更换路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启<em>Nginx</em>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>nginx restart</span><br></pre></td></tr></table></figure><p>OK!</p><hr><h5 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决:"></a>问题解决:</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Problem binding <span class="keyword">to</span><span class="built_in"> port </span>80: Could <span class="keyword">not</span> bind <span class="keyword">to</span> IPv4 <span class="keyword">or</span> IPv6.</span><br></pre></td></tr></table></figure><p>原因是 nginx 占用了80端口，输入<code>service nginx stop</code>。然后再次执行证书安装命令，即可顺利安装。安装完毕后，输入<code>service nginx start</code>，重启 nginx 服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用-Cerbot-免费证书-简单-升级-http-到-https&quot;&gt;&lt;a href=&quot;#使用-Cerbot-免费证书-简单-升级-http-到-https&quot; class=&quot;headerlink&quot; title=&quot;使用 Cerbot 免费证书 简单 升级 http 
      
    
    </summary>
    
    
      <category term="后端" scheme="https://nymrli.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="环境部署" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>pipenv 新款Python虚拟环境工具详解[转]</title>
    <link href="https://nymrli.top/pipenv-%E6%96%B0%E6%AC%BEPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%B7%A5%E5%85%B7%E8%AF%A6%E8%A7%A3-%E8%BD%AC.html"/>
    <id>https://nymrli.top/pipenv-新款Python虚拟环境工具详解-转.html</id>
    <published>2018-12-08T08:08:23.000Z</published>
    <updated>2018-12-08T08:08:44.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pipenv-新款Python虚拟环境工具详解-转"><a href="#pipenv-新款Python虚拟环境工具详解-转" class="headerlink" title="pipenv 新款Python虚拟环境工具详解[转]"></a>pipenv 新款Python虚拟环境工具详解[转]</h1><p>pipenv是requests库作者Kenneth Reitz编写的一个用于创建和管理Python虚拟环境的工具。</p><p>Pipenv是Python官方机构推荐的Python包工具。</p><p>我们知道，为了管理Python虚拟环境，通常用得比较多的是virtualenv和pyenv。但是有人觉得它们还不够好用，不够偷懒。这个人是谁，就是上面的那位。于是他开发了一个pipenv，结合了pip及virtualenv的功能和优点，集成出了pipenv这个工具。其目的是替代virtualenv和pyenv，将pip及virtualenv的功能集于一身。</p><h2 id="一、安装pipenv"><a href="#一、安装pipenv" class="headerlink" title="一、安装pipenv"></a>一、安装pipenv</h2><p>windows下很简单：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pipenv</span><br></pre></td></tr></table></figure><p>Linux下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip <span class="keyword">install</span> pipenv</span><br></pre></td></tr></table></figure><p>在苹果操作系统下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>pipenv</span><br></pre></td></tr></table></figure><p>也就是说，无法用pip管理的包，pipenv同样无法使用。</p><p>pipenv依赖：psutil, virtualenv-clone, pew, certifi, urllib3, chardet, requests, mccabe, pyflakes, pycodestyle, flake8等第三方模块。</p><p>pipenv有很漂亮的彩色终端界面。</p><h2 id="二、简单使用"><a href="#二、简单使用" class="headerlink" title="二、简单使用"></a>二、简单使用</h2><p>进入你的Python项目文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your_project</span><br><span class="line">pipenv install</span><br></pre></td></tr></table></figure><p>windows操作系统中，虚拟环境创建过程如下：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">D:<span class="string">\test\test_pipenv&gt;pipenv</span> install</span><br><span class="line">Creating a virtualenv <span class="keyword">for</span> <span class="keyword">this</span> project…</span><br><span class="line">Using base prefix <span class="string">'c:\\python36'</span></span><br><span class="line">New python executable <span class="keyword">in</span> C:<span class="string">\Users\Administrator\.virtualenvs\test_pipenv-XHxuOsj</span></span><br><span class="line">n<span class="string">\Scripts\python.exe</span></span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br><span class="line"></span><br><span class="line">Virtualenv location: C:<span class="string">\Users\Administrator\.virtualenvs\test_pipenv-XHxuOsjn</span></span><br><span class="line">Creating a Pipfile <span class="keyword">for</span> <span class="keyword">this</span> project…</span><br><span class="line">Pipfile.lock <span class="keyword">not</span> found, creating…</span><br><span class="line">Locking [dev-packages] dependencies…</span><br><span class="line">Locking [packages] dependencies…</span><br><span class="line">Updated Pipfile.lock (c23e27)!</span><br><span class="line">Installing dependencies <span class="keyword">from</span> Pipfile.lock (c23e27)…</span><br><span class="line">  ================================ <span class="number">0</span>/<span class="number">0</span> - <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">To activate <span class="keyword">this</span> project<span class="string">'s virtualenv, run the following:</span></span><br><span class="line"><span class="string"> $ pipenv shell</span></span><br></pre></td></tr></table></figure><p>如果你给命令添加–two或–three参数，它将分别使用Python2或3来初始化你的虚拟环境，否则将使用默认的Python版本。</p><p>注意：pipenv默认把虚拟环境的真实文件全都放在了<code>C:\Users\Administrator\.virtualenvs\test_pipenv-XHxuOsjn\Scripts\python.exe</code>中，而在实际的项目文件夹内只创建了两个新文件Pipfile和Pipfile.lock。这可能造成C盘存有大量的文件，不是个好的做法。（但好像无法修改这一路径….）</p><p>看一下Pipfile中的内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[[source]]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">url</span> = <span class="string">"https://pypi.python.org/simple"</span></span><br><span class="line"><span class="attr">verify_ssl</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"pypi"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[packages]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[dev-packages]</span></span><br></pre></td></tr></table></figure><p>最关键的是定义了安装第三方库使用的源，默认为官方的pypi。</p><p>而Pipfile.lock文件内容呢？</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_meta"</span>: &#123;</span><br><span class="line">        <span class="attr">"hash"</span>: &#123;</span><br><span class="line">            <span class="attr">"sha256"</span>: <span class="string">"5f0257fe8c7a73db1c8de519faa92c658282a01087eb2bfafba7962704c23e27"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"host-environment-markers"</span>: &#123;</span><br><span class="line">            <span class="attr">"implementation_name"</span>: <span class="string">"cpython"</span>,</span><br><span class="line">            <span class="attr">"implementation_version"</span>: <span class="string">"3.6.4"</span>,</span><br><span class="line">            <span class="attr">"os_name"</span>: <span class="string">"nt"</span>,</span><br><span class="line">            <span class="attr">"platform_machine"</span>: <span class="string">"AMD64"</span>,</span><br><span class="line">            <span class="attr">"platform_python_implementation"</span>: <span class="string">"CPython"</span>,</span><br><span class="line">            <span class="attr">"platform_release"</span>: <span class="string">"7"</span>,</span><br><span class="line">            <span class="attr">"platform_system"</span>: <span class="string">"Windows"</span>,</span><br><span class="line">            <span class="attr">"platform_version"</span>: <span class="string">"6.1.7601"</span>,</span><br><span class="line">            <span class="attr">"python_full_version"</span>: <span class="string">"3.6.4"</span>,</span><br><span class="line">            <span class="attr">"python_version"</span>: <span class="string">"3.6"</span>,</span><br><span class="line">            <span class="attr">"sys_platform"</span>: <span class="string">"win32"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"pipfile-spec"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"requires"</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">"sources"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"pypi"</span>,</span><br><span class="line">                <span class="attr">"url"</span>: <span class="string">"https://pypi.python.org/simple"</span>,</span><br><span class="line">                <span class="attr">"verify_ssl"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"default"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"develop"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始情况下，文件里只包含一些操作系统的基本信息。</p><p>Pipfile和Pipfile.lock两个文件互相配合，完成虚拟环境的管理工作。</p><h2 id="三、安装第三方模块"><a href="#三、安装第三方模块" class="headerlink" title="三、安装第三方模块"></a>三、安装第三方模块</h2><p>Pipfile包含关于项目的依赖包的信息，并取代通常在Python项目中使用的requirements.txt文件。 如果你在具有requirements.txt文件的项目中启动了Pipenv，则在把它从项目中删除之前，应该使用Pipenv安装该requirements中列出的所有依赖包。</p><p>使用pipenv创建虚拟环境后，<strong>进入pipfile所在目录</strong>，使用install命令安装第三方库。 例如：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">install</span> django</span><br></pre></td></tr></table></figure><p>这个时候，你其实把pipenv当作pip来使用。无需像virtualenv那样需要额外的先启动虚拟环境。pipenv区分你是在给哪个虚拟环境工作，依赖的是Pipfile文件的位置。</p><p>要卸载某个第三方库：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pipenv</span> uninstall beautifulsoup4</span><br></pre></td></tr></table></figure><h2 id="四、冻结Pipfile"><a href="#四、冻结Pipfile" class="headerlink" title="四、冻结Pipfile"></a>四、冻结Pipfile</h2><p>冻结就相当于将项目所使用的第三方库列表进行打包输出，类似于virtualenv中生成requirements.txt文件。</p><p>通过更新Pipfile.lock来冻结库名称及其版本，以及其依赖关系的列表。需要使用lock参数：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">lock</span></span><br></pre></td></tr></table></figure><p>如果另一个用户拷贝了你的项目，他们只需要安装Pipenv，然后：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">install</span></span><br></pre></td></tr></table></figure><p>Pipenv会在项目文件夹下自动寻找Pipfile和Pipfile.lock文件，创建一个新的虚拟环境并安装必要的软件包。</p><p>也就是说pipenv install的时候有三种逻辑：</p><ul><li>如果目录下没有Pipfile和Pipfile.lock文件，表示创建一个新的虚拟环境；</li><li>如果有，表示使用已有的Pipfile和Pipfile.lock文件中的配置创建一个虚拟环境；</li><li>如果后面带诸如django这一类库名，表示为当前虚拟环境安装第三方库。</li></ul><h2 id="五、管理开发环境"><a href="#五、管理开发环境" class="headerlink" title="五、管理开发环境"></a>五、管理开发环境</h2><p>通常有一些Python包只在你的开发环境中需要，而不是在生产环境中，例如单元测试包。 Pipenv使用–dev标志区分两个环境。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">install</span> <span class="comment">--dev django</span></span><br></pre></td></tr></table></figure><p>django库现在将只在开发虚拟环境中使用。如果你要在你的生产环境中安装你的项目：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">install</span></span><br></pre></td></tr></table></figure><p>这不会安装django包。</p><p>但是，如果有一个开发人员将你的项目克隆到自己的开发环境中，他们可以使用–dev标志，将django也安装：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">install</span> <span class="comment">--dev</span></span><br></pre></td></tr></table></figure><p>也就是说一个–dev参数，帮你在同一个虚拟环境中又区分出了开发和非开发环境。</p><h2 id="六、在虚拟环境中运行命令"><a href="#六、在虚拟环境中运行命令" class="headerlink" title="六、在虚拟环境中运行命令"></a>六、在虚拟环境中运行命令</h2><p>使用run参数，提供要运行的命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">run</span><span class="bash"> python manage.py runserver</span></span><br></pre></td></tr></table></figure><p>这将使用当前虚拟环境关联的Python解释器，执行命令。</p><p>或者简单的执行脚本：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">run</span><span class="bash"> python your_script.py</span></span><br></pre></td></tr></table></figure><p>如果你不想每次运行Python时都输入这么多字符，可以在shell中设置一个别名，例如，</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alias</span> <span class="title">prp</span>=<span class="string">"pipenv run python"</span></span><br></pre></td></tr></table></figure><h2 id="七、pipenv选项解释"><a href="#七、pipenv选项解释" class="headerlink" title="七、pipenv选项解释"></a>七、pipenv选项解释</h2><p>pipenv 具有下列的选项：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv</span><br><span class="line">Usage: pipenv [OPTIONS] COMMAND [ARGS]...</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -<span class="ruby">-update         更新Pipenv &amp; pip</span></span><br><span class="line"><span class="ruby">  --where          显示项目文件所在路径</span></span><br><span class="line"><span class="ruby">  --venv           显示虚拟环境实际文件所在路径</span></span><br><span class="line"><span class="ruby">  --py             显示虚拟环境Python解释器所在路径</span></span><br><span class="line"><span class="ruby">  --envs           显示虚拟环境的选项变量</span></span><br><span class="line"><span class="ruby">  --rm             删除虚拟环境</span></span><br><span class="line"><span class="ruby">  --bare           最小化输出</span></span><br><span class="line"><span class="ruby">  --completion     完整输出</span></span><br><span class="line"><span class="ruby">  --man            显示帮助页面</span></span><br><span class="line"><span class="ruby">  --three / --two  使用Python <span class="number">3</span>/<span class="number">2</span>创建虚拟环境（注意本机已安装的Python版本）</span></span><br><span class="line"><span class="ruby">  --python TEXT    指定某个Python版本作为虚拟环境的安装源</span></span><br><span class="line"><span class="ruby">  --site-packages  附带安装原Python解释器中的第三方库</span></span><br><span class="line"><span class="ruby">  --jumbotron      不知道啥玩意....</span></span><br><span class="line"><span class="ruby">  --version        版本信息</span></span><br><span class="line"><span class="ruby">  -h, --help       帮助信息</span></span><br></pre></td></tr></table></figure><p>pipenv 可使用的命令参数：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Commands:</span><br><span class="line"> <span class="built_in"> check </span>     检查安全漏洞</span><br><span class="line">  graph      显示当前依赖关系图信息</span><br><span class="line">  install    安装虚拟环境或者第三方库</span><br><span class="line">  lock       锁定并生成Pipfile.lock文件</span><br><span class="line">  open       在编辑器中查看一个库</span><br><span class="line">  run        在虚拟环境中运行命令</span><br><span class="line">  shell      进入虚拟环境</span><br><span class="line">  uninstall  卸载一个库</span><br><span class="line">  update     卸载当前所有的包，并安装它们的最新版本</span><br></pre></td></tr></table></figure><p>一些使用例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Usage Examples:</span><br><span class="line">   使用Python 3.6创建虚拟环境:</span><br><span class="line">   $ pipenv <span class="comment">--python 3.6</span></span><br><span class="line"></span><br><span class="line">   安装包括开发环境中的第三方库:</span><br><span class="line">   $ pipenv <span class="keyword">install</span> <span class="comment">--dev</span></span><br><span class="line"></span><br><span class="line">   锁定pipfile:</span><br><span class="line">   $ pipenv <span class="keyword">lock</span> <span class="comment">--pre</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">Install</span> a <span class="keyword">local</span> setup.py <span class="keyword">into</span> your <span class="keyword">virtual</span> environment/Pipfile:</span><br><span class="line">   $ pipenv <span class="keyword">install</span> -e .</span><br></pre></td></tr></table></figure><h2 id="八、一些使用过程展示"><a href="#八、一些使用过程展示" class="headerlink" title="八、一些使用过程展示"></a>八、一些使用过程展示</h2><p>定位项目路径:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv --where</span><br><span class="line"><span class="regexp">/Users/</span>kennethreitz<span class="regexp">/Library/</span>Mobile Documents<span class="regexp">/com~apple~CloudDocs/</span>repos<span class="regexp">/kr/</span>pipenv<span class="regexp">/test</span></span><br></pre></td></tr></table></figure><p>定位虚拟环境</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv --venv</span><br><span class="line"><span class="regexp">/Users/</span>kennethreitz<span class="regexp">/.local/</span>share<span class="regexp">/virtualenvs/</span>test-Skyy4vre</span><br></pre></td></tr></table></figure><p>定位Python解释器：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv --py</span><br><span class="line"><span class="regexp">/Users/</span>kennethreitz<span class="regexp">/.local/</span>share<span class="regexp">/virtualenvs/</span>test-Skyy4vre<span class="regexp">/bin/</span>python</span><br></pre></td></tr></table></figure><p>安装包：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv <span class="keyword">install</span></span><br><span class="line">Creating a virtualenv <span class="keyword">for</span> this project...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">No</span> <span class="keyword">package</span> provided, installing all dependencies.</span><br><span class="line">Virtualenv location: /<span class="keyword">Users</span>/kennethreitz/.local/<span class="keyword">share</span>/virtualenvs/<span class="keyword">test</span>-EJkjoYts</span><br><span class="line">Installing dependencies <span class="keyword">from</span> Pipfile.lock...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> <span class="keyword">activate</span> this <span class="keyword">project</span><span class="string">'s virtualenv, run the following:</span></span><br><span class="line"><span class="string">$ pipenv shell</span></span><br></pre></td></tr></table></figure><p>安装一个开发环境中才使用的包：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install pytest <span class="params">--dev</span></span><br><span class="line">Installing pytest.<span class="string">..</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">Adding pytest to Pipfile's [dev-packages]<span class="string">...</span></span><br></pre></td></tr></table></figure><p>显示依赖关系：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv graph</span><br><span class="line">requests==<span class="number">2.18</span><span class="number">.4</span></span><br><span class="line">  - certifi [<span class="string">required:</span> &gt;=<span class="number">2017.4</span><span class="number">.17</span>, <span class="string">installed:</span> <span class="number">2017.7</span><span class="number">.27</span><span class="number">.1</span>]</span><br><span class="line">  - chardet [<span class="string">required:</span> &gt;=<span class="number">3.0</span><span class="number">.2</span>,&lt;<span class="number">3.1</span><span class="number">.0</span>, <span class="string">installed:</span> <span class="number">3.0</span><span class="number">.4</span>]</span><br><span class="line">  - idna [<span class="string">required:</span> &gt;=<span class="number">2.5</span>,&lt;<span class="number">2.7</span>, <span class="string">installed:</span> <span class="number">2.6</span>]</span><br><span class="line">  - urllib3 [<span class="string">required:</span> &lt;<span class="number">1.23</span>,&gt;=<span class="number">1.21</span><span class="number">.1</span>, <span class="string">installed:</span> <span class="number">1.22</span>]</span><br></pre></td></tr></table></figure><p>生成lock文件:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv lock</span><br><span class="line">Assuring all dependencies <span class="keyword">from</span> Pipfile are installed<span class="built_in">..</span>.</span><br><span class="line">Locking [dev-packages] dependencies<span class="built_in">..</span>.</span><br><span class="line">Locking [packages] dependencies<span class="built_in">..</span>.</span><br><span class="line">Note: your project now has only<span class="built_in"> default </span>[packages] installed.</span><br><span class="line"><span class="keyword">To</span> install [dev-packages], run: $ pipenv install --dev</span><br></pre></td></tr></table></figure><p>安装开发环境依赖：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv <span class="keyword">install</span> <span class="comment">--dev</span></span><br><span class="line">Pipfile <span class="keyword">found</span> <span class="keyword">at</span> /<span class="keyword">Users</span>/kennethreitz/repos/kr/pip2/<span class="keyword">test</span>/Pipfile. Considering this <span class="keyword">to</span> be the <span class="keyword">project</span> home.</span><br><span class="line">Pipfile.lock <span class="keyword">out</span> <span class="keyword">of</span> <span class="built_in">date</span>, updating...</span><br><span class="line">Assuring all dependencies <span class="keyword">from</span> Pipfile <span class="keyword">are</span> installed...</span><br><span class="line">Locking [dev-packages] dependencies...</span><br><span class="line">Locking [packages] dependencies...</span><br></pre></td></tr></table></figure><p>卸载所有的包：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv <span class="keyword">uninstall</span> <span class="comment">--all</span></span><br><span class="line"><span class="keyword">No</span> <span class="keyword">package</span> provided, un-installing all dependencies.</span><br><span class="line"><span class="keyword">Found</span> <span class="number">25</span> installed <span class="keyword">package</span>(s), purging...</span><br><span class="line">...</span><br><span class="line">Environment <span class="keyword">now</span> purged <span class="keyword">and</span> <span class="keyword">fresh</span>!</span><br></pre></td></tr></table></figure><p>使用虚拟环境的shell。exit退出：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv shell</span><br><span class="line">Loading .env environment variables…</span><br><span class="line">Launching subshell <span class="keyword">in</span> <span class="keyword">virtual</span> environment. <span class="keyword">Type</span> <span class="string">'exit'</span> <span class="keyword">or</span> <span class="string">'Ctrl+D'</span> <span class="keyword">to</span> return.</span><br></pre></td></tr></table></figure><p>本文来自刘江的博客和教程网站<a href="http://www.liujiangblog.com/blog/" target="_blank" rel="noopener">http://www.liujiangblog.com/blog/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pipenv-新款Python虚拟环境工具详解-转&quot;&gt;&lt;a href=&quot;#pipenv-新款Python虚拟环境工具详解-转&quot; class=&quot;headerlink&quot; title=&quot;pipenv 新款Python虚拟环境工具详解[转]&quot;&gt;&lt;/a&gt;pipenv 新款P
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>#ifdef、#ifndef、#endif</title>
    <link href="https://nymrli.top/ifdef%E3%80%81-ifndef%E3%80%81-endif.html"/>
    <id>https://nymrli.top/ifdef、-ifndef、-endif.html</id>
    <published>2018-12-08T08:07:37.000Z</published>
    <updated>2018-12-08T08:08:08.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ifdef、-ifndef、-endif使用说明"><a href="#ifdef、-ifndef、-endif使用说明" class="headerlink" title="#ifdef、#ifndef、#endif使用说明"></a>#ifdef、#ifndef、#endif使用说明</h1><h3 id="目的-防止头文件重复include"><a href="#目的-防止头文件重复include" class="headerlink" title="目的:防止头文件重复include"></a>目的:防止头文件重复include</h3><h4 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明:"></a>示例说明:</h4><h5 id="a-h"><a href="#a-h" class="headerlink" title="a.h"></a>a.h</h5><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"b.h"</span></span></span><br></pre></td></tr></table></figure><h5 id="b-h"><a href="#b-h" class="headerlink" title="b.h"></a>b.h</h5><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"a.h"</span></span></span><br></pre></td></tr></table></figure><h5 id="c-c"><a href="#c-c" class="headerlink" title="c.c"></a>c.c</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"a.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"b.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你程序是这样写的话，编译器就会出现Error #include nested too deeply的错误。<br>因为这里 b.h 和 a.h 都互相include，c.c文件在include的时候重复include了a.h，我们希望c.c文件中执行#include “b.h”的时候 b.h 能进行判断，如果没有#include “a.h”则include，如果已经include了，则不再重复定义。</p><p>可以将<strong>b.h</strong>修改为：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _A_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _A_H </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"a.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>原因是: &gt; <code>c.c</code>中先include了<code>a.h</code>文件，其中<code>a.h</code>中又包括了<code>b.h</code>，所以会定义宏<code>_A_H</code>，当<code>c,c</code>中又include<code>b,h</code>时判断<code>_A_H</code>是否已经被定义了,如果被定义了,则不再include<code>a.h</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ifdef、-ifndef、-endif使用说明&quot;&gt;&lt;a href=&quot;#ifdef、-ifndef、-endif使用说明&quot; class=&quot;headerlink&quot; title=&quot;#ifdef、#ifndef、#endif使用说明&quot;&gt;&lt;/a&gt;#ifdef、#ifnde
      
    
    </summary>
    
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>小程序——高德地图API调用</title>
    <link href="https://nymrli.top/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEAPI%E8%B0%83%E7%94%A8.html"/>
    <id>https://nymrli.top/小程序——高德地图API调用.html</id>
    <published>2018-12-06T09:11:14.000Z</published>
    <updated>2018-12-06T12:47:07.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小程序——高德地图API调用"><a href="#小程序——高德地图API调用" class="headerlink" title="小程序——高德地图API调用"></a>小程序——高德地图API调用</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>将压缩包解压至使用的小程序目录下，创建libs文件夹，包含<code>amap-wx.js</code></p><p><img src="/hexo\source\_posts\小程序——高德地图API调用\1.jpg" alt="1"></p><h3 id="导入使用"><a href="#导入使用" class="headerlink" title="导入使用"></a>导入使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> amapFile = <span class="built_in">require</span>(<span class="string">'..­/../../../libs/amap-wx.js'</span>);</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    src: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> myAmapFun = <span class="keyword">new</span> amapFile.AMapWX(&#123; <span class="attr">key</span>: <span class="string">"dbb8be907441c2650218bdfd78848cf6"</span> &#125;);</span><br><span class="line">    wx.getSystemInfo(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;<span class="comment">//获得手机屏幕的高度宽度</span></span><br><span class="line">        <span class="keyword">var</span> height = data.windowHeight;</span><br><span class="line">        <span class="keyword">var</span> width = data.windowWidth;</span><br><span class="line">        <span class="keyword">var</span> size = width + <span class="string">"*"</span> + height;</span><br><span class="line">        myAmapFun.getStaticmap(&#123;</span><br><span class="line">          location: <span class="string">"118.9301,32.109"</span>,<span class="comment">//地图中心</span></span><br><span class="line">          zoom: <span class="number">15</span>,<span class="comment">//缩放比例</span></span><br><span class="line">          size: size,<span class="comment">//尺寸大小</span></span><br><span class="line">          scale: <span class="number">2</span>,<span class="comment">//像素,普通图、高清图</span></span><br><span class="line">          markers: <span class="comment">//标记</span></span><br><span class="line"> <span class="string">"large,0xFF0000,A:118.9301,32.109|mid,0xFF0000,B:118.9301,32.110"</span>,</span><br><span class="line">          success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            that.setData(&#123;</span><br><span class="line">              src: data.url</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">          fail: <span class="function"><span class="keyword">function</span> (<span class="params">info</span>) </span>&#123;</span><br><span class="line">            wx.showModal(&#123; <span class="attr">title</span>: info.errMsg &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  onPullDownRefresh: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  onReachBottom: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="API使用说明"><a href="#API使用说明" class="headerlink" title="API使用说明"></a>API使用说明</h3><table><thead><tr><th>参数名称</th><th>含义</th><th>规则说明</th><th>是否必填</th><th>默认值</th></tr></thead><tbody><tr><td>key</td><td>用户唯一标识</td><td>用户在高德地图官网申请</td><td>必填</td><td>无</td></tr><tr><td>location</td><td>地图中心点</td><td>中心点坐标。规则：经度和纬度用”,”分隔 经纬度小数点后不得超过6位。</td><td>部分条件必填</td><td>无</td></tr><tr><td>zoom</td><td>地图级别</td><td>地图缩放级别:[1,17]</td><td>可选</td><td>无</td></tr><tr><td>size</td><td>地图大小</td><td>图片宽度<em>图片高度。最大值为1024</em>1024</td><td>可选</td><td>400*400</td></tr><tr><td>scale</td><td>普通/高清</td><td>1:返回普通图；2:调用高清图，图片高度和宽度都增加一倍，zoom也增加一倍（当zoom为最大值时，zoom不再改变）。</td><td>可选</td><td>1</td></tr><tr><td>markers</td><td>标注</td><td>使用规则见markers详细说明，标注最大数10个</td><td>可选</td><td>无</td></tr><tr><td>labels</td><td>标签</td><td>使用规则见labels详细说明，标签最大数10个</td><td>可选</td><td>无</td></tr><tr><td>paths</td><td>折线</td><td>使用规则见paths详细说明，折线和多边形最大数4个</td><td>可选</td><td>无</td></tr><tr><td>traffic</td><td>交通路况标识</td><td>底图是否展现实时路况。 可选值： 0，不展现；1，展现。</td><td>可选</td><td>0</td></tr><tr><td>sig</td><td>数字签名</td><td>数字签名认证用户必填</td><td>可选</td><td>无</td></tr></tbody></table><h4 id="markers"><a href="#markers" class="headerlink" title="markers:"></a>markers:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">markers:<span class="string">"large,0xFF0000,A:118.9301,32.109|mid,0xFF0000,B:118.9301,32.110"</span>,</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">markers:<span class="string">"large,0xFF0000,A:118.9301,32.109;B:118.9301,32.110"</span>,</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名称</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>size</td><td>可选值： small,mid,large</td><td>small</td></tr><tr><td>color</td><td>选值范围：[0x000000, 0xffffff]例如：0x000000 black,0x008000 green,0x800080 purple,0xFFFF00 yellow,0x0000FF blue,0x808080 gray,0xffa500 orange,0xFF0000 red,0xFFFFFF white</td><td>0xFC6054</td></tr><tr><td>label</td><td>[0-9]、[A-Z]、[单个中文字] 当size为small时，图片不展现标注名。</td><td>无</td></tr></tbody></table><p><code>label，font ,bold, fontSize，fontColor，background</code></p><h5 id="自定义markersStyle-1，url，0。"><a href="#自定义markersStyle-1，url，0。" class="headerlink" title="自定义markersStyle:  -1，url，0。"></a>自定义markersStyle:  -1，url，0。</h5><p>-1表示为自定义图片，URL为图片的网址。自定义图片只支持<strong>PNG</strong>格式。</p><p><code>https://restapi.amap.com/v3/staticmap?markers=-1,http://ico.ooopic.com/ajax/iconpng/?id=158688.png,0:116.37359,39.92437&amp;key=您的key</code></p><h4 id="labels"><a href="#labels" class="headerlink" title="labels"></a>labels</h4><p><code>labels=labelsStyle1:location1;location2|labelsStyle2:location3;location4..|labelsStyleN:locationN;locationM</code></p><p><em>labelsStyle</em>：<code>label, font, bold, fontSize, fontColor, backgroun</code>d。 各参数使用”,”分隔，如有默认值则可为空。</p><table><thead><tr><th>参数名称</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>content</td><td>标签内容，字符最大数目为15</td><td>无</td></tr><tr><td>font</td><td>0：微软雅黑；1：宋体；2：Times New Roman;3：Helvetica</td><td>0</td></tr><tr><td>bold</td><td>0：非粗体；1：粗体</td><td>0</td></tr><tr><td>fontSize</td><td>字体大小，可选值[1,72]</td><td>10</td></tr><tr><td>fontColor</td><td>字体颜色，取值范围：[0x000000, 0xffffff]</td><td>0xFFFFFF</td></tr><tr><td>background</td><td>背景色，取值范围：[0x000000, 0xffffff]</td><td>0x5288d8</td></tr></tbody></table><h4 id="paths"><a href="#paths" class="headerlink" title="paths"></a>paths</h4><p><code>paths=pathsStyle1:location1;location2..|pathsStyle2:location3;location4..|pathsStyleN:locationN;locationM..</code></p><blockquote><p> ▲.LocationN :  <code>118.9301,32.109</code>先经度后维度</p></blockquote><p><em>pathsStyle</em>：<code>weight, color, transparency, fillcolor, fillTransparency</code></p><table><thead><tr><th>参数名称</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>weight</td><td>线条粗细。可选值： [2,15]</td><td>5</td></tr><tr><td>color</td><td>折线颜色。 选值范围：[0x000000, 0xffffff]例如：0x000000 black,0x008000 green,0x800080 purple,0xFFFF00 yellow,0x0000FF blue,0x808080 gray,0xffa500 orange,0xFF0000 red,0xFFFFFF white</td><td>0x0000FF</td></tr><tr><td>transparency</td><td>透明度。可选值[0,1]，小数后最多2位，0表示完全透明，1表示完全不透明。</td><td>1</td></tr><tr><td>fillcolor</td><td>多边形的填充颜色，<strong>此值不为空时折线封闭成多边形</strong>。取值规则同color</td><td>无</td></tr><tr><td>fillTransparency</td><td>填充面透明度。可选值[0,1]，小数后最多2位，0表示完全透明，1表示完全不透明。</td><td>0.5</td></tr></tbody></table><p>折线示例:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paths: '10,0x<span class="number">0000</span>ff,1,,:116.<span class="number">3160</span>4,39.<span class="number">9649</span>1;116.<span class="number">320816</span>,39.<span class="number">966606</span>;116.<span class="number">321785</span>,39.<span class="number">966827</span>;116.<span class="number">3236</span>1,39.<span class="number">966957</span>',</span><br></pre></td></tr></table></figure><p>区域示例:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">paths</span>: "10,0<span class="selector-tag">x0000ff</span>,0<span class="selector-class">.1</span>,0<span class="selector-tag">x0000ff</span>,0<span class="selector-class">.7</span><span class="selector-pseudo">:116.31604</span>,39<span class="selector-class">.96491</span>;116<span class="selector-class">.320816</span>,39<span class="selector-class">.966606</span>;116<span class="selector-class">.321785</span>,39<span class="selector-class">.966827</span>;116<span class="selector-class">.32361</span>,39<span class="selector-class">.966957</span>;116<span class="selector-class">.39361</span>,39<span class="selector-class">.966957</span>;116<span class="selector-class">.39361</span>,39<span class="selector-class">.936957</span>",</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;小程序——高德地图API调用&quot;&gt;&lt;a href=&quot;#小程序——高德地图API调用&quot; class=&quot;headerlink&quot; title=&quot;小程序——高德地图API调用&quot;&gt;&lt;/a&gt;小程序——高德地图API调用&lt;/h2&gt;&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://nymrli.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="https://nymrli.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
</feed>
