<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>果粒橙的博客</title>
  
  <subtitle>别装作很努力，因为结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2019-01-19T12:53:26.486Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>果粒橙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DFS专项练习</title>
    <link href="https://nymrli.top/2019/01/19/DFS%E4%B8%93%E9%A1%B9%E7%BB%83%E4%B9%A0/"/>
    <id>https://nymrli.top/2019/01/19/DFS专项练习/</id>
    <published>2019-01-19T12:53:03.000Z</published>
    <updated>2019-01-19T12:53:26.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DFS专题"><a href="#DFS专题" class="headerlink" title="DFS专题"></a>DFS专题</h1><h3 id="leetcode-104-二叉树的最大深度"><a href="#leetcode-104-二叉树的最大深度" class="headerlink" title="leetcode 104. 二叉树的最大深度"></a>leetcode 104. 二叉树的最大深度</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l1=maxDepth(root-&gt;left);</span><br><span class="line">        <span class="keyword">int</span> l2=maxDepth(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> max(l1,l2)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="DFS模板总结"><a href="#DFS模板总结" class="headerlink" title="DFS模板总结"></a>DFS模板总结</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span><span class="comment">//参数用来表示状态  &#123;  </span></span></span><br><span class="line"><span class="function">    <span class="title">if</span><span class="params">(到达终点状态)</span>  </span>&#123;  </span><br><span class="line">        ...<span class="comment">//根据题意添加  </span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(越界或者是不合法状态)  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    <span class="keyword">if</span>(特殊状态)<span class="comment">//剪枝</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(扩展方式)  &#123;  </span><br><span class="line">        <span class="keyword">if</span>(扩展方式所达到状态合法)  </span><br><span class="line">        &#123;  </span><br><span class="line">            修改操作;<span class="comment">//根据题意来添加  </span></span><br><span class="line">            标记；  </span><br><span class="line">            dfs（）；  </span><br><span class="line">            (还原标记)；  <span class="comment">// visited[i] = 1;</span></span><br><span class="line">            <span class="comment">//是否还原标记根据题意  </span></span><br><span class="line">            <span class="comment">//如果加上（还原标记）就是 回溯法  </span></span><br><span class="line">            <span class="comment">// visited[i] = 0</span></span><br><span class="line">        &#125;  </span><br><span class="line"> </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全排列问题"><a href="#全排列问题" class="headerlink" title="全排列问题"></a>全排列问题</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> p[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x==n+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[i]==<span class="literal">false</span>  )</span><br><span class="line">&#123;</span><br><span class="line">p[x] = i;</span><br><span class="line">vis[i] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">dfs(x+<span class="number">1</span>);</span><br><span class="line">vis[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="number">4</span>;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DFS专题&quot;&gt;&lt;a href=&quot;#DFS专题&quot; class=&quot;headerlink&quot; title=&quot;DFS专题&quot;&gt;&lt;/a&gt;DFS专题&lt;/h1&gt;&lt;h3 id=&quot;leetcode-104-二叉树的最大深度&quot;&gt;&lt;a href=&quot;#leetcode-104-二叉树的最大深
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://nymrli.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Typora可选选项</title>
    <link href="https://nymrli.top/2019/01/19/Typora%E5%8F%AF%E9%80%89%E9%80%89%E9%A1%B9/"/>
    <id>https://nymrli.top/2019/01/19/Typora可选选项/</id>
    <published>2019-01-19T12:51:11.000Z</published>
    <updated>2019-01-19T12:52:14.319Z</updated>
    
    <content type="html"><![CDATA[<p>用了这么久<em>markdown</em>才发现原来支持Latex的符号公式，但是在Typera中需要自行设置出来，<code>文件--&gt;偏好设置--&gt;markdown拓展语法（内联公式）、代码块（显示行号）</code></p><ul><li>Latex 公式：$\frac{3}{2}​$</li><li>带有行号的代码块</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他功能自行发现吧！^_^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用了这么久&lt;em&gt;markdown&lt;/em&gt;才发现原来支持Latex的符号公式，但是在Typera中需要自行设置出来，&lt;code&gt;文件--&amp;gt;偏好设置--&amp;gt;markdown拓展语法（内联公式）、代码块（显示行号）&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Latex
      
    
    </summary>
    
    
      <category term="计算机基础知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Latex学习</title>
    <link href="https://nymrli.top/2019/01/19/Latex%E5%AD%A6%E4%B9%A0/"/>
    <id>https://nymrli.top/2019/01/19/Latex学习/</id>
    <published>2019-01-19T12:49:31.000Z</published>
    <updated>2019-01-19T12:51:45.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念和使用"><a href="#基本概念和使用" class="headerlink" title="基本概念和使用"></a>基本概念和使用</h1><h4 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello, world!"></a>Hello, world!</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">&#123;article&#125;</span></span></span><br><span class="line"><span class="comment">%这里是导言区</span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line">Hello, world!</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure><h5 id="请注意，TeX-对控制序列的大小写是敏感的"><a href="#请注意，TeX-对控制序列的大小写是敏感的" class="headerlink" title="请注意，TeX 对控制序列的大小写是敏感的"></a><strong>请注意，TeX 对控制序列的大小写是敏感的</strong></h5><h5 id="部分控制序列还有被方括号-包括的可选参数。"><a href="#部分控制序列还有被方括号-包括的可选参数。" class="headerlink" title="部分控制序列还有被方括号[]包括的可选参数。"></a>部分控制序列还有被方括号<code>[]</code>包括的可选参数。</h5><p>出现了控制序列 <code>begin</code>，这个控制序列总是与 <code>end</code> 成对出现。这两个控制序列以及他们中间的内容被称为「环境」；他们之后的第一个必要参数总是<strong>一致的</strong>，被称为环境名。</p><p>只有在 “document” 环境中的内容，才会被正常输出到文档中去或是作为控制序列对文档产生影响。也就是说，在 <code>\end{document}</code> 之后插入任何内容都是无效的。</p><p><code>\begin{document}</code> 与 <code>\documentclass{article}</code> 之间的部分被称为导言区。导言区中的控制序列，通常会影响到整个输出文档。</p><h4 id="输出中文"><a href="#输出中文" class="headerlink" title="输出中文"></a>输出中文</h4><p>使用命令行输入<code>texworks</code>打开tex编辑器</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">[UTF8]</span><span class="string">&#123;ctexart&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line">你好，world!</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure><ol><li>文档类从 <code>article</code> 变为 <code>ctexart</code>；</li><li>增加了文档类选项 <code>UTF8</code>。</li></ol><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">[UTF8]</span><span class="string">&#123;ctexart&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">title</span><span class="string">&#123;你好，world!&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">author</span><span class="string">&#123;Liam&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">date</span><span class="string">&#123;\today&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">maketitle</span></span></span><br><span class="line">你好，world!</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h3 id="中文问题"><a href="#中文问题" class="headerlink" title="中文问题"></a>中文问题</h3><p>面对中文编码问题，CJK被淘汰，<strong>使用ctexart编译中文</strong></p><p>▲注意，编译方式必须改为<strong>xeLaTex</strong>，只有部分环境下 pdfLaTex 也可以编译成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">您可以看到，说明你编译成功了！</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h3 id="标准文类"><a href="#标准文类" class="headerlink" title="标准文类"></a>标准文类</h3><ul><li>article：短文，评论，学术论文；无左右页区分，无章设置。对应中文类ctexart。</li><li>book：著作，学位论文；默认有左右页区分，章起右页。对应中文类ctexbook。</li><li>report：商业，科技，试验报告，默认无左右页区分，章起新页。对应中文类：ctexrep。</li><li>beamer：论文陈述幻灯片；提供多种主题式样，可方便更改幻灯片的整体风格。</li></ul><h3 id="常用宏包"><a href="#常用宏包" class="headerlink" title="常用宏包"></a>常用宏包</h3><p>不是必须记住，需要用哪个现查即可，列出这些是为了浏览别人的源文件时知道人家调用了哪个宏包。 </p><ul><li>amsmath 公式环境和数学命令 </li><li>amssymb 数学符号生成命令 </li><li>array 数组和表格制作 </li><li>calc 四则运算 </li><li>caption 插图和表格标题格式设置 </li><li>fancyhdr 页眉页脚设置 </li><li>fancyvrb 抄录格式设置 </li><li>fontspec 字体选择 </li><li>geometry 版面尺寸设置 </li><li>graphicx 插图处理 </li><li>hyperref 创建超文本链接和PDF书签 </li><li>longtable 制作跨页表格 </li><li>multicol 多栏排版 </li><li>ntheorem 定理设置 </li><li>paralist 多种列表环境 </li><li>tabularx 自动设置表格列宽 </li><li>titlesec 章节标题格式设置 </li><li>titletoc 目录格式设置 </li><li>xcolor 颜色处理 </li><li>xeCJK 中日朝文字处理和字体选择</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本概念和使用&quot;&gt;&lt;a href=&quot;#基本概念和使用&quot; class=&quot;headerlink&quot; title=&quot;基本概念和使用&quot;&gt;&lt;/a&gt;基本概念和使用&lt;/h1&gt;&lt;h4 id=&quot;Hello-world&quot;&gt;&lt;a href=&quot;#Hello-world&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="Latex" scheme="https://nymrli.top/tags/Latex/"/>
    
      <category term="计算机基础知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>每日codewars</title>
    <link href="https://nymrli.top/2019/01/19/%E6%AF%8F%E6%97%A5codewars/"/>
    <id>https://nymrli.top/2019/01/19/每日codewars/</id>
    <published>2019-01-19T12:47:50.000Z</published>
    <updated>2019-01-19T14:18:50.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Codewars"><a href="#Codewars" class="headerlink" title="Codewars"></a>Codewars</h1><h2 id="12-17"><a href="#12-17" class="headerlink" title="12.17"></a>12.17</h2><h3 id="Sum-without-highest-and-lowest-number"><a href="#Sum-without-highest-and-lowest-number" class="headerlink" title="Sum without highest and lowest number"></a>Sum without highest and lowest number</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Sum without highest and lowest number</span></span><br><span class="line"><span class="comment">    &#123; 6, 2, 1, 8, 10 &#125; =&gt; 16</span></span><br><span class="line"><span class="comment">    &#123; 1, 1, 11, 2, 3 &#125; =&gt; 6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(numbers.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(numbers.size()==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    sort(numbers.begin(),numbers.end());</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = numbers.begin()+<span class="number">1</span>;it != numbers.end()<span class="number">-1</span>;it++)</span><br><span class="line">        sum += *it;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; n;</span><br><span class="line">    n.push_back(<span class="number">1</span>);</span><br><span class="line">    n.push_back(<span class="number">3</span>);</span><br><span class="line">    n.push_back(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-11支持的新特性"><a href="#C-11支持的新特性" class="headerlink" title="C++11支持的新特性"></a>C++11支持的新特性</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="comment">// 支持了vector &#123;&#125;的初始化方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : a) <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line"><span class="comment">//支持了for(:)</span></span><br></pre></td></tr></table></figure><h2 id="12-19"><a href="#12-19" class="headerlink" title="12.19"></a>12.19</h2><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p><a href="https://www.codewars.com/kata/5715eaedb436cf5606000381" target="_blank" rel="noopener">Sum of positive</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">/**Hex to Decimal**/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexToDec</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> hexString)</span></span>&#123;</span><br><span class="line">    reverse(hexString.begin(),hexString.end());</span><br><span class="line">    <span class="keyword">int</span> base = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum  =<span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">bool</span> fu = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">string</span>::iterator it = hexString.begin() ; it != hexString.end() ; it++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>( *it == <span class="string">'-'</span>) &#123;fu = <span class="number">1</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>( *it &gt;= <span class="string">'A'</span> &amp;&amp; *it &lt;= <span class="string">'F'</span> ) num = *it - <span class="string">'A'</span> + <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( *it &gt;= <span class="string">'a'</span> &amp;&amp; *it &lt;= <span class="string">'f'</span> ) num = *it - <span class="string">'a'</span> + <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">else</span> num = *it - <span class="string">'1'</span> + <span class="number">1</span>;</span><br><span class="line">        sum += num * base;</span><br><span class="line">        base *= <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fu?-sum:sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//base来控制相应位数，Aa都要考虑，负数</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">string</span>::iterator it = hexString.begin() ; it != hexString.end() ; it++ )</span><br><span class="line"><span class="comment">// *it 是 char类型的</span></span><br></pre></td></tr></table></figure><h2 id="12-20"><a href="#12-20" class="headerlink" title="12.20"></a>12.20</h2><h3 id="stoi、istringstream、sscanf"><a href="#stoi、istringstream、sscanf" class="headerlink" title="stoi、istringstream、sscanf"></a>stoi、istringstream、sscanf</h3><p><a href="https://www.codewars.com/kata/57a4d500e298a7952100035d" target="_blank" rel="noopener">Hex to Decimal</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexToDec</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; hexString)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::stoi(hexString, <span class="literal">nullptr</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="comment">//return std::stoi(hexString, 0, 16);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ios&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexToDec</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> hexString)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">istringstream</span>(hexString) &gt;&gt; <span class="built_in">std</span>::hex &gt;&gt; n;</span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexToDec</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> hexString)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)strtol(hexString.c_str(), <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexToDec</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> hex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> decValue;</span><br><span class="line">    <span class="built_in">sscanf</span>(hex.c_str(), <span class="string">"%x"</span>, &amp;decValue); </span><br><span class="line">    <span class="keyword">return</span> decValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-21"><a href="#12-21" class="headerlink" title="12.21"></a>12.21</h2><h3 id="增强的for-ch-vowels"><a href="#增强的for-ch-vowels" class="headerlink" title="增强的for(ch : vowels )"></a>增强的for(ch : vowels )</h3><p><a href="https://www.codewars.com/kata/54ff3102c1bad923760001f3" target="_blank" rel="noopener">Vowel Count</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; inputStr)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num_vowels = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; vowels = &#123;<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span> &#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> it = <span class="number">0</span>; it != inputStr.size() ; it++ )</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> ch : vowels ) <span class="keyword">if</span>( ch == inputStr[it] ) num_vowels++;</span><br><span class="line">  <span class="keyword">return</span> num_vowels;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**const string&amp; inputStr**/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">string</span>::const_iterator  it = inputStr.begin() ; it != inputStr.end() ; it++) <span class="comment">// 迭代器为const_iterator，而不是iterator</span></span><br></pre></td></tr></table></figure><p>优秀解答：</p><h3 id="count-if"><a href="#count-if" class="headerlink" title="count_if"></a>count_if</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; inputStr)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> count_if(inputStr.begin(), inputStr.end(), [](<span class="keyword">const</span> <span class="keyword">char</span> ch) &#123;</span><br><span class="line">      <span class="keyword">switch</span>(ch) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">          case'e':</span><br><span class="line">          <span class="keyword">case</span>'i':</span><br><span class="line">          <span class="keyword">case</span>'o':</span><br><span class="line">          <span class="keyword">case</span><span class="string">'u'</span>:</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;&#125; </span><br><span class="line">     &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;=====&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_vowel</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (c == <span class="string">'a'</span> || c == <span class="string">'e'</span> || c == <span class="string">'i'</span> || c == <span class="string">'o'</span> || c == <span class="string">'u'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; inputStr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> count_if(inputStr.begin(), inputStr.end(), is_vowel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-22"><a href="#12-22" class="headerlink" title="12.22"></a>12.22</h2><h3 id="for-each和C11的匿名函数"><a href="#for-each和C11的匿名函数" class="headerlink" title="for_each和C11的匿名函数"></a>for_each和C11的匿名函数</h3><p><a href="https://www.codewars.com/kata/5899dc03bc95b1bf1b0000ad" target="_blank" rel="noopener">Invert values</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**Invert values**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; invert(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values)&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line">    for_each(values.begin(),values.end(),[ &amp;v2](<span class="keyword">int</span> c)&#123; v2.push_back(-c); &#125;);</span><br><span class="line">    <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 学会使用了 for_each和C11的匿名函数</span></span><br></pre></td></tr></table></figure><p><a href="http://www.cnblogs.com/pzhfei/archive/2013/01/14/lambda_expression.html" target="_blank" rel="noopener">匿名函数</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Codewars&quot;&gt;&lt;a href=&quot;#Codewars&quot; class=&quot;headerlink&quot; title=&quot;Codewars&quot;&gt;&lt;/a&gt;Codewars&lt;/h1&gt;&lt;h2 id=&quot;12-17&quot;&gt;&lt;a href=&quot;#12-17&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://nymrli.top/tags/Algorithm/"/>
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>12-27 Team Leader</title>
    <link href="https://nymrli.top/2019/01/19/12-27-Team-Leader/"/>
    <id>https://nymrli.top/2019/01/19/12-27-Team-Leader/</id>
    <published>2019-01-19T12:40:37.000Z</published>
    <updated>2019-01-19T12:46:52.114Z</updated>
    
    <content type="html"><![CDATA[<p><strong>How Is An Excellent Team Leader</strong></p><ul><li><p>A couple of days ago, my friend and I took part in a science and technology competition which was completed by a team of four. Usually, The person who can come up with the best idea is the caption, leading or so-called principal. For the reason, I was the principal of the team which consists of the same teammates last time. And this time, someone came up with a better idea, so the principal changed and not me. I’m not saying that changing is bad, or that I’m unsatisfied with it that I didn’t continue to play such an important role. At the beginning, everything is ok and everyone is full of fighting spirit. We have more than 30 days to finish this work, but actually the workload is only about 6 days at most. As a team that has completed several works together, we still keep the excellent habit of meeting and discussing regularly. Maybe it isn’t as important as the last one, or maybe the division is so clear that nothing has to be discussed always. Everyone has his work, and takes responsibility to his own job, so it seems very easy to solve the project. In fact, we spent lots of time laughing and talking together and fussing around trifles, instead of really discussing the problem. There was nothing wrong at that time.</p></li><li><p>The problem occurred three days before the start of the evaluation. Everyone had finished his own work and waited to consolidate the modules and summarize all the work. This is a good proposal, but if fact, two people are debugging the code, while the other two people are working at their own job, can this be called discussion or teamwork? It’s natural to do with their own things if they have finished what they should do. However, what makes me angry is that we are both up to my ears in work while the others who are free feel nothing to do with himself. We hoped they could come to our aid, but they even didn’t understand what was wrong and not to mention what to do. To sum up, there was a communication problem which reflected in the form of failing to cope with work’s distribution. I have said just now that the division is very clear and easy. There were four people in the competition team, but the work was divided into three modules: SCM, machine learning, and Web services. So it’s enough for three people to do this and we felt easy and relaxed also. Nobody complained about there was somebody doing nothing. But maybe when it comes to the principal, the condition is different. First of all, as a team leader, he may be criticized if he doesn’t do anything. This is still a small matter. The most important thing is efficiency. What really pissed me off that night was that the summary didn’t end from 8:30 p.m. to 11:00 p.m., and the biggest reason was that no one knew exactly how to tackle it. And that lies about the principal.</p></li><li><p>Although, he did a good job in the report which needs the structural diagram of the whole work and even designed the flow chart. The project needed supervision and urging, and he had completed it well. Every weekend, he tries to organize the gather everyone. Also, he gets on well with teammates and so on. It can be said he is basically qualified. However, I must pointed out that he is not a good leader by no means. First of all, he only did the things required by the competition, such as the system block diagram, but he did not manage the division of labor and summary of each of us in length. What’s more, he only organized and attended each discussion symbolically. He neither discussed the project with any purpose nor proposed any better suggestion. He organized the discussion formally for several times and seemed quite responsible. But that’s a waste of time, in my view, the biggest difference between a responsible person and no responsible person is reflected in the organization. A good organization can improve the efficiency, while a poor organization is just dispensable or even wasteful. It wasn’t as easy as I thought it would be that day. Eventually, it took us three more meetings before we actually assembled the work. During this period, I couldn’t bear to give suggestions to principal that You can do nothing, but you have to know our progress and what we are doing. ‘Of course,’ he replied. ‘that’s why I come to every discussion, just to get a sense of where you’re going,or I don’t have to come.’ I was speechless, for there seemed to be nothing wrong with it. The biggest conflict occurred the night before the game, when a module that had been available suddenly broke down. After several previous quarrels, it was difficult for me and principal to discuss together. But this is a very serious question, how to make decisions now. Do it the same as before? Or abandon all the previous modules to implement the worst solution? After I put forward the proposal of starting again as soon as possible, he finally led the people to carry out the worst plan. And this is without my knowledge.</p></li><li><p>They followed worked on worst plan all afternoon, and all looked very frustrated. I realized that they didn’t follow my plan until they said they had a problem that was a little difficult to solve. I was so angry that I called them and asked them why they didn’t do what I said. They were vague, and I called them names because I thought they could do it if they did what I told them. So, I immediately met with them, it was raining, the atmosphere was very depressed, the leader did not speak, the other two players looked very depressed. At that time, I tried not to shout at the wrong leader. and first I stressed that we could definitely make it if we continued to do it. After inspiring for a while, everyone seemed quite motivated, so I immediately lead them to try in this direction. Fortunately, we solved the problem again in less than two hours.</p></li><li><p>What I want to say is that all teams will confront with difficulties, and then there must be a strong and confident person to lead the team to a good direction, rather than thinking about how not to lose his face and take a not smart solution. Later, the principal reflected it was tight at that time, and we had some conflicts before, so he did not want to prove that he could not solve the problem. </p></li><li><p>That’s the whole story, a very verbose story. I’m not talking about how good I am at what I do. I want to emphasize that as a good leader, one must think for the team and improve the efficiency of the team fundamentally, instead of wasting everyone’s time by being formalistic. And As a leader of a team it’s important that the first thing that comes to mind is how to solve the problem better, instead of escaping from the trouble. I just want to save my face and make a bad but not wrong decision. Last but not least, full of confidence and fighting spirit, can actively lead the team to success. If you do not believe in yourself, how can you let others believe in yourself. Further, the ideal leader, in addition to giving a good direction of effort, but also can help members solve the actual problems encountered, of course, this is difficult and just the ideal situation. Because it is difficult for anyone to understand all aspects, I dare to make such a decision this time, and I am confident that I can succeed in doing so, largely because I known about the modules which everyone should be responsible for.</p></li><li><p>This is what I learned from this competition, what I understand the responsible leader should behave like.Thanks.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;How Is An Excellent Team Leader&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A couple of days ago, my friend and I took part in a science and technol
      
    
    </summary>
    
    
      <category term="English Speaking" scheme="https://nymrli.top/tags/English-Speaking/"/>
    
      <category term="生活小记" scheme="https://nymrli.top/tags/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>阿里云nginx+wsgi部署flask</title>
    <link href="https://nymrli.top/2019/01/17/%E9%98%BF%E9%87%8C%E4%BA%91nginx-wsgi%E9%83%A8%E7%BD%B2flask/"/>
    <id>https://nymrli.top/2019/01/17/阿里云nginx-wsgi部署flask/</id>
    <published>2019-01-17T13:33:14.000Z</published>
    <updated>2019-01-17T13:33:40.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="云服务器nginx-wsgi部署flask"><a href="#云服务器nginx-wsgi部署flask" class="headerlink" title="云服务器nginx+wsgi部署flask"></a>云服务器nginx+wsgi部署flask</h2><h4 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> upgrade</span><br></pre></td></tr></table></figure><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br><span class="line">sudo /etc/init.d/nginx start (start可以改成restart/stop)</span><br><span class="line"><span class="meta">#</span><span class="bash">或是sudo service nginx start</span></span><br><span class="line">然后浏览器输入服务器IP,观察是否有welcom to nginx!</span><br></pre></td></tr></table></figure><h4 id="安装py3和virtualenv"><a href="#安装py3和virtualenv" class="headerlink" title="安装py3和virtualenv"></a>安装py3和virtualenv</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install git <span class="keyword">python3</span> <span class="keyword">python3</span>-pip</span><br><span class="line">sudo pip3 install virtualenv</span><br></pre></td></tr></table></figure><h4 id="修改python版本"><a href="#修改python版本" class="headerlink" title="修改python版本:"></a>修改python版本:</h4><h5 id="法一-不建议"><a href="#法一-不建议" class="headerlink" title="法一:(不建议)"></a>法一:(不建议)</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ gedit ~/.bashrc   #gedit .bash_aliases</span><br><span class="line">在顶部加入一行alias <span class="keyword">python</span>=<span class="keyword">python3</span></span><br><span class="line">$ <span class="keyword">source</span> ~/.bashrc    #或是<span class="keyword">source</span> ~/.bash_aliases <span class="keyword">o</span></span><br><span class="line">$ <span class="keyword">python</span> --<span class="keyword">version</span></span><br><span class="line">就会发现是Python <span class="number">3.5</span>.<span class="number">2</span>啦</span><br><span class="line"></span><br><span class="line">/*<span class="built_in">or</span></span><br><span class="line">Open your .bashrc <span class="keyword">file</span> nano ~/.bashrc. Type alias <span class="keyword">python</span>=<span class="keyword">python3</span> <span class="keyword">on</span> <span class="keyword">to</span> <span class="keyword">a</span> <span class="keyword">new</span> <span class="built_in">line</span> at the top of the <span class="keyword">file</span> then save the <span class="keyword">file</span> with ctrl+<span class="keyword">o</span> <span class="built_in">and</span> <span class="keyword">close</span> the <span class="keyword">file</span> with ctrl+<span class="keyword">x</span>. Then, back at your <span class="keyword">command</span> <span class="built_in">line</span> <span class="built_in">type</span> <span class="keyword">source</span> ~/.bashrc. Now your alias should <span class="keyword">be</span> permanent.</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h5 id="Ubuntu16-04切换python3和python2"><a href="#Ubuntu16-04切换python3和python2" class="headerlink" title="Ubuntu16.04切换python3和python2"></a><a href="https://www.cnblogs.com/lin135/p/7799650.html" target="_blank" rel="noopener">Ubuntu16.04切换python3和python2</a></h5><h5 id="▲-切换Python3为默认版本：-建议"><a href="#▲-切换Python3为默认版本：-建议" class="headerlink" title="▲.切换Python3为默认版本：(建议)"></a>▲.切换<strong>Python3</strong>为默认版本：(建议)</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">update</span>-alternatives --install /usr/bin/<span class="keyword">python</span> <span class="keyword">python</span> /usr/bin/python2 <span class="number">100</span></span><br><span class="line">sudo <span class="keyword">update</span>-alternatives --install /usr/bin/<span class="keyword">python</span> <span class="keyword">python</span> /usr/bin/<span class="keyword">python3</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><p>切换<strong>Python2</strong>为默认版本：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">update</span>-alternatives <span class="comment">--config python</span></span><br></pre></td></tr></table></figure><h4 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h4><h5 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/var/www</span></span><br><span class="line">sudo virtualenv env35</span><br></pre></td></tr></table></figure><h5 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv <span class="keyword">install</span></span><br></pre></td></tr></table></figure><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install mysql-server mysql-client</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /etc/mysql/mysql.conf.d</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -p -u root</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> password <span class="keyword">for</span> root:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> use mysql；</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456'</span> WITH GRANT OPTION;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> flush privileges; </span></span><br><span class="line">最后按Ctrl + z 退出</span><br></pre></td></tr></table></figure><h4 id="安装、测试uwsgi"><a href="#安装、测试uwsgi" class="headerlink" title="安装、测试uwsgi"></a>安装、测试uwsgi</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">sudo</span> <span class="comment">pip3</span> <span class="comment">install</span> <span class="comment">uwsgi</span></span><br><span class="line"><span class="comment">uwsgi</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">http</span> <span class="comment">:8000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">module</span> <span class="comment">homework_submission</span><span class="string">.</span><span class="comment">wsgi</span></span><br></pre></td></tr></table></figure><h4 id="编辑-var-www下的uwsgi-ini"><a href="#编辑-var-www下的uwsgi-ini" class="headerlink" title="编辑/var/www下的uwsgi.ini"></a>编辑/var/www下的uwsgi.ini</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="attribute">chdir</span>=/home/apollo3d/Documents/Beidou </span><br><span class="line"><span class="attribute">wsgi-file</span>=wsgi.py</span><br><span class="line"><span class="attribute">home</span>=/home/apollo3d/Documents/env</span><br><span class="line"><span class="attribute">callable</span>=app; </span><br><span class="line"><span class="attribute">master</span>=<span class="literal">True</span></span><br><span class="line"><span class="attribute">processes</span>=10</span><br><span class="line">socket= :81</span><br><span class="line">chmod <span class="attribute">socket</span>=666</span><br><span class="line"><span class="attribute">vacuum</span>=<span class="literal">True</span></span><br><span class="line"><span class="attribute">max-requests</span>=5000</span><br><span class="line"><span class="comment">#pythonpath=/var/www/env</span></span><br></pre></td></tr></table></figure><h4 id="编辑-var-www下的nginx-conf"><a href="#编辑-var-www下的nginx-conf" class="headerlink" title="编辑/var/www下的nginx.conf"></a>编辑/var/www下的nginx.conf</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">127.0.0.1</span>;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">75M</span>;</span><br><span class="line">    <span class="attribute">location</span> /static&#123;</span><br><span class="line">    <span class="attribute">alias</span> /home/apollo3d/Documents/Beidou/static;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">include</span> uwsgi_params;</span><br><span class="line">    <span class="attribute">uwsgi_pass</span> <span class="number">127.0.0.1:81</span>;</span><br><span class="line"><span class="comment">#    uwsgi_param UWSGI_PYHOME  /home/apollo3d/Documents/Beidou/env;</span></span><br><span class="line">    <span class="attribute">uwsgi_param</span> UWSGI_SCRIPT app:app;   <span class="comment"># 启动flask的文件:Flask的实例</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编辑-var-www下的uwsgi-params"><a href="#编辑-var-www下的uwsgi-params" class="headerlink" title="编辑/var/www下的uwsgi_params"></a>编辑/var/www下的uwsgi_params</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uwsgi_param</span> QUERY_STRING <span class="variable">$query_string</span>;</span><br><span class="line"><span class="attribute">uwsgi_param</span> REQUEST_METHOD <span class="variable">$request_method</span>;</span><br><span class="line"><span class="attribute">uwsgi_param</span> CONTENT_TYPE <span class="variable">$content_type</span>;</span><br><span class="line"><span class="attribute">uwsgi_param</span> CONTENT_LENGTH <span class="variable">$content_length</span>;     </span><br><span class="line"></span><br><span class="line"><span class="attribute">uwsgi_param</span> REQUEST_URI     <span class="variable">$request_uri</span>;     </span><br><span class="line"><span class="attribute">uwsgi_param</span> PATH_INFO     <span class="variable">$document_uri</span>;     </span><br><span class="line"><span class="attribute">uwsgi_param</span> DOCUMENT_ROOT    <span class="variable">$document_root</span>;     </span><br><span class="line"><span class="attribute">uwsgi_param</span> SERVER_PROTOCOL <span class="variable">$server_protocol</span>;     </span><br><span class="line"><span class="attribute">uwsgi_param</span> REQUEST_SCHEME <span class="variable">$scheme</span>;     </span><br><span class="line"><span class="attribute">uwsgi_param</span> HTTPS     <span class="variable">$https</span> if_not_empty;     </span><br><span class="line"></span><br><span class="line"><span class="attribute">uwsgi_param</span> REMOTE_ADDR     <span class="variable">$remote_addr</span>;     </span><br><span class="line"><span class="attribute">uwsgi_param</span> REMOTE_PORT     <span class="variable">$remote_port</span>;     </span><br><span class="line"><span class="attribute">uwsgi_param</span> SERVER_PORT    <span class="variable">$server_port</span>;   </span><br><span class="line"><span class="attribute">uwsgi_param</span> SERVER_NAME    <span class="variable">$server_name</span>;</span><br></pre></td></tr></table></figure><h4 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx</span><br><span class="line">cd sites-enabled</span><br><span class="line">rm default</span><br><span class="line">ln -s /var/www/nginx.conf homework_submission</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><h4 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h4><p><code>/etc/init.d/nginx restart</code></p><h4 id="运行uwsgi"><a href="#运行uwsgi" class="headerlink" title="运行uwsgi"></a>运行uwsgi</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/var/www</span></span><br><span class="line">uwsgi <span class="params">--ini</span> uwsgi.ini</span><br></pre></td></tr></table></figure><h4 id="让uwsgi自启动"><a href="#让uwsgi自启动" class="headerlink" title="让uwsgi自启动"></a>让uwsgi自启动</h4><blockquote><p>vim /etc/rc.local(注意非虚拟环境也得安装uwsgi模块)</p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">添加下面代码:</span><br><span class="line">/usr/<span class="keyword">local</span>/bin/uwsgi <span class="comment">--ini /var/www/uwsgi.ini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="uwsgi的热启动"><a href="#uwsgi的热启动" class="headerlink" title="uwsgi的热启动"></a>uwsgi的热启动</h4><blockquote><p>在uwsgi.ini中加入</p><p><code>py-autoreload=1</code></p><p>重启一下:<code>killall -9 uwsgi</code>、<code>/usr/local/bin/uwsgi --ini /var/www/uwsgi.ini</code></p></blockquote><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>关于etc/ linit. d</strong></p><p>如果你使用过inux系统,那么你一定听说过 init. d目录,这个目录到底是干嘛的呢?它归根结底只做了一件事情,但这件事情非同小可,是为整个系统做的,因此它非常重要。init.d目录包含许多系统各种服务的启动和停止脚本</p><p><strong>关于 /etc/rc.local</strong></p><p>rc.local也是我经常使用的一个脚本,该脚本是在系统初始化级别脚本运行之后再执行的,因此可以安’, ‘地在里面添加你想在系统启动之后执行的脚本.</p><p><strong>总结</strong></p><p>Linux是灵活的,正因为它的灵活性,我们总是可以找到许多不同的办法来解决同一个问题，服务的例子就是一个很好的佐证,有了 /etc/init.d目录下的脚本,再加上 /etc/rc. local这个利器，你可以放心的确保你的服务可以完美的启动和运行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;云服务器nginx-wsgi部署flask&quot;&gt;&lt;a href=&quot;#云服务器nginx-wsgi部署flask&quot; class=&quot;headerlink&quot; title=&quot;云服务器nginx+wsgi部署flask&quot;&gt;&lt;/a&gt;云服务器nginx+wsgi部署flask&lt;/
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="环境部署" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>前端Vue框架学习</title>
    <link href="https://nymrli.top/2019/01/17/%E5%89%8D%E7%AB%AFVue%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://nymrli.top/2019/01/17/前端Vue框架学习/</id>
    <published>2019-01-17T12:47:22.000Z</published>
    <updated>2019-01-17T12:47:49.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端Vue框架学习-未完"><a href="#前端Vue框架学习-未完" class="headerlink" title="前端Vue框架学习(未完)"></a>前端Vue框架学习(未完)</h2><h5 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h5><h3 id="使用Vue的初次操作"><a href="#使用Vue的初次操作" class="headerlink" title="使用Vue的初次操作"></a>使用Vue的初次操作</h3><h5 id="创建一个Vue实例"><a href="#创建一个Vue实例" class="headerlink" title="创建一个Vue实例"></a>创建一个Vue实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Vue(&#123;<span class="comment">//初始化一个Vue对象</span></span><br><span class="line">    el: <span class="string">'#box'</span>,<span class="comment">//对象,后面跟的是选择器 el(是element缩写</span></span><br><span class="line">    data : &#123;<span class="comment">//数据成员,必须用关键字data</span></span><br><span class="line">        msg:<span class="string">'welcome'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="完整的html页面"><a href="#完整的html页面" class="headerlink" title="完整的html页面"></a>完整的html页面</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#box'</span>,</span></span><br><span class="line"><span class="undefined">            data:&#123;</span></span><br><span class="line"><span class="actionscript">                msg:<span class="string">'hello'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">        <span class="comment">&lt;!--&lt;li&gt;&lt;/li&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><h5 id="v-model一般是放在表单中-实现了双向绑定"><a href="#v-model一般是放在表单中-实现了双向绑定" class="headerlink" title="v-model一般是放在表单中,实现了双向绑定"></a><code>v-model</code>一般是放在表单中,实现了双向绑定</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如上初始化一个Vue实例</span></span><br><span class="line">&lt;div id=<span class="string">'box'</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">'text'</span> v-model=<span class="string">"msg"</span> &gt;<span class="comment">//"双向绑定",修改输入框内容,msg内容也会改变</span></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-repeat-gt-v-for-quot-变量名-in-数组-quot"><a href="#v-repeat-gt-v-for-quot-变量名-in-数组-quot" class="headerlink" title="v-repeat===&gt;v-for=&quot;变量名 in 数组&quot;"></a><code>v-repeat</code>===&gt;<code>v-for=&quot;变量名 in 数组&quot;</code></h5><blockquote><p>使用变量的话<code></code>,使用索引<code></code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*            </span></span><br><span class="line"><span class="comment">data:&#123;</span></span><br><span class="line"><span class="comment">msg:'hello',</span></span><br><span class="line"><span class="comment">array:['he','bo','ce']</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">"value in array"</span>&gt;&#123;&#123;value&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-on侦听用户事件"><a href="#v-on侦听用户事件" class="headerlink" title="v-on侦听用户事件"></a><code>v-on</code>侦听用户事件</h5><ul><li>click</li><li>mousedown</li><li>dblclick</li><li>mouseover</li><li>mouseout</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">'#box'</span>,</span><br><span class="line">            data:&#123;</span><br><span class="line">                msg:<span class="string">'hello'</span>,</span><br><span class="line">                array:[<span class="string">'he'</span>,<span class="string">'bo'</span>,<span class="string">'ce'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods :&#123;<span class="comment">//注意是methods ,  而不是method</span></span><br><span class="line">                show:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"按钮"</span> v-on:click=<span class="string">"show()"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-show=&quot;true&quot;</code></p><h4 id="Bootstrap-Vue"><a href="#Bootstrap-Vue" class="headerlink" title="Bootstrap + Vue"></a>Bootstrap + Vue</h4><blockquote><p>Bootstrap 是个 css框架，类似jqueryMoblie一样,只需要给标签加class就行了</p><ul><li>Bootstrap 需要 .css + .js ，由于依赖jqery,所以需要将jquery.js也导入</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端Vue框架学习-未完&quot;&gt;&lt;a href=&quot;#前端Vue框架学习-未完&quot; class=&quot;headerlink&quot; title=&quot;前端Vue框架学习(未完)&quot;&gt;&lt;/a&gt;前端Vue框架学习(未完)&lt;/h2&gt;&lt;h5 id=&quot;MVVM模型&quot;&gt;&lt;a href=&quot;#MVVM模
      
    
    </summary>
    
    
      <category term="前端" scheme="https://nymrli.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>git使用——从云服务器更新文件到仓库</title>
    <link href="https://nymrli.top/2019/01/17/git%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E4%BB%8E%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E6%96%B0%E6%96%87%E4%BB%B6%E5%88%B0%E4%BB%93%E5%BA%93/"/>
    <id>https://nymrli.top/2019/01/17/git使用——从云服务器更新文件到仓库/</id>
    <published>2019-01-17T12:43:43.000Z</published>
    <updated>2019-01-17T12:44:12.339Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h3 id="从云服务器更新文件到仓库"><a href="#从云服务器更新文件到仓库" class="headerlink" title="从云服务器更新文件到仓库"></a>从云服务器更新文件到仓库</h3><p>1.查看git 版本(是否安装,一般都是默认安装好了的)</p><p>2.设置github账号密码:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"you@example.com"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"Your Name"</span></span><br></pre></td></tr></table></figure><p>3.设置上传方式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global push.default simple</span><br></pre></td></tr></table></figure><ul><li><blockquote><p><strong>matching（匹配所有分支）</strong><br>matching 参数是 Git 1.x 的默认参数，也就是老的执行方式。其意是如果你执行 git push 但没有指定分支，它将 push 所有你本地的分支到远程仓库中对应匹配的分支。</p></blockquote></li><li><blockquote><p><strong>simple（匹配单个分支)</strong></p><p>simple参数是 Git 2.x 默认参数，意思是执行 git push 没有指定分支时，只有当前分支会被 push 到远程仓库。</p></blockquote></li></ul><p>4.上传需要上传的文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#git init 如果没有初始化仓库的话....(更新的话就不需要</span></span><br><span class="line">git <span class="keyword">add</span>.<span class="bash"> </span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"xxx"</span></span></span><br><span class="line"><span class="bash">git push</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    &lt;/p&gt;
&lt;h3 id=&quot;从云服务器更新文件到仓库&quot;&gt;&lt;a href=&quot;#从云服务器更新文件到仓库&quot; class=&quot;headerlink&quot; title=&quot;从云服务器更新文件到仓库&quot;&gt;&lt;/a&gt;从云服务器更新文件到仓库&lt;/h3&gt;&lt;p&gt;1.查看git 版本(是否安装,一
      
    
    </summary>
    
    
      <category term="git" scheme="https://nymrli.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实验1——线性表及多项式的运算</title>
    <link href="https://nymrli.top/2018/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C1%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%8F%8A%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E8%BF%90%E7%AE%97/"/>
    <id>https://nymrli.top/2018/12/28/数据结构实验1——线性表及多项式的运算/</id>
    <published>2018-12-28T11:42:11.000Z</published>
    <updated>2018-12-30T13:48:10.948Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链表操作"><a href="#链表操作" class="headerlink" title="链表操作"></a>链表操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Notpresent 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">ElemType elem;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">first</span>;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">&#125;SingleList;</span><br><span class="line"></span><br><span class="line">SingleList <span class="built_in">list</span>;<span class="comment">//声明全局的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(SingleList *L)</span></span>&#123;</span><br><span class="line">L-&gt;first = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Find</span><span class="params">(SingleList L,<span class="keyword">int</span> i,ElemType *x)</span></span>&#123;</span><br><span class="line">Node *p;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">0</span> || i&gt; L.n<span class="number">-1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L.first;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; ++i) p=p-&gt;link;</span><br><span class="line">*x = p-&gt;elem;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(SingleList *L,<span class="keyword">int</span> j,ElemType x)</span></span>&#123;</span><br><span class="line">Node *p,*q;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(j&lt;<span class="number">-1</span> || j&gt; L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L-&gt;first;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;j;i++) p=p-&gt;link;<span class="comment">//p==&gt;a(i-1)</span></span><br><span class="line"></span><br><span class="line">q = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">q-&gt;elem = x;</span><br><span class="line"><span class="keyword">if</span> (j&gt;<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">q-&gt;link = p-&gt;link;<span class="comment">// a(i-1)==&gt;???  ===&gt;  a(i)-&gt;???</span></span><br><span class="line">p-&gt;link = q ;<span class="comment">//a(i-1)-&gt;a(i)</span></span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">q-&gt;link = L-&gt;first;</span><br><span class="line">L-&gt;first = q;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;n++;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Delete</span><span class="params">(SingleList *L,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">Node *p,*q;</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">if</span> ( j&lt;<span class="number">0</span> || j&gt;L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line">q = L-&gt;first;</span><br><span class="line">p = L-&gt;first;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;j<span class="number">-1</span>;i++) q = q-&gt;link;<span class="comment">//q指向 a(i-1)</span></span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">0</span>)</span><br><span class="line">L-&gt;first = L-&gt;first-&gt;link;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p = q-&gt;link;<span class="comment">//此时p指向a(i)</span></span><br><span class="line">q-&gt;link = p-&gt;link;<span class="comment">//将q指向a(a+1)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">L-&gt;n -- ;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Output</span><span class="params">(SingleList L)</span></span>&#123;</span><br><span class="line">Node *p;</span><br><span class="line"><span class="keyword">if</span>(!L.n) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L.first;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;elem );</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory</span><span class="params">(SingleList *L)</span></span>&#123;</span><br><span class="line">Node *p;</span><br><span class="line"><span class="keyword">while</span>(L-&gt;first)&#123;</span><br><span class="line">p = L-&gt;first-&gt;link;  <span class="comment">//保存后继节点地址,防止断链</span></span><br><span class="line"><span class="built_in">free</span>(L-&gt;first);<span class="comment">//释放first节点所指节点的存储空间   从前往后释放</span></span><br><span class="line">L-&gt;first = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,x;</span><br><span class="line"></span><br><span class="line">Init(&amp;<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,i<span class="number">-1</span>,i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the linked list is :"</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">Delete(&amp;<span class="built_in">list</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nafter deleting the list is:"</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Find(<span class="built_in">list</span>,<span class="number">0</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nthe value is %d\n"</span>,x );</span><br><span class="line"></span><br><span class="line">Destory(&amp;<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带表头节点的单链表"><a href="#带表头节点的单链表" class="headerlink" title="带表头节点的单链表"></a>带表头节点的单链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Notpresent 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">ElemType elem;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">head</span>;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">&#125;Headlist;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(Headlist *L)</span></span>&#123;</span><br><span class="line">L-&gt;head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;head) <span class="keyword">return</span> ERROR;</span><br><span class="line">L-&gt;head-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//注意到这边没有对L-&gt;head-&gt;element作设置,因为不会用到</span></span><br><span class="line">L-&gt;n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Sort</span><span class="params">(Headlist *L)</span></span>&#123;</span><br><span class="line">Node *p=L-&gt;head,*pre=<span class="literal">NULL</span>;</span><br><span class="line">Node *r=p-&gt;link;</span><br><span class="line">p-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">p=r;<span class="comment">//r保存原来的结点顺序</span></span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">r = p-&gt;link;<span class="comment">//r继续取下一个结点</span></span><br><span class="line">pre = L-&gt;head;<span class="comment">//pre重新构造L,从头开始循环</span></span><br><span class="line"><span class="keyword">while</span>(pre-&gt;link != <span class="literal">NULL</span> &amp;&amp; pre-&gt;link-&gt;elem &lt; p-&gt;elem)  </span><br><span class="line">        <span class="comment">// 如果链表非空 且 新链表与当前结点数值比较</span></span><br><span class="line">pre = pre-&gt;link;</span><br><span class="line">        <span class="comment">//如果当前要插入的结点值大于循环中当前已排序结点,则取已排序链表下一个结点继续比较</span></span><br><span class="line">p-&gt;link = pre-&gt;link;    </span><br><span class="line">        <span class="comment">//找到p要插入的位置后,插入:若3&lt;pre=5&lt;bigger=7&lt;8,p=6,则 p=&gt;bigger</span></span><br><span class="line">pre-&gt;link = p;<span class="comment">// pre=&gt;p,插入即可</span></span><br><span class="line">p=r;<span class="comment">// p继续取下个结点依次按原来顺序循环遍历原来链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">deleleab</span><span class="params">(Headlist *L, <span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123; </span><br><span class="line">     Node *q = L-&gt;head,*p=L-&gt;head-&gt;link;  <span class="comment">// q为上一个,p为当前的</span></span><br><span class="line">     <span class="keyword">while</span>( p )</span><br><span class="line">     <span class="keyword">if</span>(p-&gt;elem &gt;= a &amp;&amp; p-&gt;elem &lt;= b)</span><br><span class="line">     &#123;</span><br><span class="line">     q-&gt;link = p-&gt;link;<span class="comment">// 1 - 2 - 3  1==&gt;3,1的指针域指向3</span></span><br><span class="line">     <span class="built_in">free</span>(p);<span class="comment">//释放2</span></span><br><span class="line">     p = q-&gt;link;<span class="comment">// 当前的指针变成3</span></span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        p = p-&gt;link;</span><br><span class="line">        q = p-&gt;link;</span><br><span class="line">     &#125;     </span><br><span class="line">     <span class="keyword">return</span> OK; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****</span></span><br><span class="line"><span class="comment">思路为: 将顺序遍历的结点不断插入为L-&gt;head-&gt;link</span></span><br><span class="line"><span class="comment">******/</span></span><br><span class="line"><span class="function">Status <span class="title">Converse</span><span class="params">(Headlist *L)</span></span>&#123;</span><br><span class="line">Node *p = <span class="literal">NULL</span>,*cur= <span class="literal">NULL</span>; </span><br><span class="line">Node *q = L-&gt;head-&gt;link;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;head &amp;&amp; L-&gt;head-&gt;link)&#123;<span class="comment">//如果表不存在或是为空,则return ERROR</span></span><br><span class="line"><span class="keyword">while</span>( q != <span class="literal">NULL</span> )<span class="comment">//q按照原来的顺序依次遍历各结点</span></span><br><span class="line">&#123;</span><br><span class="line">cur = q;<span class="comment">//cur为当前结点</span></span><br><span class="line">q = q-&gt;link;<span class="comment">//q保存下一个结点</span></span><br><span class="line">L-&gt;head-&gt;link = cur;<span class="comment">//为了不动头结点,所以头结点link始终指向当前要加的结点</span></span><br><span class="line">cur-&gt;link = p;<span class="comment">//当前的link指向上一个结点</span></span><br><span class="line">p = cur;<span class="comment">//保存上一个结点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(Headlist *L,<span class="keyword">int</span> j,ElemType x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">Node *p=<span class="literal">NULL</span>,*q=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(j&lt;<span class="number">-1</span> || j&gt; L-&gt; n<span class="number">-1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L-&gt;head;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=j;i++) p=p-&gt;link;</span><br><span class="line">    <span class="comment">// 与普通链表不同,这边是 &lt;= , 因为要多一个表头Node</span></span><br><span class="line">q = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">q-&gt;elem = x;</span><br><span class="line">q-&gt;link = p-&gt;link;</span><br><span class="line">p-&gt;link = q;</span><br><span class="line">L-&gt;n++;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Output</span><span class="params">(Headlist L)</span></span>&#123;</span><br><span class="line">Node *p = L.head-&gt;link;</span><br><span class="line"><span class="keyword">if</span>(!L.n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;elem );</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Destory</span><span class="params">(Headlist *L)</span></span>&#123;</span><br><span class="line">Node *p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(L-&gt;head)&#123;</span><br><span class="line">p = L-&gt;head-&gt;link; </span><br><span class="line"><span class="built_in">free</span>(L-&gt;head);</span><br><span class="line">L-&gt;head = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Delete</span><span class="params">(Headlist *L,<span class="keyword">int</span> j)</span></span>&#123;<span class="comment">//下标j</span></span><br><span class="line">Node *p = L-&gt;head,*q = L-&gt;head;<span class="comment">// q = tmp</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">if</span> ( j&lt;<span class="number">0</span> || j&gt;L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span> ;i&lt;=j<span class="number">-1</span>;i++) p = p-&gt;link;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">q-&gt;link = p-&gt;link;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Find</span><span class="params">(Headlist *L,<span class="keyword">int</span> j,ElemType *x)</span></span>&#123;</span><br><span class="line">Node *p= L-&gt;head;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> ( j&lt;<span class="number">0</span> || j&gt;L-&gt;n) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span> ;i&lt;=j;i++) p = p-&gt;link;</span><br><span class="line">*x = p-&gt;elem;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">Headlist <span class="built_in">list</span>;</span><br><span class="line">Init(&amp;<span class="built_in">list</span>);</span><br><span class="line"> Insert(&amp;<span class="built_in">list</span>,<span class="number">-1</span>,<span class="number">3</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">-1</span>,<span class="number">5</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">2</span>,<span class="number">7</span>);</span><br><span class="line">Insert(&amp;<span class="built_in">list</span>,<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the linked list is :"</span>); </span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nAfter sorted:"</span>);</span><br><span class="line">Sort(&amp;<span class="built_in">list</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nAfter Conversed:"</span>);</span><br><span class="line">Converse(&amp;<span class="built_in">list</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nAfter delete index of 0,the list is:"</span>);</span><br><span class="line">Delete(&amp;<span class="built_in">list</span>,<span class="number">0</span>);</span><br><span class="line">Output(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">Find(&amp;<span class="built_in">list</span>,<span class="number">2</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nthe index of 2:%d\n"</span>,x);</span><br><span class="line"></span><br><span class="line">Destory(&amp;<span class="built_in">list</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>带表头的链表和普通链表的区别在于:</p><ul><li>带表头链表的头结点的数据域是不设置的,真正有用的结点是L-&gt;head-&gt;link指向的结点.而普通链表L-&gt;first指向的结点</li><li>这样的好处是不用特殊考虑是不是头结点.</li></ul></blockquote><h4 id="代码实现细节"><a href="#代码实现细节" class="headerlink" title="代码实现细节:"></a>代码实现细节:</h4><p>1.插入的i,是$a_{i}$后面再添加一项,所以<code>for</code>条件为<code>j=0;j&lt;i</code> 进行j次<code>link</code></p><p>2.删除时,删除的是$a_{i}$,<code>for(j=0;j &lt; i - 1;j++)</code>,为什么是 <code>i-1</code>跟代码实现有关,先把q指向要删除的前一个结点,<code>p=q-&gt;link,q-&gt;link = p-&gt;link</code>从而将<code>p</code>即$a_{i}$孤立出来</p><p>▲带表头的话,将&lt;变为&lt;=,因为要多推个link,跳过head结点</p><h4 id="设计上最大的区别在于"><a href="#设计上最大的区别在于" class="headerlink" title="设计上最大的区别在于"></a>设计上最大的区别在于</h4><p>▲多了个表头以后,就不用再考虑,删除和插入的时候去动List-&gt;first指针，带表头后，修改的都是L-&gt;head-&gt;link之后的结点Node</p><h3 id="单链表实现多项式加减、相乘"><a href="#单链表实现多项式加减、相乘" class="headerlink" title="单链表实现多项式加减、相乘"></a>单链表实现多项式加减、相乘</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Notpresent 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType ceof;</span><br><span class="line">ElemType <span class="built_in">exp</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PNode</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;PNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PNode</span> *<span class="title">head</span>;</span></span><br><span class="line">&#125;polynominal;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">p-&gt;head = (PNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">p-&gt;head-&gt;<span class="built_in">exp</span> = <span class="number">-1</span>;</span><br><span class="line">p-&gt;head-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Create</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">PNode *pn = <span class="literal">NULL</span>,*q=<span class="literal">NULL</span>,*pre=<span class="literal">NULL</span>;</span><br><span class="line">p-&gt;head = (PNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">p-&gt;head-&gt;<span class="built_in">exp</span> = <span class="number">-1</span>;</span><br><span class="line">p-&gt;head-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line">pn = (PNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ceof:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pn-&gt;ceof);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"exp:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pn-&gt;<span class="built_in">exp</span>);</span><br><span class="line"><span class="keyword">if</span> (pn-&gt;<span class="built_in">exp</span> &lt; <span class="number">0</span>) &#123;<span class="built_in">printf</span>(<span class="string">"End the input\n"</span>); <span class="keyword">break</span>;&#125;</span><br><span class="line">pre = p-&gt;head;<span class="comment">//pre从链表头开始</span></span><br><span class="line">q=p-&gt;head-&gt;link;</span><br><span class="line"><span class="keyword">while</span>(q &amp;&amp; q-&gt;<span class="built_in">exp</span> &gt; pn-&gt;<span class="built_in">exp</span>)&#123;<span class="comment">//pn为当前结点,q为链表中结点</span></span><br><span class="line">pre = q;<span class="comment">//</span></span><br><span class="line">q = q-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line">pn-&gt;link = q;</span><br><span class="line">        <span class="comment">// 在pre和q之间插入pn,(q为null时,相当于末尾插入pn)</span></span><br><span class="line">pre-&gt;link = pn;<span class="comment">// pre =&gt; pn =&gt; q</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Sort</span><span class="params">(polynominal *L)</span></span>&#123;<span class="comment">//从大到小</span></span><br><span class="line">PNode *p=L-&gt;head,*pre=<span class="literal">NULL</span>;</span><br><span class="line">PNode *r=p-&gt;link;</span><br><span class="line">p-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">p=r;<span class="comment">//r保存原来的结点顺序</span></span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">r = p-&gt;link;<span class="comment">//r继续取下一个结点</span></span><br><span class="line">pre = L-&gt;head;<span class="comment">//pre重新构造L,从头开始循环</span></span><br><span class="line"><span class="keyword">while</span>(pre-&gt;link != <span class="literal">NULL</span> &amp;&amp; pre-&gt;link-&gt;<span class="built_in">exp</span> &lt; p-&gt;<span class="built_in">exp</span>)  </span><br><span class="line">            <span class="comment">// 如果链表非空 且 新链表与当前结点数值比较</span></span><br><span class="line">pre = pre-&gt;link;</span><br><span class="line">        <span class="comment">//如果当前要插入的结点值大于循环中当前已排序结点,则取已排序链表下一个结点继续比较</span></span><br><span class="line">p-&gt;link = pre-&gt;link;    </span><br><span class="line">        <span class="comment">//找到p要插入的位置后,插入:若3&lt;pre=5&lt;bigger=7&lt;8,p=6,则 p=&gt;bigger</span></span><br><span class="line">pre-&gt;link = p;<span class="comment">// pre=&gt;p,插入即可</span></span><br><span class="line">p=r;<span class="comment">// p继续取下个结点依次按原来顺序循环遍历原来链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Add</span><span class="params">(polynominal *px,polynominal *qx)</span></span>&#123;<span class="comment">//目的:将q改成p+q</span></span><br><span class="line">PNode *q1=qx-&gt;head, *p=px-&gt;head-&gt;link;<span class="comment">//q1指向qx表头结点</span></span><br><span class="line">PNode *q=q1-&gt;link;<span class="comment">//p指向多项式px第一个结点,q指向qx第一个</span></span><br><span class="line">PNode *temp = <span class="literal">NULL</span>;<span class="comment">//q1是q前驱</span></span><br><span class="line"><span class="keyword">while</span>( q &amp;&amp; p)&#123;</span><br><span class="line"><span class="keyword">while</span>( p-&gt;<span class="built_in">exp</span> &lt; q-&gt;<span class="built_in">exp</span> )&#123;<span class="comment">//找到qx中 大于等于q指数项的项,q不断右移</span></span><br><span class="line">q1 = q;</span><br><span class="line">q = q-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;<span class="built_in">exp</span> == q-&gt;<span class="built_in">exp</span> )&#123;</span><br><span class="line">q-&gt;ceof = q-&gt;ceof + p-&gt;ceof;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;ceof == <span class="number">0</span>)&#123;</span><br><span class="line">q1-&gt;link = q-&gt;link;<span class="comment">//释放当前q的内存</span></span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">q = q1-&gt;link;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//p\q都右移</span></span><br><span class="line">q1 = q;<span class="comment">//q1</span></span><br><span class="line">q = q-&gt;link;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//p-&gt;exp &gt; q-&gt;exp </span></span><br><span class="line">temp = (PNode * )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">temp-&gt;ceof = p-&gt;ceof;</span><br><span class="line">temp-&gt;<span class="built_in">exp</span> = p-&gt;<span class="built_in">exp</span>;</span><br><span class="line">temp-&gt;link = q1-&gt;link;</span><br><span class="line">q1-&gt;link = temp;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">PNode *q = p-&gt;head-&gt;link;</span><br><span class="line"><span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>( q!=<span class="literal">NULL</span> )&#123;</span><br><span class="line"><span class="keyword">if</span>(q-&gt;link == <span class="literal">NULL</span>) last =<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dx^%d"</span>, q-&gt;ceof,q-&gt;<span class="built_in">exp</span>);</span><br><span class="line"><span class="keyword">if</span>(!last) <span class="built_in">printf</span>(<span class="string">"+"</span>);</span><br><span class="line">q = q-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory</span><span class="params">(polynominal *p)</span></span>&#123;</span><br><span class="line">PNode *q = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;head)&#123;</span><br><span class="line">q = p-&gt;head-&gt;link;</span><br><span class="line"><span class="built_in">free</span>(p-&gt;head);</span><br><span class="line">p-&gt;head = q;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********合并同类项*****************/</span></span><br><span class="line"><span class="comment">/***********合并即free*****************/</span></span><br><span class="line"><span class="function">Status <span class="title">unify</span><span class="params">(polynominal *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PNode *p=<span class="literal">NULL</span>;</span><br><span class="line">    PNode *q=<span class="literal">NULL</span>;</span><br><span class="line">    PNode *last=<span class="literal">NULL</span>;</span><br><span class="line">    PNode *tmp;</span><br><span class="line">    <span class="comment">//while(p-&gt;link != NULL)&#123;</span></span><br><span class="line">    <span class="keyword">for</span>(p=t-&gt;head-&gt;link;p!=<span class="literal">NULL</span>;p=p-&gt;link)&#123; <span class="comment">//选择</span></span><br><span class="line">        last = p;</span><br><span class="line">        <span class="keyword">for</span>(q=last-&gt;link; q!=<span class="literal">NULL</span> ; )&#123;  <span class="comment">//q指针向后推移指向下一结点</span></span><br><span class="line">        <span class="keyword">if</span>(q-&gt;<span class="built_in">exp</span> == p-&gt;<span class="built_in">exp</span>)&#123;<span class="comment">//相等计算</span></span><br><span class="line">            p-&gt;ceof += q-&gt;ceof;<span class="comment">//q为 滑动项</span></span><br><span class="line">            tmp = q-&gt;link;</span><br><span class="line">            last-&gt;link = q-&gt;link;     <span class="comment">//last保存上一个q   </span></span><br><span class="line">            <span class="built_in">free</span>(q);<span class="comment">// 吧q的空间释放掉</span></span><br><span class="line">            q= tmp;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        last= q;</span><br><span class="line">        q=q-&gt;link;&#125;<span class="comment">//如果不相等就判断下一个</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">polynominal <span class="title">Multiply</span><span class="params">(polynominal *px,polynominal *qx)</span></span>&#123;</span><br><span class="line">PNode *p = px-&gt;head;</span><br><span class="line">PNode *q = qx-&gt;head;</span><br><span class="line">PNode *x = <span class="literal">NULL</span>;</span><br><span class="line">PNode *tmp = <span class="literal">NULL</span>;</span><br><span class="line">polynominal newpoly;</span><br><span class="line">Init(&amp;newpoly);</span><br><span class="line">x = newpoly.head;</span><br><span class="line"><span class="keyword">for</span> (p=px-&gt;head-&gt;link; p!=<span class="literal">NULL</span>; p=p-&gt;link)&#123;</span><br><span class="line"><span class="keyword">for</span> (q=qx-&gt;head-&gt;link; q!=<span class="literal">NULL</span>; q=q-&gt;link)&#123;</span><br><span class="line">tmp = (PNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">tmp-&gt;ceof = p-&gt;ceof * q-&gt;ceof;</span><br><span class="line">tmp-&gt;<span class="built_in">exp</span> = p-&gt;<span class="built_in">exp</span> + q-&gt;<span class="built_in">exp</span>;</span><br><span class="line">tmp-&gt;link = x-&gt;link;<span class="comment">//新生成的结点指向上一个生成的结点的地址</span></span><br><span class="line">x-&gt;link = tmp;<span class="comment">//使链表记录当前tmp结点</span></span><br><span class="line">x = x-&gt;link;<span class="comment">//取下一个结点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">unify(&amp;newpoly);</span><br><span class="line">Sort(&amp;newpoly);</span><br><span class="line"><span class="keyword">return</span> newpoly;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">polynominal p,q;</span><br><span class="line">polynominal mul;</span><br><span class="line">Create(&amp;p);</span><br><span class="line">Output(&amp;p);</span><br><span class="line"><span class="comment">// printf("After unify:\n");Unify</span></span><br><span class="line"><span class="comment">// unify(&amp;p);</span></span><br><span class="line"><span class="comment">// Output(p);</span></span><br><span class="line">Create(&amp;q);</span><br><span class="line">Output(&amp;q);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"After Multiplied:\n"</span>);<span class="comment">//Mul</span></span><br><span class="line">mul = Multiply(&amp;p,&amp;q);</span><br><span class="line">Output(&amp;mul);</span><br><span class="line"></span><br><span class="line">Add(&amp;p,&amp;q);<span class="comment">//ADD</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"After added:"</span>);</span><br><span class="line">Output(&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;链表操作&quot;&gt;&lt;a href=&quot;#链表操作&quot; class=&quot;headerlink&quot; title=&quot;链表操作&quot;&gt;&lt;/a&gt;链表操作&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
      <category term="C" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实验2——二叉树的基本操作及哈夫曼编码译码系统的实现</title>
    <link href="https://nymrli.top/2018/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C2%E2%80%94%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E8%AF%91%E7%A0%81%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://nymrli.top/2018/12/28/数据结构实验2——二叉树的基本操作及哈夫曼编码译码系统的实现/</id>
    <published>2018-12-28T11:35:38.000Z</published>
    <updated>2018-12-28T11:40:12.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二叉树的遍历及计算"><a href="#二叉树的遍历及计算" class="headerlink" title="二叉树的遍历及计算"></a>二叉树的遍历及计算</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span></span><br><span class="line">T Data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">LChild</span>,*<span class="title">RChild</span>;</span></span><br><span class="line">&#125;BTNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">BTNode *root;</span><br><span class="line">&#125;BTTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*先序建树*/</span></span><br><span class="line"><span class="function">BTNode* <span class="title">PreCreateBt</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ch = getchar();</span><br><span class="line"><span class="keyword">if</span>( ch == <span class="string">'#'</span> ) t = <span class="literal">NULL</span>; </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">t = (BTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">t-&gt;Data = ch;</span><br><span class="line">t-&gt;LChild = PreCreateBt(t-&gt;LChild);</span><br><span class="line">t-&gt;RChild = PreCreateBt(t-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrebuildTree</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line">tree-&gt;root = PreCreateBt(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*先序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTransverse</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, t-&gt;Data);</span><br><span class="line">PreOrderTransverse(t-&gt;LChild);</span><br><span class="line">PreOrderTransverse(t-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreePreOrder</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) PreOrderTransverse(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*中序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTransverse</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">InOrderTransverse(t-&gt;LChild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, t-&gt;Data);</span><br><span class="line">InOrderTransverse(t-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeInOrder</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) InOrderTransverse(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*后序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AfterOrderTransverse</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">AfterOrderTransverse(t-&gt;LChild);</span><br><span class="line">AfterOrderTransverse(t-&gt;RChild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, t-&gt;Data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeAfterOrder</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) AfterOrderTransverse(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结点数目*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countNode</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( t != <span class="literal">NULL</span>) <span class="keyword">return</span> countNode(t-&gt;LChild)+countNode(t-&gt;RChild)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//如果t为空,则该t的父亲结点是子结点,该t结点不需要计数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Nodenum</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) <span class="keyword">return</span> countNode(tree-&gt;root);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*叶子结点数目*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countLeafNode</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( t != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>( t-&gt;LChild == <span class="literal">NULL</span> &amp;&amp; t-&gt;RChild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> countLeafNode(t-&gt;LChild)+countLeafNode(t-&gt;RChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//如果t为空,则该t的父亲结点是子结点,该t结点不需要计数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">leafNodenum</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) <span class="keyword">return</span> countLeafNode(tree-&gt;root);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*计算树的高度*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">coutTreeHeight</span><span class="params">(BTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> l = coutTreeHeight(t-&gt;LChild);</span><br><span class="line"><span class="keyword">int</span> r = coutTreeHeight(t-&gt;RChild);</span><br><span class="line"><span class="keyword">if</span> ( l &gt; r) <span class="keyword">return</span> l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> r+<span class="number">1</span>;</span><br><span class="line"><span class="comment">// return max(r,l)+1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TreeHeight</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) <span class="keyword">return</span> coutTreeHeight(tree-&gt;root);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*翻转整个二叉树(左右子树交换)*/</span></span><br><span class="line"><span class="function">BTNode* <span class="title">ReverseLeftRightChild</span><span class="params">(BTNode *t)</span></span>&#123;<span class="comment">//先序遍历</span></span><br><span class="line"> <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>( t-&gt;LChild!=<span class="literal">NULL</span> || t-&gt;RChild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">   BTNode *p,*q;</span><br><span class="line">p = ReverseLeftRightChild(t-&gt;LChild);</span><br><span class="line">q = ReverseLeftRightChild(t-&gt;RChild);</span><br><span class="line">t-&gt;LChild = q;</span><br><span class="line">t-&gt;RChild = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReverseBtree</span><span class="params">(BTTree *tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree) ReverseLeftRightChild(tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>&#123;</span><br><span class="line">BTTree tree;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"先序建树:"</span>);</span><br><span class="line">PrebuildTree(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n先序遍历:"</span>);</span><br><span class="line">TreePreOrder(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n中序遍历:"</span>);</span><br><span class="line">TreeInOrder(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n后序遍历:"</span>);</span><br><span class="line">TreeAfterOrder(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n结点数目:%d\n"</span>,Nodenum(&amp;tree));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n叶子结点数目:%d\n"</span>,leafNodenum(&amp;tree));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n树的高度:%d\n"</span>,TreeHeight(&amp;tree));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"翻转二叉树:\n"</span>);</span><br><span class="line">ReverseBtree(&amp;tree);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n后序遍历:"</span>);</span><br><span class="line">TreeAfterOrder(&amp;tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> n 5           <span class="comment">//叶子数目</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> m (2*n-1)     <span class="comment">//结点总数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxval 10000.0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100   <span class="comment">//哈夫曼编码的最大位数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"> <span class="keyword">char</span> ch;</span><br><span class="line"> <span class="keyword">float</span> weight;</span><br><span class="line"> <span class="keyword">int</span> lchild,rchild,parent;</span><br><span class="line">&#125;hufmtree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"> <span class="keyword">char</span> bits[n];   <span class="comment">//位串</span></span><br><span class="line"> <span class="keyword">int</span> start;      <span class="comment">//编码在位串中的起始位置</span></span><br><span class="line"> <span class="keyword">char</span> ch;        <span class="comment">//字符</span></span><br><span class="line">&#125;codetype;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//建立哈夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">huffman</span><span class="params">(hufmtree tree[])</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i,j,p1,p2;<span class="comment">//p1,p2分别记住每次合并时 权值最小 和 次小 的两个根结点的下标</span></span><br><span class="line">   <span class="keyword">float</span> small1,small2,f;</span><br><span class="line">   <span class="keyword">char</span> c;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;    <span class="comment">//初始化</span></span><br><span class="line">    tree[i].parent=<span class="number">0</span>;</span><br><span class="line">    tree[i].lchild=<span class="number">-1</span>;</span><br><span class="line">    tree[i].rchild=<span class="number">-1</span>;</span><br><span class="line">    tree[i].weight=<span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;        <span class="comment">//读入前n个叶子结点的字符及权值</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"输入第%d个字符为和权值:"</span>,i+<span class="number">1</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%c %f"</span>,&amp;c,&amp;f);</span><br><span class="line">      getchar();</span><br><span class="line">      tree[i].ch=c;</span><br><span class="line">      tree[i].weight=f;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">for</span>(i=n;i&lt;m;i++)&#123;               <span class="comment">//进行n-1次合并，产生n-1个新结点</span></span><br><span class="line">    p1=<span class="number">0</span>;p2=<span class="number">0</span>;</span><br><span class="line">    small1=maxval;small2=maxval;   <span class="comment">//maxval是float类型的最大值</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)               <span class="comment">//选出两个权值最小的根结点</span></span><br><span class="line">     <span class="keyword">if</span>(tree[j].parent==<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">if</span>(tree[j].weight&lt;small1)&#123;</span><br><span class="line">       small2=small1;               <span class="comment">//改变最小权、次小权及对应的位置</span></span><br><span class="line">       small1=tree[j].weight;</span><br><span class="line">       p2=p1;</span><br><span class="line">       p1=j;</span><br><span class="line">      &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(tree[j].weight&lt;small2)&#123;</span><br><span class="line">          small2=tree[j].weight;  <span class="comment">//改变次小权及位置</span></span><br><span class="line">          p2=j;</span><br><span class="line">        &#125;</span><br><span class="line">    tree[p1].parent=i;</span><br><span class="line">    tree[p2].parent=i;</span><br><span class="line">    tree[i].lchild=p1;  <span class="comment">//最小权根结点是新结点的左孩子</span></span><br><span class="line">    tree[i].rchild=p2;  <span class="comment">//次小权根结点是新结点的右孩子</span></span><br><span class="line">    tree[i].weight=tree[p1].weight+tree[p2].weight;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;<span class="comment">//huffman</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据哈夫曼树求出哈夫曼编码</span></span><br><span class="line"><span class="comment">//codetype code[]为求出的哈夫曼编码</span></span><br><span class="line"><span class="comment">//hufmtree tree[]为已知的哈夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">huffmancode</span><span class="params">(codetype code[],hufmtree tree[])</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i,c,p;               </span><br><span class="line">   codetype cd;               <span class="comment">//缓冲变量</span></span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">      cd.start=n;</span><br><span class="line">      cd.ch=tree[i].ch;</span><br><span class="line">      c=i;                      <span class="comment">//从叶结点出发向上回溯</span></span><br><span class="line">      p=tree[i].parent;         <span class="comment">//tree[p]是tree[i]的双亲</span></span><br><span class="line">      <span class="keyword">while</span>(p!=<span class="number">0</span>)&#123;</span><br><span class="line">         cd.start--;</span><br><span class="line">         <span class="keyword">if</span>(tree[p].lchild==c) cd.bits[cd.start]=<span class="string">'0'</span>;   </span><br><span class="line">         <span class="comment">//tree[i]是左子树，生成代码'0'</span></span><br><span class="line">         <span class="keyword">else</span> cd.bits[cd.start]=<span class="string">'1'</span>;   </span><br><span class="line">         <span class="comment">//tree[i]是右子树，生成代码'1'</span></span><br><span class="line">         c=p;</span><br><span class="line">         p=tree[p].parent;</span><br><span class="line">      &#125;</span><br><span class="line">      code[i]=cd;    <span class="comment">//第i+1个字符的编码存入code[i]</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;<span class="comment">//huffmancode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//哈夫曼树译码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(hufmtree tree[])</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i,j;</span><br><span class="line">   <span class="keyword">char</span> b[maxsize];</span><br><span class="line">   i=m<span class="number">-1</span>;             <span class="comment">//从根结点开始往下搜索</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"输入发送的编码(以'#'为结束标志)："</span>);</span><br><span class="line">   gets(b);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"译码后的字符为"</span>);</span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">0</span>;b[j]!=<span class="string">'#'</span>;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(b[j]==<span class="string">'0'</span>) i=tree[i].lchild;         <span class="comment">//走向左孩子</span></span><br><span class="line">      <span class="keyword">else</span> i=tree[i].rchild;                  <span class="comment">//走向右孩子</span></span><br><span class="line">      <span class="keyword">if</span>(tree[i].lchild==<span class="number">-1</span>) &#123;                <span class="comment">//tree[i]是叶结点</span></span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%c"</span>,tree[i].ch);</span><br><span class="line">       i=m<span class="number">-1</span>;                                 <span class="comment">//回到根结点</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(tree[i].lchild!=<span class="number">-1</span> &amp;&amp; b[j]!= <span class="string">'#'</span>)   <span class="comment">//电文读完，但尚未到叶子结点</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"\nERROR\n"</span>);               <span class="comment">//输入电文有错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(hufmtree tree[],codetype code[])</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i,j;<span class="comment">//循环变量</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"【哈夫曼编码】\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"总共有%d个字符\n"</span>,n);</span><br><span class="line">  huffman(tree);<span class="comment">//建立哈夫曼树</span></span><br><span class="line">  huffmancode(code,tree);<span class="comment">//根据哈夫曼树求出哈夫曼编码</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"【输出每个字符的哈夫曼编码】\n"</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c: "</span>,code[i].ch);</span><br><span class="line">  <span class="keyword">for</span>(j=code[i].start;j&lt;n;j++)</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c"</span>,code[i].bits[j]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> hufmtree tree[m];</span><br><span class="line"> codetype code[n];</span><br><span class="line"> input(tree,code);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"【哈夫曼译码】\n"</span>);</span><br><span class="line"> decode(tree);<span class="comment">//依次读入电文，根据哈夫曼树译码</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二叉树的遍历及计算&quot;&gt;&lt;a href=&quot;#二叉树的遍历及计算&quot; class=&quot;headerlink&quot; title=&quot;二叉树的遍历及计算&quot;&gt;&lt;/a&gt;二叉树的遍历及计算&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="C" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实验4——各种内排序算法的实现及性能比较</title>
    <link href="https://nymrli.top/2018/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C4%E2%80%94%E2%80%94%E5%90%84%E7%A7%8D%E5%86%85%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/"/>
    <id>https://nymrli.top/2018/12/28/数据结构实验4——各种内排序算法的实现及性能比较/</id>
    <published>2018-12-28T11:20:19.000Z</published>
    <updated>2019-01-17T12:58:35.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**生成随机数**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RandCreate</span><span class="params">(<span class="keyword">int</span> *a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        a[i] = <span class="number">1</span> + (rand()%<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***交换数组中,两个下标的值***/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    tmp = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单选择排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**简单选择排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minx,i,j;</span><br><span class="line">    <span class="keyword">for</span> (i= <span class="number">0</span>; i &lt; N<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">        minx = i;   <span class="comment">//默认标记为每次第一位元素下标</span></span><br><span class="line">        <span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; N; ++j) <span class="keyword">if</span>( l[minx] &gt; l[j] ) minx = j;</span><br><span class="line">        <span class="keyword">if</span>( minx != i) Swap(l,minx,i); <span class="comment">//判断起始位置是否为最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**直接插入排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;                                 <span class="comment">//i标识待插入元素下标</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt; N;i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> insertItem = l[i];              <span class="comment">//标记每次第一位元素</span></span><br><span class="line">        <span class="keyword">for</span>(j = i<span class="number">-1</span>;j &gt;= <span class="number">0</span>;j --)&#123;</span><br><span class="line">            <span class="comment">//不断将有序序列中元素向后移动,为待插入元素空出一个位置</span></span><br><span class="line">            <span class="keyword">if</span>(insertItem &lt; l[j]) l[j+<span class="number">1</span>] = l[j];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        l[j+<span class="number">1</span>] = insertItem;          <span class="comment">//待插入元素有序存放至有序序列中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="comment">//i标识每趟排序范围最后一个元素下标,每趟排序元素下标范围是0~i</span></span><br><span class="line">    <span class="keyword">for</span>(i = N<span class="number">-1</span>;i &gt; <span class="number">0</span>;i --)&#123;</span><br><span class="line">        <span class="keyword">int</span> isSwap = <span class="number">0</span>;         <span class="comment">//教材错误,应该放到第二层循环前</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j&lt;i;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l[j] &gt; l[j+<span class="number">1</span>])&#123;</span><br><span class="line">                Swap(l,j,j+<span class="number">1</span>);</span><br><span class="line">                isSwap = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isSwap) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//如果本趟排序没有发生元素交换,则直接可以认为排序已完成</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//序列划分方法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = low,j = high + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pivot = l[low];                 <span class="comment">//pivot是分割元素</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">do</span> i++;</span><br><span class="line">        <span class="keyword">while</span>(l[i] &lt; pivot);      <span class="comment">//i前进</span></span><br><span class="line">        <span class="keyword">do</span> j--;</span><br><span class="line">        <span class="keyword">while</span>(l[j] &gt; pivot);      <span class="comment">//j前进</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) Swap(l,i,j);</span><br><span class="line">    &#125;<span class="keyword">while</span>(i &lt; j);</span><br><span class="line">    Swap(l,low,j);</span><br><span class="line">    <span class="keyword">return</span> j;                                   <span class="comment">//此时j是分割元素下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;   <span class="comment">//快速排序的递归函数</span></span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">if</span>(low &lt; high)&#123;                            <span class="comment">//当前待排序序列至少包含2个元素</span></span><br><span class="line">        k = Partition(l,low,high);</span><br><span class="line">        QuickSort(l,low,k<span class="number">-1</span>);</span><br><span class="line">        QuickSort(l,k+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="comment">//快速排序算法的主调用函数</span></span><br><span class="line">    QuickSort(l,<span class="number">0</span>,N<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两路合并排序"><a href="#两路合并排序" class="headerlink" title="两路合并排序"></a>两路合并排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Merge函数,参考了陈慧南老师的《数据结构——C语言描述》教材</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> Temp[],<span class="keyword">int</span> i1,<span class="keyword">int</span> j1,<span class="keyword">int</span> i2,<span class="keyword">int</span> j2,<span class="keyword">int</span> *k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = i1,j = i2;</span><br><span class="line">    <span class="keyword">while</span>((i &lt;= j1)&amp;&amp;(j&lt;=j2))&#123;                       <span class="comment">//若两个子序列都不空,则循环</span></span><br><span class="line">        <span class="keyword">if</span>(l[i] &lt;= l[j])&#123;</span><br><span class="line">            Temp[(*k)++] = l[i++];         <span class="comment">//将较小元素存入Temp[*k]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> Temp[(*k)++] = l[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= j1) Temp[(*k)++] = l[i++];  <span class="comment">//将子序列1中剩余元素存入Temp</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= j2) Temp[(*k)++] = l[j++];  <span class="comment">//将子序列2中剩余元素存入Temp</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//MergeSort函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Temp[N];</span><br><span class="line">    <span class="keyword">int</span> i1,j1,i2,j2,i,k,size = <span class="number">1</span>;              </span><br><span class="line">    <span class="comment">//i1,j1和i2,j2分别是两个子序列的上,下界</span></span><br><span class="line">    <span class="keyword">while</span>(size &lt; N)&#123;</span><br><span class="line">        i1 = <span class="number">0</span>;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i1+size &lt; N)&#123;              </span><br><span class="line">            <span class="comment">//若i1+size &lt; n,则说明存在两个子序列,需要再两两合并</span></span><br><span class="line">            i2 = i1+size;                      <span class="comment">//确定子序列2的下界和子序列1的上界</span></span><br><span class="line">            j1 = i2<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i2+size<span class="number">-1</span> &gt; N<span class="number">-1</span>)&#123;         <span class="comment">//设置子序列2的上界</span></span><br><span class="line">                j2 = N<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> j2 = i2+size<span class="number">-1</span>;</span><br><span class="line">            Merge(l,Temp,i1,j1,i2,j2,&amp;k);  <span class="comment">//合并相邻两个子序列</span></span><br><span class="line">            i1 = j2+<span class="number">1</span>;                        <span class="comment">//确定下一次合并第一个子序列的下界</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; k;i ++)&#123;</span><br><span class="line">            l[i] = Temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        size *= <span class="number">2</span>;                            <span class="comment">//子序列长度扩大一倍</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">heap</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">&#125;heap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**向下调整为最大堆**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustHeap</span><span class="params">(<span class="keyword">int</span> Heap[],<span class="keyword">int</span> s,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = Heap[s];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*s+<span class="number">1</span>;j &lt;= m; j *= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; m &amp;&amp;Heap[j] &lt; Heap[j+<span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; Heap[j]) <span class="keyword">break</span>;</span><br><span class="line">        Heap[s] = Heap[j];</span><br><span class="line">        s = j;</span><br><span class="line">    &#125;</span><br><span class="line">    Heap[s] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**建堆**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHeap</span><span class="params">(<span class="keyword">int</span> *heap,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = (n<span class="number">-2</span>)/<span class="number">2</span>;i &gt;= <span class="number">0</span>;i --) AdjustHeap(heap,i,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**堆初始化**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapInit</span><span class="params">(heap *hp,<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    hp-&gt;n = n;</span><br><span class="line">    hp-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(<span class="keyword">int</span>) *n);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>;i &lt; n;i ++) hp-&gt;data[i] = a[i];</span><br><span class="line">    CreateHeap(hp-&gt;data ,N<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**堆排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(heap *hp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i=hp-&gt;n/<span class="number">2</span> ; i&gt;<span class="number">0</span> ;i--) AdjustHeap(hp-&gt;data,i,hp-&gt;n);</span><br><span class="line">    <span class="keyword">for</span>( i = hp-&gt; n<span class="number">-1</span> ;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        Swap( hp-&gt;data,<span class="number">0</span>,i);</span><br><span class="line">        AdjustHeap(hp-&gt;data,<span class="number">0</span>,i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲向下调整法====&gt; 建堆 … 给一堆数据,一次性建堆</p><p>▲向上调整法====&gt; 在已经是最小或最大堆的基础上,增加一个节点,仍保持为最大或最小堆</p><h2 id="总体代码"><a href="#总体代码" class="headerlink" title="总体代码"></a>总体代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RandCreate</span><span class="params">(<span class="keyword">int</span> *a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        a[i] = <span class="number">1</span> + (rand()%<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***交换数组中,两个下标的值***/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    tmp = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**简单选择排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minx,i,j;</span><br><span class="line">    <span class="keyword">for</span> (i= <span class="number">0</span>; i &lt; N<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">        minx = i;   <span class="comment">//默认标记为每次第一位元素下标</span></span><br><span class="line">        <span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; N; ++j) <span class="keyword">if</span>( l[minx] &gt; l[j] ) minx = j;</span><br><span class="line">        <span class="keyword">if</span>( minx != i) Swap(l,minx,i); <span class="comment">//判断起始位置是否为最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**直接插入排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;                                 <span class="comment">//i标识待插入元素下标</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt; N;i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> insertItem = l[i];              <span class="comment">//标记每次第一位元素</span></span><br><span class="line">        <span class="keyword">for</span>(j = i<span class="number">-1</span>;j &gt;= <span class="number">0</span>;j --)&#123;</span><br><span class="line">            <span class="comment">//不断将有序序列中元素向后移动,为待插入元素空出一个位置</span></span><br><span class="line">            <span class="keyword">if</span>(insertItem &lt; l[j]) l[j+<span class="number">1</span>] = l[j];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        l[j+<span class="number">1</span>] = insertItem;          <span class="comment">//待插入元素有序存放至有序序列中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**冒泡排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="comment">//i标识每趟排序范围最后一个元素下标,每趟排序元素下标范围是0~i</span></span><br><span class="line">    <span class="keyword">for</span>(i = N<span class="number">-1</span>;i &gt; <span class="number">0</span>;i --)&#123;</span><br><span class="line">        <span class="keyword">int</span> isSwap = <span class="number">0</span>;         <span class="comment">//教材错误,应该放到第二层循环前</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j&lt;i;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l[j] &gt; l[j+<span class="number">1</span>])&#123;</span><br><span class="line">                Swap(l,j,j+<span class="number">1</span>);</span><br><span class="line">                isSwap = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isSwap) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//如果本趟排序没有发生元素交换,则直接可以认为排序已完成</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**快速排序**/</span></span><br><span class="line"><span class="comment">//序列划分方法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = low,j = high + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pivot = l[low];                 <span class="comment">//pivot是分割元素</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">do</span> i++;</span><br><span class="line">        <span class="keyword">while</span>(l[i] &lt; pivot);      <span class="comment">//i前进</span></span><br><span class="line">        <span class="keyword">do</span> j--;</span><br><span class="line">        <span class="keyword">while</span>(l[j] &gt; pivot);      <span class="comment">//j前进</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) Swap(l,i,j);</span><br><span class="line">    &#125;<span class="keyword">while</span>(i &lt; j);</span><br><span class="line">    Swap(l,low,j);</span><br><span class="line">    <span class="keyword">return</span> j;                                   <span class="comment">//此时j是分割元素下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;   <span class="comment">//快速排序的递归函数</span></span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">if</span>(low &lt; high)&#123;                            <span class="comment">//当前待排序序列至少包含2个元素</span></span><br><span class="line">        k = Partition(l,low,high);</span><br><span class="line">        QuickSort(l,low,k<span class="number">-1</span>);</span><br><span class="line">        QuickSort(l,k+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="comment">//快速排序算法的主调用函数</span></span><br><span class="line">    QuickSort(l,<span class="number">0</span>,N<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**快速排序**/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**两路合并排序**/</span></span><br><span class="line"><span class="comment">//Merge函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *l,<span class="keyword">int</span> Temp[],<span class="keyword">int</span> i1,<span class="keyword">int</span> j1,<span class="keyword">int</span> i2,<span class="keyword">int</span> j2,<span class="keyword">int</span> *k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = i1,j = i2;</span><br><span class="line">    <span class="keyword">while</span>((i &lt;= j1)&amp;&amp;(j&lt;=j2))&#123;                       <span class="comment">//若两个子序列都不空,则循环</span></span><br><span class="line">        <span class="keyword">if</span>(l[i] &lt;= l[j])&#123;</span><br><span class="line">            Temp[(*k)++] = l[i++];         <span class="comment">//将较小元素存入Temp[*k]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> Temp[(*k)++] = l[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= j1) Temp[(*k)++] = l[i++];  <span class="comment">//将子序列1中剩余元素存入Temp</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= j2) Temp[(*k)++] = l[j++];  <span class="comment">//将子序列2中剩余元素存入Temp</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//MergeSort函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> *l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Temp[N];</span><br><span class="line">    <span class="keyword">int</span> i1,j1,i2,j2,i,k,size = <span class="number">1</span>;              <span class="comment">//i1,j1和i2,j2分别是两个子序列的上,下界</span></span><br><span class="line">    <span class="keyword">while</span>(size &lt; N)&#123;</span><br><span class="line">        i1 = <span class="number">0</span>;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i1+size &lt; N)&#123;              <span class="comment">//若i1+size &lt; n,则说明存在两个子序列,需要再两两合并</span></span><br><span class="line">            i2 = i1+size;                      <span class="comment">//确定子序列2的下界和子序列1的上界</span></span><br><span class="line">            j1 = i2<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i2+size<span class="number">-1</span> &gt; N<span class="number">-1</span>)&#123;         <span class="comment">//设置子序列2的上界</span></span><br><span class="line">                j2 = N<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> j2 = i2+size<span class="number">-1</span>;</span><br><span class="line">            Merge(l,Temp,i1,j1,i2,j2,&amp;k);  <span class="comment">//合并相邻两个子序列</span></span><br><span class="line">            i1 = j2+<span class="number">1</span>;                        <span class="comment">//确定下一次合并第一个子序列的下界</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; k;i ++)&#123;</span><br><span class="line">            l[i] = Temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        size *= <span class="number">2</span>;                            <span class="comment">//子序列长度扩大一倍</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**两路合并排序**/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****堆排序*****/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">heap</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">&#125;heap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**向下调整为最大堆**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustHeap</span><span class="params">(<span class="keyword">int</span> Heap[],<span class="keyword">int</span> s,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = Heap[s];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*s+<span class="number">1</span>;j &lt;= m; j *= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; m &amp;&amp;Heap[j] &lt; Heap[j+<span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; Heap[j]) <span class="keyword">break</span>;</span><br><span class="line">        Heap[s] = Heap[j];</span><br><span class="line">        s = j;</span><br><span class="line">    &#125;</span><br><span class="line">    Heap[s] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**建堆**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHeap</span><span class="params">(<span class="keyword">int</span> *heap,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = (n<span class="number">-2</span>)/<span class="number">2</span>;i &gt;= <span class="number">0</span>;i --) AdjustHeap(heap,i,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**堆初始化**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapInit</span><span class="params">(heap *hp,<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    hp-&gt;n = n;</span><br><span class="line">    hp-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(<span class="keyword">int</span>) *n);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>;i &lt; n;i ++) hp-&gt;data[i] = a[i];</span><br><span class="line">    CreateHeap(hp-&gt;data ,N<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**堆排序**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(heap *hp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i=hp-&gt;n/<span class="number">2</span> ; i&gt;<span class="number">0</span> ;i--) AdjustHeap(hp-&gt;data,i,hp-&gt;n);</span><br><span class="line">    <span class="keyword">for</span>( i = hp-&gt; n<span class="number">-1</span> ;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        Swap( hp-&gt;data,<span class="number">0</span>,i);</span><br><span class="line">        AdjustHeap(hp-&gt;data,<span class="number">0</span>,i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*****堆排序*****/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    srand(time( <span class="literal">NULL</span> ));</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">6</span>][N];</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    RandCreate(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">6</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">            a[i][j] = a[<span class="number">0</span>][j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start1 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    SelectSort(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">double</span> end1 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff1 = difftime(end1,start1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"简单选择排序时间:"</span>,diff1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start2 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    InsertSort(a[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">double</span> end2 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff2 = difftime(end2,start2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"直接插入排序时间:"</span>,diff2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start3 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    BubbleSort(a[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">double</span> end3 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff3 = difftime(end3,start3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"冒泡排序时间:"</span>,diff3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start5 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    MergeSort(a[<span class="number">4</span>]);</span><br><span class="line">    <span class="keyword">double</span> end5 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff5 = difftime(end5,start5);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"两路排序时间:"</span>,diff5);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> start4 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    QSort(a[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">double</span> end4 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff4 = difftime(end4,start4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"快速排序时间:"</span>,diff4);</span><br><span class="line"></span><br><span class="line">    heap hp;</span><br><span class="line">    heapInit(&amp;hp,a[<span class="number">5</span>],N);</span><br><span class="line">    <span class="keyword">double</span> start6 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    HeapSort(&amp;hp);</span><br><span class="line">    <span class="keyword">double</span> end6 = (<span class="keyword">double</span>) clock();</span><br><span class="line">    <span class="keyword">double</span> diff6 = difftime(end6,start6);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18s%10lf\n"</span>,<span class="string">"堆排序时间:"</span>,diff6);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="关于堆排序的理解"><a href="#关于堆排序的理解" class="headerlink" title="关于堆排序的理解"></a>关于堆排序的理解</h2><p>限选课对堆排的没有要求,但是在实验中涉及了。平时也没怎么看过堆排序，所以这次写的时候出现了理解上的错误，在此记下：</p><blockquote><p>向上和向下调整法的区别:</p><p>区别在于用途不一样，而不是 生成最小堆和最大堆的区别</p><ul><li><p>向下调整法====&gt; 建堆 … 给一堆数据,一次性建堆</p></li><li><p>向上调整法====&gt; 在已经是最小或最大堆的基础上,增加一个节点,仍保持为最大或最小堆</p></li></ul><p>具体而言：</p><p>给定一个乱序的数组，要构建最小或最大堆==&gt; 向下调整</p><p>已经是个最大或最小堆的数组,插入或删除一个元素，仍要保持最小堆 ;优先权队列===&gt; 向上调整</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最大堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustHeap</span><span class="params">(<span class="keyword">int</span> Heap[],<span class="keyword">int</span> s,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = Heap[s];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*s+<span class="number">1</span>;j &lt;= m; j *= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; m &amp;&amp;Heap[j] &lt; Heap[j+<span class="number">1</span>])&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; Heap[j])&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Heap[s] = Heap[j];</span><br><span class="line">        s = j;</span><br><span class="line">    &#125;</span><br><span class="line">    Heap[s] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区别在于<strong>第5行和第8行</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最小堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustHeap</span><span class="params">(<span class="keyword">int</span> Heap[],<span class="keyword">int</span> s,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = Heap[s];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*s+<span class="number">1</span>;j &lt;= m; j = j*<span class="number">2</span>+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; m &amp;&amp;Heap[j] &gt; Heap[j+<span class="number">1</span>])&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp &lt; Heap[j])&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Heap[s] = Heap[j];</span><br><span class="line">        s = j;</span><br><span class="line">    &#125;</span><br><span class="line">    Heap[s] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建堆的执行过程大致是: <code>CreateHeap</code>函数从下往上建，即从[s,m]==&gt;[s-1,m],在保证从s到m是最小堆后,再用向下调整法使[s-1,m]也成为堆。</p><p>向下调整的过程： 从s–&gt;m,依次调整</p><p>总的逻辑是，由于要使左子树和右子树满足要求，所以需要从下往上调整。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;部分代码&quot;&gt;&lt;a href=&quot;#部分代码&quot; class=&quot;headerlink&quot; title=&quot;部分代码&quot;&gt;&lt;/a&gt;部分代码&lt;/h2&gt;&lt;h3 id=&quot;辅助函数&quot;&gt;&lt;a href=&quot;#辅助函数&quot; class=&quot;headerlink&quot; title=&quot;辅助函数&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="C" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>南邮《信号与系统B》复习知识点大纲</title>
    <link href="https://nymrli.top/2018/12/26/%E5%8D%97%E9%82%AE%E3%80%8A%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9FB%E3%80%8B%E5%A4%8D%E4%B9%A0%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%A7%E7%BA%B2/"/>
    <id>https://nymrli.top/2018/12/26/南邮《信号与系统B》复习知识点大纲/</id>
    <published>2018-12-26T14:15:36.000Z</published>
    <updated>2018-12-28T12:08:06.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h2><p>请将图片右键另存为，保存到本地放大查看。</p><h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><p><img src="/2018/12/26/南邮《信号与系统B》复习知识点大纲/第一章.jpg" alt="信号与系统--第一章 (南邮果粒橙)"></p><hr><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><p><img src="/2018/12/26/南邮《信号与系统B》复习知识点大纲/第二章.jpg" alt="信号与系统——第二章 (南邮果粒橙)"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;友情提示&quot;&gt;&lt;a href=&quot;#友情提示&quot; class=&quot;headerlink&quot; title=&quot;友情提示&quot;&gt;&lt;/a&gt;友情提示&lt;/h2&gt;&lt;p&gt;请将图片右键另存为，保存到本地放大查看。&lt;/p&gt;
&lt;h3 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="学业" scheme="https://nymrli.top/tags/%E5%AD%A6%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>不蒜子统计阅读次数失效——Cxo主题</title>
    <link href="https://nymrli.top/2018/12/26/%E4%B8%8D%E8%92%9C%E5%AD%90%E7%BB%9F%E8%AE%A1%E9%98%85%E8%AF%BB%E6%AC%A1%E6%95%B0%E5%A4%B1%E6%95%88/"/>
    <id>https://nymrli.top/2018/12/26/不蒜子统计阅读次数失效/</id>
    <published>2018-12-26T00:57:37.000Z</published>
    <updated>2018-12-26T01:11:43.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方通知"><a href="#官方通知" class="headerlink" title="官方通知"></a>官方通知</h3><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ！！！！2018年9月 - 重要提示 ！！！！大家好，因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』！因我是最早的一批七牛用户，为七牛至少带来了数百个邀请用户，很痛心，很无奈！各位继续使用不蒜子提供的服务，只需把原有的：<span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>域名改一下即可：<span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>只需要修改该js域名，其他均未改变。若有疑问，可以加入不蒜子交流QQ群：`419260983`，对您带来的不便，非常抱歉！！！还是那句话，不蒜子不会中断服务！！！！</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a></p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>由于定位到是<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a>统计功能突然有问题了，所以前往<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子官网</a>进行查看，发现官网有一段很重要的提示：<br> <strong>“因七牛强制过期『dn-lbstatics.qbox.me』域名，与客服沟通无果，只能更换域名到『busuanzi.ibruce.info』！”</strong><br> 所以定位到问题，原来是不蒜子使用的七牛的域名被强制过期。<br> 需要把 dn-lbstatics.qbox.me 域名更换为 busuanzi.ibruce.info</p><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><h4 id="找到含busuanzi插件设置的文件"><a href="#找到含busuanzi插件设置的文件" class="headerlink" title="找到含busuanzi插件设置的文件"></a>找到含busuanzi插件设置的文件</h4><p><img src="/2018/12/26/不蒜子统计阅读次数失效/1.jpg" alt="1"></p><h4 id="修改指向的网址"><a href="#修改指向的网址" class="headerlink" title="修改指向的网址"></a>修改指向的网址</h4><p><img src="/2018/12/26/不蒜子统计阅读次数失效/2.jpg" alt="2"></p><h4 id="修改完后"><a href="#修改完后" class="headerlink" title="修改完后"></a>修改完后</h4><p><img src="/2018/12/26/不蒜子统计阅读次数失效/3.jpg" alt="3"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;官方通知&quot;&gt;&lt;a href=&quot;#官方通知&quot; class=&quot;headerlink&quot; title=&quot;官方通知&quot;&gt;&lt;/a&gt;官方通知&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu下Sublime配置python编译环境及新手使用指导</title>
    <link href="https://nymrli.top/2018/12/26/Ubuntu%E4%B8%8BSublime%E9%85%8D%E7%BD%AEpython%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E6%96%B0%E6%89%8B%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC/"/>
    <id>https://nymrli.top/2018/12/26/Ubuntu下Sublime配置python编译环境及新手使用指导/</id>
    <published>2018-12-26T00:41:18.000Z</published>
    <updated>2018-12-26T00:45:21.407Z</updated>
    
    <content type="html"><![CDATA[<p>####Sublime下配置python编译环境及搭建虚拟环境:(windows下大致相同)</p><h4 id="1-编译环境配置"><a href="#1-编译环境配置" class="headerlink" title="1.编译环境配置"></a>1.编译环境配置</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = <span class="string">'6f4c264a24d933ce70df5dedcf1dcaee'</span> + <span class="string">'ebe013ee18cced0ef93d5f746d80ef60'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="keyword">by</span> = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.<span class="built_in">replace</span>(<span class="string">' '</span>, <span class="string">'%20'</span>)).<span class="built_in">read</span>(); dh = hashlib.sha256(<span class="keyword">by</span>).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="built_in">open</span>(os.path.join( ipp, pf), <span class="string">'wb'</span> ).<span class="built_in">write</span>(<span class="keyword">by</span>)</span><br></pre></td></tr></table></figure><p>1.点击 <a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">官方网址</a> 从 Sublime Text 3 官方获取用于安装的代码。从菜单栏View –&gt;Show Console或者使用Ctrl+`(esc键下面的按键)，调出sublime的控制台，将官网中的python代码粘贴进去并按Enter执行，最终可以安装完成。在控制台中粘贴刚才的代码，然后点击回车。最后重启ST3。<br>2.现在你可以通过快捷键 cmd+shift+P 打开 Package Control 来安装其他的插件了。输入 install 然后你就能看见屏幕上出现了 Package Control: Install Package，点击回车,然后搜索sublimeREPL</p><p><img src="/2018/12/26/Ubuntu下Sublime配置python编译环境及新手使用指导/1.png" alt="1"></p><p>安装成功后，可以在菜单栏的’TOOL’中找到SublimeREPL，如图所示</p><p><img src="/2018/12/26/Ubuntu下Sublime配置python编译环境及新手使用指导/2.png" alt=""></p><h4 id="2-将菜单栏改为中文"><a href="#2-将菜单栏改为中文" class="headerlink" title="2.将菜单栏改为中文"></a>2.将菜单栏改为中文</h4><hr><p>若需要将菜单栏改成中文可如上操作下载插件“ConvertToUTF8”或是安装插件“ChineseLocalizations”(本人使用的是这个，没试ConvertToUTF8的效果)</p><p><img src="/2018/12/26/Ubuntu下Sublime配置python编译环境及新手使用指导/3.png" alt=""></p><p>(参考博客:<a href="http://blog.51cto.com/11970781/2087971" target="_blank" rel="noopener">http://blog.51cto.com/11970781/2087971</a>)</p><h4 id="3-安装Anaconda插件"><a href="#3-安装Anaconda插件" class="headerlink" title="3.安装Anaconda插件"></a>3.安装Anaconda插件</h4><hr><blockquote><p>1.点击刚刚生成的Package Control -&gt;输入install<br>2.进入安装界面，安装好后再在新窗口命令行中输入Anaconda并点击第一个备选项进行安装。 安装完成后会显示messages文档。</p></blockquote><p>安装Anaconda插件完成之后，会看到如下选项栏，说明Anaconda安装成功。</p><ul><li>Goto Definitions 能够在你的整个工程中查找并且显示任意一个变量，函数或者类的定义。</li><li>Find Usage 能够快速的查找某个变量，函数或者类在某个特定文件中的什么地方被使用了。</li><li>Show Documentation： 能够显示一个函数或者类的说明性字符串(当然，是在定义了字符串的情况下)</li></ul><p>Anaconda会自动补全代码，之前用惯了pycharm发现突然没了代码补全后很不习惯，Anaconda的补全功能虽然没有pycharm那么好用，但还是不错的<br>还有需要注意的是，安装Anaconda插件后，如果python代码没有遵循PEP8规范，会出现白色的框框，或是可以使用快捷键Ctrl+Alt+R进行规范代码(这个可以去除，步骤如下)</p><p><img src="/2018/12/26/Ubuntu下Sublime配置python编译环境及新手使用指导/4.png" alt=""></p><p>在Settings-User选项中添加配置:<code>{&quot;anaconda_linting&quot;:false}</code></p><h4 id="4-安装虚拟环境"><a href="#4-安装虚拟环境" class="headerlink" title="4.安装虚拟环境"></a>4.安装虚拟环境</h4><blockquote><p>1.首先使用终端安装virtualenv，<code>pip3 install virtualenv</code><br>2.在需要创建的地方进行虚拟环境的搭建，代码如下：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> pytest(文件夹名)</span><br><span class="line"><span class="built_in">cd</span> pytest</span><br><span class="line">virtualenv venv</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="/2018/12/26/Ubuntu下Sublime配置python编译环境及新手使用指导/5.png" alt=""></p><p>在终端进入虚拟环境的话是在pytest文件夹下输入命令<code>source /bin/activate</code><br>而要在sublime中进入虚拟环境的话就得按照如下操作：<br>１．首先在sublime中安装virtualenv插件，Ctrl + Shift + P，然后输入install,回车，然后搜索virtualenv。</p><ol start="2"><li>安装完成后，直接按Ctrl + Shift + P，再输入Activate，若没有该选项则virtualenv安装中出现问题，需要重新安装。如果有的会选择Activate就能发现刚刚创建的虚拟环境，选中后回车即可进入虚拟环境</li><li>如果Activate选中后没有出现我们刚刚创建的虚拟环境，则需要我们手动添加路径.Ctrl + Shift + P，然后输入<code>Add directory</code>，回车，屏幕下面会出现输入行（Directory path）:再将刚创建的虚拟环境路径填入即可</li></ol><p><img src="/2018/12/26/Ubuntu下Sublime配置python编译环境及新手使用指导/6.png" alt=""></p><hr><p>另外，我曾碰到过Add directory后仍然没用的情况。那时，可选择“”Project”=&gt;”Add folder to project”选择文件后=&gt;”Save Project as”==&gt;保存好即可<br>工程配置文件为：<br><code>.sublime-workspace</code>、<code>.sublime-project</code><br>其中sublime-project为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"build_systems":</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">"file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",</span><br><span class="line">"name": "Anaconda Python Builder",</span><br><span class="line">"selector": "source.python",</span><br><span class="line">"shell_cmd": "\"python\" -u \"$file\""</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">"folders":</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">"path": "爬虫"</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">"virtualenv": "G:\\pachong\\venv"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样环境就配置好了。按Ctrl+B编译时，观察”Tools”-&gt;”Build System”-&gt;是否为”Python+ Virtualenv”，如果不是，则选用这个再Ctrl+B就是在虚拟环境中编译了!</p><hr><p>ubuntu下sublime默认情况下好像不能输入中文，需要用下面命令就可以完美支持中文输入：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update &amp;&amp; sudo apt-get upgrade</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/lyfeyaj/sublime-text-imfix.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> sublime-text-imfix</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sublime-imfix</span></span><br></pre></td></tr></table></figure></p><p>转自<a href="https://blog.csdn.net/CV_YOU/article/details/77702383" target="_blank" rel="noopener">博客</a><br>截图好像有点问题，菜单栏都没有截到，用到的三个分别为“项目(Project)”，“首选项(Preferences)”，“帮助(Help)”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####Sublime下配置python编译环境及搭建虚拟环境:(windows下大致相同)&lt;/p&gt;
&lt;h4 id=&quot;1-编译环境配置&quot;&gt;&lt;a href=&quot;#1-编译环境配置&quot; class=&quot;headerlink&quot; title=&quot;1.编译环境配置&quot;&gt;&lt;/a&gt;1.编译环境配置
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>PythonWeb--flask部署内网电脑</title>
    <link href="https://nymrli.top/2018/12/21/PythonWeb-flask%E9%83%A8%E7%BD%B2%E5%86%85%E7%BD%91%E7%94%B5%E8%84%91/"/>
    <id>https://nymrli.top/2018/12/21/PythonWeb-flask部署内网电脑/</id>
    <published>2018-12-21T14:08:04.000Z</published>
    <updated>2018-12-22T04:37:07.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PythonWeb–flask部署问题"><a href="#PythonWeb–flask部署问题" class="headerlink" title="PythonWeb–flask部署问题"></a>PythonWeb–flask部署问题</h1><p>以前在云服务器上都是用<code>root</code>权限部署的,很流畅..这次用了活动室电脑是管理员权限<code>apollo3d</code>..于是出现了很大的问题….</p><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>活动室电脑的IP是通过路由器分配的IP,如<code>192.168.1.145</code>,这是一个局域网,别人是不可能通过这个IP访问到你的服务器的.（访问都是通过公网的。除非两台电脑在同一个局域网内）。</p><p>于是想到直接连活动室的网不就行了吗（如果活动室的是公网IP，只要对路由器设置个<strong>端口映射</strong>就行了），但发现，活动室的IP也是校园网分配的，已经经过了多次的NAT，于是这个方法也没用。</p><p>搜了下网上关于“<u>内网中的电脑当做服务器</u>”，找到了方案就是“<strong>内网穿透</strong>”，而能实现这个功能的软件不少如<code>花生壳</code>、<code>frp</code>…在此,我用<code>花生壳</code>达成了目的,花了6元…</p><h4 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h4><p>注册账号后会送给你一个域名，而“内网穿透”的功能是需要买的。他实现的原理大致是将动态变化的IP绑定在了这个域名上，每次IP变换的时候就重新DNS解析，所以达成了“IP跟随”</p><p><img src="/2018/12/21/PythonWeb-flask部署内网电脑/1.jpg" alt="1"></p><p>设置好后，就可以直接通过域名访问到内网下的电脑了！</p><h2 id="非root权限——管理员权限"><a href="#非root权限——管理员权限" class="headerlink" title="非root权限——管理员权限"></a>非root权限——管理员权限</h2><p>之前都是部署在<code>/var/www</code>目录下的,这次也没多想,也照样…结果踩了坑,弄了几小时.</p><p>先是<code>pip install virtualenv</code>安装了<code>virtualenv</code>库,然后用<code>virtualenv env</code>新建了个虚拟环境</p><p>但问题来了，windows下的目录结构跟linux下的有些小小的不同,导致运行<code>uwsgi</code>报错<code>No module flask</code>时一直没找到原因</p><h4 id="linux下结构"><a href="#linux下结构" class="headerlink" title="linux下结构:"></a>linux下结构:</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">-<span class="params">|env</span></span></span><br><span class="line"><span class="ruby">-----<span class="params">|lib</span></span></span><br><span class="line"><span class="ruby">-------<span class="params">|python</span></span></span><br><span class="line"><span class="ruby">---------<span class="params">|site-packagess</span></span></span><br><span class="line"><span class="ruby">---------<span class="params">|.....</span></span></span><br><span class="line"><span class="ruby">-----<span class="params">|includes</span></span></span><br><span class="line"><span class="ruby">--------<span class="params">|python3.5m</span></span></span><br><span class="line"><span class="ruby">-----<span class="params">|bin</span></span></span><br><span class="line"><span class="ruby">-------<span class="params">|python3.5</span></span></span><br><span class="line"><span class="ruby">-------<span class="params">|pip</span></span></span><br><span class="line"><span class="ruby">-------<span class="params">|activate</span></span></span><br></pre></td></tr></table></figure><h4 id="正常情况下只要激活了虚拟环境-那么pip安装的库应该都是在该虚拟环境下的-这次出了什么问题呢"><a href="#正常情况下只要激活了虚拟环境-那么pip安装的库应该都是在该虚拟环境下的-这次出了什么问题呢" class="headerlink" title="正常情况下只要激活了虚拟环境,那么pip安装的库应该都是在该虚拟环境下的,这次出了什么问题呢?"></a>正常情况下只要激活了<code>虚拟环境</code>,那么pip安装的库应该都是在该虚拟环境下的,这次出了什么问题呢?</h4><h5 id="1-猜测没有site-packages"><a href="#1-猜测没有site-packages" class="headerlink" title="1.猜测没有site-packages"></a>1.猜测没有<code>site-packages</code></h5><p>当时因为linux终端显示的原因没看到<code>site-packages</code>,于是就以为没有linux下建立的虚拟环境没有<code>site-packages</code>,但事实证明这个是没有关系的..</p><h5 id="2-uwsgi-ini没有指定虚拟环境"><a href="#2-uwsgi-ini没有指定虚拟环境" class="headerlink" title="2.uwsgi.ini没有指定虚拟环境"></a>2.<code>uwsgi.ini</code>没有指定虚拟环境</h5><p>网上给出的都是因为<strong>没有进入虚拟环境执行</strong>或者是<strong>配置中没有指定虚拟环境路径</strong></p><h5 id="3-加了sudo"><a href="#3-加了sudo" class="headerlink" title="3.加了sudo"></a>3.加了<code>sudo</code></h5><p>根据报错显示知道，<code>sudo pip install -r requirements.txt</code>的库都安装到了默认python目录下了…原因是因为加了<code>sudo</code>.</p><p>▲<strong>一定不要使用sudo pip … ,这里是在虚拟环境中安装python包，如果使用了sudo权限，python包会被安装在主机非虚拟环境下，在虚拟环境中找不到这个包。</strong></p><blockquote><p> 永远不要使用sudo pip install; 你可以在不知情的情况下覆盖重要的东西。使用pip install –user代替</p></blockquote><p>于是那就不加吧,命令改为<code>pip install -r requirements.txt</code>,此时有报错<code>Could not install packages due to anEnvironmentError: [Error 13] Permission denied:...,consider using &#39;--user&#39; options</code>,既然提示用<code>--user</code>参数那就试试吧.</p><p>结果返回的是<code>Can not perform a &#39;--user&#39; install. User site-packages are not visible in this virtualenv</code>,这是为什么还是不行呢?</p><p><strong><a href="https://pip.pypa.io/en/latest/user_guide/" target="_blank" rel="noopener">官方解释</a></strong></p><p><code>pip install --user</code> 遵循四条规则：</p><ol><li><p>当全局安装的软件包位于python路径上，并且它们 与安装要求<em>冲突</em>时，它们将被忽略，而<em>不会被</em> 卸载。</p></li><li><p>当全局安装的软件包位于python路径上并且它们<em>满足</em> 安装要求时，pip什么都不做，并报告满足要求（类似于在<code>--system-site-packages</code> virtualenv中安装软件包时全局软件包如何满足要求）。</p></li><li><p>由于用户站点不在python路径上，因此pip不会<code>--user</code>在<code>--no-site-packages</code>的virtualenv（即默认类型的virtualenv）中执行安装。安装没有意义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.path)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'C:\\Users\\10630\\Desktop'</span>, <span class="string">'D:\\python\\python36.zip'</span>, <span class="string">'D:\\python\\DLLs'</span>, <span class="string">'D:\\python\\lib'</span>, <span class="string">'D:\\python'</span>, <span class="string">'C:\\Users\\10630\\AppData\\Roaming\\Python\\Python36\\site-packages'</span>, <span class="string">'D:\\python\\lib\\site-packages'</span>, <span class="string">'D:\\python\\lib\\site-packages\\win32'</span>, <span class="string">'D:\\python\\lib\\site-packages\\win32\\lib'</span>, <span class="string">'D:\\python\\lib\\site-packages\\Pythonwin'</span>]</span><br></pre></td></tr></table></figure></li><li><p>在<code>--system-site-packages</code>virtualenv中，pip不会安装与virtualenv site-packages中的包冲突的包。-user安装缺少sys.path优先级并且毫无意义。</p></li></ol><p>那应该就是3的原因了…需要在当前的<code>env</code>虚拟环境中将权限开放,我的做法是<code>sudo chmod 777 -R *</code></p><hr><h3 id="最终解决方式"><a href="#最终解决方式" class="headerlink" title="最终解决方式:"></a>最终解决方式:</h3><p>于是我并没有再纠结这个,而是选择了不在<code>/var/www</code>这个目录下,因为这个目录下的权限关系非常严格,于是我在<code>~/Documents/env</code>新建了个虚拟环境,一切又如以前一样解决了.</p><h2 id="Ubuntu下使用matplotlib库-需要安装python3-tk"><a href="#Ubuntu下使用matplotlib库-需要安装python3-tk" class="headerlink" title="Ubuntu下使用matplotlib库,需要安装python3-tk"></a>Ubuntu下使用<code>matplotlib</code>库,需要安装<code>python3-tk</code></h2><p><a href="https://www.cnblogs.com/ilym/p/8387702.html" target="_blank" rel="noopener">`”raise ImportError(str(msg) + ‘, please install the python3-tk package’) ImportError: No module named ‘_tkinter’, please install the python3-tk package”的错误</a></p><p>解决方案:<code>sudo apt-get install python3-tk</code>(如果没更新源,最好更新下源)</p><hr><h3 id="附录"><a href="#附录" class="headerlink" title="附录:"></a>附录:</h3><h4 id="sudo-pip-install-vs-pip-install-user"><a href="#sudo-pip-install-vs-pip-install-user" class="headerlink" title="sudo-pip-install-vs-pip-install-user:"></a>sudo-pip-install-vs-pip-install-user:</h4><h5 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h5><p>sudo pip install可能意味着您要在系统范围内安装软件包。对于某些软件包，例如virtualenvwrapper，这可能是有用的，但除此之外，我将避免安装系统范围的软件包并为每个应用程序创建virtualenv并将pip安装到该virtualenv（可以在没有sudo的情况下完成）。</p><h5 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install</span><br></pre></td></tr></table></figure><p>在python安装中全局安装包，即对所有用户安装。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --user</span><br></pre></td></tr></table></figure><p>安装到本地用户目录，即〜/ .local / lib / python - 只是你。</p><p>例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install jupyter</span><br><span class="line">$ jupyter notebook</span><br></pre></td></tr></table></figure><p>将运行jupyter，打开Web浏览器，允许您使用笔记本。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --user jupyter</span><br><span class="line">$ jupyter notebook</span><br></pre></td></tr></table></figure><p>在将本地目录添加到PATH之前，将不执行任何操作。</p><p>最近pypi中包含了恶意代码。切勿使用sudo来安装pip。这与以root身份运行病毒相同。将本地文件夹添加到PATH或使用virtualenv。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PythonWeb–flask部署问题&quot;&gt;&lt;a href=&quot;#PythonWeb–flask部署问题&quot; class=&quot;headerlink&quot; title=&quot;PythonWeb–flask部署问题&quot;&gt;&lt;/a&gt;PythonWeb–flask部署问题&lt;/h1&gt;&lt;p&gt;以前
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="后端" scheme="https://nymrli.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="flask" scheme="https://nymrli.top/tags/flask/"/>
    
      <category term="配置环境" scheme="https://nymrli.top/tags/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>Pandas速成</title>
    <link href="https://nymrli.top/2018/12/21/Pandas%E9%80%9F%E6%88%90/"/>
    <id>https://nymrli.top/2018/12/21/Pandas速成/</id>
    <published>2018-12-21T13:57:29.000Z</published>
    <updated>2018-12-21T13:57:48.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pandas速成"><a href="#Pandas速成" class="headerlink" title="Pandas速成"></a>Pandas速成</h2><ul><li>Series : 一位数组, 只允许存储相同的数据类型</li><li>Time-Series : 以时间为索引的Series</li><li>DataFrame : 二维的表格型数据结构  , 可以理解为是Series 的容器</li><li>Panel : 三维数组,可以理解为DataFrame 的容器</li></ul><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">index = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">myseries = pd.Series(arr,index)</span><br><span class="line">print(myseries)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Series中第一个元素&#123;&#125;'</span>.format(myseries[<span class="number">0</span>]))</span><br><span class="line">print(<span class="string">'Series中索引为C的元素'</span>.format(myseries[<span class="string">'c'</span>]))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">dtype: int32</span><br><span class="line">Series中第一个元素<span class="number">1</span></span><br><span class="line">Series中索引为C的元素</span><br></pre></td></tr></table></figure><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">arr= np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">])</span><br><span class="line">rowindex = [<span class="string">'row1'</span>,<span class="string">'row2'</span>,<span class="string">'row3'</span>]</span><br><span class="line">colindex = [<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>]</span><br><span class="line">dataframe= pd.DataFrame(data=arr,index=  rowindex,columns=colindex)</span><br><span class="line">print(dataframe)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">      col1  col2  col3</span><br><span class="line">row1     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">row2     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span></span><br><span class="line">row3     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">arr= np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">])</span><br><span class="line">rowindex = [<span class="string">'row1'</span>,<span class="string">'row2'</span>,<span class="string">'row3'</span>]</span><br><span class="line">colindex = [<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>]</span><br><span class="line">dataframe= pd.<span class="symbol">DataFrame</span>(data=arr,index =  rowindex,columns=colindex)</span><br><span class="line">print(dataframe.<span class="symbol">_ixs</span>(<span class="number">0</span>))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">col1    <span class="number">1</span></span><br><span class="line">col2    <span class="number">2</span></span><br><span class="line">col3    <span class="number">3</span></span><br><span class="line"><span class="symbol">Name</span>: row1, dtype: int32</span><br></pre></td></tr></table></figure><h4 id="获取行列"><a href="#获取行列" class="headerlink" title="获取行列"></a>获取行列</h4><ul><li>1.ix[ ]<ul><li>先行后列</li></ul></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(dataframe.ix<span class="string">[[0]]</span>)#获得第一行内容</span><br><span class="line"># <span class="built_in">print</span>(dataframe.ix[<span class="string">'row1'</span>])#以索引名称获得</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dataframe.ix<span class="string">[[0]]</span>)`#获得第一列内容</span><br><span class="line"><span class="built_in">print</span>(dataframe.ix[:,<span class="string">'col1'</span>])</span><br></pre></td></tr></table></figure><ul><li>2.loc[ ]<ul><li>loc,是基于索引的名称选取数据集，这里的索引名称可以是数字,先行后列。注意，[0:2]是选取名称为0， 1， 2行的数据，一共三，只能写行和列的名称，不能写序号。</li></ul></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(dataframe.loc[<span class="string">'row1'</span>])</span></span></span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">col1    <span class="number">1</span></span><br><span class="line">col2    <span class="number">2</span></span><br><span class="line">col3    <span class="number">3</span></span><br><span class="line">Name: row1, dtype: int32</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(dataframe.loc[:,<span class="string">'col1'</span>])</span></span>  #获得<span class="string">'col1'</span>列的值</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(dataframe.loc[<span class="string">'row1'</span>,<span class="string">'col1'</span>])</span></span>#获得某行某列的值</span><br></pre></td></tr></table></figure><ul><li>3.iloc[]<ul><li>iloc，它是基于索引位来选取数据集，也就是数字序号来选取，0:2就是选取 0，1这两行，需要注意的是这里是前闭后开集合。只能写行和列的序号，不能写名称，否则会报错。</li></ul></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(dataframe.iloc[<span class="number">2</span>])</span></span></span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">col1    <span class="number">3</span></span><br><span class="line">col2    <span class="number">4</span></span><br><span class="line">col3    <span class="number">5</span></span><br><span class="line">Name: row3, dtype: int32</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(dataframe.iloc[<span class="number">0</span>,:])</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Pandas速成&quot;&gt;&lt;a href=&quot;#Pandas速成&quot; class=&quot;headerlink&quot; title=&quot;Pandas速成&quot;&gt;&lt;/a&gt;Pandas速成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Series : 一位数组, 只允许存储相同的数据类型&lt;/li&gt;
&lt;li&gt;Tim
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>BaiduMap_API</title>
    <link href="https://nymrli.top/2018/12/21/BaiduMap-API/"/>
    <id>https://nymrli.top/2018/12/21/BaiduMap-API/</id>
    <published>2018-12-21T13:55:50.000Z</published>
    <updated>2018-12-21T13:56:37.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Baidu-Map-API"><a href="#Baidu-Map-API" class="headerlink" title="Baidu Map API"></a>Baidu Map API</h2><h3 id="核心类Map"><a href="#核心类Map" class="headerlink" title="核心类Map"></a>核心类Map</h3><table><thead><tr><th>构造函数</th><th>描述</th></tr></thead><tbody><tr><td>Map(container: String \</td><td>HTMLElement, opts: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a0b1" target="_blank" rel="noopener">MapOptions</a>)</td><td>在指定的容器内创建地图实例，之后需要调用Map.centerAndZoom()方法对地图进行初始化。未进行初始化的地图将不能进行任何操作</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"MAP"</span>);</span><br><span class="line">map.centerAndZoom(points[<span class="number">0</span>], <span class="number">15</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>enableDragging()</td><td>none</td><td>启用地图拖拽，默认启用</td></tr><tr><td>enableScrollWheelZoom()</td><td>none</td><td>启用滚轮放大缩小，默认禁用</td></tr><tr><td>enableDoubleClickZoom()</td><td>none</td><td>启用双击放大，默认启用</td></tr><tr><td>enableKeyboard()</td><td>none</td><td>启用键盘操作，默认禁用。</td></tr><tr><td>enablePinchToZoom()</td><td>none</td><td>启用双指操作缩放，默认启用</td></tr><tr><td>enableAutoResize()</td><td>none</td><td>启用自动适应容器尺寸变化，默认启用</td></tr><tr><td>setMinZoom(zoom: Number)</td><td>none</td><td>设置地图允许的最小级别。取值不得小于地图类型所允许的最小级别</td></tr><tr><td>getCenter()</td><td><a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0" target="_blank" rel="noopener">Point</a></td><td>返回地图当前中心点</td></tr><tr><td>getDistance(start: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0" target="_blank" rel="noopener">Point</a>, end: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0" target="_blank" rel="noopener">Point</a>)</td><td>Number</td><td>返回两点之间的距离，单位是米</td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>centerAndZoom(center: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0" target="_blank" rel="noopener">Point</a>, zoom: Number)</td><td>none</td><td>设初始化地图。 如果center类型为Point时，zoom必须赋值，范围3-19级，若调用高清底图（针对移动端开发）时，zoom可赋值范围为3-18级。如果center类型为字符串时，比如“北京”，zoom可以忽略，地图将自动根据center适配最佳zoom级别</td></tr><tr><td>panTo(center: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0" target="_blank" rel="noopener">Point</a>, opts: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a0b2" target="_blank" rel="noopener">PanOptions</a>)</td><td>none</td><td>将地图的中心点更改为给定的点。如果该点在当前的地图视图中已经可见，则会以平滑动画的方式移动到中心点位置。可以通过配置强制移动过程不使用动画效果</td></tr><tr><td>setCenter(center: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0" target="_blank" rel="noopener">Point</a> \</td><td>String)</td><td>none</td><td>设置地图中心点。center除了可以为坐标点以外，还支持<strong>城市名</strong></td></tr><tr><td>getZoom()</td><td>Number</td><td>返回地图当前缩放级别</td></tr><tr><td>setZoom(zoom: Number)</td><td>none</td><td>将视图切换到指定的缩放等级，中心点坐标不变。注意：当有信息窗口在地图上打开时，地图缩放将保证信息窗口所在的坐标位置不动</td></tr><tr><td>addOverlay(overlay: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a3b0" target="_blank" rel="noopener">Overlay</a>)</td><td>none</td><td>将覆盖物添加到地图中，<strong>一个覆盖物实例只能向地图中添加一次</strong></td></tr><tr><td>clearOverlays()</td><td>none</td><td>清除地图上所有覆盖物</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="控件类"><a href="#控件类" class="headerlink" title="控件类"></a>控件类</h3><h4 id="Control基类"><a href="#Control基类" class="headerlink" title="Control基类"></a>Control基类</h4><table><thead><tr><th>initialize(map: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a0b0" target="_blank" rel="noopener">Map</a>)</th><th>HTMLElement</th><th>抽象方法。调用Map.addControl()方法添加控件时将调用此方法，从而实现该控件的初始化。自定义控件时需要实现此方法，并将元素的DOM元素在该方法中返回。DOM元素需要添加到地图的容器中，使用map.getContainer()方法可获得地图容器元素</th></tr></thead><tbody><tr><td>setAnchor(anchor: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a2b1" target="_blank" rel="noopener">ControlAnchor</a>)</td><td>none</td><td>设置控件停靠的位置</td></tr><tr><td>getAnchor()</td><td><a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a2b1" target="_blank" rel="noopener">ControlAnchor</a></td><td>返回控件停靠的位置</td></tr><tr><td>setOffset(offset: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b3" target="_blank" rel="noopener">Size</a>)</td><td>none</td><td>设置控件停靠的偏移量</td></tr><tr><td>getOffset()</td><td><a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b3" target="_blank" rel="noopener">Size</a></td><td>返回控件停靠的偏移量</td></tr><tr><td>show()</td><td>none</td><td>显示控件</td></tr><tr><td>hide()</td><td>none</td><td>隐藏控件</td></tr><tr><td>isVisible()</td><td>Boolean</td><td>判断控件的可见性</td></tr></tbody></table><h5 id="ControlAnchor-此常量表示控件的定位。"><a href="#ControlAnchor-此常量表示控件的定位。" class="headerlink" title="ControlAnchor: 此常量表示控件的定位。"></a>ControlAnchor: 此常量表示控件的定位。</h5><table><thead><tr><th>常量</th><th>描述</th></tr></thead><tbody><tr><td>BMAP_ANCHOR_TOP_LEFT</td><td>控件将定位到地图的左上角</td></tr><tr><td>BMAP_ANCHOR_TOP_RIGHT</td><td>控件将定位到地图的右上角</td></tr><tr><td>BMAP_ANCHOR_BOTTOM_LEFT</td><td>控件将定位到地图的左下角</td></tr><tr><td>BMAP_ANCHOR_BOTTOM_RIGHT</td><td>控件将定位到地图的右下角</td></tr></tbody></table><ul><li>NavigationControl<ul><li>此类表示地图的平移缩放控件，可以对地图进行上下左右四个方向的平移和缩放操作。</li></ul></li><li>GeolocationControl<ul><li>此类是负责进行地图定位的控件，使用html5浏览器定位功能，此类继承Control所有功能。</li></ul></li><li>OverviewMapControl<ul><li>此类表示缩略地图控件。</li></ul></li><li>ScaleControl<ul><li>此类表示比例尺控件。</li></ul></li><li>CopyrightControl<ul><li>此类表示版权控件，您可以在地图上添加自己的版权信息。每一个版权信息需要包含如下内容：版权的唯一标识、版权内容和其适用的区域范围。</li></ul></li></ul><h3 id="覆盖物类"><a href="#覆盖物类" class="headerlink" title="覆盖物类"></a>覆盖物类</h3><h4 id="Marker-此类表示地图上一个图像标注。"><a href="#Marker-此类表示地图上一个图像标注。" class="headerlink" title="Marker:此类表示地图上一个图像标注。"></a>Marker:此类表示地图上一个图像标注。</h4><table><thead><tr><th>构造函数</th><th>描述</th></tr></thead><tbody><tr><td>Marker(point: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0" target="_blank" rel="noopener">Point</a>, opts: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a3b3" target="_blank" rel="noopener">MarkerOptions</a>)</td><td>创建一个图像标注实例。point参数指定了图像标注所在的地理位置</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">markers = <span class="keyword">new</span> BMap.Marker(<span class="keyword">new</span> BMap.Point(<span class="number">118.93015</span>,<span class="number">32.1091</span>),&#123;<span class="string">"title"</span>:<span class="string">'Point'</span>&#125;);</span><br><span class="line">label = <span class="keyword">new</span> BMap.Label(<span class="string">'label'</span>);</span><br><span class="line">markers.setLabel(l);</span><br><span class="line">map.addOverlay(markers);</span><br></pre></td></tr></table></figure><h5 id="Icon此类表示标注覆盖物所使用的图标。"><a href="#Icon此类表示标注覆盖物所使用的图标。" class="headerlink" title="Icon此类表示标注覆盖物所使用的图标。"></a>Icon此类表示标注覆盖物所使用的图标。</h5><table><thead><tr><th>构造函数</th><th>描述</th></tr></thead><tbody><tr><td>Icon(url: String, size: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b3" target="_blank" rel="noopener">Size</a>, opts: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a3b6" target="_blank" rel="noopener">IconOptions</a>)</td><td>以给定的图像地址和大小创建图标对象实例</td></tr></tbody></table><h5 id="Label此类表示地图上的文本标注。"><a href="#Label此类表示地图上的文本标注。" class="headerlink" title="Label此类表示地图上的文本标注。"></a>Label此类表示地图上的文本标注。</h5><table><thead><tr><th>构造函数</th><th>描述</th></tr></thead><tbody><tr><td>Label(content: String, opts: <a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a3b10" target="_blank" rel="noopener">LabelOptions</a>)</td><td>创建一个文本标注实例。point参数指定了文本标注所在的地理位置</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">label = <span class="keyword">new</span> BMap.Label(<span class="string">""</span>, &#123;<span class="attr">offset</span>: <span class="keyword">new</span> BMap.Size(<span class="number">-20</span>, <span class="number">-20</span>)&#125;);  </span><br><span class="line">car = <span class="keyword">new</span> BMap.Marker(points[<span class="number">0</span>]);  </span><br><span class="line">car.setLabel(label);  </span><br><span class="line">map.addOverlay(car);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Baidu-Map-API&quot;&gt;&lt;a href=&quot;#Baidu-Map-API&quot; class=&quot;headerlink&quot; title=&quot;Baidu Map API&quot;&gt;&lt;/a&gt;Baidu Map API&lt;/h2&gt;&lt;h3 id=&quot;核心类Map&quot;&gt;&lt;a href=&quot;#核心类
      
    
    </summary>
    
    
      <category term="API" scheme="https://nymrli.top/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Postman模拟上传文件</title>
    <link href="https://nymrli.top/2018/12/20/Postman%E6%A8%A1%E6%8B%9F%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>https://nymrli.top/2018/12/20/Postman模拟上传文件/</id>
    <published>2018-12-20T10:57:35.000Z</published>
    <updated>2018-12-20T12:11:59.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Postman模拟"><a href="#Postman模拟" class="headerlink" title="Postman模拟"></a>Postman模拟</h2><h3 id="1-首先得知道前端的样子"><a href="#1-首先得知道前端的样子" class="headerlink" title="1.首先得知道前端的样子:"></a>1.首先得知道前端的样子:</h3><p><img src="/2018/12/20/Postman模拟上传文件/html.jpg" alt="html"></p><h3 id="2-针对前端字段进行模拟POST"><a href="#2-针对前端字段进行模拟POST" class="headerlink" title="2.针对前端字段进行模拟POST"></a>2.针对前端字段进行模拟POST</h3><p><img src="/2018/12/20/Postman模拟上传文件/Postman上传文件.jpg" alt="Postman上传文件"></p><p>▲这边<code>key</code>为<code>&lt;input&gt;</code>中的<code>name</code>属性</p><h4 id="▲▲URL最后的’-‘"><a href="#▲▲URL最后的’-‘" class="headerlink" title="▲▲URL最后的’/‘:"></a>▲▲URL最后的’/‘:</h4><h3 id="POST请求URL要对应"><a href="#POST请求URL要对应" class="headerlink" title="POST请求URL要对应"></a>POST请求URL要对应</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@app</span>.route(<span class="string">'/photo/'</span>,methods = [<span class="string">'GET'</span>,<span class="string">'POST'</span>] )</span><br><span class="line"><span class="attribute">http</span>:<span class="comment">//127.0.0.1:5000/photo/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@app</span>.route(<span class="string">'/photo'</span>,methods = [<span class="string">'GET'</span>,<span class="string">'POST'</span>] )</span><br><span class="line"><span class="attribute">http</span>:<span class="comment">//127.0.0.1:5000/photo</span></span><br></pre></td></tr></table></figure><p>​    当Web服务器接收到对某个末尾不含斜杠的url请求时，例如“<a href="http://www.abc.com/abc”，这时服务器会搜索网站根目录下有没有名为“abc”的文件，**如果没有就把abc当做目录处理**，然后返回abc目录下的默认首页。当Web服务器接收到的是末尾带斜杠的请求时就会直接当做目录处理。，当浏览器解析" target="_blank" rel="noopener">http://www.abc.com/abc”，这时服务器会搜索网站根目录下有没有名为“abc”的文件，**如果没有就把abc当做目录处理**，然后返回abc目录下的默认首页。当Web服务器接收到的是末尾带斜杠的请求时就会直接当做目录处理。，当浏览器解析</a> /ie 这样的url时，服务器会执行301转向到/ie/，两个链接都有效，但是第二种更快。</p><p>​    对于静态资源服务器来说，请求<code>https://imgss.github.io/demo/</code>这样的路径能访问到页面，是因为服务器会自动在demo路径下尝试找<code>index.html</code>之类的文件并发给浏览器，所以html的当前路径一定是demo下的，也是因为这样，浏览器才会通过重定向自动加上<code>/</code>，防止相对路径解析出错，保证浏览器能正确的请求到资源。</p><h2 id="requests模拟"><a href="#requests模拟" class="headerlink" title="requests模拟"></a>requests模拟</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://127.0.0.1:5000/photo/'</span></span><br><span class="line">filename = &#123;</span><br><span class="line"><span class="string">'src'</span> : open(<span class="string">"C:\\Users\\10630\\Desktop\\为什么电流被一分为2.jpg"</span>,<span class="string">'rb'</span>)</span><br><span class="line">&#125;</span><br><span class="line">html = requests.post(url,files=filename)</span><br><span class="line">print(html.text)</span><br><span class="line"><span class="comment"># &#123;"msg":"success","status":200&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Postman模拟&quot;&gt;&lt;a href=&quot;#Postman模拟&quot; class=&quot;headerlink&quot; title=&quot;Postman模拟&quot;&gt;&lt;/a&gt;Postman模拟&lt;/h2&gt;&lt;h3 id=&quot;1-首先得知道前端的样子&quot;&gt;&lt;a href=&quot;#1-首先得知道前端的样子&quot;
      
    
    </summary>
    
    
      <category term="后端" scheme="https://nymrli.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Postman" scheme="https://nymrli.top/tags/Postman/"/>
    
  </entry>
  
  <entry>
    <title>flask-sqlalchemy踩坑——外键</title>
    <link href="https://nymrli.top/2018/12/19/flask-sqlalchemy%E8%B8%A9%E5%9D%91/"/>
    <id>https://nymrli.top/2018/12/19/flask-sqlalchemy踩坑/</id>
    <published>2018-12-19T11:47:54.000Z</published>
    <updated>2018-12-19T11:56:43.863Z</updated>
    
    <content type="html"><![CDATA[<h4 id="12-19：外键使用"><a href="#12-19：外键使用" class="headerlink" title="12.19：外键使用"></a>12.19：外键使用</h4><p>今天要设计一个如图关系的表关系时,踩了好几个坑…记录下</p><p><img src="/2018/12/19/flask-sqlalchemy踩坑/E-R图.jpg" alt="E-R图"></p><p>代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'account'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    Username = db.Column(db.String(<span class="number">30</span>),nullable=<span class="keyword">True</span>,unique=<span class="keyword">True</span>)</span><br><span class="line">    PWD = db.Column(db.String(<span class="number">20</span>),nullable=<span class="keyword">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">20</span>),nullable=<span class="keyword">True</span>,unique=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'info'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">20</span>),db.ForeignKey(<span class="string">'account.email'</span>))</span><br><span class="line">    timestamp = db.Column(db.Float,nullable=<span class="keyword">True</span>,unique=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tmp</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'tmp'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    tmp = db.Column(db.Float,db.ForeignKey(<span class="string">'info.timestamp'</span>)) <span class="comment"># 一组的开始时间</span></span><br><span class="line">    nowtime = db.Column(db.FLOAT,nullable=<span class="keyword">True</span>)       <span class="comment"># 当前记录的时间</span></span><br><span class="line">    longitude = db.Column(db.FLOAT,nullable=<span class="keyword">True</span>)</span><br><span class="line">    latitude = db.Column(db.FLOAT,nullable=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><ol><li><code>id</code>的类型是<code>int</code>,没有<code>id</code>这种类型</li><li>▲.外键必须是主表的<strong>唯一键(unique)</strong>（如上，学生表 sid 是主键，而主键是唯一的，所以能够作为分数表 stu 的外键）</li><li>外键不一定须要作为从表的主键。外键也不一定是主表的主键。主表的唯一键就能够作为从表的外键。</li><li>外键的类型必须与父表的主键类型完全一致(类型和长度)</li></ol><hr><h5 id="总结下来："><a href="#总结下来：" class="headerlink" title="总结下来："></a>总结下来：</h5><p><img src="/2018/12/19/flask-sqlalchemy踩坑/1.jpg" alt="1"></p><p><img src="/2018/12/19/flask-sqlalchemy踩坑/2.png" alt="2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;12-19：外键使用&quot;&gt;&lt;a href=&quot;#12-19：外键使用&quot; class=&quot;headerlink&quot; title=&quot;12.19：外键使用&quot;&gt;&lt;/a&gt;12.19：外键使用&lt;/h4&gt;&lt;p&gt;今天要设计一个如图关系的表关系时,踩了好几个坑…记录下&lt;/p&gt;
&lt;p&gt;&lt;im
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="flask" scheme="https://nymrli.top/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实验3——图的基本运算及职能交通中的最佳路径选择问题</title>
    <link href="https://nymrli.top/2018/12/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C3%E2%80%94%E2%80%94%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E5%8F%8A%E8%81%8C%E8%83%BD%E4%BA%A4%E9%80%9A%E4%B8%AD%E7%9A%84%E6%9C%80%E4%BD%B3%E8%B7%AF%E5%BE%84%E9%80%89%E6%8B%A9%E9%97%AE%E9%A2%98/"/>
    <id>https://nymrli.top/2018/12/16/数据结构实验3——图的基本运算及职能交通中的最佳路径选择问题/</id>
    <published>2018-12-16T09:50:05.000Z</published>
    <updated>2018-12-16T10:30:17.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验3-图的基本运算及职能交通中的最佳路径选择问题"><a href="#实验3-图的基本运算及职能交通中的最佳路径选择问题" class="headerlink" title="实验3.图的基本运算及职能交通中的最佳路径选择问题"></a>实验3.图的基本运算及职能交通中的最佳路径选择问题</h2><h3 id="3-2-邻接矩阵的DFS和BFS"><a href="#3-2-邻接矩阵的DFS和BFS" class="headerlink" title="3.2-邻接矩阵的DFS和BFS"></a>3.2-邻接矩阵的DFS和BFS</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2  <span class="comment">//表示上溢</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3  <span class="comment">//表示下溢</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NotPresent 4 <span class="comment">//表示元素不存在</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5  <span class="comment">//表示有重复元素</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> BOOL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************队列操作**************/</span></span><br><span class="line"><span class="comment">//循环队列的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">int</span> maxSize;    <span class="comment">//最大容量</span></span><br><span class="line">    ElemType *element;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个能容纳mSize个单元的空队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create</span><span class="params">(Queue *Q,<span class="keyword">int</span> mSize)</span></span>&#123;</span><br><span class="line">    Q-&gt;maxSize=mSize;</span><br><span class="line">    Q-&gt;element=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*mSize);</span><br><span class="line">    Q-&gt;front=Q-&gt;rear=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//判断队列是否为空,若是,则返回TRUE;否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">IsEmpty</span><span class="params">(Queue *Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Q-&gt;front==Q-&gt;rear;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//判断队列是否已满,若是,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">IsFULL</span><span class="params">(Queue *Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Q-&gt;rear+<span class="number">1</span>)%Q-&gt;maxSize==Q-&gt;front;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//获取队头元素,并通过x返回.若操作成功,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">Front</span><span class="params">(Queue *Q,ElemType *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(Q))      <span class="comment">//空队列处理</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    *x=Q-&gt;element[(Q-&gt;front+<span class="number">1</span>)%Q-&gt;maxSize];</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//入队.在队列Q的队尾插入元素x(入队操作)。操作成功,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">EnQueue</span><span class="params">(Queue *Q,ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFULL(Q))      <span class="comment">//溢出处理</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    Q-&gt;rear=(Q-&gt;rear+<span class="number">1</span>)%Q-&gt;maxSize;</span><br><span class="line">    Q-&gt;element[Q-&gt;rear]=x;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//出队.从队列Q中删除队头元素(出队操作)。操作成功,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">DeQueue</span><span class="params">(Queue *Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(Q))&#123;   <span class="comment">//空队列处理</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    Q-&gt;front=(Q-&gt;front+<span class="number">1</span>)%Q-&gt;maxSize;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/************队列操作**************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接矩阵的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType **a;     <span class="comment">//邻接矩阵</span></span><br><span class="line">    <span class="keyword">int</span> n;            <span class="comment">//图的当前顶点数</span></span><br><span class="line">    <span class="keyword">int</span> e;            <span class="comment">//图的当前边数</span></span><br><span class="line">    ElemType noEdge;  <span class="comment">//两顶点间无边时的值</span></span><br><span class="line">&#125;mGraph;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接矩阵的初始化</span></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(mGraph *mg,<span class="keyword">int</span> nSize,ElemType noEdgeValue)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    mg-&gt;n = nSize;               <span class="comment">//初始化顶点数</span></span><br><span class="line">    mg-&gt;e = <span class="number">0</span>;                   <span class="comment">//初始化时没有边</span></span><br><span class="line">    mg-&gt;noEdge = noEdgeValue;    <span class="comment">//初始化没有边时的取值</span></span><br><span class="line">    mg-&gt;a = (ElemType**)<span class="built_in">malloc</span>(nSize*<span class="keyword">sizeof</span>(ElemType *));  <span class="comment">//生成长度为n的一维指针数组</span></span><br><span class="line">    <span class="keyword">if</span>(!mg-&gt;a) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; mg-&gt;n;i ++)&#123;   <span class="comment">//动态生成二维数组</span></span><br><span class="line">        mg-&gt;a[i] = (ElemType*)<span class="built_in">malloc</span>(nSize*<span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; mg-&gt;n;j ++)&#123;</span><br><span class="line">            mg-&gt;a[i][j] = mg-&gt;noEdge;</span><br><span class="line">        &#125;</span><br><span class="line">        mg-&gt;a[i][i] = <span class="number">0</span>;        <span class="comment">//自回路设置为0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接矩阵的撤销(改成了int型，有返回值),先释放一维数组,再释放指针数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Destory</span><span class="params">(mGraph *mg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; mg-&gt;n;i ++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(mg-&gt;a[i]);  <span class="comment">//释放n个一维数组的存储空间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(mg-&gt;a);         <span class="comment">//释放一维数组的存储空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接矩阵的边的搜索</span></span><br><span class="line"><span class="function">Status <span class="title">Exist</span><span class="params">(mGraph *mg,<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span>||v &lt; <span class="number">0</span>||u &gt; mg-&gt;n<span class="number">-1</span>||v &gt; mg-&gt;n<span class="number">-1</span> ||u == v||mg-&gt;a[u][v] == mg-&gt;noEdge) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接矩阵的边的插入</span></span><br><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(mGraph *mg,<span class="keyword">int</span> u,<span class="keyword">int</span> v,ElemType w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span>||v &lt; <span class="number">0</span>||u &gt; mg-&gt;n<span class="number">-1</span>||v &gt; mg-&gt;n<span class="number">-1</span> ||u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(mg-&gt;a[u][v] != mg-&gt;noEdge) <span class="keyword">return</span> Duplicate;  </span><br><span class="line">    <span class="comment">//若待插入边已存在,则返回出错信息</span></span><br><span class="line">    mg-&gt;a[u][v] = w;                                 <span class="comment">//插入新边</span></span><br><span class="line">    mg-&gt;e ++;                                        <span class="comment">//增加一条边</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接矩阵的边的删除</span></span><br><span class="line"><span class="function">Status <span class="title">Remove</span><span class="params">(mGraph *mg,<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span>||v &lt; <span class="number">0</span>||u &gt; mg-&gt;n<span class="number">-1</span>||v &gt; mg-&gt;n<span class="number">-1</span> ||u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(mg-&gt;a[u][v] == mg-&gt;noEdge) <span class="keyword">return</span> NotPresent;  </span><br><span class="line">    <span class="comment">//若待删除边不存在,则返回出错信息</span></span><br><span class="line">    mg-&gt;a[u][v] = mg-&gt;noEdge;                         <span class="comment">//删除边</span></span><br><span class="line">    mg-&gt;e --;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(mGraph mg,<span class="keyword">int</span> v,<span class="keyword">int</span> visited[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,v );</span><br><span class="line">    visited[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; mg.n; j++)&#123;             <span class="comment">//遍历v的邻接点</span></span><br><span class="line">        <span class="keyword">if</span>(!visited[j] &amp;&amp; mg.a[v][j] &gt; <span class="number">0</span>)&#123;  <span class="comment">//当未被访问且有权值</span></span><br><span class="line">            DFS(mg,j,visited);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DFS搜索全图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSGraph</span><span class="params">(mGraph mg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> *visited = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(mg.n * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));   <span class="comment">//访问为1,未访问为0</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; mg.n;i++) visited[i] = <span class="number">0</span>;   <span class="comment">//visted数组初始化</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt; mg.n; i++)</span><br><span class="line">            <span class="keyword">if</span>( !visited[i] ) </span><br><span class="line">                DFS(mg,i,visited);</span><br><span class="line">    <span class="built_in">free</span>(visited);           <span class="comment">//整个图的DFS遍历后,释放visted数组</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(mGraph mg,<span class="keyword">int</span> v,<span class="keyword">int</span> visited[])</span></span>&#123;</span><br><span class="line">    Queue q;</span><br><span class="line">    Create(&amp;q,mg.n);</span><br><span class="line">    visited[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,v);</span><br><span class="line">    EnQueue(&amp;q,v);                         <span class="comment">//将当前顶点v放入队列</span></span><br><span class="line">    <span class="keyword">while</span>( !IsEmpty(&amp;q) )&#123;</span><br><span class="line">        Front(&amp;q,&amp;v);</span><br><span class="line">        DeQueue(&amp;q);                       <span class="comment">//队首顶点出队列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; mg.n;i ++)&#123;       <span class="comment">//遍历图的每一项</span></span><br><span class="line">            <span class="keyword">if</span>( !visited[i] &amp;&amp; mg.a[v][i] &gt; <span class="number">0</span>)&#123;       </span><br><span class="line">                <span class="comment">//若未被访问且有权值,则将其访问并放入队列</span></span><br><span class="line">                visited[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">                EnQueue(&amp;q,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS搜索全图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSGraph</span><span class="params">(mGraph mg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> *visited = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(mg.n * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));   <span class="comment">//访问为1,未访问为0</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; mg.n;i++) visited[i] = <span class="number">0</span>;   <span class="comment">//visted数组初始化</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt; mg.n; i++)</span><br><span class="line">            <span class="keyword">if</span>( !visited[i] ) </span><br><span class="line">                BFS(mg,i,visited);</span><br><span class="line">    <span class="built_in">free</span>(visited);           <span class="comment">//整个图的BFS遍历后,释放visted数组</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mGraph g;</span><br><span class="line">    <span class="keyword">int</span> nSize,edge,u,v,i;</span><br><span class="line">    ElemType w;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the mgraph's Size:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nSize);</span><br><span class="line">    Init(&amp;g,nSize,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the mgraph's Edge num:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;edge);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; edge;i ++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Please enter the edge(Pu,Pv,Weight):"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        Insert(&amp;g,u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"DFS:"</span>);</span><br><span class="line">    DFSGraph(g);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nBFS:"</span>);</span><br><span class="line">    BFSGraph(g);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/12/16/数据结构实验3——图的基本运算及职能交通中的最佳路径选择问题/1.png" alt="1"></p><h3 id="3-4-邻接表的BFS和DFS"><a href="#3-4-邻接表的BFS和DFS" class="headerlink" title="3.4-邻接表的BFS和DFS"></a>3.4-邻接表的BFS和DFS</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2  <span class="comment">//表示上溢</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3  <span class="comment">//表示下溢</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NotPresent 4 <span class="comment">//表示元素不存在</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5  <span class="comment">//表示有重复元素</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> BOOL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************队列操作**************/</span></span><br><span class="line"><span class="comment">//循环队列的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">int</span> maxSize;    <span class="comment">//最大容量</span></span><br><span class="line">    ElemType *element;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个能容纳mSize个单元的空队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create</span><span class="params">(Queue *Q,<span class="keyword">int</span> mSize)</span></span>&#123;</span><br><span class="line">    Q-&gt;maxSize=mSize;</span><br><span class="line">    Q-&gt;element=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*mSize);</span><br><span class="line">    Q-&gt;front=Q-&gt;rear=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//判断队列是否为空,若是,则返回TRUE;否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">IsEmpty</span><span class="params">(Queue *Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Q-&gt;front==Q-&gt;rear;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//判断队列是否已满,若是,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">IsFULL</span><span class="params">(Queue *Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Q-&gt;rear+<span class="number">1</span>)%Q-&gt;maxSize==Q-&gt;front;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//获取队头元素,并通过x返回.若操作成功,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">Front</span><span class="params">(Queue *Q,ElemType *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(Q))      <span class="comment">//空队列处理</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    *x=Q-&gt;element[(Q-&gt;front+<span class="number">1</span>)%Q-&gt;maxSize];</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//入队.在队列Q的队尾插入元素x(入队操作)。操作成功,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">EnQueue</span><span class="params">(Queue *Q,ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFULL(Q))      <span class="comment">//溢出处理</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    Q-&gt;rear=(Q-&gt;rear+<span class="number">1</span>)%Q-&gt;maxSize;</span><br><span class="line">    Q-&gt;element[Q-&gt;rear]=x;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//出队.从队列Q中删除队头元素(出队操作)。操作成功,则返回TRUE,否则返回FALSE</span></span><br><span class="line"><span class="function">BOOL <span class="title">DeQueue</span><span class="params">(Queue *Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(Q))&#123;   <span class="comment">//空队列处理</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    Q-&gt;front=(Q-&gt;front+<span class="number">1</span>)%Q-&gt;maxSize;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/************队列操作**************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ENode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjVex;              <span class="comment">//任意顶点u相邻的顶点</span></span><br><span class="line">    ElemType w;              <span class="comment">//边的权值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ENode</span> *<span class="title">nextArc</span>;</span>   <span class="comment">//指向下一个边结点</span></span><br><span class="line">&#125;ENode;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;           <span class="comment">//图的当前顶点数</span></span><br><span class="line">    <span class="keyword">int</span> e;           <span class="comment">//图的当前边数</span></span><br><span class="line">    ENode **a;       <span class="comment">//指向一维指针数组</span></span><br><span class="line">&#125;LGraph;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表的初始化</span></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(LGraph *lg,<span class="keyword">int</span> nSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>  i;</span><br><span class="line">    lg-&gt;n = nSize;</span><br><span class="line">    lg-&gt;e = <span class="number">0</span>;</span><br><span class="line">    lg-&gt;a = (ENode**)<span class="built_in">malloc</span>(nSize*<span class="keyword">sizeof</span>(ENode*));      </span><br><span class="line">    <span class="comment">//动态生成长度为n的一维指针数组</span></span><br><span class="line">    <span class="keyword">if</span>(!lg-&gt;a) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; lg-&gt;n;i ++) lg-&gt;a[i] = <span class="literal">NULL</span>;          <span class="comment">//将指针数组a置空</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接表的撤销</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Destory</span><span class="params">(LGraph *lg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ENode *p,*q;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; lg-&gt;n;i ++)&#123;        <span class="comment">//链表的撤销操作</span></span><br><span class="line">        p = lg-&gt;a[i];                 <span class="comment">//指针p指向顶点i的单链表的第一个边结点</span></span><br><span class="line">        q = p;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;                     <span class="comment">//释放顶点i的单链表中所有边结点</span></span><br><span class="line">            p = p-&gt;nextArc;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">            q = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(lg-&gt;a);                     <span class="comment">//释放一维指针数组a的存储空间</span></span><br><span class="line">    <span class="keyword">return</span> OK;                        <span class="comment">//改为int型函数,有返回值</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接表的搜索边</span></span><br><span class="line"><span class="function">Status <span class="title">Exist</span><span class="params">(LGraph *lg,<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    ENode *p;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span>||v &lt; <span class="number">0</span>||u &gt; lg-&gt;n<span class="number">-1</span> ||v &gt; lg-&gt;n<span class="number">-1</span> ||u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    p = lg-&gt;a[u];                   <span class="comment">//指针p指向顶点u的单链表的第一个边结点</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;adjVex != v)&#123;</span><br><span class="line">        p = p-&gt;nextArc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> ERROR;            </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接表的插入边</span></span><br><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(LGraph *lg,<span class="keyword">int</span> u,<span class="keyword">int</span> v,ElemType w)</span></span>&#123;</span><br><span class="line">    ENode *p;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span>||v &lt; <span class="number">0</span>||u &gt; lg-&gt;n<span class="number">-1</span>||v &gt; lg-&gt;n<span class="number">-1</span> ||u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(Exist(lg,u,v)) <span class="keyword">return</span> Duplicate;  <span class="comment">//此边已存在,返回错误</span></span><br><span class="line">    p = (ENode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ENode));   <span class="comment">//为新的边结点分配存储空间</span></span><br><span class="line">    p-&gt;adjVex = v;</span><br><span class="line">    p-&gt;w = w;</span><br><span class="line">    p -&gt; nextArc = lg-&gt;a[u];             <span class="comment">//将新的边结点插入单链表的最前面</span></span><br><span class="line">    lg-&gt;a[u] = p;</span><br><span class="line">    lg-&gt;e ++;                       </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//邻接表的删除边</span></span><br><span class="line"><span class="function">Status <span class="title">Remove</span><span class="params">(LGraph *lg,<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    ENode *p,*q;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span> || v &lt; <span class="number">0</span> || u &gt; lg-&gt;n<span class="number">-1</span> || v &gt; lg-&gt;n<span class="number">-1</span> || u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    p = lg-&gt;a[u];</span><br><span class="line">    q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;adjVex != v)&#123;         <span class="comment">//查找待删除边是否存在</span></span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;nextArc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> NotPresent;       </span><br><span class="line">    <span class="keyword">if</span>(q) q-&gt;nextArc = p-&gt;nextArc;     <span class="comment">//从单链表删除此边</span></span><br><span class="line">    <span class="keyword">else</span> lg-&gt;a[u] = p-&gt;nextArc;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    lg-&gt;e --;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(LGraph lg,<span class="keyword">int</span> v,<span class="keyword">int</span> visited[])</span></span>&#123;</span><br><span class="line">    ENode *j;</span><br><span class="line">    Queue q;</span><br><span class="line">    Create(&amp;q,lg.n);</span><br><span class="line">    visited[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, v);</span><br><span class="line">    EnQueue(&amp;q,v);              <span class="comment">//访问的节点入队</span></span><br><span class="line">    <span class="keyword">while</span>( !IsEmpty(&amp;q) )&#123;       <span class="comment">//一直到该层没有节点为止</span></span><br><span class="line">        Front(&amp;q,&amp;v);           <span class="comment">// 取出父节点</span></span><br><span class="line">        DeQueue(&amp;q);</span><br><span class="line">        <span class="keyword">for</span> (j=lg.a[v]; j!= <span class="literal">NULL</span>;j=j-&gt;nextArc )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( !visited[j-&gt;adjVex])&#123;</span><br><span class="line">                visited[j-&gt;adjVex] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, j-&gt;adjVex);</span><br><span class="line">                EnQueue(&amp;q,j-&gt;adjVex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSGraph</span><span class="params">(LGraph lg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> *visited = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)* lg.n);    <span class="comment">//记录n个节点的访问情况</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; lg.n;i++) visited[i] = <span class="number">0</span>;   <span class="comment">//visted数组初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lg.n; ++i)</span><br><span class="line">        <span class="keyword">if</span>( !visited[i] ) BFS(lg,i,visited);</span><br><span class="line">    <span class="built_in">free</span>(visited);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(LGraph lg,<span class="keyword">int</span> v,<span class="keyword">int</span> visited[])</span></span>&#123;</span><br><span class="line">    ENode *j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,v );</span><br><span class="line">    visited[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = lg.a[v];j!=<span class="literal">NULL</span>;j= j-&gt;nextArc)     <span class="comment">//lg.a链表的循环</span></span><br><span class="line">        <span class="keyword">if</span>( !visited[j-&gt;adjVex] ) </span><br><span class="line">            DFS(lg,j-&gt;adjVex,visited);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSGraph</span><span class="params">(LGraph lg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> *visited = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)* lg.n);    <span class="comment">//记录n个节点的访问情况</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; lg.n ; i++) visited[i] = <span class="number">0</span>;               <span class="comment">//visted数组初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lg.n; ++i)</span><br><span class="line">        <span class="keyword">if</span>( !visited[i] ) DFS(lg,i,visited);</span><br><span class="line">    <span class="built_in">free</span>(visited);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LGraph g;</span><br><span class="line">    <span class="keyword">int</span> i,u,v,enode,edge;</span><br><span class="line">    ElemType w;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the number of mgraph's Nodes:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;enode);</span><br><span class="line">    Init(&amp;g,enode);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the mgraph's Edge num:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;edge);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; edge;i ++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Please enter the edge(Pu,Pv,Weight):"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        Insert(&amp;g,u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"DFS:"</span>);</span><br><span class="line">    DFSGraph(g);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nBFS:"</span>);</span><br><span class="line">    BFSGraph(g);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/12/16/数据结构实验3——图的基本运算及职能交通中的最佳路径选择问题/2.png" alt="2"></p><p>以上大多直接从<a href="https://blog.csdn.net/Wonz5130/article" target="_blank" rel="noopener">学长的博客</a>搬运过来.</p><h3 id="3-5-飞机换乘最短距离-Dijkstra单源最短路径"><a href="#3-5-飞机换乘最短距离-Dijkstra单源最短路径" class="headerlink" title="3.5- 飞机换乘最短距离(Dijkstra单源最短路径)"></a>3.5- 飞机换乘最短距离(Dijkstra单源最短路径)</h3><p>编写程序，实现智能交通中的最佳路径选择问题：设有n个地点，编号为0~n-1，m条路径的起点、终点和代价由用户输入提供，采用实验3.1所示邻接矩阵为存储结构，寻找最佳路径方案(如花费时间最少、路径长度最短、交通费用最小等，任选其一即可)。</p><p>借了学长的整体框架,将邻接矩阵改成了邻接表,并完成了题目要求的给定起点、终点，算最短路径。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Overflow 2  <span class="comment">//表示上溢</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Underflow 3  <span class="comment">//表示下溢</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NotPresent 4 <span class="comment">//表示元素不存在</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Duplicate 5  <span class="comment">//表示有重复元素</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFTY 32657 <span class="comment">//表示正无穷</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> BOOL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ENode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjVex;              <span class="comment">//任意顶点u相邻的顶点</span></span><br><span class="line">    ElemType w;              <span class="comment">//边的权值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ENode</span> *<span class="title">nextArc</span>;</span>   <span class="comment">//指向下一个边结点</span></span><br><span class="line">&#125;ENode;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;           <span class="comment">//图的当前顶点数</span></span><br><span class="line">    <span class="keyword">int</span> e;           <span class="comment">//图的当前边数</span></span><br><span class="line">    ENode **a;       <span class="comment">//指向一维指针数组</span></span><br><span class="line">&#125;LGraph;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表的初始化</span></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(LGraph *lg,<span class="keyword">int</span> nSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>  i;</span><br><span class="line">    lg-&gt;n = nSize;</span><br><span class="line">    lg-&gt;e = <span class="number">0</span>;</span><br><span class="line">    lg-&gt;a = (ENode**)<span class="built_in">malloc</span>(nSize*<span class="keyword">sizeof</span>(ENode*));      </span><br><span class="line">    <span class="comment">//动态生成长度为n的一维指针数组</span></span><br><span class="line">    <span class="keyword">if</span>(!lg-&gt;a) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; lg-&gt;n;i ++) lg-&gt;a[i] = <span class="literal">NULL</span>;          </span><br><span class="line">    <span class="comment">//将指针数组a置空</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接表的撤销</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Destory</span><span class="params">(LGraph *lg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ENode *p,*q;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; lg-&gt;n;i ++)&#123;        <span class="comment">//链表的撤销操作</span></span><br><span class="line">        p = lg-&gt;a[i];                 <span class="comment">//指针p指向顶点i的单链表的第一个边结点</span></span><br><span class="line">        q = p;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;                     <span class="comment">//释放顶点i的单链表中所有边结点</span></span><br><span class="line">            p = p-&gt;nextArc;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">            q = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(lg-&gt;a);                     <span class="comment">//释放一维指针数组a的存储空间</span></span><br><span class="line">    <span class="keyword">return</span> OK;                        <span class="comment">//改为int型函数,有返回值</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接表的搜索边</span></span><br><span class="line"><span class="function">Status <span class="title">Exist</span><span class="params">(LGraph *lg,<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    ENode *p;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span>||v &lt; <span class="number">0</span>||u &gt; lg-&gt;n<span class="number">-1</span> ||v &gt; lg-&gt;n<span class="number">-1</span> ||u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    p = lg-&gt;a[u];                   <span class="comment">//指针p指向顶点u的单链表的第一个边结点</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;adjVex != v)&#123;</span><br><span class="line">        p = p-&gt;nextArc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> ERROR;            </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//邻接表的插入边</span></span><br><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(LGraph *lg,<span class="keyword">int</span> u,<span class="keyword">int</span> v,ElemType w)</span></span>&#123;</span><br><span class="line">    ENode *p;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span>||v &lt; <span class="number">0</span>||u &gt; lg-&gt;n<span class="number">-1</span>||v &gt; lg-&gt;n<span class="number">-1</span> ||u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(Exist(lg,u,v)) <span class="keyword">return</span> Duplicate;  <span class="comment">//此边已存在,返回错误</span></span><br><span class="line">    p = (ENode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ENode));   <span class="comment">//为新的边结点分配存储空间</span></span><br><span class="line">    p-&gt;adjVex = v;</span><br><span class="line">    p-&gt;w = w;</span><br><span class="line">    p -&gt; nextArc = lg-&gt;a[u];             <span class="comment">//将新的边结点插入单链表的最前面</span></span><br><span class="line">    lg-&gt;a[u] = p;</span><br><span class="line">    lg-&gt;e ++;                       </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//邻接表的删除边</span></span><br><span class="line"><span class="function">Status <span class="title">Remove</span><span class="params">(LGraph *lg,<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    ENode *p,*q;</span><br><span class="line">    <span class="keyword">if</span>(u &lt; <span class="number">0</span> || v &lt; <span class="number">0</span> || u &gt; lg-&gt;n<span class="number">-1</span> || v &gt; lg-&gt;n<span class="number">-1</span> || u == v) <span class="keyword">return</span> ERROR;</span><br><span class="line">    p = lg-&gt;a[u];</span><br><span class="line">    q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;adjVex != v)&#123;         <span class="comment">//查找待删除边是否存在</span></span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;nextArc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> NotPresent;       </span><br><span class="line">    <span class="keyword">if</span>(q) q-&gt;nextArc = p-&gt;nextArc;     <span class="comment">//从单链表删除此边</span></span><br><span class="line">    <span class="keyword">else</span> lg-&gt;a[u] = p-&gt;nextArc;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    lg-&gt;e --;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">//选出最小的d[i],i ∈ V-S</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Choose</span><span class="params">(<span class="keyword">int</span> d[],<span class="keyword">int</span> n,<span class="keyword">int</span> s[])</span></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> minpos;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ElemType min;</span><br><span class="line">    min = INFTY;</span><br><span class="line">    minpos = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i ++)&#123;         <span class="comment">//这里i初值改为0</span></span><br><span class="line">        <span class="keyword">if</span>( d[i] &lt;= min &amp;&amp; !s[i])&#123;  <span class="comment">//&lt;改为&lt;=</span></span><br><span class="line">            <span class="comment">// printf("Choose: d[%d]:%d ",i, d[i]);  </span></span><br><span class="line">            <span class="comment">//可以将这段注释打开理解</span></span><br><span class="line">            min = d[i];</span><br><span class="line">            minpos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minpos;                <span class="comment">//返回下标位置</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//Dijkstra算法</span></span><br><span class="line"><span class="function">Status <span class="title">Dijkstra</span><span class="params">(LGraph g,<span class="keyword">int</span> v,<span class="keyword">int</span> d[],<span class="keyword">int</span> path[])</span></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i,k,w,distance = <span class="number">0</span>;       <span class="comment">//增加了一个distance记录最短距离之和</span></span><br><span class="line">    <span class="keyword">int</span> *s;</span><br><span class="line">    <span class="keyword">if</span>(v &lt; <span class="number">0</span> || v &gt; g.n<span class="number">-1</span>)  <span class="keyword">return</span> ERROR;</span><br><span class="line">    ENode *j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*对辅助数据结构的初始化*/</span></span><br><span class="line">    s = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(g.n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">/*非源点结点初始化*/</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; g.n;i ++)&#123;      </span><br><span class="line">        s[i] = <span class="number">0</span>;                 <span class="comment">//表示顶点i是否在s中</span></span><br><span class="line">        <span class="keyword">for</span>( j=g.a[v];j!=<span class="literal">NULL</span>; j=j-&gt;nextArc) </span><br><span class="line">            <span class="keyword">if</span>(j-&gt;adjVex == i ) </span><br><span class="line">                d[i] = j-&gt;w;         <span class="comment">//v到i的距离</span></span><br><span class="line">        <span class="keyword">if</span>(i != v &amp;&amp; d[i] &lt; INFTY) path[i] = v;          </span><br><span class="line">        <span class="comment">//如果与源点有边相通,标识指向i的源点v</span></span><br><span class="line">        <span class="keyword">else</span> path[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*源点初始化*/</span></span><br><span class="line">    s[v] = <span class="number">1</span>;                     <span class="comment">//顶点v为源点,将原点v加入集合S</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The order:%d "</span>,v);              <span class="comment">//输出源点0</span></span><br><span class="line">    d[v] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*对辅助数据结构的初始化*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= g.n<span class="number">-1</span>;i ++)&#123;   <span class="comment">//最多产生n-1条最短路径,&lt;改为&lt;=</span></span><br><span class="line">        k = Choose(d, g.n ,s);      <span class="comment">//求当前路径最短者k</span></span><br><span class="line">        s[k] = <span class="number">1</span>;                 <span class="comment">//将k加入集合S中</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,k);</span><br><span class="line">        <span class="keyword">for</span>( j = g.a[k]; j!=<span class="literal">NULL</span>; j= j-&gt;nextArc)&#123;  <span class="comment">//更新d和path</span></span><br><span class="line">            <span class="keyword">if</span>( !s[j-&gt;adjVex] &amp;&amp; d[k] + j-&gt;w &lt; d[ j-&gt;adjVex ])&#123;        </span><br><span class="line">            <span class="comment">//未被访问过,且 当前边+到前个结点的权值 &lt; 现在的路径长度</span></span><br><span class="line">            <span class="comment">//j-&gt;adjVex为所有与v相邻接的顶点</span></span><br><span class="line">                d[j-&gt;adjVex ] = d[k] + j-&gt;w;</span><br><span class="line">                distance = d[j-&gt;adjVex ];  <span class="comment">//计算所有路径中的min距离</span></span><br><span class="line">                path[j-&gt;adjVex ] = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LGraph g;</span><br><span class="line">    <span class="keyword">int</span> nSize,edge,u,v,i;</span><br><span class="line">    <span class="keyword">int</span> s,t;  <span class="comment">//起点,终点</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) d[i] = INFTY;</span><br><span class="line">    <span class="keyword">int</span> path[<span class="number">100</span>];</span><br><span class="line">    ElemType w;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the number of mgraph's Nodes:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nSize);</span><br><span class="line">    Init(&amp;g,nSize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the mgraph's Edge num:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;edge);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; edge;i ++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Please enter the edge(Pu,Pv,Weight):"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        Insert(&amp;g,u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the Start Point :"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the Destination Point :"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"></span><br><span class="line">    Dijkstra(g,<span class="number">0</span>,d,path);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nThe shortest distance from %d to Point %d:%d\n"</span>,s,t, d[t]);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/12/16/数据结构实验3——图的基本运算及职能交通中的最佳路径选择问题/3.png" alt="3"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实验3-图的基本运算及职能交通中的最佳路径选择问题&quot;&gt;&lt;a href=&quot;#实验3-图的基本运算及职能交通中的最佳路径选择问题&quot; class=&quot;headerlink&quot; title=&quot;实验3.图的基本运算及职能交通中的最佳路径选择问题&quot;&gt;&lt;/a&gt;实验3.图的基本运算及
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://nymrli.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图论" scheme="https://nymrli.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="实验作业" scheme="https://nymrli.top/tags/%E5%AE%9E%E9%AA%8C%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
</feed>
