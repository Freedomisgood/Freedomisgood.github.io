<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>果粒橙的博客</title>
  
  <subtitle>别装作很努力，结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2019-05-27T14:02:21.379Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>果粒橙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信公众号Pyhton</title>
    <link href="https://nymrli.top/2019/05/27/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7Pyhton/"/>
    <id>https://nymrli.top/2019/05/27/微信公众号Pyhton/</id>
    <published>2019-05-27T14:01:10.000Z</published>
    <updated>2019-05-27T14:02:21.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信公众号Pyhton开发"><a href="#微信公众号Pyhton开发" class="headerlink" title="微信公众号Pyhton开发"></a>微信公众号Pyhton开发</h1><h2 id="编写上传代码到SAE"><a href="#编写上传代码到SAE" class="headerlink" title="编写上传代码到SAE"></a>编写上传代码到SAE</h2><p>1.申请SAE（sina application enginer），创建应用，<a href="https://www.sinacloud.com/doc/sae/tutorial/code-deploy.html#shi-yong-git-ke-hu-duan" target="_blank" rel="noopener">SAE使用文档</a></p><p>2.编写上传代码</p><p>weixin.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> web </span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeixinInterface</span>:</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">self.app_root=os.path.dirname(__file__)</span><br><span class="line">self.templates_root=os.path.join(self.app_root,<span class="string">'templates'</span>)</span><br><span class="line">self.render=web.template.render(self.templates_root)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(self)</span>:</span> </span><br><span class="line">data=web.input()</span><br><span class="line">signature=data.signature</span><br><span class="line">timestamp=data.timestamp </span><br><span class="line">nonce=data.nonce </span><br><span class="line">echostr=data.echostr </span><br><span class="line">token=<span class="string">"wxpython"</span></span><br><span class="line"></span><br><span class="line">l=[token,timestamp,nonce]</span><br><span class="line">l.sort()</span><br><span class="line">sha1=hashlib.sha1()</span><br><span class="line">map(sha1.update,l)</span><br><span class="line">hashcode=sha1.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hashcode == signature:</span><br><span class="line"><span class="keyword">return</span> echostr</span><br></pre></td></tr></table></figure><p>index.wsgi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#-*-coding:utf-8-*-</span><br><span class="line"></span><br><span class="line">import os </span><br><span class="line">import sae</span><br><span class="line">import web </span><br><span class="line">from weixin import WeixinInterface </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urls=(</span><br><span class="line">&apos;/weixin&apos;,&apos;WeixinInterface&apos;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app_root=os.path.dirname(__file__)</span><br><span class="line">templates_root=os.path.join(app_root,&apos;templates&apos;)</span><br><span class="line">render=web.template.render(templates_root)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app=web.application(urls,globals()).wsgifunc()</span><br><span class="line">application=sae.create_wsgi_app(app)</span><br></pre></td></tr></table></figure><p>config.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">wxpytest</span> </span><br><span class="line"><span class="attr">version:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">libraries:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">webpy</span> </span><br><span class="line"><span class="attr">  version:</span> <span class="string">"0.36"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">lxml</span> </span><br><span class="line"><span class="attr">  version:</span> <span class="string">"2.3.4"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>​    </p><p>3.微信公众号修改服务器配置</p><p><img src="/2019/05/27/微信公众号Pyhton/weixin.png" alt="weixin"></p><p>Token与代码中编写的保持一致，URL也要与指定的一致(即<code>...\weixin</code>)。</p><p>注意直接访问<code>&lt;http://vxquan.applinzi.com/weixin&gt;</code>是会报错的，但是可以通过微信公众平台的认证（因为直接访问是没有参数的，data=web.input没有异常处理）</p><h2 id="处理普通文本信息"><a href="#处理普通文本信息" class="headerlink" title="处理普通文本信息"></a>处理普通文本信息</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>1348831860<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[text]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Content</span>&gt;</span>&lt;![CDATA[this is a test]]&gt;<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgId</span>&gt;</span>1234567890123456<span class="tag">&lt;/<span class="name">MsgId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><p>▲.注意这边的OpenID不是真正的用户ID，不同公众号对相同用户获得的OpenID是不同的，换言之，这个只是该公众号能获得该用户的一个ID。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">POST</span><span class="params">(self)</span>:</span> </span><br><span class="line">str_xml=web. data()</span><br><span class="line">xml=etree.fromstring(str_xml)</span><br><span class="line">msgType=xml.find(<span class="string">"MsgType"</span>).text </span><br><span class="line">fromuser=xml.find(<span class="string">"FromUserName"</span>).text </span><br><span class="line">touser=xml.find(<span class="string">"ToUserName"</span>).text </span><br><span class="line"><span class="keyword">if</span> msgType==<span class="string">"text"</span>: </span><br><span class="line">content=xml. find(<span class="string">"Content"</span>).text</span><br><span class="line"><span class="keyword">return</span> self.render.reply_text(fromuser,touser,int(time.time()),content)</span><br><span class="line">    <span class="comment"># 注意这边To和from的改变，服务器(发送)--&gt;wx后台--&gt;用户(接收)</span></span><br></pre></td></tr></table></figure><p>记遇到的坑：</p><ul><li>1.POST好像必须要有处理，返回信息</li><li><ol start="2"><li>python2.7下字符串加u</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微信公众号Pyhton开发&quot;&gt;&lt;a href=&quot;#微信公众号Pyhton开发&quot; class=&quot;headerlink&quot; title=&quot;微信公众号Pyhton开发&quot;&gt;&lt;/a&gt;微信公众号Pyhton开发&lt;/h1&gt;&lt;h2 id=&quot;编写上传代码到SAE&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="环境部署" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Web" scheme="https://nymrli.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>DigitalOcean VPS注册</title>
    <link href="https://nymrli.top/2019/05/27/DigitalOcean-VPS%E6%B3%A8%E5%86%8C/"/>
    <id>https://nymrli.top/2019/05/27/DigitalOcean-VPS注册/</id>
    <published>2019-05-27T13:57:56.000Z</published>
    <updated>2019-05-27T13:59:17.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DigitalOcean-VPS搭梯子"><a href="#DigitalOcean-VPS搭梯子" class="headerlink" title="DigitalOcean VPS搭梯子"></a>DigitalOcean VPS搭梯子</h1><h2 id="DigitalOcean-VPS注册"><a href="#DigitalOcean-VPS注册" class="headerlink" title="DigitalOcean VPS注册"></a>DigitalOcean VPS注册</h2><p>首先通过 邀请链接(<a href="https://m.do.co/c/e89da76f57f2" target="_blank" rel="noopener">https://m.do.co/c/e89da76f57f2</a>)点进去<strong>注册</strong>，双方都会获得\$10奖励（注意是注册，我当时就没注意到，少了10\$</p><p>然后在<a href="https://education.github.com/pack" target="_blank" rel="noopener">Github Education</a>申请学生优惠，注意这边的学生优惠邮箱是校园邮箱(<a href="mailto:xxxx@njupt.edu.cn" target="_blank" rel="noopener">xxxx@njupt.edu.cn</a>)那个。我当时是将github账号与校园邮箱进行链接的。</p><p>学生优惠申请到后，pack界面会变成这样</p><p><img src="/2019/05/27/DigitalOcean-VPS注册/1.png" alt="1"></p><p>进入DO的页面后，用学校邮箱注册后，选用Paypal支付（先注册好Paypal），然后支付即可。</p><p>▲由于一开始我并没有使用学校邮箱注册，而是QQ邮箱，后来又注册了以后，发现这个账号被锁了，付的$5也退了回来。按网上的说法，DO会直接锁了我的账号，原因是一个人注册了多个账号。于是找解决方案。</p><p>网上说要发邮件，其中比较关键的是Ticket，一开始一直没找到，后来才发现这个是在<code>support</code>中选出来的.</p><p>等了一天最终收到的答复却是：</p><p><img src="/2019/05/27/DigitalOcean-VPS注册/reply.png" alt="reply"></p><blockquote><p>我们检查了该帐户，发现它符合与违反我们的服务条款和可接受使用策略相关的异常模式。虽然我们无法提供所观察到的特定标志的详细信息，但我们已经确定，恢复对该帐户的访问是不可能的。不便之处，敬请原谅。</p></blockquote><p>最终无奈之下，想起了使用的话跟学校邮箱没关系，那个只是提供优惠券的。于是重新尝试了下第一个注册的账号pay了$5以后就成功了。</p><h2 id="创建主机"><a href="#创建主机" class="headerlink" title="创建主机"></a>创建主机</h2><p><a href="https://blog.ooolg.com/index.php/20181125/131=131.html" target="_blank" rel="noopener"><a href="https://blog.ooolg.com/index.php/20181125/131=131.html" target="_blank" rel="noopener">搭建SSR科学上网（利用DigitalOcean服务器）</a></a></p><h2 id="使用优惠券"><a href="#使用优惠券" class="headerlink" title="使用优惠券"></a>使用优惠券</h2><p><a href="https://www.mf8.biz/digitalocean-github-pack/" target="_blank" rel="noopener">DigitalOcean 的学生包代金券使用教程</a></p><p><img src="/2019/05/27/DigitalOcean-VPS注册/billing.png" alt="billing"></p><p><img src="https://pics.mf8.biz/mf8/ex5gw.jpg" alt=""></p><p>输入<a href="https://education.github.com/pack" target="_blank" rel="noopener">Github Education</a>上获得的优惠券Code，就能拿到$50的优惠券了</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="ubuntu一键更换内核-安装锐速-16-04-14-04可用"><a href="#ubuntu一键更换内核-安装锐速-16-04-14-04可用" class="headerlink" title="ubuntu一键更换内核 安装锐速 - 16.04 14.04可用"></a><a href="https://www.jianshu.com/p/19ab389820ef" target="_blank" rel="noopener">ubuntu一键更换内核 安装锐速 - 16.04 14.04可用</a></h3><h3 id="PAC和全局模式"><a href="#PAC和全局模式" class="headerlink" title="PAC和全局模式"></a>PAC和全局模式</h3><p>1.在全局模式下，所有的网站都默认走代理（使你的所有http/socks数据经过代理服务器的转发送出。）</p><p>2.在PAC模式是只有被墙了的网站才会走代理（连接网站的时候读取PAC文件里的规则，来确定你访问的网站有没有被墙，如果符合，那就会使用代理服务器连接网站）</p><h3 id="优惠网站"><a href="#优惠网站" class="headerlink" title="优惠网站"></a>优惠网站</h3><p><a href="https://xianhuo.org/2016digitalocean-youhuima.html" target="_blank" rel="noopener">https://xianhuo.org/2016digitalocean-youhuima.html</a>  未测试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DigitalOcean-VPS搭梯子&quot;&gt;&lt;a href=&quot;#DigitalOcean-VPS搭梯子&quot; class=&quot;headerlink&quot; title=&quot;DigitalOcean VPS搭梯子&quot;&gt;&lt;/a&gt;DigitalOcean VPS搭梯子&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="生活福利" scheme="https://nymrli.top/tags/%E7%94%9F%E6%B4%BB%E7%A6%8F%E5%88%A9/"/>
    
  </entry>
  
  <entry>
    <title>PyWinAuto使用</title>
    <link href="https://nymrli.top/2019/05/27/PyWinAuto%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2019/05/27/PyWinAuto使用/</id>
    <published>2019-05-27T13:54:45.000Z</published>
    <updated>2019-05-27T13:55:06.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PyWinAuto使用"><a href="#PyWinAuto使用" class="headerlink" title="PyWinAuto使用"></a>PyWinAuto使用</h2><p>简单操作示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app = application.Application().start(<span class="string">r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'</span>)</span><br><span class="line"><span class="comment"># app = application.Application().start('notepad.exe')</span></span><br></pre></td></tr></table></figure><h3 id="一-判断程序的backend"><a href="#一-判断程序的backend" class="headerlink" title="(一) 判断程序的backend"></a>(一) 判断程序的backend</h3><p>注意，首先需要判断你要进行的程序是用什么语言写的，在实例化的时候会有区别，主要是判断backend是什么。 </p><p><img src="https://img-blog.csdn.net/20171007160746542?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hhd3Bhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><h3 id="二-确定自动化入口点"><a href="#二-确定自动化入口点" class="headerlink" title="(二)确定自动化入口点"></a>(二)确定自动化入口点</h3><p>这里主要是限制自动化控制进程的范围。如一个程序有多个实例，自动化控制一个实例，而保证其他实例(进程)不受影响。<br>主要有两种对象可以建立这种入口点——Application() , Desktop(). </p><ul><li>Application的作用范围是一个进程，如一般的桌面应用程序都为此类。 </li><li>Desktop的作用范围可以跨进程。主要用于像win10的计算器这样包含多个进程的程序。这种目前比较少见。使用方法见<a href="https://pywinauto.readthedocs.io/en/latest/getting_started.html#entry-points-for-automation" target="_blank" rel="noopener">entry-points-for-automation</a></li></ul><h3 id="三-连接到进程"><a href="#三-连接到进程" class="headerlink" title="(三)连接到进程"></a>(三)连接到进程</h3><p>建立好入口后，我们需要连接到进程中。这里有两种方法: </p><ul><li>使用Application对象的start()方法</li></ul><p><code>app = Application().start(r&quot;D:\Program Files (x86)\tlxsoft\屏幕录像专家 共享版 V2017\屏录专家.exe&quot;)</code></p><ul><li>连接到已有的进程。使用Application对象的connect()方法。这个方法对已有进程的绑定非常灵活。</li></ul><p><code>app = Application().connect(process=19188)</code></p><ul><li>使用窗口句柄绑定</li></ul><p>app = Application().connect(handle=0x00230DB6)</p><ul><li>使用程序路径绑定★</li></ul><p><code>app = Application().connect(path=r&quot;D:\Program Files (x86)\tlxsoft\屏幕录像专家 共享版 V2017\屏录专家.exe&quot;)</code></p><ul><li>使用标题、类型等匹配★★（灵活性比较高）</li></ul><p><code>app = Application().connect(title_re=&quot;屏幕录像专家.*&quot;, class_name=&quot;TMainForm&quot;)</code></p><hr><h3 id="菜单操作"><a href="#菜单操作" class="headerlink" title="菜单操作"></a>菜单操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dlg_spec = app.window(title=<span class="string">'屏幕录像专家 V2017'</span>)</span><br><span class="line">dlg_spec.menu_select(<span class="string">r"转换工具-&gt;EXE/LXE转成MP4"</span>)</span><br></pre></td></tr></table></figure><h3 id="快捷键操作"><a href="#快捷键操作" class="headerlink" title="快捷键操作"></a>快捷键操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dlg_spec = app.window(title=<span class="string">'屏幕录像专家 V2017'</span>)</span><br><span class="line">dlg_spec.type_keys(<span class="string">'%TP'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">SHIFT                            +      </span><br><span class="line">CTRL                             ^      </span><br><span class="line">ALT                               %</span><br><span class="line">空格键                            &#123;SPACE&#125;</span><br><span class="line"> </span><br><span class="line">BACKSPACE                        &#123;BACKSPACE&#125;、&#123;BS&#125;   or   &#123;BKSP&#125;      </span><br><span class="line">BREAK                            &#123;BREAK&#125;      </span><br><span class="line">CAPS   LOCK                      &#123;CAPSLOCK&#125;      </span><br><span class="line">DEL   or   DELETE                &#123;DELETE&#125;   or   &#123;DEL&#125;      </span><br><span class="line">DOWN   ARROW                     &#123;DOWN&#125;      </span><br><span class="line">END                              &#123;END&#125;      </span><br><span class="line">ENTER                            &#123;ENTER&#125;   or   ~      </span><br><span class="line">ESC                              &#123;ESC&#125;      </span><br><span class="line">HELP                             &#123;HELP&#125;      </span><br><span class="line">HOME                             &#123;HOME&#125;      </span><br><span class="line">INS   or   INSERT                &#123;INSERT&#125;   or   &#123;INS&#125;      </span><br><span class="line">LEFT   ARROW                     &#123;LEFT&#125;      </span><br><span class="line">NUM   LOCK                       &#123;NUMLOCK&#125;      </span><br><span class="line">PAGE   DOWN                      &#123;PGDN&#125;      </span><br><span class="line">PAGE   UP                        &#123;PGUP&#125;      </span><br><span class="line">PRINT   SCREEN                   &#123;PRTSC&#125;      </span><br><span class="line">RIGHT   ARROW                    &#123;RIGHT&#125;      </span><br><span class="line">SCROLL   LOCK                    &#123;SCROLLLOCK&#125;      </span><br><span class="line">TAB                              &#123;TAB&#125;      </span><br><span class="line">UP   ARROW                       &#123;UP&#125;     </span><br><span class="line">+                                &#123;ADD&#125;      </span><br><span class="line">-                                &#123;SUBTRACT&#125;      </span><br><span class="line">*                                &#123;MULTIPLY&#125;      </span><br><span class="line">/                                &#123;DIVIDE&#125;</span><br><span class="line">F1                               &#123;F1&#125; </span><br><span class="line">F2                               &#123;F2&#125; </span><br><span class="line">F3                               &#123;F3&#125; </span><br><span class="line">.....</span><br><span class="line">F15                             &#123;F15&#125; </span><br><span class="line">F16                             &#123;F16&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/qq_37193537/article/details/81207907" target="_blank" rel="noopener">pywinauto 使用</a></p><p><a href="https://www.cnblogs.com/mapu/p/9235587.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/mapu/p/9235587.html" target="_blank" rel="noopener">python自动化工具之pywinauto</a></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PyWinAuto使用&quot;&gt;&lt;a href=&quot;#PyWinAuto使用&quot; class=&quot;headerlink&quot; title=&quot;PyWinAuto使用&quot;&gt;&lt;/a&gt;PyWinAuto使用&lt;/h2&gt;&lt;p&gt;简单操作示例：&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="自动化运维" scheme="https://nymrli.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Google Colab使用</title>
    <link href="https://nymrli.top/2019/05/27/Google-Colab%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2019/05/27/Google-Colab使用/</id>
    <published>2019-05-27T13:53:31.000Z</published>
    <updated>2019-05-27T13:53:51.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Google-Colab使用"><a href="#Google-Colab使用" class="headerlink" title="Google Colab使用"></a>Google Colab使用</h1><blockquote><p>Google colab(Colaboratory)在编辑时候和jupyter notebook类似，并且提供免费的GPU以供使用，这对于需要处理大量数据运算的机器项目来说再合适不过了。挺香的</p></blockquote><p>新建一个笔记本（.ipynb）后，选择”修改-&gt;笔记本设置-&gt;硬件加速器-&gt;GPU”就可以想要用英伟达Tesla K80 GPU啦(2599美元一块)</p><h2 id="colab中文件交互"><a href="#colab中文件交互" class="headerlink" title="colab中文件交互"></a>colab中文件交互</h2><p>文档里提供了四种方式，分别是：</p><ol><li>从本地直接上传</li><li>连接Google Drive</li><li>连接Google Sheet</li><li>连接Google Cloud Storage</li></ol><h3 id="与本地文件交互"><a href="#与本地文件交互" class="headerlink" title="与本地文件交互"></a>与本地文件交互</h3><h4 id="本地文件上传"><a href="#本地文件上传" class="headerlink" title="本地文件上传"></a>本地文件上传</h4><p><code>files.upload()</code> 返回一个由我们上传的所有文件构成的一个字典。 这个字典的<code>key</code>是文件名, 这个字典的<code>value</code>是我们上传的文件的<code>data</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from google.colab import files</span><br><span class="line"></span><br><span class="line">uploaded = files.upload()</span><br><span class="line"></span><br><span class="line">for fn in uploaded.keys():</span><br><span class="line">    print(&apos;User uploaded file &quot;&#123;name&#125;&quot; with length &#123;length&#125; bytes&apos;.format(name=fn, length=len(uploaded[fn])))</span><br></pre></td></tr></table></figure><h4 id="从colab下载文件到本地"><a href="#从colab下载文件到本地" class="headerlink" title="从colab下载文件到本地"></a>从colab下载文件到本地</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from google.colab import files</span><br><span class="line">with open(&apos;example.txt&apos;, &apos;w&apos;) as f:</span><br><span class="line">      f.write(&apos;some content&apos;)</span><br><span class="line">files.download(&apos;example.txt&apos;)</span><br></pre></td></tr></table></figure><h3 id="连接Google-Drive"><a href="#连接Google-Drive" class="headerlink" title="连接Google Drive"></a>连接Google Drive</h3><h4 id="PyDrive"><a href="#PyDrive" class="headerlink" title="PyDrive"></a>PyDrive</h4><p>这里官方有提供了许多种方法。这里我就挑一种介绍了，有兴趣的可以点进这个<a href="https://colab.research.google.com/notebooks/io.ipynb#scrollTo=P3KX0Sm0E2sF" target="_blank" rel="noopener">Colab官方文档</a>进去看。</p><p>这里只介绍使用<code>PyDrive</code>的方法。PyDrive是google-api-python-client的包装库，简化了许多常见的Google Drive API任务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">!pip install -U -q PyDrive</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pydrive.auth <span class="keyword">import</span> GoogleAuth</span><br><span class="line"><span class="keyword">from</span> pydrive.drive <span class="keyword">import</span> GoogleDrive</span><br><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> auth</span><br><span class="line"><span class="keyword">from</span> oauth2client.client <span class="keyword">import</span> GoogleCredentials</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 验证身份并创建pydrive客户端.</span></span><br><span class="line">auth.authenticate_user()</span><br><span class="line">gauth = GoogleAuth()</span><br><span class="line">gauth.credentials = GoogleCredentials.get_application_default()</span><br><span class="line">drive = GoogleDrive(gauth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># PyDrive 参考:</span></span><br><span class="line"><span class="comment"># https://gsuitedevs.github.io/PyDrive/docs/build/html/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建并上传一个文本文档.</span></span><br><span class="line">uploaded = drive.CreateFile(&#123;<span class="string">'title'</span>: <span class="string">'Sample upload.txt'</span>&#125;)</span><br><span class="line">uploaded.SetContentString(<span class="string">'Sample upload file content'</span>)</span><br><span class="line">uploaded.Upload()</span><br><span class="line">print(<span class="string">'Uploaded file with ID &#123;&#125;'</span>.format(uploaded.get(<span class="string">'id'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 通过id访问文件并输出它的内容.</span></span><br><span class="line">downloaded = drive.CreateFile(&#123;<span class="string">'id'</span>: uploaded.get(<span class="string">'id'</span>)&#125;)</span><br><span class="line">print(<span class="string">'Downloaded content "&#123;&#125;"'</span>.format(downloaded.GetContentString()))</span><br></pre></td></tr></table></figure><h4 id="Mounting-Google-Drive-locally"><a href="#Mounting-Google-Drive-locally" class="headerlink" title="Mounting Google Drive locally"></a>Mounting Google Drive locally</h4><p>首先把整个项目工程上传到 Google Drive 中，然后在该项目文件夹下（执行的主函数文件同一目录）新建一个 run.ipynb。新建方法与之前一样，在项目文件夹中 <strong>右键-更多-Colaboratory</strong>。</p><p>然后，在新建的笔记本中挂载 Google Drive：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from google.colab import drive</span><br><span class="line">drive.mount(&apos;/content/drive/&apos;)</span><br></pre></td></tr></table></figure><p>执行以上语句后，会出现一个链接。点击链接，获取并键入 authorization code，回车，等待圈圈转完就能在左侧刷新，看到挂载的Drive</p><p><img src="https://img-blog.csdnimg.cn/20181129134537107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0NDcyNQ==,size_16,color_FFFFFF,t_70" alt=""></p><p>挂载 Drive 网上还有另一种方法，语句很多很复杂，但这个好像没啥区别。。</p><p>对于这个服务器而言，整体目录结构是这样的：<br>顶级目录为 content，我们进入笔记本后无论笔记本在哪，当前工作目录都是 /content。/content下默认有 sample_data 目录，其中包括运行示例程序的一些必要数据文件。我们的 Google Drive 作为一个 My Drive 文件夹挂载在 /content/drive 文件夹下。我的项目是“我的云端硬盘”里的一个tiny-yolo文件夹，因此我的项目的路径应该为 /content/drive/My Drive/tiny-yolo。这里大家试一试就明白了，比我说啥都快。</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ol><li>为了保证资源的合理分配，google 会按照一定机制将服务器回收：它会一定时间后自动回收已连接但闲置的服务器，和有运行代码但未连接的服务器。所以想挂机跑代码，要保证与服务器保持连接（不掉线），否则一早起来可能就会发现它被悄悄的回收了。稍微掉线个几分钟就连回去是没什么问题的。</li><li>在回收服务器后，写到 My Drive 以外其他文件夹下的文件都将被删除，下次再连接就是一台崭新的服务器了。</li><li>挂载 Drive 后再向 Google Drive上传文件，同步到 notebook 那边会有一定的延迟，大概等个几秒钟到半分钟不等，多刷新几下就会出现了。删除文件也是。然而在删除 <a href="http://a.py/" target="_blank" rel="noopener">a.py</a> 后，如果没等 notebook 那边反应过来就重新再传一个 <a href="http://a.py/" target="_blank" rel="noopener">a.py</a>，notebook 那边很可能就出现一个被重命名的文件 a(1).py。。难道是我姿势不对？？</li><li>有一次我上传近 3000 张图片作为训练集到 Drive，上传成功，但是 notebook 没读全，!ls “/content/drive/My Drive/tiny-yolo/data” | wc -l 看一眼花式少文件，我也不知道为啥。。总是迷之过会 (hen) 儿 (jiu) 就好了。。搞得我也是很醉。</li></ol><p><a href="https://blog.csdn.net/qqqinrui/article/details/84975799" target="_blank" rel="noopener">如何使用google drive的免费GPU进行深度学习</a></p><hr><h3 id="连接Google-Sheet"><a href="#连接Google-Sheet" class="headerlink" title="连接Google Sheet"></a>连接Google Sheet</h3><h3 id="连接Google-Cloud-Storage"><a href="#连接Google-Cloud-Storage" class="headerlink" title="连接Google Cloud Storage"></a>连接Google Cloud Storage</h3><p>参考：<a href="https://www.jianshu.com/p/04622e352113" target="_blank" rel="noopener">colab读写外部文件的四种方式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Google-Colab使用&quot;&gt;&lt;a href=&quot;#Google-Colab使用&quot; class=&quot;headerlink&quot; title=&quot;Google Colab使用&quot;&gt;&lt;/a&gt;Google Colab使用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Google co
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="图像处理" scheme="https://nymrli.top/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Keras使用——图像增强</title>
    <link href="https://nymrli.top/2019/05/27/Keras%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA/"/>
    <id>https://nymrli.top/2019/05/27/Keras使用——图像增强/</id>
    <published>2019-05-27T13:52:14.000Z</published>
    <updated>2019-05-27T13:52:52.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Keras使用——图像增强"><a href="#Keras使用——图像增强" class="headerlink" title="Keras使用——图像增强"></a>Keras使用——图像增强</h1><h2 id="使用Keras进行深度学习的图像增强（Image-Augmentation）"><a href="#使用Keras进行深度学习的图像增强（Image-Augmentation）" class="headerlink" title="使用Keras进行深度学习的图像增强（Image Augmentation）"></a>使用Keras进行深度学习的图像增强（Image Augmentation）</h2><blockquote><p>Keras是一个高层神经网络API，Keras由纯Python编写而成并基Tensorflow、Theano以及CNTK后端。<br>Keras为支持快速实验而生，能够把你的idea迅速转换为结果，如果你有如下需求，请选择Keras：</p><ul><li>简易和快速的原型设计（keras具有高度模块化，极简，和可扩充特性）</li><li>支持CNN和RNN，或二者的结合</li><li>无缝CPU和GPU切换</li></ul></blockquote><h3 id="ImageDataGenerator"><a href="#ImageDataGenerator" class="headerlink" title="ImageDataGenerator"></a>ImageDataGenerator</h3><p>Keras提供了ImageDataGenerator类，定义关于图片准备和增强的配置。包括以下功能：样本级的标准化特征级的标准化ZCA白化.随机旋转、转换、剪切、翻转维度重排.将增强的图片保存在本地.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator, array_to_img, img_to_array, load_img</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">Datagen = ImageDataGenerator(rotation_range=<span class="number">20</span>,</span><br><span class="line">        shear_range=<span class="number">0.2</span>,</span><br><span class="line">        zoom_range=<span class="number">0.2</span>,</span><br><span class="line">        horizontal_flip=<span class="keyword">True</span>,</span><br><span class="line">        vertical_flip = <span class="keyword">True</span>,</span><br><span class="line">        fill_mode=<span class="string">'nearest'</span>)</span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>):</span><br><span class="line">    <span class="keyword">if</span> file_name ==<span class="string">'.config'</span> <span class="keyword">or</span> file_name == <span class="string">'sample_data'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    img = load_img(file_name)</span><br><span class="line">    x_img = img_to_array(img)</span><br><span class="line">    x_img = x_img.reshape((<span class="number">1</span>,)+ x_img.shape)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> img_batch <span class="keyword">in</span> Datagen.flow(x_img,</span><br><span class="line">                  batch_size=<span class="number">32</span>,</span><br><span class="line">                  save_to_dir=<span class="string">'.'</span>,</span><br><span class="line">                  save_prefix=<span class="string">'candy'</span>,</span><br><span class="line">                  save_format=<span class="string">'jpg'</span>):</span><br><span class="line">        i +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">10</span>:</span><br><span class="line">           <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="ImageDataGenerator参数详解及用法实例"><a href="#ImageDataGenerator参数详解及用法实例" class="headerlink" title="ImageDataGenerator参数详解及用法实例"></a>ImageDataGenerator参数详解及用法实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">keras.preprocessing.image.ImageDataGenerator(featurewise_center=<span class="keyword">False</span>,</span><br><span class="line">    samplewise_center=<span class="keyword">False</span>,</span><br><span class="line">    featurewise_std_normalization=<span class="keyword">False</span>,</span><br><span class="line">    samplewise_std_normalization=<span class="keyword">False</span>,</span><br><span class="line">    zca_whitening=<span class="keyword">False</span>,</span><br><span class="line">    zca_epsilon=<span class="number">1e-6</span>,</span><br><span class="line">    rotation_range=<span class="number">0.</span>,</span><br><span class="line">    width_shift_range=<span class="number">0.</span>,</span><br><span class="line">    height_shift_range=<span class="number">0.</span>,</span><br><span class="line">    shear_range=<span class="number">0.</span>,</span><br><span class="line">    zoom_range=<span class="number">0.</span>,</span><br><span class="line">    channel_shift_range=<span class="number">0.</span>,</span><br><span class="line">    fill_mode=<span class="string">'nearest'</span>,</span><br><span class="line">    cval=<span class="number">0.</span>,</span><br><span class="line">    horizontal_flip=<span class="keyword">False</span>,</span><br><span class="line">    vertical_flip=<span class="keyword">False</span>,</span><br><span class="line">    rescale=<span class="keyword">None</span>,</span><br><span class="line">    preprocessing_function=<span class="keyword">None</span>,</span><br><span class="line">    data_format=K.image_data_format())</span><br></pre></td></tr></table></figure><p>▲用以生成一个batch的图像数据，支持实时数据提升。训练时该函数会无限生成数据，直到达到规定的epoch次数为止。</p><blockquote><ul><li>featurewise_center：布尔值，使输入数据集去中心化（均值为0）, 按feature执行</li><li>samplewise_center：布尔值，使输入数据的每个样本均值为0</li><li>featurewise_std_normalization：布尔值，将输入除以数据集的标准差以完成标准化, 按feature执行</li><li>samplewise_std_normalization：布尔值，将输入的每个样本除以其自身的标准差</li><li>zca_whitening：布尔值，对输入数据施加ZCA白化</li><li>zca_epsilon: ZCA使用的eposilon，默认1e-6</li><li>rotation_range：整数，数据提升时图片随机转动的角度</li><li>width_shift_range：浮点数，图片宽度的某个比例，数据提升时图片水平偏移的幅度</li><li>height_shift_range：浮点数，图片高度的某个比例，数据提升时图片竖直偏移的幅度</li><li>shear_range：浮点数，剪切强度（逆时针方向的剪切变换角度）</li><li>zoom_range：浮点数或形如[lower,upper]的列表，随机缩放的幅度，若为浮点数，则相当于[lower,upper] = [1 - zoom_range, 1+zoom_range]</li><li>channel_shift_range：浮点数，随机通道偏移的幅度</li><li>fill_mode：；‘constant’，‘nearest’，‘reflect’或‘wrap’之一，当进行变换时超出边界的点将根据本参数给定的方法进行处理</li><li>cval：浮点数或整数，当fill_mode=constant时，指定要向超出边界的点填充的值</li><li>horizontal_flip：布尔值，进行随机水平翻转</li><li>vertical_flip：布尔值，进行随机竖直翻转</li><li>rescale: 重放缩因子,默认为None. 如果为None或0则不进行放缩,否则会将该数值乘到数据上(在应用其他变换之前)</li><li>preprocessing_function: 将被应用于每个输入的函数。该函数将在图片缩放和数据提升之后运行。该函数接受一个参数，为一张图片（秩为3的numpy array），并且输出一个具有相同shape的numpy array</li><li>data_format：字符串，“channel_first”或“channel_last”之一，代表图像的通道维的位置。该参数是Keras 1.x中的image_dim_ordering，“channel_last”对应原本的“tf”，“channel_first”对应原本的“th”。以128x128的RGB图像为例，“channel_first”应将数据组织为（3,128,128），而“channel_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channel_last”</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator, array_to_img, img_to_array, load_img</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">Datagen = ImageDataGenerator(</span><br><span class="line">        rotation_range=<span class="number">5</span>,<span class="comment">#图片随机翻转的角度</span></span><br><span class="line">        width_shift_range=[<span class="number">0</span>,<span class="number">0.15</span>],</span><br><span class="line">        height_shift_range=[<span class="number">0</span>,<span class="number">0.2</span>],</span><br><span class="line">        zoom_range=[<span class="number">0.8</span>,<span class="number">1.5</span>], <span class="comment">#随机放大</span></span><br><span class="line">        zca_whitening=<span class="keyword">True</span>,</span><br><span class="line">        brightness_range=[<span class="number">0.1</span>, <span class="number">1.5</span>] ,    </span><br><span class="line">        fill_mode=<span class="string">'nearest'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IMG_PATH = <span class="string">'./images'</span></span><br><span class="line">OUT_PATH = <span class="string">'./add'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in os.listdir(OUT_PATH):</span></span><br><span class="line"><span class="comment">#     if i.startswith('N'):</span></span><br><span class="line"><span class="comment">#         os.remove(os.path.join(OUT_PATH,i) )</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> os.listdir(IMG_PATH):</span><br><span class="line">    img = load_img( os.path.join(IMG_PATH,file_name) )</span><br><span class="line">    x_img = img_to_array(img)</span><br><span class="line">    x_img = x_img.reshape( (<span class="number">1</span>,)+ x_img.shape )</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">not</span> os.path.exists( os.path.join( OUT_PATH,file_name ) ) ):</span><br><span class="line">        os.mkdir( os.path.join( OUT_PATH,file_name ))</span><br><span class="line">    <span class="keyword">for</span> img_batch <span class="keyword">in</span> Datagen.flow(x_img,</span><br><span class="line">                  batch_size=<span class="number">2</span>, <span class="comment">#batch_size一次增强的图片个数</span></span><br><span class="line">                  save_to_dir= os.path.join(OUT_PATH,file_name),</span><br><span class="line">                  save_prefix=<span class="string">'N'</span>,</span><br><span class="line">                  save_format=<span class="string">'jpg'</span>):</span><br><span class="line">        i +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">80</span>:</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">print(<span class="string">'done'</span>)</span><br></pre></td></tr></table></figure><p>参考资料：</p><p><a href="https://blog.csdn.net/jacke121/article/details/79245732#commentBox" target="_blank" rel="noopener">参数说明</a></p><p><a href="https://keras.io/zh/preprocessing/image/" target="_blank" rel="noopener">keras中文手册</a></p><p><a href="https://www.cnblogs.com/hutao722/p/10075150.html" target="_blank" rel="noopener">https://www.cnblogs.com/hutao722/p/10075150.html</a></p><p><a href="https://www.cnblogs.com/hutao722/p/10075150.html" target="_blank" rel="noopener">https://www.cnblogs.com/hutao722/p/10075150.html</a></p><h3 id="flow-from-directory实现从文件夹中提取图片和进行简单归一化处理"><a href="#flow-from-directory实现从文件夹中提取图片和进行简单归一化处理" class="headerlink" title="flow_from_directory实现从文件夹中提取图片和进行简单归一化处理"></a>flow_from_directory实现从文件夹中提取图片和进行简单归一化处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">flow_from_directory(self, directory,</span><br><span class="line">                            target_size=(<span class="number">256</span>, <span class="number">256</span>), color_mode=<span class="string">'rgb'</span>,</span><br><span class="line">                            classes=<span class="keyword">None</span>, class_mode=<span class="string">'categorical'</span>,</span><br><span class="line">                            batch_size=<span class="number">32</span>, shuffle=<span class="keyword">True</span>, seed=<span class="keyword">None</span>,</span><br><span class="line">                            save_to_dir=<span class="keyword">None</span>,</span><br><span class="line">                            save_prefix=<span class="string">''</span>,</span><br><span class="line">                            save_format=<span class="string">'jpeg'</span>,</span><br><span class="line">                            follow_links=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>最值得注意的是directory这个参数：</p><blockquote><p>directory: path to the target directory. It should contain one subdirectory per class. Any PNG, JPG, BMP, PPM or TIF images inside each of the subdirectories directory tree will be included in the generator. </p></blockquote><p>这是官方文档的定义，它的目录格式一定要注意是包含一个子目录下的所有图片这种格式，driectoty路径只要写到标签路径上面的那个路径即可。</p><ul><li>target_size：可是实现对图片的尺寸转换，是预处理中比较常用的方法</li><li>save_to_dir: 可以设置保存处理后图片的路径。</li><li>save_prefix: 可以对处理后图片设置前缀。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span>  plt</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> image</span><br><span class="line"> </span><br><span class="line">path = <span class="string">'train/'</span></span><br><span class="line">gen_path = <span class="string">'result/'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_result</span><span class="params">(path)</span>:</span></span><br><span class="line">    name_list = glob.glob(path)</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">        img = Image.open(name_list[i])</span><br><span class="line">        <span class="comment"># add_subplot(331) 参数一：子图总行数，参数二：子图总列数，参数三：子图位置</span></span><br><span class="line">        sub_img = fig.add_subplot(<span class="number">331</span> + i)</span><br><span class="line">        sub_img.imshow(img)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="keyword">return</span> fig</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打印图片列表</span></span><br><span class="line">name_list = glob.glob(path + <span class="string">'*/*'</span>)</span><br><span class="line">print(name_list)</span><br><span class="line"><span class="comment"># ['train\\00a366d4b4a9bbb6c8a63126697b7656.jpg', 'train\\00f34ac0a16ef43e6fd1de49a26081ce.jpg', 'train\\0a5f744c5077ad8f8d580081ba599ff5.jpg', 'train\\0a70f64352edfef4c82c22015f0e3a20.jpg', 'train\\0a783538d5f3aaf017b435ddf14cc5c2.jpg', 'train\\0a896d2b3af617df543787b571e439d8.jpg', 'train\\0abdda879bb143b19e3c480279541915.jpg', 'train\\0ac12f840df2b15d46622e244501a88c.jpg', 'train\\0b6c5bc46b7a0e29cddfa45b0b786d09.jpg']</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打印图片</span></span><br><span class="line">fig = print_result(path + <span class="string">'*/*'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line">fig.savefig(gen_path + <span class="string">'/original_0.png'</span>, dpi=<span class="number">200</span>, papertype=<span class="string">'a5'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 原图</span></span><br><span class="line">datagen = image.ImageDataGenerator()</span><br><span class="line">gen_data = datagen.flow_from_directory(path, batch_size=<span class="number">1</span>, shuffle=<span class="keyword">False</span>, save_to_dir=gen_path ,</span><br><span class="line">                                       save_prefix=<span class="string">'dog_gen'</span>, target_size=(<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    gen_data.next()</span><br><span class="line"> </span><br><span class="line">fig = print_result(gen_path + <span class="string">'/*'</span>)</span><br><span class="line">fig.savefig(gen_path + <span class="string">'/original_1.png'</span>, dpi=<span class="number">200</span>, papertype=<span class="string">'a5'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Keras使用——图像增强&quot;&gt;&lt;a href=&quot;#Keras使用——图像增强&quot; class=&quot;headerlink&quot; title=&quot;Keras使用——图像增强&quot;&gt;&lt;/a&gt;Keras使用——图像增强&lt;/h1&gt;&lt;h2 id=&quot;使用Keras进行深度学习的图像增强（Im
      
    
    </summary>
    
    
      <category term="图像处理" scheme="https://nymrli.top/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="深度学习" scheme="https://nymrli.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python机器学习及实践——从零开始通往Kaggle竞赛之路</title>
    <link href="https://nymrli.top/2019/05/27/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%80%9A%E5%BE%80Kaggle%E7%AB%9E%E8%B5%9B%E4%B9%8B%E8%B7%AF/"/>
    <id>https://nymrli.top/2019/05/27/Python机器学习及实践——从零开始通往Kaggle竞赛之路/</id>
    <published>2019-05-27T13:50:34.000Z</published>
    <updated>2019-05-27T13:50:52.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python机器学习及实践——从零开始通往Kaggle竞赛之路"><a href="#Python机器学习及实践——从零开始通往Kaggle竞赛之路" class="headerlink" title="Python机器学习及实践——从零开始通往Kaggle竞赛之路"></a>Python机器学习及实践——从零开始通往Kaggle竞赛之路</h1><h1 id="监督学习模型"><a href="#监督学习模型" class="headerlink" title="监督学习模型"></a>监督学习模型</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h3><h4 id="Logistic"><a href="#Logistic" class="headerlink" title="Logistic"></a>Logistic</h4><p>逻辑回归函数 ： $g(z)=\frac {1}{1+_e^{-z}} $</p><p>逻辑回归模型$h_{w,b}(x)=g(f(w,x,b)) = \frac{1}{1+e^{-z}} = \frac {1}{1+e^{-(w^{T}x+b)}}$</p><h5 id="处理缺省值的方法："><a href="#处理缺省值的方法：" class="headerlink" title="处理缺省值的方法："></a>处理缺省值的方法：</h5><p>1.缺省值较少时直接删除数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = data.replace(to_replace=<span class="string">'? '</span> ,value = np.nan)</span><br><span class="line">data = data.dropna(how=<span class="string">'any'</span>)</span><br></pre></td></tr></table></figure><h5 id="分割数据"><a href="#分割数据" class="headerlink" title="分割数据"></a>分割数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train , Y_train , X_test , Y_test = train_test_split(data[names[<span class="number">1</span>:<span class="number">10</span>]],data[names[<span class="number">10</span>]],test_size = <span class="number">0.25</span>,random_state = <span class="number">33</span>)</span><br><span class="line"><span class="comment"># 参数说明 ： $1X，$2Y，$3分割规模，$4分割种子</span></span><br></pre></td></tr></table></figure><h5 id="标准化数据"><a href="#标准化数据" class="headerlink" title="标准化数据"></a>标准化数据</h5><blockquote><p>保证每个维度的特征数据方差为1，均值为0，使得预测结果不回被某些维度过大的特征值主导</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">s = StandardScaler()</span><br><span class="line">X_train = s.fit_transform(X_train)</span><br><span class="line">X_test = s.transform(X_test)</span><br></pre></td></tr></table></figure><h5 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h5><blockquote><p>….</p></blockquote><p>:dart:逻辑回归对参数的计算采用精确解析的方式，时间长性能高；SGD（随机梯度上升）分类估计模型参数，时间短性能低。数据规模在10W量级时考虑对时间的消耗，更推荐使用随机梯度方法对模型参数进行估计。</p><p>:memo:说明用例：良恶性肿瘤</p><h4 id="支持向量机（​​分类）"><a href="#支持向量机（​​分类）" class="headerlink" title="支持向量机（​​分类）"></a>支持向量机（​​分类）</h4><p>决定直线位置的并不是所有数据，而是其中 <em>两个空间间隔最小</em> 的 <em>两个不同类别</em> 的数据点，把着中国真正帮助决策最有线性分类模型的数据点叫做“<strong>支持向量</strong>” 。同时要指出的是，logistic模型考虑了所有数据样本对参数的影响，所以不一定能获得最佳的分类器。</p><h5 id="多分类的SVM"><a href="#多分类的SVM" class="headerlink" title="多分类的SVM"></a>多分类的SVM</h5><p>将其中一类看作是阳性（正）样本，其余的全看成负样本。如有10个类别，则创造10个二分类任务。</p><p>:dart:SVM具有精妙的模型假设，可以在高维度的数据中筛选对预测任务有效的少数训练样本，不仅节省模型学习需要的数据内存，还提高了模型的预测性能，但是同时是以CPU资源和计算时间为代价的。</p><p>:memo:手写体数据​： 需要知道的是，经典模型没有对结构性信息学习的能力，所以这边对图片的处理其实是将2D图片像素矩阵（scikit-learn数据集里的是8*8）逐行首尾拼接为1D的像素特征向量。</p><h3 id="非线性模型"><a href="#非线性模型" class="headerlink" title="非线性模型"></a>非线性模型</h3><h4 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h4><blockquote><p>单独考量每一个维度特征被分类的条件概论，进而综合这些概率并对其所在的特征向量做出分类预测。</p><p><strong>数学假设</strong>：各个维度上的特征被分类的条件概率之间是相互独立的。</p></blockquote><p>:dart:具有较强的特征条件独立假设，使得模型预测所需要估计的参数规模从幂指数量级向线性量级减少，极大​节约了内存消耗和计算时间。但也受限与这种强假设的限制，训练时<strong>无法将各个特征之间的联系</strong>考量在内，使得该模型再其他数据特征关联性较强的分类任务上的性能表现不佳。</p><p>:memo:文本分类：互联网新闻分类、垃圾邮件筛选</p><h4 id="K近邻（KNN）"><a href="#K近邻（KNN）" class="headerlink" title="K近邻（KNN）"></a>K近邻（KNN）</h4><p>设有一个测试样本点，以及已经分好类（带有标签）的训练样本。那么该样本点的类别判定会根据在特征空间中最近的K个已标记样本作为参考。因此模型的性能很大程度上取决于K值的设定，但是K值不属于训练数据后学习的参数，而是模型初始化时需要提前确定的。</p><p>:dart:是无参数模型中最简单的一种，由于需要对预先加载在内存的训练样本进行遍历，逐一计算相似度、排序且选择K个最近邻训练样本的标记。所以是O(N2)的算法复杂度，一旦数据量大，可能会花费更多的时间（另一种理解为空间换时间，可探讨）</p><p>:memo: iris鸢尾花数据集​ : ▲在对数据进行分割时请保证随机取样！<br>由于scikit-learn获得的Iris数据集是根据类别依次排列的，所以如果只采样前25%那么所有采样的样本都是同一个类别，同时由于训练样本是<strong>不平衡的</strong>(Unbalanced)，这样取得的结果存在偏差，且可信度低。因此随机采样<code>train_test_split(data[names[1:10]],data[names[10]],test_size = 0.25,random_state = 33)</code>设置随机种子是必要的。</p><h4 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h4><blockquote><p>每个节点可以看作是二分类任务，根据不同特征组合搭建多层决策树，在学习时需要考虑特征节点的选择顺序。（度量方式：信息熵、基尼不纯性）</p></blockquote><h5 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h5><h6 id="缺省值："><a href="#缺省值：" class="headerlink" title="缺省值："></a>缺省值：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X = titannic[[<span class="string">'pclass'</span>,<span class="string">'age'</span>,<span class="string">'sex'</span>]]</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 补充age里的数据，使用平均数或者中位数都是对模型偏离成都造成最小影响的策略</span></span><br><span class="line">X[<span class="string">'age'</span>].fillna(X[<span class="string">'age'</span>].mean(),inplace = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h6 id="特征值转换"><a href="#特征值转换" class="headerlink" title="特征值转换"></a>特征值转换</h6><p>类别性特征值转换为数值特征，用0/1代替</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line">vec = DictVectorizer(sparse = <span class="keyword">False</span>)</span><br><span class="line">X_train = vec.fit_transform(X_train.to_dict(orient=<span class="string">'record'</span>))</span><br><span class="line">print(vec.feature_names)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'age'</span>,<span class="string">'plcass=1st'</span>,<span class="string">'pclass=2nd'</span>, <span class="string">'sex=female'</span>,<span class="string">'sex=male'</span>]</span><br></pre></td></tr></table></figure><p>:dart:决策树在模型描述上有巨大的优势，推断逻辑非常直观，有清晰的可解释性，也方便模型的可视化。同时这些特性也保证了使用决策树时，无需考虑对数据量化甚至标准化。决策树属于有参数模型，需要花费更多时间在训练数据上面</p><p>:memo:泰坦尼克号沉船事故</p><h2 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h2><h3 id="线性回归器"><a href="#线性回归器" class="headerlink" title="线性回归器"></a>线性回归器</h3><p>:dart:美国波士顿地区房价</p><h3 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h3><h3 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h3><h3 id="回归树"><a href="#回归树" class="headerlink" title="回归树"></a>回归树</h3><h3 id="集成模型"><a href="#集成模型" class="headerlink" title="集成模型"></a>集成模型</h3><h1 id="无监督学习模型"><a href="#无监督学习模型" class="headerlink" title="无监督学习模型"></a>无监督学习模型</h1><h2 id="数据聚类"><a href="#数据聚类" class="headerlink" title="数据聚类"></a>数据聚类</h2><h3 id="K均值（K-means）"><a href="#K均值（K-means）" class="headerlink" title="K均值（K-means）"></a>K均值（K-means）</h3><h2 id="特征降维"><a href="#特征降维" class="headerlink" title="特征降维"></a>特征降维</h2><h3 id="主成分分析（PCA）"><a href="#主成分分析（PCA）" class="headerlink" title="主成分分析（PCA）"></a>主成分分析（PCA）</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python机器学习及实践——从零开始通往Kaggle竞赛之路&quot;&gt;&lt;a href=&quot;#Python机器学习及实践——从零开始通往Kaggle竞赛之路&quot; class=&quot;headerlink&quot; title=&quot;Python机器学习及实践——从零开始通往Kaggle竞赛之
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ACM-强连通分量</title>
    <link href="https://nymrli.top/2019/04/25/ACM-%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    <id>https://nymrli.top/2019/04/25/ACM-强连通分量/</id>
    <published>2019-04-25T01:27:03.000Z</published>
    <updated>2019-04-25T01:28:12.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tarjan-算法-amp-模板"><a href="#Tarjan-算法-amp-模板" class="headerlink" title="Tarjan 算法&amp;模板"></a><a href="https://www.cnblogs.com/shadowland/p/5872257.html" target="_blank" rel="noopener">Tarjan 算法&amp;模板</a></h1><blockquote><p>Tarjan 算法一种由Robert Tarjan提出的求解有向图强连通分量的算法，它能做到线性时间的复杂度。</p></blockquote><p>如果两个顶点可以相互通达，则称两个顶点强连通(strongly connected)。如果有向图G的每两个顶点都强连通，称G是一个强连通图。有向图的极大强连通子图，称为<strong>强连通分量</strong>(strongly connected components)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span> <span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;</span><br><span class="line">         dfn[ x ] = ++dfs_num ;</span><br><span class="line">         low[ x ] = dfs_num ;</span><br><span class="line">         vis [ x ] = <span class="literal">true</span> ;<span class="comment">//是否在栈中</span></span><br><span class="line">         <span class="built_in">stack</span> [ ++top ] = x ;</span><br><span class="line">         <span class="keyword">for</span> ( <span class="keyword">int</span> i=head[ x ] ; i!=<span class="number">0</span> ; i=e[i].next )&#123;</span><br><span class="line">                  <span class="keyword">int</span> temp = e[ i ].to ;</span><br><span class="line">                  <span class="keyword">if</span> ( !dfn[ temp ] )&#123;</span><br><span class="line">                           Tarjan ( temp ) ;</span><br><span class="line">                           low[ x ] = gmin ( low[ x ] , low[ temp ] ) ;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">else</span> <span class="keyword">if</span> ( vis[ temp ])low[ x ] = gmin ( low[ x ] , dfn[ temp ] ) ;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> ( dfn[ x ]==low[ x ] ) &#123;<span class="comment">//构成强连通分量</span></span><br><span class="line">                  vis[ x ] = <span class="literal">false</span> ;</span><br><span class="line">                  color[ x ] = ++col_num ;<span class="comment">//染色</span></span><br><span class="line">                  <span class="keyword">while</span> ( <span class="built_in">stack</span>[ top ] != x ) &#123;<span class="comment">//清空</span></span><br><span class="line">                           color [<span class="built_in">stack</span>[ top ]] = col_num ;</span><br><span class="line">                           vis [ <span class="built_in">stack</span>[ top-- ] ] = <span class="literal">false</span> ;</span><br><span class="line">                 &#125;</span><br><span class="line">                 top -- ;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tarjan-算法-amp-模板&quot;&gt;&lt;a href=&quot;#Tarjan-算法-amp-模板&quot; class=&quot;headerlink&quot; title=&quot;Tarjan 算法&amp;amp;模板&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/shado
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>ACM-并查集</title>
    <link href="https://nymrli.top/2019/04/25/ACM-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>https://nymrli.top/2019/04/25/ACM-并查集/</id>
    <published>2019-04-25T01:21:30.000Z</published>
    <updated>2019-04-26T08:32:10.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><blockquote><p> ACM竞赛中，并查集（DisjointSets）这个数据结构经常使用。顾名思义，并查集即表示集合，并且支持快速查找、合并操作。</p><p>用于高效的查找某两个元素是否属于同一个集合；</p></blockquote><p>并查集如何表示一个集合？它借助树的思想，将一个集合看成一棵有根树。那又如何表示一棵树？初始状态下，一个元素即一棵树，根即是元素本身。</p><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>并查集如何支持合并操作？不难发现，按照树的思想，在同一棵树中的所有元素，根都是相同的。也就是说，<u>合并两个不同的集合，只需要将其中一个集合的根设置为另一个集合的根即可</u>，而需要改变根的那个集合，其实只需要改变根节点的父节点即可。</p><h3 id="如何支持快速查找操作"><a href="#如何支持快速查找操作" class="headerlink" title="如何支持快速查找操作"></a>如何支持快速查找操作</h3><p>如果完全按照上面的合并方法进行合并操作，最后生成的树，可能是完全线性的，那么查询的时间复杂度就退化成了O(n)，因为在这种情况下，程序不得不遍历完所有节点才能查询到当前元素所属的根节点。</p><p>路径压缩算法优化并查集查询操作。按照集合原来的定义，集合中的元素是满足无序性的，因此可以在查询操作进行的过程中，当程序遍历到根节点然后返回的时候，将所有属于当前根节点的元素的父节点直接设置为当前根节点。如此一来，原来的一条链就变成了一般的树了。当下一次查询的时候，就可以很快的遍历到根节点了，复杂度下降为O(1)。</p><p>还有一种优化查询速度的方法，那就是合并两个集合的时候，按秩进行合并，这里的秩代表的以当前元素为根节点的元素个数。很明显，将秩较小的树合并到秩较大的树上更优。</p><p>最后，就是具体如何用代码实现并查集？其实，并查集中只涉及到了保存当前元素的父节点这一信息，所以利用一个数组set[i]代表节点i的父节点即可，如果set[i]=i那么代表当前集合的根即为i元素本身。</p><p>以一道例题为例，HDOJ：1212，时空转移（<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1213" target="_blank" rel="noopener">点击打开链接</a>）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NumSets = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DisjSet[NumSets + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Rank[NumSets + <span class="number">1</span>];</span><br><span class="line">DisjSet S;</span><br><span class="line">Rank R;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Initialize the set and rank</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;NumSets; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        S[i] = i;</span><br><span class="line">        R[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Find father of the value, with the function of path compression</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S[value] != value) S[value] = Find(S[value]);</span><br><span class="line">    <span class="keyword">return</span> S[value];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Union the value1 and value2 by the rank of the set which them local in</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetUnion</span><span class="params">(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa1 = Find(value1);</span><br><span class="line">    <span class="keyword">int</span> fa2 = Find(value2);</span><br><span class="line">    <span class="keyword">if</span>(fa1 == fa2) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(R[fa1] &gt;= R[fa2])</span><br><span class="line">    &#123;</span><br><span class="line">        S[fa2] = fa1;</span><br><span class="line">        R[fa1] += R[fa2];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        S[fa1] = fa2;</span><br><span class="line">        R[fa2] += R[fa1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//freopen("sample.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> cas;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cas);</span><br><span class="line">    <span class="keyword">while</span>(cas--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        Initialize();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a, b;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span>(Find(a) != Find(b))</span><br><span class="line">            &#123;</span><br><span class="line">                SetUnion(a, b);</span><br><span class="line">                --n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;！</span><br></pre></td></tr></table></figure><p>摘自(<a href="https://blog.csdn.net/u011787119/article/details/46834903" target="_blank" rel="noopener">https://blog.csdn.net/u011787119/article/details/46834903</a>)</p><hr><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h4 id="解密犯罪团伙"><a href="#解密犯罪团伙" class="headerlink" title="解密犯罪团伙"></a><a href="https://bbs.codeaha.com/forum.php?mod=viewthread&amp;tid=11223&amp;fromuid=1" target="_blank" rel="noopener">解密犯罪团伙</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;,n,m,sum=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//这里是初始化，非常地重要，数组里面存的是自己数组下标的编号就好了。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        f[i]=i;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是找爹的递归函数，不停地去找爹，直到找到祖宗为止，其实就是去找犯罪团伙的最高领导人，</span></span><br><span class="line"><span class="comment">//“擒贼先擒王”原则。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> v)</span>   </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[v]==v) <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//这里是路径压缩，每次在函数返回的时候，顺带把路上遇到的人的“BOSS”改为最后找</span></span><br><span class="line">        <span class="comment">//到的祖宗编号，也就是犯罪团伙的最高领导人编号。这样可以提高今后找到犯罪团伙的</span></span><br><span class="line">        <span class="comment">//最高领导人（其实就是树的祖先）的速度。</span></span><br><span class="line">        f[v]=getf(f[v]);<span class="comment">//这里进行了路径压缩</span></span><br><span class="line">        <span class="keyword">return</span> f[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里是合并两子集合的函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> u)</span>   </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t1,t2;<span class="comment">//t1、t2分别为v和u的大BOSS（首领），每次双方的会谈都必须是各自最高领导人才行</span></span><br><span class="line">    t1=getf(v);</span><br><span class="line">    t2=getf(u);</span><br><span class="line">    <span class="keyword">if</span>( t1!=t2 ) <span class="comment">//判断两个结点是否在同一个集合中，即是否为同一个祖先。</span></span><br><span class="line">         f[t2]=t1; <span class="comment">//“靠左”原则，左边变成右边的BOSS。即把右边的集合，作为左边集合的子集合。</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请从此处开始阅读程序，从主函数开始阅读程序是一个好习惯。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,x,y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    init();  <span class="comment">//初始化是必须的</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="comment">//开始合并犯罪团伙</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x,&amp;y);</span><br><span class="line">        merge(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后扫描有多少个独立的犯罪团伙</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i]==i)</span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用并查集判断无向图的连通性-或求连通分支个数"><a href="#用并查集判断无向图的连通性-或求连通分支个数" class="headerlink" title="用并查集判断无向图的连通性(或求连通分支个数)~"></a>用并查集判断无向图的连通性(或求连通分支个数)~</h4><p>给定一个无向图和其中的所有边，判断这个图是否所有顶点都是连通的。<br>输入：每组数据的第一行是两个整数n 和m（0&lt; n &lt;=1000）。n 表示图的顶点<br>数目，m 表示图中边的数目。如果n 为0 表示输入结束。随后有m 行数据，每<br>行有两个值x 和y（0&lt;x, y &lt;=n），表示顶点x 和y 相连，顶点的编号从1 开始计<br>算。输入不保证这些边是否重复。<br>输出：对于每组输入数据，如果所有顶点都是连通的，输出 ’YES’ ，否则输<br>出 ’NO’。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">===样例输入===</span><br><span class="line">4 3</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 2</span><br><span class="line">3 2</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">0 0</span><br><span class="line">===样例输出===</span><br><span class="line">NO</span><br><span class="line">YES</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">map</span>[i]==i?i:find(<span class="built_in">map</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    <span class="built_in">map</span>[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">            a--;b--;</span><br><span class="line">            <span class="built_in">map</span>[find(a)]=<span class="built_in">map</span>[find(b)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i]==i)</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>题目链接：<a href="http://poj.org/problem?id=1611" target="_blank" rel="noopener">http://poj.org/problem?id=1611</a><br>题目大意： 中文就不解释了；<br>做法：把同一个集合的所有元素都放到同一个集合里， 当放完之后， 检查一下0号同学在哪个集合， 再判断一下剩下的同学是否和它在同一个集合里面；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by fkjs on 2015-09-17</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2015 fkjs. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//#pragma comment(linker, "/STACK:1024000000,1024000000")</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x) memset(x, 0, sizeof(x))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">30000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> pa[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//并查集的基础-&gt;find函数， 它的特点就是pa[x] = find(pa[x]), 这一语句可以把该路径上的所有点的父亲都改成根节点；</span></span><br><span class="line">    <span class="keyword">return</span> x == pa[x] ? x : pa[x] = find(pa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//链接两个并查集</span></span><br><span class="line">    <span class="keyword">int</span> fa = find(x);<span class="comment">//找到根节点， 当然找的过程中会更新路上的点；</span></span><br><span class="line">    <span class="keyword">int</span> fb = find(y);<span class="comment">//同上；</span></span><br><span class="line">    pa[fa] = fb;<span class="comment">//链接两个集合；</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="comment">//freopen("C:\\Users\\Administrator\\Desktop\\in.txt", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("C:\\Users\\Administrator\\Desktop\\out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">//ios_base::sync_with_stdio(0);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span> &amp;&amp; (n || m))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) pa[i] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> len; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len);</span><br><span class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            <span class="keyword">int</span> tp = x;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">                connect(x, tp);</span><br><span class="line">                tp = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> p = find(<span class="number">0</span>);<span class="comment">//找到最初感染者所在的集合， 它的根是p；</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//凡是根是p的人都被感染了；</span></span><br><span class="line">            <span class="keyword">if</span>(find(i) == p)</span><br><span class="line">                ans++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; ACM竞赛中，并查集（DisjointSets）这个数据结构经常使用。顾名思义，并查集即表示集合，并且支
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>Java课程第二次实验报告</title>
    <link href="https://nymrli.top/2019/04/25/Java%E8%AF%BE%E7%A8%8B%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>https://nymrli.top/2019/04/25/Java课程第二次实验报告/</id>
    <published>2019-04-25T00:58:21.000Z</published>
    <updated>2019-04-25T01:17:49.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java课程第二次实验报告"><a href="#Java课程第二次实验报告" class="headerlink" title="Java课程第二次实验报告"></a>Java课程第二次实验报告</h1><h2 id="1-寻找并输出11-999之间的数m，它满足m、m2、m3均为回文数。回文数是各位数字左右对称的整数。判断是否为回文要求通过编写方法来完成。"><a href="#1-寻找并输出11-999之间的数m，它满足m、m2、m3均为回文数。回文数是各位数字左右对称的整数。判断是否为回文要求通过编写方法来完成。" class="headerlink" title="1.寻找并输出11~999之间的数m，它满足m、m2、m3均为回文数。回文数是各位数字左右对称的整数。判断是否为回文要求通过编写方法来完成。"></a>1.寻找并输出11~999之间的数m，它满足m、m2、m3均为回文数。回文数是各位数字左右对称的整数。判断是否为回文要求通过编写方法来完成。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">String str = Integer.toString(s);</span><br><span class="line"><span class="keyword">if</span>( str.charAt(<span class="number">0</span>) == str.charAt(str.length() - <span class="number">1</span>) )</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">11</span>; s &lt; <span class="number">1000</span>; s++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isPalindrome(s) &amp;&amp; isPalindrome(s*s) &amp;&amp; isPalindrome(s*s*s) )</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-由键盘输入10个整数，比较并输出其中的最大值和最小值。"><a href="#2-由键盘输入10个整数，比较并输出其中的最大值和最小值。" class="headerlink" title="2.由键盘输入10个整数，比较并输出其中的最大值和最小值。"></a>2.由键盘输入10个整数，比较并输出其中的最大值和最小值。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> []arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> maxn = -<span class="number">1000000000</span>;</span><br><span class="line">    <span class="keyword">int</span> minn = <span class="number">1000000000</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">arr[i] = s.nextInt();</span><br><span class="line"><span class="keyword">if</span> ( arr[i] &lt; minn ) minn = arr[i];</span><br><span class="line"><span class="keyword">if</span> ( arr[i] &gt; maxn) maxn = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">    System.out.printf(<span class="string">"最大值:%d ，最小值:%d \n"</span>,maxn,minn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-随机产生50个1-100之间的整数，存放于一个10´5的二维数组中，要求按照10´5的格式打印这个数组（即共显示10行，每行5个数，数与数之间间隔一个空格），并求出该数组所有元素之和。"><a href="#3-随机产生50个1-100之间的整数，存放于一个10´5的二维数组中，要求按照10´5的格式打印这个数组（即共显示10行，每行5个数，数与数之间间隔一个空格），并求出该数组所有元素之和。" class="headerlink" title="3.随机产生50个1-100之间的整数，存放于一个10´5的二维数组中，要求按照10´5的格式打印这个数组（即共显示10行，每行5个数，数与数之间间隔一个空格），并求出该数组所有元素之和。"></a>3.随机产生50个1-100之间的整数，存放于一个10´5的二维数组中，要求按照10´5的格式打印这个数组（即共显示10行，每行5个数，数与数之间间隔一个空格），并求出该数组所有元素之和。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> row = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> col = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> [][]arr = <span class="keyword">new</span> <span class="keyword">int</span>[row][col];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">arr[i][j] = (<span class="keyword">int</span>)(Math.random()*<span class="number">100</span> + <span class="number">1</span>);</span><br><span class="line">sum += arr[i][j];</span><br><span class="line">System.out.printf(<span class="string">"%d "</span>,arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">    System.out.println(<span class="string">"SUM:"</span>+sum+<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-学生类的创建和使用"><a href="#4-学生类的创建和使用" class="headerlink" title="4.学生类的创建和使用"></a>4.学生类的创建和使用</h2><p>①创建一个学Student类，成员变量包括：学号、班号、姓名、性别、年龄等，且都是private类型。</p><p>②声明一个构造方法，初始化所有成员变量。</p><p>③分别声明获得各属性的public类型的成员方法，方法名要求以get开头。</p><p>④分别声明修改各属性的public类型的成员方法，方法名要求以set开头。</p><p>⑤声明一个public类型的toString（）方法，把该类中的所有域信息组合成一个字符串。</p><p>⑥声明统计创建Student对象的个数的私有域count和得到Student对象的个数的public方法。</p><p>⑦将类Student放在子包student中。</p><p>⑧在子包student外，创建测试类Student的主类。</p><p>在主类中：创建2个Student对象，输出对象的所有域信息；修改对象的姓名和年龄，输出修改后的姓名和年龄；比较两个Student对象的年龄的大小，输出年龄较大的Student对象。</p><h4 id="Student-java"><a href="#Student-java" class="headerlink" title="Student.java"></a>Student.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> classNum;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String gender;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> uid , <span class="keyword">int</span> classNum , String name , String gender , <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uid = uid;</span><br><span class="line"><span class="keyword">this</span>.classNum =classNum;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.gender = gender;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">cnt += <span class="number">1</span>;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uid = uid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> uid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassNum</span><span class="params">(<span class="keyword">int</span> classNum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.classNum = classNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getClassNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> classNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCnt</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">"学号为%d的同学，在%d班，姓名为%s，性别为%s，年龄为%d，"</span>,</span><br><span class="line">uid,classNum,name,gender,age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HelloWorld-java"><a href="#HelloWorld-java" class="headerlink" title="HelloWorld.java"></a>HelloWorld.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> student.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    Student stu1 = <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"cl"</span>, <span class="string">"male"</span>, <span class="number">20</span>);</span><br><span class="line">    Student stu2 = <span class="keyword">new</span> Student(<span class="number">3</span>,<span class="number">2</span>,<span class="string">"cjl"</span>, <span class="string">"female"</span>, <span class="number">20</span>);</span><br><span class="line">    System.out.println(stu1);</span><br><span class="line">    System.out.println(stu2);</span><br><span class="line">    stu1.setName(<span class="string">"cl2"</span>);</span><br><span class="line">    stu1.setAge(<span class="number">21</span>);</span><br><span class="line">    System.out.printf(<span class="string">"修改之后的姓名:%s,修改后的年龄:%d\n"</span>,stu1.getName(),stu1.getAge());</span><br><span class="line">    System.out.println( stu1.getAge() &gt; stu2.getAge() ?stu1 : stu2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java课程第二次实验报告&quot;&gt;&lt;a href=&quot;#Java课程第二次实验报告&quot; class=&quot;headerlink&quot; title=&quot;Java课程第二次实验报告&quot;&gt;&lt;/a&gt;Java课程第二次实验报告&lt;/h1&gt;&lt;h2 id=&quot;1-寻找并输出11-999之间的数m，它满
      
    
    </summary>
    
    
      <category term="java" scheme="https://nymrli.top/tags/java/"/>
    
      <category term="NJUPT" scheme="https://nymrli.top/tags/NJUPT/"/>
    
  </entry>
  
  <entry>
    <title>ACM-大数定理（高精度）</title>
    <link href="https://nymrli.top/2019/04/25/ACM-%E5%A4%A7%E6%95%B0%E5%AE%9A%E7%90%86%EF%BC%88%E9%AB%98%E7%B2%BE%E5%BA%A6%EF%BC%89/"/>
    <id>https://nymrli.top/2019/04/25/ACM-大数定理（高精度）/</id>
    <published>2019-04-25T00:53:27.000Z</published>
    <updated>2019-04-25T01:21:02.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACM-大数定理（高精度）"><a href="#ACM-大数定理（高精度）" class="headerlink" title="ACM-大数定理（高精度）"></a>ACM-大数定理（高精度）</h1><blockquote><p> 由于c/c++中数据类型的范围比较固定，因此有些题目的数据范围正好卡在这些正常范围之外，此时就需要自己实现大数加减乘除的运算。</p><p>c/c++需要自己手写</p><p>java中有BigInteger类</p></blockquote><h2 id="C-加法实现"><a href="#C-加法实现" class="headerlink" title="C++ 加法实现"></a>C++ 加法实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">add</span><span class="params">(<span class="built_in">string</span> a , <span class="built_in">string</span> b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    a = a.substr(a.find_first_not_of(<span class="string">"0"</span>));</span><br><span class="line">    <span class="comment">// 去前导0</span></span><br><span class="line">    b = b.substr(b.find_first_not_of(<span class="string">"0"</span>));</span><br><span class="line"></span><br><span class="line">    ll lenA = a.length();</span><br><span class="line">    ll lenB = b.length();</span><br><span class="line">    ll len = max(lenA,lenB) + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    reverse(a.begin(),a.end());</span><br><span class="line">    <span class="comment">// 翻转,方便相加</span></span><br><span class="line">    reverse(b.begin(),b.end());</span><br><span class="line"><span class="comment">//    cout &lt;&lt; "a" &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; "b" &lt;&lt; b &lt;&lt; endl;</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">ans</span><span class="params">(len,<span class="string">'0'</span>)</span></span>;</span><br><span class="line">    <span class="comment">// ans全赋值为0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i &lt; lenA ; i ++) ans[i] = a[i];</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> ( i &lt; b.length() ) tmp += (ans[i] - <span class="string">'0'</span>) + (b[i] - <span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">else</span> tmp += (ans[i] - <span class="string">'0'</span>) ;</span><br><span class="line">        ans[i] = (tmp % <span class="number">10</span>) + <span class="string">'0'</span>;</span><br><span class="line">        tmp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    reverse(ans.begin(),ans.end());</span><br><span class="line">    <span class="comment">// 再将运算结果反转回来</span></span><br><span class="line">    <span class="keyword">return</span> ans.substr(ans.find_first_not_of(<span class="string">"0"</span>));</span><br><span class="line">    <span class="comment">// 仍然需要去前导0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a = <span class="string">"3"</span>;</span><br><span class="line">    <span class="built_in">string</span> b = <span class="string">"2"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; add(a,b) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-加减乘除"><a href="#Java-加减乘除" class="headerlink" title="Java 加减乘除"></a>Java 加减乘除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    BigInteger a = <span class="keyword">new</span> BigInteger(<span class="string">"100"</span>);</span><br><span class="line">    BigInteger b = <span class="keyword">new</span> BigInteger(<span class="string">"2"</span>);</span><br><span class="line">    System.out.println(a.add(b));</span><br><span class="line">        <span class="comment">// 102</span></span><br><span class="line">    System.out.println(a.subtract(b));</span><br><span class="line">        <span class="comment">// 98</span></span><br><span class="line">    System.out.println(a.multiply(b));</span><br><span class="line">        <span class="comment">// 200</span></span><br><span class="line">    System.out.println(a.divide(b));</span><br><span class="line">        <span class="comment">// 50</span></span><br><span class="line">        BigInteger []c = a.divideAndRemainder(b);</span><br><span class="line">    System.out.printf(<span class="string">"除数为:%d,余数为:%d\n"</span>, c[<span class="number">0</span>],c[<span class="number">1</span>]  );</span><br><span class="line">        <span class="comment">// 除数为:50,余数为:0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ACM-大数定理（高精度）&quot;&gt;&lt;a href=&quot;#ACM-大数定理（高精度）&quot; class=&quot;headerlink&quot; title=&quot;ACM-大数定理（高精度）&quot;&gt;&lt;/a&gt;ACM-大数定理（高精度）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 由于c/c++中数据类型
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="java" scheme="https://nymrli.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用git将项目上传到github（最简单方法）</title>
    <link href="https://nymrli.top/2019/03/28/%E4%BD%BF%E7%94%A8git%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github%EF%BC%88%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95%EF%BC%89/"/>
    <id>https://nymrli.top/2019/03/28/使用git将项目上传到github（最简单方法）/</id>
    <published>2019-03-28T11:39:36.000Z</published>
    <updated>2019-03-28T11:45:09.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用git将项目上传到github（最简单方法）"><a href="#使用git将项目上传到github（最简单方法）" class="headerlink" title="使用git将项目上传到github（最简单方法）"></a>使用git将项目上传到github（最简单方法）</h1><p><strong>首先你需要一个github账号，所有还没有的话先去注册吧！</strong> <strong><a href="https://github.com/" target="_blank" rel="noopener">Github</a></strong></p><p><strong>我们使用git需要先安装git工具，这里给出下载地址，下载后一路直接安装即可：**</strong><a href="https://git-for-windows.github.io/*" target="_blank" rel="noopener">https://git-for-windows.github.io/*</a>*</p><h3 id="1-进入Github首页，点击New-repository新建一个项目"><a href="#1-进入Github首页，点击New-repository新建一个项目" class="headerlink" title="1.进入Github首页，点击New repository新建一个项目"></a><strong>1.进入Github首页，点击New repository新建一个项目</strong></h3><p><img src="https://images2015.cnblogs.com/blog/913913/201608/913913-20160823164154526-418441991.png" alt="img"></p><h3 id="2-填写相应信息后点击create即可"><a href="#2-填写相应信息后点击create即可" class="headerlink" title="2.填写相应信息后点击create即可"></a><strong>2.填写相应信息后点击create即可</strong></h3><blockquote><p><strong>Repository name: 仓库名称</strong></p><p><strong>Description(可选): 仓库描述介绍</strong></p><p><strong>Public, Private : 仓库权限（公开共享，私有或指定合作者）</strong></p><p><strong>Initialize this repository with a README: 添加一个README.md</strong></p><p><strong>gitignore: 不需要进行版本管理的仓库类型，对应生成文件.gitignore</strong></p><p><strong>license: 证书类型，对应生成文件LICENSE</strong></p></blockquote><p><img src="https://images2015.cnblogs.com/blog/913913/201608/913913-20160823165025370-49444506.png" alt="img"></p><p>创建完成后会变成（添加了README.md或者有license)</p><p><img src="https://images2015.cnblogs.com/blog/913913/201608/913913-20160823165107308-439926006.png" alt="img"></p><h3 id="3-点击Clone-or-dowload会出现一个地址，copy这个地址备用。"><a href="#3-点击Clone-or-dowload会出现一个地址，copy这个地址备用。" class="headerlink" title="3.点击Clone or dowload会出现一个地址，copy这个地址备用。"></a><strong>3.点击Clone or dowload会出现一个地址，copy这个地址备用。</strong></h3><p><img src="https://images2015.cnblogs.com/blog/913913/201608/913913-20160823165450636-1167722003.png" alt="img"></p><h3 id="4-接下来就到本地操作了"><a href="#4-接下来就到本地操作了" class="headerlink" title="4.接下来就到本地操作了"></a><strong>4.接下来就到本地操作了</strong></h3><p><strong>首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为Git Gui Here,Git Bash Here,这里我们选择Git Bash Here，进入如下界面，Test_Bluetooth即为我的项目名。</strong></p><p><img src="https://images2015.cnblogs.com/blog/913913/201608/913913-20160823171048308-194895299.png" alt="img"></p><h3 id="5-接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地"><a href="#5-接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地" class="headerlink" title="5.接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地"></a><strong>5.接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地</strong></h3><p><code>git clone https://github.com/CKTim/BlueTooth.git（https://github.com/CKTim/BlueTooth.git替换成你之前复制的地址）</code></p><p><img src="https://images2015.cnblogs.com/blog/913913/201608/913913-20160823171143980-741152042.png" alt="img"></p><h3 id="6-复制文件到刚出来的文件夹中"><a href="#6-复制文件到刚出来的文件夹中" class="headerlink" title="6.复制文件到刚出来的文件夹中"></a><strong>6.复制文件到刚出来的文件夹中</strong></h3><p><strong>这个步骤以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名，如图我多出了个Test文件夹，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都复制到那个新多出的文件夹下，</strong></p><p><img src="https://images2015.cnblogs.com/blog/913913/201608/913913-20160823171209730-2089496483.png" alt="img"></p><h3 id="7-接着继续输入命令-cd-Test，进入Test文件夹"><a href="#7-接着继续输入命令-cd-Test，进入Test文件夹" class="headerlink" title="7.接着继续输入命令 cd Test，进入Test文件夹"></a><strong>7.接着继续输入命令 cd Test，进入Test文件夹</strong></h3><p><img src="https://images2015.cnblogs.com/blog/913913/201608/913913-20160823171454261-10363777.png" alt="img"></p><h3 id="8-接下来依次输入以下代码即可完成其他剩余操作："><a href="#8-接下来依次输入以下代码即可完成其他剩余操作：" class="headerlink" title="8.接下来依次输入以下代码即可完成其他剩余操作："></a><strong>8.接下来依次输入以下代码即可完成其他剩余操作：</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .        （注：别忘记后面的.，此操作是把Test文件夹下面的文件都添加进来）</span><br><span class="line">git commit  -m  "提交信息"  （注：“提交信息”里面换成你需要，如“first commit”）</span><br><span class="line">git push -u origin master   （注：此操作目的是把本地仓库push到github上面，此步骤需要你输入帐号和密码）</span><br></pre></td></tr></table></figure><p> <img src="https://images2015.cnblogs.com/blog/913913/201608/913913-20160823171557823-3863512.png" alt="img"></p><p><img src="https://images2015.cnblogs.com/blog/913913/201608/913913-20160823171651808-1225335136.png" alt="img"></p><p><img src="https://images2015.cnblogs.com/blog/913913/201608/913913-20160823171818933-1506815566.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用git将项目上传到github（最简单方法）&quot;&gt;&lt;a href=&quot;#使用git将项目上传到github（最简单方法）&quot; class=&quot;headerlink&quot; title=&quot;使用git将项目上传到github（最简单方法）&quot;&gt;&lt;/a&gt;使用git将项目上传到git
      
    
    </summary>
    
    
      <category term="git" scheme="https://nymrli.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>学会Pull request</title>
    <link href="https://nymrli.top/2019/03/28/%E5%AD%A6%E4%BC%9APull-request/"/>
    <id>https://nymrli.top/2019/03/28/学会Pull-request/</id>
    <published>2019-03-28T11:18:14.000Z</published>
    <updated>2019-03-29T06:01:17.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub中发起PR-pull-Request"><a href="#GitHub中发起PR-pull-Request" class="headerlink" title="GitHub中发起PR(pull Request)"></a>GitHub中发起PR(pull Request)</h1><blockquote><p>PR是为了贡献代码:</p><p>​    贡献代码，通俗的说，就是自己修改了代码，希望合并到别人的Repository(仓库)中。将自己的智慧贡献给开源社区。</p></blockquote><h2 id="一-贡献代码"><a href="#一-贡献代码" class="headerlink" title="一.贡献代码:"></a>一.贡献代码:</h2><h3 id="1-第一步-Fork"><a href="#1-第一步-Fork" class="headerlink" title="1.第一步:Fork"></a>1.第一步:Fork</h3><p>在GitHub社区闲逛时，看中了某个项目代码，如：spring-projects/spring-framework，点击页面Fork按钮，会生成一个自己的Repository(仓库：thinkingfioa/spring-framework),如下图：</p><p><img src="/2019/03/28/学会Pull-request/1.jpg" alt="1"></p><h3 id="2-第二步：修改"><a href="#2-第二步：修改" class="headerlink" title="2.第二步：修改"></a>2.第二步：修改</h3><p>Fork成功后，通过git clone、修改、commit、push等操作后，将修改的内容，提交到自己仓库(thinkingfioa/spring-framework)中。如果对git clone、commit和push不知道的，自行百度。如下图:</p><p><img src="/2019/03/28/学会Pull-request/2.jpg" alt="2"></p><h3 id="3-第三步：请求合并代码-Pull-Request"><a href="#3-第三步：请求合并代码-Pull-Request" class="headerlink" title="3 第三步：请求合并代码(Pull Request)"></a>3 第三步：请求合并代码(Pull Request)</h3><p>在2步骤时，我们修改了自己的仓库(thinkingfioa/spring-framework)代码。我们希望贡献自己的一份力量，将修改的Commit也提交到别人的仓库(spring-projects/spring-framework)中。则要进行<strong>Pull Request</strong>。</p><h4 id="3-1-创建PR"><a href="#3-1-创建PR" class="headerlink" title="3.1 创建PR"></a>3.1 创建PR</h4><p><img src="/2019/03/28/学会Pull-request/3.1.jpg" alt="3.1"></p><h4 id="3-2-Create-pull-request"><a href="#3-2-Create-pull-request" class="headerlink" title="3.2 Create pull request"></a>3.2 Create pull request</h4><p>请特别注意下图中标红的部分，不能搞反了。点击: Create pull request 绿色按钮，完成提交PR。 </p><p><img src="/2019/03/28/学会Pull-request/3.2.jpg" alt="3.2"></p><h4 id="3-3-等待"><a href="#3-3-等待" class="headerlink" title="3.3 等待"></a>3.3 等待</h4><p>提交PR完成后，等待对方仓库(spring-projects/spring-framework)的管理员审核，如果他同意，则贡献代码完成了。</p><h2 id="二-同步最新代码"><a href="#二-同步最新代码" class="headerlink" title="二.同步最新代码"></a>二.同步最新代码</h2><blockquote><p>PR除了贡献代码外，还可以同步对方最新代码。通俗的说，fork某个仓库(如: spring-projects/spring-framework)代码一段时间后，为了同步自己仓库(thinkingfioa/spring-framework)和对方仓库(spring-projects/spring-framework)代码，保证自己仓库代码是最新版本。</p></blockquote><h3 id="2-1-1-Create-pull-request"><a href="#2-1-1-Create-pull-request" class="headerlink" title="2.1.1 Create pull request"></a>2.1.1 Create pull request</h3><p>这一步和上面3.2一样的，只是要注意箭头，哪个仓库合并哪个仓库。请自习注意下图标红部分 </p><p><img src="/2019/03/28/学会Pull-request/5.1.jpg" alt="5.1"></p><h3 id="2-1-2-点击绿色按钮，完成代码同步"><a href="#2-1-2-点击绿色按钮，完成代码同步" class="headerlink" title="2.1.2 点击绿色按钮，完成代码同步"></a>2.1.2 点击绿色按钮，完成代码同步</h3><p><img src="/2019/03/28/学会Pull-request/5.2.jpg" alt="5.2"></p><p>摘自:<a href="https://blog.csdn.net/thinking_fioa/article/details/79516352?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://blog.csdn.net/thinking_fioa/article/details/79516352?tdsourcetag=s_pctim_aiomsg</a></p><h1 id="GitHub之接收、处理Pull-Request"><a href="#GitHub之接收、处理Pull-Request" class="headerlink" title="GitHub之接收、处理Pull Request"></a>GitHub之接收、处理Pull Request</h1><h3 id="1-创建一个仓库来演示下。"><a href="#1-创建一个仓库来演示下。" class="headerlink" title="1.创建一个仓库来演示下。"></a>1.创建一个仓库来演示下。</h3><blockquote><p>假设创建仓库的人称为:”老大”</p></blockquote><h3 id="2-成员Fork后修改"><a href="#2-成员Fork后修改" class="headerlink" title="2.成员Fork后修改"></a>2.成员Fork后修改</h3><blockquote><p> 成员x695 在自己的网页上<strong>fork</strong>这个仓库，然后<strong>git clone</strong>到本地，然后<strong>创建特性分支，基于特性分支</strong>修改完成提交，push到origin 远程仓库<code>git push origin (master(本地):master(远程) )</code></p></blockquote><h3 id="3-成员发PR到老大"><a href="#3-成员发PR到老大" class="headerlink" title="3.成员发PR到老大"></a>3.成员发PR到老大</h3><p><img src="/2019/03/28/学会Pull-request/6.jpg" alt="6"></p><h3 id="4-老大登陆自己的账号，到PR页签"><a href="#4-老大登陆自己的账号，到PR页签" class="headerlink" title="4.老大登陆自己的账号，到PR页签"></a>4.老大登陆自己的账号，到PR页签</h3><p><img src="/2019/03/28/学会Pull-request/7.jpg" alt="7"></p><h3 id="5-老大在本地的检查"><a href="#5-老大在本地的检查" class="headerlink" title="5.老大在本地的检查"></a>5.老大在本地的检查</h3><p>为了防止这个成员乱改，如果不检查可以直接进行步骤6老大还要检查下假如还要用于演示的话，老大就要把代码拉到本地了，看看修改后有啥区别</p><ol><li>git clone 自己创建的项目</li><li>git remote add stream 项目成员的仓库/获取项目成员仓库设置为本地仓库的远程仓库<br>git fetch 获取项目成员的仓库数据</li><li>将成员的仓库和分支数据全部拉到自己本地后，创建一个用户检查的分支 pr1，并进入这个分支<br>将项目成员的number1 分支和自己的分支pr1进行合并 git merge stream/number1</li><li>这样一来分支pr1就和项目成员的分支number1一样了，检查完毕，进行删除 git branch -D pr1</li></ol><h3 id="6-老大合并或评论PR"><a href="#6-老大合并或评论PR" class="headerlink" title="6.老大合并或评论PR"></a>6.老大合并或评论PR</h3><blockquote><p> 点击 add number1 可以回复评论，然后也可以直接点击 merge pull request 通过</p></blockquote><ol><li>老大如果不愿意登陆网页，也可以在本地进行如下操作 </li><li>在步骤5中已经完成了，前2步的前提下进行下一步 </li><li>git checkout master,切换到主分支 </li><li>git merge stream/number1 将成员的分支合并到主分支 </li><li>push前进行检查，git diff oragin/master 看看本地合并后的仓库和远端的有啥区别 </li><li>如果确认无误直接进行git push 就可以了 </li><li>完成上面的5步之后，仓库的Pull Request 会自动成Open状态变成Close 状态。</li></ol><p>摘自:<a href="https://blog.csdn.net/x6_9x/article/details/50902777" target="_blank" rel="noopener">https://blog.csdn.net/x6_9x/article/details/50902777</a></p><h1 id="Github官方文档"><a href="#Github官方文档" class="headerlink" title="Github官方文档"></a>Github官方文档</h1><p><a href="https://help.github.com/en/articles/about-pull-requests" target="_blank" rel="noopener">About pull requests</a></p><p><a href="https://help.github.com/en/articles/merging-a-pull-request" target="_blank" rel="noopener">Merging a pull request</a></p><p><a href="https://help.github.com/en/articles/closing-a-pull-request" target="_blank" rel="noopener">Closing a pull request</a></p><p><a href="https://help.github.com/en/articles/checking-out-pull-requests-locally" target="_blank" rel="noopener">Checking out pull requests locally</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GitHub中发起PR-pull-Request&quot;&gt;&lt;a href=&quot;#GitHub中发起PR-pull-Request&quot; class=&quot;headerlink&quot; title=&quot;GitHub中发起PR(pull Request)&quot;&gt;&lt;/a&gt;GitHub中发起PR(p
      
    
    </summary>
    
    
      <category term="git" scheme="https://nymrli.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯突击训练</title>
    <link href="https://nymrli.top/2019/03/28/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AA%81%E5%87%BB%E8%AE%AD%E7%BB%83/"/>
    <id>https://nymrli.top/2019/03/28/蓝桥杯突击训练/</id>
    <published>2019-03-28T02:35:12.000Z</published>
    <updated>2019-04-26T12:18:04.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ACM-3-20笔记"><a href="#ACM-3-20笔记" class="headerlink" title="ACM 3-20笔记"></a>ACM 3-20笔记</h2><h3 id="3部排序"><a href="#3部排序" class="headerlink" title="3部排序"></a>3部排序</h3><ul><li>左指针，右指针， 探路指针–&gt;链表的pq</li></ul><h3 id="马虎的算式"><a href="#马虎的算式" class="headerlink" title="马虎的算式"></a>马虎的算式</h3><ul><li>枚举（五重循环，注意条件）</li><li>内存1000ms大约运行10^8的指令</li></ul><h3 id="大数除法"><a href="#大数除法" class="headerlink" title="大数除法"></a>大数除法</h3><ul><li>减法</li><li>除法</li></ul><h3 id="39级阶梯"><a href="#39级阶梯" class="headerlink" title="39级阶梯"></a>39级阶梯</h3><ul><li>斐波那契</li><li>简化模型后再加上考虑条件</li></ul><h3 id="错误票据"><a href="#错误票据" class="headerlink" title="错误票据"></a>错误票据</h3><ul><li><p>获得一行内容：getline()前要用getchar()吃掉换行符</p></li><li><p>分割一行以空格分隔的元素</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>,s);</span><br><span class="line"><span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line"><span class="built_in">string</span>(tmp);</span><br><span class="line"><span class="keyword">while</span>( getline(ss,tmp,<span class="string">" "</span>) )</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="▲翻硬币"><a href="#▲翻硬币" class="headerlink" title="▲翻硬币"></a>▲翻硬币</h3><p><img src="/2019/03/28/蓝桥杯突击训练/最问题.png" alt="最问题"></p><h2 id="ACM-3-21笔记-（2014年）"><a href="#ACM-3-21笔记-（2014年）" class="headerlink" title="ACM 3-21笔记 （2014年）"></a>ACM 3-21笔记 （2014年）</h2><h3 id="奇怪的分式"><a href="#奇怪的分式" class="headerlink" title="奇怪的分式"></a>奇怪的分式</h3><ul><li>gcd辗转相除法</li><li>枚举</li></ul><h3 id="蚂蚁感冒"><a href="#蚂蚁感冒" class="headerlink" title="蚂蚁感冒"></a>蚂蚁感冒</h3><ul><li>日本白书的蚂蚁模型：穿过身体</li><li></li></ul><h3 id="▲地宫取宝"><a href="#▲地宫取宝" class="headerlink" title="▲地宫取宝"></a>▲地宫取宝</h3><ul><li>深搜</li><li>递归</li><li>取模</li></ul><blockquote><p>面对&amp;$4^{100}$优化思考方向：</p><ul><li>贪心 ： 知道有一条最好的路  —X—&gt; 这题要求每种情况都遍历</li><li>重复子问题 ： 记忆化搜索<ul><li><code>dfs(int x, int y , int max,int cnt)</code>，虽然x,y都是不同的，但max,cnt可能会有相同的值，这些情况是重复的</li></ul></li><li>动态规划 （递推方式）： </li></ul></blockquote><h2 id="ACM-3-22笔记-2015"><a href="#ACM-3-22笔记-2015" class="headerlink" title="ACM 3-22笔记 (2015)"></a>ACM 3-22笔记 (2015)</h2><h3 id="T5-全排列"><a href="#T5-全排列" class="headerlink" title="T5-全排列"></a>T5-全排列</h3><ul><li>DFS框架<ul><li>递归</li><li>回溯</li></ul></li></ul><h3 id="T7-牌型种数"><a href="#T7-牌型种数" class="headerlink" title="T7-牌型种数"></a>T7-牌型种数</h3><ul><li>排列组合<ul><li>一般都是用递归解决</li><li>回溯（恢复初始状态）：袋子理论 –&gt; 每次都得把自己的袋子清空再返回</li></ul></li><li>两种思路：<ul><li>13次选牌($O(13^{13})$)</li><li>每张牌选几次（更简单$O(5^{13})$)</li></ul></li></ul><h3 id="T9-垒骰子"><a href="#T9-垒骰子" class="headerlink" title="T9-垒骰子"></a>T9-垒骰子</h3><ul><li>递归<ul><li>分治法</li><li>逐步生成</li></ul></li></ul><h3 id="ACM-3-23-2016"><a href="#ACM-3-23-2016" class="headerlink" title="ACM 3-23 (2016)"></a>ACM 3-23 (2016)</h3><ul><li>凑数字<ul><li>多个不同的数字—-&gt;全排列问题</li></ul></li></ul><hr><h2 id="附录：通用的代码工具"><a href="#附录：通用的代码工具" class="headerlink" title="附录：通用的代码工具"></a>附录：通用的代码工具</h2><h4 id="void-i2s-string-amp-s-int-amp-num"><a href="#void-i2s-string-amp-s-int-amp-num" class="headerlink" title="void i2s(string &amp;s, int &amp;num)"></a>void i2s(string &amp;s, int &amp;num)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">i2s</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="keyword">int</span> &amp;num)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; num;</span><br><span class="line">    ss &gt; s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="string去前置0"><a href="#string去前置0" class="headerlink" title="string去前置0"></a>string去前置0</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removePre0</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line"> s = s.substr(s.find_first_not_of(<span class="string">"0"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="string回溯去最后一个元素"><a href="#string回溯去最后一个元素" class="headerlink" title="string回溯去最后一个元素"></a>string回溯去最后一个元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path += pai[i];</span><br><span class="line">f(k<span class="number">-1</span>,path);</span><br><span class="line">path.erase(path.end()<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h4 id="求最大公因数-辗转相除法-："><a href="#求最大公因数-辗转相除法-：" class="headerlink" title="求最大公因数(辗转相除法)："></a>求最大公因数(辗转相除法)：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( a%b == <span class="number">0</span>) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="comment">//极端情况最大的公约数为两个中最小的一个</span></span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">    <span class="comment">// 被除数为其中小的那个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.sohu.com/a/231586600_99902636" target="_blank" rel="noopener">漫画图解</a></p><h4 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h4><h5 id="next-premutation"><a href="#next-premutation" class="headerlink" title="next_premutation"></a>next_premutation</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)&#123;</span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">1000</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a,a+n);<span class="comment">//可以自行测试一下删除后的结果</span></span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;<span class="keyword">while</span>(next_permutation(a,a+n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有sort()，输出为</p><blockquote><p>0 1 2<br>0 2 1<br>1 0 2<br>1 2 0<br>2 0 1<br>2 1 0</p></blockquote><p>若无，则输出为</p><blockquote><p>1 0 2<br>1 2 0<br>2 0 1<br>2 1 0</p></blockquote><p>可以发现少了许多种组合方法。</p><p>不过，仔细比较各种组合方法和有无<code>sort()</code>的输出，可以发现函数<code>next_permutation()</code>是按照字典序产生排列的，并且是从数组中当前的字典序开始依次增大直至到最大字典序。</p><p>△.<code>sort()</code>默认排序从小到大</p><h5 id="DFS-回溯法"><a href="#DFS-回溯法" class="headerlink" title="DFS+回溯法"></a>DFS+回溯法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>+<span class="number">5</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 5</span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( k == NUM)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; NUM; i++) <span class="built_in">cout</span> &lt;&lt; arr[i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k ; i &lt;NUM ; i++)&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t = arr[i];</span><br><span class="line">            arr[i] = arr[k];</span><br><span class="line">            arr[k] = t;</span><br><span class="line">        &#125;</span><br><span class="line">        f(k+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 回溯复原</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t = arr[i];</span><br><span class="line">            arr[i] = arr[k];</span><br><span class="line">            arr[k] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-输入输出流设置"><a href="#C-输入输出流设置" class="headerlink" title="C++输入输出流设置"></a>C++输入输出流设置</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="comment">//命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="comment">//取消输入输出流等待同步</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (i != n) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//每个输出样例间有换行,(可理解每个CASE后加个换行,最后一行没有)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C语言里的输入输出问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> d,</span><br><span class="line"><span class="keyword">float</span> f,</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">20</span>],</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%f%s"</span>,d,f,str);</span><br></pre></td></tr></table></figure><h5 id="scanf"><a href="#scanf" class="headerlink" title="scanf:"></a>scanf:</h5><p>使用 scanf 输入  42</p><ul><li>scanf()中使用%c说明符，该函数将只读取字符4 并将其存储在一个char类型的变量中</li><li>如果使用%s说明符，该函数会读取两个字符，即字符4和字符2，并将它们存储在一个字符串中。</li><li>如果使用%d说明符，则scanf 读取同样的两个字符，但是随后它会继续计算与它们的相应的整数值为4*10+2  得到 42；然后将该整数的二进制表示保存在一个int变量中，</li><li>如果使用%f说明符 则scanf（）读取这两个字符 计算它们对应的数值 42，然后以内部的浮点表述该值，并将结果保存在一个float变量中</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">0234500067</span></span><br><span class="line"><span class="comment">1034560500</span></span><br><span class="line"><span class="comment">2045600671</span></span><br><span class="line"><span class="comment">0000000089</span></span><br><span class="line"><span class="comment">通过控制读入的位数,读入矩阵</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">1</span>;c&lt;=m;c++)&#123;   </span><br><span class="line">    <span class="comment">//循环变量稍微有点奇怪   </span></span><br><span class="line">    <span class="keyword">for</span>(d=<span class="number">1</span>;d&lt;=n;d++)   </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;mapp[c][d]);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="getchar"><a href="#getchar" class="headerlink" title="getchar():"></a>getchar():</h5><p>getchar()只能输入字符型,输入时遇到回车键才从缓冲区依次提取字符.</p><p>说明：当程序调用getchar()函数时，程序就等着用户按键，用户输入的字符被存放在键盘缓冲区中，直到用户按回车为止（回车字符也放在缓冲区中）。当用户键入回车之后，getchar()函数才开始从键盘缓冲区中每次读入一个字符。也就是说，后续的getchar()函数调用不会等待用户按键，而直接读取缓冲区中的字符，直到缓冲区中的字符读完后，才重新等待用户按键。</p><h4 id="分割输入"><a href="#分割输入" class="headerlink" title="分割输入"></a>分割输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">迷宫题目</span></span><br><span class="line"><span class="comment">010010</span></span><br><span class="line"><span class="comment">001000</span></span><br><span class="line"><span class="comment">000101</span></span><br><span class="line"><span class="comment">110000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ;  i &lt;= row ; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j= <span class="number">1</span>; j &lt;= col ; j++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;maze[i][j]);</span><br><span class="line">        getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---错误票据--</span></span><br><span class="line"><span class="keyword">int</span> n ;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    getline(<span class="built_in">cin</span>,s);</span><br><span class="line">    <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">    <span class="built_in">string</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>( getline(ss,tmp,<span class="string">' '</span>) )&#123;</span><br><span class="line">        v.push_back( s2i(tmp) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ****C++输入流不同步设置****</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环移位运算"><a href="#循环移位运算" class="headerlink" title="循环移位运算"></a>循环移位运算</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 递推得到幂运算</span></span><br><span class="line"><span class="comment">* @param base基底，n幂次</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selfpow</span><span class="params">(<span class="keyword">int</span> base,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>( n-- )&#123;</span><br><span class="line">        res *= base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 自己实现x位二进制循环左移</span></span><br><span class="line"><span class="comment">* e.g. 8=1000 ， 左移=&gt; 0001</span></span><br><span class="line"><span class="comment">* @param n为len位中只有一位为1的十进制数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ROL</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> len,<span class="keyword">int</span> dir = <span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( dir == <span class="number">1</span>) &#123;</span><br><span class="line">        n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( n % selfpow(<span class="number">2</span>,len) == <span class="number">0</span> ) n = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( n == <span class="number">0</span> ) n = selfpow(<span class="number">2</span>,len<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="宏定义循环"><a href="#宏定义循环" class="headerlink" title="宏定义循环"></a>宏定义循环</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for (int i = 0; i &lt; (n); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Forneq(i,s,n) for (int i = (s); i &lt; (n); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Foreq(i,s,n) for (int i = (s); i &lt;= (n); ++i)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    For(i,<span class="number">1</span>,<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ACM-3-20笔记&quot;&gt;&lt;a href=&quot;#ACM-3-20笔记&quot; class=&quot;headerlink&quot; title=&quot;ACM 3-20笔记&quot;&gt;&lt;/a&gt;ACM 3-20笔记&lt;/h2&gt;&lt;h3 id=&quot;3部排序&quot;&gt;&lt;a href=&quot;#3部排序&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++机器学习库MLPack</title>
    <link href="https://nymrli.top/2019/03/25/C++%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%BA%93MLPack/"/>
    <id>https://nymrli.top/2019/03/25/C++机器学习库MLPack/</id>
    <published>2019-03-25T09:44:11.000Z</published>
    <updated>2019-05-30T03:21:42.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-机器学习库MLPack"><a href="#C-机器学习库MLPack" class="headerlink" title="C++机器学习库MLPack"></a>C++机器学习库MLPack</h1><blockquote><p>mlpack: a scalable C++ machine learning library</p></blockquote><p>由于在网上查了一下发现安装这个库碰到了不少问题，所以还是记录一下安装过程。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>列出两种安装教程吧，第一种实测可以。第二种在测试Armadillo的时候没通过，还是缺库，有兴趣的人可以通过给的Armadillo官网链接下载安装Armadillo再试试</p></blockquote><h3 id="安装方法一："><a href="#安装方法一：" class="headerlink" title="安装方法一："></a>安装方法一：</h3><p><a href="http://www.mlpack.org/" target="_blank" rel="noopener">Mlpack 官网</a> 提供了下载的方法 ： <code>sudo apt-get install libmlpack-dev</code> ， 但貌似有博客指出目前国内源里是没有这个镜像的，所以采取的办法是直接从观望上下载<code>mlpack-3.0.0.tar.gz</code>（没敢使用最新的，怕出错） 来编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tar -xvf mlpack-3.0.0.tar.gz </span><br><span class="line"><span class="meta">$</span> cd mlpack-1.0.12  </span><br><span class="line"><span class="meta">$</span> mkdir build  </span><br><span class="line"><span class="meta">$</span> sudo apt-get install libboost-math-dev libboost-program-options-dev libboost-random-dev libboost-test-dev libxml2-dev libarmadillo-dev  </span><br><span class="line"><span class="meta">$</span> cd build  </span><br><span class="line"><span class="meta">$</span> cmake ..</span><br><span class="line"><span class="meta">$</span> make -j4</span><br><span class="line"><span class="meta">$</span> sudo make install</span><br></pre></td></tr></table></figure><p>注意根据报错信息：<strong>Maybe need administrative privileges.</strong>，所以 <code>make install</code> 前面要加上<code>sudo</code>权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ 51%] Built target mlpack_sparse_coding</span><br><span class="line"><span class="meta">[100%</span>] Built target mlpack_test</span><br><span class="line">Install the project...</span><br><span class="line">-- Install configuration: ""</span><br><span class="line">CMake Error at cmake_install.cmake:36 (file):</span><br><span class="line">  file cannot create directory: /usr/local/lib/pkgconfig.  Maybe need</span><br><span class="line">  administrative privileges.</span><br></pre></td></tr></table></figure><p>然后就是可选的编译条件，就是你只想安装其中一些包，也是可以的：  <code>$ make pca allknn allkfn  ,只安装pca allknn allkfn这几个算法包。</code></p><p>摘自：<a href="http://www.linuxdiyf.com/linux/27052.html" target="_blank" rel="noopener">http://www.linuxdiyf.com/linux/27052.html</a></p><h3 id="安装方式二：（不推荐）"><a href="#安装方式二：（不推荐）" class="headerlink" title="安装方式二：（不推荐）"></a>安装方式二：（不推荐）</h3><h4 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Armadillo     &gt;= 6.500.0</span><br><span class="line">Boost (program_options, math_c99, unit_test_framework, serialization,</span><br><span class="line">       spirit)</span><br><span class="line">CMake         &gt;= 2.8.5</span><br></pre></td></tr></table></figure><h5 id="Aramdillo-安装-（Ubuntu为例子）"><a href="#Aramdillo-安装-（Ubuntu为例子）" class="headerlink" title="Aramdillo 安装  （Ubuntu为例子）"></a>Aramdillo 安装  （Ubuntu为例子）</h5><p> 首先安装Armadillo依赖的库：lapack, blas, boost</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get install liblapack-dev</span><br><span class="line"><span class="meta">$</span> sudo apt-get install libblas-dev</span><br><span class="line"><span class="meta">$</span> sudo apt-get install libboost-dev</span><br></pre></td></tr></table></figure><p>接下来 安装Armadillo：<code>sudo apt-get libarmadillo-dev</code></p><p>之后，安装完成，测试是否完成！以上步骤，都是应该可以直接完成的，需要Cmake和g++提前安装。</p><p><code>g++ test.cpp -o test -larmadillo</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;armadillo&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> arma;</span><br><span class="line"><span class="comment">//test.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    mat A=randu&lt;mat&gt;(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    mat B=randu&lt;mat&gt;(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    cout&lt;&lt;A*trans(B)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上还有说<strong>Armadillo</strong>也无法找不到镜像， 于是还是到官网下载下来编译安装，[Armadillo C++ matrix library](</p><h5 id="Boost库的安装"><a href="#Boost库的安装" class="headerlink" title="Boost库的安装"></a>Boost库的安装</h5><p><code>apt-get install libboost-math-dev libboost-program-options-dev libboost-random-dev libboost-test-dev libxml2-dev</code></p><h5 id="mlpack安装"><a href="#mlpack安装" class="headerlink" title="mlpack安装"></a>mlpack安装</h5><p>也是去官网下载编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tar -xzf mlpack-2.0.1.tar.gz   # tar解压</span><br><span class="line"><span class="meta">$</span> cd mlpack-2.0.1                # 进入解压后的目录</span><br><span class="line"><span class="meta">$</span> unzip mlpack-2.0.1.zip         # zip解压</span><br><span class="line"><span class="meta">$</span> cd mlpack-2.0.1                # 进入解压后的目录</span><br><span class="line"><span class="meta">#</span> 之后，建立build目录，cmake，make即可</span><br><span class="line"><span class="meta">$</span> mkdir build</span><br><span class="line"><span class="meta">$</span> cd build</span><br><span class="line"><span class="meta">$</span> cmake ../</span><br><span class="line"><span class="meta">$</span> make    </span><br><span class="line"><span class="meta">$</span> sudo make install</span><br></pre></td></tr></table></figure><h2 id="使用mlpack"><a href="#使用mlpack" class="headerlink" title="使用mlpack"></a>使用mlpack</h2><p>源文件中有各种算法的例子，可以学习其使用方法，这里需要注意一点，在编译和链接时，都要加上<code>-lmlpack -larmadillo</code>，来包含所需库。</p><p>如编写下列代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mlpack/core.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mlpack::util::GetVersion() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲.注意.编译的命令为<code>g++ -std=c++11 testmlpack.cpp -o testlars -l mlpack -l armadillo</code>，其中要加上<strong>-std=c++11</strong>，不然无法编译通过。</p><hr><p>[Armadillo C++ ML library]<a href="http://arma.sourceforge.net/download.html" target="_blank" rel="noopener">http://arma.sourceforge.net/download.html</a>)</p><p>如果<strong>Armadillo</strong>出错，可以去官网[Armadillo C++ ML library]<a href="http://arma.sourceforge.net/download.html)下载编译安装" target="_blank" rel="noopener">http://arma.sourceforge.net/download.html)下载编译安装</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-机器学习库MLPack&quot;&gt;&lt;a href=&quot;#C-机器学习库MLPack&quot; class=&quot;headerlink&quot; title=&quot;C++机器学习库MLPack&quot;&gt;&lt;/a&gt;C++机器学习库MLPack&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;mlpack: a s
      
    
    </summary>
    
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学java程序设计作业在线编程第六次作业</title>
    <link href="https://nymrli.top/2019/03/17/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E7%AC%AC%E5%85%AD%E6%AC%A1%E4%BD%9C%E4%B8%9A/"/>
    <id>https://nymrli.top/2019/03/17/南京邮电大学java程序设计作业在线编程第六次作业/</id>
    <published>2019-03-17T05:29:36.000Z</published>
    <updated>2019-03-17T08:45:46.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总分：100"><a href="#总分：100" class="headerlink" title="总分：100"></a>总分：100</h2><h3 id="选择题得分：40"><a href="#选择题得分：40" class="headerlink" title="选择题得分：40"></a>选择题得分：40</h3><ul><li>1.下列方法定义中，正确的是（）</li></ul><p>A.double me（int a，int b）{int r; r = ab}</p><p>B.double me（a，b）{return b;}</p><p>C.int me（int a，int b）{return（a-b）;}</p><p>D.int me（inta，b）{return（a-b）;}</p><p>正确答案是：C</p><ul><li>2.下列方法定义中，不正确的是（）</li></ul><p>A.float x（int a，int b）{return（ab）;}</p><p>B.int x（int a，int b）{return ab;}</p><p>C.int x（int a，int b）{return a * b;}</p><p>D.int x（int a，int b）{return 1.2 *（a + b）;}</p><p>正确答案是：D</p><ul><li>3.下面哪个数据类型占用的内存最大？（）</li></ul><p>A.int</p><p>B.float</p><p>C.double</p><p>D.byte</p><p>正确答案是：C</p><ul><li>4.下面哪个不属于Java的关键字？（）</li></ul><p>A.static</p><p>B.final</p><p>C.super</p><p>D.sub</p><p>正确答案是：D</p><ul><li>5.下面的标识符中哪个是合法的标识符？（）</li></ul><p>A.–a</p><p>B.Test</p><p>C.class</p><p>D.＃ABC</p><p>正确答案是：B</p><ul><li>6.下列语句序列执行后，c的值是（）int a = 3，b = 4，c = 0; （（a ++）&lt;（ - b））++ c;</li></ul><p>A.0</p><p>B.1</p><p>C.2</p><p>D.3</p><p>正确答案是：A</p><ul><li>7.下面关于数组定义语句不正确的是（）</li></ul><p>A.float f [] = new {2.4f，3.5f，5.7f，7.9f};</p><p>B.int a [] = {1,2,3,4,5}</p><p>C.double [] d = new double [10];</p><p>D.int [] a2;</p><p>正确答案是：A</p><ul><li>8.下面（）是Java数据类型中的int类型的取值范围。</li></ul><p>A.$-2^ 7 $〜$2^ 7 -1$</p><p>B.0 〜 $2 ^ {16} -1$</p><p>C.$-2 ^ {15} $^ 〜 $2 ^{ 15}  -1$</p><p>D.$-2 ^ {31}​$ 〜$2 ^ {31} -1​$</p><p>正确答案是：D</p><ul><li>9.在Java语言中，下面（）类型可以表示整数基本数据类型。</li></ul><p>A.single</p><p>B.byte</p><p>C.double</p><p>D.char</p><p>正确答案是：B</p><ul><li>10.假设int a = -3; 则表达式a&gt; 0？a：-a的结果是（）</li></ul><p>A.true</p><p>B.false</p><p>C.-3</p><p>D.3</p><p>正确答案是：D</p><h3 id="编程题得分：60"><a href="#编程题得分：60" class="headerlink" title="编程题得分：60"></a>编程题得分：60</h3><h4 id="输出所有的3位数字的质数得分：10-10"><a href="#输出所有的3位数字的质数得分：10-10" class="headerlink" title="输出所有的3位数字的质数得分：10/10"></a>输出所有的3位数字的质数得分：10/10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">int</span> prime[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; size; i++) &#123;</span><br><span class="line">    flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>; j &lt;= Math.sqrt(i) ; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i%j == <span class="number">0</span>)&#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !flag ) prime[pos++] = i;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pf=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prime.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prime[i] != <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.printf(<span class="string">"%6d"</span>,prime[i]);</span><br><span class="line">    pf ++;</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="number">5</span>) &#123;</span><br><span class="line">    pf = <span class="number">0</span>;</span><br><span class="line">    System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数列求和得分：10-10"><a href="#数列求和得分：10-10" class="headerlink" title="数列求和得分：10/10"></a>数列求和得分：10/10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">double</span> x = s.nextDouble();</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> single ;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">single = Math.pow(x, cnt)/fac(cnt);</span><br><span class="line">sum += Math.pow(-<span class="number">1</span>, (cnt+<span class="number">1</span>) % <span class="number">2</span>)*single;</span><br><span class="line">    cnt ++;</span><br><span class="line">&#125; <span class="keyword">while</span> ( Math.abs(single) &gt; <span class="number">1e-4</span> );</span><br><span class="line">    </span><br><span class="line">    System.out.printf(<span class="string">"%.2f\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Target</span>: 递归求阶乘</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fac</span> <span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">0</span> || a == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> a*fac(a-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最大公约数得分：10-10"><a href="#最大公约数得分：10-10" class="headerlink" title="最大公约数得分：10/10"></a>最大公约数得分：10/10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> a = s.nextInt();</span><br><span class="line">    <span class="keyword">int</span> b = s.nextInt();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    System.out.printf(<span class="string">"%d"</span>,gcd(a,b));</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( b==<span class="number">0</span> ) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出斐波那契数列的前10得分：10-10"><a href="#输出斐波那契数列的前10得分：10-10" class="headerlink" title="输出斐波那契数列的前10得分：10/10"></a>输出斐波那契数列的前10得分：10/10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">10</span>;</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;len; i++) </span><br><span class="line">    arr[i] = arr[i-<span class="number">2</span>] + arr[i-<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;len; i++) &#123;</span><br><span class="line">    System.out.printf(<span class="string">"%d"</span>,arr[i]);</span><br><span class="line">    <span class="keyword">if</span>( i != len - <span class="number">1</span>) System.out.print(<span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">else</span> System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总分：100&quot;&gt;&lt;a href=&quot;#总分：100&quot; class=&quot;headerlink&quot; title=&quot;总分：100&quot;&gt;&lt;/a&gt;总分：100&lt;/h2&gt;&lt;h3 id=&quot;选择题得分：40&quot;&gt;&lt;a href=&quot;#选择题得分：40&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="java" scheme="https://nymrli.top/tags/java/"/>
    
      <category term="NJUPT" scheme="https://nymrli.top/tags/NJUPT/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学java程序设计作业在线编程第五次作业</title>
    <link href="https://nymrli.top/2019/03/17/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%BA%94%E6%AC%A1%E4%BD%9C%E4%B8%9A/"/>
    <id>https://nymrli.top/2019/03/17/南京邮电大学java程序设计作业在线编程第五次作业/</id>
    <published>2019-03-17T03:44:36.000Z</published>
    <updated>2019-03-17T05:32:17.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总分：100"><a href="#总分：100" class="headerlink" title="总分：100"></a>总分：100</h2><h3 id="选择题得分：50"><a href="#选择题得分：50" class="headerlink" title="选择题得分：50"></a>选择题得分：50</h3><ul><li><ol><li>以下哪一个工具是Java的编译器？( )</li></ol></li></ul><p>A.javac.exe</p><p>B.java.exe</p><p>C.javap.exe</p><p>D.javadoc.exe</p><p>正确答案是: A</p><ul><li><ol start="2"><li>以下哪一个数据类型不属于Java的基本数据类型？( )</li></ol></li></ul><p>A.boolean</p><p>B.char</p><p>C.int</p><p>D.String</p><p>正确答案是: D</p><ul><li><ol start="3"><li>假设有如下类的定义： public class test{ public static void main(String[] args){ int a= 3, b = 4; swap(a,b); System.out.println(“a=”+a + “ b=” + b); } public static void swap(int a,int b){ int tmp = a; a = b; b = tmp; } } 程序运行后结果为( )</li></ol></li></ul><p>A.a=4 b=3</p><p>B.a=3 b=4</p><p>C.a=a b=b</p><p>D.无结果输出</p><p>正确答案是: B</p><ul><li><ol start="4"><li>执行如下代码后，b的值是( ) int a=0, b=0; do{ –b; a = a-1; }while(a&gt;0);</li></ol></li></ul><p>A.0</p><p>B.1</p><p>C.-1</p><p>D.死循环</p><p>正确答案是: C</p><ul><li><ol start="5"><li>下列关于Java中的数组的说法，错误的是( )。</li></ol></li></ul><p>A.数组中的元素的类型必须相同</p><p>B.数组中的元素是有顺序的</p><p>C.数组对象，属于引用类型</p><p>D.数组的大小可以任意改变</p><p>正确答案是: D</p><ul><li><ol start="6"><li>在循环体中，如果想结束本次循环，可以使用哪个语句？（ ）。</li></ol></li></ul><p>A.break</p><p>B.continue</p><p>C.final</p><p>D.finally</p><p>正确答案是: B</p><ul><li><ol start="7"><li>下列标识符中，哪一个是非法标识符？（ ）</li></ol></li></ul><p>A.statics</p><p>B.static_10</p><p>C.10static</p><p>D.$statics10</p><p>正确答案是: C</p><ul><li><ol start="8"><li>设有数组的定义int[] a = new int[3]，则下面对数组元素的引用错误的是（ ）。</li></ol></li></ul><p>A.a[0]</p><p>B.a[a.length-1]</p><p>C.int i=0;a[i]</p><p>D.a[a.length]-1</p><p>正确答案是: D</p><ul><li><ol start="9"><li>int a=new int[2][3]，则该数组包含（ ）个数组元素。</li></ol></li></ul><p>A.2</p><p>B.3</p><p>C.6</p><p>D.不确定</p><p>正确答案是: C</p><ul><li><ol start="10"><li>下面的代码段执行之后count的值是什么（ ） int count = 1; for (int i = 1; i &lt;= 5; i++) { count += i; } System.out.println(count);</li></ol></li></ul><p>A.5</p><p>B.1</p><p>C.15</p><p>D.16</p><p>正确答案是: D</p><h3 id="编程题得分：50"><a href="#编程题得分：50" class="headerlink" title="编程题得分：50"></a>编程题得分：50</h3><h4 id="数字加密-得分：10-10"><a href="#数字加密-得分：10-10" class="headerlink" title="数字加密  得分：10 / 10"></a>数字加密  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = s.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>) &#123;</span><br><span class="line">arr[cnt--] = (n%<span class="number">10</span> + <span class="number">9</span>)%<span class="number">10</span>;</span><br><span class="line">n /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">"The encrypted number is %d%d%d%d\n"</span>,arr[<span class="number">2</span>],arr[<span class="number">3</span>],arr[<span class="number">0</span>],arr[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数列排序-得分：10-10"><a href="#数列排序-得分：10-10" class="headerlink" title="数列排序  得分：10 / 10"></a>数列排序  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;  len; i++) arr[i] = s.nextInt();</span><br><span class="line">bubble(arr);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;  len; i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%4d"</span>,arr[i]);</span><br><span class="line"><span class="keyword">if</span> ( i == len-<span class="number">1</span>) System.out.println();</span><br><span class="line"><span class="comment">//else System.out.print(" ");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Target</span>: 冒泡排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr待排数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubble</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">5</span>; <span class="comment">// 第6个元素的下标是5</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">14</span>;<span class="comment">// 第15个元素的下标是14</span></span><br><span class="line"><span class="keyword">int</span> tmp ;<span class="comment">// 交换的临时变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = start; j &lt; len-(i-start); j++) &#123;</span><br><span class="line">                <span class="comment">// 类比从0 开始的冒泡,这边需要改成len-(i-start),因为j的范围只能是(start,len)</span></span><br><span class="line"><span class="keyword">if</span> ( arr[j] &lt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">tmp = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印杨辉三角形-得分：10-10"><a href="#打印杨辉三角形-得分：10-10" class="headerlink" title="打印杨辉三角形  得分：10 / 10"></a>打印杨辉三角形  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> hang = s.nextInt();</span><br><span class="line"><span class="keyword">int</span> arr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[hang][hang];</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; hang ; i++) &#123;</span><br><span class="line">arr[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; hang; j++) &#123;</span><br><span class="line">arr[i][j] = arr[i-<span class="number">1</span>][j] + arr[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hang ; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; hang; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i][j] != <span class="number">0</span> )</span><br><span class="line">System.out.printf(<span class="string">"%5d"</span>,arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造指定的数列-得分：10-10"><a href="#构造指定的数列-得分：10-10" class="headerlink" title="构造指定的数列  得分：10 / 10"></a>构造指定的数列  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> a = s.nextInt();</span><br><span class="line"><span class="keyword">int</span> b = s.nextInt();</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = a; i &lt;= b; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ( i % <span class="number">7</span> == <span class="number">0</span> || i % <span class="number">11</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ( !(i % <span class="number">7</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">11</span> == <span class="number">0</span>) )</span><br><span class="line">arr[cnt++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x : arr) </span><br><span class="line"><span class="keyword">if</span> ( x!= <span class="number">0</span>)</span><br><span class="line">System.out.printf(<span class="string">"%d "</span>,x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求平均值-得分：10-10"><a href="#求平均值-得分：10-10" class="headerlink" title="求平均值  得分：10 / 10"></a>求平均值  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019年3月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> num = s.nextInt();</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//去除最大最小值的总和</span></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;<span class="comment">//要去掉的个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) arr[i]= s.nextInt();</span><br><span class="line"></span><br><span class="line">Arrays.sort(arr);<span class="comment">// 排序,默认从大到小</span></span><br><span class="line">System.out.printf(<span class="string">"max element:%d\n"</span>, arr[num-<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 第一个是最大的</span></span><br><span class="line">System.out.printf(<span class="string">"min element:%d\n"</span>, arr[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 最后一个是最小的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 去掉最大和最小项</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ( arr[i] == arr[<span class="number">0</span>] ||  arr[i] == arr[num-<span class="number">1</span>] ) &#123;</span><br><span class="line"> arr[i] = <span class="number">0</span> ;</span><br><span class="line"> cnt ++ ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否全是最小最大值</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="keyword">true</span>)</span><br><span class="line">System.out.printf(<span class="string">"average is %5.2f\n"</span>, (<span class="keyword">double</span>)sum/(num-(cnt+<span class="number">2</span>)));</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">System.out.printf(<span class="string">"no solution\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总分：100&quot;&gt;&lt;a href=&quot;#总分：100&quot; class=&quot;headerlink&quot; title=&quot;总分：100&quot;&gt;&lt;/a&gt;总分：100&lt;/h2&gt;&lt;h3 id=&quot;选择题得分：50&quot;&gt;&lt;a href=&quot;#选择题得分：50&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="java" scheme="https://nymrli.top/tags/java/"/>
    
      <category term="NJUPT" scheme="https://nymrli.top/tags/NJUPT/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令手册</title>
    <link href="https://nymrli.top/2019/03/15/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/"/>
    <id>https://nymrli.top/2019/03/15/Linux命令手册/</id>
    <published>2019-03-15T14:33:26.000Z</published>
    <updated>2019-03-26T08:17:47.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><p><strong>1、从服务器上下载文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp username@servername:/path/filename /var/www/local_dir（本地目录）</span><br></pre></td></tr></table></figure><p> 例如scp <a href="mailto:root@192.168.0.101" target="_blank" rel="noopener">root@192.168.0.101</a>:/var/www/test.txt  把192.168.0.101上的/var/www/test.txt 的文件下载到/var/www/local_dir（本地目录）</p><p><strong>2、上传本地文件到服务器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /path/filename username@servername:/path</span><br></pre></td></tr></table></figure><p>例如scp /var/www/test.php  <a href="mailto:root@192.168.0.101" target="_blank" rel="noopener">root@192.168.0.101</a>:/var/www/  把本机/var/www/目录下的test.php文件上传到192.168.0.101这台服务器上的/var/www/目录中</p><p><strong>3、从服务器下载整个目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）</span><br></pre></td></tr></table></figure><p>例如:scp -r <a href="mailto:root@192.168.0.101" target="_blank" rel="noopener">root@192.168.0.101</a>:/var/www/test  /var/www/  </p><p><strong>4、上传目录到服务器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp  -r local_dir username@servername:remote_dir例如：scp -r test  root@192.168.0.101:/var/www/   把当前目录下的test目录上传到服务器的/var/www/ 目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh root@47.98.233.15</span></span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint for the ECDSA key sent by the remote host is</span><br><span class="line">SHA256:8hgJ8jpcBr1tm6HS72FpXwMrjba8MQqlqYJQLPB/Qf4.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key in /Users/wangdong/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending ECDSA key in /Users/wangdong/.ssh/known_hosts:26</span><br><span class="line">ECDSA host key for 47.98.233.15 has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从网上截的,自己电脑报错没报错</span></span><br><span class="line">按报错的提示,需要将C:\Users\10630\.ssh中的known_hosts中的内容删掉,因为他默认先从这里边找相同IP的,删掉后就行了</span><br></pre></td></tr></table></figure><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>SSH分客户端<code>openssh-client</code>和服务器端<code>openssh-server</code>，如果你只是想登陆别的机器的SSH只需要安装<code>openssh-client</code>（ubuntu有默认安装，如果没有则<code>sudo apt-get install openssh-client）</code>，如果要使本机开放SSH服务就需要安装<code>openssh-server</code></p><h4 id="下面讲解openssh-server"><a href="#下面讲解openssh-server" class="headerlink" title="下面讲解openssh-server"></a>下面讲解openssh-server</h4><ol><li><p>首先更新源　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装ssh服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure></li><li><p>检测是否已启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e | grep ssh</span><br></pre></td></tr></table></figure><p>看到有ssh字样，说明已启动，如果没有就手动启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br></pre></td></tr></table></figure></li><li><p>配置ssh-server，配置文件位于/etc/ssh/sshd_config，默认端口为22，为了安全，一般自定义为其他端口，然后重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/ssh resart</span><br></pre></td></tr></table></figure></li></ol><h2 id="增加桌面快捷方式"><a href="#增加桌面快捷方式" class="headerlink" title="增加桌面快捷方式"></a>增加桌面快捷方式</h2><p>Launcher :<br>​    在/usr/share/applications/中写入Roboviz.desktop文件(sudo vim Roboviz.desktop)        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Roboviz</span><br><span class="line">Comment=Roboviz</span><br><span class="line">Exec=/home/apollo3d/RoboViz-dev/bin/linux-amd64/roboviz.sh</span><br><span class="line">Icon=/home/apollo3d/RoboViz-dev/bin/linux-amd64/resources/images/icon.png</span><br><span class="line">Terminal=true</span><br><span class="line">StartupNotify=true</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Development;IDE;</span><br></pre></td></tr></table></figure><p><code>ps aux | grep</code>进程名<br><code>ps -A</code>        显示所有程序。<br><code>ps e</code>        列出程序时，显示每个程序所使用的环境变量。<br><code>kill －9 324</code><br><code>killall -9 NAME</code>　Linux下还提供了一个killall命令，可以直接使用进程的名字而不是进程标识号<br><code>chmod {u|g|o|a}{+|-|=}{r|w|x} filename</code> 修改权限<br><code>find pathname [option] expression</code>     寻找文件<br><code>grep [option] pattern filenames</code>     搜索文件中匹配符<br>​    grep -r 二进制 /home/apollo3d/Documents<br>./文件名                进入到进程的执行文件所在的路径下，执行文件</p><p><a href="https://www.cnblogs.com/lcword/p/6046261.html" target="_blank" rel="noopener">https://www.cnblogs.com/lcword/p/6046261.html</a></p><h2 id="端口操作"><a href="#端口操作" class="headerlink" title="端口操作"></a>端口操作</h2><blockquote><p>端口监听信息 <code>netstat -plant</code><br>一、查看哪些端口被打开 <code>netstat -anp</code></p><p>二、关闭端口号:<code>iptables -A OUTPUT -p tcp --dport 端口号 -j DROP</code></p><p>三、打开端口号：<code>iptables -A INPUT -ptcp --dport  端口号 -j ACCEPT</code></p><p>四、以下是linux打开端口命令的使用方法。</p><p><code>nc -lp 23 &amp;(打开23端口，即telnet)</code><br>　　<br><code>netstat -an | grep 23 (查看是否打开23端口)</code> 或者 <code>lsof -i:80</code></p><p>五、linux打开端口命令每一个打开的端口，都需要有相应的监听程序才可以</p></blockquote><h2 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h2><blockquote><p>在 root 用户下运行这条命令创建一个新用户，yangxg 是用户名</p><p>因为我叫杨学光，所以我取的用户名是 yangxg</p><p>选择一个你喜欢的用户名，不一定非得和我的相同</p><p><code>root@localhost:~# useradd -m -s /bin/bash yangxg</code></p><p>把新创建的用户加入超级权限组</p><p><code>root@localhost:~# usermod -a -G sudo yangxg</code></p><p>为新用户设置密码</p><p>注意在输密码的时候不会有字符显示，不要以为键盘坏了，正常输入即可</p><p><code>root@localhost:~# passwd yangxg</code></p><p>切换到创建的新用户</p><p><code>root@localhost:~# su - yangxg</code></p><p>切换成功，@符号前面已经是新用户名而不是 root 了</p><p><code>yangxg@localhost:~$</code></p></blockquote><h2 id="为root用户提供初始密码"><a href="#为root用户提供初始密码" class="headerlink" title="为root用户提供初始密码"></a>为root用户提供初始密码</h2><p><code>sudo passwd root</code></p><h2 id="修改为阿里云-DNS"><a href="#修改为阿里云-DNS" class="headerlink" title="修改为阿里云 DNS"></a>修改为阿里云 DNS</h2><ol><li><p>您必须是管理员root或者具有管理员权限</p></li><li><p><code>sudo vim /etc/resolv.conf</code></p></li><li><p>加入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver 223.5.5.5</span><br><span class="line">nameserver 223.6.6.6</span><br></pre></td></tr></table></figure></li><li><p>保存退出，然后使用dig 验证:</p></li><li><p><code>dig www.taobao.com +short</code>若出现结果则表示正常。</p></li></ol><h2 id="换源-更换数据源"><a href="#换源-更换数据源" class="headerlink" title="换源(更换数据源)"></a>换源(更换数据源)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rootdubuntu:/home/lusifer# curl -sSL https://get. daocloud. io/docker | sh</span><br><span class="line"></span><br><span class="line">Executing docker install script, commit:1d31602</span><br><span class="line">+sh-c apt-get update-qq&gt;/dev/null E: Could not get Lock /var/lib/apt/lists/lock-open (11: Resource temporarily unavailable)</span><br><span class="line">E: Unable to lock directory /var/lib/apt/lists/</span><br></pre></td></tr></table></figure><p>原因可能是没有<strong>更新数据源</strong></p><blockquote><p>1.备份默认的源<code>sudo cp /etc/apt/sources.list /etc/apt/sources_init.list</code></p><p>2.用你熟悉的编辑器打开：如<code>vim /etc/apt/sources.list</code>替换默认的<code>http://archive.ubuntu.com/</code>为<code>mirrors.aliyun.com</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br></pre></td></tr></table></figure><p>最后输入<code>sudo apt-get update</code></p><h2 id="Ubuntu无法找到add-apt-repository问题的解决方法"><a href="#Ubuntu无法找到add-apt-repository问题的解决方法" class="headerlink" title="Ubuntu无法找到add-apt-repository问题的解决方法"></a>Ubuntu无法找到add-apt-repository问题的解决方法</h2><blockquote><p>网上查了一下资料，原来是需要python-software-propertiduanjkes</p><p>于是<code>apt-get install python-software-properties</code></p><p>除此之外还要安装software-properties-common</p><p>于是<code>apt-get install software-properties-common</code></p><p>然后就能用add-apt-repository了</p></blockquote><hr><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="搜索代理"><a href="#搜索代理" class="headerlink" title="搜索代理"></a>搜索代理</h3><p><code>env | grep proxy</code>、<code>sudo grep -r -i http_proxy=代理地址</code></p><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><blockquote><p>临时:<code>export http_proxy=http://10.3.0.1:80</code></p></blockquote><blockquote><p>(1) 需要在/etc/apt/apt.conf中添加以下代码： (如果您希望apt-get(而不是其他应用程序)一直使用http代理,您可以使用这种方式。)</p><p><code>Acquire::http::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p><code>Acquire::ftp::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p><code>Acquire::https::proxy &quot;http://用户名:密码@地址:端口&quot;;</code></p><p>保存apt.conf文件。</p><p>(2)新建一个代理配置文件,在apt-get 时使用配置,15.10可用(针对需要下载的单个不同文件)</p><p>建立文件  <code>vim proxyfile</code></p><p><code>Acquire::http::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p><code>Acquire::ftp::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p><code>Acquire::https::proxy &quot;http://10.3.0.1:80&quot;;</code></p><p>使用时<code>sudo apt-get install  xxx -c proxyfile</code></p><p>(2)在主目录下的.bashrc文件中添加两行。(如果您希望apt-get和其他应用程序如wget等都使用http代理,您可以使用这种方式。 )</p><p>在您的.bashrc文件末尾添加如下内容<br><code>export http_proxy=http://用户名:密码@地址:端口/</code><br><code>export https_proxy=http://用户名:密码@地址:端口/</code></p><p><code>export ftp_proxy=http://用户名:密码@地址:端口/</code></p></blockquote><p><a href="https://blog.csdn.net/qq3399013670/article/details/81300497" target="_blank" rel="noopener">ubuntu 代理配置</a></p><hr><h3 id="PPA"><a href="#PPA" class="headerlink" title="PPA"></a>PPA</h3><p>1.<code>vim /usr/lib/python3/dist-packages/softwareproperties/ppa.py</code></p><p>在函数def _get_https_content_py3（lp_url）的catch案例中添加了一个print（e）显示了错误的真正原因。</p><p>2.系统时间是否正确</p><p>3.除了配置代理之外，请告诉sudo使用<code>-E</code>该标志来考虑环境 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://&lt;proxy&gt;:&lt;port&gt;</span><br><span class="line">export https_proxy=http://&lt;proxy&gt;:&lt;port&gt;</span><br><span class="line">sudo -E apt-add-repository ppa:canonical-qt5-edgers/qt5-proper</span><br></pre></td></tr></table></figure><p>with username and password:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export https_proxy=&lt;username&gt;:&lt;password&gt;@&lt;proxy&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="Ubuntu下让终端走SS代理的方法"><a href="#Ubuntu下让终端走SS代理的方法" class="headerlink" title="Ubuntu下让终端走SS代理的方法"></a>Ubuntu下让终端走SS代理的方法</h3><p>Ubuntu下让终端走SS代理需要第三方软件的帮助，即privoxy。<br>privoxy 是非快取式 (non-caching) 的网页代理伺服器，具有进阶的过滤能力，可强化隐私权，还可以修改网页资料、管理 HTTP cookies、去除广告等。</p><p><strong>安装 privoxy</strong></p><p><code>sudo apt-get install privoxy</code></p><p>安装完成后在 /etc/privoxy 目录下可以找到配置文件 config。</p><h4 id="配置-privoxy"><a href="#配置-privoxy" class="headerlink" title="配置 privoxy"></a><strong>配置 privoxy</strong></h4><p>一般地，改配置前应该备份配置。</p><p><code>mv /etc/privoxy/config /etc/privoxy/config.back</code></p><p>然后打开 config 文件，找到<code>listen-address</code>那一行，修改值为 privoxy 监听的地址，一般使用默认。</p><p>然后再找到<code>forward-socks5</code>那一行，去掉注释，值为SS代理监听的地址。</p><p>让终端走SS代理,修改配置后，重启 privoxy。</p><p><code>sudo /etc/init.d/privoxy restart</code></p><p>然后在终端下添加 http 代理。</p><p><code>export http_proxy=”127.0.0.1:8118”</code></p><p><code>export https_proxy=”127.0.0.1:8118”</code></p><p>然后就可以愉快的用终端翻墙了。</p><p>原文：<a href="https://blog.csdn.net/tailgo/article/details/52075643" target="_blank" rel="noopener">https://blog.csdn.net/tailgo/article/details/52075643</a></p><hr><h2 id="Lets-Encrypt-配置SSL错误-DNS-problem-NXDOMAIN-looking-up-A-for-xxx"><a href="#Lets-Encrypt-配置SSL错误-DNS-problem-NXDOMAIN-looking-up-A-for-xxx" class="headerlink" title="Lets Encrypt 配置SSL错误 DNS problem: NXDOMAIN looking up A for xxx"></a>Lets Encrypt 配置SSL错误 DNS problem: NXDOMAIN looking up A for xxx</h2><ul><li>刚刚解析了A记录，解析服务器还没有生效</li><li>服务器本地 <strong>DNS缓存未更新</strong></li></ul><h4 id="1-首先确定A记录是否成效"><a href="#1-首先确定A记录是否成效" class="headerlink" title="1. 首先确定A记录是否成效"></a>1. 首先确定A记录是否成效</h4><p>确定的方式很简单，在浏览器输入自己的域名，查看能否访问成功。</p><h4 id="2-确定DNS是否有问题"><a href="#2-确定DNS是否有问题" class="headerlink" title="2. 确定DNS是否有问题"></a>2. 确定DNS是否有问题</h4><h5 id="1-ping主机"><a href="#1-ping主机" class="headerlink" title="1) ping主机"></a>1) ping主机</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ping主机，如果无法发现host，则确定是dns问题</span></span><br><span class="line">$ ping demo.ptbird.cn</span><br></pre></td></tr></table></figure><h5 id="2-更新DNS缓存"><a href="#2-更新DNS缓存" class="headerlink" title="2) 更新DNS缓存"></a>2) 更新DNS缓存</h5><p>不建议直接 network restart</p><h5 id="使用nscd"><a href="#使用nscd" class="headerlink" title="使用nscd"></a>使用nscd</h5><p>如果系统没装可以装一下，nscd做DNS缓存加速很有用。</p><p><code>centos : yum install nscd</code>、<code>ubuntu ：apt-get install nscd</code></p><p>如果已经装了直接更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要是hosts</span></span><br><span class="line">$ nscd -i passwd</span><br><span class="line">$ nscd -i group</span><br><span class="line">$ nscd -i hosts</span><br></pre></td></tr></table></figure><h2 id="grep指令参数说明"><a href="#grep指令参数说明" class="headerlink" title="grep指令参数说明"></a>grep指令参数说明</h2><p><a href="https://www.cnblogs.com/forestwolf/p/6413916.html" target="_blank" rel="noopener">https://www.cnblogs.com/forestwolf/p/6413916.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;scp&quot;&gt;&lt;a href=&quot;#scp&quot; class=&quot;headerlink&quot; title=&quot;scp&quot;&gt;&lt;/a&gt;scp&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1、从服务器上下载文件&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://nymrli.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>搭建Gitlab服务器</title>
    <link href="https://nymrli.top/2019/03/14/%E6%90%AD%E5%BB%BAGitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://nymrli.top/2019/03/14/搭建Gitlab服务器/</id>
    <published>2019-03-14T10:32:26.000Z</published>
    <updated>2019-03-16T12:07:39.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建Gitlab服务器"><a href="#搭建Gitlab服务器" class="headerlink" title="搭建Gitlab服务器"></a>搭建Gitlab服务器</h1><h2 id="下载安装Gitlab"><a href="#下载安装Gitlab" class="headerlink" title="下载安装Gitlab"></a>下载安装Gitlab</h2><p>由于直接下载Gitlab会很慢(被墙的缘故) ， 于是选择清华的镜像安装，<a href="https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/" target="_blank" rel="noopener">清华源</a></p><h3 id="Ubuntu-16-04-用户"><a href="#Ubuntu-16-04-用户" class="headerlink" title="Ubuntu 16.04 用户"></a>Ubuntu 16.04 用户</h3><blockquote><p>Linux其他版本或者不是Ubuntu 16.04 见官网修改方式</p></blockquote><ul><li>首先信任 GitLab 的 GPG 公钥:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure><p>▲如果这步不行，先进行下一步</p><ul><li>文本框中内容写进 <code>/etc/apt/sources.list.d/gitlab-ce.list</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu xenial main</span><br></pre></td></tr></table></figure><ul><li>安装 gitlab-ce:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gitlab-ce</span><br></pre></td></tr></table></figure><p>安装成功后，会显示“狐狸头”。</p><ul><li>初次配置服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><ul><li>启动服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl start</span><br></pre></td></tr></table></figure><ul><li>初始化管理员root账号</li></ul><p><img src="/2019/03/14/搭建Gitlab服务器/hexo\source\_posts\搭建Gitlab服务器\1.png" alt="1"></p><h2 id="汉化-用不了–-gt-建议另找"><a href="#汉化-用不了–-gt-建议另找" class="headerlink" title="汉化(用不了–&gt;建议另找)"></a>汉化(用不了–&gt;建议另找)</h2><p>1.下载社区提供的汉化包，在 <a href="https://gitlab.com/xhang/gitlab/" target="_blank" rel="noopener">https://gitlab.com/xhang/gitlab/</a> 中找到相应的汉化分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget wget -cO gitlab-9.0_zh.tar.gz https://gitlab.com/xhang/gitlab/repository/archive.tar.gz?ref=9-0-stable-zh</span><br></pre></td></tr></table></figure><p>2.解压包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar zxvf gitlab-9.0_zh.tar.gz</span><br></pre></td></tr></table></figure><p>3.停止 GitLab 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl stop</span><br></pre></td></tr></table></figure><p>4.备份 gitlab-rails 目录，该目录下主要是web应用部分，也是当前项目仓库的起始版本，也是汉化包要覆盖的目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar zcvf /opt/gitlab/embedded/service/gitlab-rails-bak.tar.gz gitlab-rails</span><br></pre></td></tr></table></figure><p>5.将解压后的汉化补丁覆盖原来的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -rf gitlab-9-0-stable-zh/* gitlab-rails/</span><br></pre></td></tr></table></figure><p>6.启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl start</span><br></pre></td></tr></table></figure><p>7.重新执行配置命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>注意gitlab的配置文件在<code>/etc/gitlab/gitlab.rb</code>中,我个人操作是要经过一次reconfigure后，gitlab.rb才有内容的。（但<code>/opt/gitlab/etcgitlab.rb.template</code> 中一直有，应该就是因为是模板的原因吧）</p><h2 id="gitlab修改默认端口"><a href="#gitlab修改默认端口" class="headerlink" title="gitlab修改默认端口"></a>gitlab修改默认端口</h2><h3 id="gitlab-rb修改"><a href="#gitlab-rb修改" class="headerlink" title="gitlab.rb修改"></a>gitlab.rb修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Advanced settings</span></span></span><br><span class="line">unicorn['listen'] = '127.0.0.1'</span><br><span class="line">unicorn['port'] = 8082</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># GitLab Web server</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> web_server[<span class="string">'shell'</span>] = <span class="string">'/bin/false'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> web_server[<span class="string">'home'</span>] = <span class="string">'/var/opt/gitlab/nginx'</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># GitLab NGINX</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#! Docs: https://docs.gitlab.com/omnibus/settings/nginx.html</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################################################################</span></span></span><br><span class="line"></span><br><span class="line">nginx['listen_addresses'] = ['*']</span><br><span class="line">nginx['listen_port'] = 82 </span><br><span class="line"><span class="meta">#</span><span class="bash"> override only <span class="keyword">if</span> you use a reverse proxy: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md<span class="comment">#setting-the-nginx-listen-port</span></span></span><br></pre></td></tr></table></figure><h3 id="gitlab-rails修改"><a href="#gitlab-rails修改" class="headerlink" title="gitlab-rails修改"></a>gitlab-rails修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> What ports/sockets to listen on, and what options <span class="keyword">for</span> them.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">listen <span class="string">"127.0.0.1:8080"</span>, :tcp_nopush =&gt; <span class="literal">true</span></span></span><br><span class="line">listen "127.0.0.1:8082", :tcp_nopush =&gt; true</span><br><span class="line">listen "/var/opt/gitlab/gitlab-rails/sockets/gitlab.socket", :backlog =&gt; 1024</span><br></pre></td></tr></table></figure><h3 id="gitlab-nginx-修改"><a href="#gitlab-nginx-修改" class="headerlink" title="gitlab nginx 修改"></a>gitlab nginx 修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen *:82;</span><br><span class="line"> </span><br><span class="line">  server_name gitlab.123.123.cn;</span><br><span class="line">  server_tokens off; ## Don&apos;t show the nginx version number, a security best practice</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改完成后，重启下<code>sudo gitlab-ctl reconfigure</code>,<code>sudo gitlab-ctl restart</code>，就可以放82端口的gitlab了。</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录:"></a>附录:</h2><ul><li>参考链接:</li></ul><p><a href="https://www.linuxidc.com/Linux/2018-01/150319.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2018-01/150319.htm</a></p><p><a href="https://blog.csdn.net/hnmpf/article/details/80518460" target="_blank" rel="noopener">https://blog.csdn.net/hnmpf/article/details/80518460</a> (未看，但觉得应该还行)</p><hr><p>之前记录的,先放着</p><h2 id="配置Gitlab"><a href="#配置Gitlab" class="headerlink" title="配置Gitlab"></a>配置Gitlab</h2><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><h5 id="1）查看电脑配置"><a href="#1）查看电脑配置" class="headerlink" title="1）查看电脑配置"></a>1）查看电脑配置</h5><p> github对内核有限制 <strong>64位</strong>,<strong>内核3.0</strong></p><ul><li><code>uname -a</code> 、 <code>uname --m</code></li></ul><h5 id="2）安装"><a href="#2）安装" class="headerlink" title="2）安装"></a>2）安装</h5><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/" target="_blank" rel="noopener">https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/</a></p><h5 id="3）-配置开启GitLab"><a href="#3）-配置开启GitLab" class="headerlink" title="3） 配置开启GitLab"></a>3） 配置开启GitLab</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><h5 id="1-查看主机名然后登陆"><a href="#1-查看主机名然后登陆" class="headerlink" title="1.查看主机名然后登陆"></a>1.查看主机名然后登陆</h5><p>你第一次访问, 你会被自动导向到密码重置界面，重置完成密码后 会重新返回登陆界面</p><p>默认账户的 username 是 root. 提供给你的密码容易创建和登录. 登录后你可以将 username 改成你希望的.</p><h5 id="2-配置服务器及访问路径"><a href="#2-配置服务器及访问路径" class="headerlink" title="2. 配置服务器及访问路径"></a>2. 配置服务器及访问路径</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/gitlab</span></span><br><span class="line">~ external_url = "http://gitlab.aaa.com"</span><br><span class="line"><span class="meta">$</span><span class="bash"> Gitlab-ctl reconfigure</span></span><br></pre></td></tr></table></figure><h4 id="3-配置nginx及DNS域名解析"><a href="#3-配置nginx及DNS域名解析" class="headerlink" title="3.配置nginx及DNS域名解析"></a>3.配置nginx及DNS域名解析</h4><h2 id="docker-下-Gitlab搭建"><a href="#docker-下-Gitlab搭建" class="headerlink" title="docker 下 Gitlab搭建"></a>docker 下 Gitlab搭建</h2><h4 id="1-配置vim-docker-compose-yml"><a href="#1-配置vim-docker-compose-yml" class="headerlink" title="1.配置vim docker-compose.yml"></a>1.配置<code>vim docker-compose.yml</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">version:3</span><br><span class="line">services: </span><br><span class="line">gitlab: </span><br><span class="line">image: twang2218/g1tlab-ce-zh:9.4</span><br><span class="line">        restart: always hostname:192,16875.129</span><br><span class="line">        # environment里才是gitlab的设置,包含nginx和gitlab</span><br><span class="line">        # gitlab的网页访问是通过nginx的方向代理访问的</span><br><span class="line">        environment: </span><br><span class="line">        TZ: Asia/Shanghei</span><br><span class="line">        GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">                external _url 'http://192 168.75.129:8080'</span><br><span class="line">                gitlab_rails[' gitlab_shell_ssh_port']=2222</span><br><span class="line">                unicorn[' port']=8888</span><br><span class="line">                nginx[' listen_port']=8080</span><br><span class="line">        ports:</span><br><span class="line">        # 左边是宿主机的端口, 右边是容器的端口</span><br><span class="line">        - '8080:8080'</span><br><span class="line">        - '8443:443'</span><br><span class="line">        - '2222:22'</span><br><span class="line">        volumes:</span><br><span class="line">        - /usr/local/docker/gitlab/config:/etc/gitlab</span><br><span class="line">         - /usr/local/docker/gitlab/data:/var/opt/gitlab</span><br><span class="line">         - /usr/local/docker/gitlab/logs:/var/log/gitlab</span><br></pre></td></tr></table></figure><p>配置好后通过<code>http://192 168.75.129:8080</code>进行访问</p><h4 id="2-配置root用户初始密码"><a href="#2-配置root用户初始密码" class="headerlink" title="2.配置root用户初始密码"></a>2.配置root用户初始密码</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建Gitlab服务器&quot;&gt;&lt;a href=&quot;#搭建Gitlab服务器&quot; class=&quot;headerlink&quot; title=&quot;搭建Gitlab服务器&quot;&gt;&lt;/a&gt;搭建Gitlab服务器&lt;/h1&gt;&lt;h2 id=&quot;下载安装Gitlab&quot;&gt;&lt;a href=&quot;#下载安装Git
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Linux" scheme="https://nymrli.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>程序设计周cpp学习笔记</title>
    <link href="https://nymrli.top/2019/03/07/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%91%A8cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://nymrli.top/2019/03/07/程序设计周cpp学习笔记/</id>
    <published>2019-03-07T11:56:14.000Z</published>
    <updated>2019-03-07T11:56:39.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件名传参"><a href="#文件名传参" class="headerlink" title="文件名传参"></a>文件名传参</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILENAME <span class="meta-string">"data.csv"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readfile</span><span class="params">(<span class="built_in">string</span> file)</span></span>&#123;</span><br><span class="line">ifstream inFile;</span><br><span class="line">inFile.open(file.c_str(), ios::out); <span class="comment">// 打开模式可省略</span></span><br><span class="line"><span class="built_in">string</span> lineStr;</span><br><span class="line"><span class="keyword">while</span> (getline(inFile, lineStr) )</span><br><span class="line"><span class="comment">// 打印整行字符串</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; lineStr  &lt;&lt; <span class="string">'-'</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">     readfile(FILENAME);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="输入Q退出"><a href="#输入Q退出" class="headerlink" title="输入Q退出"></a>输入Q退出</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">studentMenu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> UID;</span><br><span class="line">    <span class="built_in">string</span> PWD;</span><br><span class="line">    <span class="keyword">int</span> confirmed = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//判断是否认证成功</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"请输入普通账号ID:"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span>  &gt;&gt; UID;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"请输入密码:"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span>  &gt;&gt; PWD;</span><br><span class="line">        confirmed = confirmStatus(UID,PWD);</span><br><span class="line">        <span class="keyword">if</span>( !confirmed ) <span class="built_in">cout</span> &lt;&lt; <span class="string">"账号或密码错误,请尝试.账号ID输入'Q'退出"</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>( !confirmed &amp;&amp; UID != <span class="string">"Q"</span>);</span><br><span class="line">        <span class="keyword">if</span>(confirmed) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"成功认证"</span>;</span><br><span class="line">        <span class="comment">//进入学生界面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标准库文件是在-h还是-cpp中include"><a href="#标准库文件是在-h还是-cpp中include" class="headerlink" title="!!!! 标准库文件是在.h还是.cpp中include?"></a>!!!! 标准库文件是在<code>.h</code>还是<code>.cpp</code>中include?</h3><p>现有两个文件Test.h 和Test.cpp<code>#include &lt;iostream&gt;</code>在<strong>Test.h</strong>中包含 和在<strong>Test.cpp</strong>中包含有什么区别?</p><ul><li>1、在cpp文件中包含.h文件，要么你要用到这个头文件中的函数或者类，要么就是实现这个头文件；</li><li>2、.h —就是为了放一堆声明所产生的东西。<br>如果是定义放在.h中。     如果.h被重复包含多次，那么则会被报重定义。所以在.h 中都要—如果函数就要是inline ,如果是变量就要 selectany (windows)才不会被报错。</li><li>3、#include尽量写到cpp文件里。两个文件在.h文件里相互include,就会产生编译错误，而两个文件在.c文件互相include，就不会有该问题，因此在.h文件include就要避免互相包含的问题，而.cpp文件就不需要考虑</li><li>4、1）在 .h 里面 include 的好处是：如果很多.c,.cpp文件，都包含一批头文件,如果复制很容易遗漏，如果输入，很容易出错</li></ul><p>如果全部在一个.h, include  那么每个.c,.cpp文件只需要一个#include 语句这样不仅输入量减少，而且代码也美观多了代码也主次分明了毕竟，.c.cpp, 里面要实现的函数，才是主要代码</p><p>2）主要缺陷，<br>可能会包含完全不需要的头文件，<br>增加编译工作量</p><ul><li>5、如果你在a.h头文件中include了“stdio.h”，“iostream”，……一大堆<br>那么你的a.cpp源文件只要include你的a.h，就相当于include了“stdio.h”，“iostream”，……一大堆<br>但是当其他文件include你的a.h的同时也就包含了“stdio.h”，“iostream”，……一大堆这个要看你个人需要，如果你需要让其他文件也include一大堆，那么写在a.h中就可以，其他文件包含a.cpp简单整洁无脑如果只有a.cpp需要include一大堆，那么还是建议在a.cpp中include一大堆</li><li>6、如果a.c包含了头文件a.h，a.h包含了头文件b.h，b.c也包含了b.h，那么当b.h发生改变时，a.c和b.c都会重新编译也就是所有包含了b.h的都会重新编译，无论是直接包含，还是间接包含</li><li>7、2点原则：<ul><li>第一个原则：如果可以不包含头文件，那就不要包含了，这时候前置声明可以解决问题。如果使用的仅仅是一个类的指针，没有使用这个类的具体对象（非指针），也没有访问到类的具体成员，那么前置声明就可以了。因为指针这一数据类型的大小是特定的，编译器可以获知（C++编译器自上而下编译源文件的时候，对每一个数据的定义，总是需要知道定义的数据的类型的大小） 第二个原则：尽量在CPP文件中包含头文件，而非在头文件中。假设类A的一个成员是是一个指向类B的指针，在类A的头文件中使用了类 B的前置声明并编译成功，那么在A的实现中我们需要访问B的具体成员，因此需要包含头文件，那么我们应该在类A的实现部分（CPP文件）包含类B的头文件而非声明部分(H文件)</li></ul></li></ul><p>摘自:<a href="https://www.cnblogs.com/fengzhengfly/p/8884581.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengzhengfly/p/8884581.html</a></p><hr><h3 id="C-构造函数的使用"><a href="#C-构造函数的使用" class="headerlink" title="C++ 构造函数的使用"></a>C++ 构造函数的使用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CUser</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">string</span> UID;</span><br><span class="line">        <span class="keyword">int</span> status;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>;</span><br><span class="line">        CUser():UID(<span class="string">"0"</span>),status(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">        CUser(<span class="built_in">string</span> id,<span class="keyword">int</span> sts):UID(id),status(sts)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">CUser <span class="title">user</span><span class="params">(<span class="string">"hello"</span>,<span class="number">12</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; user.UID &lt;&lt; user.status;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string转int"><a href="#string转int" class="headerlink" title="string转int"></a>string转int</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">atoi(rstatus.c_str())  </span><br><span class="line">//atoi(&quot;04&quot;); ===&gt; 4  可以忽略0</span><br><span class="line">---</span><br><span class="line">使用stringstream:</span><br><span class="line">string s = &quot;17&quot;;</span><br><span class="line">stringstream ss;</span><br><span class="line">ss&lt;&lt;s;</span><br><span class="line">int i;</span><br><span class="line">ss&gt;&gt;i;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;endl; // 17</span><br><span class="line">//stringstream可以吞下任何类型，根据实际需要吐出不同的类型</span><br></pre></td></tr></table></figure><h3 id="int转string"><a href="#int转string" class="headerlink" title="int转string"></a><strong>int转string</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">ss&lt;&lt;n;</span><br><span class="line">ss&gt;&gt;str;</span><br><span class="line"><span class="comment">//或者cout &lt;&lt; ss.str();</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itoa(num, str, 10);</span><br></pre></td></tr></table></figure><p>string转int</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::string str = &quot;123&quot;;</span><br><span class="line">int n = atoi(str.c_str());</span><br></pre></td></tr></table></figure><h3 id="int-转string"><a href="#int-转string" class="headerlink" title="int 转string"></a>int 转string</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">这是C++11新增的，使用非常方便，简单查了下：C++11标准增加了全局函数std::to_string，</span><br><span class="line">string to_string (int val);</span><br><span class="line">string to_string (long val);</span><br><span class="line">string to_string (long long val);</span><br><span class="line">string to_string (unsigned val);</span><br><span class="line">string to_string (unsigned long val);</span><br><span class="line">string to_string (unsigned long long val);</span><br><span class="line">string to_string (float val);</span><br><span class="line">string to_string (double val);</span><br><span class="line">string to_string (long double val)</span><br></pre></td></tr></table></figure><h3 id="一-string转char"><a href="#一-string转char" class="headerlink" title="一.string转char *"></a>一.string转char *</h3><ul><li>data()</li><li>c_str()</li><li>copy();</li></ul><h4 id="1、string转char-。"><a href="#1、string转char-。" class="headerlink" title="1、string转char*。"></a>1、string转char*。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 string str = &quot;hello&quot;;</span><br><span class="line">2 const char* p = str.data();//加const  或者用char * p=(char*)str.data();的形式</span><br><span class="line">/*</span><br><span class="line">同时有一点需要说明，这里在devc++中编译需要添加const，否则会报错invalid conversion from const char*  to char *，这里可以再前面加上const或者在等号后面给强制转化成char*的类型。</span><br><span class="line">　　下面解释下该问题，const char*是不能直接赋值到char*的,这样编译都不能通过,理由:假如可以的话,那么通过char*就可以修改const char指向的内容了,这是不允许的。所以char*要另外开辟新的空间，即上面的形式。</span><br><span class="line">　　*/</span><br></pre></td></tr></table></figure><h4 id="2-c-str-方法，如："><a href="#2-c-str-方法，如：" class="headerlink" title="2.c_str()方法，如："></a>2.c_str()方法，如：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 string str=“world”;</span><br><span class="line">2 const char *p = str.c_str();//同上，要加const或者等号右边用char*</span><br></pre></td></tr></table></figure><h4 id="3-copy-方法，如："><a href="#3-copy-方法，如：" class="headerlink" title="3.copy()方法，如："></a>3.copy()方法，如：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 string str=&quot;hmmm&quot;;</span><br><span class="line">2 char p[50];</span><br><span class="line">3 str.copy(p, 5, 0);//这里5代表复制几个字符，0代表复制的位置，</span><br><span class="line">4 *(p+5)=‘\0’;//注意手动加结束符！！！</span><br></pre></td></tr></table></figure><h3 id="二、char-转string。"><a href="#二、char-转string。" class="headerlink" title="二、char * 转string。"></a>二、char * 转string。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 string s;</span><br><span class="line">2 char *p = &quot;hello&quot;;//直接赋值</span><br><span class="line">3 s = p;</span><br></pre></td></tr></table></figure><p>这里有一点要说明，当声明了string类型变量s后，用printf(“%s”,s);是会出错的，因为“%s”要求后面的对象的首地址。但是string不是这样的一个类型。所以肯定出错。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">co</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> A::co()&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"hello"</span>;</span><br><span class="line">A::bo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> A::bo()&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"world"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">A a;</span><br><span class="line">a.co();</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">ifstream inFile(&quot;data1.csv&quot;, ios::in);</span><br><span class="line"></span><br><span class="line">    if (inFile.fail())&#123;</span><br><span class="line">        cout &lt;&lt; &quot;Cannot open file&quot; &lt;&lt; endl;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;string&gt; line;</span><br><span class="line">    string lineStr;</span><br><span class="line">    while (getline(inFile, lineStr) )&#123;</span><br><span class="line">    line.push_back(lineStr);</span><br><span class="line">    &#125;</span><br><span class="line">for(vector&lt;string&gt;::iterator i=line.begin();i!=line.end();i++)&#123;</span><br><span class="line">        // cout &lt;&lt; strArray.at(i)&lt;&lt;endl;</span><br><span class="line">        cout &lt;&lt; (*i) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; &quot;请输入书的数量：&quot; &lt;&lt; endl;</span><br><span class="line">    do&#123;</span><br><span class="line">cin &gt;&gt; tmp.TotalNumber;</span><br><span class="line">&#125;while( atoi( tmp.TotalNumber.c_str())  == 0  ) ;    //非数字情况</span><br></pre></td></tr></table></figure><h2 id="操作二维Vector"><a href="#操作二维Vector" class="headerlink" title="操作二维Vector"></a>操作二维Vector</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">string lineStr;</span><br><span class="line">vector&lt;vector&lt;string&gt;&gt; strArray;</span><br><span class="line">while (getline(inFile, lineStr) )&#123;</span><br><span class="line">stringstream ss(lineStr);</span><br><span class="line">string str;</span><br><span class="line">vector&lt;string&gt; lineArray;</span><br><span class="line">while (getline(ss, str, &apos;,&apos;)) lineArray.push_back(str);</span><br><span class="line">strArray.push_back(lineArray);</span><br><span class="line">for(vector&lt;vector&lt;string&gt;&gt;::iterator i=strArray.begin();i!=strArray.end();i++)&#123;</span><br><span class="line">     for(vector&lt;string&gt;::iterator j=(*i).begin();j!=(*i).end();j++)&#123;</span><br><span class="line">        cout &lt;&lt; &quot;*j &quot; ;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改好的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">inFile</span><span class="params">(<span class="string">"data1.csv"</span>, ios::in)</span></span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; lineVec;</span><br><span class="line">    <span class="keyword">if</span> (inFile.fail())&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Cannot open file"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> lineStr;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; vecArray;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; newvec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (getline(inFile, lineStr) )&#123;</span><br><span class="line"><span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(lineStr)</span></span>;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; lineVec;</span><br><span class="line"><span class="keyword">while</span> (getline(ss, str, <span class="string">','</span>)) lineVec.push_back(str);</span><br><span class="line">vecArray.push_back(lineVec);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;::iterator i=vecArray.begin();i!=vecArray.end();i++)&#123;</span><br><span class="line">     <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator j=(*i).begin();</span><br><span class="line">     <span class="keyword">if</span>( *j != <span class="string">"100009/1"</span> ) </span><br><span class="line">     &#123;newvec.push_back(lineStr);</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator i = newvec.begin(); i != newvec.end(); ++i)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二维Vector</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char const *argv[])&#123;</span><br><span class="line">vector&lt;vector&lt;string&gt;&gt; row;</span><br><span class="line">vector&lt;string&gt; col1;</span><br><span class="line">vector&lt;string&gt; col2;</span><br><span class="line"></span><br><span class="line">col1.push_back(&quot;Q&quot;);</span><br><span class="line">col1.push_back(&quot;W&quot;);</span><br><span class="line"></span><br><span class="line">col2.push_back(&quot;A&quot;);</span><br><span class="line">col2.push_back(&quot;S&quot;);</span><br><span class="line"></span><br><span class="line">row.push_back(col1);</span><br><span class="line">row.push_back(col2);</span><br><span class="line">cout &lt;&lt; row.at(0).at(1);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看vector中是否含指定的string"><a href="#查看vector中是否含指定的string" class="headerlink" title="查看vector中是否含指定的string"></a>查看vector中是否含指定的string</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main(int argc, char const *argv[])</span><br><span class="line">&#123;</span><br><span class="line">std::vector&lt;string&gt; v;</span><br><span class="line">v.push_back(&quot;hello&quot;);</span><br><span class="line">v.push_back(&quot;1ord&quot;);</span><br><span class="line">v.push_back(&quot;asd&quot;);</span><br><span class="line">if (std::find(v.begin(), v.end(), &quot;he&quot;) != v.end())</span><br><span class="line">&#123;</span><br><span class="line">  cout &lt;&lt; &quot;yes&quot;;</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环时删除某个元素,不影响循环==&gt;每个元素仍能被遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line">v.push_back(<span class="string">"1"</span>);</span><br><span class="line">v.push_back(<span class="string">"2"</span>);</span><br><span class="line">v.push_back(<span class="string">"3"</span>);</span><br><span class="line">v.push_back(<span class="string">"4"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); ++i)&#123;</span><br><span class="line"><span class="keyword">if</span> (v.at(i) == <span class="string">"2"</span>) v.erase(v.begin()+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); ++i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v.at(i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳过索引值-只输出id"><a href="#跳过索引值-只输出id" class="headerlink" title="跳过索引值,只输出id"></a>跳过索引值,只输出id</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char const *argv[])&#123;</span><br><span class="line">ifstream inFile;</span><br><span class="line">inFile.open(&quot;data1.csv&quot;);</span><br><span class="line"></span><br><span class="line">string lineStr;</span><br><span class="line">vector&lt;vector&lt;string&gt; &gt; row;</span><br><span class="line">vector&lt;string&gt; newvec;</span><br><span class="line"></span><br><span class="line">while (getline(inFile, lineStr) )&#123;</span><br><span class="line">stringstream ss(lineStr);</span><br><span class="line">string str;</span><br><span class="line">vector&lt;string&gt; col;</span><br><span class="line">while (getline(ss, str, &apos;,&apos;)) col.push_back(str);</span><br><span class="line">row.push_back(col);</span><br><span class="line">    &#125;</span><br><span class="line">for (int i = 1; i &lt; row.size(); ++i)</span><br><span class="line">     cout &lt;&lt; row.at(i).at(0) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="避免错误输入"><a href="#避免错误输入" class="headerlink" title="避免错误输入"></a>避免错误输入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while(getchar()!=&apos;\n&apos;) ;</span><br></pre></td></tr></table></figure><h3 id="分割时间"><a href="#分割时间" class="headerlink" title="分割时间"></a>分割时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void CData(string &amp;timestr)&#123;</span><br><span class="line">    stringstream ss(timestr);</span><br><span class="line">    int year;</span><br><span class="line">    int mon;</span><br><span class="line">    int day;</span><br><span class="line">    string str;</span><br><span class="line">    getline(ss, str, &apos;/&apos;);</span><br><span class="line">    year = atoi(str.c_str());</span><br><span class="line">    getline(ss, str, &apos;/&apos;);</span><br><span class="line">    mon = atoi(str.c_str());</span><br><span class="line">    getline(ss, str, &apos;/&apos;);</span><br><span class="line">    day = atoi(str.c_str());</span><br><span class="line">    cout &lt;&lt; year &lt;&lt; &quot;,&quot; &lt;&lt;  mon &lt;&lt; &quot;,&quot; &lt;&lt;  day &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char const *argv[])</span><br><span class="line">&#123;</span><br><span class="line">// string a =&quot;2017/04/02&quot;;</span><br><span class="line">// CData(a);</span><br><span class="line">stringstream ss;</span><br><span class="line">ss &lt;&lt; 1 &lt;&lt; &quot;/&quot; &lt;&lt; 2 &lt;&lt; &quot;/&quot; &lt;&lt; 3;</span><br><span class="line">cout &lt;&lt; ss.str();</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stringstream ss;</span><br><span class="line">ss &lt;&lt; 1 &lt;&lt; &quot;/&quot; &lt;&lt; 2 &lt;&lt; &quot;/&quot; &lt;&lt; 3;</span><br></pre></td></tr></table></figure><p>vector最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int maxn =  *max_element(v.begin(),v.end());</span><br></pre></td></tr></table></figure><h3 id="找到最大ID"><a href="#找到最大ID" class="headerlink" title="找到最大ID"></a>找到最大ID</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; idcol;</span><br><span class="line">string lineStr;</span><br><span class="line">    while (getline(infile, lineStr) )&#123;     //获取行</span><br><span class="line">   stringstream ss(lineStr);</span><br><span class="line">   string bookid;                              //记录列数据,必须写在这个循环里</span><br><span class="line">   getline(ss, bookid, &apos;,&apos;);</span><br><span class="line">   idcol.push_back(bookid);</span><br><span class="line">&#125;</span><br><span class="line">   int addid = vecMAX(idcol)+1;</span><br><span class="line">   stringstream inttostring;</span><br><span class="line">   inttostring &lt;&lt; addid;</span><br><span class="line">   tmp.BookID = inttostring.str();</span><br></pre></td></tr></table></figure><h3 id="二维VEC排序"><a href="#二维VEC排序" class="headerlink" title="二维VEC排序"></a>二维VEC排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    std::vector&lt;std::vector&lt;int&gt; &gt; s;</span><br><span class="line">    vector&lt;int&gt; v1;</span><br><span class="line">    vector&lt;int&gt; v2;</span><br><span class="line">    v1.push_back(5);</span><br><span class="line">    v1.push_back(13);</span><br><span class="line">    s.push_back(v1);</span><br><span class="line">    v2.push_back(7);</span><br><span class="line">    v2.push_back(4);</span><br><span class="line">    s.push_back(v2);</span><br><span class="line">    sort(s.begin(), s.end());</span><br><span class="line">    for (int i = 0; i &lt; s.size(); ++i)&#123;</span><br><span class="line">            for (int j = 0; j &lt; v1.size(); ++j)</span><br><span class="line">                 cout &lt;&lt; s.at(i).at(j);</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out.open(USERTMPFILE) 可以打开宏定义</span><br><span class="line">ios::in + ios::out 从开头加</span><br><span class="line">ios::app 从结尾加</span><br></pre></td></tr></table></figure><h3 id="获得值最大的键"><a href="#获得值最大的键" class="headerlink" title="获得值最大的键"></a>获得值最大的键</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bool cmp(const pair&lt;string, int&gt;&amp; lhs, const pair&lt;string, int&gt;&amp; rhs) &#123;  </span><br><span class="line">  return lhs.second &gt; rhs.second;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">int main(int argc, char const *argv[])&#123; </span><br><span class="line">    map&lt;string,int&gt; a ;</span><br><span class="line">    a.insert(pair&lt;string, int&gt;(&quot;ssd&quot;, 3)); </span><br><span class="line">    a[&quot;hello&quot;]=3;</span><br><span class="line">    a[&quot;world&quot;]=9;</span><br><span class="line">    a[&quot;cl&quot;]=6;</span><br><span class="line">    std::vector&lt; pair&lt;string, int&gt; &gt; v(a.begin(), a.end());</span><br><span class="line">    sort(v.begin(), v.end(),cmp);</span><br><span class="line">    cout &lt;&lt; &quot;max&quot; &lt;&lt; v.at(0).first &lt;&lt; endl;</span><br><span class="line">    getchar();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件名传参&quot;&gt;&lt;a href=&quot;#文件名传参&quot; class=&quot;headerlink&quot; title=&quot;文件名传参&quot;&gt;&lt;/a&gt;文件名传参&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="程序设计" scheme="https://nymrli.top/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ACM-DFS、BFS</title>
    <link href="https://nymrli.top/2019/03/07/ACM-DFS%E3%80%81BFS/"/>
    <id>https://nymrli.top/2019/03/07/ACM-DFS、BFS/</id>
    <published>2019-03-07T11:55:03.000Z</published>
    <updated>2019-04-26T12:08:15.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索(DFS)"></a>深度优先搜索(DFS)</h2><blockquote><p>从某个状态,不断转移状态直到无法转移,然后回退到前一步的状态,继续转移到其他状态,如此不断重复,直到找到最终解. ====&gt; 递归函数  </p><p><strong>隐式的用到了栈(stack)</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[部分和问题]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000</span></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> s[MAXN];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( i == n ) <span class="keyword">return</span> sum == k;<span class="comment">//如果前n项计算过了，返回sum=k是否相等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( dfs(i+<span class="number">1</span> , sum) ) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//不加上s[i]的情况；</span></span><br><span class="line">    <span class="keyword">if</span> ( dfs(i+<span class="number">1</span>, sum + s[i] )) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//加上s[i]的情况</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//无论加不加上s[i]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    <span class="keyword">if</span> (dfs(<span class="number">0</span>,<span class="number">0</span>)) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt;<span class="string">"NO"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="laking-countiing"><a href="#laking-countiing" class="headerlink" title="laking countiing"></a>laking countiing</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[laking countiing]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">char</span> field[MAXN][MAXN]=&#123;</span><br><span class="line">&#123;<span class="string">"W........WW."</span>&#125;,</span><br><span class="line">&#123;<span class="string">".WWW.....WWW"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"....WW...WW."</span>&#125;,</span><br><span class="line">&#123;<span class="string">".........WW."</span>&#125;,</span><br><span class="line">&#123;<span class="string">".........W.."</span>&#125;,</span><br><span class="line">&#123;<span class="string">"..W.......W."</span>&#125;,</span><br><span class="line">&#123;<span class="string">".W.W.....WW."</span>&#125;,</span><br><span class="line">&#123;<span class="string">"W.W.W.....W."</span>&#125;,</span><br><span class="line">&#123;<span class="string">".W.W......W."</span>&#125;,</span><br><span class="line">&#123;<span class="string">"..W.......W."</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    field[x][y] = <span class="string">'.'</span>;</span><br><span class="line">    <span class="comment">//循环遍历移动的8个方向,检测八连通位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> dx=<span class="number">-1</span>;dx&lt;=<span class="number">1</span>;dx++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> dy=<span class="number">-1</span>;dy&lt;=<span class="number">1</span>;dy++)&#123;</span><br><span class="line">          <span class="keyword">int</span> nx=x+dx;<span class="comment">//移动后的结果为(nx,ny)</span></span><br><span class="line">          <span class="keyword">int</span> ny=y+dy;</span><br><span class="line">          <span class="keyword">if</span>( (<span class="number">0</span> &lt;= nx &amp;&amp; nx&lt; N) &amp;&amp; (<span class="number">0</span> &lt;= ny &amp;&amp; ny &lt; M) &amp;&amp; field[nx][ny]==<span class="string">'W'</span>) dfs(nx,ny);<span class="comment">//此处为做题的关键 : 不断</span></span><br><span class="line">          &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;<span class="comment">//水坑数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;M;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(field[i][j] == <span class="string">'W'</span>)&#123;</span><br><span class="line">            dfs(i,j);</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLake</span><span class="params">()</span></span>&#123;</span><br><span class="line">    N=<span class="number">10</span>;M=<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;M;j++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; field[i][j] ;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    N=<span class="number">10</span>;</span><br><span class="line">    M=<span class="number">12</span>;</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="宽度优先搜索-BFS"><a href="#宽度优先搜索-BFS" class="headerlink" title="宽度优先搜索(BFS)"></a>宽度优先搜索(BFS)</h2><blockquote><p>总是优先搜索距离初始状态最近的状态,复杂度 = O(状态书 * 转移的方式)</p><p><strong>显式利用队列(queue)</strong>,搜索时首先将初始状态添加到队列里,此后从队列的最前端不断取出状态,吧从该状态可以转移到的状态中尚未访问过的部分加入队列,如此往返,直至队列被取空或是找到了问题的解</p></blockquote><p><strong>广度优先搜索思想</strong></p><p>设图G的初态是所有顶点均未访问，在G 中任选一顶点i作为初始点，则广度优先搜索的基本思想是：</p><ul><li>（1）从图中的某个顶点V出发，访问之；并将其访问标志置为已被访问，即visited[i]=1；</li><li>（2）依次访问顶点V的各个未被访问过的邻接 点，将V的全部邻接点都访问到；</li><li>（3）分别从这些邻接点出发，依次访问它们的未被访问过的邻接点，并使“先被访问的顶点的邻接点”先于“后被访问的顶点的邻接 点”被访问，直到图中所有已被访问过的顶点的邻接点都被访问到。依此类推，直到图中所有顶点都被访问完为止 。</li></ul><p>广度优先搜索在搜索访问一层时，需要<strong>记住已被访问的顶点</strong>，以便在访问下层顶点时，从已被访问的顶点出发搜索访问其邻接点。所以在广度优先搜索中<u>需要设置一个队列Queue，使已被访问的顶点顺序由队尾进入队列</u>。在搜索访问下层顶点时，先从队首取出一个已被访问的上层顶点，再从该顶点出发搜索访问它的各个邻接点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">W........WW.</span><br><span class="line">.WWW.....WWW</span><br><span class="line">....WW...WW.</span><br><span class="line">.........WW.</span><br><span class="line">.........W..</span><br><span class="line">.........WW.</span><br><span class="line">..W.......W.</span><br><span class="line">.W.W.....WW.</span><br><span class="line">W.W.W.....W.</span><br><span class="line">.W.W......W.</span><br><span class="line">..W.......W.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;W........WW.&#125;</span><br><span class="line">&#123;.WWW.....WWW&#125;</span><br><span class="line">&#123;....WW...WW.&#125;</span><br><span class="line">&#123;.........WW.&#125;</span><br><span class="line">&#123;.........W..&#125;</span><br><span class="line">&#123;.........WW.&#125;</span><br><span class="line">&#123;..W.......W.&#125;</span><br><span class="line">&#123;.W.W.....WW.&#125;</span><br><span class="line">&#123;W.W.W.....W.&#125;</span><br><span class="line">&#123;.W.W......W.&#125;</span><br><span class="line">&#123;..W.......W.&#125;</span><br></pre></td></tr></table></figure><h3 id="2019蓝桥杯省赛–maze"><a href="#2019蓝桥杯省赛–maze" class="headerlink" title="2019蓝桥杯省赛–maze"></a>2019蓝桥杯省赛–maze</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">010010</span></span><br><span class="line"><span class="comment">001000</span></span><br><span class="line"><span class="comment">000101</span></span><br><span class="line"><span class="comment">110000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">访问次数:9</span></span><br><span class="line"><span class="comment">访问次序:DRDRDRRR</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span> ,<span class="keyword">int</span>&gt; State;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> row = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> col = <span class="number">6</span>;</span><br><span class="line"><span class="comment">//const int INF = 10000000;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> maze[row+<span class="number">1</span>][col+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> visited[row+<span class="number">1</span>][col+<span class="number">1</span>];  <span class="comment">//是否访问过，记录次数</span></span><br><span class="line"><span class="built_in">string</span> trace[row+<span class="number">1</span>][col+<span class="number">1</span>]; <span class="comment">//记录每次移动的方向</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> X[] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;   <span class="comment">// 这边可能定义错了，这个对应的是行</span></span><br><span class="line"><span class="keyword">int</span> Y[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;   <span class="comment">// 这个对应的是列，而不是X,Y</span></span><br><span class="line"><span class="built_in">string</span> sarr[] = &#123;<span class="string">"U"</span>,<span class="string">"R"</span>,<span class="string">"D"</span>,<span class="string">"L"</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;State&gt; q;</span><br><span class="line">    <span class="comment">// 起点</span></span><br><span class="line">    q.push(State(x,y));</span><br><span class="line">    <span class="keyword">while</span>( !q.empty() )&#123;</span><br><span class="line">        <span class="comment">// 取状态</span></span><br><span class="line">        State s = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( x == row &amp;&amp; y == col ) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 到达终点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一个数组记录四个方向</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> nx = s.first + X[i];</span><br><span class="line">                <span class="keyword">int</span> ny = s.second + Y[i];</span><br><span class="line">            <span class="keyword">if</span>( nx &gt;= <span class="number">1</span> &amp;&amp; nx &lt;= row &amp;&amp;</span><br><span class="line">               ny &gt;= <span class="number">1</span> &amp;&amp; ny &lt;= col &amp;&amp;</span><br><span class="line">               maze[nx][ny] != <span class="string">'1'</span>&amp;&amp;</span><br><span class="line">               visited[nx][ny] == <span class="number">0</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//cout &lt;&lt; nx &lt;&lt; ny &lt;&lt; endl;</span></span><br><span class="line">                    visited[nx][ny] = <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//cout &lt;&lt; maze[nx][ny] &lt;&lt; sarr[i] &lt;&lt; endl;</span></span><br><span class="line">                    <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">                    visited[nx][ny] = visited[s.first][s.second] +<span class="number">1</span>;</span><br><span class="line">                    trace[nx][ny] = trace[s.first][s.second] + sarr[i];</span><br><span class="line">                    q.push(State(nx,ny));</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"times:"</span>&lt;&lt; visited[row][col] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"order:"</span>&lt;&lt; trace[row][col] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ;  i &lt;= row ; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j= <span class="number">1</span>; j &lt;= col ; j++)</span><br><span class="line">            visited[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 起点为(1,1)</span></span><br><span class="line">    visited[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理输入</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ;  i &lt;= row ; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j= <span class="number">1</span>; j &lt;= col ; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;maze[i][j]);</span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bfs();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;深度优先搜索-DFS&quot;&gt;&lt;a href=&quot;#深度优先搜索-DFS&quot; class=&quot;headerlink&quot; title=&quot;深度优先搜索(DFS)&quot;&gt;&lt;/a&gt;深度优先搜索(DFS)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;从某个状态,不断转移状态直到无法转移,然后回退
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
  </entry>
  
</feed>
