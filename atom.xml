<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>果粒橙的博客</title>
  
  <subtitle>别装作很努力，因为结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2019-03-03T12:00:19.046Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>果粒橙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux下开机启动Python脚本</title>
    <link href="https://nymrli.top/2019/03/03/Linux%E4%B8%8B%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8Python%E8%84%9A%E6%9C%AC/"/>
    <id>https://nymrli.top/2019/03/03/Linux下开机启动Python脚本/</id>
    <published>2019-03-03T11:48:46.000Z</published>
    <updated>2019-03-03T12:00:19.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rc-local"><a href="#rc-local" class="headerlink" title="rc.local"></a>rc.local</h1><p>将脚本写在<code>/etc/rc.local</code>文件<br>输入命令：<code>sudo vi /etc/rc.local</code><br>在<code>exit 0</code>上一行输入：<code>python /usr/bin/python /home/pi/test.py</code><br>重启就可以看效果<code>sudo reboot</code></p><blockquote><p>当然，rc.local 文件需要有执行权限（默认没有）<br><code>$ sudo chmod +x /etc/rc.local</code><br>对于命令，最好是先which python查出命令路径，写命令时写绝对路径</p></blockquote><h1 id="etc-init-d"><a href="#etc-init-d" class="headerlink" title="/etc/init.d"></a>/etc/init.d</h1><p>写一个服务放到linux的<code>/etc/init.d</code>目录中</p><p>并且授权bash脚本<code>chmod 755 /etc/init.d/mypython</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 66 36</span></span><br><span class="line"><span class="comment"># /etc/rc.d/init.d/opt/python</span></span><br><span class="line"><span class="comment"># description: spython</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Starting python: "</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        date +<span class="string">"! %T %a %D : Starting python ."</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line"><span class="built_in">echo</span> start</span><br><span class="line">        <span class="built_in">cd</span>  /root/finmonAgent/bin</span><br><span class="line">./finmonAgent.py &amp;</span><br><span class="line"><span class="comment">#sh /root/finmonAgent/startpy</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Done."</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        date +<span class="string">"! %T %a %D : Finished."</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        touch /var/lock/subsys/python</span><br><span class="line">        ;;</span><br><span class="line">  stop)</span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Shutting Down python Listeners: "</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        date +<span class="string">"! %T %a %D : Shutting Down python."</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"python"</span></span><br><span class="line">        killall -9 finmonAgent.py</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Done."</span></span><br><span class="line">        rm -f /var/lock/subsys/python      </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Done."</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        date +<span class="string">"! %T %a %D : Finished."</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------"</span> &gt;&gt;/var/<span class="built_in">log</span>/python</span><br><span class="line">        ;;</span><br><span class="line">  *)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Usage: python &#123; start | stop | restart &#125;"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h1 id="ect-profile"><a href="#ect-profile" class="headerlink" title="/ect/profile"></a>/ect/profile</h1><blockquote><p> /ect/profile 文件是系统默认的主启动文件，系统上每个用户登录时都会执行；</p></blockquote><h2 id="linux-配置文件（启动文件、环境文件）启动顺序"><a href="#linux-配置文件（启动文件、环境文件）启动顺序" class="headerlink" title="linux 配置文件（启动文件、环境文件）启动顺序"></a><a href="https://www.cnblogs.com/GO-NO-1/p/9084713.html" target="_blank" rel="noopener">linux 配置文件（启动文件、环境文件）启动顺序</a></h2><h3 id="1、登录shell"><a href="#1、登录shell" class="headerlink" title="1、登录shell"></a>1、登录shell</h3><p>登录shell时，linux会按一定规则读取启动几个配置文件：</p><blockquote><p>/ect/profile</p><p>$HOME/.bash_profile</p><p>$HOME/.bashrc</p><p>$HOME/.bash_login</p><p>$HOME/.profile</p></blockquote><p>其中 /ect/profile 文件是系统默认的主启动文件，系统上每个用户登录时都会执行；</p><ul><li>a、命令行登录和ssh登录，shell会按照以下顺序，运行第一个被找到的文件，余下的会被忽略：</li></ul><blockquote><p>$HOME/.bash_profile</p><p>$HOME/.bash_login</p><p>$HOME/.profile</p></blockquote><p>上面没有 $HOME/.bashrc ，因为该文件一般通过其他文件运行。</p><ul><li>b、图形界面登录，只加载 <code>/ect/profile</code>和<code>$HOME/.profile</code>，其他的会被忽略。</li></ul><p>对于 no-login shell，即图形界面打开的shell，只会读入 $HOME/.bashrc 文件，不会检查 /etc/.profile 等其他登录shell文件。</p><hr><h3 id="2、交互式shell"><a href="#2、交互式shell" class="headerlink" title="2、交互式shell"></a>2、交互式shell</h3><p>不是登录系统时启动，提供命令行提示符来输入命令。（不会访问 /etc/profile 文件，会检查 $HOME/.bashrc 文件）</p><hr><h3 id="3、非交互式shell"><a href="#3、非交互式shell" class="headerlink" title="3、非交互式shell"></a>3、非交互式shell</h3><p>系统执行脚本时所用，没有命令行提示符。</p><h2 id="linux将指令加入开机启动或加入环境变量"><a href="#linux将指令加入开机启动或加入环境变量" class="headerlink" title="linux将指令加入开机启动或加入环境变量"></a><a href="https://www.cnblogs.com/usa007lhy/p/5517036.html" target="_blank" rel="noopener">linux将指令加入开机启动或加入环境变量</a></h2><p>（2）在profile中添加PATH，这种方法对所有用户都是永久生效。</p><p>a）打开profile文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`vim /etc/profile`</span><br></pre></td></tr></table></figure><p>b）在profile文件的PATH中添加mongo指令。在PATH后面添加“:/usr/local/webserver/mongo/bin”，＝ 等号两边不能有任何空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`PATH=``$PATH``:/usr/local/webserver/mongo/bin`</span><br></pre></td></tr></table></figure><p>c）执行指令，使profile修改立即生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`source profile`</span><br></pre></td></tr></table></figure><p>（3）在当前profile中添加PATH，这种方法对当前用户永久生效。与第二步类似，将profile替换为bash_profile。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`vim ~/.bash_profile`</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`PATH=``$PATH``:/usr/local/webserver/mongo/bin`</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`source ~/.bash_profile`</span><br></pre></td></tr></table></figure><p>2，linux将指令加入开机启动</p><p>在/etc/rc.local中添加指令即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`/usr/local/webserver/mongodb/bin/mongod --dbpath=/data0/mongodb/data --logpath=/data0/mongodb/logs --logappend  --port=27017`</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;rc-local&quot;&gt;&lt;a href=&quot;#rc-local&quot; class=&quot;headerlink&quot; title=&quot;rc.local&quot;&gt;&lt;/a&gt;rc.local&lt;/h1&gt;&lt;p&gt;将脚本写在&lt;code&gt;/etc/rc.local&lt;/code&gt;文件&lt;br&gt;输入命令：&lt;cod
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://nymrli.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>codeblocks中boost库安装</title>
    <link href="https://nymrli.top/2019/03/03/codeblocks%E4%B8%ADboost%E5%BA%93%E5%AE%89%E8%A3%85/"/>
    <id>https://nymrli.top/2019/03/03/codeblocks中boost库安装/</id>
    <published>2019-03-03T11:04:59.000Z</published>
    <updated>2019-03-03T11:41:42.704Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先要提出的是，boost在VS中是可以直接导入的，但是在CB中是不行的，所以写了下这篇文章。</p></blockquote><h3 id="安装boost"><a href="#安装boost" class="headerlink" title="安装boost"></a>安装boost</h3><p>1.首先先去<a href="https://www.baidu.com/link?url=-mzs9vDM5lBRhlkshrGvlpLVpJegtSzYal_mo09Rqim&amp;wd=&amp;eqid=822838e90004acef000000055c7bb4f8" target="_blank" rel="noopener">boost官网</a>下载boost的源码 ， 选择你要下载的版本。 </p><p>2.解压（可能会耗费一段时间，小文件比较多） </p><p>3.双击运行脚本文件<strong>bootstrap.bat</strong>（引导程序），之后就生成这两个可执行文件 </p><p>我们为了能直观的看到编译boost的细节信息，进入dos (<code>win +ｒ</code>快捷键　输入cmd )</p><p>4.cd 到解压boost库的目录下 </p><p>5.命令执行<code>bjam.exe</code></p><p>4-5是没必要的，要是不想看输出的东西的话，其实双击<code>bjam.exe</code>即可</p><p><img src="/2019/03/03/codeblocks中boost库安装/1.png" alt="1"></p><p>▲.编译的时间<strong>略久</strong>（你可以干一会其他事，喝个茶） </p><p>注:  安装boost貌似需要VS的某个模块，一开始在活动室电脑上装由于没有VS，所以没装成，最后在自己的电脑上装好的。</p><hr><h3 id="codeblocks设置"><a href="#codeblocks设置" class="headerlink" title="codeblocks设置"></a>codeblocks设置</h3><p>点击<strong>settings</strong>，选择下拉菜单中的 compiler选项 </p><p>注意这里选择Search directories第三项 最下面有一个add按钮，点击将boost解压路径添加即可。 </p><p><img src="/2019/03/03/codeblocks中boost库安装/3.jpg" alt="3"></p><p>之后你可以随便写一点程序进行测试</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/lambda/lambda.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> boost::lambda;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::istream_iterator&lt;<span class="keyword">int</span>&gt; in;</span><br><span class="line">    <span class="built_in">std</span>::for_each( in(<span class="built_in">std</span>::<span class="built_in">cin</span>), in(), <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (_1 * <span class="number">3</span>) &lt;&lt; <span class="string">" "</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;首先要提出的是，boost在VS中是可以直接导入的，但是在CB中是不行的，所以写了下这篇文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装boost&quot;&gt;&lt;a href=&quot;#安装boost&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>ACM_线性筛</title>
    <link href="https://nymrli.top/2019/03/03/ACM-%E7%BA%BF%E6%80%A7%E7%AD%9B/"/>
    <id>https://nymrli.top/2019/03/03/ACM-线性筛/</id>
    <published>2019-03-03T08:57:36.000Z</published>
    <updated>2019-03-03T10:11:26.861Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是线性筛"><a href="#什么是线性筛" class="headerlink" title="什么是线性筛?"></a>什么是线性筛?</h3><blockquote><p> 筛素数是为了求得一个区间内的所有素数，而把不是素数的筛去。</p></blockquote><p>最普通的办法——判断一个数是不是素数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 1000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> check[SIZE];</span><br><span class="line">    <span class="keyword">int</span> prime[SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> ; i &lt; SIZE ; i++)&#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span> ; j &lt; <span class="built_in">sqrt</span>(i) ; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) prime[pos++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>, (<span class="keyword">double</span>)clock()/CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="普通筛素数——将不是素数的筛掉"><a href="#普通筛素数——将不是素数的筛掉" class="headerlink" title="普通筛素数——将不是素数的筛掉"></a>普通筛素数——将不是素数的筛掉</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 1000</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> checked[SIZE] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 如果是1的话就是合数</span></span><br><span class="line">    <span class="keyword">int</span> prime[SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">2</span>;i &lt; SIZE ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> ( ! checked[i] )&#123;</span><br><span class="line">           prime[pos++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>( j = <span class="number">2</span>*i; j &lt; SIZE ; j += i ) checked[j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>;i&lt; SIZE ; i++)</span><br><span class="line">        <span class="keyword">if</span> (prime[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i<span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="comment">// 素数的个数</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output : 168</span></span><br></pre></td></tr></table></figure><h3 id="普通筛素数"><a href="#普通筛素数" class="headerlink" title="普通筛素数"></a>普通筛素数</h3><ul><li>基本思想<br> 一次循环筛掉当前素数的倍数</li><li>缺点<ul><li>存在重复筛选，比如6既可以被2筛掉，又可以被3筛掉。</li><li>原因：任意一个整数可以写成一些素数的乘积 $n=p_{1}^{a} <em> p_{2}^{b} </em> p_{3}^{c}​$，其中$p1&lt;p2&lt;p3​$，这样这个数n就能被p1,p2和p3筛掉</li></ul></li><li>解决方法：按照一个数的最小素因子筛去(也就是这里的p1)就可以啦，这也就有了线性筛素数</li></ul><p><img src="/2019/03/03/ACM-线性筛/1.png" alt="1"></p><h3 id="线性筛素数"><a href="#线性筛素数" class="headerlink" title="线性筛素数"></a>线性筛素数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 1000</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> check[SIZE] = &#123;<span class="number">0</span>&#125;;<span class="comment">//元素值为0代表是素数</span></span><br><span class="line">    <span class="keyword">int</span> prime[SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> ; i &lt; SIZE ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!check[i])<span class="comment">//如果是素数</span></span><br><span class="line">            prime[pos++] = i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ★.区别在于此</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; pos &amp;&amp; i*prime[j] &lt; SIZE ; j++)&#123;</span><br><span class="line"><span class="comment">/* cl觉得可以写成for (int j = 0 ;  i*prime[j] &lt; SIZE ; j++)j &lt; pos 是多余的,</span></span><br><span class="line"><span class="comment">如果i是个素数,比如7,那么prime[x]=7,当j=x的时候必然有if (i % prime[j] == 0), 此时x=pos - 1</span></span><br><span class="line"><span class="comment">如果是个合数,比如15,那么肯定有最小素因子使得(i % prime[j] == 0),此时j &lt; pos </span></span><br><span class="line"><span class="comment">如果i是个偶数,比如8,那么if (i % prime[j] == 0)  此时在2的时候就退出了。j=0 &lt; pos</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            </span><br><span class="line">            check[i*prime[j]] = <span class="number">1</span>;<span class="comment">//筛掉</span></span><br><span class="line">            <span class="comment">//标注一</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 通过这步可以找到最小素数因子,</span></span><br><span class="line">            <span class="comment">// 比如12,那么 prime[j] 最先== prime[0] == 2 , 即找到了最小的因子2,</span></span><br><span class="line">            <span class="comment">// 那12就不是个素数,就不用再判断它是不是能被3合成 </span></span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>, (<span class="keyword">double</span>)clock()/CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本思想<br> 当前数字是$n=p_{1}^{a} <em> p_{2}^{b} </em> p_{3}^{c}​$(p1&lt;p2&lt;p3且均为素数)，一次循环筛除<em>小于等于p1的素数乘以n得到的</em>数。比如p1之前有pi,pj和pk三个素数，则此次循环筛掉<code>pi*n,pj*n,pk*n</code>和<code>p1*n</code> ，实现见代码的<strong>标注一</strong>，<code>prime</code> 里的素数都是升序排列的，<code>break</code>时的<code>prime[j]</code> 就是这里的<code>p1</code>。</p><p>优点：没有重复筛同一个数</p><ul><li>原因：按照一个数的最小素因子筛选，比如6只按2筛去</li></ul><p><img src="/2019/03/03/ACM-线性筛/3.png" alt="3"></p><p>从图上我们看到，第一列筛掉的是最小素因子是2的数，第二列筛掉的是最小素因子为3的数，第三列最小素因子是prime[2]==5 ，依次类推，可以把所有的合数都筛掉。</p><p>由于每列筛掉的合数都是 它自身的平方 ， 即 一个素数最小的因子除了1就是它本身， 所以 <strong>素数的平方</strong>的<u>最小素因子</u>就是 <strong>它本身</strong> ， 而通过<code>i % prime[j] == 0</code>就可以控制不多筛。</p><p>因为是按照最小素因子筛选，所以可以保证每个数都只会被筛一遍 ==&gt; <code>18--9x2</code> </p><p>摘自：<a href="https://www.jianshu.com/p/f16d318efe9b" target="_blank" rel="noopener">这只菜鸟总算搞懂了线性筛素数</a></p><hr><p>素数的判别挺有意思的，剪枝的方法可以见我的另一篇博客 :  <a href="https://nymrli.top/2018/10/15/%E7%B4%A0%E6%95%B0%E5%88%A4%E5%88%AB/">素数判别</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是线性筛&quot;&gt;&lt;a href=&quot;#什么是线性筛&quot; class=&quot;headerlink&quot; title=&quot;什么是线性筛?&quot;&gt;&lt;/a&gt;什么是线性筛?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; 筛素数是为了求得一个区间内的所有素数，而把不是素数的筛去。&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
      <category term="线性筛" scheme="https://nymrli.top/tags/%E7%BA%BF%E6%80%A7%E7%AD%9B/"/>
    
  </entry>
  
  <entry>
    <title>flask+nginx如何获得真实IP</title>
    <link href="https://nymrli.top/2019/03/02/flask-nginx%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E7%9C%9F%E5%AE%9EIP/"/>
    <id>https://nymrli.top/2019/03/02/flask-nginx如何获得真实IP/</id>
    <published>2019-03-02T12:53:58.000Z</published>
    <updated>2019-03-02T13:00:42.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果是通过 flask 的 <code>request.remote_addr</code>获取的 ip 都是 <code>127.0.0.1</code></p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h2><h3 id="nginx-conf中添加"><a href="#nginx-conf中添加" class="headerlink" title="nginx.conf中添加"></a><strong>nginx.conf</strong>中添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># proxy_set_header Host $host:80; </span><br><span class="line"># proxy_set_header X-Real-IP $remote_addr; </span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br></pre></td></tr></table></figure><p>全文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8888;</span><br><span class="line">    server_name 0.0.0.0;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    client_max_body_size 75M;</span><br><span class="line">    location /static&#123;</span><br><span class="line">    alias /home/apollo3d/Documents/Cl/webenv/.../static;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    include uwsgi_params;</span><br><span class="line">    uwsgi_pass 127.0.0.1:8889;</span><br><span class="line">    uwsgi_param UWSGI_SCRIPT app:app;   # 启动flask的文件:Flask的实例</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if request.headers.getlist(&quot;X-Forwarded-For&quot;):</span><br><span class="line">    ip = request.headers.getlist(&quot;X-Forwarded-For&quot;)[0]</span><br><span class="line">else:</span><br><span class="line">    ip = request.remote_addr</span><br></pre></td></tr></table></figure><p>查自:<a href="http://neue.v2ex.com/t/294472" target="_blank" rel="noopener">V2EX</a></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展:"></a>拓展:</h2><p><strong>X-Forwarded-For</strong> 可能会有多个 IP ，如果浏览器使用了代理的话<br>正确的做法应该是抓 <code>X-Real-IP</code>，或者分隔 <code>X-Forwarded-For</code>取第 1 个值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;如果是通过 flask 的 &lt;code&gt;request.remote_addr&lt;/code&gt;获取的 ip 都是 &lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方
      
    
    </summary>
    
    
      <category term="flask" scheme="https://nymrli.top/tags/flask/"/>
    
      <category term="nginx" scheme="https://nymrli.top/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>frp结合nginx实现内网web服务和tcp的转发</title>
    <link href="https://nymrli.top/2019/03/02/frp%E7%BB%93%E5%90%88nginx%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91web%E6%9C%8D%E5%8A%A1%E5%92%8Ctcp%E7%9A%84%E8%BD%AC%E5%8F%91/"/>
    <id>https://nymrli.top/2019/03/02/frp结合nginx实现内网web服务和tcp的转发/</id>
    <published>2019-03-02T10:48:23.000Z</published>
    <updated>2019-03-02T11:41:56.520Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>服务端 - 阿里云服务器: Ubuntu 16.04</p><p>客户端 - 活动室电脑 : Ubuntu 16.04</p></blockquote><h2 id="配置server端"><a href="#配置server端" class="headerlink" title="配置server端"></a>配置server端</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim frps.ini</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[common]                 #必须有的配置段，在frpc.ini和frps.ini中都必须要有</span><br><span class="line">bind_port = 7000         #服务端服务的监听端口</span><br><span class="line">vhost_http_port = 16666  #自己设定的http访问端口</span><br><span class="line">vhost_https_port = 17777 #自己设定的https访问端口</span><br></pre></td></tr></table></figure><p>保存并且退出，使用如下服务命令启动frps服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup ./frps -c ./frps.ini &amp;</span></span><br></pre></td></tr></table></figure><h2 id="client端"><a href="#client端" class="headerlink" title="client端:"></a>client端:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim frpc.ini</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[common]                #必须有的配置段，在frpc.ini和frps.ini中都必须要有</span><br><span class="line">server_addr = x.x.x.x   #服务端的公网IP（外网IP）</span><br><span class="line">server_port = 7000      #服务端服务的监听端口</span><br><span class="line"></span><br><span class="line">[web]                   #自己定义的服务转发标签（自定义，非严格）</span><br><span class="line">type = http             #定义转发类型为http（严格）</span><br><span class="line">local_port = 8800       #定义所需要转发的本地web服务的端口为8800,跟nginx设置的一致</span><br><span class="line">custom_domains = node1.xxx.com #定义访问转发服务的域名（确保使用该域名访问可以解析到有公网IP的服务端）</span><br><span class="line"></span><br><span class="line">[ssh]                   #自己定义的服务转发标签（自定义，严格）</span><br><span class="line">type = tcp              #定义转发类型为tcp（严格）</span><br><span class="line">local_ip = 127.0.0.1    #由于转发代理的ssh服务在本地，因此填写本地地址</span><br><span class="line">local_port = 22         #ssh服务本地的监听端口</span><br><span class="line">remote_port = 6000      #实际开启ssh时连接时访问的端口</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup ./frps -c ./frps.ini &amp;</span></span><br></pre></td></tr></table></figure><h2 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明"></a>解释说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[common]中的server_addr填frp服务端的ip（也就是外网主机的IP），server_port填frp服务端的bind_prot(s和c必须一致)。</span><br><span class="line">[web]中，type转发类型为http，local_port填转发的web端口，custom_domains 填 能够使用的域名.</span><br><span class="line">说到这里，域名解析，服务端建议使用阿里云，直接填写A记录，三级子域名专门申请几个，备用.</span><br><span class="line">类似：node1.xxx.com、node2.xxx.com、node3.xxx.com</span><br></pre></td></tr></table></figure><p>阿里云设置A记录:</p><p>一开始以为一个IP不能写多个A记录，后来发现是可以的。如下</p><p><img src="/2019/03/02/frp结合nginx实现内网web服务和tcp的转发/1.jpg" alt="1"></p><p>这里还要注意几点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[web]上下文中，凡是type类型为http或者同一个类型，custom_domains中填写的域名必须为不同的域名，相同域名会报错</span><br><span class="line">不同类型的type，例如[test]中的type类型为tcp，则可以使用相同域名</span><br><span class="line">简单来说type类型相同，不能使用同一个域名</span><br><span class="line">type类型不同，可以使用相同的域名。</span><br></pre></td></tr></table></figure><h2 id="测试和访问"><a href="#测试和访问" class="headerlink" title="测试和访问"></a>测试和访问</h2><h3 id="web服务访问格式为：域名-端口-具体如下"><a href="#web服务访问格式为：域名-端口-具体如下" class="headerlink" title="web服务访问格式为：域名+端口,具体如下:"></a>web服务访问格式为：域名+端口,具体如下:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://node1.xxx.com:16666 页面转到内网客户端使用nginx反向代理的web服务8800</span><br><span class="line">http://node2.xxx.com:16666 页面转到内网客户端使用nginx反向代理的web服务8801</span><br><span class="line">http://node3.xxx.com:16666 页面转到内网客户端本地的web服务端口8088</span><br></pre></td></tr></table></figure><p>▲当然要记得去阿里云的防火墙将16666端口打开才行， 然后我测试了一下，通过IP访问好像是不行的，<strong>域名:port</strong>是可以的</p><p><img src="/2019/03/02/frp结合nginx实现内网web服务和tcp的转发/3.jpg" alt="3"></p><h3 id="ssh服务远程和连接"><a href="#ssh服务远程和连接" class="headerlink" title="ssh服务远程和连接"></a>ssh服务远程和连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -oPort=6000 username@x.x.x.x</span><br><span class="line">注：x.x.x.x为服务端的公网IP</span><br></pre></td></tr></table></figure><p>摘自：<a href="https://www.jianshu.com/p/0c49556e8e15" target="_blank" rel="noopener">https://www.jianshu.com/p/0c49556e8e15</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;服务端 - 阿里云服务器: Ubuntu 16.04&lt;/p&gt;
&lt;p&gt;客户端 - 活动室电脑 : Ubuntu 16.04&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;配置server端&quot;&gt;&lt;a href=&quot;#配置server端&quot; class
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="linux" scheme="https://nymrli.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>构造一个能发数据的POST请求头</title>
    <link href="https://nymrli.top/2019/03/01/%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AA%E8%83%BD%E5%8F%91%E6%95%B0%E6%8D%AE%E7%9A%84POST%E8%AF%B7%E6%B1%82%E5%A4%B4/"/>
    <id>https://nymrli.top/2019/03/01/构造一个能发数据的POST请求头/</id>
    <published>2019-03-01T14:23:52.000Z</published>
    <updated>2019-03-02T03:38:31.153Z</updated>
    
    <content type="html"><![CDATA[<p>之前学<strong>请求</strong>、<strong>响应</strong>的时候只是过了一边，大致知道有这些东西。但这次真正要用的时候却又忘了到底该如何写，错误的请求头、请求体的格式导致<code>esp8266</code>一直发送不了数据到服务器上，又重新看了遍<strong>请求request</strong>的知识，才终于搞明白</p><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="最初的写法"><a href="#最初的写法" class="headerlink" title="最初的写法:"></a>最初的写法:</h3><p>由于在<strong>esp8266</strong>上已经选择、连接好了了<strong>httpbin.org</strong>的穿透，就以为Host可以不用加了，于是产生了 <em>最初的写法</em>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /post?= HTTP/1.1</span><br></pre></td></tr></table></figure><p>▲根据玩单片机的小伙伴说必须多出一行<code>\r\n</code>，所以这边是有一行空行的</p><h4 id="结果：-400-BAD-REQUEST"><a href="#结果：-400-BAD-REQUEST" class="headerlink" title="结果： 400 BAD_REQUEST"></a>结果： <code>400 BAD_REQUEST</code></h4><p>搜索过后得知 : <u>如果使用<strong>http 1.1</strong>协议的话主机名HOST字段是必须的</u></p><h3 id="第二次写法"><a href="#第二次写法" class="headerlink" title="第二次写法:"></a>第二次写法:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST /post?= HTTP/1.1 </span><br><span class="line">Host:httpbin.org</span><br></pre></td></tr></table></figure><p>可以注意到的是Host是顶层域名，<code>/post</code>只是其中的一个路由</p><h4 id="结果-成功，这样就算可以正常发送post请求了"><a href="#结果-成功，这样就算可以正常发送post请求了" class="headerlink" title="结果: 成功，这样就算可以正常发送post请求了"></a>结果: 成功，这样就算可以正常发送post请求了</h4><p>于是下一步就是研究如何<strong>上传数据</strong></p><h3 id="第三次写法："><a href="#第三次写法：" class="headerlink" title="第三次写法："></a>第三次写法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /post?= HTTP/1.1</span><br><span class="line">Host: httpbin.org</span><br><span class="line">tempt=57</span><br></pre></td></tr></table></figure><p>于是这次都没有返回值了.</p><p>想起了表单是有形式的，于是添加了</p><ul><li><code>Content-Type: application/x-www-form-urlencoded</code><ul><li>这个形式的参数应该写成<code>a=1&amp;b=..&amp;..</code></li><li>注.如果请求网页的<strong>表单</strong>中没设置 <code>enctype</code> 属性，那么最终就会默认以 <code>application/x-www-form-urlencoded</code> 方式提交数据。</li></ul></li><li><p>如果是<code>Content-Type: application/json</code></p><ul><li>则改写成<code>{&#39;a&#39;:1 , &#39;b&#39;=.. , ...}</code></li></ul></li><li><p><code>multipart/form-data</code>，我们使用表单<strong>上传文件</strong>时，必须让 form 的 <code>enctyped</code>等于这个值，请求示例</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1 </span><br><span class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA </span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA </span><br><span class="line">Content-Disposition: form-data; name=&quot;text&quot; </span><br><span class="line"></span><br><span class="line">title </span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA </span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot; </span><br><span class="line">Content-Type: image/png </span><br><span class="line"></span><br><span class="line">PNG ... content of chrome.png ... </span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure></li><li><p><strong>说明</strong>: 首先生成了一个<code>boundary</code> 用于分割不同的字段，为了避免与正文内容重复，boundary 很长很复杂。然后 Content-Type 里指明了数据是以<code>mutipart/form-data</code> 来编码，本次请求的 boundary 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 –boundary 开始，紧接着内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 –boundary– 标示结束。关于 <code>mutipart/form-data</code>的详细定义，请前往 rfc1867 查看。 </p></li></ul></li><li><p><code>text/xml</code>，XML-RPC 是一种使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范。典型的 XML-RPC 请求是这样的： </p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1 </span><br><span class="line">Content-Type: text/xml </span><br><span class="line"></span><br><span class="line">&lt;!--?xml version=&quot;1.0&quot;?--&gt; </span><br><span class="line">&lt;methodcall&gt; </span><br><span class="line">    &lt;methodname&gt;examples.getStateName&lt;/methodname&gt; </span><br><span class="line">    &lt;params&gt; </span><br><span class="line">        &lt;param&gt; </span><br><span class="line">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt; </span><br><span class="line">         </span><br><span class="line">    &lt;/params&gt; </span><br><span class="line">&lt;/methodcall&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>但是虽然能接受到返回的结果，但是响应数据中发现<code>form</code>一直是空的，那就是参数没传过去，于是想到是不是格式的错误</p><h3 id="第四次写法"><a href="#第四次写法" class="headerlink" title="第四次写法"></a>第四次写法</h3><p>后来上网找寻了一下结果发现我遗漏了模板中的<code>\r\n\r\n</code>这行，即<em>请求头</em> 和 <em>请求体</em> 之间<strong>至少有一行换行！！！</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /get HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Connection:close</span><br><span class="line"></span><br><span class="line">a=23&amp;b=34</span><br></pre></td></tr></table></figure><p>中间的空行不能省略 ， 这样httpbin.org那边才不返回 <code>ERROR</code>或是<code>BAD_REQUEST</code></p><p>但是数据还是发送不出</p><p>于是咨询了qk大佬以后，才发现原来请求头也必须要加上<code>Content-Length:8</code>…..</p><h3 id="最终完成版"><a href="#最终完成版" class="headerlink" title="最终完成版"></a>最终完成版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /get HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Connection:close</span><br><span class="line">Content-Length:8</span><br><span class="line"></span><br><span class="line">a=23&amp;b=34</span><br></pre></td></tr></table></figure><p>哎….本来很简单的事，竟然弄了一个多小时才搞定，真只能怪自己学艺不精了。幸好的是，还是调出来了。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录:"></a>附录:</h2><h3 id="HTTP请求报文解剖"><a href="#HTTP请求报文解剖" class="headerlink" title="HTTP请求报文解剖 :"></a><strong>HTTP请求报文解剖</strong> :</h3><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>HTTP请求报文由3部分组成（<strong>请求行+请求头+请求体</strong>）： </p><p><img src="/2019/03/01/构造一个能发数据的POST请求头/4.jpg" alt="4"></p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p><img src="/2019/03/01/构造一个能发数据的POST请求头/5.jpg" alt="5"></p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p><img src="/2019/03/01/构造一个能发数据的POST请求头/6.jpg" alt="6"></p><h3 id="HttpWatch"><a href="#HttpWatch" class="headerlink" title="HttpWatch"></a>HttpWatch</h3><p><a href="http://www.httpwatch.com/download/" target="_blank" rel="noopener">HttpWatch</a>是强大的网页数据分析工具，安装后将集成到Internet Explorer工具栏中。它不用代理服务器或一些复杂的网络监控工具，就能抓取请求及响应的完整信息，包括Cookies、消息头、查询参数、响应报文等，是Web应用开发人员的必备工具。</p><p>摘自<a href="https://blog.csdn.net/u010256388/article/details/68491509/" target="_blank" rel="noopener">HTTP请求行、请求头、请求体详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前学&lt;strong&gt;请求&lt;/strong&gt;、&lt;strong&gt;响应&lt;/strong&gt;的时候只是过了一边，大致知道有这些东西。但这次真正要用的时候却又忘了到底该如何写，错误的请求头、请求体的格式导致&lt;code&gt;esp8266&lt;/code&gt;一直发送不了数据到服务器上，又重新看了
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://nymrli.top/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="计算机网络知识" scheme="https://nymrli.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>为了不跑操而Excel——Orz</title>
    <link href="https://nymrli.top/2019/03/01/%E4%B8%BA%E4%BA%86%E4%B8%8D%E8%B7%91%E6%93%8D%E8%80%8CExcel%E2%80%94%E2%80%94Orz/"/>
    <id>https://nymrli.top/2019/03/01/为了不跑操而Excel——Orz/</id>
    <published>2019-03-01T07:45:07.000Z</published>
    <updated>2019-03-03T09:37:42.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3月1日"><a href="#3月1日" class="headerlink" title="3月1日"></a>3月1日</h2><h3 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h3><ul><li><p>15、16、17、18级分类——筛选、开头是（?15通配符）、制不同表</p></li><li><p>获得50m、800-1000m、身高、肺活量……各年级数据和总的平均值</p><ul><li>有的单元框内容虽然看上去像数字(数值靠右)，但其实是文本(文本靠左)，需要做处理后才能进行<strong>公示计算</strong>——分列</li><li>复杂的重复公示最好还是指明地址</li><li>翻到下一个非空单元格——<code>Ctrl + ↓ 或 ↑</code></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3月1日&quot;&gt;&lt;a href=&quot;#3月1日&quot; class=&quot;headerlink&quot; title=&quot;3月1日&quot;&gt;&lt;/a&gt;3月1日&lt;/h2&gt;&lt;h3 id=&quot;Excel&quot;&gt;&lt;a href=&quot;#Excel&quot; class=&quot;headerlink&quot; title=&quot;Excel&quot;&gt;
      
    
    </summary>
    
    
      <category term="NJUPT" scheme="https://nymrli.top/tags/NJUPT/"/>
    
  </entry>
  
  <entry>
    <title>Flask 本地局域网连接</title>
    <link href="https://nymrli.top/2019/02/28/Flask-%E6%9C%AC%E5%9C%B0%E5%B1%80%E5%9F%9F%E7%BD%91%E8%BF%9E%E6%8E%A5/"/>
    <id>https://nymrli.top/2019/02/28/Flask-本地局域网连接/</id>
    <published>2019-02-28T10:43:55.000Z</published>
    <updated>2019-02-28T10:56:37.424Z</updated>
    
    <content type="html"><![CDATA[<p>之前都是在活动室的电脑上配好web环境，但其实发现很多比赛只要截图就够了。所以这次看了下能不能用局域网访问。一查果然flask可以通过局域网进行访问</p><h2 id="使用pycharm的朋友要这样设定"><a href="#使用pycharm的朋友要这样设定" class="headerlink" title="- 使用pycharm的朋友要这样设定"></a>- 使用pycharm的朋友要这样设定</h2><h4 id="1-run-gt-Edit-Configurations"><a href="#1-run-gt-Edit-Configurations" class="headerlink" title="1.run-&gt;Edit Configurations"></a>1.run-&gt;Edit Configurations</h4><p><img src="/2019/02/28/Flask-本地局域网连接/1.jpg" alt="1"></p><h4 id="2-Additional-options"><a href="#2-Additional-options" class="headerlink" title="2.Additional options"></a>2.Additional options</h4><p><img src="/2019/02/28/Flask-本地局域网连接/3.jpg" alt="3"></p><h4 id="3-运行run（Ctrl-shift-F10）即可"><a href="#3-运行run（Ctrl-shift-F10）即可" class="headerlink" title="3.运行run（Ctrl+shift+F10）即可"></a>3.运行run（Ctrl+shift+F10）即可</h4><p><strong>注</strong>:如果没有这样设定   pycharm启动 是不会有作用的（就像这样）地址依旧会是127.0.0.1</p><h2 id="查看自己的IP地址"><a href="#查看自己的IP地址" class="headerlink" title="- 查看自己的IP地址"></a>- 查看自己的IP地址</h2><h3 id="1-命令行方式"><a href="#1-命令行方式" class="headerlink" title="1.命令行方式"></a>1.命令行方式</h3><p><code>cmd-&gt;ipconfig-&gt;IPv4</code></p><h3 id="2-查网络与共享中心"><a href="#2-查网络与共享中心" class="headerlink" title="2.查网络与共享中心"></a>2.查网络与共享中心</h3><h2 id="打开端口"><a href="#打开端口" class="headerlink" title="打开端口"></a>打开端口</h2><p>如果还不行的话就可能是  <strong>端口没有打开</strong></p><p>解决方案:</p><p>开始中搜索 <strong>windows防火墙</strong> ，<img src="/2019/02/28/Flask-本地局域网连接/4.jpg" alt="4"></p><p><img src="/2019/02/28/Flask-本地局域网连接/6.jpg" alt="6"></p><p><img src="/2019/02/28/Flask-本地局域网连接/7.png" alt="7"></p><p><img src="/2019/02/28/Flask-本地局域网连接/8.png" alt="8"></p><p><img src="/2019/02/28/Flask-本地局域网连接/9.png" alt="9"></p><p><img src="/2019/02/28/Flask-本地局域网连接/10.png" alt="10"></p><p><img src="/2019/02/28/Flask-本地局域网连接/11.png" alt="11"></p><p>这样就大功告成了！</p><p>然后通过 <code>局域网IP：PORT</code>就可以访问到网页啦</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前都是在活动室的电脑上配好web环境，但其实发现很多比赛只要截图就够了。所以这次看了下能不能用局域网访问。一查果然flask可以通过局域网进行访问&lt;/p&gt;
&lt;h2 id=&quot;使用pycharm的朋友要这样设定&quot;&gt;&lt;a href=&quot;#使用pycharm的朋友要这样设定&quot; cl
      
    
    </summary>
    
    
      <category term="flask" scheme="https://nymrli.top/tags/flask/"/>
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>eclipse使用</title>
    <link href="https://nymrli.top/2019/02/26/eclipse%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2019/02/26/eclipse使用/</id>
    <published>2019-02-26T05:18:25.000Z</published>
    <updated>2019-02-26T06:11:23.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h1><h2 id="选择工作路径"><a href="#选择工作路径" class="headerlink" title="选择工作路径"></a>选择工作路径</h2><p><img src="/2019/02/26/eclipse使用/1.jpg" alt="1"></p><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><h3 id="一-选择File-gt-New-gt-Project"><a href="#一-选择File-gt-New-gt-Project" class="headerlink" title="一.选择File-&gt;New-&gt;Project"></a>一.选择File-&gt;New-&gt;Project</h3><p><img src="/2019/02/26/eclipse使用/3.jpg" alt="3"></p><h3 id="二-Java-gt-Java-Project"><a href="#二-Java-gt-Java-Project" class="headerlink" title="二.Java-&gt;Java Project"></a>二.Java-&gt;Java Project</h3><p><img src="/2019/02/26/eclipse使用/4.jpg" alt="4"></p><h3 id="三-工程配置"><a href="#三-工程配置" class="headerlink" title="三.工程配置"></a>三.工程配置</h3><p><img src="/2019/02/26/eclipse使用/5.jpg" alt="5"></p><p>这步可以选择创建或者不创建，目前都没有什么影响</p><p><img src="/2019/02/26/eclipse使用/6.jpg" alt="6"></p><h3 id="四-是否打开导航视图窗口"><a href="#四-是否打开导航视图窗口" class="headerlink" title="四.是否打开导航视图窗口"></a>四.是否打开导航视图窗口</h3><blockquote><p>此类项目与Java透视图相关联。</p><p>此透视图旨在支持Java开发。它提供了包资源管理器、类型层次结构和特定于java的导航操作。</p><p>您现在想打开这个透视图吗?</p></blockquote><p><img src="/2019/02/26/eclipse使用/7.jpg" alt="7"></p><p>如果按了<code>create</code>的话，就会产生该文件</p><p><img src="/2019/02/26/eclipse使用/8.jpg" alt="8"></p><p><strong>▲注意</strong> 一个工作空间中只能有一个工程有<code>main</code></p><h3 id="五-新建class"><a href="#五-新建class" class="headerlink" title="五.新建class"></a>五.新建class</h3><p><img src="/2019/02/26/eclipse使用/9.jpg" alt="9"></p><p><img src="/2019/02/26/eclipse使用/11.jpg" alt="11"></p><h2 id="编写第一个程序"><a href="#编写第一个程序" class="headerlink" title="编写第一个程序"></a>编写第一个程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package java;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果编写完成后，选择工具栏的运行。如果运行按钮<strong>无法按下</strong>、或按下无效，请检查代码。</p><ul><li>类名是否和文件名一致（在IDE下应该不会产生这样的问题）</li><li>main是否写对</li><li><code>String []args</code>要写上,不能缺省</li></ul><p>注意 . 如果发生错误 ， 会产生如下弹窗 ， 此时应该再次检查语法</p><p><img src="/2019/02/26/eclipse使用/12.jpg" alt="12"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="自动添加注释"><a href="#自动添加注释" class="headerlink" title="自动添加注释"></a>自动添加注释</h3><p>一、新建class时自动添加注释<br>windows–&gt;preference进入选项卡。<br>然后选择Java–&gt;Code Style–&gt;Code Templates，如图：</p><p><img src="/2019/02/26/eclipse使用/注释.png" alt="1"></p><p>按下Edit，然后添加一行<code>@(随意) ${date}</code>即可，${date}为固定的宏，大小写写错无效</p><p><img src="/2019/02/26/eclipse使用/hexo\source\_posts\eclipse使用\13.jpg" alt="13"></p><p>保存配置后，选中类，使用快捷键<code>alt＋shift+j</code>可以快速添加注释。</p><h4 id="新建类自动添加注释"><a href="#新建类自动添加注释" class="headerlink" title="新建类自动添加注释"></a>新建类自动添加注释</h4><p>选择Code Templates选项卡内的Code—&gt;New Java files，编辑它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$&#123;filecomment&#125;</span><br><span class="line">$&#123;package_declaration&#125;</span><br><span class="line">/**</span><br><span class="line">* @author 作者</span><br><span class="line">* @version 创建时间：$&#123;date&#125; $&#123;time&#125;</span><br><span class="line">* 类说明</span><br><span class="line">*/</span><br><span class="line">$&#123;typecomment&#125;</span><br><span class="line">$&#123;type_declaration&#125;</span><br></pre></td></tr></table></figure><p>注释内容摘自<a href="https://blog.csdn.net/weixin_36893273/article/details/55194209" target="_blank" rel="noopener">eclipse自动添加作者、日期等注释</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Eclipse&quot;&gt;&lt;a href=&quot;#Eclipse&quot; class=&quot;headerlink&quot; title=&quot;Eclipse&quot;&gt;&lt;/a&gt;Eclipse&lt;/h1&gt;&lt;h2 id=&quot;选择工作路径&quot;&gt;&lt;a href=&quot;#选择工作路径&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="IDE" scheme="https://nymrli.top/tags/IDE/"/>
    
      <category term="java" scheme="https://nymrli.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学java程序设计作业在线编程第二次作业</title>
    <link href="https://nymrli.top/2019/02/26/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A/"/>
    <id>https://nymrli.top/2019/02/26/南京邮电大学java程序设计作业在线编程第二次作业/</id>
    <published>2019-02-26T04:52:41.000Z</published>
    <updated>2019-02-26T05:43:26.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总分：100"><a href="#总分：100" class="headerlink" title="总分：100"></a>总分：100</h2><h3 id="选择题得分：60"><a href="#选择题得分：60" class="headerlink" title="选择题得分：60"></a>选择题得分：60</h3><p> \1. 表达式<code>9==8&amp;&amp;3&lt;7</code>的运算结果是（ ）</p><p>A.1</p><p>B.0</p><p>C.true</p><p>D.false</p><p>正确答案是: D</p><p> \2. 表达式<code>(3&gt;2)?8:9</code>的运算结果是（ ）</p><p>A.3</p><p>B.2</p><p>C.8</p><p>D.9</p><p>正确答案是: C</p><p> \3. 表达式<code>9-7&lt;0||11&gt;8</code>的运算结果（ ）</p><p>A.true</p><p>B.false</p><p>C.1</p><p>D.0</p><p>正确答案是: A</p><p> \4. 表达式<code>48%9+5*5-4</code>的运算结果（ ）</p><p>A.24</p><p>B.26</p><p>C.-30</p><p>D.46</p><p>正确答案是: A</p><p> \5. 表达式<code>2&gt;=5</code>的运算结果是（ ）</p><p>A.2</p><p>B.5</p><p>C.true</p><p>D.false</p><p>正确答案是: D</p><p> \6. 表达式<code>15+4*5-12</code>的运算结果是（ ）</p><p>A.15</p><p>B.23</p><p>C.12</p><p>D.-133</p><p>正确答案是: B</p><p> \7. 以下（ ）不属于复合类型的数据类型</p><p>A.类</p><p>B.字符型</p><p>C.数组</p><p>D.接口</p><p>正确答案是: B</p><p> \8. 在Java中，不属于整数类型的是（ ）</p><p>A.double</p><p>B.long</p><p>C.int</p><p>D.byte</p><p>正确答案是: A</p><p> \9. 下列变量定义中，（ ）是错误的</p><p>A.float x;y;</p><p>B.float x,y=3.14f;</p><p>C.public int i=100,j=2,k;</p><p>D.int i=100;int j=200;</p><p>正确答案是: A</p><p> \10. 以下选项中，（ ）能正确表示Java语言中的一个整型常量。</p><p>A.-8.0</p><p>B.1,000,000</p><p>C.-30</p><p>D.”456”</p><p>正确答案是: C</p><p> \11. 下面程序段执行后的结论是（ ）<code>int m=2,n=2; m+=m-=m*m; n-=n*n; n=n+n;</code></p><p>A.m=n</p><p>B.m&gt;n</p><p>C.m&lt;n</p><p>D.m与n类型不同，不能比较</p><p>正确答案是: B</p><p> \12. 执行下列程序段： <code>int no; int a=19,b=8; no=(a%b&gt;5)?a+b:a-b; System.out.println(no);</code>输出结果是：</p><p>A.2</p><p>B.9</p><p>C.11</p><p>D.27</p><p>正确答案是: C</p><p> \13. 下列语句执行后的输出结果是：( ) <code>int e=Integer.parseInt(&quot;&quot;+3+3); System.out.println(e-2.5);</code></p><p>A.30.5</p><p>B.3.5</p><p>C.332.5</p><p>D.8.5</p><p>正确答案是: A</p><p> \14. 定义a为int类型的变量并且已被赋初值，则合法的赋值语句是（ ）</p><p>A.a+1==4;</p><p>B.a+=a*8;</p><p>C.a=6.6f;</p><p>D.int a=18;</p><p>正确答案是: B</p><p> \15. 设m、n、x、y为已赋值的int变量，下列（ ）的运算结果属于非逻辑值。</p><p>A.m!=n&amp;x%y&lt;m</p><p>B.m++==m+n+x+y</p><p>C.++m*b–+y</p><p>D.m+n&gt;=x+y</p><p>正确答案是: C</p><p> \16. 以下选项中的变量都已经正确定义并且赋初值，不合法的表达式是（ ）</p><p>A.m &gt;= 6 == n &gt; 1</p><p>B.’m’ + 6</p><p>C.’m’ = 8</p><p>D.’M’ % 8</p><p>正确答案是: C</p><p> \17. 以下标识符中，（ ）是不合法的</p><p>A.inter_net</p><p>B.i_nong</p><p>C.Helo</p><p>D.*member</p><p>正确答案是: D</p><p> \18. 以下字符常量中不合法的是（ ）</p><p>A.’#’</p><p>B.’&amp;’</p><p>C.”P”</p><p>D.’囧’</p><p>正确答案是: C</p><p> \19. 下面（ ）是Java数据类型中int类型的取值范围。</p><p>A.-2<sup>7</sup>~2<sup>7</sup>-1</p><p>B.0~2<sup>16</sup>-1</p><p>C.-2<sup>15</sup>-2<sup>15</sup>-1</p><p>D.-2<sup>31</sup>~2<sup>31</sup>-1</p><p>正确答案是: D</p><p> \20. 在Java语言中，下面（ ）类型可以表示整数基本数据类型。</p><p>A.single</p><p>B.byte</p><p>C.double</p><p>D.char</p><p>正确答案是: B</p><h3 id="编程题得分：40"><a href="#编程题得分：40" class="headerlink" title="编程题得分：40"></a>编程题得分：40</h3><h4 id="2-1-是不是太胖了-得分：10-10"><a href="#2-1-是不是太胖了-得分：10-10" class="headerlink" title="2-1 是不是太胖了  得分：10 / 10"></a>2-1 是不是太胖了  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> height = scanner.nextInt();</span><br><span class="line">    <span class="keyword">double</span> result = (height-<span class="number">100</span>)*<span class="number">0.9</span>*<span class="number">2</span>;</span><br><span class="line">        System.out.printf(<span class="string">"%.1f\n"</span> ,  result);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-Say-hello-to-integers-得分：10-10"><a href="#2-2-Say-hello-to-integers-得分：10-10" class="headerlink" title="2-2 Say hello to integers  得分：10 / 10"></a>2-2 Say hello to integers  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> one = scanner.nextInt();</span><br><span class="line">    <span class="keyword">int</span> two = scanner.nextInt();</span><br><span class="line">        System.out.printf(<span class="string">"Hello, %d and %d!\n"</span> ,one,two);</span><br><span class="line">        <span class="comment">//System.out.println( "Hello, "+one+" and "+two+"!");</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h4 id="2-3-求整数的平均值-得分：10-10"><a href="#2-3-求整数的平均值-得分：10-10" class="headerlink" title="2-3 求整数的平均值  得分：10 / 10"></a>2-3 求整数的平均值  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> one = scanner.nextInt();</span><br><span class="line">    <span class="keyword">int</span> two = scanner.nextInt();</span><br><span class="line">    <span class="keyword">int</span> thr = scanner.nextInt();</span><br><span class="line">    <span class="keyword">int</span> four = scanner.nextInt();</span><br><span class="line">    <span class="keyword">int</span> sum = one+two+thr+four;</span><br><span class="line">        System.out.printf(<span class="string">"Sum=%d;Average=%.1f\n"</span> ,sum,sum/<span class="number">4.0</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-整数四则运算-得分：10-10"><a href="#2-4-整数四则运算-得分：10-10" class="headerlink" title="2-4 整数四则运算  得分：10 / 10"></a>2-4 整数四则运算  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> a = scanner.nextInt();</span><br><span class="line">    <span class="keyword">int</span> b = scanner.nextInt();</span><br><span class="line">    </span><br><span class="line">        System.out.printf(<span class="string">"%d+%d=%d\n"</span> , a,b,a + b);</span><br><span class="line">        System.out.printf(<span class="string">"%d-%d=%d\n"</span> , a,b,a - b);</span><br><span class="line">        System.out.printf(<span class="string">"%d*%d=%d\n"</span> , a,b,a * b);</span><br><span class="line">        System.out.printf(<span class="string">"%d/%d=%d\n"</span> , a,b,a / b);</span><br><span class="line">        <span class="comment">// System.out.println(a+"+"+b+"="+(a+b));</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-华氏温度转换摄氏温度-得分：10-10"><a href="#2-3-华氏温度转换摄氏温度-得分：10-10" class="headerlink" title="2-3 华氏温度转换摄氏温度  得分：10 / 10"></a>2-3 华氏温度转换摄氏温度  得分：10 / 10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> Ftem = scanner.nextInt();</span><br><span class="line">    <span class="keyword">int</span> Ctem = <span class="number">5</span>*(Ftem-<span class="number">32</span>)/<span class="number">9</span>;</span><br><span class="line">        System.out.printf(<span class="string">"Celsius="</span>+Ctem+<span class="string">""</span> );</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总分：100&quot;&gt;&lt;a href=&quot;#总分：100&quot; class=&quot;headerlink&quot; title=&quot;总分：100&quot;&gt;&lt;/a&gt;总分：100&lt;/h2&gt;&lt;h3 id=&quot;选择题得分：60&quot;&gt;&lt;a href=&quot;#选择题得分：60&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="java" scheme="https://nymrli.top/tags/java/"/>
    
      <category term="NJUPT" scheme="https://nymrli.top/tags/NJUPT/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学java程序设计作业在线编程第一次作业</title>
    <link href="https://nymrli.top/2019/02/26/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A/"/>
    <id>https://nymrli.top/2019/02/26/南京邮电大学java程序设计作业在线编程第一次作业/</id>
    <published>2019-02-26T04:50:14.000Z</published>
    <updated>2019-02-26T04:52:29.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总分：100"><a href="#总分：100" class="headerlink" title="总分：100"></a>总分：100</h2><h3 id="选择题得分：40"><a href="#选择题得分：40" class="headerlink" title="选择题得分：40"></a>选择题得分：40</h3><p> \1. Java语言中，基本数据类型一共有（ ）种。</p><p>A.16</p><p>B.2</p><p>C.4</p><p>D.8</p><p>正确答案是: D</p><p> \2. Java虚拟机的英文缩写是（ ）</p><p>A.JRE</p><p>B.ECLIPSE</p><p>C.JVM</p><p>D.JDK</p><p>正确答案是: C</p><p> \3. Java程序中，最常见的对主方法的定义是（ ）。</p><p>A.private static int main(String args[ ]){ }</p><p>B.public static void main(String args[ ]){ }</p><p>C.public static int main(char args[ ]){ }</p><p>D.private static void main(char args[ ]){ }</p><p>正确答案是: B</p><p> \4. Java源程序的文件名必须和程序中（ ）的名字相同。</p><p>A.公共类</p><p>B.主函数</p><p>C.主程序</p><p>D.主方法</p><p>正确答案是: A</p><p> \5. Java语言字节码文件的后缀名为（ ）。</p><p>A..byte</p><p>B..bit</p><p>C..class</p><p>D..java</p><p>正确答案是: C</p><p> \6. Java语言源程序的文件后缀是（ ）。</p><p>A..j</p><p>B..ja</p><p>C..jav</p><p>D..java</p><p>正确答案是: D</p><p> \7. Java语言中实现将源代码转换成字节码文件的过程，被称为（ ）。</p><p>A.翻译</p><p>B.编译</p><p>C.解释</p><p>D.汇编</p><p>正确答案是: B</p><p> \8. 下列哪一种语言不支持面向对象的编程思想？</p><p>A.C</p><p>B.C++</p><p>C.Java</p><p>D.Python</p><p>正确答案是: A</p><h3 id="编程题得分：60"><a href="#编程题得分：60" class="headerlink" title="编程题得分：60"></a>编程题得分：60</h3><p> 1-3 输出<code>What is a computer?</code>得分：10 / 10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"What is a computer?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 1-2 输出<code>I Love Programming!</code>  得分：10 / 10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I Love Programming!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 1-1 输出<code>Hello World!</code> 得分：10 / 10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总分：100&quot;&gt;&lt;a href=&quot;#总分：100&quot; class=&quot;headerlink&quot; title=&quot;总分：100&quot;&gt;&lt;/a&gt;总分：100&lt;/h2&gt;&lt;h3 id=&quot;选择题得分：40&quot;&gt;&lt;a href=&quot;#选择题得分：40&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="java" scheme="https://nymrli.top/tags/java/"/>
    
      <category term="NJUPT" scheme="https://nymrli.top/tags/NJUPT/"/>
    
  </entry>
  
  <entry>
    <title>Python任务调度模块APScheduler</title>
    <link href="https://nymrli.top/2019/02/24/Python%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9D%97APScheduler/"/>
    <id>https://nymrli.top/2019/02/24/Python任务调度模块APScheduler/</id>
    <published>2019-02-24T11:30:06.000Z</published>
    <updated>2019-03-03T08:55:01.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python任务调度模块APScheduler"><a href="#Python任务调度模块APScheduler" class="headerlink" title="Python任务调度模块APScheduler"></a>Python任务调度模块APScheduler</h1><blockquote><p><code>APScheduler</code>是一个python的第三方库，用来提供python的后台程序。包含四个组件，分别是：</p></blockquote><ul><li>triggers： 任务触发器组件，提供任务触发方式<ul><li><em>triggers</em>（触发器）中包含调度逻辑，每个作业都由自己的触发器来决定下次运行时间。除了他们自己初始配置意外，触发器完全是无状态的。</li></ul></li><li>job stores： 任务商店组件，提供任务保存方式<ul><li><em>job stores</em>（作业存储器）存储被调度的作业，默认的作业存储器只是简单地把作业保存在内存中，其他的作业存储器则是将作业保存在数据库中。当作业被保存到一个持久化的作业存储器中的时候，该作业的数据会被序列化，并在加载时被反序列化。作业存储器不能共享调度器。</li></ul></li><li>executors： 任务调度组件，提供任务调度方式<ul><li><em>executors</em>（执行器）处理作业的运行，他们通常通过在作业中提交指定的可调用对象到一个线程或者进城池来进行。当作业完成时，执行器将会通知调度器。</li></ul></li><li>schedulers： 任务调度组件，提供任务工作方式<ul><li>schedulers（调度器）配置作业存储器和执行器可以在调度器中完成，例如添加、修改和移除作业。根据不同的应用场景可以选用不同的调度器，可选的有BlockingScheduler,BackgroundScheduler,AsyncIOScheduler,GeventScheduler,TornadoScheduler,TwistedScheduler,QtScheduler 7种。<ul><li>其中<code>BlockingScheduler</code>与<code>BackgroundScheduler</code>是其中最常用的两种调度器。那他们之间有什么区别呢？</li><li><code>BlockingScheduler</code>: 调用start函数后会阻塞当前线程。当调度器是你应用中唯一要运行的东西时</li><li><code>BackgroundScheduler</code>: 调用start后主线程不会阻塞。当你不运行任何其他框架时使用，并希望调度器在你应用的后台执行。</li></ul></li></ul></li></ul><h2 id="使用的一个简单实例"><a href="#使用的一个简单实例" class="headerlink" title="使用的一个简单实例"></a>使用的一个简单实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler  <span class="comment"># 阻塞</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个调度器</span></span><br><span class="line">scheduler = BlockingScheduler()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"%s: 执行任务"</span>  % time.asctime()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加任务并设置触发方式为3s一次</span></span><br><span class="line">scheduler.add_job(job1, <span class="string">'interval'</span>, seconds=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始运行调度器</span></span><br><span class="line">scheduler.start()</span><br></pre></td></tr></table></figure><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><ul><li><strong>date</strong> 一次性指定日期</li><li><strong>interval</strong> 在某个时间范围内间隔多长时间执行一次</li><li><strong>cron</strong> 和Linux crontab格式兼容，最为强大</li></ul><h3 id="date-最基本的一种调度，作业只会执行一次。它的参数如下："><a href="#date-最基本的一种调度，作业只会执行一次。它的参数如下：" class="headerlink" title="date 最基本的一种调度，作业只会执行一次。它的参数如下："></a><strong><em>date</em></strong> 最基本的一种调度，作业只会执行一次。它的参数如下：</h3><ol><li><em>run_date</em> (datetime|str) – 作业的运行日期或时间</li><li><em>timezone</em> (datetime.tzinfo|str) – 指定时区</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2016-12-12运行一次job_function</span></span><br><span class="line">sched.add_job(job_function, <span class="string">'date'</span>, run_date=date(<span class="number">2016</span>, <span class="number">12</span>, <span class="number">12</span>), args=[<span class="string">'text'</span>])</span><br><span class="line"><span class="comment"># 2016-12-12 12:00:00运行一次job_function</span></span><br><span class="line">sched.add_job(job_function, <span class="string">'date'</span>, run_date=datetime(<span class="number">2016</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>), args=[<span class="string">'text'</span>])</span><br></pre></td></tr></table></figure><h3 id="interval-间隔调度，参数如下："><a href="#interval-间隔调度，参数如下：" class="headerlink" title="interval 间隔调度，参数如下："></a><strong>interval</strong> 间隔调度，参数如下：</h3><p>weeks (int) – 间隔几周<br>days (int) – 间隔几天<br>hours (int) – 间隔几小时<br>minutes (int) – 间隔几分钟<br>seconds (int) – 间隔多少秒<br>start_date (datetime|str) – 开始日期<br>end_date (datetime|str) – 结束日期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每两个小时调一下job_function</span></span><br><span class="line">sched.add_job(job_function, <span class="string">'interval'</span>, hours=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="cron参数如下："><a href="#cron参数如下：" class="headerlink" title="cron参数如下："></a>cron参数如下：</h3><p>year (int|str) – 年，4位数字<br>month (int|str) – 月 (范围1-12)<br>day (int|str) – 日 (范围1-31)<br>week (int|str) – 周 (范围1-53)<br>day_of_week (int|str) – 周内第几天或者星期几 (范围0-6 或者 mon,tue,wed,thu,fri,sat,sun)<br>hour (int|str) – 时 (范围0-23)<br>minute (int|str) – 分 (范围0-59)<br>second (int|str) – 秒 (范围0-59)<br>start_date (datetime|str) – 最早开始日期(包含)<br>end_date (datetime|str) – 最晚结束时间(包含)<br>timezone (datetime.tzinfo|str) – 指定时区</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># job_function将会在6,7,8,11,12月的第3个周五的1,2,3点运行</span></span><br><span class="line">sched.add_job(job_function, <span class="string">'cron'</span>, month=<span class="string">'6-8,11-12'</span>, day=<span class="string">'3rd fri'</span>, hour=<span class="string">'0-3'</span>)</span><br><span class="line"><span class="comment"># 截止到2016-12-30 00:00:00，每周一到周五早上五点半运行job_function</span></span><br><span class="line">sched.add_job(job_function, <span class="string">'cron'</span>, day_of_week=<span class="string">'mon-fri'</span>, hour=<span class="number">5</span>, minute=<span class="number">30</span>, end_date=<span class="string">'2016-12-31'</span>)</span><br></pre></td></tr></table></figure><h2 id="添加任务"><a href="#添加任务" class="headerlink" title="添加任务"></a>添加任务</h2><blockquote><p>有两种方法，一种是使用add_job()函数，还有一种方式是通过scheduled_job()装饰器。</p></blockquote><h4 id="add-job-函数方式"><a href="#add-job-函数方式" class="headerlink" title="add_job()函数方式"></a>add_job()函数方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_job1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'my_job1 is running, Now is %s'</span> % datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_job2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'my_job2 is running, Now is %s'</span> % datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"> </span><br><span class="line">sched = BlockingScheduler()</span><br><span class="line"><span class="comment"># 每隔5秒运行一次my_job1</span></span><br><span class="line">sched.add_job(my_job1, <span class="string">'interval'</span>, seconds=<span class="number">5</span>,id=<span class="string">'my_job1'</span>)</span><br><span class="line"><span class="comment"># 每隔5秒运行一次my_job2</span></span><br><span class="line">sched.add_job(my_job2,<span class="string">'cron'</span>,second=<span class="string">'*/5'</span>,id=<span class="string">'my_job2'</span>)</span><br><span class="line">sched.start()</span><br></pre></td></tr></table></figure><h4 id="scheduled-job-装饰器方式"><a href="#scheduled-job-装饰器方式" class="headerlink" title="scheduled_job()装饰器方式"></a>scheduled_job()装饰器方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"> </span><br><span class="line">sched = BlockingScheduler()</span><br><span class="line"><span class="comment">#每隔5秒运行一次my_job1</span></span><br><span class="line"><span class="meta">@sched.scheduled_job('interval',seconds=5,id='my_job1')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_job1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'my_job1 is running, Now is %s'</span> % datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#每隔5秒运行一次my_job2</span></span><br><span class="line"><span class="meta">@sched.scheduled_job('cron',second='*/5',id='my_job2')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_job2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'my_job2 is running, Now is %s'</span> % datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">sched.start()</span><br></pre></td></tr></table></figure><h4 id="使用SQLAlchemy作业存储器存放作业"><a href="#使用SQLAlchemy作业存储器存放作业" class="headerlink" title="使用SQLAlchemy作业存储器存放作业"></a>使用SQLAlchemy作业存储器存放作业</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"> </span><br><span class="line">sched = BlockingScheduler()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_job</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'my_job is running, Now is %s'</span> % datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"><span class="comment">#使用sqlalchemy作业存储器</span></span><br><span class="line">url=<span class="string">'mysql+mysqldb://root:123456@localhost:3306/scrapy?charset=utf8'</span></span><br><span class="line">sched.add_jobstore(<span class="string">'sqlalchemy'</span>,url=url)</span><br><span class="line"><span class="comment">#添加作业</span></span><br><span class="line">sched.add_job(my_job,<span class="string">'interval'</span>,id=<span class="string">'myjob'</span>,seconds=<span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line">log = logging.getLogger(<span class="string">'apscheduler.executors.default'</span>)</span><br><span class="line">log.setLevel(logging.INFO)  <span class="comment"># DEBUG</span></span><br><span class="line"><span class="comment">#设定日志格式</span></span><br><span class="line">fmt = logging.Formatter(<span class="string">'%(levelname)s:%(name)s:%(message)s'</span>)</span><br><span class="line">h = logging.StreamHandler()</span><br><span class="line">h.setFormatter(fmt)</span><br><span class="line">log.addHandler(h)</span><br><span class="line"> </span><br><span class="line">sched.start()</span><br></pre></td></tr></table></figure><p>部分摘自:<a href="https://blog.csdn.net/weiwangchao_/article/details/79138013" target="_blank" rel="noopener">APScheduler浅析</a></p><hr><h2 id="Flask-APScheduler"><a href="#Flask-APScheduler" class="headerlink" title="Flask-APScheduler"></a>Flask-APScheduler</h2><p>大致用法跟<code>APScheduler</code>一致，只不过需要</p><h3 id="1-在配置中设置SCHEDULER-API-ENABLED-True"><a href="#1-在配置中设置SCHEDULER-API-ENABLED-True" class="headerlink" title="1.在配置中设置SCHEDULER_API_ENABLED = True"></a>1.在配置中设置<code>SCHEDULER_API_ENABLED = True</code></h3><h3 id="2-app配置"><a href="#2-app配置" class="headerlink" title="2.app配置"></a>2.app配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_apscheduler <span class="keyword">import</span> APScheduler;</span><br><span class="line"></span><br><span class="line">scheduler = APScheduler();</span><br><span class="line">scheduler.init_app(app)</span><br><span class="line">scheduler.start()</span><br></pre></td></tr></table></figure><h3 id="3-添加任务"><a href="#3-添加任务" class="headerlink" title="3.添加任务"></a>3.添加任务</h3><p><strong>exts.py</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from flask_apscheduler import APScheduler</span><br><span class="line">sche = APScheduler()</span><br></pre></td></tr></table></figure><p><strong>aap.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db,mail,sche</span><br><span class="line"></span><br><span class="line">sche.init_app(app)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">refreshinfo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sche.add_job(func=refreshinfo, id=<span class="string">'whetherInfo'</span>, trigger=<span class="string">'interval'</span>, seconds=<span class="number">150</span>)</span><br><span class="line">sche.start()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python任务调度模块APScheduler&quot;&gt;&lt;a href=&quot;#Python任务调度模块APScheduler&quot; class=&quot;headerlink&quot; title=&quot;Python任务调度模块APScheduler&quot;&gt;&lt;/a&gt;Python任务调度模块APSch
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>搭建frp服务--阿里云服务器</title>
    <link href="https://nymrli.top/2019/02/24/%E6%90%AD%E5%BB%BAfrp%E6%9C%8D%E5%8A%A1-%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://nymrli.top/2019/02/24/搭建frp服务-阿里云服务器/</id>
    <published>2019-02-24T06:56:27.000Z</published>
    <updated>2019-03-02T10:50:25.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建frp服务–阿里云服务器"><a href="#搭建frp服务–阿里云服务器" class="headerlink" title="搭建frp服务–阿里云服务器"></a>搭建frp服务–阿里云服务器</h1><p>为了可以远程访问活动室的电脑，需要进行内网穿透。之前9块钱买了<strong>花生壳</strong>的服务，勉强用用还行，带宽很有限。听说了frp后,打算在阿里云上安个frp服务，充当中转服务器。</p><h2 id="什么是frp"><a href="#什么是frp" class="headerlink" title="什么是frp"></a>什么是frp</h2><blockquote><p><a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">frp</a> 是一个高性能的反向代理应用，可以帮助您轻松地进行内网穿透，对外网提供服务，支持 tcp, http, https 等协议类型，并且 web 服务支持根据域名进行路由转发。</p></blockquote><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h4 id="外网主机"><a href="#外网主机" class="headerlink" title="外网主机"></a>外网主机</h4><p>SSH连接上外网主机后，使用<code>wget</code>指令下载frp。</p><p><code>wget https://github.com/fatedier/frp/releases/download/v0.20.0/frp_0.20.0_linux_amd64.tar.gz</code></p><p>使用<code>tar</code>指令解压tar.gz文件</p><p><code>tar -zxvf frp_0.20.0_linux_amd64.tar.gz</code></p><p>使用<code>cd</code>指令进入解压出来的文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd frp_0.20.0_linux_amd64/</span><br></pre></td></tr></table></figure><p>外网主机作为服务端，可以删掉不必要的客户端文件，使用<code>rm</code>指令删除文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -f frpc</span><br><span class="line">rm -f frpc.ini</span><br></pre></td></tr></table></figure><p>接下来要修改服务器配置文件，即<code>frps.ini</code>文件。使用<code>vi</code>指令对目标文件进行编辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi frps.ini</span><br></pre></td></tr></table></figure><p>打开<code>frps.ini</code>后可以看到默认已经有很多详细的配置和示范样例，该文章仅以达到内网穿透为目的，所以这里选择<strong>删掉或注释掉里面的所有内容</strong>，然后根据群晖的情况，按照官方的中文文档添加以下配置。（这里的操作都使用<code>vi</code>命令，关于<code>vi</code>命令的使用方式这里不作详细介绍，可以自行搜索相关使用方法。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 8080</span><br></pre></td></tr></table></figure><p><code>[common]</code>部分是必须有的配置，其中<code>bind_port</code>是自己设定的frp服务端端口，<code>vhost_http_port</code>是自己设定的http访问端口。</p><p>保存上面的配置后，使用以下指令启动frp服务端。（如果需要在后台运行，请往下翻阅关于后台运行的部分。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure><p>服务端的工作就到此结束了。</p><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>客户端前面的操作和服务端是一模一样的，这里不一一解释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.20.0/frp_0.20.0_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.20.0_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.20.0_linux_amd64</span><br><span class="line">rm -f frps</span><br><span class="line">rm -f frps.ini</span><br><span class="line">vi frpc.ini</span><br></pre></td></tr></table></figure><p>客户端的配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line"></span><br><span class="line">[nas]</span><br><span class="line">type = http</span><br><span class="line">local_port = 5000</span><br><span class="line">custom_domains = no1.sunnyrx.com</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = no2.sunnyrx.com</span><br></pre></td></tr></table></figure><p>上面的配置和服务端是对应的。</p><p><code>[common]</code>中的<code>server_addr</code>填frp服务端的ip（也就是外网主机的IP），<code>server_port</code>填frp服务端的<code>bind_prot</code>。</p><p><code>[ssh]</code>中的<code>local_port</code>填群晖的ssh端口。</p><p><code>[nas]</code>中的<code>type</code>对应服务端配置。<code>local_port</code>填群晖的DSM端口。<code>custom_domains</code>为要映射的域名，记得域名的A记录要解析到外网主机的IP。</p><p><code>[web]</code>同上，<code>local_port</code>填群晖的web端口。这里创建了两个http反向代理是为了分别映射群晖两个重要的端口，<code>5000</code>和<code>80</code>，前者用于登录群晖管理，后者用于群晖的<code>Web Station</code>和<code>DS Photo</code>。</p><p>保存配置，输入以下指令运行frp客户端。（同样如果需要在后台运行，请往下翻阅关于后台运行的部分。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><p>此时在服务端会看到”start proxy sucess”字样，即连接成功。</p><p>现在可以用SSH通过<code>外网主机IP:6000</code>和群晖建立SSH连接。通过浏览器访问<code>no1.sunnyrx.com:8080</code>打开群晖nas的管理页面，访问<code>no2.sunnyrx.com:8080</code>打开群晖<code>Web Station</code>的网站，<code>DS Photo app</code>可以连接<code>no2.sunnyrx.com:8080</code>进入<code>DS Photo</code>管理。</p><h3 id="让frp在后台运行"><a href="#让frp在后台运行" class="headerlink" title="让frp在后台运行"></a>让frp在后台运行</h3><p>虽然现在frp运作起来了，内网穿透也实现了，但这还是不够的。此时如果断开与服务端或者客户端的SSH连接（比如关掉了Xshell）也就中止了frp的运行。</p><p>保持frp运行是关键是让服务端的frp和客户端的frp在后台运行，这里提两个方法供参考，一个是使用<code>screen</code>指令，另一个是使用<code>nohup</code>指令。由于群晖的系统默认是没有<code>screen</code>指令的，这里也不提供安装<code>screen</code>的方法，所以推荐群晖直接使用<code>nohup</code>。</p><blockquote><p>其实服务端也直接用’nohup’就好了。</p></blockquote><h4 id="使用screen让frp在后台运行"><a href="#使用screen让frp在后台运行" class="headerlink" title="使用screen让frp在后台运行"></a>使用screen让frp在后台运行</h4><p>下面的示范是运行服务端的frp，客户端就不示范了，前面提过群晖的系统没有<code>screen</code>指令。</p><p>首先使用<code>screen</code>指令创建一个会话。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -dmS frp</span><br></pre></td></tr></table></figure><p>然后进入这个会话。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r frp</span><br></pre></td></tr></table></figure><p>最后使用运行frp的指令，在后面加上” &amp;”。（如果之前断开了SSH连接，记得用<code>cd</code>指令进入frp的目录先。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini &amp;</span><br></pre></td></tr></table></figure><p>这样就让frp在后台运行了。</p><h4 id="使用nohup指令"><a href="#使用nohup指令" class="headerlink" title="使用nohup指令"></a>使用nohup指令</h4><p>nohup指令的使用方法相对简单，只需要在<code>nohup</code>后面加上frp的运行指令即可。下面示范的指令是运行frp客户端。（同样，如果之前断开了SSH连接，记得用<code>cd</code>指令进入frp的目录先。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frpc -c ./frpc.ini &amp;</span><br></pre></td></tr></table></figure><p>这样就成功让frp在后台运行了。</p><p>▲ 注意<code>nohup</code>千万不要达成<code>nohub</code>，不然是没有效果的，有的时候会报错告诉你 <strong>没有nohub这个命令</strong>，有的时候终端（terminal）直接会消失而没有反应</p><p>摘自链接：<a href="https://www.jianshu.com/p/e8e26bcc6fe6" target="_blank" rel="noopener">https://www.jianshu.com/p/e8e26bcc6fe6</a></p><hr><p>经过教程操作后，发现客户端电脑能够连接到学长家里已经搭好的frp服务器，但是就是连接不上阿里云。于是猜测是阿里云某些端口没有打开，一查果然如此，解决方案如下</p><blockquote><p> 为阿里云的安全服务限制，只有几个端口是默认打开的，所以要自己登陆阿里云服务器后台更改端口限制。</p></blockquote><p>ECS服务器修改<strong>网络和安全组中的安全组配置</strong></p><p>轻量级服务器修改<strong>安全-防火墙</strong>,如图</p><p><img src="/2019/02/24/搭建frp服务-阿里云服务器/3.jpg" alt="3"></p><p>添加好以后,发现客户端仍然连不上去。担心是需要重启，于是重启后还是不行。到最后才发现原来是客户端的<code>frpc.ini</code>中<code>server_addr</code>写错了一位IP字段，QAQ…</p><p>最后还要记得在<strong>防火墙</strong>中打开<strong>6000</strong>端口，协议还是<code>TCP</code>，最后即可以通过<code>IP:6000</code>就可以访问到内网主机了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br></pre></td></tr></table></figure><p><img src="/2019/02/24/搭建frp服务-阿里云服务器/hexo\source\_posts\搭建frp服务-阿里云服务器\4.jpg" alt="4"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建frp服务–阿里云服务器&quot;&gt;&lt;a href=&quot;#搭建frp服务–阿里云服务器&quot; class=&quot;headerlink&quot; title=&quot;搭建frp服务–阿里云服务器&quot;&gt;&lt;/a&gt;搭建frp服务–阿里云服务器&lt;/h1&gt;&lt;p&gt;为了可以远程访问活动室的电脑，需要进行内网穿
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Linux" scheme="https://nymrli.top/tags/Linux/"/>
    
      <category term="网络知识" scheme="https://nymrli.top/tags/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Cmake 入门</title>
    <link href="https://nymrli.top/2019/02/18/Cmake-%E5%85%A5%E9%97%A8/"/>
    <id>https://nymrli.top/2019/02/18/Cmake-入门/</id>
    <published>2019-02-18T08:42:36.000Z</published>
    <updated>2019-02-18T08:43:22.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cmake-入门"><a href="#Cmake-入门" class="headerlink" title="Cmake 入门"></a>Cmake 入门</h1><h3 id="入门案例：单个源文件"><a href="#入门案例：单个源文件" class="headerlink" title="入门案例：单个源文件"></a>入门案例：单个源文件</h3><p>例如，假设现在我们的项目中只有一个源文件 <a href="http://main.cc/" target="_blank" rel="noopener">main.cc</a> ，该程序的用途是计算一个数的指数幂。</p><h4 id="1-首先编写-CMakeLists-txt-文件，并保存在与-main-cc-源文件同个目录下"><a href="#1-首先编写-CMakeLists-txt-文件，并保存在与-main-cc-源文件同个目录下" class="headerlink" title="1.首先编写 CMakeLists.txt 文件，并保存在与 main.cc 源文件同个目录下"></a>1.首先编写 CMakeLists.txt 文件，并保存在与 <a href="http://main.cc/" target="_blank" rel="noopener">main.cc</a> 源文件同个目录下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># CMake 最低版本号要求</span><br><span class="line">cmake_minimum_required (VERSION 2.8)</span><br><span class="line"># 项目信息</span><br><span class="line">project (Demo1)</span><br><span class="line"># 指定生成目标</span><br><span class="line">add_executable(Demo main.cc)</span><br></pre></td></tr></table></figure><p>语法:</p><p>由<strong>命令</strong>、<strong>注释</strong>和<strong>空格</strong>组成，其中命令是不区分大小写的。</p><ul><li><p>符号 <code>#</code> 后面的内容被认为是注释</p></li><li><p>命令由命令名称、小括号和参数组成</p></li><li><p>参数之间使用空格进行间隔</p></li></ul><h4 id="2-编译项目"><a href="#2-编译项目" class="headerlink" title="2.编译项目"></a>2.编译项目</h4><p>之后，在当前目录执行 <code>cmake .</code> ，得到 Makefile 后再使用 <code>make</code> 命令编译得到 Demo1 可执行文件。</p><h3 id="同一目录，多个源文件"><a href="#同一目录，多个源文件" class="headerlink" title="同一目录，多个源文件"></a>同一目录，多个源文件</h3><p>如果多文件，结构变成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./Demo2</span><br><span class="line">    |</span><br><span class="line">    +--- main.cc</span><br><span class="line">    |</span><br><span class="line">    +--- MathFunctions.cc</span><br><span class="line">    |</span><br><span class="line">    +--- MathFunctions.h</span><br></pre></td></tr></table></figure><p><code>cmakelist.txt</code>需要改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># CMake 最低版本号要求</span><br><span class="line">cmake_minimum_required (VERSION 2.8)</span><br><span class="line"># 项目信息</span><br><span class="line">project (Demo2)</span><br><span class="line"># 指定生成目标</span><br><span class="line">add_executable(Demo main.cc MathFunctions.cc)</span><br></pre></td></tr></table></figure><p>区别: <strong>即在 <code>add_executable</code> 命令中增加了一个 <code>MathFunctions.cc</code> 源文件</strong></p><p>省事的方法是使用 <code>aux_source_directory</code> 命令，该命令会查找指定目录下的所有源文件，然后将结果存进指定变量名。语法为<code>aux_source_directory(&lt;dir&gt; &lt;variable&gt;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># CMake 最低版本号要求</span><br><span class="line">cmake_minimum_required (VERSION 2.8)</span><br><span class="line"># 项目信息</span><br><span class="line">project (Demo2)</span><br><span class="line"># 查找当前目录下的所有源文件</span><br><span class="line"># 并将名称保存到 DIR_SRCS 变量</span><br><span class="line">aux_source_directory(. DIR_SRCS)</span><br><span class="line"># 指定生成目标</span><br><span class="line">add_executable(Demo $&#123;DIR_SRCS&#125;)</span><br></pre></td></tr></table></figure><h3 id="多个目录，多个源文件"><a href="#多个目录，多个源文件" class="headerlink" title="多个目录，多个源文件"></a>多个目录，多个源文件</h3><p>文件结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">./Demo3</span><br><span class="line">    |</span><br><span class="line">    +--- main.cc</span><br><span class="line">    |</span><br><span class="line">    +--- math/</span><br><span class="line">          |</span><br><span class="line">          +--- MathFunctions.cc</span><br><span class="line">          |</span><br><span class="line">          +--- MathFunctions.h</span><br></pre></td></tr></table></figure><p>对于这种情况，需要分别在项目根目录 Demo3 和 math 目录里各编写一个 CMakeLists.txt 文件。为了方便，我们可以先将 math 目录里的文件编译成<strong>静态库</strong>再由 main 函数调用。</p><h4 id="根目录中的-CMakeLists-txt-："><a href="#根目录中的-CMakeLists-txt-：" class="headerlink" title="根目录中的 CMakeLists.txt ："></a>根目录中的 CMakeLists.txt ：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># CMake 最低版本号要求</span><br><span class="line">cmake_minimum_required (VERSION 2.8)</span><br><span class="line"># 项目信息</span><br><span class="line">project (Demo3)</span><br><span class="line"># 查找当前目录下的所有源文件</span><br><span class="line"># 并将名称保存到 DIR_SRCS 变量</span><br><span class="line">aux_source_directory(. DIR_SRCS)</span><br><span class="line"></span><br><span class="line"># ▲添加 math 子目录</span><br><span class="line">add_subdirectory(math)</span><br><span class="line"></span><br><span class="line"># 指定生成目标 </span><br><span class="line">add_executable(Demo main.cc)</span><br><span class="line"># 添加链接库</span><br><span class="line">target_link_libraries(Demo MathFunctions)</span><br></pre></td></tr></table></figure><ul><li>使用命令 <code>add_subdirectory</code> 指明本项目包含一个子目录 math，这样 math 目录下的 CMakeLists.txt 文件和源代码也会被处理.</li><li>使用命令 <code>target_link_libraries</code> 指明可执行文件 main 需要连接一个名为 MathFunctions 的链接库 </li></ul><h4 id="子目录中的-CMakeLists-txt："><a href="#子目录中的-CMakeLists-txt：" class="headerlink" title="子目录中的 CMakeLists.txt："></a>子目录中的 CMakeLists.txt：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查找当前目录下的所有源文件</span><br><span class="line"># 并将名称保存到 DIR_LIB_SRCS 变量</span><br><span class="line">aux_source_directory(. DIR_LIB_SRCS)</span><br><span class="line"># 生成链接库</span><br><span class="line">add_library (MathFunctions $&#123;DIR_LIB_SRCS&#125;)</span><br></pre></td></tr></table></figure><p>在该文件中使用命令 <code>add_library</code> 将 src 目录中的源文件编译为静态链接库</p><p>摘自<a href="https://www.hahack.com/codes/cmake/" target="_blank" rel="noopener">CMake 入门实战</a></p><hr><h3 id="set指令详解"><a href="#set指令详解" class="headerlink" title="set指令详解"></a>set指令详解</h3><p><strong>语法：</strong> SET(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])<br><strong>指令功能:</strong> 用来显式的定义变量<br><strong>例子:</strong> SET (SRC_LST main.c other.c)<br><strong>说明:</strong> 用变量代替值，例子中定义SRC_LST代替后面的字符串。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h4><h5 id="一-CMAKE-SOURCE-DIR-–-gt-CMakeLists-txt所在的目录"><a href="#一-CMAKE-SOURCE-DIR-–-gt-CMakeLists-txt所在的目录" class="headerlink" title="一. CMAKE_SOURCE_DIR  –&gt;CMakeLists.txt所在的目录"></a>一. CMAKE_SOURCE_DIR  –&gt;CMakeLists.txt所在的目录</h5><p><code>set(libs &quot;${CMAKE_SOURCE_DIR}/src/main/jnilibs&quot;)</code>定义了一个变量libs，并且变量的值为${CMAKE_SOURCE_DIR}/src/main/jnilibs，其中CMAKE_SOURCE_DIR 是一个cmake内置变量，指定了CMakeLists.txt所在的目录</p><h5 id="二-CMAKE-LIBRARY-OUTPUT-DIRECTORY–-gt-cmake编译输出的东西应该放在什么地方"><a href="#二-CMAKE-LIBRARY-OUTPUT-DIRECTORY–-gt-cmake编译输出的东西应该放在什么地方" class="headerlink" title="二.CMAKE_LIBRARY_OUTPUT_DIRECTORY–&gt;cmake编译输出的东西应该放在什么地方"></a>二.CMAKE_LIBRARY_OUTPUT_DIRECTORY–&gt;cmake编译输出的东西应该放在什么地方</h5><p><code>set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/src/main/jnilibs/${ANDROID_ABI})</code>这个命令用于给CMAKE_LIBRARY_OUTPUT_DIRECTORY宏赋值，该宏指定了cmake编译输出的东西应该放在什么地方。</p><p>这个例子中的地方是<code>${PROJECT_SOURCE_DIR}/src/main/jnilibs/${ANDROID_ABI}</code>其中PROJECT_SOURCE_DIR 是cmake内置宏，指向构建工程的全路径。</p><h3 id="include包含库、头文件"><a href="#include包含库、头文件" class="headerlink" title="include包含库、头文件"></a>include包含库、头文件</h3><h5 id="添加头文件路径，对应的函数叫include-directories"><a href="#添加头文件路径，对应的函数叫include-directories" class="headerlink" title="添加头文件路径，对应的函数叫include_directories"></a>添加头文件路径，对应的函数叫<code>include_directories</code></h5><h5 id="添加库路径，对应的函数叫LINK-DIRECTORIES"><a href="#添加库路径，对应的函数叫LINK-DIRECTORIES" class="headerlink" title="添加库路径，对应的函数叫LINK_DIRECTORIES"></a>添加库路径，对应的函数叫LINK_DIRECTORIES</h5><h5 id="添加库，对应的函数叫LINK-LIBRARIES，把所有的库加进去即可"><a href="#添加库，对应的函数叫LINK-LIBRARIES，把所有的库加进去即可" class="headerlink" title="添加库，对应的函数叫LINK_LIBRARIES，把所有的库加进去即可"></a>添加库，对应的函数叫LINK_LIBRARIES，把所有的库加进去即可</h5><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>使用<code>$ENV{NAME}</code>指令就可以调用系统的环境变量了。比如<code>MESSAGE(STATUS “HOME dir: $ENV{HOME}”)</code><br>设置环境变量的方式是:<code>SET(ENV{变量名} 值)</code></p><h3 id="dl、rt"><a href="#dl、rt" class="headerlink" title="dl、rt"></a>dl、rt</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">target_link_libraries(agentspark</span><br><span class="line">$&#123;RCSSNET3D_LIBRARY&#125;</span><br><span class="line">$&#123;Boost_SYSTEM_LIBRARY&#125;</span><br><span class="line">dl</span><br><span class="line">$&#123;CMAKE_THREAD_LIBS_INIT&#125;</span><br><span class="line">rt </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>dl</strong>是<code>libdl.so</code>,<strong>rt</strong>是<code>librt.so</code>的缩写···其实是静态加载了这两个动态链接库！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cmake-入门&quot;&gt;&lt;a href=&quot;#Cmake-入门&quot; class=&quot;headerlink&quot; title=&quot;Cmake 入门&quot;&gt;&lt;/a&gt;Cmake 入门&lt;/h1&gt;&lt;h3 id=&quot;入门案例：单个源文件&quot;&gt;&lt;a href=&quot;#入门案例：单个源文件&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Python+adb操作手机</title>
    <link href="https://nymrli.top/2019/02/06/Python-adb%E6%93%8D%E4%BD%9C%E6%89%8B%E6%9C%BA/"/>
    <id>https://nymrli.top/2019/02/06/Python-adb操作手机/</id>
    <published>2019-02-06T05:00:09.000Z</published>
    <updated>2019-02-06T08:19:33.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Adb"><a href="#Adb" class="headerlink" title="Adb"></a>Adb</h1><h3 id="wifi连接调试-adb-connect-ip"><a href="#wifi连接调试-adb-connect-ip" class="headerlink" title="wifi连接调试 adb connect {ip}"></a>wifi连接调试 adb connect {ip}</h3><p>如果你不想用usb连接调试，可以选择使用adb 连接调试，命令是 <code>adb connect {ip}</code> ，需要在同一个局域网内。这个功能也比较实用，但首次连接时，需要另外一些配置，建议可以网上搜索下<code>adb wifi连接手机</code>等关键字看看。</p><h3 id="屏幕截屏-screencap-p-图片存储地址"><a href="#屏幕截屏-screencap-p-图片存储地址" class="headerlink" title="屏幕截屏 screencap -p {图片存储地址}"></a>屏幕截屏 screencap -p {图片存储地址}</h3><p>这个其实直接通过手机截屏再发送到电脑就可以了，但我开发的是TV应用，在盒子上没法截屏，所以这个命令对我来说还是较实用的。</p><h3 id="获取或推送文件-adb-pull-push"><a href="#获取或推送文件-adb-pull-push" class="headerlink" title="获取或推送文件 adb pull/push"></a>获取或推送文件 adb pull/push</h3><p>这个也挺实用的，获取手机指定位置的文件到电脑上，或者从电脑发送文件到手机上</p><h3 id="模拟按键事件"><a href="#模拟按键事件" class="headerlink" title="模拟按键事件"></a>模拟按键事件</h3><p>//这条命令相当于按了设备的Back key键<br><code>adb shell input keyevent 4</code></p><p> //可以解锁屏幕</p><p><code>adb shell input keyevent  82</code></p><p>//在屏幕上做划屏操作，前四个数为坐标点，后面是滑动的时间（单位毫秒）</p><p><code>adb shell input swipe 50 250 250 250 500</code></p><p> 手机分辨率一般为1080<em>1920，其中左上角为（0,0），右下角为（1080</em>1920）</p><p>//在屏幕上点击坐标点x=50  y=250的位置。</p><p><code>adb shell input tap 50 250</code></p><p>//输入字符abc</p><p><code>adb shell input text abc</code></p><p><a href="https://www.cnblogs.com/ruo-li-suo-yi/p/8207311.html" target="_blank" rel="noopener">跳一跳游戏adb教程</a></p><h2 id="事件介绍"><a href="#事件介绍" class="headerlink" title="事件介绍"></a>事件介绍</h2><blockquote><p>代码演示都是在进入 <code>adb shell</code>模式下</p></blockquote><p>input swipe模拟的是滑动事件 , 如左滑:<code>input swipe 600 800 300 800</code></p><p>可以输入文本的文本框之类的控件上输入出 OuyangPeng 字符串: <code>input text OuyangPeng</code></p><p>input tap命令模拟触摸屏幕<code>input tap 600 800</code></p><p> input keyevent用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">input keyevent 3    // Home</span><br><span class="line">input keyevent 4    // Back</span><br><span class="line">input keyevent 19  //Up</span><br><span class="line">input keyevent 20  //Down</span><br><span class="line">input keyevent 21  //Left</span><br><span class="line">input keyevent 22  //Right</span><br><span class="line">input keyevent 23  //Select/Ok</span><br><span class="line">input keyevent 24  //Volume+</span><br><span class="line">input keyevent 25  // Volume-</span><br><span class="line">input keyevent 82  // Menu 菜单</span><br></pre></td></tr></table></figure><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h4 id="adb-启动应用"><a href="#adb-启动应用" class="headerlink" title="adb 启动应用:"></a>adb 启动应用:</h4><p><code>adb shell am start -n packgage名 /.activity</code>如 <code>adb shell am start -n com.android.calculator2/.Calculator</code></p><p>提醒点：一定要找到、找对activity和package</p><h4 id="长时间按某个元素：adb-input-shell-…"><a href="#长时间按某个元素：adb-input-shell-…" class="headerlink" title="长时间按某个元素：adb  input shell …"></a>长时间按某个元素：adb  input shell …</h4><p><code>adb -s 4d0041be98b01f shell input touchscreen swipe 540 716 545 718 1000</code></p><p>语义：-s  后跟设备号，swipe 先传移动坐标范围‘540 716 545 718’，然后1000是长按时间，单位毫秒。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>event值记录</p><p><a href="https://blog.csdn.net/jlminghui/article/details/39268419" target="_blank" rel="noopener">https://blog.csdn.net/jlminghui/article/details/39268419</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Adb&quot;&gt;&lt;a href=&quot;#Adb&quot; class=&quot;headerlink&quot; title=&quot;Adb&quot;&gt;&lt;/a&gt;Adb&lt;/h1&gt;&lt;h3 id=&quot;wifi连接调试-adb-connect-ip&quot;&gt;&lt;a href=&quot;#wifi连接调试-adb-connect-ip&quot; c
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="模拟操作" scheme="https://nymrli.top/tags/%E6%A8%A1%E6%8B%9F%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>ACM_动态规划</title>
    <link href="https://nymrli.top/2019/02/03/ACM-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://nymrli.top/2019/02/03/ACM-动态规划/</id>
    <published>2019-02-03T07:49:10.000Z</published>
    <updated>2019-02-07T11:33:36.167Z</updated>
    
    <content type="html"><![CDATA[<p>图解动态规划 : <a href="http://www.sohu.com/a/153858619_466939" target="_blank" rel="noopener">http://www.sohu.com/a/153858619_466939</a></p><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划 :"></a>动态规划 :</h1><ul><li>最优子结构</li><li>边界</li><li>状态转移方程式</li></ul><h2 id="题目二：-国王和金矿"><a href="#题目二：-国王和金矿" class="headerlink" title="题目二： 国王和金矿"></a><strong>题目二： 国王和金矿</strong></h2><p>有一个国家发现了5座金矿，每座金矿的黄金储量不同，需要参与挖掘的工人数也不同。参与挖矿工人的总数是10人。每座金矿要么全挖，要么不挖，不能派出一半人挖取一半金矿。要求用程序求解出，要想得到尽可能多的黄金，应该选择挖取哪几座金矿？</p><p><img src="/2019/02/03/ACM-动态规划/2.png" alt="2"></p><h3 id="解法一-排列组合"><a href="#解法一-排列组合" class="headerlink" title="解法一: 排列组合"></a>解法一: 排列组合</h3><p>时间复杂度 : O(2^N)</p><h3 id="解法二-DP"><a href="#解法二-DP" class="headerlink" title="解法二 : DP"></a>解法二 : DP</h3><h4 id="1-找到最优子结构"><a href="#1-找到最优子结构" class="headerlink" title="1.找到最优子结构"></a>1.找到最优子结构</h4><ul><li>10人4金矿(有一个金矿没挖)</li><li>10-3人4金矿(挖了一个金矿)</li></ul><h4 id="2-最优选择"><a href="#2-最优选择" class="headerlink" title="2.最优选择"></a>2.最优选择</h4><p>5个金矿的最优选择，就是<em>（前4座金矿10工人的挖金数量）和（前4座金矿7工人的挖金数量+第5座金矿的挖金数量）</em>的<strong>最大值</strong>！</p><p><img src="/2019/02/03/ACM-动态规划/最优.jpg" alt="最优"></p><h4 id="3-边界"><a href="#3-边界" class="headerlink" title="3.边界"></a>3.边界</h4><p><img src="/2019/02/03/ACM-动态规划/边界.jpg" alt="边界"></p><hr><p>经过整理可得 <strong>状态转移方程式</strong>:</p><ul><li>边界:</li></ul><p><strong>F(n,w) = 0 (n&lt;=1, w&lt;p[0]);</strong></p><p><strong>F(n,w) = g[0] (n==1, w&gt;=p[0]);</strong></p><ul><li>推导式</li></ul><p><strong>F(n,w) = F(n-1,w) (n&gt;1, w&lt;p[n-1])</strong></p><p><strong>F(n,w) = max(F(n-1,w), F(n-1,w-p[n-1])+g[n-1]) (n&gt;1, w&gt;=p[n-1])</strong></p><h4 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法:"></a>实现方法:</h4><h5 id="简单递归"><a href="#简单递归" class="headerlink" title="简单递归"></a>简单递归</h5><h5 id="记忆搜索法"><a href="#记忆搜索法" class="headerlink" title="记忆搜索法"></a>记忆搜索法</h5><h5 id="动态规划-递推式"><a href="#动态规划-递推式" class="headerlink" title="动态规划(递推式)"></a>动态规划(递推式)</h5><p><img src="/2019/02/03/ACM-动态规划/DP写法.png" alt="DP写法"></p><hr><h2 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h2><h3 id="简单递归-1"><a href="#简单递归-1" class="headerlink" title="简单递归"></a>简单递归</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>;</span><br><span class="line"><span class="comment">/* 01背包问题 */</span></span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; wv[maxn];</span><br><span class="line"><span class="keyword">int</span> N; <span class="comment">// 物品数量</span></span><br><span class="line"><span class="keyword">int</span> W; <span class="comment">// 背包重量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>( i == N) res= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( j &lt; wv[i].first )</span><br><span class="line">        res = rec(i+<span class="number">1</span>,j);</span><br><span class="line">    <span class="keyword">else</span> res = max(rec(i+<span class="number">1</span>,j) , rec(i+<span class="number">1</span>,j-wv[i].first) + wv[i].second);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i &lt;N ; i++) <span class="built_in">cin</span> &gt;&gt; wv[i].first &gt;&gt; wv[i].second;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; W;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rec(<span class="number">0</span>,W) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="记忆搜索"><a href="#记忆搜索" class="headerlink" title="记忆搜索"></a>记忆搜索</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>;</span><br><span class="line"><span class="comment">/* 01背包问题 */</span></span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; wv[maxn];</span><br><span class="line"><span class="keyword">int</span> N; <span class="comment">// 物品数量</span></span><br><span class="line"><span class="keyword">int</span> W; <span class="comment">// 背包重量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn]; <span class="comment">//2.多了个记忆数组(称为DP数组)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( dp[i][j] &gt; <span class="number">0</span> ) <span class="keyword">return</span> dp[i][j];</span><br><span class="line">    <span class="comment">// 如果已经计算过,就直接使用之前的结果</span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>( i == N) res= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( j &lt; wv[i].first )</span><br><span class="line">        res = rec(i+<span class="number">1</span>,j);</span><br><span class="line">    <span class="keyword">else</span> res = max(rec(i+<span class="number">1</span>,j) , rec(i+<span class="number">1</span>,j-wv[i].first) + wv[i].second);</span><br><span class="line">    dp[i][j] =res;<span class="comment">// 2.将结果记录</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i &lt;N ; i++) <span class="built_in">cin</span> &gt;&gt; wv[i].first &gt;&gt; wv[i].second;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; W;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rec(<span class="number">0</span>,W) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划解法"><a href="#动态规划解法" class="headerlink" title="动态规划解法"></a>动态规划解法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>;</span><br><span class="line"><span class="comment">/* 01背包问题 */</span></span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; wv[maxn];</span><br><span class="line"><span class="keyword">int</span> N; <span class="comment">// 物品数量</span></span><br><span class="line"><span class="keyword">int</span> W; <span class="comment">// 背包重量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn]; <span class="comment">//2.多了个记忆数组(称为DP数组)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆序推导</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i &lt;N ; i++) <span class="built_in">cin</span> &gt;&gt; wv[i].first &gt;&gt; wv[i].second;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; W;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i= N<span class="number">-1</span> ; i &gt;= <span class="number">0</span> ; i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;= W ; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( j &lt; wv[i].first ) dp[i][j] = dp[i+<span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            dp[i][j] = max( dp[i+<span class="number">1</span>][j] , dp[i+<span class="number">1</span>][j - wv[i].first] + wv[i].second);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[<span class="number">0</span>][W] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 顺序推导</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i &lt;N ; i++) <span class="built_in">cin</span> &gt;&gt; wv[i].first &gt;&gt; wv[i].second;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; W;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i= <span class="number">0</span> ; i &lt; N ; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;= W ; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( j &lt; wv[i].first ) dp[i+<span class="number">1</span>][j] = dp[i][j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            dp[i+<span class="number">1</span>][j] = max( dp[i][j] , dp[i][j - wv[i].first] + wv[i].second);</span><br><span class="line">        <span class="comment">// 推导式也变了,下一行的依据上一行写成dp[i+1][j] = ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[N][W] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 输出的结果变了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲注意，边界一定要注意处理。 这题由于边界全为0，而全局数组初始化默认是0，所以不需要处理，否则得像</p><p><strong>国王和金矿</strong>提供的题解一样书写。</p><h2 id="最长公共子序列问题"><a href="#最长公共子序列问题" class="headerlink" title="最长公共子序列问题"></a>最长公共子序列问题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>;</span><br><span class="line"><span class="comment">/* LCS */</span></span><br><span class="line"><span class="keyword">int</span> dp[maxn+<span class="number">1</span>][maxn+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">string</span> sn,sm;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; sn &gt;&gt; sm;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( sn[i] == sm[j] ) dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = dp[i][j] + <span class="number">1</span>;</span><br><span class="line">         <span class="comment">// p[i+1][j+1] = max(dp[i][j] + 1 , max(dp[i+1][j] , dp[i][j+1]));化简而来</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">else</span> dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = max(dp[i][j+<span class="number">1</span>] , dp[i+<span class="number">1</span>][j] );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[n][m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2><h2 id="多重部分和"><a href="#多重部分和" class="headerlink" title="多重部分和"></a>多重部分和</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;图解动态规划 : &lt;a href=&quot;http://www.sohu.com/a/153858619_466939&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.sohu.com/a/153858619_466939&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
      <category term="DP" scheme="https://nymrli.top/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>ACM_贪心专题</title>
    <link href="https://nymrli.top/2019/02/01/ACM-%E8%B4%AA%E5%BF%83%E4%B8%93%E9%A2%98/"/>
    <id>https://nymrli.top/2019/02/01/ACM-贪心专题/</id>
    <published>2019-02-01T12:17:50.000Z</published>
    <updated>2019-02-02T12:19:38.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="贪心专题"><a href="#贪心专题" class="headerlink" title="贪心专题"></a>贪心专题</h1><h2 id="1-活动安排"><a href="#1-活动安排" class="headerlink" title="1.活动安排"></a>1.活动安排</h2><p>有若干个活动，第i个开始时间和结束时间是[Si,fi)，只有一个教室，活动之间不能交叠，求最多安排多少个活动？</p><p>Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一行一个正整数n (n &lt;= 10000)代表活动的个数。</span><br><span class="line">第二行到第(n + 1)行包含n个开始时间和结束时间。</span><br><span class="line">开始时间严格小于结束时间，并且时间都是非负整数，小于1000000000</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一行包含一个整数表示活动个数。</span><br></pre></td></tr></table></figure><p>Input示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br><span class="line">2 9</span><br></pre></td></tr></table></figure><p>Output示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>博主提供:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s,e;<span class="comment">//start , end </span></span><br><span class="line">&#125; a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于使用结构体,所以需要自定义cmp函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span>  <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.e&lt;y.e) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x.e==y.e&amp;&amp;x.s&gt;y.s) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,j,ans,end;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i].s&gt;&gt;a[i].e;</span><br><span class="line">sort(a,a+n,cmp);</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">end = <span class="number">-1e9</span><span class="number">-100</span>;</span><br><span class="line"><span class="keyword">for</span>(i =<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].s&gt;=end)&#123;<span class="comment">// 结束最早的</span></span><br><span class="line">ans++;</span><br><span class="line">end=a[i].e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用结构体,使用map:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> +<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N) == <span class="number">1</span>)&#123;</span><br><span class="line">        pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; itv[maxn];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;N; i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;itv[i].second , &amp;itv[i].first);</span><br><span class="line">        sort( itv , itv + N);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i =<span class="number">0</span> ; i&lt; N ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> ( t &lt; itv[i].second )&#123;</span><br><span class="line">                ans ++;</span><br><span class="line">                t = itv[i].first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HUD-OJ-2037今年暑假不AC"><a href="#HUD-OJ-2037今年暑假不AC" class="headerlink" title="HUD OJ  2037今年暑假不AC"></a>HUD OJ  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2037" target="_blank" rel="noopener">2037今年暑假不AC</a></h2><p>感觉像是板子题，都是时间规划类，需要最多目标的题目。但是在第15行时，必须写&lt;=,否则WA.</p><blockquote><p>&lt;= 的结果是 5 ; &lt; 的结果是 3</p></blockquote><p>经过与上题的对比发现，主要的区别在于这句话 ：上题规定 <strong>开始时间严格小于结束时间，并且时间都是非负整数，小于1000000000</strong> ，而这题 <strong>开始时间是可以等于结束时间的</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+ <span class="number">5</span>;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; node[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; N)&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !N ) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) <span class="built_in">cin</span> &gt;&gt; node[i].second &gt;&gt; node[i].first ;</span><br><span class="line">        sort(node,node+N);</span><br><span class="line">        <span class="keyword">int</span> ans =<span class="number">0</span> , endt =<span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;N;i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( endt &lt;= node[i].second )&#123;</span><br><span class="line">                ans ++ ;</span><br><span class="line">                endt = node[i].first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字典序比较"><a href="#字典序比较" class="headerlink" title="字典序比较"></a>字典序比较</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">include &lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span> , b = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>( a &lt;= b)&#123;</span><br><span class="line">        <span class="keyword">bool</span> left = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; a+i &lt;=b ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( s[a+i] &lt; s[b-i] )&#123;</span><br><span class="line">                left = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s[a+i] &gt; s[b-i])&#123;</span><br><span class="line">                left = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( left ) <span class="built_in">putchar</span>(s[a++]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">putchar</span>(s[b--]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    solve(N);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;贪心专题&quot;&gt;&lt;a href=&quot;#贪心专题&quot; class=&quot;headerlink&quot; title=&quot;贪心专题&quot;&gt;&lt;/a&gt;贪心专题&lt;/h1&gt;&lt;h2 id=&quot;1-活动安排&quot;&gt;&lt;a href=&quot;#1-活动安排&quot; class=&quot;headerlink&quot; title=&quot;1.活动安
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
      <category term="贪心" scheme="https://nymrli.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>学习nginx配置</title>
    <link href="https://nymrli.top/2019/01/24/%E5%AD%A6%E4%B9%A0nginx%E9%85%8D%E7%BD%AE/"/>
    <id>https://nymrli.top/2019/01/24/学习nginx配置/</id>
    <published>2019-01-24T08:45:40.000Z</published>
    <updated>2019-01-24T08:47:29.469Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><h5 id="多台虚拟主机"><a href="#多台虚拟主机" class="headerlink" title="多台虚拟主机:"></a>多台虚拟主机:</h5><p>1.分配IP地址</p><p>2.新建、编写usr/local/nginx的conf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    sever&#123;</span><br><span class="line">        listen 192.168.1.17:80;//监听 (IP地址:) 端口</span><br><span class="line">        server_name 192.168.1.17;// 域名或者ip</span><br><span class="line">        access_log logs/server1.access.log conbined;//指定位置+使用日志文件默认格式</span><br><span class="line">        location /</span><br><span class="line">        &#123;</span><br><span class="line">        index index.html index.htm; //index表示意义(关键字),左边优先级高.指定的首页</span><br><span class="line">        root html/ss2;</span><br><span class="line">        //虚拟主机目录(网站目录)==&gt;ss2下的所以html文件都可以通过192.168.1.17/xxx访问</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编写目录下的首页index.html文件</p><p>4.运行nginx</p><p><code>usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/xnzj.conf</code></p><p>▲在根目录下可以直接通过路径访问,如根目录下只有index文件,而配置中设置的是<code>index index.html</code>此时没有找到index.html后就会显示403错误,但是可以通过<code>192.168.1.17</code>==&gt;<code>192.168.1.17/index</code>添加路径的方法来加载index界面</p><h5 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h5><ul><li>缓存</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen xxx;</span><br><span class="line">server_name yyy;</span><br><span class="line">location ~.*\.(jpg|png|)$&#123;</span><br><span class="line">        expires 30d;</span><br><span class="line">&#125;</span><br><span class="line">location ~.*\.(css|js|)$&#123;</span><br><span class="line">        expires 1h;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自动列目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[/ect/nginx/nginx.conf]</span><br><span class="line">server&#123;</span><br><span class="line">..</span><br><span class="line">    location / &#123;</span><br><span class="line">      root html;</span><br><span class="line">      index index.html index.hml;</span><br><span class="line">      autoindex on; #▲</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="uwsgi模块使用"><a href="#uwsgi模块使用" class="headerlink" title="uwsgi模块使用"></a>uwsgi模块使用</h4><p>安装<br><code>source activate</code># 开启虚拟开发环境模式<br><code>pip install uwsgi</code> # 安装uwsgi<br>配置<br>uwsgi配置文件支持很多格式，我采用.ini格式，命名为uconfig.ini具体内容如下：</p><p>启动uwsgi , 命令输入<code>uwsgi uconfig.ini</code></p><p>外部访问测试 </p><p>此时在外部访问 公网IP：5000就可以访问了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line"># 外部访问地址，可以指定多种协议，现在用http便于调试，之后用socket</span><br><span class="line">http = 0.0.0.0:5000</span><br><span class="line"># 指向项目目录</span><br><span class="line">chdir =  /home/pythonproject/my_flask/py3env/myblog/</span><br><span class="line"># flask启动程序文件</span><br><span class="line">wsgi-file = manage.py</span><br><span class="line"># flask在manage.py文件中的app名</span><br><span class="line">callable = app #很多人习惯将Flask应用对象取名为”app”，但是WSGI标准是”application”。uWSGI提供了一个功能，可以指定应用对象，方法就是在配置文件中加上”callable”项：</span><br><span class="line"># 处理器数</span><br><span class="line">processes = 4</span><br><span class="line"># 线程数</span><br><span class="line">threads = 2</span><br><span class="line">#状态检测地址</span><br><span class="line">stats = 127.0.0.1:9191</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    include uwsgi_params;</span><br><span class="line">    uwsgi_pass 127.0.0.1:3031;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段配置表明Nginx会将收到的所有请求都转发到”127.0.0.1:3031″端口上，即uWSGI服务器上。现在让我们重启Nginx，</p><p><img src="/2019/01/24/学习nginx配置/Users/10630/Desktop/tmp/%E5%AD%A6%E4%B9%A0nginx%E9%85%8D%E7%BD%AE/nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%91%98%E8%A6%81.jpg" alt="nginx配置文件摘要"></p><p> <img src="" alt="服务器"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;nginx配置&quot;&gt;&lt;a href=&quot;#nginx配置&quot; class=&quot;headerlink&quot; title=&quot;nginx配置&quot;&gt;&lt;/a&gt;nginx配置&lt;/h4&gt;&lt;h5 id=&quot;多台虚拟主机&quot;&gt;&lt;a href=&quot;#多台虚拟主机&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>C++日期操作</title>
    <link href="https://nymrli.top/2019/01/24/C++%E6%97%A5%E6%9C%9F%E6%93%8D%E4%BD%9C/"/>
    <id>https://nymrli.top/2019/01/24/C++日期操作/</id>
    <published>2019-01-24T07:00:56.000Z</published>
    <updated>2019-02-06T08:23:36.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-日期操作"><a href="#C-日期操作" class="headerlink" title="C++日期操作"></a>C++日期操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">time_t</span> now = time(<span class="number">0</span>);<span class="comment">// 基于当前系统的当前日期/时间 的时间戳</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"1970 到目前经过秒数:"</span> &lt;&lt; now &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   tm *ltm = localtime(&amp;now);<span class="comment">// 将时间戳转换为结构体,再输出 tm 结构的各个组成部分</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"年: "</span>&lt;&lt; <span class="number">1900</span> + ltm-&gt;tm_year &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"月: "</span>&lt;&lt; <span class="number">1</span> + ltm-&gt;tm_mon&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"日: "</span>&lt;&lt;  ltm-&gt;tm_mday &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"时间: "</span>&lt;&lt; ltm-&gt;tm_hour &lt;&lt; <span class="string">":"</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; ltm-&gt;tm_min &lt;&lt; <span class="string">":"</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; ltm-&gt;tm_sec &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="time-t结构体"><a href="#time-t结构体" class="headerlink" title="time_t结构体"></a><code>time_t</code>结构体</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span> </span>&#123; </span><br><span class="line"><span class="keyword">time_t</span> t = time(<span class="number">0</span>); </span><br><span class="line">    <span class="keyword">char</span> tmp[<span class="number">64</span>]; </span><br><span class="line">    strftime( tmp, <span class="keyword">sizeof</span>(tmp), <span class="string">"%Y/%m/%d %X %A 本年第%j天 %z"</span>,localtime(&amp;t) ); </span><br><span class="line">    <span class="built_in">puts</span>( tmp ); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// ---第二种</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> timep;</span><br><span class="line">    time (&amp;timep);</span><br><span class="line">    <span class="keyword">char</span> tmp[<span class="number">64</span>];</span><br><span class="line">    strftime(tmp, <span class="keyword">sizeof</span>(tmp), <span class="string">"%Y-%m-%d %H:%M:%S"</span>,localtime(&amp;timep) );</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span>   time = getTime();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; time &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>size_t strftime(char <em>strDest, size_t maxsize, const char </em>format, const struct tm <em>timeptr);<br>根据格式字符串生成字符串。<br>struct tm </em>localtime(const time_t *timer);<br>取得当地时间，localtime获取的结果由结构tm返回<br>返回的字符串可以依下列的格式而定：<br>%a 星期几的缩写。Eg:Tue<br>%A 星期几的全名。 Eg: Tuesday<br>%b 月份名称的缩写。<br>%B 月份名称的全名。<br>%c 本地端日期时间较佳表示字符串。<br>%d 用数字表示本月的第几天 (范围为 00 至 31)。日期<br>%H 用 24 小时制数字表示小时数 (范围为 00 至 23)。<br>%I 用 12 小时制数字表示小时数 (范围为 01 至 12)。<br>%j 以数字表示当年度的第几天 (范围为 001 至 366)。<br>%m 月份的数字 (范围由 1 至 12)。<br>%M 分钟。<br>%p 以 ‘’AM’’ 或 ‘’PM’’ 表示本地端时间。<br>%S 秒数。<br>%U 数字表示为本年度的第几周，第一个星期由第一个周日开始。<br>%W 数字表示为本年度的第几周，第一个星期由第一个周一开始。<br>%w 用数字表示本周的第几天 ( 0 为周日)。<br>%x 不含时间的日期表示法。<br>%X 不含日期的时间表示法。 Eg: 15:26:30<br>%y 二位数字表示年份 (范围由 00 至 99)。<br>%Y 完整的年份数字表示，即四位数。 Eg:2008<br>%Z(%z) 时区或名称缩写。Eg:中国标准时间<br>%% % 字符。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;C-日期操作&quot;&gt;&lt;a href=&quot;#C-日期操作&quot; class=&quot;headerlink&quot; title=&quot;C++日期操作&quot;&gt;&lt;/a&gt;C++日期操作&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="程序开发经验" scheme="https://nymrli.top/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Shell代码编写记录</title>
    <link href="https://nymrli.top/2019/01/23/Shell%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99%E8%AE%B0%E5%BD%95/"/>
    <id>https://nymrli.top/2019/01/23/Shell代码编写记录/</id>
    <published>2019-01-23T05:48:59.000Z</published>
    <updated>2019-01-24T03:06:07.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="随机选取端口"><a href="#随机选取端口" class="headerlink" title="随机选取端口"></a>随机选取端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 随机设置代理和监控端口，允许每台机器有多个代理</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意:<span class="variable">$RANDOM</span>返回一个从0到32767的值，端口&lt;= 1024保留给root用户</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TODO:不是随机选择端口，而是绑定到可用端口</span></span><br><span class="line">export SPARK_SERVERPORT=$[$RANDOM + 1025]</span><br><span class="line">export SPARK_AGENTPORT=$[$RANDOM + 1025]</span><br></pre></td></tr></table></figure><h2 id="后台执行-获取其PID"><a href="#后台执行-获取其PID" class="headerlink" title="后台执行,获取其PID"></a>后台执行,获取其PID</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rcssserver3d --agent-port $SPARK_AGENTPORT --server-port $SPARK_SERVERPORT &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将rcssserver3d后台运行在随机获得的端口上</span></span><br><span class="line">PID=$! # 获得进程号,最后用进程PID关闭rcssserver3d</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---类比学习---</span></span><br><span class="line">python ./test1.py &amp;</span><br><span class="line">PID=$!</span><br><span class="line">echo $PID</span><br></pre></td></tr></table></figure><h2 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sleep 5#延迟时间</span><br><span class="line">DIR_SCRIPT="$( cd "$( dirname "$0" )" &amp;&amp; pwd )" </span><br><span class="line"><span class="meta">#</span><span class="bash"> 先运行 <span class="built_in">cd</span>切换目录,再将当前工作目录赋值给 DIR_SCRIPT</span></span><br><span class="line">TYPE=$1#TYPE为读取第二个参数</span><br><span class="line">DIR_PARAMS="$( cd "$( dirname "$2" )" &amp;&amp; pwd )"</span><br><span class="line">DIR_OUTPUT="$( cd "$( dirname "$3" )" &amp;&amp; pwd )"</span><br><span class="line"></span><br><span class="line">PARAMS_FILE=$DIR_PARAMS/$(basename $2)</span><br><span class="line"><span class="meta">#</span><span class="bash"> basename返回文件名</span></span><br><span class="line">OUTPUT_FILE=$DIR_OUTPUT/$(basename $3)</span><br></pre></td></tr></table></figure><h2 id="输出判断"><a href="#输出判断" class="headerlink" title="输出判断"></a>输出判断</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">while [ ! -f $OUTPUT_FILE ] &amp;&amp; [ $total_wait_time -lt $maxWaitTimeSecs ]</span><br><span class="line">do </span><br><span class="line">  sleep 1</span><br><span class="line">  total_wait_time=`expr $total_wait_time + 1`</span><br><span class="line"><span class="meta">  #</span><span class="bash"> expr 表示后面是运算表达式</span></span><br><span class="line">done </span><br><span class="line"><span class="meta">#</span><span class="bash"> -f 是正常文件 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Shell 中 ()用[]代替</span></span><br><span class="line">if [ ! -f $OUTPUT_FILE ]</span><br><span class="line">then</span><br><span class="line">  echo "Timed out while waiting for script to complete, current wait time is $total_wait_time seconds."</span><br><span class="line">else</span><br><span class="line">  echo "Completed with a wait time of $total_wait_time seconds."</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="关闭进程"><a href="#关闭进程" class="headerlink" title="关闭进程"></a>关闭进程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo "Killing Simulator"</span><br><span class="line">kill -s 2 $PID</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">kill</span> -s 信号名 进程号</span></span><br><span class="line">echo "Killing Agent"</span><br><span class="line">kill -s 2 $AGENTPID</span><br></pre></td></tr></table></figure><p>格式：<code>kill &lt;pid&gt;</code></p><p>格式：<code>kill -TERM &lt;pid&gt;</code></p><p>发送SIGTERM旌旗灯号到指定过程，若是过程没有捕获该旌旗灯号，则过程终止（If no signal is specified， the TERM signal is sent.  The TERM signal will kill processes which do not catch this signal.）</p><p>格式：kill -l</p><p>列出所有旌旗灯号名称（Print a list of signal names.  These are found in /usr/include/linux/signal.h）。只有第9种旌旗灯号（SIGKILL）才可以无前提终止过程，其他旌旗灯号过程都有权力忽视。下面是常用的旌旗灯号：</p><h3 id="旌旗灯号名称"><a href="#旌旗灯号名称" class="headerlink" title="旌旗灯号名称"></a>旌旗灯号名称</h3><ul><li><p>HUP     1    终端断线</p></li><li><p>INT     2    中断（同 Ctrl + C）</p></li><li><p>QUIT    3    退出（同 Ctrl + ）</p></li><li><p>TERM    15    终止</p></li><li><p>KILL    9    强迫终止</p></li><li><p>CONT    18    持续（与STOP相反， fg/bg号令）</p></li><li><p>STOP    19    暂停（同 Ctrl + Z）</p></li></ul><h2 id="Bash-Shell-脚本获取进程-pid"><a href="#Bash-Shell-脚本获取进程-pid" class="headerlink" title="Bash Shell 脚本获取进程 pid"></a>Bash Shell 脚本获取进程 pid</h2><ul><li>第一种方法:</li></ul><p><code>ps -ef | grep &quot;Processname&quot; | grep -v grep | awk &#39;{print $2}&#39;</code></p><ul><li>第二种</li></ul><p>最简单的方法是使用 <a href="https://www.baidu.com/s?wd=pgrep&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">pgrep</a>：</p><p><code>pgrep -f name</code></p><h3 id="根据PID关闭进程"><a href="#根据PID关闭进程" class="headerlink" title="根据PID关闭进程"></a>根据PID关闭进程</h3><p><code>kill -9 PID</code></p><h3 id="根据进程名关闭进程"><a href="#根据进程名关闭进程" class="headerlink" title="根据进程名关闭进程"></a>根据进程名关闭进程</h3><p>法一:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -f name1</span><br></pre></td></tr></table></figure><p>法二:</p><p>如果是可执行程序的话，可以直接使用 <a href="https://www.baidu.com/s?wd=pidof&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">pidof</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidof name</span><br></pre></td></tr></table></figure><h3 id="关闭Roboviz-sh里java进程的方法"><a href="#关闭Roboviz-sh里java进程的方法" class="headerlink" title="关闭Roboviz.sh里java进程的方法:"></a>关闭Roboviz.sh里java进程的方法:</h3><blockquote><p>grep -v ：显示不包含匹配文本的所有行(反向查找)。比如 grep -v grep 就是查找不含有 grep 字段的行</p></blockquote><p>写法一:<code>kill -9 $(ps x | grep Roboviz.jar | grep -v grep | awk &#39;{print $1}&#39;)</code></p><p>写法二: <code>ps -ef | grep Roboviz.jar | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9</code></p><h2 id="shell脚本中的冒号作用"><a href="#shell脚本中的冒号作用" class="headerlink" title="shell脚本中的冒号作用"></a>shell脚本中的冒号作用</h2><h3 id="作用一-占位符-lt-gt-pass"><a href="#作用一-占位符-lt-gt-pass" class="headerlink" title="作用一: 占位符&lt;==&gt;pass"></a>作用一: 占位符&lt;==&gt;pass</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if egrep '.*vmlinuz-2.6.32-220.23.1.lvs.el6.*nohz=off' /boot/grub/grub.conf ;then </span><br><span class="line">    :</span><br><span class="line">else </span><br><span class="line">    sed -i -r 's/(.*vmlinuz-2.6.32-220.23.1.lvs.el6.*)/\1 nohz=off/' /boot/grub/grub.conf</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="作用二-分隔符"><a href="#作用二-分隔符" class="headerlink" title="作用二: 分隔符"></a>作用二: 分隔符</h3><blockquote><p> 冒号(:)常用来做路径的分隔符（PATH），数据字段的分隔符（/etc/passwd）</p></blockquote><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量:"></a>特殊变量:</h3><ul><li>$$ 当前脚本PID</li><li>$!  后台子进程PID</li><li>$? 上句执行结果</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;随机选取端口&quot;&gt;&lt;a href=&quot;#随机选取端口&quot; class=&quot;headerlink&quot; title=&quot;随机选取端口&quot;&gt;&lt;/a&gt;随机选取端口&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
      <category term="Shell" scheme="https://nymrli.top/tags/Shell/"/>
    
  </entry>
  
</feed>
