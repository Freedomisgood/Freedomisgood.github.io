<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mrli&#39;s Blog</title>
  
  <subtitle>别装作很努力，结局不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nymrli.top/"/>
  <updated>2019-11-26T07:51:12.893Z</updated>
  <id>https://nymrli.top/</id>
  
  <author>
    <name>Mrli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019年8月23号运维笔记</title>
    <link href="https://nymrli.top/2019/11/26/2019%E5%B9%B48%E6%9C%8823%E5%8F%B7%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/"/>
    <id>https://nymrli.top/2019/11/26/2019年8月23号运维笔记/</id>
    <published>2019-11-26T07:50:55.000Z</published>
    <updated>2019-11-26T07:51:12.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019年8月23号运维笔记"><a class="markdownIt-Anchor" href="#2019年8月23号运维笔记"></a> 2019年8月23号运维笔记</h1><h2 id="docker"><a class="markdownIt-Anchor" href="#docker"></a> docker</h2><h3 id="docker-stop-containerid以后再重新启动时报错"><a class="markdownIt-Anchor" href="#docker-stop-containerid以后再重新启动时报错"></a> docker stop containerID，以后再重新启动时报错</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: driver failed programming external connectivity on endpoint app (3c0c01ac6b42b7a420644fc2b4debfbbcc0e1d2e74e6294155c28aca82f794c4):  (iptables failed: iptables --<span class="built_in">wait</span> -t nat -A DOCKER -p tcp -d 0/0 --dport 12345 -j DNAT --to-destination 172.17.0.2:80 ! -i docker0: iptables: No chain/target/match by that name.</span><br></pre></td></tr></table></figure><p>A: 重启docker即可：<code>systemctl restart docker</code></p><p>再开启你的容器： <code>docker run xxxx</code>或<code>docker start xxx</code></p><p>查看docker容器的运行日志</p><p><code>docker logs containerID</code></p><h3 id="docker端口映射到宿主机后外网仍无法访问容器的web"><a class="markdownIt-Anchor" href="#docker端口映射到宿主机后外网仍无法访问容器的web"></a> docker端口映射到宿主机后外网仍无法访问容器的web</h3><p>A：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决办法：</span></span><br><span class="line">$ sudo vi /etc/sysctl.conf</span><br><span class="line">或者</span><br><span class="line">$ sudo  vi /usr/lib/sysctl.d/00-system.conf</span><br><span class="line"><span class="comment"># 添加如下代码：</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line">重启network服务</span><br><span class="line">$ sudo systemctl restart network</span><br><span class="line"></span><br><span class="line">查看是否修改成功</span><br><span class="line">$ sudo sysctl net.ipv4.ip_forward</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果返回为“net.ipv4.ip_forward = 1”则表示成功了</span></span><br></pre></td></tr></table></figure><h2 id="nginx"><a class="markdownIt-Anchor" href="#nginx"></a> nginx</h2><h3 id="查看nginx安装路径"><a class="markdownIt-Anchor" href="#查看nginx安装路径"></a> 查看nginx安装路径</h3><p><code>ps -ef | grep nginx</code></p><h2 id="查看nginx日志"><a class="markdownIt-Anchor" href="#查看nginx日志"></a> 查看nginx日志</h2><p><code>systemctl status nginx.service</code></p><p><code>journalctl -xe</code></p><h3 id="指定运行配置文件"><a class="markdownIt-Anchor" href="#指定运行配置文件"></a> 指定运行配置文件</h3><p>直接运行nginx可执行文件即可启动，nginx会自动读取配置文件目录下的“nginx.conf”配置文件，也可以在后面接“-c”参数来指定配置文件：</p><p><code>/usr/sbin/nginx -c /etc/nginx/sites-enabled/nginx.conf</code></p><h2 id="校验配置文件是否正确"><a class="markdownIt-Anchor" href="#校验配置文件是否正确"></a> 校验配置文件是否正确</h2><p>由于nginx的配置文件比较复杂容易出错，修改配置后可以用“-t”参数来校验配置文件是否正确：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -t    # 校验默认的配置文件</span><br><span class="line">nginx -t -c /path/to/configfile    # 校验指定配置文件</span><br></pre></td></tr></table></figure><h2 id="了解日志管理"><a class="markdownIt-Anchor" href="#了解日志管理"></a> 了解日志管理</h2><p>我们查看nginx安装目录下（<code>/var/log/nginx</code>）有个logs，包含了三个文件 “<strong>access.log</strong> 、<strong>error.log</strong>、<strong>nginx.pid</strong>”。</p><p>当然，日志配置肯定也是通过nginx.conf配置文件来进行配置的 ，那我先来看配置文件是怎么写的。</p><ul><li><code>access_log logs/access.log main</code>这个是指access.log日志用main格式来显示。</li><li><code>error_log logs/error.log error</code></li></ul><p>main格式是什么？mian格式是我们已经定义好了的一种各种，并取个名字便于引用。</p><p>默认的main格式中具体用了哪些选项来记录日志呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$remote_addr, $http_x_forwarded_for 记录客户端IP地址</span><br><span class="line">$remote_user 记录客户端用户名称</span><br><span class="line">$request 记录请求的URL和HTTP协议</span><br><span class="line">$status 记录请求状态</span><br><span class="line">$body_bytes_sent 发送给客户端的字节数，不包括响应头的大小； 该变量与Apache模块mod_log_config里的“%B”参数兼容。</span><br><span class="line">$bytes_sent 发送给客户端的总字节数。</span><br><span class="line">$connection 连接的序列号。</span><br><span class="line">$connection_requests 当前通过一个连接获得的请求数量。</span><br><span class="line">$msec 日志写入时间。单位为秒，精度是毫秒。</span><br><span class="line">$pipe 如果请求是通过HTTP流水线(pipelined)发送，pipe值为“p”，否则为“.”。</span><br><span class="line">$http_referer 记录从哪个页面链接访问过来的</span><br><span class="line">$http_user_agent 记录客户端浏览器相关信息</span><br><span class="line">$request_length 请求的长度（包括请求行，请求头和请求正文）。</span><br><span class="line">$request_time 请求处理时间，单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</span><br><span class="line">$time_iso8601 ISO8601标准格式下的本地时间。</span><br><span class="line">$time_local 通用日志格式下的本地时间。</span><br></pre></td></tr></table></figure><p>nginx.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">//该文件是存放到nginx安装目录下conf文件夹中</span><br><span class="line"> </span><br><span class="line">//全局区</span><br><span class="line"> </span><br><span class="line">//代表着当前有一个工作的子进程，可以自行修改，但是太多了无益因为会争夺cpu资源。一般最多设置成cpu数*核数</span><br><span class="line">worker_processes  1;</span><br><span class="line"> </span><br><span class="line">//一般配置nginx的连接特性</span><br><span class="line">events &#123;</span><br><span class="line">    //这里是指一个子进程最大允许连接1024个连接</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//这里是配置http服务器的主要段</span><br><span class="line">http &#123;</span><br><span class="line">    </span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    //这里配置的是日志的显示格式</span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                 &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                 &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    </span><br><span class="line">    //这里调用指定日志显示的格式</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    //这里是配置虚拟主机段</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;//监听的端口</span><br><span class="line">        server_name  localhost;//监听访问地址</span><br><span class="line"> </span><br><span class="line">        #charset koi8-r;</span><br><span class="line"> </span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"> </span><br><span class="line">        //定位，把特殊的文件或者路径再次定位</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;//定位的目录，默认是ngxin安装目录下的html文件夹中</span><br><span class="line">            index  index.html index.htm;//定位的具体文件</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="nginx日志分析"><a class="markdownIt-Anchor" href="#nginx日志分析"></a> nginx日志分析</h2><p>分析截止目前为止访问量最高的IP排20名。</p><p><code>awk'{print $1}' /usr/local/nginx/logs/access.log |sort | uniq-c I|sort -nr</code></p><p>分析从早上9点至中午12点总的访问量。</p><p><code>sed-n&quot;/2016:09:00/,/2016:12:00/&quot; paccess_20161121.log</code></p><p>分析上一秒的访问请求数。</p><p><code>sed -n&quot;/2016：09：00：00/&quot; paccess_20161121.log</code></p><p>https签名：<a href="https://www.jianshu.com/p/0d455c7a9326" target="_blank" rel="noopener">https://www.jianshu.com/p/0d455c7a9326</a></p><h2 id="qnginx和uwsgi区别"><a class="markdownIt-Anchor" href="#qnginx和uwsgi区别"></a> Q：nginx和uwsgi区别</h2><p>nginx的作用：<br>1.反向代理，可以拦截一些web攻击，保护后端的web服务器<br>2.负载均衡，根据轮询算法，分配请求到多节点web服务器<br>3.缓存静态资源，加快访问速度，释放web服务器的内存占用，专项专用</p><p>uWSGI的适用：<br>1.单节点服务器的简易部署<br>2.轻量级，好部署</p><p>Q：已知一个使用nginx配置的web服务器的域名为www.my.com监听80端口,假设在服务器的/var/www/html这个目录下面有静态文件index.html,那么在配置文件其它部分相同的情况下，分别使用下面两种配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Location /abc &#123;</span><br><span class="line">    root /var/www/html; </span><br><span class="line">    index index.html; </span><br><span class="line">&#125;</span><br><span class="line">location/abc &#123; </span><br><span class="line">    alias /var/ww/html/; </span><br><span class="line">    index index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问http://www.my.com/abc分别会有什么结果？</p><p>A：</p><ul><li>root 的为<code>/var/www/html/abc/index.html</code></li><li>alias的为<code>/var/www/html/index.html</code></li></ul><p>Q：所以使用浏览器访问的话这两种配置会有什么区别？</p><p>A：root的为404，alias的为200.</p><p>注：如果通过两个路径都能访问到的话，那无论哪个配置都是200</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2019年8月23号运维笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#2019年8月23号运维笔记&quot;&gt;&lt;/a&gt; 2019年8月23号运维笔记&lt;/h1&gt;
&lt;h2 id=&quot;docker&quot;&gt;&lt;a class=&quot;markdownIt-An
      
    
    </summary>
    
    
      <category term="编程笔记" scheme="https://nymrli.top/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="运维" scheme="https://nymrli.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>app测试</title>
    <link href="https://nymrli.top/2019/11/26/app%E6%B5%8B%E8%AF%95/"/>
    <id>https://nymrli.top/2019/11/26/app测试/</id>
    <published>2019-11-26T07:49:58.000Z</published>
    <updated>2019-11-26T07:50:10.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="app测试"><a class="markdownIt-Anchor" href="#app测试"></a> app测试</h1><h2 id="命令"><a class="markdownIt-Anchor" href="#命令"></a> 命令</h2><p><code>adb shell monkey 500</code>随机执行500次</p><p><code>adb shell pm list packages -3</code> 查看第三方包</p><p><code>adb shell monkey -p tv.danmaku.bili</code>指定在某个软件中随机压力测试</p><p><code>adb shell monkey -p tv.danmaku.bili -p com.umaman.laiyifen 500</code>会先执行来伊份</p><p>▲.在测试应用程序某些选项的同时，也会进行系统级功能的测试，如截图、调音量等</p><p><code>adb shell monkey [-options] times</code></p><h3 id="参数说明"><a class="markdownIt-Anchor" href="#参数说明"></a> 参数说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-s seed种子值：种子相同时，就能产生一样的伪随机操作序列</span><br><span class="line">-p package指定包名：压力测试执行在某个软件内</span><br><span class="line">--pct-touch percentage：指定触摸的比例</span><br><span class="line">--throttle MILLSEC ：设置每个操作之间的间隔为xx毫秒</span><br><span class="line"></span><br><span class="line">-v [-v [-v]]：输出日志，v越多越详细</span><br><span class="line">--ignore-crashes ：不管程序有无崩溃，都执行完所有操作</span><br></pre></td></tr></table></figure><h2 id="各事件比例event-percentages"><a class="markdownIt-Anchor" href="#各事件比例event-percentages"></a> 各事件比例（Event percentages:）</h2><ul><li>0: 50.0%      -pct-touch  触摸操作</li><li>1: 5.8823533%-pct-motion 移动操作</li><li>2: 1.1764706%-pct-pinchzoom 缩放操作</li><li>3: 8.82353%-pct-traceball 滚动操作</li></ul><h2 id="异常"><a class="markdownIt-Anchor" href="#异常"></a> 异常</h2><p>event injected数量不对</p><p>crash闪退</p><p>ANR没有响应</p><h2 id="出现异常后需要提供给开发的东西"><a class="markdownIt-Anchor" href="#出现异常后需要提供给开发的东西"></a> 出现异常后，需要提供给开发的东西</h2><p>l.被测手机详细信息<br>2.monkey测试日志<br>3.手机运行截图<br>4.monkey运行射手机日志</p><h1 id="测试用例"><a class="markdownIt-Anchor" href="#测试用例"></a> 测试用例</h1><h2 id="测试用例设计三部曲"><a class="markdownIt-Anchor" href="#测试用例设计三部曲"></a> 测试用例设计三部曲</h2><ul><li>要测试什么  -业务</li><li>怎么纠样测试           -测试环境搭建</li><li>如何判新正确与否    -需求</li></ul><h2 id="测试计划"><a class="markdownIt-Anchor" href="#测试计划"></a> 测试计划</h2><p>不同的环境下（兼容性）<br>正常安装</p><p>空间不足-&gt;验证松勤安卓APP在HWX空间不足的条件下的安装行为</p><ul><li>√正常行为：提示空间不够</li><li>x死机</li><li>提示错误代码，emor code201</li></ul><p>安装过程没电-重新安装</p><p>断网-网络Fiddler</p><h2 id="常用功能测试点"><a class="markdownIt-Anchor" href="#常用功能测试点"></a> 常用功能测试点</h2><p>常用的功能测试方法有“界面测试方法”和“黑盒测试技术”，具体可参见测试组配置库中的相应文档。下面列举了一些常用的功能测试点：<br>1.页面链接检查每一个链接是否都有对应的页面，并且页面之间切换正确。<br>2.相关性检查：删除/增加一项会不会对其他项产生影响，如果产生影响，这些影响是否都正确。<br>3.检查按钮的功能是否正确：如新增、修改、取消、删除、保存等功能是否正确。<br>4.字符串长度检查：输入超出需求规定的字符串长度的内容，看系统是否检查字符串长度，会不会有提示窗口。<br>5.字符类型检查：在应该输入指定类型的内容的地方输入其他类型的内容（如在应该输入整型的地方输入其他字符类型），看系统是否检查字符类型，是否会有提示窗口。<br>6.标点符号检查：输入内容包括各种标点符号，特别是空格，各种引号，回车键，看系统是否会有异常错误。<br>7.信息重复：在一些需要命名，且名字应该唯一的地方输入重复的名字或ID，看系统怎么处理，是否报错；重名是否区分大小写，以及在输入内容的前后输入空格，系统是否作出正确处理。<br>8.检查删除功能：在一些可以一次删除多个信息的地方，不选择任何信息，进行删除，看系统如何处理，是否出错；选择一个和多个信息，进行删除，看是否正确处理。<br>9.检查添加和修改是否一致：检查添加和修改信息的要求是否一致，如添加要求必填的项，修改也应该必填；添加规定为整型的项，修改也必须为整型。<br>10.检查修改重名：修改时把不能重名的项改为已存在的内容，看系统是否处理，报重名的错。<br>11.重复提交表单：一条已经成功提交的纪录，退出后再提交，看看系统是否会做什么处理。<br>12.查询功能：在有查询功能的地方输入系统存在和不存在的内容，结果是否正确；如果可以输入多个查询条件，同时添加合理和不合理的条件，看系统处理是否正确。<br>13.输入信息位置：注意在光标停留的地方输入信息时，光标和所输入的信息是否跳到别的地方。<br>14.上传下载文件检查：上传下载文件的功能是否实现，上传文件是否能打开。对上传文件的格式有何规定，系统是否有提示信息。<br>15.必填项检查：应该填写的项没有填写时系统是否都做了处理，对必填项是否有提示信息，如在必填项放加*。<br>16.快捷键检查：是否支持常用快捷键，如Ctl+C Ctrl+V Backspace等，对一些不允许输入信息的字段，如选人，选日期是否也有快捷键。<br>17.回车键检查：在输入结束后直接按回车键，看系统处理如何，会否报错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;app测试&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#app测试&quot;&gt;&lt;/a&gt; app测试&lt;/h1&gt;
&lt;h2 id=&quot;命令&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#命令&quot;&gt;&lt;/a&gt; 命令&lt;/h2&gt;
&lt;
      
    
    </summary>
    
    
      <category term="测试" scheme="https://nymrli.top/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2019-9月7号C++编程笔记</title>
    <link href="https://nymrli.top/2019/11/26/2019-9%E6%9C%887%E5%8F%B7C-%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <id>https://nymrli.top/2019/11/26/2019-9月7号C-编程笔记/</id>
    <published>2019-11-26T07:47:55.000Z</published>
    <updated>2019-11-26T07:48:23.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019-9月7号c编程笔记"><a class="markdownIt-Anchor" href="#2019-9月7号c编程笔记"></a> 2019-9月7号C++编程笔记</h1><h2 id="auto"><a class="markdownIt-Anchor" href="#auto"></a> auto</h2><p>定义变量时放在变量前，无需知道具体变量类型，系统可自行<strong>推断类型</strong>，减少编程工作，特别是在<strong>模板使用时，使用更方便</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> b=<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">auto</span> s=<span class="string">"abdc"</span>;</span><br><span class="line"><span class="keyword">auto</span> c;<span class="comment">//这样使用时错误的，系统无法自动推断出变量类型</span></span><br><span class="line"><span class="comment">//下面为迭代指针使用，很方便</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">auto</span> it=vec.begin();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">模板使用案例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIterator&gt;</span><br><span class="line">    <span class="function">TreeNode *<span class="title">creatTree</span><span class="params">(InputIterator in_beg,InputIterator in_end...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       .....</span><br><span class="line">        <span class="keyword">auto</span> inRootPos=find(in_beg,in_end,val);</span><br><span class="line">       ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="stdnext"><a class="markdownIt-Anchor" href="#stdnext"></a> <strong>std::next</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Defined in header &lt;iterator&gt;</span></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">ForwardIt</span> <span class="title">next</span>( <span class="title">ForwardIt</span> <span class="title">it</span>, <span class="title">typename</span> <span class="title">std</span>:</span>:iterator_traits&lt;ForwardIt&gt;::difference_type n = <span class="number">1</span> );</span><br></pre></td></tr></table></figure><ul><li><h3 id="parameters"><a class="markdownIt-Anchor" href="#parameters"></a> Parameters:</h3><ul><li>it  – 迭代指针</li><li>n  – 向前进的元素个数，缺省默认为1</li></ul></li><li><p><strong>Return value</strong></p><p>The nth successor of iterator it.（返回it的第n个后继迭代指针）</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vals.size(); ++i) &#123;</span><br><span class="line"><span class="comment">// *std::next(vals.cbegin(), i)遍历set的所有值，每次取出一个val</span></span><br><span class="line"><span class="comment">// count为计算values中包含val的个数</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="built_in">std</span>::count(values.cbegin(), values.cend(), *<span class="built_in">std</span>::next(vals.cbegin(), i));</span><br></pre></td></tr></table></figure><h2 id="stdprev"><a class="markdownIt-Anchor" href="#stdprev"></a> <strong>std::prev</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用方法与next相似，不同的是prev返回的是it的第n个前驱迭代指针,即返回指针是begin()和rbegin()区别</span></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">BidirIt</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">BidirIt</span> <span class="title">prev</span>( <span class="title">BidirIt</span> <span class="title">it</span>, <span class="title">typename</span> <span class="title">std</span>:</span>:iterator_traits&lt;BidirIt&gt;::difference_type n = <span class="number">1</span> );</span><br></pre></td></tr></table></figure><h2 id="stdadvance"><a class="markdownIt-Anchor" href="#stdadvance"></a> std::advance</h2><blockquote><p><strong>方法与prev和next相似，只是无返回指针</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">ForwardIt</span> <span class="title">next</span>(<span class="title">ForwardIt</span> <span class="title">it</span>, <span class="title">typename</span> <span class="title">std</span>:</span>:iterator_traits&lt;ForwardIt&gt;::difference_type n = <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">std</span>::advance(it, n);</span><br><span class="line">    <span class="keyword">return</span> it;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const_cast"><a class="markdownIt-Anchor" href="#const_cast"></a> const_cast</h2><ul><li><p><strong>去掉const属性</strong>：<code>const_cast&lt;int*&gt; (&amp;num)</code>，常用，因为不能把一个const变量直接赋给一个非const变量，必须要转换。</p></li><li><p><strong>加上const属性</strong>：<code>const int* k = const_cast&lt;const int*&gt;(j)</code>，一般很少用，因为可以把一个非const变量直接赋给一个const变量，比如：const int* k = j;</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binary_tree* tmp = <span class="keyword">const_cast</span>&lt;binary_tree*&gt;(node);</span><br></pre></td></tr></table></figure><h2 id="c11对vector成员函数的扩展"><a class="markdownIt-Anchor" href="#c11对vector成员函数的扩展"></a> C++11对vector成员函数的扩展</h2><h3 id="emplace_back"><a class="markdownIt-Anchor" href="#emplace_back"></a> emplace_back</h3><h3 id="stdvectorcbegin和stdvectorcend"><a class="markdownIt-Anchor" href="#stdvectorcbegin和stdvectorcend"></a> <strong>std::vector::cbegin和std::vector::cend</strong></h3><p>这两个方法是与std::vector::begin和std::vector::end相对应的，从字面就能看出来，多了一个’c’，顾名思义就是const的意思。同理，<strong>std::vector::crbegin和std::vector::crend</strong></p><h3 id="stdvectoremplace"><a class="markdownIt-Anchor" href="#stdvectoremplace"></a> <strong>std::vector::emplace</strong></h3><p>之前已经对emplace_back进行了讨论，其实还有一个方法叫emplace。<br>我想说的就是，emplace之于emplace_back就像insert之于push_back。如下使用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;code <span class="class"><span class="keyword">class</span>="<span class="title">hljs</span> <span class="title">cpp</span>"&gt;</span></span><br><span class="line"><span class="class">#<span class="title">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="class">#<span class="title">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">main</span> ()</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">auto</span> it = myvector.emplace ( myvector.begin()+<span class="number">1</span>, <span class="number">100</span> );</span><br><span class="line">  myvector.emplace ( it, <span class="number">200</span> );</span><br><span class="line">  myvector.emplace ( myvector.end(), <span class="number">300</span> );</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myvector contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x: myvector)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">myvector contains: 10 200 100 20 30 300&lt;/int&gt;&lt;/vector&gt;&lt;/iostream&gt;&lt;/code&gt;</span><br></pre></td></tr></table></figure><h3 id="stdvectordata"><a class="markdownIt-Anchor" href="#stdvectordata"></a> <strong>std::vector::data</strong></h3><p>Returns a direct pointer to the memory array used internally by the vector to store its owned elements.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;code <span class="class"><span class="keyword">class</span>="<span class="title">hljs</span> <span class="title">cpp</span>"&gt;#<span class="title">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="class">#<span class="title">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">main</span> ()</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector (<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">int</span>* p = myvector.data();</span><br><span class="line">  *p = <span class="number">10</span>;</span><br><span class="line">  ++p;</span><br><span class="line">  *p = <span class="number">20</span>;</span><br><span class="line">  p[<span class="number">2</span>] = <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myvector contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> i=<span class="number">0</span>; i&lt;myvector.size(); ++i)</span><br><span class="line">     <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; myvector[i] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">      =<span class="string">""</span> output:=<span class="string">""</span> myvector=<span class="string">""</span> contains:=<span class="string">""</span> <span class="number">10</span>=<span class="string">""</span> <span class="number">20</span>=<span class="string">""</span> <span class="number">0</span>=<span class="string">""</span> <span class="number">100</span>=<span class="string">""</span> <span class="number">0</span>&lt;/<span class="keyword">int</span>&gt;&lt;/<span class="built_in">vector</span>&gt;&lt;/iostream&gt;&lt;/code&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2019-9月7号c编程笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#2019-9月7号c编程笔记&quot;&gt;&lt;/a&gt; 2019-9月7号C++编程笔记&lt;/h1&gt;
&lt;h2 id=&quot;auto&quot;&gt;&lt;a class=&quot;markdownIt-An
      
    
    </summary>
    
    
      <category term="编程笔记" scheme="https://nymrli.top/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MinMax-极小极大算法——2048</title>
    <link href="https://nymrli.top/2019/11/26/MinMax-%E6%9E%81%E5%B0%8F%E6%9E%81%E5%A4%A7%E7%AE%97%E6%B3%95%E2%80%94%E2%80%942048/"/>
    <id>https://nymrli.top/2019/11/26/MinMax-极小极大算法——2048/</id>
    <published>2019-11-26T07:46:41.000Z</published>
    <updated>2019-11-26T07:47:08.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="minmax-极小极大算法2048"><a class="markdownIt-Anchor" href="#minmax-极小极大算法2048"></a> MinMax-极小极大算法——2048</h1><h2 id="算法介绍"><a class="markdownIt-Anchor" href="#算法介绍"></a> 算法介绍</h2><blockquote><p>大家在编程的时候应该或多或少都接触到过这样的写法:<code>min(max(xxx,yyy))</code>，MinMax算法的表达形式就是如此，不过其中的Min和Max都是具有对应含义的。</p></blockquote><p>一般解决<strong>博弈类问题</strong>的自然想法是将格局组织成一棵），树的每一个节点表示一种格局，而父子关系表示由父格局经过一步可以到达子格局。Minimax也不例外，它通过对以当前格局为根的格局树搜索来确定下一步的选择。而一切格局树搜索算法的核心都是<strong>对每个格局价值的评价</strong>。Minimax算法基于以下朴素思想确定格局价值：</p><ul><li>Minimax是一种<strong>悲观算法</strong>，即假设对手每一步都会将我方引入从当前看理论上价值最小的格局方向，即<strong>对手具有完美决策能力</strong>。因此我方的策略应该是选择那些对方所能达到的让我方最差情况中最好的，也就是让<u>对方在完美决策</u>下所<u>对我造成的损失最小</u>。</li><li>Minimax<strong>不</strong>找<strong>理论最优解</strong>，因为理论最优解往往依赖于对手是否足够愚蠢，Minimax中我方完全掌握主动，如果对方每一步决策都是完美的，则我方可以达到预计的最小损失格局，如果对方没有走出完美决策，则我方可能达到比预计的最悲观情况更好的结局。总之我方就是要在<u>最坏情况中选择最好的</u>。</li></ul><p>举例For Example：</p><p>现在考虑这样一个游戏：有三个盘子A、B和C，每个盘子分别放有三张纸币。A放的是1、20、50；B放的是5、10、100；C放的是1、5、20。单位均为“元”。有甲、乙两人，两人均对三个盘子和上面放置的纸币有可以任意查看。游戏分三步：</p><ol><li>甲从三个盘子中选取一个。</li><li>乙从甲选取的盘子中拿出两张纸币交给甲。</li><li>甲从乙所给的两张纸币中选取一张，拿走。</li></ol><p>其中甲的目标是最后拿到的纸币面值尽量大，乙的目标是让甲最后拿到的纸币面值尽量小。</p><p>分析过程可看</p><h2 id="2048ai介绍"><a class="markdownIt-Anchor" href="#2048ai介绍"></a> 2048AI介绍</h2><p>游戏规则:</p><p>2048游戏共有16个格子，初始时初始数字由2或者4构成，之后每次移动生成2的概率为0.9，生成4的概率为0.1，见<a href="#2048%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E6%96%B0%E6%95%B0%E5%AD%97%E6%BA%90%E7%A0%81">2048随机生成新数字源码</a>。</p><blockquote><p>1、手指向一个方向滑动，所有格子会向那个方向运动。<br>2、相同数字的两个格子，相撞时数字会相加。<br>3、每次滑动时，空白处会随机刷新出一个数字的格子。<br>4、当界面不可运动时（当界面全部被数字填满时），游戏结束；当界面中最大数字是2048时，游戏胜利。</p></blockquote><h3 id="建模"><a class="markdownIt-Anchor" href="#建模"></a> <em><strong>建模:</strong></em></h3><p>之前的对弈类游戏, 博弈双方的地位都是对等的. 但这边只有游戏者一人, 对手在哪里?<br>　　让人脑洞大开的是, 2048游戏AI的设计者, 创造性把<strong>棋局环境本身做为了博弈的另一方</strong>.<br>　　当然双方追求的胜利目标不一样:<br>　　• 我方：<strong>游戏者(AI)， 追求2048及2048以上的方块出现</strong><br>　　• 对方：<strong>计算机(棋局环境)， 填满棋局格子, 使得4个方向皆不能移动</strong><br>• 胜利条件：出现某个方块的数值为“2048”。<br>•失败条件：格子全满，且无法向四个方向中任何一个方向移动（均不能触发合并）。<br>　　▲.游戏模型就被建模成了信息完备的双人对弈问题. 而传统博弈树和技巧就自然有了用武之地.</p><h3 id="评估函数"><a class="markdownIt-Anchor" href="#评估函数"></a> <em><strong>评估函数:</strong></em></h3><blockquote><p><strong>评估函数</strong>是算法的核心，如何评价当前格局的价值是重中之重。依据游戏经验, 作者选用了如下评估因素:<br>　　(1) <strong>单调性</strong>: 指方块从左到右、从上到下均遵从递增或递减.<br>　　(2) <strong>平滑性</strong>: 指每个方块与其直接相邻方块数值的差，其中差越小越平滑.<br>　　(3) <strong>空格数</strong>: 局面的空格总数.<br>　　(4) <strong>最大数</strong>: 当前局面的最大数字, 该特征为积极因子.</p></blockquote><p>采用线性函数, 并添加权重系数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// static evaluation function</span></span><br><span class="line">AI.prototype.eval = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> emptyCells = <span class="keyword">this</span>.grid.availableCells().length;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> smoothWeight = <span class="number">0.1</span>,</span><br><span class="line">      <span class="comment">//monoWeight   = 0.0,</span></span><br><span class="line">      <span class="comment">//islandWeight = 0.0,</span></span><br><span class="line">      mono2Weight  = <span class="number">1.0</span>,</span><br><span class="line">      emptyWeight  = <span class="number">2.7</span>,</span><br><span class="line">      maxWeight    = <span class="number">1.0</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.grid.smoothness() * smoothWeight</span><br><span class="line">       <span class="comment">//+ this.grid.monotonicity() * monoWeight</span></span><br><span class="line">       <span class="comment">//- this.grid.islands() * islandWeight</span></span><br><span class="line">       + <span class="keyword">this</span>.grid.monotonicity2() * mono2Weight</span><br><span class="line">       + <span class="built_in">Math</span>.log(emptyCells) * emptyWeight</span><br><span class="line">       + <span class="keyword">this</span>.grid.maxValue() * maxWeight;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>分析：<strong>前3项能衡量一个局面的好坏</strong>, 而<strong>最大数该项, 则让游戏AI多了一点积极和&quot;冒险&quot;</strong></p><h3 id="执行过程"><a class="markdownIt-Anchor" href="#执行过程"></a> 执行过程</h3><p>游戏AI的决策过程, 是标准的maxmin search和alpha+beta pruning的实现. 所有的方向(上下左右)都会去尝试.</p><h4 id="alphabeta-pruning-worst-consideration-pruning"><a class="markdownIt-Anchor" href="#alphabeta-pruning-worst-consideration-pruning"></a> Alpha+beta pruning + worst consideration pruning</h4><p>然而在游戏本身做决策时, 在Min节点还采用了另一种剪枝，即只考虑对方走出让格局最差的那一步（而实际2048中计算机的选择是随机的），做为搜索分支的剪枝条件，即不是每个空格都去尝试填{2, 4}。</p><p>这种假定<strong>环境生成了最坏的局面</strong>的剪枝做法，可以很好地提高搜索效率，并且获得更强的生存能力。如果全部搜索的话，对方所有可能的选择就为变成了“空格数×2”种，使得搜索效率很低，严重限制搜索深度。而这种选择性地丢掉了很多搜索分支，能够大大地提高搜索效率。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// try a 2 and 4 in each cell and measure how annoying it is</span></span><br><span class="line"><span class="comment">// with metrics from eval</span></span><br><span class="line"><span class="keyword">var</span> candidates = [];</span><br><span class="line"><span class="keyword">var</span> cells = <span class="keyword">this</span>.grid.availableCells();</span><br><span class="line"><span class="keyword">var</span> scores = &#123; <span class="number">2</span>: [], <span class="number">4</span>: [] &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">in</span> scores) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> cells) &#123;</span><br><span class="line">    scores[value].push(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">var</span> cell = cells[i];</span><br><span class="line">    <span class="keyword">var</span> tile = <span class="keyword">new</span> Tile(cell, <span class="built_in">parseInt</span>(value, <span class="number">10</span>));</span><br><span class="line">    <span class="keyword">this</span>.grid.insertTile(tile);</span><br><span class="line">    scores[value][i] = -<span class="keyword">this</span>.grid.smoothness() + <span class="keyword">this</span>.grid.islands();</span><br><span class="line">    <span class="keyword">this</span>.grid.removeTile(cell);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// now just pick out the most annoying moves</span></span><br><span class="line"><span class="keyword">var</span> maxScore = <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, scores[<span class="number">2</span>]), <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, scores[<span class="number">4</span>]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">in</span> scores) &#123; <span class="comment">// 2 and 4</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;scores[value].length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (scores[value][i] == maxScore) &#123;</span><br><span class="line">      candidates.push( &#123; <span class="attr">position</span>: cells[i], <span class="attr">value</span>: <span class="built_in">parseInt</span>(value, <span class="number">10</span>) &#125; );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：对于<strong>选择性忽略搜索节点</strong>, 其实很有争议. 在某些情况下, 会失去获取最优解的机会. 不过砍掉了很多分支后, 其搜索深度大大加强. <strong>生存能力更强大</strong>.</p><h3 id="限时的迭代深搜"><a class="markdownIt-Anchor" href="#限时的迭代深搜"></a> 限时的迭代深搜</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// performs iterative deepening over the alpha-beta search</span></span><br><span class="line">AI.prototype.iterativeDeep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> start = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">  <span class="keyword">var</span> depth = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> best;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> newBest = <span class="keyword">this</span>.search(depth, <span class="number">-10000</span>, <span class="number">10000</span>, <span class="number">0</span> ,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (newBest.move == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      best = newBest;</span><br><span class="line">    &#125;</span><br><span class="line">    depth++;</span><br><span class="line">  &#125; <span class="keyword">while</span> ( (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() - start &lt; minSearchTime);</span><br><span class="line">  <span class="keyword">return</span> best</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该代码没有限制搜索的深度，但是限制了每次“思考”的时间：<strong>超时判断在每个深度探索结束后进行</strong>, 这<strong>未必会精确, 甚至误差很大</strong>. 我还是<strong>推崇前文谈到过的实现方式</strong>.但不管怎样, 作者基本达到了其每100ms决策一步的要求.</p><h3 id="python实现核心代码"><a class="markdownIt-Anchor" href="#python实现核心代码"></a> Python实现核心代码:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h2><h3 id="极大极小算法有些不明白"><a class="markdownIt-Anchor" href="#极大极小算法有些不明白"></a> 极大极小算法有些不明白 ?</h3><p>极小极大算法主要应用于什么样的游戏：</p><ul><li>零和游戏（Zero-sum Game）</li><li>完全信息（Perfect Information）——Max代表你自己，Min代表你的对手</li></ul><h3 id="对弈类游戏的人工智能52048游戏ai的解读"><a class="markdownIt-Anchor" href="#对弈类游戏的人工智能52048游戏ai的解读"></a> <a href="https://www.cnblogs.com/mumuxinfei/p/4415352.html" target="_blank" rel="noopener">对弈类游戏的人工智能(5)–2048游戏AI的解读</a></h3><ul><li><strong>把环境拟人化的对弈模型, 也是面对反馈类场景的一种很好的评估决策思路.</strong></li></ul><h3 id="2048-ai程序算法分析"><a class="markdownIt-Anchor" href="#2048-ai程序算法分析"></a> <a href="http://blog.codinglabs.org/articles/2048-ai-analysis.html" target="_blank" rel="noopener">2048-AI程序算法分析</a>——Java实现</h3><h3 id="2048高分技巧"><a class="markdownIt-Anchor" href="#2048高分技巧"></a> <strong>2048高分技巧</strong></h3><p>1、最大数尽可能放在角落。<br>2、数字按顺序紧邻排列。<br>3、首先满足最大数和次大数在的那一列/行是满的。<br>4、时刻注意活动较大数（32以上）旁边要有相近的数。<br>5、以大数所在的一行为主要移动方向<br>6、不要急于“清理桌面”。</p><h3 id="2048随机生成新数字源码"><a class="markdownIt-Anchor" href="#2048随机生成新数字源码"></a> 2048随机生成新数字源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Adds a tile in a random position</span></span><br><span class="line">Grid.prototype.addRandomTile = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.cellsAvailable()) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="built_in">Math</span>.random() &lt; <span class="number">0.9</span> ? <span class="number">2</span> : <span class="number">4</span>;</span><br><span class="line">    <span class="comment">//var value = Math.random() &lt; 0.9 ? 256 : 512;</span></span><br><span class="line">    <span class="keyword">var</span> tile = <span class="keyword">new</span> Tile(<span class="keyword">this</span>.randomAvailableCell(), value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.insertTile(tile);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;minmax-极小极大算法2048&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#minmax-极小极大算法2048&quot;&gt;&lt;/a&gt; MinMax-极小极大算法——2048&lt;/h1&gt;
&lt;h2 id=&quot;算法介绍&quot;&gt;&lt;a class=&quot;mark
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://nymrli.top/tags/Algorithm/"/>
    
      <category term="RL" scheme="https://nymrli.top/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>MinMax和Alpha-beta剪枝分析[转]</title>
    <link href="https://nymrli.top/2019/11/26/MinMax%E5%92%8CAlpha-beta%E5%89%AA%E6%9E%9D%E5%88%86%E6%9E%90-%E8%BD%AC/"/>
    <id>https://nymrli.top/2019/11/26/MinMax和Alpha-beta剪枝分析-转/</id>
    <published>2019-11-26T07:45:45.000Z</published>
    <updated>2019-11-26T07:46:23.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="minmax和alpha-beta剪枝分析转"><a class="markdownIt-Anchor" href="#minmax和alpha-beta剪枝分析转"></a> MinMax和Alpha-beta剪枝分析<a href="http://blog.codinglabs.org/articles/2048-ai-analysis.html" target="_blank" rel="noopener">[转]</a></h1><ul><li>一般解决<strong>博弈类问题</strong>的自然想法是将格局组织成一棵），树的每一个节点表示一种格局，而父子关系表示由父格局经过一步可以到达子格局。Minimax也不例外，它通过对以当前格局为根的格局树搜索来确定下一步的选择。而一切格局树搜索算法的核心都是<strong>对每个格局价值的评价</strong>。Minimax算法基于以下朴素思想确定格局价值：<ul><li>Minimax是一种<strong>悲观算法</strong>，即假设对手每一步都会将我方引入从当前看理论上价值最小的格局方向，即<strong>对手具有完美决策能力</strong>。因此我方的策略应该是选择那些对方所能达到的让我方最差情况中最好的，也就是让<u>对方在完美决策</u>下所<u>对我造成的损失最小</u>。</li><li>Minimax<strong>不</strong>找<strong>理论最优解</strong>，因为理论最优解往往依赖于对手是否足够愚蠢，Minimax中我方完全掌握主动，如果对方每一步决策都是完美的，则我方可以达到预计的最小损失格局，如果对方没有走出完美决策，则我方可能达到比预计的最悲观情况更好的结局。总之我方就是要在<u>最坏情况中选择最好的</u>。</li></ul></li></ul><h2 id="实际举例"><a class="markdownIt-Anchor" href="#实际举例"></a> 实际举例:</h2><p>现在考虑这样一个游戏：有三个盘子A、B和C，每个盘子分别放有三张纸币。A放的是1、20、50；B放的是5、10、100；C放的是1、5、20。单位均为“元”。有甲、乙两人，两人均对三个盘子和上面放置的纸币有可以任意查看。游戏分三步：</p><ol><li>甲从三个盘子中选取一个。</li><li>乙从甲选取的盘子中拿出两张纸币交给甲。</li><li>甲从乙所给的两张纸币中选取一张，拿走。</li></ol><p>其中甲的目标是最后拿到的纸币面值尽量大，乙的目标是让甲最后拿到的纸币面值尽量小。</p><p>下面用Minimax算法解决这个问题。</p><h2 id="解题"><a class="markdownIt-Anchor" href="#解题"></a> 解题：</h2><h3 id="建树"><a class="markdownIt-Anchor" href="#建树"></a> 建树</h3><p>下图是上述示例问题的格局树：</p><p><img src="http://blog.codinglabs.org/uploads/pictures/2048-ai-analysis/01.png" alt="img"></p><p>注意，由于示例问题格局数非常少，我们可以给出完整的格局树。这种情况下我可以找到Minimax算法的全局最优解。而<u>真实情况中，格局树非常庞大，即使是计算机也不可能给出完整的树</u>，因此我们往往<u>只搜索一定深度</u>，这时只能找到<u>局部最优解</u>。</p><p>我们从甲的角度考虑。其中正方形节点表示轮到我方（甲），而三角形表示轮到对方（乙）。经过三轮对弈后（我方-对方-我方），将进入终局。黄色叶结点表示所有可能的结局。从甲方看，由于最终的收益可以通过纸币的面值评价，我们自然可以用结局中甲方拿到的纸币面值表示终格局的价值。</p><p>下面考虑倒数第二层节点，在这些节点上，轮到我方选择，所以我们应该引入可选择的最大价值格局，因此每个节点的价值为其子节点的最大值：</p><p><img src="http://blog.codinglabs.org/uploads/pictures/2048-ai-analysis/02.png" alt="img"></p><p>这些轮到我方的节点叫做max节点，max节点的值是其子节点最大值。</p><p>倒数第三层轮到对方选择，假设对方会尽力将局势引入让我方价值最小的格局，因此这些节点的价值取决于子节点的最小值。这些轮到对方的节点叫做min节点。</p><p>最后，根节点是max节点，因此价值取决于叶子节点的最大值。最终完整赋值的格局树如下：</p><p><img src="http://blog.codinglabs.org/uploads/pictures/2048-ai-analysis/03.png" alt="img"></p><p>总结一下Minimax算法的步骤：</p><ol><li>首先确定最大搜索深度D，D可能达到终局，也可能是一个中间格局。</li><li>在最大深度为D的格局树叶子节点上，使用预定义的价值评价函数对叶子节点价值进行评价。</li><li>自底向上为非叶子节点赋值。其中max节点取子节点最大值，min节点取子节点最小值。</li><li>每次轮到我方时（此时必处在格局树的某个max节点），选择价值等于此max节点价值的那个子节点路径。</li></ol><p>在上面的例子中，根节点的价值为20，表示如果对方每一步都完美决策，则我方按照上述算法可最终拿到20元，这是我方在Minimax算法下最好的决策。格局转换路径如下图红色路径所示：</p><p><img src="http://blog.codinglabs.org/uploads/pictures/2048-ai-analysis/04.png" alt="img"></p><p>对于真实问题中的Minimax，再次强调几点：</p><ul><li>真实问题一般无法构造出完整的格局树，所以需要确定一个最大深度D，每次最多从当前格局向下计算D层。</li><li>因为上述原因，Minimax一般是寻找一个局部最优解而不是全局最优解，搜索深度越大越可能找到更好的解，但计算耗时会呈指数级膨胀。</li><li>也是因为无法一次构造出完整的格局树，所以真实问题中Minimax一般是边对弈边计算局部格局树，而不是只计算一次，但已计算的中间结果可以缓存。</li></ul><h3 id="alpha-beta剪枝"><a class="markdownIt-Anchor" href="#alpha-beta剪枝"></a> Alpha-beta剪枝</h3><p>简单的Minimax算法有一个很大的问题就是计算复杂性。由于所需搜索的节点数随最大深度呈指数膨胀，而算法的效果往往和深度相关，因此这极大限制了算法的效果。</p><p>Alpha-beta剪枝是对Minimax的补充和改进。采用Alpha-beta剪枝后，我们可不必构造和搜索最大深度D内的所有节点，在构造过程中，如果发现当前格局再往下不能找到更好的解，我们就停止在这个格局及以下的搜索，也就是剪枝。</p><p>Alpha-beta基于这样一种朴素的思想：时时刻刻记得当前已经知道的最好选择，如果从当前格局搜索下去，不可能找到比已知最优解更好的解，则停止这个格局分支的搜索（剪枝），回溯到父节点继续搜索。</p><p>Alpha-beta算法可以看成变种的Minimax，基本方法是从根节点开始采用深度优先的方式构造格局树，在构造每个节点时，都会读取此节点的alpha和beta两个值，其中alpha表示搜索到当前节点时已知的最好选择的下界，而beta表示从这个节点往下搜索最坏结局的上界。由于我们假设对手会将局势引入最坏结局之一，因此当beta小于alpha时，表示从此处开始不论最终结局是哪一个，其上限价值也要低于已知的最优解，也就是说已经不可能此处向下找到更好的解，所以就会剪枝。</p><p>下面同样以上述示例介绍Alpha-beta剪枝算法的工作原理。我们从根节点开始，详述使用Alpha-beta的每一个步骤：</p><ol><li><p>根节点的alpha和beta分别被初始化为−∞−∞，和+∞+∞。</p></li><li><p>深度优先搜索第一个孩子，不是叶子节点，所以alpha和beta继承自父节点，分别为−∞−∞，和+∞+∞</p></li><li><p>搜索第三层的第一个孩子，同上。</p></li><li><p>搜索第四层，到达叶子节点，采用评价函数得到此节点的评价值为1。</p><p><img src="http://blog.codinglabs.org/uploads/pictures/2048-ai-analysis/05.png" alt="img"></p></li><li><p>此叶节点的父节点为max节点，因此更新其alpha值为1，表示此节点取值的下界为1。</p></li><li><p>再看另外一个子节点，值为20，大于当前alpha值，因此将alpha值更新为20。</p></li><li><p>此时第三层最左节点所有子树搜索完毕，作为max节点，更新其真实值为当前alpha值：20。</p></li><li><p>由于其父节点（第二层最左节点）为min节点，因此更新其父节点beta值为20，表示这个节点取值最多为20。</p><p><img src="http://blog.codinglabs.org/uploads/pictures/2048-ai-analysis/06.png" alt="img"></p></li><li><p>搜索第二层最左节点的第二个孩子及其子树，按上述逻辑，得到值为50（注意第二层最左节点的beta值要传递给孩子）。由于50大于20，不更新min节点的beta值。</p><p><img src="http://blog.codinglabs.org/uploads/pictures/2048-ai-analysis/07.png" alt="img"></p></li><li><p>搜索第二层最左节点的第三个孩子。当看完第一个叶子节点后，发现第三个孩子的alpha=beta，此时表示这个节点下不会再有更好解，于是剪枝。</p><p><img src="http://blog.codinglabs.org/uploads/pictures/2048-ai-analysis/08.png" alt="img"></p></li><li><p>继续搜索B分支，当搜索完B分支的第一个孩子后，发现此时B分支的alpha为20，beta为10。这表示B分支节点的最大取值不会超过10，而我们已经在A分支取到20，此时满足alpha大于等于beta的剪枝条件，因此将B剪枝。并将B分支的节点值设为10，注意，这个10不一定是这个节点的真实值，而只是上线，B节点的真实值可能是5，可能是1，可能是任何小于10的值。但是已经无所谓了，反正我们知道这个分支不会好过A分支，因此可以放弃了。</p><p><img src="http://blog.codinglabs.org/uploads/pictures/2048-ai-analysis/09.png" alt="img"></p></li><li><p>在C分支搜索时遇到了与B分支相同的情况。因此讲C分支剪枝。</p><p><img src="http://blog.codinglabs.org/uploads/pictures/2048-ai-analysis/10.png" alt="img"></p></li></ol><p>此时搜索全部完毕，而我们也得到了这一步的策略：应该走A分支。</p><p>可以看到相比普通Minimax要搜索18个叶子节点相比，这里只搜索了9个。采用Alpha-beta剪枝，可以在相同时间内加大Minimax的搜索深度，因此可以获得更好的效果。并且Alpha-beta的解和普通Minimax的解是一致的。</p><p>文章摘自<a href="http://blog.codinglabs.org/articles/2048-ai-analysis.html" target="_blank" rel="noopener">2048-AI程序算法分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;minmax和alpha-beta剪枝分析转&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#minmax和alpha-beta剪枝分析转&quot;&gt;&lt;/a&gt; MinMax和Alpha-beta剪枝分析&lt;a href=&quot;http://blog.c
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://nymrli.top/tags/Algorithm/"/>
    
      <category term="RL" scheme="https://nymrli.top/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>Python网络编程Websocket</title>
    <link href="https://nymrli.top/2019/11/24/Python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BWebsocket/"/>
    <id>https://nymrli.top/2019/11/24/Python网络编程Websocket/</id>
    <published>2019-11-24T02:17:11.000Z</published>
    <updated>2019-11-24T02:20:49.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络知识websocket"><a class="markdownIt-Anchor" href="#网络知识websocket"></a> 网络知识——Websocket</h1><ul><li><p>TCP ：面向连接—&gt; 打电话(相互回复,一来一回)，客户端向服务器端 拨号 , 三次握手 ,</p></li><li><p>UDP : 面向无连接 --&gt; 寄快递(寄出去就不管了) e.g.直播</p></li></ul><p><strong>UDP四层结构</strong></p><ul><li>网络访问层(链路层):  物理连接设备(网线)、MAC地址（物理地址）</li><li>互联网层： IP地址（定位设备）</li><li>传输层： port (端口号) : 表示通信进程,将数据交给哪个应用处理</li><li>应用层： 自己定义的协议（处理字符串消息的方法）</li></ul><p>套接字(socket) ： 特殊的设备文件 ， 写网络应用程序的接口，写入后就是发送，接收就是读取。 类似于 esp8266吧…</p><p><strong>基本的socket操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">参数说明:</span></span><br><span class="line"><span class="string">AF_INET IPv4</span></span><br><span class="line"><span class="string">----</span></span><br><span class="line"><span class="string">STREAM TCP</span></span><br><span class="line"><span class="string">SOCK_DGRAM UDP,无listen、accpet</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">server_addr = (<span class="string">'127.0.0.1'</span>,<span class="number">8888</span>)    <span class="comment"># 本地回环地址 , 端口</span></span><br><span class="line">s.bind(server_addr)                                    <span class="comment"># 绑定、传入信息</span></span><br><span class="line">data, cilent_addr = s.recvfrom(<span class="number">1024</span>)        <span class="comment"># BUF_SIZE指定接收数据长度 , (数据内容,客户端地址)</span></span><br><span class="line">s.sendto(data,cilent_addr)                        <span class="comment"># 给客户端发送数据</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buf = <span class="number">1024</span></span><br><span class="line">ADDR = (<span class="string">"127.0.0.1"</span>, <span class="number">8999</span>)</span><br><span class="line">tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">tcpSock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">tcpSock.bind(ADDR)</span><br><span class="line">tcpSock.listen(<span class="number">5</span>)</span><br><span class="line">conn, addr = tcpSock.accept()</span><br></pre></td></tr></table></figure><h3 id="什么是webscoket"><a class="markdownIt-Anchor" href="#什么是webscoket"></a> 什么是webscoket？</h3><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行<strong>全双工通讯</strong>的协议。HTML5 WebSocket 设计出来的目的就是要<strong>取代轮询</strong>和 Comet 技术，使客户端浏览器具备像 C/S 架构下桌面系统的实时通讯能力。</p><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端<strong>主动</strong>向客户端推送数据。在WebSocket API 中，浏览器和服务器只需要完成<strong>一次握手</strong>，两者之间就直接可以创建持久性的连接，并进行双向数据传输，其本质是保持TCP连接。</p><ul><li>客户端 : 发送数据、接收返回数据端</li><li>服务端: 处理数据端</li></ul><p><strong>服务端</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,base64,hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_headers</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="string">'''提取请求头,将请求头转换为字典'''</span></span><br><span class="line">    header_dict = &#123;&#125;</span><br><span class="line">    data = str(data,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">    header,body = data.split(<span class="string">"\r\n\r\n"</span>,<span class="number">1</span>)</span><br><span class="line">    header_list = header.split(<span class="string">"\r\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(header_list)):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> len(header_list[<span class="number">0</span>].split(<span class="string">" "</span>)) == <span class="number">3</span>:</span><br><span class="line">                header_dict[<span class="string">'method'</span>],header_dict[<span class="string">'url'</span>],header_dict[<span class="string">'protocol'</span>] = header_list[<span class="number">0</span>].split(<span class="string">" "</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k,v=header_list[i].split(<span class="string">":"</span>,<span class="number">1</span>)</span><br><span class="line">            header_dict[k]=v.strip()</span><br><span class="line">    <span class="keyword">return</span> header_dict</span><br><span class="line"></span><br><span class="line">sock = socket.socket()</span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 指定IP和侦听端口Port</span></span><br><span class="line">sock.bind((<span class="string">"127.0.0.1"</span>,<span class="number">8888</span>))</span><br><span class="line">sock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#等待用户连接</span></span><br><span class="line">conn,addr = sock.accept()</span><br><span class="line">print(<span class="string">"conn from "</span>,conn,addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取握手消息，magic string ,sha1加密</span></span><br><span class="line"><span class="comment">#发送给客户端</span></span><br><span class="line"><span class="comment">#握手消息</span></span><br><span class="line">data = conn.recv(<span class="number">8096</span>)</span><br><span class="line">headers = get_headers(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对请求头中的sec-websocket-key进行加密,需要返回的头</span></span><br><span class="line">response_tpl = <span class="string">"HTTP/1.1 101 Switching Protocols\r\n"</span> \</span><br><span class="line">      <span class="string">"Upgrade:websocket\r\n"</span> \</span><br><span class="line">      <span class="string">"Connection: Upgrade\r\n"</span> \</span><br><span class="line">      <span class="string">"Sec-WebSocket-Accept: %s\r\n"</span> \</span><br><span class="line">      <span class="string">"WebSocket-Location: ws://%s%s\r\n\r\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># magic_string为一个固定的字符串</span></span><br><span class="line">magic_string = <span class="string">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line">value = headers[<span class="string">'Sec-WebSocket-Key'</span>] + magic_string</span><br><span class="line">ac = base64.b64encode(hashlib.sha1(value.encode(<span class="string">'utf-8'</span>)).digest())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回的信息</span></span><br><span class="line">response_str = response_tpl % (ac.decode(<span class="string">'utf-8'</span>), headers[<span class="string">'Host'</span>], headers[<span class="string">'url'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应【握手】信息</span></span><br><span class="line">conn.send(bytes(response_str, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="comment">#复制代码</span></span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><p><em>Python</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> thread</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> _thread <span class="keyword">as</span> thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># import websocket</span></span><br><span class="line"><span class="keyword">import</span> websocket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ws = websocket.WebSocket()</span></span><br><span class="line">ws = websocket.create_connection(<span class="string">"ws://127.0.0.1:8999/"</span>)</span><br><span class="line"><span class="comment"># ws.connect("ws://127.0.0.1:8999/")</span></span><br><span class="line">data = &#123;<span class="string">"body"</span>:&#123;<span class="string">"address"</span>:<span class="string">"陕西省"</span>&#125;&#125;</span><br><span class="line">ws.send(json.dumps(data))   <span class="comment">#json转化为字符串，必须转化</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    data = ws.recv()</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure><p><strong>Java Script</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    ws =<span class="keyword">new</span> WebSocket(<span class="string">"ws://127.0.0.1:8080"</span>);</span></span><br><span class="line"><span class="actionscript">    ws.onopen = <span class="function"><span class="keyword">function</span> <span class="params">(ev)</span> </span>&#123; </span></span><br><span class="line"><span class="actionscript">        <span class="comment">//若是连接成功，onopen函数会执行</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(ev)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>大端和小端模式</strong></p><p>网络通信时 通常使用大端</p><h3 id="解析websocket协议"><a class="markdownIt-Anchor" href="#解析websocket协议"></a> 解析websocket协议</h3><p><strong>使用、创建demo：</strong></p><p>长连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> websocket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> thread</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> _thread <span class="keyword">as</span> thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(ws, message)</span>:</span></span><br><span class="line">    print(message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_error</span><span class="params">(ws, error)</span>:</span></span><br><span class="line">    print(error)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_close</span><span class="params">(ws)</span>:</span></span><br><span class="line">    print(<span class="string">"### closed ###"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_open</span><span class="params">(ws)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(*args)</span>:</span></span><br><span class="line">        ws.send(<span class="string">"hello1"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        ws.close()</span><br><span class="line">    thread.start_new_thread(run,())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    websocket.enableTrace(<span class="keyword">True</span>)</span><br><span class="line">    ws = websocket.WebSocketApp(<span class="string">"ws://echo.websocket.org/"</span>,</span><br><span class="line">                              on_message = on_message,</span><br><span class="line">                              on_error = on_error,</span><br><span class="line">                              on_close = on_close)</span><br><span class="line">    ws.on_open = on_open</span><br><span class="line">    ws.run_forever(ping_interval=<span class="number">60</span>,ping_timeout=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>▲ Python的websocket代码是仿js websocket写法的，重新写了一遍脚本，流畅接受消息，自动重连发送指令，连接时间明显减少，基本做到无遗漏数据，与网站js的ws连接实现一样。</p><p>短链接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> websocket <span class="keyword">import</span> create_connection</span><br><span class="line">ws = create_connection(<span class="string">"ws://echo.websocket.org/"</span>)</span><br><span class="line">print(<span class="string">"Sending 'Hello, World'..."</span>)</span><br><span class="line">ws.send(json.dumps(&#123;<span class="string">"op"</span>:<span class="string">"unconfirmed_sub"</span>&#125;)) <span class="comment"># 不能使用str()，要以json格式输出</span></span><br><span class="line">ws.send(<span class="string">"Hello, World"</span>)</span><br><span class="line">print(<span class="string">"Sent"</span>)</span><br><span class="line">print(<span class="string">"Receiving..."</span>)</span><br><span class="line">result =  ws.recv()</span><br><span class="line">print(<span class="string">"Received '%s'"</span> % result)</span><br><span class="line">ws.close()</span><br></pre></td></tr></table></figure><h4 id="一步一步分析请求过程"><a class="markdownIt-Anchor" href="#一步一步分析请求过程"></a> 一步一步分析请求过程！！</h4><blockquote><ul><li><p>服务端（socket服务端）<br>*1.服务端开启socket服务监听IP和端口<br>*3.允许连接<br>*5.服务端接收到特殊值【加密sha1，特殊值，migic string=“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”】<br>*6.加密后的值发送给客户端</p></li><li><p>客户端（浏览器）</p></li></ul><p>*2.客户端发起连接请求（IP和端口）<br>*4.客户端生成一个xxx，【加密sha1，特殊值，migic string=“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”】，向服务端发送一段特殊值<br>*7.客户端接收到加密的值</p></blockquote><h5 id="1-启动服务端"><a class="markdownIt-Anchor" href="#1-启动服务端"></a> 1. 启动服务端</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">sock.bind((<span class="string">'127.0.0.1'</span>, <span class="number">8002</span>))</span><br><span class="line">sock.listen(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 等待用户连接</span></span><br><span class="line">conn, address = sock.accept()</span><br></pre></td></tr></table></figure><h5 id="2-客户端连接"><a class="markdownIt-Anchor" href="#2-客户端连接"></a> 2. 客户端连接</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://127.0.0.1:8002/xxoo"</span>);</span></span><br><span class="line"><span class="undefined">    ...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-建立连接握手"><a class="markdownIt-Anchor" href="#3-建立连接握手"></a> 3. 建立连接【握手】</h5><h6 id="获取请求信息"><a class="markdownIt-Anchor" href="#获取请求信息"></a> 获取请求信息</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">sock.bind((<span class="string">'127.0.0.1'</span>, <span class="number">8002</span>))</span><br><span class="line">sock.listen(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 获取客户端socket对象</span></span><br><span class="line">conn, address = sock.accept()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取客户端的【握手】信息</span></span><br><span class="line">data = conn.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">b'''</span></span><br><span class="line"><span class="string">GET /chatsocket HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1:8002</span></span><br><span class="line"><span class="string">Connection: Upgrade</span></span><br><span class="line"><span class="string">Pragma: no-cache</span></span><br><span class="line"><span class="string">Cache-Control: no-cache</span></span><br><span class="line"><span class="string">Upgrade: websocket</span></span><br><span class="line"><span class="string">Origin: http://localhost:63342</span></span><br><span class="line"><span class="string">Sec-WebSocket-Version: 13</span></span><br><span class="line"><span class="string">Sec-WebSocket-Key: mnwFxiOlctXFN/DeMt1Amg==</span></span><br><span class="line"><span class="string">Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>请求和响应的【握手】信息需要遵循规则：</p><ul><li>从请求【握手】信息中提取 Sec-WebSocket-Key</li><li>利用magic_string 和 Sec-WebSocket-Key 进行hmac1加密，再进行base64加密</li><li>将加密结果响应给客户端</li></ul><p><em>注：magic string为：258EAFA5-E914-47DA-95CA-C5AB0DC85B11</em></p><h6 id="提取sec-websocket-key值并加密"><a class="markdownIt-Anchor" href="#提取sec-websocket-key值并加密"></a> 提取Sec-WebSocket-Key值并加密：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_headers</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将请求头格式化成字典</span></span><br><span class="line"><span class="string">    :param data:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    header_dict = &#123;&#125;</span><br><span class="line">    data = str(data, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data.split(<span class="string">'\r\n'</span>):</span><br><span class="line">        print(i)</span><br><span class="line">    header, body = data.split(<span class="string">'\r\n\r\n'</span>, <span class="number">1</span>)</span><br><span class="line">    header_list = header.split(<span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(header_list)):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> len(header_list[i].split(<span class="string">' '</span>)) == <span class="number">3</span>:</span><br><span class="line">                header_dict[<span class="string">'method'</span>], header_dict[<span class="string">'url'</span>], header_dict[<span class="string">'protocol'</span>] = header_list[i].split(<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k, v = header_list[i].split(<span class="string">':'</span>, <span class="number">1</span>)</span><br><span class="line">            header_dict[k] = v.strip()</span><br><span class="line">    <span class="keyword">return</span> header_dict</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">sock.bind((<span class="string">'127.0.0.1'</span>, <span class="number">8002</span>))</span><br><span class="line">sock.listen(<span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line">conn, address = sock.accept()</span><br><span class="line">data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">headers = get_headers(data) <span class="comment"># 提取请求头信息</span></span><br><span class="line"><span class="comment"># 对请求头中的sec-websocket-key进行加密</span></span><br><span class="line">response_tpl = <span class="string">"HTTP/1.1 101 Switching Protocols\r\n"</span> \</span><br><span class="line">      <span class="string">"Upgrade:websocket\r\n"</span> \</span><br><span class="line">      <span class="string">"Connection: Upgrade\r\n"</span> \</span><br><span class="line">      <span class="string">"Sec-WebSocket-Accept: %s\r\n"</span> \</span><br><span class="line">      <span class="string">"WebSocket-Location: ws://%s%s\r\n\r\n"</span></span><br><span class="line">magic_string = <span class="string">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span></span><br><span class="line">value = headers[<span class="string">'Sec-WebSocket-Key'</span>] + magic_string</span><br><span class="line">ac = base64.b64encode(hashlib.sha1(value.encode(<span class="string">'utf-8'</span>)).digest())</span><br><span class="line">response_str = response_tpl % (ac.decode(<span class="string">'utf-8'</span>), headers[<span class="string">'Host'</span>], headers[<span class="string">'url'</span>])</span><br><span class="line"><span class="comment"># 响应【握手】信息</span></span><br><span class="line">conn.send(bytes(response_str, encoding=<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>只有在服务端又发回&quot;响应&quot;的握手信息后，才算建立了链接。握手的作用是<strong>保证通信双方使用的协议相同</strong></p><h5 id="4客户端和服务端收发数据"><a class="markdownIt-Anchor" href="#4客户端和服务端收发数据"></a> 4.客户端和服务端收发数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">数据报内容，第一行为字节，第二行为相应的每一位。</span><br><span class="line">0                   1                   2                   3</span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class="line">|F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class="line">|I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</span><br><span class="line">|N|V|V|V|       |S|             |   (if payload len==126/127)   |</span><br><span class="line">| |1|2|3|       |K|             |                               |</span><br><span class="line">+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class="line">|     Extended payload length continued, if payload len == 127  |</span><br><span class="line">+ - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class="line">|                               |Masking-key, if MASK set to 1  |</span><br><span class="line">+-------------------------------+-------------------------------+</span><br><span class="line">| Masking-key (continued)       |          Payload Data         |</span><br><span class="line">+-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class="line">:                     Payload Data continued ...                :</span><br><span class="line">+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class="line">|                     Payload Data continued ...                |</span><br><span class="line">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>官网给出的解析规则</p><blockquote><p>The MASK bit simply tells whether the message is encoded. Messages from the client must be masked, so your server should expect this to be 1. (In fact, <a href="http://tools.ietf.org/html/rfc6455#section-5.1" target="_blank" rel="noopener">section 5.1 of the spec</a> says that your server must disconnect from a client if that client sends an unmasked message.) When sending a frame back to the client, do not mask it and do not set the mask bit. We’ll explain masking later. *Note: You have to mask messages even when using a secure socket.*RSV1-3 can be ignored, they are for extensions.</p><p>The opcode field defines how to interpret the payload data: 0x0 for continuation, <code>0x1</code> for text (which is always encoded in UTF-8), <code>0x2</code> for binary, and other so-called “control codes” that will be discussed later. In this version of WebSockets, <code>0x3</code> to <code>0x7</code> and <code>0xB</code> to <code>0xF</code> have no meaning.</p><p>The FIN bit tells whether this is the last message in a series. If it’s 0, then the server will keep listening for more parts of the message; otherwise, the server should consider the message delivered. More on this later.</p><p><strong>Decoding Payload Length</strong></p><p>To read the payload data, you must know when to stop reading. That’s why the payload length is important to know. Unfortunately, this is somewhat complicated. To read it, follow these steps:</p><ol><li>Read bits 9-15 (inclusive) and interpret that as an unsigned integer. If it’s 125 or less, then that’s the length; you’re <strong>done</strong>. If it’s 126, go to step 2. If it’s 127, go to step 3.</li><li>Read the next 16 bits and interpret those as an unsigned integer. You’re <strong>done</strong>.</li><li>Read the next 64 bits and interpret those as an unsigned integer (The most significant bit MUST be 0). You’re <strong>done</strong>.</li></ol><p><strong>Reading and Unmasking the Data</strong></p><p>If the MASK bit was set (and it should be, for client-to-server messages), read the next 4 octets (32 bits); this is the masking key. Once the payload length and masking key is decoded, you can go ahead and read that number of bytes from the socket. Let’s call the data <strong>ENCODED</strong>, and the key <strong>MASK</strong>. To get <strong>DECODED</strong>, loop through the octets (bytes a.k.a. characters for text data) of <strong>ENCODED</strong> and XOR the octet with the (i modulo 4)th octet of MASK. In pseudo-code (that happens to be valid JavaScript):</p><p>var DECODED = “”;<br>for (var i = 0; i &lt; ENCODED.length; i++) {<br>DECODED[i] = ENCODED[i] ^ MASK[i % 4];<br>}</p><p>Now you can figure out what <strong>DECODED</strong> means depending on your application.</p></blockquote><h6 id="获取客户端发送的数据解包"><a class="markdownIt-Anchor" href="#获取客户端发送的数据解包"></a> 获取客户端发送的数据【解包】</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">analyze_info</span><span class="params">(info)</span>:</span></span><br><span class="line">    <span class="comment"># 处理数据头</span></span><br><span class="line">    <span class="comment"># mask占4个字节，在确定数据头的首部需要占多少字节后，再向后推4个字节</span></span><br><span class="line">    <span class="comment"># mask之后的就是数据的真正内容，但需要根据规则进行解析</span></span><br><span class="line">    payload_len = info[<span class="number">1</span>] &amp; <span class="number">127</span></span><br><span class="line">    <span class="keyword">if</span> payload_len == <span class="number">126</span>:</span><br><span class="line">        <span class="comment"># payload_len==126首部信息还要拓展2个字节(16 bits)</span></span><br><span class="line">        <span class="comment"># 见上文的 Decoding Payload Length-2</span></span><br><span class="line">        extend_payload_len = info[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">        mask = info[<span class="number">4</span>:<span class="number">8</span>]</span><br><span class="line">        decoded = info[<span class="number">8</span>:]</span><br><span class="line">    <span class="keyword">elif</span> payload_len == <span class="number">127</span>:</span><br><span class="line">        <span class="comment"># payload_len==127那么需要再拓展8个字节(64 bits)</span></span><br><span class="line">        <span class="comment"># 见上文的 Decoding Payload Length-3</span></span><br><span class="line">        extend_payload_len = info[<span class="number">2</span>:<span class="number">10</span>]</span><br><span class="line">        mask = info[<span class="number">10</span>:<span class="number">14</span>]</span><br><span class="line">        decoded = info[<span class="number">14</span>:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        extend_payload_len = <span class="keyword">None</span></span><br><span class="line">        mask = info[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line">        decoded = info[<span class="number">6</span>:]</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">var DECODED = "";</span></span><br><span class="line"><span class="string">    for (var i = 0; i &lt; ENCODED.length; i++) &#123;</span></span><br><span class="line"><span class="string">        DECODED[i] = ENCODED[i] ^ MASK[i % 4];</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">    bytes_list = bytearray()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(decoded)):</span><br><span class="line">        chunk = decoded[i] ^ mask[i % <span class="number">4</span>]</span><br><span class="line">        bytes_list.append(chunk)</span><br><span class="line">    content = str(bytes_list, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure><h6 id="向客户端发送数据封包"><a class="markdownIt-Anchor" href="#向客户端发送数据封包"></a> 向客户端发送数据【封包】</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(conn, msg_bytes)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WebSocket服务端向客户端发送消息</span></span><br><span class="line"><span class="string">    :param conn: 客户端连接到服务器端的socket对象,即： conn,address = socket.accept()</span></span><br><span class="line"><span class="string">    :param msg_bytes: 向客户端发送的字节</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">import</span> struct</span><br><span class="line"> </span><br><span class="line">    token = <span class="string">b"\x81"</span></span><br><span class="line">    length = len(msg_bytes)</span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">126</span>:</span><br><span class="line">        token += struct.pack(<span class="string">"B"</span>, length)</span><br><span class="line">    <span class="keyword">elif</span> length &lt;= <span class="number">0xFFFF</span>:</span><br><span class="line">        token += struct.pack(<span class="string">"!BH"</span>, <span class="number">126</span>, length)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        token += struct.pack(<span class="string">"!BQ"</span>, <span class="number">127</span>, length)</span><br><span class="line"> </span><br><span class="line">    msg = token + msg_bytes</span><br><span class="line">    conn.send(msg)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>转自<a href="https://home.cnblogs.com/u/wupeiqi/" target="_blank" rel="noopener">武沛齐</a>的<a href="https://www.cnblogs.com/wupeiqi/p/6558766.html" target="_blank" rel="noopener">你真的了解WebSocket吗？</a></p><h4 id="完整demo"><a class="markdownIt-Anchor" href="#完整demo"></a> 完整DEMO：</h4><h5 id="python服务端代码"><a class="markdownIt-Anchor" href="#python服务端代码"></a> Python服务端代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_headers</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将请求头格式化成字典</span></span><br><span class="line"><span class="string">    :param data:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    header_dict = &#123;&#125;</span><br><span class="line">    data = str(data, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"> </span><br><span class="line">    header, body = data.split(<span class="string">'\r\n\r\n'</span>, <span class="number">1</span>)</span><br><span class="line">    header_list = header.split(<span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(header_list)):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> len(header_list[i].split(<span class="string">' '</span>)) == <span class="number">3</span>:</span><br><span class="line">                header_dict[<span class="string">'method'</span>], header_dict[<span class="string">'url'</span>], header_dict[<span class="string">'protocol'</span>] = header_list[i].split(<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k, v = header_list[i].split(<span class="string">':'</span>, <span class="number">1</span>)</span><br><span class="line">            header_dict[k] = v.strip()</span><br><span class="line">    <span class="keyword">return</span> header_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(conn, msg_bytes)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WebSocket服务端向客户端发送消息</span></span><br><span class="line"><span class="string">    :param conn: 客户端连接到服务器端的socket对象,即： conn,address = socket.accept()</span></span><br><span class="line"><span class="string">    :param msg_bytes: 向客户端发送的字节</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">import</span> struct</span><br><span class="line"> </span><br><span class="line">    token = <span class="string">b"\x81"</span></span><br><span class="line">    length = len(msg_bytes)</span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">126</span>:</span><br><span class="line">        token += struct.pack(<span class="string">"B"</span>, length)</span><br><span class="line">    <span class="keyword">elif</span> length &lt;= <span class="number">0xFFFF</span>:</span><br><span class="line">        token += struct.pack(<span class="string">"!BH"</span>, <span class="number">126</span>, length)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        token += struct.pack(<span class="string">"!BQ"</span>, <span class="number">127</span>, length)</span><br><span class="line"> </span><br><span class="line">    msg = token + msg_bytes</span><br><span class="line">    conn.send(msg)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_socket</span><span class="params">()</span>:</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sock.bind((<span class="string">'127.0.0.1'</span>, <span class="number">8003</span>))</span><br><span class="line">    sock.listen(<span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line">    conn, address = sock.accept()</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    headers = get_headers(data)</span><br><span class="line">    response_tpl = <span class="string">"HTTP/1.1 101 Switching Protocols\r\n"</span> \</span><br><span class="line">                   <span class="string">"Upgrade:websocket\r\n"</span> \</span><br><span class="line">                   <span class="string">"Connection:Upgrade\r\n"</span> \</span><br><span class="line">                   <span class="string">"Sec-WebSocket-Accept:%s\r\n"</span> \</span><br><span class="line">                   <span class="string">"WebSocket-Location:ws://%s%s\r\n\r\n"</span></span><br><span class="line"> </span><br><span class="line">    value = headers[<span class="string">'Sec-WebSocket-Key'</span>] + <span class="string">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span></span><br><span class="line">    ac = base64.b64encode(hashlib.sha1(value.encode(<span class="string">'utf-8'</span>)).digest())</span><br><span class="line">    response_str = response_tpl % (ac.decode(<span class="string">'utf-8'</span>), headers[<span class="string">'Host'</span>], headers[<span class="string">'url'</span>])</span><br><span class="line">    conn.send(bytes(response_str, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">return</span> conn, sock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">analyze_info</span><span class="params">(info)</span>:</span></span><br><span class="line">    payload_len = info[<span class="number">1</span>] &amp; <span class="number">127</span></span><br><span class="line">    <span class="keyword">if</span> payload_len == <span class="number">126</span>:</span><br><span class="line">        extend_payload_len = info[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">        mask = info[<span class="number">4</span>:<span class="number">8</span>]</span><br><span class="line">        decoded = info[<span class="number">8</span>:]</span><br><span class="line">    <span class="keyword">elif</span> payload_len == <span class="number">127</span>:</span><br><span class="line">        extend_payload_len = info[<span class="number">2</span>:<span class="number">10</span>]</span><br><span class="line">        mask = info[<span class="number">10</span>:<span class="number">14</span>]</span><br><span class="line">        decoded = info[<span class="number">14</span>:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        extend_payload_len = <span class="keyword">None</span></span><br><span class="line">        mask = info[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line">        decoded = info[<span class="number">6</span>:]</span><br><span class="line"></span><br><span class="line">    bytes_list = bytearray()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(decoded)):</span><br><span class="line">        chunk = decoded[i] ^ mask[i % <span class="number">4</span>]</span><br><span class="line">        bytes_list.append(chunk)</span><br><span class="line">    content = str(bytes_list, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    conn, sock = init_socket()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = conn.recv(<span class="number">8096</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            info = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> info:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        content = analyze_info(info)</span><br><span class="line">        send_msg(conn, content.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    sock.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><h5 id="html的客户端代码"><a class="markdownIt-Anchor" href="#html的客户端代码"></a> html的客户端代码</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">onclick</span>=<span class="string">"sendMsg();"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"close"</span> <span class="attr">value</span>=<span class="string">"关闭连接"</span> <span class="attr">onclick</span>=<span class="string">"closeConn();"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://127.0.0.1:8003/chatsocket"</span>);</span></span><br><span class="line"><span class="undefined">         </span></span><br><span class="line"><span class="actionscript">            socket.onopen = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">/* 与服务器端连接成功后，自动执行 */</span></span></span><br><span class="line"><span class="undefined">         </span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> newTag = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript">                newTag.innerHTML = <span class="string">"【连接成功】"</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).appendChild(newTag);</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">         </span></span><br><span class="line"><span class="actionscript">            socket.onmessage = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">/* 服务器端向客户端发送数据时，自动执行 */</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> response = event.data;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> newTag = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="undefined">                newTag.innerHTML = response;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).appendChild(newTag);</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">         </span></span><br><span class="line"><span class="actionscript">            socket.onclose = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">/* 服务器端主动断开连接时，自动执行 */</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> newTag = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript">                newTag.innerHTML = <span class="string">"【关闭连接】"</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).appendChild(newTag);</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">         </span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">sendMsg</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> txt = <span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>);</span></span><br><span class="line"><span class="undefined">                socket.send(txt.value);</span></span><br><span class="line"><span class="actionscript">                txt.value = <span class="string">""</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">closeConn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">                socket.close();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> newTag = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript">                newTag.innerHTML = <span class="string">"【关闭连接】"</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).appendChild(newTag);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">         </span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="tornado初探"><a class="markdownIt-Anchor" href="#tornado初探"></a> tornado初探</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ws = websocket.WebSocketApp(<span class="string">"ws://echo.websocket.org/"</span>,</span><br><span class="line">    on_message = on_message,</span><br><span class="line">    on_error = on_error,</span><br><span class="line">    on_close = on_close)</span><br><span class="line">ws.on_open = on_open</span><br><span class="line">ws.run_forever()</span><br></pre></td></tr></table></figure><p><strong>长连接，参数介绍：</strong></p><p>（1）url: websocket的地址。</p><p>（2）header: 客户发送websocket握手请求的请求头，{‘head1:value1’,‘head2:value2’}。</p><p>（3）on_open：在建立Websocket握手时调用的可调用对象，这个方法只有一个参数，就是该类本身。</p><p>（4）on_message：这个对象在接收到服务器返回的消息时调用。有两个参数，一个是该类本身，一个是我们从服务器获取的字符串（utf-8格式）。</p><p>（5）on_error：这个对象在遇到错误时调用，有两个参数，第一个是该类本身，第二个是异常对象。</p><p>（6）on_close：在遇到连接关闭的情况时调用，参数只有一个，就是该类本身。</p><p>（7）on_cont_message：这个对象在接收到连续帧数据时被调用，有三个参数，分别是：类本身，从服务器接受的字符串（utf-8），连续标志。</p><p>（8）on_data：当从服务器接收到消息时被调用，有四个参数，分别是：该类本身，接收到的字符串（utf-8），数据类型，连续标志。</p><p>（9）keep_running：一个二进制的标志位，如果为True，这个app的主循环将持续运行，默认值为True。</p><p>（10）get_mask_key：用于产生一个掩码。</p><p>（11）subprotocols：一组可用的子协议，默认为空。</p><h4 id="tornadohello_world"><a class="markdownIt-Anchor" href="#tornadohello_world"></a> tornado.hello_world</h4><ul><li><strong>Http</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span><span class="params">(RequestHandler)</span>:</span></span><br><span class="line">    <span class="comment"># 正常1，抛错1、5</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_default_headers</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"调用了set_default_headers()"</span> </span><br><span class="line"><span class="comment"># 正常2，抛错2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"调用了initialize()"</span></span><br><span class="line"> <span class="comment"># 正常3，抛错3</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"调用了prepare()"</span></span><br><span class="line"> <span class="comment"># 正常4，抛错4</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"调用了get()"</span></span><br><span class="line"> <span class="comment"># 正常4，抛错4</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"调用了post()"</span></span><br><span class="line">        self.send_error(<span class="number">200</span>)  <span class="comment"># 注意此出抛出了错误</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 正常无、抛错6</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_error</span><span class="params">(self, status_code, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"调用了write_error()"</span>    </span><br><span class="line">        </span><br><span class="line"> <span class="comment"># 正常5、抛错7</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_finish</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"调用了on_finish()"</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 定义Http处理类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="comment"># 处理路由参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(self, subject)</span>:</span></span><br><span class="line">        self.subject = subject</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加一个处理get请求方式的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># write方法是写到缓冲区的</span></span><br><span class="line">        self.write(<span class="string">"Hello, world"</span>)</span><br><span class="line">        <span class="comment"># write会自动检测json类型，进行包装，并设Content-Type设置为application/json; charset=UTF-8。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_app</span><span class="params">()</span>:</span></span><br><span class="line">    settings = &#123;</span><br><span class="line">        <span class="string">'template_path'</span>: <span class="string">'templates'</span>,</span><br><span class="line">        <span class="string">'static_path'</span>: <span class="string">'static'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tornado.web.Application([</span><br><span class="line">        (<span class="string">r"/main"</span>, MainHandler, &#123;<span class="string">"subject"</span>:<span class="string">"c++"</span>&#125;),<span class="comment"># 指定路由信息,路由参数会传入initialize()中</span></span><br><span class="line">        (<span class="string">r"/"</span>, IndexHandler),</span><br><span class="line">    ], debug=<span class="keyword">True</span>, **settings)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># debug=True时，有自动重启、提供追踪信息等功能</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = make_app()  <span class="comment"># 创建一个应用对象,得返回Application对象</span></span><br><span class="line">    app.listen(<span class="number">8888</span>)  <span class="comment"># 设置端口</span></span><br><span class="line">    tornado.ioloop.IOLoop.current().start()  <span class="comment"># 启动web程序，开始监听端口的连接</span></span><br></pre></td></tr></table></figure><ul><li><strong>Websocket</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ▲继承的类为WebSocketHandler</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatHandler</span><span class="params">(tornado.websocket.WebSocketHandler)</span>:</span></span><br><span class="line">    <span class="comment"># 用户存储当前聊天室用户</span></span><br><span class="line">    waiters = set()</span><br><span class="line">    <span class="comment"># 用于存储历时消息</span></span><br><span class="line">    messages = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        客户端连接成功时，自动执行</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ChatHandler.waiters.add(self)</span><br><span class="line">        uid = str(uuid.uuid4())</span><br><span class="line">        self.write_message(uid)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> msg <span class="keyword">in</span> ChatHandler.messages:</span><br><span class="line">            content = self.render_string(<span class="string">'message.html'</span>, **msg)</span><br><span class="line">            self.write_message(content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(self, message)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        客户端连发送消息时，自动执行</span></span><br><span class="line"><span class="string">        :param message: </span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        msg = json.loads(message)</span><br><span class="line">        ChatHandler.messages.append(message)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> client <span class="keyword">in</span> ChatHandler.waiters:</span><br><span class="line">            content = client.render_string(<span class="string">'message.html'</span>, **msg)</span><br><span class="line">            client.write_message(content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        客户端关闭连接时，，自动执行</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ChatHandler.waiters.remove(self)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    settings = &#123;</span><br><span class="line">        <span class="string">'template_path'</span>: <span class="string">'templates'</span>,</span><br><span class="line">        <span class="string">'static_path'</span>: <span class="string">'static'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    application = tornado.web.Application([</span><br><span class="line">        (<span class="string">r"/"</span>, IndexHandler),</span><br><span class="line">        (<span class="string">r"/chat"</span>, ChatHandler),</span><br><span class="line">    ], **settings)</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><h4 id="基于tornado聊天室"><a class="markdownIt-Anchor" href="#基于tornado聊天室"></a> <a href="https://www.cnblogs.com/ssyfj/p/9245150.html" target="_blank" rel="noopener">基于Tornado——聊天室</a></h4><p>项目结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">│   app.py</span><br><span class="line">│</span><br><span class="line">├───static</span><br><span class="line">│       jquery-2.1.4.min.js</span><br><span class="line">│</span><br><span class="line">└───templates</span><br><span class="line">        index.html</span><br><span class="line">        message.html</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">import</span> tornado.websocket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.render(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatHandler</span><span class="params">(tornado.websocket.WebSocketHandler)</span>:</span></span><br><span class="line">    <span class="comment"># 用户存储当前聊天室用户</span></span><br><span class="line">    waiters = set()</span><br><span class="line">    <span class="comment"># 用于存储历时消息</span></span><br><span class="line">    messages = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        客户端连接成功时，自动执行</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ChatHandler.waiters.add(self)</span><br><span class="line">        uid = str(uuid.uuid4())</span><br><span class="line">        self.write_message(uid)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> msg <span class="keyword">in</span> ChatHandler.messages:</span><br><span class="line">            content = self.render_string(<span class="string">'message.html'</span>, **msg)</span><br><span class="line">            self.write_message(content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(self, message)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        客户端连发送消息时，自动执行</span></span><br><span class="line"><span class="string">        :param message: </span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        msg = json.loads(message)</span><br><span class="line">        ChatHandler.messages.append(message)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 向当前在线的每个用户发送最新的消息界面</span></span><br><span class="line">        <span class="keyword">for</span> client <span class="keyword">in</span> ChatHandler.waiters:</span><br><span class="line">            content = client.render_string(<span class="string">'message.html'</span>, **msg)</span><br><span class="line">            client.write_message(content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        客户端关闭连接时，，自动执行</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ChatHandler.waiters.remove(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    settings = &#123;</span><br><span class="line">        <span class="string">'template_path'</span>: <span class="string">'templates'</span>,</span><br><span class="line">        <span class="string">'static_path'</span>: <span class="string">'static'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    application = tornado.web.Application([</span><br><span class="line">        (<span class="string">r"/"</span>, IndexHandler),</span><br><span class="line">        (<span class="string">r"/chat"</span>, ChatHandler),</span><br><span class="line">    ], **settings)</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Python聊天室<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">onclick</span>=<span class="string">"sendMsg();"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"close"</span> <span class="attr">value</span>=<span class="string">"关闭连接"</span> <span class="attr">onclick</span>=<span class="string">"closeConn();"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid #dddddd;margin: 20px;min-height: 500px;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/jquery-2.1.4.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            wsUpdater.start();</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> wsUpdater = &#123;</span></span><br><span class="line"><span class="actionscript">            socket: <span class="literal">null</span>,</span></span><br><span class="line"><span class="actionscript">            uid: <span class="literal">null</span>,</span></span><br><span class="line"><span class="actionscript">            start: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> url = <span class="string">"ws://127.0.0.1:8888/chat"</span>;</span></span><br><span class="line"><span class="actionscript">                wsUpdater.socket = <span class="keyword">new</span> WebSocket(url);</span></span><br><span class="line"><span class="actionscript">                wsUpdater.socket.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(event);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span>(wsUpdater.uid)&#123;</span></span><br><span class="line"><span class="undefined">                        wsUpdater.showMessage(event.data);</span></span><br><span class="line"><span class="actionscript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="undefined">                        wsUpdater.uid = event.data;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="actionscript">            showMessage: <span class="function"><span class="keyword">function</span><span class="params">(content)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#container'</span>).append(content);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 按下提交按钮后，客户端向服务端发送信息，服务端再将数据给message.html渲染</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">sendMsg</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> msg = &#123;</span></span><br><span class="line"><span class="undefined">                uid: wsUpdater.uid,</span></span><br><span class="line"><span class="javascript">                message: $(<span class="string">"#txt"</span>).val()</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(msg));</span></span><br><span class="line"><span class="javascript">            wsUpdater.socket.send(<span class="built_in">JSON</span>.stringify(msg));</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>message.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid #dddddd;margin: 10px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>游客&#123;&#123;uid&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-left: 20px;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>▲  整个执行流程：</p><ol><li>按下提交后调用html.sendMsg–&gt;</li><li>数据message–&gt;在后自动调用on_message，会将message传给massage.html渲染，将渲染结果(<strong>字符串</strong>)返回给用户(write_message)–&gt;</li><li>客户端收到消息后自动执行html.on_message会调用html.showMessage，把content即<strong>字符串</strong>(event.data)用jquery追加显示index.html页面上<code>$('#container').append(content);</code></li></ol><h2 id="附录文献"><a class="markdownIt-Anchor" href="#附录文献"></a> 附录文献:</h2><h3 id="websocket获取实时数据的几种常见链接方式"><a class="markdownIt-Anchor" href="#websocket获取实时数据的几种常见链接方式"></a> <a href="https://blog.csdn.net/Darkman_EX/article/details/82592118?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">websocket获取实时数据的几种常见链接方式</a></h3><h3 id="python使用websocket的几种方式"><a class="markdownIt-Anchor" href="#python使用websocket的几种方式"></a> <a href="https://jingniao.github.io/2016/04/10/python-websocket/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">python使用websocket的几种方式</a></h3><h3 id="python-web-框架tornado初探"><a class="markdownIt-Anchor" href="#python-web-框架tornado初探"></a> <a href="https://blog.csdn.net/xc_zhou/article/details/80637714" target="_blank" rel="noopener">Python Web 框架：Tornado初探</a></h3><h3 id="python学习笔记tornado深入"><a class="markdownIt-Anchor" href="#python学习笔记tornado深入"></a> <a href="https://blog.csdn.net/tichimi3375/article/details/82109679" target="_blank" rel="noopener">▲Python学习笔记——Tornado深入</a></h3><h3 id="完整的websocket使用聊天室"><a class="markdownIt-Anchor" href="#完整的websocket使用聊天室"></a> <a href="https://www.cnblogs.com/ssyfj/p/9245150.html" target="_blank" rel="noopener">完整的websocket使用——聊天室</a></h3><h2 id="坑点记录"><a class="markdownIt-Anchor" href="#坑点记录"></a> 坑点记录：</h2><h3 id="1create_connection导入失败"><a class="markdownIt-Anchor" href="#1create_connection导入失败"></a> 1.create_connection导入失败</h3><p>Q:<code>ImportError: cannot import name 'create_connection' from 'websocket' (unknown location)</code></p><ul><li>A:在使用create_connection之前要安装<code>websocket_client</code> ,即 <code>pip install websocket-client</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络知识websocket&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#网络知识websocket&quot;&gt;&lt;/a&gt; 网络知识——Websocket&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP ：面向连接—&amp;gt; 打电话(相互回复,一来一
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="网络知识" scheme="https://nymrli.top/tags/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>第二十八届“和巨耀通杯”南京邮电大学在线测评系统程序设计邀请赛--</title>
    <link href="https://nymrli.top/2019/11/17/%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AB%E5%B1%8A%E2%80%9C%E5%92%8C%E5%B7%A8%E8%80%80%E9%80%9A%E6%9D%AF%E2%80%9DNOJ%E9%82%80%E8%AF%B7%E8%B5%9B/"/>
    <id>https://nymrli.top/2019/11/17/第二十八届“和巨耀通杯”NOJ邀请赛/</id>
    <published>2019-11-17T09:43:56.000Z</published>
    <updated>2019-11-17T09:58:12.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二十八届和巨耀通杯noj邀请赛"><a class="markdownIt-Anchor" href="#第二十八届和巨耀通杯noj邀请赛"></a> 第二十八届“和巨耀通杯”NOJ邀请赛</h1><blockquote><p>三人团队赛， 正好最近在刷PTA， 于是一个人报名尝试了一下。</p><p>一共AC了三题， Rank28</p></blockquote><h2 id="c-battle-game"><a class="markdownIt-Anchor" href="#c-battle-game"></a> <a href="https://acm.njupt.edu.cn/contest/109/board/challenge/C" target="_blank" rel="noopener">C. Battle game</a></h2><blockquote><p>签到题</p></blockquote><p><strong>Description:</strong></p><p>You are playing a game which you will battle with an enemy. As you don’t want to lose, your total power can’t be lower than your enemy’s. Your power is simply added by the power of your soldiers, and all of your soldiers’ power is exactly aa. Now you have known that your enemy’s total power is bb. You want to know how many soldiers you need in order not to lose the battle.</p><p><strong>Input:</strong></p><p>A line with two integers a,ba,b, (1≤a,b≤109)(1≤a,b≤109).</p><p><strong>Output:</strong></p><p>A line with one integer, denotes the minimum number of soldiers you need.</p><p><strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 456</span><br></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; a&gt;&gt; b)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( b%a != <span class="number">0</span>)</span><br><span class="line">            ans= b/a+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//            cout &lt;&lt; b/a+1&lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans = b/a;</span><br><span class="line"><span class="comment">//            cout &lt;&lt; b/a &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="d-gomoku"><a class="markdownIt-Anchor" href="#d-gomoku"></a> <a href="https://acm.njupt.edu.cn/contest/109/board/challenge/D" target="_blank" rel="noopener">D. Gomoku</a></h2><p><strong>Description:</strong></p><p>Alice and Bob are playing a game called <em>Gomoku</em> (a.k.a. <em>Five in a Row</em>). Alice is sente(black, moves first) and Bob is gote(white, moves second). Alice wants to know whether she can win(have five or more consecutive stones of the same color in a diagonal, vertical, or horizontal row) in one step, and now is Alice’s turn. It is guranteed that neither Alice or Bob wins currently. Prohibitions are not considered in this problem.</p><p><strong>Input:</strong></p><p>The first line contains one integer nn, which denotes the size of the board is n×nn×n.</p><p>Next nn lines each has a string of length nn, use <code>@</code> to represent black, <code>O</code> to represent white, <code>+</code> to represent there’s no stone at that position.</p><p><strong>Output:</strong></p><p>If Alice can win in one step, output <code>YES</code>, otherwise output <code>NO</code>.</p><p><strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">+++O+++</span><br><span class="line">+@+@+++</span><br><span class="line">+O@@@++</span><br><span class="line">+++@+++</span><br><span class="line">+++O@++</span><br><span class="line">++OOOO+</span><br><span class="line">+++++++</span><br></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><h3 id="ac代码-2"><a class="markdownIt-Anchor" href="#ac代码-2"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>  maxn = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">+++O+++</span></span><br><span class="line"><span class="comment">+@+@+++</span></span><br><span class="line"><span class="comment">+O@@@++</span></span><br><span class="line"><span class="comment">+++@+++</span></span><br><span class="line"><span class="comment">+++O@++</span></span><br><span class="line"><span class="comment">++OOOO+</span></span><br><span class="line"><span class="comment">+++++++</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> maze[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> can=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dirnum = <span class="number">8</span>;</span><br><span class="line"><span class="comment">// -&gt; , 2, &lt;- , 8,</span></span><br><span class="line"><span class="keyword">int</span> xdir[dirnum] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> ydir[dirnum] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> depth, <span class="keyword">int</span> dir, <span class="keyword">int</span> plustime)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (depth == <span class="number">5</span>)&#123;</span><br><span class="line">        can = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//        cout &lt;&lt; x &lt;&lt; y &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (plustime == <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (maze[x][y] == <span class="string">'O'</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!maze[x][y]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (can == <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> xt = xdir[dir] + x;</span><br><span class="line">        <span class="keyword">int</span> yt = ydir[dir] + y;</span><br><span class="line"><span class="comment">//        cout &lt;&lt; "      x:" &lt;&lt; xt &lt;&lt; " y:"&lt;&lt; yt &lt;&lt;  " " &lt;&lt;  maze[xt][yt] &lt;&lt; "plustime:"&lt;&lt; plustime&lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (maze[xt][yt] == <span class="string">'+'</span> &amp;&amp; plustime==<span class="number">0</span>)&#123;</span><br><span class="line">            maze[xt][yt] = <span class="string">'@'</span>;</span><br><span class="line">            dfs(xt, yt, depth+<span class="number">1</span>, dir, plustime+<span class="number">1</span>);</span><br><span class="line">            maze[xt][yt] = <span class="string">'+'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(maze[xt][yt] == <span class="string">'@'</span> )&#123;</span><br><span class="line">            dfs(xt, yt, depth+<span class="number">1</span>, dir, plustime);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 5- 1e3</span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt;maze[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line"><span class="comment">//        for(int j=1;j&lt;=n;j++)</span></span><br><span class="line"><span class="comment">//            cout &lt;&lt; maze[i][j];</span></span><br><span class="line"><span class="comment">//        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (maze[i][j]== <span class="string">'@'</span>)&#123;</span><br><span class="line"><span class="comment">//                cout &lt;&lt; "test" &lt;&lt; "x:" &lt;&lt; i &lt;&lt; " y:"&lt;&lt; j &lt;&lt; " "&lt;&lt;  maze[i][j]&lt;&lt; endl;</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;dirnum; k++)&#123;</span><br><span class="line">                    <span class="keyword">int</span> xt = xdir[k] + i;</span><br><span class="line">                    <span class="keyword">int</span> yt = ydir[k] + j;</span><br><span class="line">                    <span class="keyword">if</span> (maze[xt][yt]==<span class="string">'@'</span>)</span><br><span class="line"><span class="comment">//                    cout &lt;&lt; "  in " &lt;&lt; "x:" &lt;&lt; xt &lt;&lt; " y:"&lt;&lt; yt &lt;&lt; " "&lt;&lt;  maze[xt][yt]&lt;&lt; endl;</span></span><br><span class="line">                        dfs(xt, yt, <span class="number">2</span>, k, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (maze[xt][yt] == <span class="string">'+'</span>)</span><br><span class="line">                        dfs(xt, yt, <span class="number">2</span>, k, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            else cout &lt;&lt; "new" &lt;&lt; "x:" &lt;&lt; i &lt;&lt; " y:"&lt;&lt; j &lt;&lt; " "&lt;&lt;  maze[i][j]&lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (can) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="g-number"><a class="markdownIt-Anchor" href="#g-number"></a> <a href="https://acm.njupt.edu.cn/contest/109/board/challenge/G" target="_blank" rel="noopener">G. Number</a></h2><blockquote><p>规律题</p></blockquote><p><strong>Description:</strong></p><p>0xfaner just learned the factorial today, and the factorial is defined as follows:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">!</mo><mo>=</mo><mn>1</mn><mo>×</mo><mn>2</mn><mo>×</mo><mo>⋯</mo><mo>×</mo><mi>x</mi><mi>x</mi><mo stretchy="false">!</mo><mo>=</mo><mn>1</mn><mo>×</mo><mn>2</mn><mo>×</mo><mo>⋯</mo><mo>×</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">x!=1×2×⋯×xx!=1×2×⋯×x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span></p><p>He found that $10!=362880010!=3628800 $， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>20</mn><mo stretchy="false">!</mo><mo>=</mo><mn>2432902008176640000</mn></mrow><annotation encoding="application/x-tex">20!=2432902008176640000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">4</span><span class="mord">3</span><span class="mord">2</span><span class="mord">9</span><span class="mord">0</span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord">8</span><span class="mord">1</span><span class="mord">7</span><span class="mord">6</span><span class="mord">6</span><span class="mord">4</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span> , the number of trailing zeros is increasing.</p><p>Now 0xfaner wants to know the the number of trailing zeros of n!n!to each given nn .</p><p><strong>Input:</strong></p><p>The only line contains one integer nn ( 1≤n≤1091≤n≤109 ).</p><p><strong>Output:</strong></p><p>Print the number of trailing zeros of n!n! .</p><p><strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><p>AC</p><blockquote><p>规律题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">BigInteger res =  <span class="keyword">new</span> BigInteger(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">BigInteger tmp =  <span class="keyword">new</span> BigInteger(String.valueOf(i));</span><br><span class="line">res = res.multiply(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.printf("%s\n",res.bitCount());</span></span><br><span class="line"><span class="comment">//System.out.printf("%s\n",res.bitLength());</span></span><br><span class="line"><span class="comment">//System.out.printf("%d\n",res.byteValue());</span></span><br><span class="line">String s = res.toString();</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=s.length()-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span> (s.charAt(j)==<span class="string">'0'</span>) ans ++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">System.out.printf(<span class="string">"%d"</span>,solve(n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后一直TLE，于是猜测是否有规律</p><h3 id="ac代码-3"><a class="markdownIt-Anchor" href="#ac代码-3"></a> AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            ans += n/<span class="number">5</span>;</span><br><span class="line">            n /= <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第二十八届和巨耀通杯noj邀请赛&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第二十八届和巨耀通杯noj邀请赛&quot;&gt;&lt;/a&gt; 第二十八届“和巨耀通杯”NOJ邀请赛&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;三人团队赛， 正好最近在刷PT
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="Algorithm" scheme="https://nymrli.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>PAT冲冲冲</title>
    <link href="https://nymrli.top/2019/10/24/PAT%E5%86%B2%E5%86%B2%E5%86%B2/"/>
    <id>https://nymrli.top/2019/10/24/PAT冲冲冲/</id>
    <published>2019-10-24T10:30:45.000Z</published>
    <updated>2019-11-17T10:02:37.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pat冲冲冲"><a class="markdownIt-Anchor" href="#pat冲冲冲"></a> PAT冲冲冲</h1><blockquote><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/type/7?page=1" target="_blank" rel="noopener">PAT甲级练习题 ——PAT (Advanced Level) Practice </a><br><a href="https://www.nowcoder.com/pat/5/problems?page=1" target="_blank" rel="noopener">PAT甲级(Advanced Level)真题</a><br><a href="https://www.liuchuo.net/archives/8091" target="_blank" rel="noopener">柳婼 の blog经验</a><br><a href="https://saquarius.com/2019/08/pat%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">saquarius’s blog</a></p><p><a href="https://blog.csdn.net/a617976080/article/details/89676670" target="_blank" rel="noopener">PAT甲级题目及分类总结</a><br><a href="https://blog.csdn.net/richenyunqi/article/details/79958195" target="_blank" rel="noopener">pat甲级题解目录</a></p></blockquote><p>▲报名费256，可以刷<a href="https://www.nowcoder.com/pat" target="_blank" rel="noopener">牛客网</a>的题来获得-50的优惠券，该练习场下的所有题目只要通过都算</p><h2 id="乙级练习题"><a class="markdownIt-Anchor" href="#乙级练习题"></a> 乙级练习题</h2><h3 id="nowcoder数列"><a class="markdownIt-Anchor" href="#nowcoder数列"></a> <a href="https://www.nowcoder.com/pat/2/problem/250" target="_blank" rel="noopener">NowCoder数列</a></h3><blockquote><p>没想到第二题就是考了个数据范围，由于0≤n≤1000000，所以F(n)必然比long long大，而判断3的倍数可表示为===&gt; F(n) % 3 —&gt; (F(n-1)%3 + F(n-2)%3) % 3</p><p>求余运算性质：a = b+c --&gt;  a%d = (b%d+c%d) % d</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[<span class="number">1000000</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">7</span>;</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">11</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">        f[i]=(f[i<span class="number">-1</span>]%<span class="number">3</span>+f[i<span class="number">-2</span>]%<span class="number">3</span>)%<span class="number">3</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[n]!=<span class="number">0</span>)</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="养兔子"><a class="markdownIt-Anchor" href="#养兔子"></a> <a href="https://www.nowcoder.com/pat/2/problem/251" target="_blank" rel="noopener">养兔子</a></h3><blockquote><p>非常经典的斐波那契数列题</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 90+5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] + arr[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[n] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客似云来"><a class="markdownIt-Anchor" href="#客似云来"></a> <a href="https://www.nowcoder.com/pat/2/problem/252" target="_blank" rel="noopener">客似云来</a></h3><blockquote><p>斐波那契数列的拓展题，将其中某个区间的值累加输出（需要特判是否为某个点）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 80+5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> from, to;</span><br><span class="line"></span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] + arr[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; from &gt;&gt; to)&#123;</span><br><span class="line">        ll tmp = <span class="number">0</span> ;</span><br><span class="line">        <span class="comment">// 注意需要特判是否相等</span></span><br><span class="line">        <span class="keyword">if</span> (from == to) tmp = arr[from];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=from; i&lt;= to;i++)&#123;</span><br><span class="line">                tmp += arr[i] ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; tmp &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="斐波那契凤尾"><a class="markdownIt-Anchor" href="#斐波那契凤尾"></a> <a href="https://www.nowcoder.com/pat/2/problem/253" target="_blank" rel="noopener">斐波那契凤尾</a></h3><blockquote><p>一遍还挺难过的，有不少的坑点</p><p>1.虽然也是斐波那契数列，但是一定要注意前两项的取值<br>2.输出末尾的6位，那么就是%1e6，但是如果有前置0，需要补零，我是使用iomanip中的setw和setfill实现的<br>3.怎么判断超过6位：找出超过6位的n应该算比较简单的方法了吧</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000 + 5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        用来找到超过1e6的n</span></span><br><span class="line"><span class="comment">        arr[i] = (arr[i-1] + arr[i-2]);</span></span><br><span class="line"><span class="comment">        if (arr[i] &gt; 1000000)&#123;</span></span><br><span class="line"><span class="comment">             cout &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">             break;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        arr[i] = (arr[i<span class="number">-1</span>]%<span class="number">1000000</span> + arr[i<span class="number">-2</span>]%<span class="number">1000000</span>)%<span class="number">1000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">if</span> (n&gt;= <span class="number">30</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">6</span>)&lt;&lt;setfill(<span class="string">'0'</span>) &lt;&lt; arr[n] &lt;&lt;<span class="built_in">endl</span>;    </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; arr[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Po个C的代码，使用printf的格式化输出的特性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    a[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">100000</span>;i++)</span><br><span class="line">      a[i]=(a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>])%<span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;=<span class="number">30</span>)</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%06d\n"</span>,a[n]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="星际密码"><a class="markdownIt-Anchor" href="#星际密码"></a> <a href="https://www.nowcoder.com/pat/2/problem/254" target="_blank" rel="noopener"> 星际密码</a></h3><blockquote><p>说实话，一开始没看懂题，因为输入的n跟题目里提到的n不是同一个东西：矩阵X为[[1 1],[0 1]]，题目中的n是指多少次幂；而输入里的n是指有多少个密码，真正的n其实是第二行的输入Xi</p><p>那么分析下思路，Xi=1时<mark>1，Xi=2时</mark>2，Xi=3时==3</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000 + 5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initFib</span><span class="params">()</span></span>&#123;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = (arr[i<span class="number">-1</span>]%<span class="number">10000</span> + arr[i<span class="number">-2</span>]%<span class="number">10000</span>)%<span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> input[<span class="number">100</span>+<span class="number">5</span>];</span><br><span class="line">    initFib();</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>)&lt;&lt;setfill(<span class="string">'0'</span>) &lt;&lt; arr[tmp] ;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/10/24/PAT冲冲冲/E:%5Chexo%5Csource_posts%5CPAT%E5%86%B2%E5%86%B2%E5%86%B2%5CFib.jpg" alt="Fib"></p><h3 id="母牛的故事"><a class="markdownIt-Anchor" href="#母牛的故事"></a> <a href="https://www.nowcoder.com/pat/2/problem/255" target="_blank" rel="noopener"> 母牛的故事</a></h3><blockquote><p>变形的Fib，公式更新为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n) = f(n-1) + f(n-3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span></p><p>最主要的就是确定前几项，比较好的是样例都给出了2==&gt;2,4==&gt;4,5==&gt;6，这样就比较好确定<strong>每头小母牛从第四个年头开始，每年年初也生一头小母牛</strong>到底是什么意思了</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000 + 5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initFib</span><span class="params">()</span></span>&#123;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;arr[<span class="number">3</span>]=<span class="number">3</span>;arr[<span class="number">4</span>]=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">5</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] + arr[i<span class="number">-3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    initFib();</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="童年生活二三事"><a class="markdownIt-Anchor" href="#童年生活二三事"></a> <a href="https://www.nowcoder.com/pat/2/problem/256" target="_blank" rel="noopener">童年生活二三事</a></h3><blockquote><p>Fib数列的板子题，只不过需要理解一下</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 90 + 5</span></span><br><span class="line">ll arr[N];</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initFib</span><span class="params">()</span></span>&#123;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] + arr[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    initFib();</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[n]  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蜜蜂寻路"><a class="markdownIt-Anchor" href="#蜜蜂寻路"></a> <a href="https://www.nowcoder.com/pat/2/problem/257" target="_blank" rel="noopener">蜜蜂寻路</a></h3><blockquote><p>如果固定起点为1，计算到某个位置的走法数的话，跟走阶梯其实是一种思路，就是f(n) = f(n-1) + f(n-2)，即第n个位置的走法数=第n-1位置走法数 + 第n-2位置走法数</p></blockquote><table><thead><tr><th>1-&gt;2</th><th>1</th><th>2-&gt;3</th><th>1</th><th>3-&gt;4</th><th>1</th></tr></thead><tbody><tr><td>1-&gt;3</td><td>2</td><td>2-&gt;4</td><td>2</td><td>3-&gt;5</td><td>2</td></tr><tr><td>1-&gt;4</td><td>3</td><td>2-&gt;5</td><td>3</td><td>3-&gt;6</td><td>3</td></tr><tr><td>1-&gt;5</td><td>5</td><td>2-&gt;6</td><td>5</td><td>3-&gt;7</td><td>5</td></tr><tr><td>1-&gt;6</td><td>8</td><td>2-&gt;7</td><td>8</td><td>3-&gt;8</td><td>8</td></tr></tbody></table><p>可以发现其中的规律：走法数一直是Fib数列，而值为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><msub><mi>N</mi><mrow><mi>t</mi><mi>o</mi></mrow></msub><mo>−</mo><msub><mi>N</mi><mrow><mi>f</mi><mi>r</mi><mi>o</mi><mi>m</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fib(N_{to} - N_{from})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>▲但这题还有一个难点在于用例的范围(0 &lt; a &lt; b &lt; 2<sup>31)，即b-a~=2</sup>32-1，为int最大范围，会导致的问题有两个</p><ol><li><p>fib数列通常使用数组来存储，但是无法开个2^32大小的数组</p><p>==&gt;滚动数组、递推（不用数组）</p></li><li><p>输出的Fib(n)就远远超过long long了，因此要么模拟大数相加，那么另寻他法。</p><p>==&gt;△还需要注意到的一点是,<strong>输出数据结果范围是 [0, 2^63)</strong>，那么意思是题目要求的输出其实是在long long 范围内的，那么就可以考虑截取输出了</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">// ll credit = 9.2e18;开的足够大能过样例就行</span></span><br><span class="line">ll credit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 幂计算</span></span><br><span class="line"><span class="comment"> * @author mrli 2019-10-27</span></span><br><span class="line"><span class="comment"> * @param  n [less than 63]</span></span><br><span class="line"><span class="comment"> * @return   [long long type]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        ans *= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Fib</span><span class="params">(<span class="keyword">int</span> del)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (del == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(del == <span class="number">2</span>)  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ll f1 = <span class="number">1</span>; ll f2=<span class="number">2</span>;</span><br><span class="line">        ll ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=del;i++)&#123;</span><br><span class="line"><span class="comment">// ans = f1 + f2 ;也过了</span></span><br><span class="line">            ans = ( f1%(credit) + f2%(credit) )%credit;</span><br><span class="line">            f1 = f2;</span><br><span class="line">            f2 = ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    credit = <span class="built_in">pow</span>(<span class="number">63</span>)<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>( n-- )&#123;</span><br><span class="line">        <span class="keyword">int</span> from, to;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; from &gt;&gt; to;</span><br><span class="line">        ll ans;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; Fib(to-from) &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了别人的题解后,发现想多了。题目的意思是<strong>得分点的输出值都在long long 范围内，而不是需要你把输出值压缩在long long范围内</strong>，果然去掉 %运算也过了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//蜜蜂寻路</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(x, n) memset(x,n,sizeof(x));</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL maxn = <span class="number">2147483648</span>+<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line">LL dp[<span class="number">3</span>]; <span class="comment">//滚动数组</span></span><br><span class="line"><span class="keyword">int</span> n, a, b;</span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ms(dp, <span class="number">0</span>);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>, dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; b-a+<span class="number">1</span>; i++)</span><br><span class="line">        dp[i%<span class="number">3</span>] = dp[<span class="number">0</span>]+dp[<span class="number">1</span>]+dp[<span class="number">2</span>]-dp[i%<span class="number">3</span>]; <span class="comment">//即dp[i]=dp[i-1]+dp][i-2]</span></span><br><span class="line"> </span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        ans = max(dp[i], ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; solve() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//从1到4和从2到5答案是一样的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分数运算"><a class="markdownIt-Anchor" href="#分数运算"></a> <a href="https://www.nowcoder.com/pat/2/problem/261" target="_blank" rel="noopener"> 分数运算</a></h3><blockquote><p>牛客网周赛做到过一次，感觉当时写的比现在的简单。难点在<strong>使用GCD进行约分</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 辗转相除法,求最大公约数</span></span><br><span class="line"><span class="comment"> * @author mrli 2019-10-28</span></span><br><span class="line"><span class="comment"> * @param  a [description]</span></span><br><span class="line"><span class="comment"> * @param  b [description]</span></span><br><span class="line"><span class="comment"> * @return   [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1,a2,b1,b2;</span><br><span class="line">    <span class="keyword">char</span> op3;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">scanf</span>(<span class="string">"%d/%d %d/%d %c"</span>, &amp;a1, &amp;a2, &amp;b1, &amp;b2, &amp;op3) != EOF)&#123;</span><br><span class="line">        <span class="keyword">int</span> fenmu;</span><br><span class="line">        <span class="keyword">int</span> fenzi;</span><br><span class="line">        <span class="keyword">if</span> (op3 == <span class="string">'+'</span>)&#123;</span><br><span class="line">            fenmu = a2*b2;</span><br><span class="line">            fenzi = a1*b2+a2*b1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op3 == <span class="string">'-'</span>)&#123;</span><br><span class="line">            fenmu = a2*b2;</span><br><span class="line">            fenzi = a1*b2-a2*b1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op3 == <span class="string">'*'</span>)&#123;</span><br><span class="line">            fenmu = a2*b2;</span><br><span class="line">            fenzi = a1*b1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">//if (op3 == '*')&#123;</span></span><br><span class="line">            fenmu = a2*b1;</span><br><span class="line">            fenzi = a1*b2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找出最大公因子,约分</span></span><br><span class="line">        <span class="keyword">int</span> common = gcd(fenmu,fenzi);</span><br><span class="line">        <span class="keyword">int</span> res_zi = fenzi/common;</span><br><span class="line">        <span class="keyword">int</span> res_mu = fenmu/common;</span><br><span class="line">        <span class="keyword">if</span> ( res_mu * res_zi &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">abs</span>(fenzi/common) &lt;&lt; <span class="string">'/'</span> &lt;&lt; <span class="built_in">abs</span>(fenmu/common) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">'-'</span> &lt;&lt;<span class="built_in">abs</span>(fenzi/common) &lt;&lt; <span class="string">'/'</span> &lt;&lt; <span class="built_in">abs</span>(fenmu/common) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分解因数"><a class="markdownIt-Anchor" href="#分解因数"></a> <a href="https://www.nowcoder.com/pat/2/problem/262" target="_blank" rel="noopener"> 分解因数</a></h3><blockquote><p>使用小学的短除法，我们很清楚的知道，要想求出它的每一个质因数，我们需要用质数去试除。<code>90</code>能被<code>2</code>整除，那就拿商继续除以<code>2</code>，除不尽就换<code>3</code>，一直到除到质数为止。基础代码框架类似判断质数，只是被判断的数字在过程中不断被除，最终循环结束的时候，那个被处理过的数字，就是最后一个质因数。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> tmpn = n;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">" = "</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(n); ++i)&#123;</span><br><span class="line">            <span class="keyword">while</span> ( tmpn%i == <span class="number">0</span> &amp;&amp; tmpn != i)&#123;</span><br><span class="line">                tmpn /= i;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" * "</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; tmpn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的第一次做法：</p><blockquote><p>一直TLE，估计这种的话，必须得线性筛，我搜了几个题解的结果也证明除了上述题解，其他的都是线性筛，上面的就比较巧妙</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">( <span class="keyword">int</span> num )</span></span>&#123;</span><br><span class="line">     <span class="comment">//两个较小数另外处理</span></span><br><span class="line">     <span class="keyword">if</span> (num==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">if</span>(num ==<span class="number">2</span>|| num==<span class="number">3</span> )</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">     <span class="comment">//不在6的倍数两侧的一定不是质数</span></span><br><span class="line">     <span class="keyword">if</span>(num %<span class="number">6</span>!= <span class="number">1</span>&amp;&amp;num %<span class="number">6</span>!= <span class="number">5</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     <span class="comment">//在6的倍数两侧的也可能不是质数</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">5</span>;i &lt;= <span class="built_in">sqrt</span>( num); i+=<span class="number">6</span> )</span><br><span class="line">         <span class="keyword">if</span>(num %i== <span class="number">0</span>||num %(i+ <span class="number">2</span>)==<span class="number">0</span> )</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">     <span class="comment">//排除所有，剩余的是质数</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">" = "</span> ;</span><br><span class="line">        <span class="keyword">int</span> tmpn = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tmpn;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> ( isPrime(i) &amp;&amp; n%i == <span class="number">0</span>)&#123;</span><br><span class="line">                n /= i;</span><br><span class="line">                <span class="keyword">if</span> (first) &#123;</span><br><span class="line">                    first = <span class="literal">false</span>;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; i ; </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt;  <span class="string">" * "</span> &lt;&lt; i ; </span><br><span class="line">                <span class="keyword">if</span> (n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="因子个数"><a class="markdownIt-Anchor" href="#因子个数"></a> <a href="https://www.nowcoder.com/pat/2/problem/264" target="_blank" rel="noopener">因子个数</a></h3><blockquote><p>用到了上题的结论，<strong>一个正整数总可以分解成一个或多个素数的积</strong>，一开始理解错题目了，以为是所有因数的个数，其实是<strong>因数的种数</strong>，比如20-&gt;2是因为2，2，5；30-&gt;3是因为2，3，5。</p><p>因此这边还是需要素数判别，卡的点也在这，要用线性筛，其实就是上题的回答方式不同罢了</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (tmp%i==<span class="number">0</span>)&#123;</span><br><span class="line">                tmp/=i;</span><br><span class="line">                <span class="keyword">if</span> (first)&#123;</span><br><span class="line">                    first = !first;</span><br><span class="line">                    ans ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    while( cin &gt;&gt; n)&#123;</span><br><span class="line">        int ans=0;</span><br><span class="line">        int tmp = n;</span><br><span class="line"></span><br><span class="line">        for (int i = 2; i &lt;= sqrt(n); ++i)&#123;</span><br><span class="line">            // bool first = true;</span><br><span class="line">            if (tmp%i==0)&#123;</span><br><span class="line">                while (tmp%i==0)&#123;</span><br><span class="line">                   tmp/=i;</span><br><span class="line">                &#125;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (tmp!=1) ans++;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skew数"><a class="markdownIt-Anchor" href="#skew数"></a> <a href="https://www.nowcoder.com/pat/2/problem/266" target="_blank" rel="noopener"> skew数</a></h3><blockquote><p>模拟题、实现一个幂运算</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        ans *= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; s )&#123;</span><br><span class="line">        <span class="keyword">int</span> size = s.size();</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i)&#123;</span><br><span class="line">            <span class="comment">/* code */</span></span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'2'</span>)&#123;</span><br><span class="line">                ans += <span class="number">2</span>*(pow2(size-i)<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += (s[i]-<span class="string">'0'</span>)*(pow2(size-i)<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一的个数"><a class="markdownIt-Anchor" href="#一的个数"></a> <a href="https://www.nowcoder.com/pat/2/problem/267" target="_blank" rel="noopener"> 一的个数</a></h3><blockquote><p>非常基础的一道题：r进制表示</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, r;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            <span class="keyword">if</span> (n%r==<span class="number">1</span>) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            n /= r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外星人的语言"><a class="markdownIt-Anchor" href="#外星人的语言"></a> <a href="https://www.nowcoder.com/pat/2/problem/268" target="_blank" rel="noopener"> 外星人的语言</a></h3><blockquote><p>r进制的拓展，需要将各位输出出来，由于是逆序的，所以需要一1.个栈来反转一下、或是2.使用string的反转功能</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, r;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            <span class="comment">// 0-9</span></span><br><span class="line">            <span class="keyword">char</span> c = n%r+<span class="number">48</span>;</span><br><span class="line">            <span class="keyword">if</span> (n%r&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">                <span class="comment">// A-F</span></span><br><span class="line">                c = n%r<span class="number">-10</span>+<span class="number">65</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n /= r;</span><br><span class="line">            <span class="comment">// 不直接cout，而是存栈</span></span><br><span class="line">            s.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">            <span class="comment">// 取出栈里的内容</span></span><br><span class="line">            <span class="keyword">char</span> c = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数位和"><a class="markdownIt-Anchor" href="#数位和"></a> <a href="https://www.nowcoder.com/pat/2/problem/270" target="_blank" rel="noopener"> 数位和</a></h3><blockquote><p>代码为<a href="#%E4%B8%80%E7%9A%84%E4%B8%AA%E6%95%B0">一的个数</a>+<a href="#%E5%A4%96%E6%98%9F%E4%BA%BA%E7%9A%84%E8%AF%AD%E8%A8%80">外星人的语言</a>的结合版。</p><p>题目要求，将数n，先表示成r进制的形式，然后再计算r进制下n的位数和，然后再用r进制来表示位数和的结果</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// ACM比赛中cin,的使用比较耗时,因为默认的时候，cin与stdin总是保持同步的，使用这句可以使cin达到和scanf相差无几的输入效率。</span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n, r;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            ans += n%r;</span><br><span class="line">            n /= r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">stack</span> &lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line">        <span class="keyword">while</span>(ans)&#123;</span><br><span class="line">            <span class="comment">// 0-9</span></span><br><span class="line">            <span class="keyword">char</span> c = ans%r+<span class="number">48</span>;</span><br><span class="line">            <span class="keyword">if</span> (ans%r&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">                <span class="comment">// A-F</span></span><br><span class="line">                c = ans%r<span class="number">-10</span>+<span class="number">65</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans /= r;</span><br><span class="line">            <span class="comment">// 不直接cout，而是存栈</span></span><br><span class="line">            s.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">            <span class="comment">// 取出栈里的内容</span></span><br><span class="line">            <span class="keyword">char</span> c = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进制回文数"><a class="markdownIt-Anchor" href="#进制回文数"></a> <a href="https://www.nowcoder.com/pat/2/problem/272" target="_blank" rel="noopener">进制回文数</a></h3><blockquote><p>还是r进制的拓展，</p><p>1.r需要用个2-16的循环<br>2.判断字符串的镜像对称s[i] != s[ssize-i-1]<br>3.踩了个坑,n每次都会被除到很小,因此需要用个临时变量来处理</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; N)&#123;</span><br><span class="line">        <span class="keyword">bool</span> yes=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">2</span>; r &lt;= <span class="number">16</span>; ++r)&#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="keyword">int</span> n = N;</span><br><span class="line">            <span class="keyword">while</span>(n)&#123;</span><br><span class="line">                <span class="keyword">char</span> c = n%r+<span class="number">48</span>;</span><br><span class="line">                <span class="keyword">if</span> (n%r&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">                    c = n%r<span class="number">-10</span>+<span class="number">65</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                n /= r;</span><br><span class="line">                s += c;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检测出r进制变换时,n已经被除的很小了,因此需要用个临时变量</span></span><br><span class="line">            <span class="comment">// cout &lt;&lt; r &lt;&lt; "进制：" &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">// for (int i = 0; i &lt; s.size(); ++i)</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     cout &lt;&lt; s[i] &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">//     /* code */</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="keyword">bool</span> mirror = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">int</span> ssize = s.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= ssize/<span class="number">2</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] != s[ssize-i<span class="number">-1</span>])&#123;</span><br><span class="line">                    mirror = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mirror)&#123;</span><br><span class="line">                 yes=<span class="literal">true</span>;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (yes) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发邮件"><a class="markdownIt-Anchor" href="#发邮件"></a> <a href="https://www.nowcoder.com/pat/2/problem/274" target="_blank" rel="noopener"> 发邮件</a></h3><blockquote><p>一道数学题，递推公式为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">[</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f(n) = (n-1)*[f(n-1)+f(n-2)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></p><p>坑点:超出了int，需要用longlong</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">email</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n<span class="number">-1</span>)*(email(n<span class="number">-1</span>)+email(n<span class="number">-2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; email(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="说反话-20"><a class="markdownIt-Anchor" href="#说反话-20"></a> <a href="https://www.nowcoder.com/pat/2/problem/4075" target="_blank" rel="noopener"> 说反话 (20)</a></h3><blockquote><p>考查了：对行的读取、字符串的切割。</p><p>本来还以为考了个string的反转，结果比想象中的更简单一点</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( getline(<span class="built_in">cin</span>, s) )&#123;</span><br><span class="line">        <span class="built_in">stringstream</span> strings;</span><br><span class="line">        <span class="built_in">string</span> tmps;</span><br><span class="line">        strings &lt;&lt; s;</span><br><span class="line">        <span class="keyword">while</span>( getline(strings, tmps, <span class="string">' '</span>) )&#123;</span><br><span class="line">            ss.push(tmps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!ss.empty())&#123;</span><br><span class="line">            <span class="built_in">string</span> couts = ss.top();</span><br><span class="line">            ss.pop();</span><br><span class="line">            <span class="keyword">if</span> (!ss.empty())</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; couts &lt;&lt;<span class="string">' '</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; couts ;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补充string的反转"><a class="markdownIt-Anchor" href="#补充string的反转"></a> 补充——string的反转：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*法一:使用string::reverse_iterator迭代器,直接用iterator会报错*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">string</span>::reverse_iterator it=couts.rbegin(); it != couts.rend() ; ++it)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*法二:使用algorithm算法中的reverse函数*/</span></span><br><span class="line"><span class="comment">// 会修改str中的内容</span></span><br><span class="line">reverse(str.begin(),str.end());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*法三:使用使用string.h中的strrev函数</span></span><br><span class="line"><span class="comment">△只能处理char[],不支持string类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">char</span> s[]=<span class="string">"hello"</span>;</span><br><span class="line">strrev(s);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*法四:自己编写*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=n<span class="number">-1</span>;i&lt;j;i++,j--)&#123;</span><br><span class="line">        <span class="keyword">char</span> c=s[i];</span><br><span class="line">        s[i]=s[j];</span><br><span class="line">        s[j]=c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一元多项式求导-25"><a class="markdownIt-Anchor" href="#一元多项式求导-25"></a> <a href="https://www.nowcoder.com/pat/2/problem/4076" target="_blank" rel="noopener">一元多项式求导 (25)</a></h3><blockquote><p>被读取方式卡了会</p><p>这边有个坑点: 忽略了常数项的问题<br>比如 输入 2 0<br>应该输出 0 0</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">exp</span>,coe;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;coe,&amp;<span class="built_in">exp</span>)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>,coe*<span class="built_in">exp</span>,<span class="built_in">exp</span><span class="number">-1</span>);</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="literal">false</span>) <span class="built_in">printf</span>(<span class="string">"0 0\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>别人的处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> coef;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">&#125;<span class="keyword">typedef</span> poly;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> coef;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;poly&gt; q;</span><br><span class="line">    <span class="comment">// scanf和getchar合用比较方便,cin再用getchar无效</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;coef, &amp;index) != EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span> (index!=<span class="number">0</span>)&#123;</span><br><span class="line">            poly *p = <span class="keyword">new</span> poly();</span><br><span class="line">            p-&gt;coef = coef*index;</span><br><span class="line">            p-&gt;index = index<span class="number">-1</span> ;</span><br><span class="line">            q.push(*p);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 放最后能过,放最初的时候有些过不了</span></span><br><span class="line">        <span class="keyword">if</span> (getchar()==<span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (q.size()==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"0 0\n"</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            poly p = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">if</span> (p.coef != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (q.empty())</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, p.coef, p.index );</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d "</span>, p.coef, p.index );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷完了牛客网PAT乙级练习题的第一、第三页。大多都是些模拟题、简单题，相当于弱一点的蓝桥杯省赛。由于报名考的是甲级，所以就没继续做下去了…</p><h2 id="甲级练习题"><a class="markdownIt-Anchor" href="#甲级练习题"></a> 甲级练习题</h2><h3 id=""><a class="markdownIt-Anchor" href="#"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805528788582400" target="_blank" rel="noopener">  <strong>1001</strong> <strong>A+B Format</strong> <strong>(20</strong> <strong>分</strong>**)** </a></h3><blockquote><p>看似很简单的一道题，但坑点确实不少，一遍过挺难的</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll m, n;</span><br><span class="line">    <span class="comment">// 考虑到每次都是取后三位，所以需要用栈来逆序输出</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;ll&gt; s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;m,&amp;n) != EOF)&#123;</span><br><span class="line">        ll res_ans = m + n;</span><br><span class="line">        <span class="comment">// 这边0得特判</span></span><br><span class="line">        <span class="keyword">if</span> (res_ans==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (res_ans&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> ;</span><br><span class="line">        ll ans = <span class="built_in">abs</span>(res_ans);</span><br><span class="line">        <span class="keyword">while</span>( ans )&#123;</span><br><span class="line">            ll three = ans%<span class="number">1000</span>;</span><br><span class="line">            s.push(three);</span><br><span class="line">            ans /= <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 逆序输出</span></span><br><span class="line">        <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">            ll n = s.top();</span><br><span class="line">            s.pop();  </span><br><span class="line">            <span class="comment">// 首个三位不需要补零，其他的都需要补零</span></span><br><span class="line">            <span class="keyword">if</span> (first) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld"</span>, n);</span><br><span class="line">                first = !first;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%03lld"</span>, n);</span><br><span class="line">            <span class="keyword">if</span> (!s.empty()) <span class="built_in">printf</span>(<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1002-ab-for-polynomials"><a class="markdownIt-Anchor" href="#1002-ab-for-polynomials"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000" target="_blank" rel="noopener">1002  A+B for Polynomials</a></h3><blockquote><p>模拟题，对我来说，又重新温习了遍Map的使用。</p><p>该题就一个坑点：系数为0的项不需要显示。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">float</span>&gt; mp;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">float</span>&gt;::iterator i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">float</span> coef;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">exp</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %f"</span>, &amp;<span class="built_in">exp</span>, &amp;coef);</span><br><span class="line">        mp[<span class="built_in">exp</span>] = coef;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">        <span class="comment">// 两个临时变量</span></span><br><span class="line">        <span class="keyword">float</span> coef;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">exp</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %f"</span>, &amp;<span class="built_in">exp</span>, &amp;coef);</span><br><span class="line">        i = mp.find(<span class="built_in">exp</span>);</span><br><span class="line">        <span class="keyword">if</span> ( i != mp.end() )&#123;</span><br><span class="line">            <span class="keyword">float</span> sum = i-&gt;second + coef;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">abs</span>( sum - <span class="number">0</span>) &lt; <span class="number">1e-6</span> )&#123;</span><br><span class="line">                <span class="comment">// △坑点:如果系数为0,不显示</span></span><br><span class="line">                mp.erase(<span class="built_in">exp</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> mp[<span class="built_in">exp</span>] = sum;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           mp[<span class="built_in">exp</span>] = coef; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从小到大输出</span></span><br><span class="line">    <span class="comment">// for ( i = mp.begin(); i != mp.end(); ++i)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, mp.size());</span><br><span class="line">    <span class="comment">// 使用反向迭代器-&gt;从大到小输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">float</span>&gt;::reverse_iterator i = mp.rbegin(); i != mp.rend(); ++i)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d %.1f"</span>, i-&gt;first, i-&gt;second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1003-emergency"><a class="markdownIt-Anchor" href="#1003-emergency"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805523835109376" target="_blank" rel="noopener"> 1003  Emergency</a></h3><p>作为一个城市紧急援救队的指挥者，你得到了一个国家的特殊地图。地图上分散着几座城市，城市间用道路连接着。每个城市援救队的数量以及两座城市之间每条道路的长度已经在地图上标出。当某些城市发生了突发事件，需要你的帮助时，你的工作是带领你的队伍尽快的赶到事发现场，与此同时，召集尽可能多的在路上的队伍。</p><p><strong>输入</strong></p><p>每个输入文件包含一个测试实例。每个实例的第一行有四个正整数：N(&lt;= 500)是城市的个数（城市的编号从0到N-1），M是道路的个数，C1和C2分别是你现在所在的城市以及你必须去救援的城市。下一行有N个整数，第i个整数是第i个城市中救援队的数量。然后下面有M行，每行表示一条道路。每一行有三个整数c1,c2和L，分别表示道路连接的两个城市以及道路的长度。保证C1到C2之间存在至少一条路径。</p><p><strong>输出</strong></p><p>对于每个测试实例，在一行中输出两个数字：C1和C2之间不同的最短路径的个数，你能聚集起来的最多的救援队数量。</p><p>一行中的所有数字必须被一个空格分隔开，在每行的结尾不允许出现空格。</p><blockquote><p>思路：本题是求起点到目标点的最短路径的数目，以及所有最短路径中点权的最大值，可用dijkstra算法</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s, d;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*关于起点为s的路径的变量(记录的都是以 起点s 为中心的量)：</span></span><br><span class="line"><span class="comment">pathl(path_length缩写)存储从起点到所有点的最短路径的边权(本例为起点城市到所有城市的最短路径的距离) ————最短路</span></span><br><span class="line"><span class="comment">maxv(max_hands缩写)存储从起点到其他点的全部最短路径中的点权最大值(本例为起点城市到其他城市的所有最短路径中 </span></span><br><span class="line"><span class="comment">    即人手最多的那条路径的人手数)  ———— 最短路中能获得最大权值的节点权值e.g.maxv[3]即s-&gt;3能获得的最大权值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">▲核心思想是根据路径最短来更新的,所以即使v' &lt; v, 但只要l' &lt; l,那么也会更新。即@77代码处</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">pathc(path_count缩写)存储从起点到其他点的最短路径的数目； </span></span><br><span class="line"><span class="comment">△根据题意,额外需要维护的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> pathc[maxn];</span><br><span class="line"><span class="keyword">int</span> pathl[maxn];</span><br><span class="line"><span class="keyword">int</span> maxv[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 图信息的变量 */</span></span><br><span class="line"><span class="comment">// e(edges):点间的边关系, 初始化默认为0</span></span><br><span class="line"><span class="comment">// visited:判断v是否被访问过</span></span><br><span class="line"><span class="comment">// 存放节点v权值的量, node_value</span></span><br><span class="line"><span class="keyword">int</span> e[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> visited[maxn];</span><br><span class="line"><span class="keyword">int</span> value[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [dijkstra description]</span></span><br><span class="line"><span class="comment"> * dijkstra求最短路径的特点是探索当前节点-&gt;下个节点,边权值最小的将被当做下个节点</span></span><br><span class="line"><span class="comment"> * 最终可以找出节点s到所有节点的最短路径</span></span><br><span class="line"><span class="comment"> * 原理:根据初始点，挨个的把离初始点最近的点一个一个找到并加入集合,集合中所有的点的d[i]都是该点到初始点最短路径长度</span></span><br><span class="line"><span class="comment"> * @author mrli 2019-11-09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这份dijkstra的思路为:</span></span><br><span class="line"><span class="comment">        第一次, for1先遍历选中一个节点v, 然后使用for2找到遍历, 找到与v路径最短的下一个节点v', then更新</span></span><br><span class="line"><span class="comment">        第二次, for1那么根据与下个节点路径最短的规则,还是会找到v', 因此minI=v', 然后再找v''</span></span><br><span class="line"><span class="comment">    第二种:</span></span><br><span class="line"><span class="comment">        先安排节点s, 设个while(1) 以外的节点, 保存当前节点v编号, 然后遍历,tmpv为需要更新的节点的编号</span></span><br><span class="line"><span class="comment">        区别在于 </span></span><br><span class="line"><span class="comment">        法一:当前的v未访问过,所以设置visited[v]=1,然后找下一个tmpv,在下次的while循环的时候再设置visited</span></span><br><span class="line"><span class="comment">        法二:当前的v已经是visited==1, 在找到tmpv后直接设置visited[tmpv]=1,</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 初始化数组</span></span><br><span class="line">    fill(pathl, pathl+ maxn, INF);</span><br><span class="line">    pathc[s] = <span class="number">1</span>;</span><br><span class="line">    pathl[s] = <span class="number">0</span>;</span><br><span class="line">    maxv[s] = value[s];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">/*找出本轮尚未确定最短路径的城市中，起点到剩余城市中，距离最小minl的那个城市minI。</span></span><br><span class="line"><span class="comment">        如果minl是无穷大，证明起点城市与剩余城市均不可达，即不连通；</span></span><br><span class="line"><span class="comment">        如果minI就是目标城市d，则表明已经确定起点城市到目标城市的最短路径，提前结束寻找。</span></span><br><span class="line"><span class="comment">        否则，将本轮能确定最短路径的城市minI设为已经处理好,v[minI]=1；</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">int</span> minl = INF, minI = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 以s节点为例, 先遍历边其他未访问过的节点,找到其中边权值最小的作为下一个访问节点</span></span><br><span class="line">        <span class="comment">// 首先第一个访问的肯定是s节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (pathl[i] &lt; minl)&#123;</span><br><span class="line">                minl = pathl[i];</span><br><span class="line">                minI = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 终止条件:</span></span><br><span class="line">        <span class="comment">// 1.在 dijkstra 算法里, 如果节点已经判断到终点了, 那么到终点的最短路径就已经被计算出来了,此时可以结束</span></span><br><span class="line">        <span class="comment">// 2.当前循环全是Visited == 1的节点,所有节点都被遍历过了, 循环结束</span></span><br><span class="line">        <span class="keyword">if</span> (minI == d || minl== INF) <span class="keyword">break</span>;</span><br><span class="line">        visited[minI] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// minI节点-&gt;下个节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="comment">// 在未达、且可达的节点中考虑，否则continue</span></span><br><span class="line">            <span class="keyword">if</span>( visited[i] == <span class="number">1</span> || e[minI][i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 当节点minI的最短路径 + 当前minI-&gt;下一个节点的边权值</span></span><br><span class="line">            <span class="keyword">int</span> tmpl = pathl[minI] + e[minI][i];</span><br><span class="line">            <span class="keyword">int</span> tmpv = value[i] + maxv[minI];</span><br><span class="line">            <span class="comment">// 判断是否要更新, 如果当前路径l小于之前的话,那么更新</span></span><br><span class="line">            <span class="keyword">if</span>(tmpl &lt; pathl[i])&#123;</span><br><span class="line">                pathl[i] = tmpl;</span><br><span class="line">                maxv[i] = tmpv;</span><br><span class="line">                pathc[i] = pathc[minI];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果长度是相等的,那么最大化Value</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (tmpl == pathl[i])&#123;</span><br><span class="line">                pathc[i] += pathc[minI];</span><br><span class="line">                <span class="keyword">if</span> (tmpv &gt; maxv[i]) maxv[i] = tmpv;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;n, &amp;m, &amp;s, &amp;d);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;value[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> v1, v2, l;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;v1, &amp;v2, &amp;l);</span><br><span class="line">        e[v1][v2] = l;</span><br><span class="line">        e[v2][v1] = l;</span><br><span class="line">    &#125;</span><br><span class="line">    dijkstra();</span><br><span class="line">    <span class="comment">// 最短的路径, 最大的权值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, pathc[d], maxv[d]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/yeziand01/article/details/80716688" target="_blank" rel="noopener">大佬的代码(带注释)</a></p><h3 id="1004-counting-leaves"><a class="markdownIt-Anchor" href="#1004-counting-leaves"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805521431773184" target="_blank" rel="noopener"> 1004 Counting Leaves</a></h3><p>一个家庭的层级结构经常被表现为一个家谱树。你的任务是统计这些家庭成员中谁没有孩子。</p><p><strong>输入</strong></p><p>每个输入文件包含一个测试实例。每个实例开始的一行包含N和M，N指树中的结点个数（0&lt;N&lt;100），M指非叶结点的个数。然后下面有M行，每行的格式如下：</p><p>ID K ID[1] ID[2] …ID[K]</p><p>ID是一个两位数的数字，表示一个非叶结点。K表示其孩子的数量。随后是一个序列，序列中是该结点的孩子结点的两位数ID。为了简单起见，我们把根结点的ID固定为01。</p><p><strong>输出</strong></p><p>对于每个测试实例，你应该计算从根结点开始的每一层中没有孩子的家庭成员的个数。数字必须在一行内输出，用空格分隔，在每行结尾不能有多余的空格。</p><p>测试样例表示了一个只有两个结点的树，01是根结点，02是它仅有的孩子。因此在根结点01层级，没有叶节点。再下一层级，有一个叶结点。然后我们应该在一行内输出“0 1”。</p><blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1005-spell-it-right"><a class="markdownIt-Anchor" href="#1005-spell-it-right"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805519074574336" target="_blank" rel="noopener">1005 Spell It Right</a></h3><blockquote><p>感觉突然来了一道放水题，就纯模拟</p><p>坑点：全0的时候特判为zero</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100 + 5</span></span><br><span class="line"><span class="keyword">int</span> arr[maxn];</span><br><span class="line"><span class="built_in">string</span> num[<span class="number">10</span>] = &#123;<span class="string">"zero"</span> ,<span class="string">"one"</span> ,<span class="string">"two"</span> ,<span class="string">"three"</span>, <span class="string">"four"</span> ,<span class="string">"five"</span>, <span class="string">"six"</span>, <span class="string">"seven"</span>, <span class="string">"eight"</span>, <span class="string">"nine"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( ch != <span class="string">'\n'</span> )&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = ch - <span class="string">'0'</span>;</span><br><span class="line">        sum += tmp;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 坑点,需要特判0</span></span><br><span class="line">    <span class="keyword">if</span>(sum==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"zero\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(sum)&#123;</span><br><span class="line">            <span class="keyword">int</span> ge = sum %<span class="number">10</span>;</span><br><span class="line">            sum /= <span class="number">10</span>;</span><br><span class="line">            s.push(ge);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> ans = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="keyword">if</span> (first)  &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s"</span>, num[ans].c_str());</span><br><span class="line">                first = !first;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" %s"</span>, num[ans].c_str());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲小结一下: 每次用while来取位的时候，必须先判断while(xxx)中的xxx是否初始就为0</p><h3 id="1006-sign-in-and-sign-out-25-分"><a class="markdownIt-Anchor" href="#1006-sign-in-and-sign-out-25-分"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805516654460928" target="_blank" rel="noopener">1006 Sign In and Sign Out (25 分)</a></h3><blockquote><p>更加简单的模拟题，由于string的比较特性可以直接用来比较时间，所以处理很方便</p><p>△学会使用algorithm里的sort能省很多时间</p><p>▲比较运算符&lt;重载、或是编写外部比较函数，都会按照return里为true的逻辑排序,<a href="http://xn--first-gv5i.xxx" target="_blank" rel="noopener">如first.xxx</a> &lt; second.xxx那么就是从小到大</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">record</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> id;</span><br><span class="line">    <span class="built_in">string</span> intime;</span><br><span class="line">    <span class="built_in">string</span> outtime;</span><br><span class="line">&#125;<span class="keyword">typedef</span> rc;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照进入的时间排序, 从小到大</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpin</span><span class="params">(<span class="keyword">const</span> rc&amp; f, <span class="keyword">const</span> rc&amp; s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f.intime &lt; s.intime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照出去的时间排序, 从大到小</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpout</span><span class="params">(<span class="keyword">const</span> rc&amp; f, <span class="keyword">const</span> rc&amp; s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f.outtime &gt; s.outtime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;rc&gt; v;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;rc&gt;::iterator it;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        rc* p = <span class="keyword">new</span> rc();</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p-&gt;id &gt;&gt; p-&gt;intime &gt;&gt; p-&gt;outtime;</span><br><span class="line">        v.emplace_back(*p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(v.begin(), v.end(), cmpin);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.begin()-&gt;id &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    sort(v.begin(), v.end(), cmpout);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.begin()-&gt;id &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// for(it = v.begin(); it!= v.end(); it++)&#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; it-&gt;id &lt;&lt; " "&lt;&lt;  it-&gt;intime &lt;&lt;" "&lt;&lt; it-&gt;outtime &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/erd8888/article/details/88795843" target="_blank" rel="noopener">C++中sort的比较函数写法</a></p><p>注意：比较函数必须写在类外部（全局区域）或声明为静态函数</p><h3 id="1007-maximum-subsequence-sum"><a class="markdownIt-Anchor" href="#1007-maximum-subsequence-sum"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805514284679168" target="_blank" rel="noopener"> 1007  Maximum Subsequence Sum</a></h3><h3 id="1008-elevator"><a class="markdownIt-Anchor" href="#1008-elevator"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805511923286016" target="_blank" rel="noopener"> 1008  Elevator</a></h3><blockquote><p>模拟</p></blockquote><h3 id="1009-product-of-polynomials"><a class="markdownIt-Anchor" href="#1009-product-of-polynomials"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805509540921344" target="_blank" rel="noopener"> 1009  Product of Polynomials</a></h3><blockquote><p>模拟题</p></blockquote><h3 id="1010-radix"><a class="markdownIt-Anchor" href="#1010-radix"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805507225665536" target="_blank" rel="noopener"> 1010 Radix</a></h3><blockquote><p>模拟题</p></blockquote><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805504927186944" target="_blank" rel="noopener"> 1011  World Cup Betting</a></p><blockquote><p>模拟题</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">games</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> one, two, three;</span><br><span class="line">&#125;<span class="keyword">typedef</span> Gm;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">double</span> win=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">double</span> arr[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span> maxi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>,&amp;arr[<span class="number">0</span>], &amp;arr[<span class="number">1</span>], &amp;arr[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">3</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[maxi])&#123;</span><br><span class="line">                maxi = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        v.emplace_back(maxi);</span><br><span class="line">        win *= arr[maxi];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(it= v.begin(); it!= v.end(); it++)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(*it)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"W "</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"T "</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"L "</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, (win*<span class="number">0.65</span> - <span class="number">1</span>)*<span class="number">2</span> );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1012-the-best-rank"><a class="markdownIt-Anchor" href="#1012-the-best-rank"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805502658068480" target="_blank" rel="noopener"> 1012  The Best Rank</a></h3><h3 id="-2"><a class="markdownIt-Anchor" href="#-2"></a> </h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">// c m e a</span></span><br><span class="line">    <span class="keyword">int</span> g[<span class="number">4</span>], r[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">4</span>] = &#123;<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'M'</span>, <span class="string">'E'</span>&#125;;</span><br><span class="line">&#125;<span class="keyword">typedef</span> stu;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;stu&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(stu &amp;f1 , stu &amp;f2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f1.g[num] &gt; f2.g[num];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getRank</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j)&#123;</span><br><span class="line">        sort(v.begin(), v.end(), cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)&#123;</span><br><span class="line">            v.at(i).r[num] = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maxRank</span><span class="params">(<span class="keyword">const</span> stu *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> best_rank = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s-&gt;r[i] &lt; s-&gt;r[best_rank]) best_rank = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s-&gt;r[best_rank] &lt;&lt; <span class="string">" "</span> &lt;&lt; s-&gt;c[best_rank] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt;M;</span><br><span class="line">    <span class="comment">// scanf("%d%d", &amp;N, &amp;M);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)&#123;</span><br><span class="line">        stu *s = <span class="keyword">new</span> stu();</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s-&gt;id &gt;&gt; s-&gt;g[<span class="number">1</span>] &gt;&gt; s-&gt;g[<span class="number">2</span>] &gt;&gt; s-&gt;g[<span class="number">3</span>]; </span><br><span class="line">        s-&gt;g[<span class="number">0</span>] = (s-&gt;g[<span class="number">1</span>] + s-&gt;g[<span class="number">2</span>]+ s-&gt;g[<span class="number">3</span>])/<span class="number">3</span>; </span><br><span class="line">        v.emplace_back(*s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getRank();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmpid;</span><br><span class="line">        <span class="keyword">bool</span> find=<span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tmpid;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span> ( v.at(i).id == tmpid) &#123;</span><br><span class="line">                maxRank(&amp;v.at(i));</span><br><span class="line">                find=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!find) <span class="built_in">cout</span> &lt;&lt; <span class="string">"N/A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1013-battle-over-cities"><a class="markdownIt-Anchor" href="#1013-battle-over-cities"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805500414115840" target="_blank" rel="noopener"> 1013  Battle Over Cities</a></h3><h3 id="1014-waiting-in-line"><a class="markdownIt-Anchor" href="#1014-waiting-in-line"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805498207911936" target="_blank" rel="noopener"> 1014  Waiting in Line</a></h3><h3 id="1018-public-bike-management"><a class="markdownIt-Anchor" href="#1018-public-bike-management"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805489282433024" target="_blank" rel="noopener"> 1018  Public Bike Management</a></h3><h3 id="1081-rational-sum"><a class="markdownIt-Anchor" href="#1081-rational-sum"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805386161274880" target="_blank" rel="noopener">1081  Rational Sum</a></h3><blockquote><p>分数计算的加强版，多个分数相加。我采用了一次性计算，其实可以直接用乙级的做法，两个两个依次计算。</p><p>▲牛客网和PTA的样例点真的不一样，PTA上我有一个点过不了，但牛客的都能过</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fenshu</span>&#123;</span></span><br><span class="line">    ll fenmu;</span><br><span class="line">    ll fenzi;</span><br><span class="line">&#125;<span class="keyword">typedef</span> Fenshu;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到分子和分母的最大公因数</span></span><br><span class="line"><span class="function">ll <span class="title">biggestNum</span><span class="params">(ll a, ll b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> biggestNum(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到分子和分母的最小公倍数</span></span><br><span class="line"><span class="function">ll <span class="title">smallestNum</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*b/biggestNum(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Fenshu&gt; v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) != EOF)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            Fenshu *fs = <span class="keyword">new</span> Fenshu();</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld/%lld"</span>,&amp;fs-&gt;fenzi,&amp;fs-&gt;fenmu);</span><br><span class="line">            v.emplace_back(*fs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到所有分母的最小公倍数</span></span><br><span class="line">        ll mul = v.begin()-&gt;fenmu;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Fenshu&gt;::iterator i = v.begin(); i != v.end(); ++i)&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Fenshu&gt;::iterator nx = <span class="built_in">std</span>::next(i,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nx != v.end())&#123;</span><br><span class="line">                mul = smallestNum(mul, nx-&gt;fenmu);</span><br><span class="line">                <span class="comment">// printf("i-&gt;fenmu:%lld, nx-&gt;fenmu:%lld, tmp_mul:%lld\n", i-&gt;fenmu, nx-&gt;fenmu, tmp_mul);</span></span><br><span class="line"><span class="comment">// 错误尝试写法：思路错了:变成了找到两个分母最小公倍数中最大的</span></span><br><span class="line">                <span class="comment">// if (mul &lt; tmp_mul) &#123;</span></span><br><span class="line">                    <span class="comment">// printf("tmp_biggest:%lld\n", tmp_biggest);</span></span><br><span class="line">                    <span class="comment">// mul = tmp_mul;</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 相加再约分</span></span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Fenshu&gt;::iterator i = v.begin(); i != v.end(); ++i)&#123;</span><br><span class="line">            <span class="comment">// printf("%lld,%lld\n",i-&gt;fenzi, i-&gt;fenmu );</span></span><br><span class="line">            sum +=  i-&gt;fenzi*mul/(i-&gt;fenmu);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sum == <span class="number">0</span>)&#123;  <span class="comment">// 采坑1:除0问题</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 由于读取的设定,所以其实只有分子会是负数, yue也可能是负数</span></span><br><span class="line">            ll yue = <span class="built_in">abs</span>(biggestNum(sum, mul));</span><br><span class="line">            ll res_fenzi = sum/yue;</span><br><span class="line">            ll res_fenmu = mul/yue;</span><br><span class="line">            <span class="comment">// printf("sum:%lld\n", sum);</span></span><br><span class="line">            <span class="comment">// printf("%lld,%lld/%lld\n", yue, res_fenzi, res_fenmu);</span></span><br><span class="line">            <span class="comment">// printf("biggest:%lld\n", mul);</span></span><br><span class="line">            <span class="comment">// 需要化成真分数--&gt;采坑2:分子和为负数</span></span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">abs</span>(res_fenzi) &gt; res_fenmu) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res_fenzi%res_fenmu == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res_fenzi/res_fenmu);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld %lld/%lld\n"</span>, res_fenzi/res_fenmu, res_fenzi%res_fenmu, res_fenmu);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>, res_fenzi, res_fenmu);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        v.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▲判断迭代器是否为空:就是拿返回的迭代器与.end()作比较。</p><p>踩坑记录：</p><ul><li>负数求余仍是负数,0求余任何数为0</li><li>分子为负数、0、正数的时候都得分别考虑</li><li>找到所有分母的最小公倍数==&gt;写成了找到两个分母最小公倍数中最大的</li></ul><p><strong>浮点错误的意思-PAT 、OJ</strong></p><ul><li>是否可能出现了一个数除以0的情况</li><li>是否可能出现了一个数取余0的情况</li><li>是否发生了数据溢出而导致的除以0或者取余0的情况</li></ul><h3 id="1083-list-grades-25"><a class="markdownIt-Anchor" href="#1083-list-grades-25"></a> <a href="https://www.nowcoder.com/pat/1/problem/4313" target="_blank" rel="noopener">1083 List Grades (25)</a></h3><blockquote><p>模拟题</p><p>考了输入输出+排序： 切割数据、操作符重载</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> N</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Record</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> id;</span><br><span class="line">    <span class="keyword">int</span>  grade;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 操作符重载</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Record &amp;that) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade &gt; that.grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">typedef</span> Record;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> row;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Record&gt; v;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="comment">// 获得行信息</span></span><br><span class="line">        getline(<span class="built_in">cin</span>, row);</span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(row)</span></span>;</span><br><span class="line"><span class="comment">// 分割出name</span></span><br><span class="line">        <span class="built_in">string</span> name;</span><br><span class="line">        getline(ss, name, <span class="string">' '</span>);</span><br><span class="line"><span class="comment">// 分割出id</span></span><br><span class="line">        <span class="built_in">string</span> id;</span><br><span class="line">        getline(ss, id, <span class="string">' '</span>);</span><br><span class="line"><span class="comment">// 通过stringstream分割出grade: int</span></span><br><span class="line">        <span class="keyword">int</span> grade;</span><br><span class="line">        ss &gt;&gt; grade;</span><br><span class="line"><span class="comment">// 存到vector中</span></span><br><span class="line">        Record* r = <span class="keyword">new</span> Record();</span><br><span class="line">        r-&gt;name = name;</span><br><span class="line">        r-&gt;id = id;</span><br><span class="line">        r-&gt;grade = grade;</span><br><span class="line">        v.emplace_back(*r);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 根据grade进行从大到小排序</span></span><br><span class="line">    sort(v.begin(), v.end());</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">bool</span> none = <span class="literal">true</span>; <span class="comment">// 是否有在区间中人</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (v[i].grade &gt;= a &amp;&amp; v[i].grade &lt;= b)&#123;</span><br><span class="line">            none = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; v[i].name &lt;&lt; <span class="string">" "</span> &lt;&lt; v[i].id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有符合条件的人</span></span><br><span class="line">    <span class="keyword">if</span> (none) <span class="built_in">cout</span> &lt;&lt; <span class="string">"NONE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此巩固复习一下&quot;操作符重载的知识&quot;:</p><blockquote><p>1.为了实现对自定义类型的加减操作。</p><ol start="2"><li>实现一个操作符重载的方式通常分为两种情况：</li></ol><ul><li><p>将操作符重载实现为类的成员函数；</p><ul><li>使用<code>O.operator#();</code></li></ul></li><li><p>操作符重载实现为非类的成员函数（即全局函数）。</p><ul><li>使用 <code>operator#(O);</code></li></ul><p>区别在于，成员函数默认有this指针；后者需要为每次操作传递两个参数</p></li></ul></blockquote><p>△大多数操作符都能重载，不能的为如下几个：<code>：</code>、<code>::</code>、<code>.*</code>、<code>?:</code>、<code>sizeof</code></p><p>▲重载运算符函数可以对运算符作出新的解释，但原有基本语义不变：</p><blockquote><p>不改变运算符的优先级<br>不改变运算符的结合性<br>不改变运算符所需要的操作数<br>不能创建新的运算符</p></blockquote><p>△一个运算符被重载后，原有意义没有失去，只是定义了相对一特定类的一个新运算符</p><p>++前缀、后缀</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 重载前缀递增运算符（ ++ ）： 不传参</span></span><br><span class="line">      Time <span class="keyword">operator</span>++ ()  </span><br><span class="line">      &#123;</span><br><span class="line">         ++minutes;          <span class="comment">// 对象加 1</span></span><br><span class="line">         <span class="keyword">if</span>(minutes &gt;= <span class="number">60</span>)  </span><br><span class="line">         &#123;</span><br><span class="line">            ++hours;</span><br><span class="line">            minutes -= <span class="number">60</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> Time(hours, minutes);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 重载后缀递增运算符（ ++ ）: 传参</span></span><br><span class="line">      Time <span class="keyword">operator</span>++( <span class="keyword">int</span> )         </span><br><span class="line">      &#123;</span><br><span class="line">         <span class="comment">// 保存原始值</span></span><br><span class="line">         <span class="function">Time <span class="title">T</span><span class="params">(hours, minutes)</span></span>;</span><br><span class="line">         <span class="comment">// 对象加 1</span></span><br><span class="line">         ++minutes;                    </span><br><span class="line">         <span class="keyword">if</span>(minutes &gt;= <span class="number">60</span>)</span><br><span class="line">         &#123;</span><br><span class="line">            ++hours;</span><br><span class="line">            minutes -= <span class="number">60</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 返回旧的原始值</span></span><br><span class="line">         <span class="keyword">return</span> T; </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>io操作符：</p><blockquote><p>▲<code>&lt;&lt;</code>操作符只能通过友元来实现</p><p>A： 如果要重载&lt;&lt;操作符输出结果，一般的写法是cout&lt;&lt;s;也即是说左侧不是<strong>成员函数</strong>或<strong>类可以通过this指针调用的量</strong>，这就造成必须使用两个参数的成员操作符重载，把第一个参数作为&lt;&lt;左侧参数，第二个参数做为&lt;&lt;右侧参数输入，然而会发现如： <code>ostream&amp; operator&lt;&lt;(ostream&amp; out, MyString&amp; s);*//报错，error:此运算符的参数太多*</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xxx</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> Complax &amp;c1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> Complax &amp;c1)&#123;</span><br><span class="line">    out &lt;&lt; <span class="string">"c1.a = "</span> &lt;&lt; c1.a &lt;&lt; <span class="string">"\t c1.b = "</span> &lt;&lt; c1.b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1099-build-a-binary-search-tree"><a class="markdownIt-Anchor" href="#1099-build-a-binary-search-tree"></a> <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805367987355648" target="_blank" rel="noopener"> 1099  Build A Binary Search Tree</a></h3><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h2><p><a href="https://blog.csdn.net/zxc1364787928/article/details/85757131" target="_blank" rel="noopener">刷PAT好用到哭的函数</a></p><p><strong>好用的函数</strong></p><p>string-&gt;int</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法一</span></span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line"><span class="built_in">string</span> s = <span class="string">"123"</span>;</span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss &gt;&gt; grade;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法二</span></span><br><span class="line">stoi() <span class="comment">// 在cstring中</span></span><br></pre></td></tr></table></figure><p>int-&gt;string</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法一</span></span><br><span class="line">to_string()<span class="comment">// C++11之后才支持</span></span><br><span class="line"><span class="comment">// 法二</span></span><br><span class="line">itos()   <span class="comment">// cstring中</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pat冲冲冲&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pat冲冲冲&quot;&gt;&lt;/a&gt; PAT冲冲冲&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/9948053
      
    
    </summary>
    
    
      <category term="ACM" scheme="https://nymrli.top/tags/ACM/"/>
    
      <category term="C++" scheme="https://nymrli.top/tags/C/"/>
    
      <category term="Algorithm" scheme="https://nymrli.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>软件测试笔记</title>
    <link href="https://nymrli.top/2019/10/18/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
    <id>https://nymrli.top/2019/10/18/软件测试笔记/</id>
    <published>2019-10-18T13:03:29.000Z</published>
    <updated>2019-11-02T02:05:36.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件测试笔记"><a class="markdownIt-Anchor" href="#软件测试笔记"></a> 软件测试笔记</h1><h2 id="移动应用测试"><a class="markdownIt-Anchor" href="#移动应用测试"></a> 移动应用测试</h2><h3 id="appnium使用"><a class="markdownIt-Anchor" href="#appnium使用"></a> appnium使用</h3><blockquote><p>安装的是appnium-desktop,没有教程中所说的<code>Appium/node_modules/.bin/</code>路径，使用命令行输入<code>appnium</code>和<code>appium-doctor</code>也都没啥反应，后来索性没管，直接跑代码</p></blockquote><h4 id="真机测试"><a class="markdownIt-Anchor" href="#真机测试"></a> 真机测试</h4><p>使用的时候报错<code>Build info: version: 'unknown', revision: 'unknown', time: 'unknown'</code>，以为是appnium版本的问题，第一次安装的是1.13，后来换成了1.9，其实没多大区别，只不过据说要保证版本在1.6以上。</p><p>更换版本后，发现还是<code>Build info: version: 'unknown', revision: 'unknown', time: 'unknown'</code>问题，于是试了多次，才终于解决。</p><p>步骤一：</p><blockquote><p>这边是设置appnium连接参数的</p></blockquote><p>由于群里的高分脚本也是这么设置的，我就以为没多大问题，其实这边还是要修改不少东西的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置自动化相关参数</span></span><br><span class="line">DesiredCapabilities capabilities = <span class="keyword">new</span> DesiredCapabilities();</span><br><span class="line">capabilities.setCapability(<span class="string">"browserName"</span>, <span class="string">""</span>);</span><br><span class="line"><span class="comment">// 确定自己的手机系统是Android、ios的话需要需改</span></span><br><span class="line">capabilities.setCapability(<span class="string">"platformName"</span>, <span class="string">"Android"</span>);</span><br><span class="line"><span class="comment">// 这边要设置成自己的设备uuid，通过adb devices查看</span></span><br><span class="line">capabilities.setCapability(<span class="string">"deviceName"</span>, <span class="string">"Android Emulator"</span>);</span><br><span class="line"><span class="comment">// 这个demo代码会提供好，就不需要自己去找了</span></span><br><span class="line">capabilities.setCapability(<span class="string">"appPackage"</span>, <span class="string">"cn.etouch.ecalendar"</span>);</span><br><span class="line">capabilities.setCapability(<span class="string">"appActivity"</span>, <span class="string">".ECalendar"</span>);</span><br><span class="line">capabilities.setCapability(<span class="string">"noSign"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure><p>appPackage查看包名(可以找到唯一的应用)：<code>adb shell dumpsys activity | find &quot;mFocusedActivity&quot;</code>，需要的结果即<code>cn.etouch.ecalendar</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity | find  "mFocusedActivity"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; mFocusedActivity: ActivityRecord&#123;1510a73 u0 cn.etouch.ecalendar/.MainActivity t2&#125;</span></span><br></pre></td></tr></table></figure><p>activityName查询类名(找到应用上的某个界面)：<code>aapt dump badging &lt;apkPath&gt;</code>然后找到<strong>launchable-activity</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> e.g.</span></span><br><span class="line">E:\android-sdk-windows\build-tools\28.0.3\aapt dump badging C:\mooctest\projects\3399\52660\Zhwnl\apk\Zhwnl.apk | grep launchable-activity</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; launchable-activity: name=<span class="string">'cn.etouch.ecalendar.ECalendar'</span>  label=<span class="string">'中华万年历'</span> icon=<span class="string">''</span></span></span><br></pre></td></tr></table></figure><p>步骤二：</p><blockquote><p>除了代码上设置好连接手机的参数，手机也需要设置电脑能操作手机</p></blockquote><p>需要打开三个选项：“USB调试”、“USB安装”、“USB调试（安全设置）”</p><p>以小米6手机为例:“更多设置”-&gt;“开发者选项”-&gt;“USB调试”、“USB安装”、“USB调试（安全设置）”</p><p>由于之前使用python玩过ADB，所以**“USB调试”、&quot;USB调试（安全设置）&quot;<strong>是开启的，而没打开</strong>USB安装**，所以导致了一直失败。实际上打开USB安装后，会安装几个程序比如Unlock、appnium settings等。<strong>其实报错一开始也提示了，没检测到手机，啥啥安装不上</strong>，只不过当时没留意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Unable to find an active device or emulator with OS 4.1.1. The following are available: cf46749d (8.0.0) (WARNING: The server did not provide any stacktrace information)</span><br><span class="line">Command duration or timeout: 469 milliseconds</span><br><span class="line">Build info: version: &apos;unknown&apos;, revision: &apos;unknown&apos;, time: &apos;unknown&apos;</span><br></pre></td></tr></table></figure><p>▲后来又发现，不设置<strong>platformVersion</strong>、<strong>deviceName</strong>直接设置成<strong>Android Emulator</strong>也行，看来最主要的原因还是<strong>手机第一次使用Appnium之前需要安装写appnium的软件</strong></p><p><img src="/2019/10/18/软件测试笔记/E:%5Chexo%5Csource_posts%5C%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0%5Cunicode.png" alt="unicode"></p><p>这个应该就是这两行所安装的东西</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置使用unicode键盘，支持输入中文和特殊字符</span></span><br><span class="line">capabilities.setCapability(<span class="string">"unicodeKeyboard"</span>,<span class="string">"true"</span>);</span><br><span class="line"><span class="comment">//设置用例执行完成后重置键盘</span></span><br><span class="line">capabilities.setCapability(<span class="string">"resetKeyboard"</span>,<span class="string">"true"</span>);</span><br></pre></td></tr></table></figure><h4 id="夜深模拟器测试"><a class="markdownIt-Anchor" href="#夜深模拟器测试"></a> 夜深模拟器测试</h4><p><strong>1 开启USB调试</strong></p><p>设置-&gt;关于平板电脑-&gt;多次点击&quot;版本号&quot;进入开发者模式-&gt;开发者选项-&gt;打开**“USB调试”<strong>和</strong>&quot;允许模拟位置&quot;**</p><p>2 查看deviceName</p><p>命令行中输入<code>adb devices</code>，如果一直没检测到，解决方案如下（我是需要这么做的）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">如果在设备连接过程中，确定设备已经开启USB调试且正确连接到PC，但是仍旧使用adb devices指令查到设备列表为空，则有可能是已安装的安卓SDK中的adb程序版本和模拟器自带的adb程序版本不一致导致的。</span><br><span class="line"></span><br><span class="line">解决办法可能有很多种，这里暂介绍楼主亲测实用的方案：</span><br><span class="line"></span><br><span class="line">第一步：关闭正在运行的的模拟器</span><br><span class="line"></span><br><span class="line">第二步：替换adb.exe程序。</span><br><span class="line"></span><br><span class="line">逍遥模拟器：进入安装目录（默认为..\Microvirt\MEmu），找到adb.exe文件，执行删除。然后进入SDK的安装目录（默认为..\android-sdk-windows\platform-tools），拷贝系统adb.exe到逍遥的原目录即可。</span><br><span class="line"></span><br><span class="line">夜神模拟器：进入安装目录，找到nox_adb.exe文件，执行删除。然后进入SDK的安装目录（默认为..\android-sdk-windows\platform-tools），拷贝系统adb.exe到逍遥的原目录，重命名为“nox_adb.exe”即可。</span><br><span class="line"></span><br><span class="line">第三步：启动模拟器。启动完毕后，打开cmd命令窗口输入 adb devices 再次检查设备连接情况，一般就能正常看到已连接的虚拟设备信息了。</span><br></pre></td></tr></table></figure><p>运行代码main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置自动化相关参数</span></span><br><span class="line">DesiredCapabilities capabilities = <span class="keyword">new</span> DesiredCapabilities();</span><br><span class="line">capabilities.setCapability(<span class="string">"browserName"</span>, <span class="string">""</span>);</span><br><span class="line">capabilities.setCapability(<span class="string">"platformName"</span>, <span class="string">"Android"</span>);</span><br><span class="line"><span class="comment">//        capabilities.setCapability("platformVersion", "8.0.0");</span></span><br><span class="line">capabilities.setCapability(<span class="string">"deviceName"</span>, <span class="string">"127.0.0.1:62001"</span>);</span><br><span class="line">capabilities.setCapability(<span class="string">"appPackage"</span>, <span class="string">"cn.etouch.ecalendar"</span>);</span><br><span class="line">capabilities.setCapability(<span class="string">"appActivity"</span>, <span class="string">".ECalendar"</span>);</span><br><span class="line">capabilities.setCapability(<span class="string">"noSign"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure><p>然后运行测试代码就能看到这样的画面了</p><p><img src="/2019/10/18/软件测试笔记/E:%5Chexo%5Csource_posts%5C%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0%5C%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8.jpg" alt="夜神模拟器"></p><h5 id="进入元素审查"><a class="markdownIt-Anchor" href="#进入元素审查"></a> 进入元素审查</h5><p><img src="/2019/10/18/软件测试笔记/E:%5Chexo%5Csource_posts%5C%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0%5C%E5%85%83%E7%B4%A0%E5%AE%A1%E6%9F%A5.jpg" alt="元素审查"></p><p><a href="https://www.cnblogs.com/amoyshmily/p/10500687.html" target="_blank" rel="noopener">安装教程</a>，我是安装软件测试大赛提供的教程安装下来的，只不过感觉这篇可能将的更好一点。（ appium-doctor 是需要额外用npm安装的，而不是像比赛教程中写的那样）</p><h5 id="踩坑记录"><a class="markdownIt-Anchor" href="#踩坑记录"></a> 踩坑记录：</h5><p>出现报错<code>UiAutomator exited unexpectedly with code 0, signal null</code></p><p><img src="https://img-blog.csdnimg.cn/20181130102850624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMzExNTY4,size_16,color_FFFFFF,t_70" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /data/<span class="built_in">local</span>/tmp （如果一次性进不去，可以分层一层层进入）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、进入data/<span class="built_in">local</span>/tmp 后ls查看全部目录，应该有一个 AppiumBootstrap.jar，可能你的名字是 AppiumBoots 或者 AppiumBootstrap.jar。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、将andriod sdk下的AppiumBootstrap.jar发送上去</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> adb push C:\Users\10630\AppData\Local\Programs\Appium\resources\app\node_modules\appium\node_modules\appium-android-driver\bootstrap\bin\AppiumBootstrap.jar /data/<span class="built_in">local</span>/tmp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、ok，大功告成</span></span><br></pre></td></tr></table></figure><h6 id="adb-unauthorized"><a class="markdownIt-Anchor" href="#adb-unauthorized"></a> adb unauthorized</h6><p>1.使用adb连接手机时，即使打开了usb调试，<strong>手机添加了信任</strong>，仍然出现unauthorized的提示</p><p>2.<code>C:\Users\(Username)\.android</code>里面删掉adbkey和adbkey.pub两个文件(没添加过信任的话是没有的)，然后重新插拔手机</p><p>执行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server</span><br><span class="line">adb <span class="built_in">start</span>-server</span><br></pre></td></tr></table></figure><p>△如果上述方式还是无效的话，选择“开发者测试”-&gt;&quot;调试&quot;中的撤销USB调试授权，然后重新上述操作</p><h3 id="特殊元素定位之获取toast"><a class="markdownIt-Anchor" href="#特殊元素定位之获取toast"></a> 特殊元素定位之获取toast</h3><ul><li>java-client版本必须满足5.0+</li><li>desiredCapabilities中指定automationName为：UIAutomator2</li><li>UIAutomator2只支持安卓版本5.0+</li><li><code>getElement(By.xpath(&quot;//*[contains(@text,'tips')]&quot;));</code></li></ul><h3 id="monkey使用"><a class="markdownIt-Anchor" href="#monkey使用"></a> Monkey使用</h3><blockquote><p>脚本优势：简单、快捷、不需要借助任何工具，可以做简单的性能测试<br>脚本缺点：只能简单实现坐标、按键等基本操作（根据像素点来进行操作）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#头文件、控制monkey发送消息的参数</span><br><span class="line">type=raw events</span><br><span class="line">count=10</span><br><span class="line">speed=1.0</span><br><span class="line">#以下monkey命令</span><br><span class="line">start data&gt;&gt; </span><br><span class="line"># 开启柠檬杯app</span><br><span class="line">LaunchActivity（com.lemon.lemonban，com.lemon.lemonban.activity.WelcomeActivity）</span><br><span class="line">#让脚本暂停运行4S UserWait（4000）</span><br><span class="line">#点击我的柠檬元素</span><br><span class="line">Tap（600，1220）</span><br><span class="line">#点击我的头像登录</span><br><span class="line">#让脚本暂停运行1S UserWait（1000）</span><br><span class="line">Tap（300，200）</span><br><span class="line">#让脚本暂停运行1s UserWait（2000）</span><br><span class="line">#输入手机号码</span><br><span class="line">DispatchString（18588220110）</span><br><span class="line">#点击密码输入框</span><br><span class="line">Tap（200，650）</span><br><span class="line">#输入密码</span><br><span class="line">DispatchString（123456）</span><br><span class="line">#点击登录按钮</span><br><span class="line">Tap（320，800）</span><br><span class="line">UserWait（3000）</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 上传monkey脚本</span><br><span class="line">adb push monkeyScript.txt /sdcard/</span><br><span class="line"># 运行monkey脚本</span><br><span class="line">adb shell monkey -f /sdcard/monkeyScript.txt</span><br></pre></td></tr></table></figure><h3 id="uiautomatorviewer使用"><a class="markdownIt-Anchor" href="#uiautomatorviewer使用"></a> uiautomatorviewer使用</h3><blockquote><p>位置E:\android-sdk-windows\tools</p></blockquote><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> on</span><br><span class="line"></span><br><span class="line">adb shell uiautomator dump /sdcard/app.uix</span><br><span class="line">adb pull /sdcard/app.uix .</span><br><span class="line"></span><br><span class="line">adb shell screencap -p /sdcard/app.png</span><br><span class="line">adb pull /sdcard/app.png .</span><br></pre></td></tr></table></figure><p>采坑记录:</p><blockquote><p>小米手机有点坑啊，进行Android开发时需要设置挺多东西的。</p></blockquote><ol><li><strong>关闭MIUI优化</strong>不然没法调试</li><li>如果进行uiautomatorviewer调试的话，必须还要把悬浮球给关了，不然没法获取界面。</li></ol><p>TouchAction</p><ol><li><p>点击操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// press</span></span><br><span class="line">TouchAction ta=<span class="keyword">new</span> TouchAction(driver);<span class="comment">//创建一个TouchAction对象</span></span><br><span class="line">ta.press(element).release().perform();<span class="comment">//按一个元素</span></span><br><span class="line">ta.press(<span class="number">500</span>, <span class="number">450</span>).release().perform();<span class="comment">//按一个坐标点</span></span><br><span class="line"><span class="comment">//按一个元素上的某个点，从左上角偏移100</span></span><br><span class="line">ta.press(element,<span class="number">100</span>,<span class="number">100</span>).release().perform();</span><br><span class="line"></span><br><span class="line"><span class="comment">// tap</span></span><br><span class="line">ta.tap(element).release().perform();<span class="comment">//点一个元素</span></span><br><span class="line">ta.tap(<span class="number">300</span>, <span class="number">500</span>).release().perform();<span class="comment">//点一个坐标点</span></span><br><span class="line"><span class="comment">//按一个元素的某个点，从左上角偏移100</span></span><br><span class="line">ta.tap(element, <span class="number">100</span>, <span class="number">100</span>).release().perform();</span><br></pre></td></tr></table></figure></li><li><p>长按操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longPress</span></span><br><span class="line">TouchAction ta=<span class="keyword">new</span> TouchAction(driver);<span class="comment">//创建一个TouchAction对象</span></span><br><span class="line">ta.longPress(element).release().perform();<span class="comment">//长按某个元素</span></span><br><span class="line">ta.longPress(element, <span class="number">5000</span>).release().perform();<span class="comment">//长按某个元素，时间是5秒</span></span><br><span class="line">ta.longPress(<span class="number">300</span>, <span class="number">500</span>).release().perform();<span class="comment">//长按某个坐标点</span></span><br><span class="line">ta.longPress(<span class="number">300</span>, <span class="number">500</span>, <span class="number">3000</span>).release().perform();<span class="comment">//长按某个坐标点，时间是5秒</span></span><br><span class="line"><span class="comment">//长按某元素上的某个点，从左上角偏移100</span></span><br><span class="line">ta.longPress(element, <span class="number">100</span>, <span class="number">100</span>).release().perform();</span><br><span class="line"><span class="comment">//长按某元素上的某个点，从左上角偏移100，时间是3秒</span></span><br><span class="line">ta.longPress(element, <span class="number">100</span>, <span class="number">100</span>, <span class="number">3000</span>).release().perform();</span><br></pre></td></tr></table></figure></li><li><p>组合操作–拖拽</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// press + moveTo</span></span><br><span class="line">TouchAction ta=<span class="keyword">new</span> TouchAction(driver);<span class="comment">//创建一个TouchAction对象</span></span><br><span class="line">ta.press(element1).moveTo(element2).release().perform();<span class="comment">//两个元素互换位置</span></span><br><span class="line"><span class="comment">//将元素拖拽到另外一个位置，moveTo中的是相对偏移量</span></span><br><span class="line">ta.press(element1).waitAction(<span class="number">500</span>).moveTo(<span class="number">0</span>,<span class="number">200</span>).waitAction(<span class="number">500</span>).release().perform();</span><br></pre></td></tr></table></figure></li><li><p>连续滑动手势（可用于手势解锁）</p></li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// press + moveTo</span></span><br><span class="line">TouchAction ta=<span class="keyword">new</span> TouchAction(driver);<span class="comment">//创建一个TouchAction对象</span></span><br><span class="line"><span class="comment">//从第一个点一直滑动到第四个点</span></span><br><span class="line">ta.press(<span class="number">200</span>, <span class="number">200</span>).moveTo(<span class="number">0</span>, <span class="number">100</span>).moveTo(<span class="number">100</span>, <span class="number">0</span>).moveTo(<span class="number">100</span>, <span class="number">100</span>).release().perform();</span><br><span class="line"><span class="comment">//从第一个元素一直滑动到第四元素</span></span><br><span class="line">ta.press(element1).moveTo(element2).moveTo(element3).moveTo(element4).release().perform()</span><br><span class="line"><span class="comment">// swipe</span></span><br><span class="line">driver.swipe(width * <span class="number">3</span> / <span class="number">4</span>, height / <span class="number">2</span>, width / <span class="number">4</span>, height / <span class="number">2</span>, during);</span><br></pre></td></tr></table></figure><ol start="5"><li>其他 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 0% 到 100% 内双指缩放屏幕 </span></span><br><span class="line">driver.pinch(element=el)</span><br><span class="line"><span class="comment">//放大屏幕 在 100% 以上放大屏幕 </span></span><br><span class="line">driver.zoom(element=el)</span><br></pre></td></tr></table></figure></li></ol><p><a href="http://www.mamicode.com/info-detail-2390132.html" target="_blank" rel="noopener">appnium定位+操作方式(python)——老版本</a></p><p>▲Appium java-client库更新到6.x后，滑动 swipe() 已弃用，且TouchAction类中很多方法也有改变。</p><ul><li>（ 总的来看，弃用的是 press() longPress() moveTo() tap() 参数使用 x、y轴和webElement 的这种类型，和用到Duration类型的方法 ）</li><li>取而代之的是参数类型变了，涉及到XY轴定位的方法，参数使用了<strong>PointOption.point(X坐标, Y坐标)</strong>；涉及到Duration的方法waitAction()，参数使用了WaitOptions.waitOptions(Duration.ofNanos(时间间隔))</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java-client 4.x 滑动 swipe() 案例：</span></span><br><span class="line">driver.swipe(width * <span class="number">3</span> / <span class="number">4</span>, height / <span class="number">2</span>, width / <span class="number">4</span>, height / <span class="number">2</span>, during); </span><br><span class="line"></span><br><span class="line"><span class="comment">//java-client 6.x 滑动案例：</span></span><br><span class="line"><span class="keyword">int</span> nanos=(<span class="keyword">int</span>) (second*<span class="number">1000</span>); </span><br><span class="line">TouchAction action = <span class="keyword">new</span> TouchAction(driver).press(PointOption.point(width* <span class="number">3</span>/<span class="number">4</span>,height/<span class="number">2</span>)).waitAction(WaitOptions.waitOptions(Duration.ofNanos(nanos))).moveTo(PointOption.point(width/<span class="number">4</span>, height/<span class="number">2</span>)).release().perform();</span><br></pre></td></tr></table></figure><p><a href="https://discuss.appium.io/t/some-of-the-methods-from-mobileelement-and-appiumdriver-class-missing-in-5-0-4/19039" target="_blank" rel="noopener"> java-client  5.0.4后被移除的函数</a></p><h3 id="众测的思路"><a class="markdownIt-Anchor" href="#众测的思路"></a> 众测的思路：</h3><ul><li>常见输入框的输入范围、限制<ul><li>手机号11位、验证码6位、敏感信息、特殊字符</li></ul></li><li>toast提示框是否正确</li><li>控件是否有错别字</li></ul><h3 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录：</h3><h4 id="众包测试报告评分规则"><a class="markdownIt-Anchor" href="#众包测试报告评分规则"></a> 众包测试报告评分规则</h4><p>1、众包测试得分=bug报告得分（包括单一状bug报告、fork的bug报告）<br>+评审得分（点赞，点踩）<br>2、每个Bug报告满分10分，Bug报告基础分1-5分，选手提交的Bug等级仅供参考，以评审人员判定为准；<br>3、Bug描述简洁清晰、<strong>复现步骤连贯</strong>、<strong>按序号排序</strong>，评审人员可根据其描述顺利的进行操作并复现Bug，附加3分。<br>4、Bug截图相关则附加1分，截图上使用红框标注Bug位置则附加1分；<br>5、点赞点踩得分规则：即为<strong>正确的bug报告点赞</strong>，<strong>错误的bug报告点踩</strong>可得分；反之扣分。<br>6、若两人提交bug报告相同，依据时间优先原则，后提交的报告计低分，所以若发现的bug已被他人提交，建议Fork（复制并补充修改）或对bug报告进行评审（点赞，点踩）。</p><h2 id="开发者测试"><a class="markdownIt-Anchor" href="#开发者测试"></a> 开发者测试</h2><p><strong>语句覆盖</strong>： 保证程序中的每一个语句至少被执行一次。 被认为是“最弱的覆盖”</p><blockquote><p>语句覆盖率：被执行语句的比例</p></blockquote><p><strong>判定覆盖(分支覆盖)</strong>：CFG (control Flow Graph控制流图 )所有的边都被访问/所有的分支都被访问</p><p>▲针对判断语句，在设定案例的时候，要设定True和False的两种案例；与语句覆盖不同的是增加了False的情况</p><blockquote><p>分支覆盖率：被访问的分支的比例</p></blockquote><p><strong>条件覆盖</strong></p><p>针对判断语句里面案例的取值都要去一次，不考虑条件的取值。</p><blockquote><p>每个小判断分别为真，其他为假的情况</p></blockquote><p><strong>判定/条件覆盖</strong></p><p>判定覆盖各条件覆盖交叉，针对于判定中的条件取值  、</p><blockquote><p>每个判定真假各一次(判定覆盖)<br>每个判定中的条件各取一次(条件覆盖)</p></blockquote><p><strong>组合覆盖</strong></p><p>判定-条件覆盖的加强版</p><blockquote><p>判定中所有可能的条件组合</p></blockquote><p><strong>路径覆盖</strong></p><p>走完所有可能的路径</p><p><a href="https://blog.csdn.net/qq_38712932/article/details/83818589" target="_blank" rel="noopener">语句覆盖、条件覆盖（分支覆盖）、判定覆盖、条件-判定覆盖、组合覆盖、路径覆盖 </a></p><h2 id="输入域上的测试"><a class="markdownIt-Anchor" href="#输入域上的测试"></a> 输入域上的测试</h2><p>–随机测试</p><p>–等价类划分</p><p>–边界值分析</p><ul><li>最小值(min)</li><li>略大于最小值(min+)</li><li>输入值域内的任意值(nom)</li><li>略小于最大值(max-)</li><li>最大值(max)</li></ul><h2 id="input-domain-based-techniquescontinue"><a class="markdownIt-Anchor" href="#input-domain-based-techniquescontinue"></a> Input Domain-Based Techniques(continue)</h2><p>•Random Testing</p><p>•Combinatorial Testing</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;软件测试笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#软件测试笔记&quot;&gt;&lt;/a&gt; 软件测试笔记&lt;/h1&gt;
&lt;h2 id=&quot;移动应用测试&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#移动应用测试&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Java" scheme="https://nymrli.top/tags/Java/"/>
    
      <category term="软件测试" scheme="https://nymrli.top/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>玩玩Stm32</title>
    <link href="https://nymrli.top/2019/10/15/%E7%8E%A9%E7%8E%A9Stm32/"/>
    <id>https://nymrli.top/2019/10/15/玩玩Stm32/</id>
    <published>2019-10-15T08:33:09.000Z</published>
    <updated>2019-10-18T08:56:46.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="玩玩stm32"><a class="markdownIt-Anchor" href="#玩玩stm32"></a> 玩玩Stm32</h1><h2 id="文件结构"><a class="markdownIt-Anchor" href="#文件结构"></a> 文件结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">G:.</span><br><span class="line">├───CORE<span class="comment"># startup_stm32f10x_hd.s汇编编写的启动文件</span></span><br><span class="line">|<span class="comment"># core_cm3.c底层函数</span></span><br><span class="line">├───HARDWARE<span class="comment"># 相关外设的初始化代码</span></span><br><span class="line">├───OBJ</span><br><span class="line">├───STM32F10x_FWLib<span class="comment"># 固件库包: GPIO/i2c/...</span></span><br><span class="line">│   ├───inc</span><br><span class="line">│   └───src</span><br><span class="line">├───SYSTEM<span class="comment"># 正点原子提供的常用、通用模块</span></span><br><span class="line">│   ├───delay</span><br><span class="line">│   ├───sys</span><br><span class="line">│   └───usart</span><br><span class="line">└───USER <span class="comment"># stm32f10x_it.c 中断管理文件</span></span><br><span class="line">    | <span class="comment"># stm32f10x.h </span></span><br><span class="line">    ├───Listings</span><br><span class="line">    └───Objects</span><br></pre></td></tr></table></figure><h3 id="编写规范"><a class="markdownIt-Anchor" href="#编写规范"></a> 编写规范：</h3><p>用户编写的执行代码写在main.c中,其中<code>#include &quot;stm32f10x.h&quot;</code>作用相当于C51的<code>#include &lt;reg51.h&gt;</code>，是操作寄存器的主要固件库文件,在任何地方引用到固件库函数时都需要导入这个文件。</p><p><code>stm32f10x_it.c、stm32f10x_it.h</code>, 专门存放中断服务函数的C文件 ,大多中断函数都 写在此文件中,方便 管理中断函数,但并不是一定要写在这里面。</p><h2 id="gpio"><a class="markdownIt-Anchor" href="#gpio"></a> GPIO</h2><p>◆端口复用功能<br>STM32的大部分端口都具有复用功能。<br>所谓复用,就是一些端口<em>不仅仅</em>可以做为通用lO口,还可以<em>复用</em>为一些外设引脚,比如PA9,PA10可以复用为STM32的<strong>串口</strong>1引脚。<br>▲作用：最大限度的利用端口资源</p><p>◆端口重映射功能<br>就是可以把某些功能引脚映射到其他引脚。<br>比如串口1默认引脚是PA9,PA10可以通过配置重映射映射到PB6,PB7<br>作用：为了方便布线</p><p>▲所有I0口都可以作为中断输入</p><h3 id="工作模式"><a class="markdownIt-Anchor" href="#工作模式"></a> 工作模式：</h3><ul><li>推挽输出：可以输出强高低电平</li><li>上拉输入: 一端是接地低电平,所以<strong>默认情况</strong>下另一端需要检测到<strong>高电平</strong>(按键扫描中,三个引脚需要设置为IPU,按下时&lt;==&gt;输入口检测到低电平)</li><li>下拉输入：(按下时&lt;==&gt;输入口检测到低电平)</li></ul><h3 id="gpio重要函数"><a class="markdownIt-Anchor" href="#gpio重要函数"></a> GPIO重要函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1个初始化函数：</span></span><br><span class="line">void GPIO_Init(GPIO_TypeDef* GPIOx,GPIO_InitTypeDef* GPIO_InitStruct)；</span><br><span class="line"><span class="comment">//2个读取输入电平函数：</span></span><br><span class="line">uint8t GPIO_ReadlinputDataBit(GPIO TypeDef* GPIOx,uint16_t GPIO_Pin)；</span><br><span class="line"><span class="keyword">uint16_t</span> GPIO_ReadinputData(GPIO_TypeDef* GPIOx)；</span><br><span class="line"><span class="comment">//2个读取输出电平函数：</span></span><br><span class="line">uint8t GPIO_ReadOutputDataBit(GPiO_TypeDef* GPiOx,uint16_t GPIO_Pin)；</span><br><span class="line">uint16t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)；</span><br><span class="line"><span class="comment">//4个设置输出电平函数：前两个常用,后两个不常用</span></span><br><span class="line">void GPIO_SetBits(GPIOTypeDef* GPIOx, uint16_t GPIOPin)；</span><br><span class="line">void GP1O_ResetBits(GPIOTypeDef GPIOx,uint16_t GPIOPin)；</span><br><span class="line">void GPIO_WriteBit(GPIOTypeDef* GPIOx,uint16_t GPIO_Pin,BitAction BitVal)；</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_Write</span><span class="params">(GPIOTypeDef* GPIOx, <span class="keyword">uint16_t</span> PortVal)</span></span></span><br></pre></td></tr></table></figure><h4 id="具体说明"><a class="markdownIt-Anchor" href="#具体说明"></a> 具体说明</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_Init</span><span class="params">(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="function"><span class="comment">GPIO_TypeDef为GPIO寄存器组合的类型</span></span></span><br><span class="line"><span class="function"><span class="comment">typedef struct&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  __IO uint32_t CRL;</span></span></span><br><span class="line"><span class="function"><span class="comment">  __IO uint32_t CRH;</span></span></span><br><span class="line"><span class="function"><span class="comment">  __IO uint32_t IDR;</span></span></span><br><span class="line"><span class="function"><span class="comment">  __IO uint32_t ODR;</span></span></span><br><span class="line"><span class="function"><span class="comment">  __IO uint32_t BSRR;</span></span></span><br><span class="line"><span class="function"><span class="comment">  __IO uint32_t BRR;</span></span></span><br><span class="line"><span class="function"><span class="comment">  __IO uint32_t LCKR;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125; GPIO_TypeDef;</span></span></span><br><span class="line"><span class="function"><span class="comment">GPIOx的选择可以为GPIOA-&gt;GPIOG</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="function"><span class="comment">typedef struct&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  uint16_t GPIO_Pin;           </span></span></span><br><span class="line"><span class="function"><span class="comment">  GPIOSpeed_TypeDef GPIO_Speed; </span></span></span><br><span class="line"><span class="function"><span class="comment">  GPIOMode_TypeDef GPIO_Mode;    </span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;GPIO_InitTypeDef;</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br></pre></td></tr></table></figure><p>初始化示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明结构体变量</span></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure；</span><br><span class="line"><span class="comment">//LEDO--&gt;PB.5端口配置</span></span><br><span class="line">GPIO InitStructure.GPIO Pin =GPIO_Pin_5；</span><br><span class="line"><span class="comment">//推挽输出</span></span><br><span class="line">GPIO InitStructure.GPIO Mode=GPIO_Mode_Out_PP；</span><br><span class="line"><span class="comment">//IO口速度为50MHz</span></span><br><span class="line">GPIO InitStructure.GPIO Speed=GPIO_Speed_50MHz；</span><br><span class="line"><span class="comment">//根据设定参数初始化GPIOB.5</span></span><br><span class="line">GPIO_Init(GPIOB,&amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure><p>▲在使用GPIO前,需要使能IO口时钟,调用函数<code>RCC_APB2PeriphColckCmd();</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RCC_APB2PeriphClockCmd</span><span class="params">(<span class="keyword">uint32_t</span> RCC_APB2Periph, FunctionalState NewState)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*RCC_APB2Periph 可以为</span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_AFIO  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_GPIOA </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_GPIOB </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_GPIOC </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_GPIOD </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_GPIOE </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_GPIOF </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_GPIOG </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_ADC1  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_ADC2  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM1  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_SPI1  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM8  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_USART1 </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_ADC3  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM15 </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM16 </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM17 </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM9  </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM10 </span></span></span><br><span class="line"><span class="function"><span class="comment">RCC_APB2Periph_TIM11 </span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">NewState 为ENABLE / DISABLE</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br></pre></td></tr></table></figure><p>提示：不能通过IO口直接驱动大功率器件。</p><p>△复位之后，IO口默认为浮空状态，如果不接下拉电阻，那么电平不确定为高还是低电平。(到是小电流的时候，电流会直接通过下拉电阻到地，不会经过三极管；只有电流足够大，才会经过三极管)</p><h3 id="demo-跑马灯实验"><a class="markdownIt-Anchor" href="#demo-跑马灯实验"></a> demo : 跑马灯实验</h3><p><img src="/2019/10/15/玩玩Stm32/%E8%B7%91%E9%A9%AC%E7%81%AF.jpg" alt="跑马灯"></p><p>当将PE5设置为低电平时,通过上拉电阻连到VCC后,LED就能点亮。PE5被设置为高电平时与上拉高电平之间没有压差,此时LED熄灭。</p><h4 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 完整代码:</h4><p>led.c文件内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span> </span></span><br><span class="line"><span class="comment">// 在任何地方引用到固件库时都需要导入这个文件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOE,ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5;</span><br><span class="line">GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">GPIO_Init(GPIOB,&amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5;</span><br><span class="line">GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">GPIO_Init(GPIOE,&amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置为高电平,熄灭</span></span><br><span class="line">GPIO_SetBits(GPIOB, GPIO_Pin_5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.c文件内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"> delay_init();</span><br><span class="line"> LED_Init();</span><br><span class="line">     <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">         GPIO_SetBits(GPIOB,GPIO_Pin_5);</span><br><span class="line">         GPIO_SetBits(GPIOE,GPIO_Pin_5);</span><br><span class="line">         delay_ms(<span class="number">500</span>);</span><br><span class="line">      GPIO_ResetBits(GPIOB,GPIO_Pin_5);</span><br><span class="line">      GPIO_ResetBits(GPIOE,GPIO_Pin_5);</span><br><span class="line">         delay_ms(<span class="number">500</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="操作io口的三种方式"><a class="markdownIt-Anchor" href="#操作io口的三种方式"></a> 操作IO口的三种方式：</h3><ul><li>位操作：<code>#define BEEP PBout(8);</code>后<code>BEEP = 1</code></li><li>库函数：<code>GPIO_SetBits(GPIOB, GPIO_Pin_8);</code></li><li>寄存器：</li></ul><h2 id="中断管理"><a class="markdownIt-Anchor" href="#中断管理"></a> 中断管理</h2><blockquote><p>对STM32中断进行分组，组0~4。同时，对每个中断设置一个抢占优先级和一个响应优先级值。IP bit决定了对每个中断共有2^4(位) = 16级的中断优先级设置</p></blockquote><p><img src="/2019/10/15/玩玩Stm32/%E4%B8%AD%E6%96%AD%E5%88%86%E7%BB%84.jpg" alt="中断分组"></p><ul><li>高优先级的抢占优先级是可以<strong>打断</strong>正在进行的低抢占优先级中断的。</li><li>抢占优先级相同的中断，高响应优先级<strong>不可以打断</strong>低响应优先级的中断。</li><li>抢占优先级相同的中断，当两个中断<strong>同时发生</strong>的情况下，哪个响应优先级高，哪个先执行。</li><li>如果两个中断的抢占优先级和响应优先级<strong>都是一样</strong>的话，则看哪个中断先发生就先执行；</li></ul><p>总结：中断嵌套执行看抢占优先级；占优先级相同时,响应优先级高的先响应；两者都一样的话，执行顺序看发生的时间</p><p>△.优先级0最高，4最低。</p><p>▲.系统代码执行过程中，只设置一次中断优先，一般不会再改变分组。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中断优先级分组函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_PriorityGroupConfig</span><span class="params">(<span class="keyword">uint32_t</span> NVIC_PriorityGroup)</span></span></span><br><span class="line"><span class="function"><span class="comment">// demo: NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">// 对某个中断设置优先级</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_Init</span><span class="params">(NVIC_InitTypeDef* NVIC_InitStruct)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="function"><span class="comment">typedef struct&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  uint8_t NVIC_IRQChannel;                    </span></span></span><br><span class="line"><span class="function"><span class="comment">  uint8_t NVIC_IRQChannelPreemptionPriority;  </span></span></span><br><span class="line"><span class="function"><span class="comment">  uint8_t NVIC_IRQChannelSubPriority;         </span></span></span><br><span class="line"><span class="function"><span class="comment">  FunctionalState NVIC_IRQChannelCmd;         </span></span></span><br><span class="line"><span class="function"><span class="comment">&#125; NVIC_InitTypeDef;</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br></pre></td></tr></table></figure><blockquote><p>中断优先级控制的寄存器组：IP[240]对每个中断进行管理,STM32F10x系列一共有60个可屏蔽中断。全称是：Interrupt Priority Registers</p></blockquote><h3 id="中断优先级设置步骤"><a class="markdownIt-Anchor" href="#中断优先级设置步骤"></a> 中断优先级设置步骤</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//①统运行后先设置中断优先级分组。调用函数：//整个系统执行过程中，只设置一次中断分组。</span></span><br><span class="line">void NVIC_Priority_GroupConfig(uint32_t NVIC_PriorityGroup)；</span><br><span class="line"></span><br><span class="line"><span class="comment">//②针对每个中断，设置对应的抢占优先级和响应优先级：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> NVIC <span class="title">Init</span><span class="params">(NVIC_InitTypeDef* NVIC_Initstructy；</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">/* demo:</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">NVIC_InitStructure.NVIC_IRQChannel=EXTI3_IRQn://使能按键KEY1所在的外部中断通道</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=0x02：//抢占优先级2</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">NVIC_InitStructure.NVIC_IRQChannelSubPriority =0x01：</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">∥字优先级1</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">NVIC_InitStructure.NVIC_IRQChannelCmd =ENABLE://使能外部中断通道</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">NWIC_Init(&amp;WIC_Init Structure)：/根据NIC_InitStruct中指定的参数初始化外设NVIC寄存器</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">*/</span></span></span></span><br><span class="line"><span class="function"><span class="params">               </span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">//③如果需要挂起/解挂，查看中断当前激活状态，分别调用相关函数即可。</span></span></span></span><br></pre></td></tr></table></figure><h2 id="串口通信"><a class="markdownIt-Anchor" href="#串口通信"></a> 串口通信</h2><blockquote><p>异步: 跟系统时钟无关</p><p>同步: 跟系统时钟有关</p></blockquote><p>波特率计算方法:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi mathvariant="normal">T</mi><mi mathvariant="normal">x</mi></mrow><mi mathvariant="normal">/</mi><mrow><mi mathvariant="normal">R</mi><mi mathvariant="normal">x</mi></mrow><mspace width="1em"><mi>B</mi><mi>a</mi><mi>u</mi><mi>d</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo>=</mo><mfrac><msub><mi>f</mi><mrow><mi>P</mi><mi>C</mi><mi>L</mi><mi>K</mi><mi>x</mi></mrow></msub><mrow><mo stretchy="false">(</mo><mn>16</mn><mo>∗</mo><mi>U</mi><mi>S</mi><mi>A</mi><mi>R</mi><mi>T</mi><mi>D</mi><mi>I</mi><mi>V</mi><mo stretchy="false">)</mo></mrow></mfrac></mspace></mrow><annotation encoding="application/x-tex">\mathrm{Tx} / \mathrm{Rx} \quad Baud rate=\frac{f_{P C L K x}}{(16 * U S A R T D I V)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">T</span><span class="mord mathrm">x</span></span><span class="mord">/</span><span class="mord"><span class="mord mathrm">R</span><span class="mord mathrm">x</span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">a</span><span class="mord mathdefault">u</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.452216em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mord mtight">6</span><span class="mbin mtight">∗</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">U</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.10764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight">L</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h3 id="baud_rate配置的一般步骤"><a class="markdownIt-Anchor" href="#baud_rate配置的一般步骤"></a> <img src="/2019/10/15/玩玩Stm32/baud_rate.jpg" alt="baud_rate">配置的一般步骤:</h3><p><img src="/2019/10/15/玩玩Stm32/E:%5Chexo%5Csource_posts%5C%E7%8E%A9%E7%8E%A9Stm32%5C%E4%B8%B2%E5%8F%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4.jpg" alt="串口配置的一般步骤"></p><ol><li>串口作为外设，需要使能:<code>RCC_APB2PeriphClockCmdO;</code>、以及使能GPIO的时钟</li><li>GPIO端口模式设置<code>GPIOInit0;</code>，模式设置为<code>GPIO_Mode_AFPP</code>复用推挽(PA.9/10复用为串口1)</li><li>串口参数初始化</li><li>使能串口USART Cma);</li><li>串口数据收发</li></ol><p>▲ <strong>UART串口<a href="http://bbs.elecfans.com/zhuti_wireless_1.html" target="_blank" rel="noopener">通信</a>只需连接TX，RX，GND</strong> ， <strong>一般不需要连接VCC</strong></p><blockquote><p>A：TX、RX是正负压的，所以有个地做参考就行了</p><p>A： 通信两端一般都有各自的供电电压，所以不需要VCC，只有一端没有电源的情况下才会用VCC向对方输送电源</p><p>A：就像像耳机只要联地、音频左、音频右，而不联vcc一个道理</p></blockquote><h3 id="正点原子提供的usart库"><a class="markdownIt-Anchor" href="#正点原子提供的usart库"></a> <strong>正点原子提供的USART库：</strong></h3><blockquote><p>以回车换行结束的协议</p></blockquote><p>usart.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USART_REC_LEN  200  <span class="comment">//定义最大接收字节数 200</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EN_USART1_RX 1<span class="comment">//使能（1）/禁止（0）串口1接收</span></span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">extern</span> u8  USART_RX_BUF[USART_REC_LEN]; <span class="comment">//接收缓冲,最大USART_REC_LEN个字节.末字节为换行符 </span></span><br><span class="line"><span class="keyword">extern</span> u16 USART_RX_STA;         <span class="comment">//接收状态标记</span></span><br><span class="line"><span class="comment">//如果想串口中断接收，请不要注释以下宏定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uart_init</span><span class="params">(u32 bound)</span></span>;</span><br></pre></td></tr></table></figure><p><img src="/2019/10/15/玩玩Stm32/E:%5Chexo%5Csource_posts%5C%E7%8E%A9%E7%8E%A9Stm32%5CUSART_RX_STA.jpg" alt="USART_RX_STA"></p><p>数据全保存在USART_RX_BUF中。根据STA的有效数据个数比如50个，将USART_RX_BUF中前50个数据拿出处理。处理完所有标志位将被清零</p><p>▲程序要求，发送的字符是以回车换行结束(Ox0D,0x0A)。</p><p>△串口调试助手里勾选&quot;发送新行&quot;选项</p><p>usart.c 程序理解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span>                <span class="comment">//串口1中断服务程序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 Res;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS <span class="comment">//如果SYSTEM_SUPPORT_OS为真，则需要支持OS.</span></span></span><br><span class="line">OSIntEnter();    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  <span class="comment">//接收中断(接收到的数据必须是0x0d 0x0a结尾)</span></span><br><span class="line">&#123;</span><br><span class="line">Res =USART_ReceiveData(USART1);<span class="comment">//读取接收到的数据(单个字符)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((USART_RX_STA&amp;<span class="number">0x8000</span>)==<span class="number">0</span>)<span class="comment">//没收到\n,即接收未完成</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(USART_RX_STA&amp;<span class="number">0x4000</span>)<span class="comment">//接收到了0x0d(\r)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Res!=<span class="number">0x0a</span>)USART_RX_STA=<span class="number">0</span>;<span class="comment">//如果下一个不是\n,那么接收错误,重新开始</span></span><br><span class="line"><span class="keyword">else</span> USART_RX_STA|=<span class="number">0x8000</span>;<span class="comment">//如果接受到\n,则接收完成,将USART_RX_STA bit15置1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//还没收到0X0D,即处理真正数据</span></span><br><span class="line">&#123;</span><br><span class="line">                <span class="comment">// 如果当前接收到\r,那么将Bit14置1</span></span><br><span class="line"><span class="keyword">if</span>(Res==<span class="number">0x0d</span>)USART_RX_STA|=<span class="number">0x4000</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">                    <span class="comment">// 将当前收到的字符Res存到数组USART_RX_BUF保存</span></span><br><span class="line">USART_RX_BUF[USART_RX_STA&amp;<span class="number">0X3FFF</span>]=Res ;</span><br><span class="line">                    <span class="comment">// 索引+1</span></span><br><span class="line">USART_RX_STA++;</span><br><span class="line">                    <span class="comment">// 如果数据超额,那么判断为接收错误</span></span><br><span class="line"><span class="keyword">if</span>(USART_RX_STA&gt;(USART_REC_LEN<span class="number">-1</span>))USART_RX_STA=<span class="number">0</span>;<span class="comment">//接收数据错误,重新开始接收  </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;    </span><br><span class="line">     &#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS <span class="comment">//如果SYSTEM_SUPPORT_OS为真，则需要支持OS.</span></span></span><br><span class="line">OSIntExit();   </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Res =USART_ReceiveData(USART1);</code>获得的是当前接收的字符，如果使用中断，那么调用<code>USART_SendData(USART1, Res)</code>就能接收一个字符，发送一个字符。</li><li>USART_RX_BUF的作用是，保存一次字符串发送过来的所有数据</li><li>USART_RX_STA是个寄存器，通过Bit14，Bit15来判断接收是否有效</li></ul><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"> u16 t;  </span><br><span class="line">u16 len;</span><br><span class="line">u16 times=<span class="number">0</span>;</span><br><span class="line">delay_init();     <span class="comment">//延时函数初始化  </span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级</span></span><br><span class="line">uart_init(<span class="number">115200</span>); <span class="comment">//串口初始化为115200</span></span><br><span class="line"> LED_Init();     <span class="comment">//LED端口初始化</span></span><br><span class="line">KEY_Init();          <span class="comment">//初始化与按键连接的硬件接口</span></span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(USART_RX_STA&amp;<span class="number">0x8000</span>)&#123;   </span><br><span class="line">len=USART_RX_STA&amp;<span class="number">0x3fff</span>;<span class="comment">//得到此次接收到的数据长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n您发送的消息为:\r\n\r\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)&#123;</span><br><span class="line">USART_SendData(USART1, USART_RX_BUF[t]);<span class="comment">//向串口1发送数据</span></span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TC)!=SET);<span class="comment">//等待发送结束</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n\r\n"</span>);<span class="comment">//插入换行</span></span><br><span class="line">USART_RX_STA=<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">times++;</span><br><span class="line"><span class="keyword">if</span>(times%<span class="number">5000</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n战舰STM32开发板 串口实验\r\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"正点原子@ALIENTEK\r\n\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(times%<span class="number">200</span>==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">"请输入数据,以回车键结束\n"</span>);  </span><br><span class="line"><span class="keyword">if</span>(times%<span class="number">30</span>==<span class="number">0</span>)LED0=!LED0;<span class="comment">//闪烁LED,提示系统正在运行.</span></span><br><span class="line">delay_ms(<span class="number">10</span>);   </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>▲printf可以将发送到串口，默认是USART1，如果需要修改，在usart.c的fputc函数中,将USART1修改即可</p><h2 id="外部中断"><a class="markdownIt-Anchor" href="#外部中断"></a> 外部中断</h2><p>每个IO口都可以作为外部中断输入</p><blockquote><p>IO与中断线的映射,16* 7 = 112, 一共有16个中断线</p><p>Q:什么是中断线,能干什么? A:中断线能发出中断请求</p></blockquote><p>△.同一时刻只有一个引脚能映射到某根中断线</p><p>原理:</p><p>GPIOX.0映射到EXT10<br>GPIOX.1映射到EXT11<br>GPIOX.15映射到EXTI15<br>e.g.PA.0~PG.0可以映射到EXIT0</p><p>I0口外部中断在中断向量表中只分配了7个<strong>中断向量</strong>，也就是只能使用7个中断服务函数</p><h3 id="常用库函数"><a class="markdownIt-Anchor" href="#常用库函数"></a> 常用库函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_EXTILineConig</span><span class="params">(<span class="keyword">uint8_t</span> GPIO,<span class="keyword">uint8_t</span> PortSource,<span class="keyword">uint8_t</span> GPIO_PinSource)</span></span></span><br><span class="line"><span class="function"><span class="comment">//设置IO口与中断线的映射关系：</span></span></span><br><span class="line">exp:GPIO_EXTILineContig(GPIO_PortSourceGPIOE, GPIO_PinSource2)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTIInit</span><span class="params">(EXTI_InitTypeDef* EXTI_InitStruct)</span></span>;</span><br><span class="line"><span class="comment">//初始化中断线：触发方式等</span></span><br><span class="line"><span class="function">ITStatus <span class="title">EXTI_GetlTStatus</span><span class="params">(<span class="keyword">uint32_t</span> EXTI_hLine)</span></span>;</span><br><span class="line"><span class="comment">//判断中断线中断状态，是否发生</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI_ClearlTPendingBit</span><span class="params">(<span class="keyword">uint32_t</span> EXTI_Line)</span></span></span><br><span class="line"><span class="function"><span class="comment">//清除中断线上的中断标志位</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EXTI_InitStructure.EXTI_Line=EXTI_Line2;<span class="comment">// 指定要配置的中断线</span></span><br><span class="line">EXTI_InitStructure.EXTI_Mode =EXTI_Mode_Interrupt;<span class="comment">// 模式:事件or中断</span></span><br><span class="line">EXTI_InitStructure.EXTI_Trigger =EXTI_Trigger_Faling;<span class="comment">//上升沿、下降沿、双触发沿</span></span><br><span class="line">EXTI_InitStructure.EXTI_LineCmd =ENABLE;<span class="comment">// 使能、失能</span></span><br><span class="line">EXTI_Init(&amp; EXTI_InitStructure);</span><br></pre></td></tr></table></figure><h3 id="配置的一般步骤"><a class="markdownIt-Anchor" href="#配置的一般步骤"></a> 配置的一般步骤</h3><p><img src="/2019/10/15/玩玩Stm32/E:%5Chexo%5Csource_posts%5C%E7%8E%A9%E7%8E%A9Stm32%5C%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD.jpg" alt="外部中断"></p><p>demo：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTIX_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"> <span class="comment">// 声明初始化结构体变量</span></span><br><span class="line"> EXTI_InitTypeDef EXTI_InitStructure;</span><br><span class="line"> NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line"></span><br><span class="line">    KEY_Init(); <span class="comment">//按键端口初始化</span></span><br><span class="line"></span><br><span class="line">  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);<span class="comment">//使能复用功能时钟</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//GPIOE.2 中断线以及中断初始化配置   下降沿触发</span></span><br><span class="line">  GPIO_EXTILineConfig(GPIO_PortSourceGPIOE,GPIO_PinSource2);</span><br><span class="line"></span><br><span class="line">  EXTI_InitStructure.EXTI_Line=EXTI_Line2;<span class="comment">//KEY2</span></span><br><span class="line">  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;</span><br><span class="line">  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;</span><br><span class="line">  EXTI_InitStructure.EXTI_LineCmd = ENABLE;</span><br><span class="line">  EXTI_Init(&amp;EXTI_InitStructure); <span class="comment">//根据EXTI_InitStruct中指定的参数初始化外设EXTI寄存器</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// ▲由于参数一致，所以不需要修改EXTI_InitStructure的功能参数</span></span><br><span class="line">   <span class="comment">//GPIOE.3  中断线以及中断初始化配置 下降沿触发 //KEY1</span></span><br><span class="line">  GPIO_EXTILineConfig(GPIO_PortSourceGPIOE,GPIO_PinSource3);</span><br><span class="line">  EXTI_InitStructure.EXTI_Line=EXTI_Line3;</span><br><span class="line">  EXTI_Init(&amp;EXTI_InitStructure);  <span class="comment">//根据EXTI_InitStruct中指定的参数初始化外设EXTI寄存器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//GPIOA.0  中断线以及中断初始化配置 上升沿触发 PA0  WK_UP</span></span><br><span class="line"> GPIO_EXTILineConfig(GPIO_PortSourceGPIOA,GPIO_PinSource0); </span><br><span class="line"></span><br><span class="line">  EXTI_InitStructure.EXTI_Line=EXTI_Line0;</span><br><span class="line">  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;</span><br><span class="line">  EXTI_Init(&amp;EXTI_InitStructure);<span class="comment">//根据EXTI_InitStruct中指定的参数初始化外设EXTI寄存器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;<span class="comment">//使能按键WK_UP所在的外部中断通道</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0x02</span>;<span class="comment">//抢占优先级2， </span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0x03</span>;<span class="comment">//子优先级3</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//使能外部中断通道</span></span><br><span class="line">  NVIC_Init(&amp;NVIC_InitStructure); </span><br><span class="line"></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn;<span class="comment">//使能按键KEY2所在的外部中断通道</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0x02</span>;<span class="comment">//抢占优先级2， </span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0x02</span>;<span class="comment">//子优先级2</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//使能外部中断通道</span></span><br><span class="line">  NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;<span class="comment">//使能按键KEY1所在的外部中断通道</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0x02</span>;<span class="comment">//抢占优先级2 </span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0x01</span>;<span class="comment">//子优先级1 </span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//使能外部中断通道</span></span><br><span class="line">  NVIC_Init(&amp;NVIC_InitStructure);    <span class="comment">//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//外部中断2服务程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI2_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);<span class="comment">//消抖</span></span><br><span class="line"><span class="keyword">if</span>(KEY2==<span class="number">0</span>)  <span class="comment">//按键KEY2</span></span><br><span class="line">&#123;</span><br><span class="line">LED0=!LED0;</span><br><span class="line">&#125; </span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line2);  <span class="comment">//清除LINE2上的中断标志位  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//外部中断3服务程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI3_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);<span class="comment">//消抖</span></span><br><span class="line"><span class="keyword">if</span>(KEY1==<span class="number">0</span>) <span class="comment">//按键KEY1</span></span><br><span class="line">&#123; </span><br><span class="line">LED1=!LED1;</span><br><span class="line">&#125; </span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line3);  <span class="comment">//清除LINE3上的中断标志位  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI4_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);<span class="comment">//消抖</span></span><br><span class="line"><span class="keyword">if</span>(KEY0==<span class="number">0</span>) <span class="comment">//按键KEY0</span></span><br><span class="line">&#123;</span><br><span class="line">LED0=!LED0;</span><br><span class="line">LED1=!LED1; </span><br><span class="line">&#125; </span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line4);  <span class="comment">//清除LINE4上的中断标志位  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">delay_init();     <span class="comment">//延时函数初始化  </span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级</span></span><br><span class="line">uart_init(<span class="number">115200</span>); <span class="comment">//串口初始化为115200</span></span><br><span class="line"> LED_Init();  <span class="comment">//初始化与LED连接的硬件接口</span></span><br><span class="line">BEEP_Init();         <span class="comment">//初始化蜂鸣器端口</span></span><br><span class="line">KEY_Init();         <span class="comment">//初始化与按键连接的硬件接口</span></span><br><span class="line">EXTIX_Init(); <span class="comment">//外部中断初始化</span></span><br><span class="line">LED0=<span class="number">0</span>;<span class="comment">//点亮LED0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"OK\r\n"</span>);</span><br><span class="line">delay_ms(<span class="number">1000</span>);  </span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录:</h2><h3 id="u8-u16-size_t是什么类型"><a class="markdownIt-Anchor" href="#u8-u16-size_t是什么类型"></a> u8、u16、Size_t是什么类型?</h3><h4 id="u8-u16"><a class="markdownIt-Anchor" href="#u8-u16"></a> u8、u16</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!&lt; Signed integer types  */</span></span><br><span class="line"><span class="keyword">typedef</span>   <span class="keyword">signed</span> <span class="keyword">char</span>     <span class="keyword">int8_t</span>;<span class="comment">//有符号8位数</span></span><br><span class="line"><span class="keyword">typedef</span>   <span class="keyword">signed</span> <span class="keyword">short</span>    <span class="keyword">int16_t</span>;<span class="comment">//有符号16位数</span></span><br><span class="line"><span class="keyword">typedef</span>   <span class="keyword">signed</span> <span class="keyword">long</span>     <span class="keyword">int32_t</span>;<span class="comment">//有符号32位数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*!&lt; Unsigned integer types  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>     <span class="keyword">uint8_t</span>;  <span class="comment">//无符号8位数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span>    <span class="keyword">uint16_t</span>;<span class="comment">//无符号16位数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>     <span class="keyword">uint32_t</span>;<span class="comment">//无符号32位数</span></span><br></pre></td></tr></table></figure><h4 id="size_t"><a class="markdownIt-Anchor" href="#size_t"></a> size_t</h4><p>size_t是C++标准在stddef.h中定义的。这个类型足以用来表示对象的大小。size_t的真实类型与操作系统有关。size_t在32位架构上是4字节，在64位架构上是8字节，在不同架构上进行编译时需要注意这个问题。而int在不同架构下都是4字节，与size_t不同；且int为带符号数，size_t为无符号数。</p><h3 id="电平相关知识"><a class="markdownIt-Anchor" href="#电平相关知识"></a> 电平相关知识</h3><p>单片机是一种数字集成芯片，数字电路中只有两种电平高电平和低电平。为了让大家在刚起步的时候对电平特性有一个清晰的认识，我们暂且定义单片机输出与输入为<strong>TTL</strong>电平，其中高电平为+5V,低电平为0V。计算机的串口为<strong>RS-232C</strong>电平。这里要强调的是，RS-232C电平为负逻辑电平。因此当计算机与单片机之间要通信时，需要加电平转换芯片，我们在TX-1C单片机实验板上所加的电平转换芯片是MAX232 。</p><p>常用的逻辑电平有TTL、CMOS、LVTTL、ECL、PECL、 GTL 、RS-232. RS-422. RS-485、LVDS等.其中TTL和CMOS的逻辑电平按典型电压可分为四类：5V系列(5V TL和5V CMOS)、3.3V 系列，2.5V 系列和1.8V系列，</p><p>T电平信号用的最多，这是因为，数据表示通常采用二进制，+5V等价于逻辑1，0V等价于逻辑0）.这被称为TTL（晶体管一晶体管逻辑电平）信号系统，这是计算机处理器控制的设备内部各部分之间通信的标准技术。TTL电平信号对于计算机处理器控制的设备内部的数据传输是很理想的，首先计算机处理器控制的设备内部的数据传输对于电源的要求不高，热损耗也较低，另外TTL电平信号直接与集成电路连接而不需要价格昂贵的线路驱动器</p><h3 id="功能函数"><a class="markdownIt-Anchor" href="#功能函数"></a> 功能函数</h3><p>判断u8数组开头</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">/////////////////////////</span></span><br><span class="line"><span class="comment">// 判断u8 arr开头是否为str //</span></span><br><span class="line"><span class="comment">////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">u8cmp</span><span class="params">(u8 *arr, <span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>( arr[i] != str[i])&#123;</span><br><span class="line">                <span class="comment">// arr shorter than str</span></span><br><span class="line">                <span class="keyword">if</span> (arr[i] == <span class="string">'\0'</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                <span class="comment">// not start with</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// arr start with str</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;玩玩stm32&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#玩玩stm32&quot;&gt;&lt;/a&gt; 玩玩Stm32&lt;/h1&gt;
&lt;h2 id=&quot;文件结构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#文件结构&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="嵌入式" scheme="https://nymrli.top/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>蒙特卡洛树搜索MCTS</title>
    <link href="https://nymrli.top/2019/10/07/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A0%91%E6%90%9C%E7%B4%A2MCTS/"/>
    <id>https://nymrli.top/2019/10/07/蒙特卡洛树搜索MCTS/</id>
    <published>2019-10-07T09:18:02.000Z</published>
    <updated>2019-11-26T08:16:48.898Z</updated>
    
    <content type="html"><![CDATA[<html><head><style type="text/css">                            .mjpage .MJX-monospace {                            font-family: monospace                            }                            .mjpage .MJX-sans-serif {                            font-family: sans-serif                            }                            .mjpage {                            display: inline;                            font-style: normal;                            font-weight: normal;                            line-height: normal;                            font-size: 100%;                            font-size-adjust: none;                            text-indent: 0;                            text-align: left;                            text-transform: none;                            letter-spacing: normal;                            word-spacing: normal;                            word-wrap: normal;                            white-space: nowrap;                            float: none;                            direction: ltr;                            max-width: none;                            max-height: none;                            min-width: 0;                            min-height: 0;                            border: 0;                            padding: 0;                            margin: 0                            }                            .mjpage * {                            transition: none;                            -webkit-transition: none;                            -moz-transition: none;                            -ms-transition: none;                            -o-transition: none                            }                            .mjx-svg-href {                            fill: blue;                            stroke: blue                            }                            .MathJax_SVG_LineBox {                            display: table!important                            }                            .MathJax_SVG_LineBox span {                            display: table-cell!important;                            width: 10000em!important;                            min-width: 0;                            max-width: none;                            padding: 0;                            border: 0;                            margin: 0                            }                            .mjpage__block {                            text-align: center;                            margin: 1em 0em;                            position: relative;                            display: block!important;                            text-indent: 0;                            max-width: none;                            max-height: none;                            min-width: 0;                            min-height: 0;                            width: 100%                            }</style></head><body><h1 id="蒙特卡洛树搜索mcts"><a class="markdownIt-Anchor" href="#蒙特卡洛树搜索mcts"></a> 蒙特卡洛树搜索MCTS</h1><h2 id="跟围棋的关联"><a class="markdownIt-Anchor" href="#跟围棋的关联"></a> 跟围棋的关联</h2><h3 id="alphago-zero"><a class="markdownIt-Anchor" href="#alphago-zero"></a> AlphaGo Zero</h3><ul><li>蒙特卡洛树搜索——内含用于树遍历的 PUCT 函数的某些变体</li><li>残差卷积神经网络——其中的策略和价值网络被用于评估棋局，以进行下一步落子位置的先验概率估算。</li><li>强化学习——通过自我对弈进行神经网络训练</li></ul><p>AlphaGo Zero跟AlphaGo的最大区别是抛弃人类棋谱的，完全通过自我对弈来学会下棋的，并且仅用40小时就到达了AlphaGo的棋力。</p><p>过程是这样，首先生成棋谱，然后将棋谱作为输入训练神经网络，训练好的神经网络用来预测落子和胜率。如下图：</p><p><img src="/2019/10/07/蒙特卡洛树搜索MCTS/2018031214442364.jpg" alt="2018031214442364"></p><p>在AlphaGo Zero中蒙特卡洛树搜索主要是用来生成棋谱的</p><h2 id="蒙特卡洛树搜索"><a class="markdownIt-Anchor" href="#蒙特卡洛树搜索"></a> 蒙特卡洛树搜索</h2><blockquote><p>Q:MCTS干了什么?</p><p>A:给出一个「游戏状态」并选择「胜率最高的下一步」</p><p>适用于<strong>有限两人零和回合制游戏</strong></p></blockquote><p>MCTS算法是一种决策算法，每次模拟（simulation）分为4步：</p><ol><li>Tree traversal(树的遍历):<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mi>C</mi><mi>B</mi><mn>1</mn><mo stretchy="false">(</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mover accent="true"><msub><mi>V</mi><mi>i</mi></msub><mo stretchy="true">‾</mo></mover><mo>+</mo><mi>c</mi><msqrt><mfrac><mrow><mi>log</mi><mo>⁡</mo><mi>N</mi></mrow><msub><mi>n</mi><mi>i</mi></msub></mfrac></msqrt><mo separator="true">,</mo><mi>c</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">UCB1(S_{i})=\overline{V_{i}}+c \sqrt{\frac{\log N}{n_{i}}}, c=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">1</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.8399999999999999em;vertical-align:-0.6114419999999999em;"></span><span class="mord mathdefault">c</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.228558em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.188558em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width="400em" height="1.8800000000000001em" viewbox="0 0 400000 1944" preserveaspectratio="xMinYMin slice"><path d="M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10zM1001 80H400000v40H1013z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6114419999999999em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span><br>其中，表<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi>V</mi><mi>i</mi></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{V_{i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>状态的平均value(下面会进一步解释）</li><li>Node expansion(拓展节点)</li><li>Rollout (random simulation)(模拟)</li><li>Backpropagation(方向传播)</li></ol><h3 id="蒙特卡洛计算过程"><a class="markdownIt-Anchor" href="#蒙特卡洛计算过程"></a> 蒙特卡洛计算过程</h3><blockquote><p>UCB(Upper Confidence Bounds置信上限)其实就是UCT(UCB for Tree)中需要计算的值，而UCT是根据UCB值来迭代的算法</p></blockquote><p>第一、二步的流程（遍历、拓展节点）：</p><p>1.从状态S0开始，要在下面两个动作中进行选择（假设只有两个动作可选），选择的标准就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mi>C</mi><mi>B</mi><mn>1</mn><mo stretchy="false">(</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">UCB1(S_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">1</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>值，<strong>选择最大化 UCT 的节点作为下一个节点</strong>。初始情况两个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mi>C</mi><mi>B</mi><mn>1</mn><mo stretchy="false">(</mo><msub><mi>S</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>U</mi><mi>C</mi><mi>B</mi><mn>1</mn><mo stretchy="false">(</mo><msub><mi>S</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">UCB1(S_{1})=UCB1(S_{2})=\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">1</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">1</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>,按顺序选择S1<br>2.判断目前的结点S1(current node)是不是叶节点，这里叶节点是指其没有被展开（expansion）过。<br>3.接下来，按照流程图，需要判断结点S1被访问的系数是否为0。是0，则要进行Rollout。(Rollout其实就是在接下来的步骤中每一步都随机采取动作，直到停止点（围棋中的对局结束），得到一个最终的value。)==&gt;假设Rollout最终值为20.<br>4.Backpropagation，即利用Rollout最终得到的value来更新路径上每个结点的T,N值。(之后把Rollout的结果删除：MCTS的想法就是要从出S0发不断的进行迭代，不断更新结点值，直到达到一定的迭代次数或者时间。)<br>5.如果没有达到一定的迭代次数或者时间，继续从根节点进行1-4</p><p><img src="/2019/10/07/蒙特卡洛树搜索MCTS/20171024211039397.png" alt="20171024211039397"></p><p>第三步rollout模拟:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*这个函数接受一个表示博弈状态的参数，然后返回下一步行动。实际上，它被设计得非常快，从而可以让很多模拟快速进行——默认的 rollout policy 函数是一个均衡分布的随机数生成函数。*/</span><br><span class="line">Rollout(S_i):</span><br><span class="line">    loop forever:</span><br><span class="line">     /* 如果当前状态结点是个终止结点 */</span><br><span class="line">     if S_i is a terminal state:</span><br><span class="line">         /* 那么直接返回它的value值*/</span><br><span class="line">         return value(S_i)</span><br><span class="line">     /* 找到下一个动作 */</span><br><span class="line">     A_i = random(available-actions(S_i))</span><br><span class="line">     /* 选择下一个状态进行拓展 */</span><br><span class="line">     S_i = simulate(A_i,S_i)</span><br></pre></td></tr></tbody></table></figure><p>例子说明见:<a href="https://blog.csdn.net/ljyt2/article/details/78332802" target="_blank" rel="noopener">蒙特卡洛树搜索（MCTS）算法-计算过程</a>，视频讲解见B站:<a href="https://www.bilibili.com/video/av67847675?from=search&amp;seid=7487786042631726209" target="_blank" rel="noopener">【MCTS】Youtube上迄今为止最好的蒙特卡罗树搜索讲解</a></p><p>相比极大极小法（minimax）。这个策略假定你的对手发挥了最好的博弈水平，然后以此调整策略来最大化你的收益。简单地说，给定状态，你想要找到一个能产生最大收益的 move ，假定你的对手想要最小化你的收益（最大化他自己的收益）。因此，名字叫作<strong>极小化极大</strong>。</p><p><strong>极小化极大算法的最大劣势</strong>是，需要扩展整个博弈树。对于分支因子较高的博弈（例如围棋或者国际象棋），这会导致庞大的博弈树从而失败。</p><h3 id="uct算法树的置信上限ucb-for-trees"><a class="markdownIt-Anchor" href="#uct算法树的置信上限ucb-for-trees"></a> UCT算法——树的置信上限(UCB for Trees)</h3><blockquote><p>Upper Confidence Bounds(置信上限)</p></blockquote><p>UCT是一个让我们从已访问的节点中选择下一个节点来进行遍历的函数，也是MCTS的核心函数。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mi>C</mi><mi>T</mi><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>Q</mi><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mrow><mi>N</mi><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>+</mo><mi>c</mi><msqrt><mfrac><mrow><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mrow><mi>N</mi><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></msqrt></mrow><annotation encoding="application/x-tex">UCT(v_{i}, v)=\frac{Q(v_{i})}{N(v_{i})}+c \sqrt{\frac{\log (N(v))}{N(v_{i})}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.04em;vertical-align:-1.160625em;"></span><span class="mord mathdefault">c</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.879375em;"><span class="svg-align" style="top:-5em;"><span class="pstrut" style="height:5em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.839375em;"><span class="pstrut" style="height:5em;"></span><span class="hide-tail" style="min-width:1.02em;height:3.08em;"><svg width="400em" height="3.08em" viewbox="0 0 400000 3240" preserveaspectratio="xMinYMin slice"><path d="M473,2793c339.3,-1799.3,509.3,-2700,510,-2702c3.3,-7.3,9.3,-11,18,-11H400000v40H1017.7s-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200c0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26s76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,606zM1001 80H400000v40H1017z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.160625em;"><span></span></span></span></span></span></span></span></span></span></p><h3 id="exploitation-component利用"><a class="markdownIt-Anchor" href="#exploitation-component利用"></a> exploitation component(利用)</h3><p>第一部分是<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="6.636ex" height="6.509ex" style="vertical-align: -2.671ex;" viewbox="0 -1652.5 2857.3 2802.6" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title"><title id="MathJax-SVG-1-Title">\frac{Q(v_{i})}{N(v_{i})}</title><defs aria-hidden="true"><path stroke-width="1" id="E1-MJMATHI-51" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"/><path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/><path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/><path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/><path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/><path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true"><g transform="translate(120,0)"><rect stroke="none" width="2617" height="60" x="0" y="220"/><g transform="translate(108,770)"> <use xlink:href="#E1-MJMATHI-51" x="0" y="0"/> <use xlink:href="#E1-MJMAIN-28" x="791" y="0"/><g transform="translate(1181,0)"> <use xlink:href="#E1-MJMATHI-76" x="0" y="0"/> <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-69" x="686" y="-213"/></g> <use xlink:href="#E1-MJMAIN-29" x="2010" y="0"/></g><g transform="translate(60,-771)"> <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/> <use xlink:href="#E1-MJMAIN-28" x="888" y="0"/><g transform="translate(1278,0)"> <use xlink:href="#E1-MJMATHI-76" x="0" y="0"/> <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-69" x="686" y="-213"/></g> <use xlink:href="#E1-MJMAIN-29" x="2107" y="0"/></g></g></g></svg></span>​ ，也称作exploitation component</p><p>可以看做是子节点Vi的胜率估计（总收益/总次数=平均每次的收益）。但是不能只选择胜率高的下一步，因为这种贪婪方式的搜索会很快导致游戏结束，这往往会导致搜索不充分，错过最优解。</p><p>举个简单的例子。现在假设MCTS的UCT函数只用了探索成分，从根节点开始，我们对所有子节点进行了一次模拟，然后在下一步中只访问至少赢了一次的子节点。那么在第一次模拟中那些不幸未被选中的节点（实际中rollout策略函数通常是随机的）将会被立刻抛弃</p><h3 id="exploration-component探索"><a class="markdownIt-Anchor" href="#exploration-component探索"></a> exploration component(探索)</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><msqrt><mfrac><mrow><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mrow><mi>N</mi><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></msqrt></mrow><annotation encoding="application/x-tex">c \sqrt{\frac{\log(N(v))}{N(v_{i})}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.6100000000000001em;"></span><span class="mord mathdefault">c</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.23em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mclose mtight">)</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.1899999999999995em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width="400em" height="1.8800000000000001em" viewbox="0 0 400000 1944" preserveaspectratio="xMinYMin slice"><path d="M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10zM1001 80H400000v40H1013z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6100000000000001em;"><span></span></span></span></span></span></span></span></span>，这个成分更倾向于那些想对较少被探索的节点N(Vi)小。</p><p>参数c是exploitation和exploration之间的折中系数。</p><h3 id="mcts的终止"><a class="markdownIt-Anchor" href="#mcts的终止"></a> MCTS的终止</h3><p>终止条件(or)：</p><ul><li>达到一定的迭代次数</li><li>达到规定的搜索时间</li></ul><p>当MSCT程序结束时，最佳的移动通常是访问次数最多的那个节点，也是UCT最大的点。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考:</h2><p><a href="https://blog.csdn.net/mergerly/article/details/83788862" target="_blank" rel="noopener">深度学习入门：AlphaGo Zero蒙特卡洛树搜索</a></p><p><a href="https://blog.csdn.net/ljyt2/article/details/78332802" target="_blank" rel="noopener">蒙特卡洛树搜索（MCTS）算法-计算过程</a></p><p><a href="https://www.bilibili.com/video/av67847675?from=search&amp;seid=7487786042631726209" target="_blank" rel="noopener">【MCTS】Youtube上迄今为止最好的蒙特卡罗树搜索讲解</a></p><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现:</h2><p><a href="https://blog.csdn.net/white_gl/article/details/56521880" target="_blank" rel="noopener">python实现的基于蒙特卡洛树搜索(MCTS)与UCB的五子棋游戏</a></p><p><a href="https://github.com/int8/monte-carlo-tree-search" target="_blank" rel="noopener">mctspy：蒙特卡洛树搜索算法的python实现</a></p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;style type=&quot;text/css&quot;&gt;
                            .mjpage .MJX-monospace {
                            font-family: monospace

      
    
    </summary>
    
    
      <category term="RL" scheme="https://nymrli.top/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>Python多进程</title>
    <link href="https://nymrli.top/2019/10/06/Python%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>https://nymrli.top/2019/10/06/Python多进程/</id>
    <published>2019-10-06T12:17:44.000Z</published>
    <updated>2019-10-07T04:15:31.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python多进程"><a class="markdownIt-Anchor" href="#python多进程"></a> Python多进程</h1><h2 id="守护进程"><a class="markdownIt-Anchor" href="#守护进程"></a> 守护进程</h2><blockquote><p>守护进程其实就是**“子进程“是否伴随主进程一起结束**:守护==&gt;伴随，即守护进程会伴随主进程的代码运行完毕后而死掉</p></blockquote><p>进程：当父进程需要将一个任务并发出去执行，需要将该任务放到以个子进程里<br>守护：当该子进程内的代码在父进程代码运行完毕后就没有存在的意义了，就应该<br>将该子进程设置为守护进程，会在父进程代码结束后死掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"end123"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">456</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"end456"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1=Process(target=foo)</span><br><span class="line">    p2=Process(target=bar)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将子进程p1设置为守护进程，守护进程要放在进程start之前</span></span><br><span class="line">    <span class="comment"># 所以p1会在print("main-------")打印完成后死掉，所以p1进程不会打印</span></span><br><span class="line">    p1.daemon=<span class="keyword">True</span></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    print(<span class="string">"main-------"</span>)</span><br></pre></td></tr></table></figure><h2 id="进程锁"><a class="markdownIt-Anchor" href="#进程锁"></a> 进程锁</h2><blockquote><p>主要使用multiprocessing下的Lock对象</p><p>就是将要执行任务的部门代码（只涉及到修改共享数据的代码）变成串行，作用是让进程不乱掉，下面代码就是可以避免 i 乱打印</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(l, i)</span>:</span></span><br><span class="line">    l.acquire()    <span class="comment">#锁住进程</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">'hello world'</span>, i)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        l.release()    <span class="comment">#释放锁</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        Process(target=f, args=(lock, num)).start()</span><br></pre></td></tr></table></figure><p>（理解为用锁来限制，同一时间只能让一个人拿着锁去改数据，先抢到锁的人<br>就有优先购买的权限）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要就是用的这三个</span></span><br><span class="line">lock = lock()</span><br><span class="line">lock.acquire() <span class="comment"># 拿钥匙，开门</span></span><br><span class="line">lock.release() <span class="comment">#还钥匙，关门</span></span><br></pre></td></tr></table></figure><h3 id="抢票demo"><a class="markdownIt-Anchor" href="#抢票demo"></a> 抢票demo</h3><p>写法一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟抢票软件的原理：</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Lock,Process</span><br><span class="line"><span class="keyword">import</span> json,os,time,random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span>               </span><br><span class="line">    <span class="comment">#查票功能实现并行访问</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'db.txt'</span>,<span class="string">'rt'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic=json.load(f)</span><br><span class="line">        print(<span class="string">'%s 查看余票数为 %s'</span>%(os.getpid(),dic[<span class="string">'count'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span>               </span><br><span class="line">    <span class="comment">#购票因为牵涉到对后台数据的修改，所以加互斥锁目的是逐一进行访问修改，以免数据错乱</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'db.txt'</span>, <span class="string">'rt'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">'count'</span>] &gt;<span class="number">0</span>:</span><br><span class="line">        <span class="comment">#有票</span></span><br><span class="line">        dic[<span class="string">'count'</span>]-=<span class="number">1</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))         </span><br><span class="line">        <span class="comment">#在购票时，模拟网络延迟...</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'db.txt'</span>, <span class="string">'wt'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(dic,f)</span><br><span class="line">        print(<span class="string">'%s 购票成功'</span>%os.getpid())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'%s 没有余票'</span>%os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(mutex)</span>:</span></span><br><span class="line">    <span class="comment">#查看（并行访问）</span></span><br><span class="line">    check()</span><br><span class="line">    <span class="comment">#抢票（加入互斥锁，实现串行访问，先到先得原则）</span></span><br><span class="line">    mutex.acquire()</span><br><span class="line">    get()</span><br><span class="line">    mutex.release() <span class="comment">#第一个购买完成后，解锁，后续进入继续购买</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">     mutex=Lock()   <span class="comment">#调用Lock类拿到一个对象</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">         p=Process(target=task,args=(mutex,))</span><br><span class="line">         p.start()</span><br></pre></td></tr></table></figure><p>写法二:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 火车票</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Lock</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ticket'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line">    print(<span class="string">'余票: %s'</span>%dic[<span class="string">'ticket'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_ticket</span><span class="params">(i,lock)</span>:</span></span><br><span class="line">    lock.acquire() <span class="comment">#拿钥匙进门</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ticket'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">'ticket'</span>] &gt; <span class="number">0</span> :</span><br><span class="line">        dic[<span class="string">'ticket'</span>] -= <span class="number">1</span></span><br><span class="line">        print(<span class="string">'\033[32m%s买到票了\033[0m'</span>%i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'\033[31m%s没买到票\033[0m'</span>%i)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'ticket'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(dic,f)</span><br><span class="line">    lock.release()      <span class="comment"># 还钥匙</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        p = Process(target=show,args=(i,))</span><br><span class="line">        p.start()</span><br><span class="line">    lock = Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        p = Process(target=buy_ticket, args=(i,lock))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><h2 id="进程间的通信"><a class="markdownIt-Anchor" href="#进程间的通信"></a> 进程间的通信**</h2><blockquote><p>用一块儿共享的内存==&gt;实现进程间的共享</p></blockquote><p>特点:</p><ul><li>一定是内存空间</li><li>能够自动帮忙处理锁的问题</li></ul><p>实现进程间的通讯（IPC）的方式有很多种，如：管道(Pipe)，消息队列(Queue: == PIPE+锁（队列）)，共享内存，信号，信号量，套接字</p><table><thead><tr><th>管道</th><th>消息队列</th><th>共享内存</th><th></th></tr></thead><tbody><tr><td>开辟空间</td><td>内存</td><td>内存</td><td>内存</td></tr><tr><td>读写方式</td><td>两端读写[双向/单向]</td><td>先进先出</td><td>覆盖之前的内容</td></tr><tr><td>效率</td><td>一般</td><td>一般</td><td>较高</td></tr><tr><td>应用</td><td>多用于父子进程</td><td>广泛灵活</td><td>需要注意互斥</td></tr></tbody></table><p>注意：<br>1.队列占用的是内存空间<br>2.不应该往队列中放大数据，应该只存放数据量较小的精简的内容</p><h2 id="生产者消费者模型"><a class="markdownIt-Anchor" href="#生产者消费者模型"></a> <strong>生产者消费者模型</strong></h2><blockquote><p>生产者：比喻的是程序中负责产生数据的任务<br>消费者：比喻的是程序中负责处理数据的任务</p><p>生产者———&gt;共享的介质(队列)&lt;————消费者</p></blockquote><p>Q:作用是什么?<br>A: 实现生产者与消费者的解耦和，生产者可以不停的生产，消费者也可以不停的消费从而平衡了生产者的生产能力与消费者消费能力，提升了而整体运行的效率</p><p>Q:什么时候用?<br>A:当我们程序中存在明显的两类任务，一类是负责产生数据，一类是负责处理数据，此时就应该考虑使用生产者消费者模型来提升程序的效率</p><h2 id="多进程中的join"><a class="markdownIt-Anchor" href="#多进程中的join"></a> <strong>多进程中的join()</strong></h2><p><em><strong>在进程中可以阻塞主进程的执行, 直到等待子线程全部完成之后, 才继续运行主线程后面的代码</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(num)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(num)</span><br><span class="line"><span class="comment">#定义一个用来装子线程的列表</span></span><br><span class="line">threads = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    <span class="comment">#target 指定子线程要执行的funtion, args 指定该funtion需要传入的参数</span></span><br><span class="line">    thread = threading.Thread(target = test, args = [i])</span><br><span class="line">    <span class="comment">#上面的 thread 是一个个参数i都不同的线程, 现在把它一个个装进列表 threads 里面</span></span><br><span class="line">    threads.append(thread)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">    <span class="comment">#for 循环执行 threads 列表里面的全部线程, 没有用 join()线程是无序执行的,</span></span><br><span class="line">    <span class="comment"># 就连最后一句print('end')可能比所有子线程都要先执行</span></span><br><span class="line">    i.start()</span><br><span class="line">print(<span class="string">'end'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>将其修改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tsreads:</span><br><span class="line">    i.start()</span><br><span class="line">    i.join()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">[Finished in 5.2s]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>每个都会隔一秒的进行输出,因为for循环也是主进程操作,也会被阻塞直到子进程完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tsreads:</span><br><span class="line">    i.start()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">i.join()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">[Finished in 1.2s]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>在这里看一看出来, join()还是阻挡了主线程的执行, 让所有的子线程执行完毕之后再执行, 而且前面的子线程的执行都是无序地执行完毕了</p><p>△.一般来说，join函数应该在所有的start函数之后(即一般情况下，让所有进程都执行，然后等待子进程结束，再进行下面的主进程)。</p><h2 id="python多进程之manager"><a class="markdownIt-Anchor" href="#python多进程之manager"></a> Python多进程之Manager</h2><blockquote><p>可以用来进程间共享对象、资源、变量===&gt;使用公共内存</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Manager</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 这里实现的就是多个进程之间共享内存，并修改数据</span></span><br><span class="line"><span class="comment"># 这里不需要加锁，因为manager已经默认给你加锁了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(d,l)</span>:</span></span><br><span class="line">    d[<span class="number">1</span>] = <span class="string">'1'</span></span><br><span class="line">    d[<span class="string">'2'</span>] = <span class="number">2</span></span><br><span class="line">    d[<span class="number">0.25</span>] = <span class="keyword">None</span></span><br><span class="line">    l.append(os.getpid())</span><br><span class="line">    print(l)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">with</span> Manager() <span class="keyword">as</span> manager:</span><br><span class="line">        d = manager.dict()  <span class="comment">#生成一个字典</span></span><br><span class="line">        l = manager.list(range(<span class="number">5</span>))  <span class="comment">#生成一个列表</span></span><br><span class="line">        p_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            p = Process(target=f,args=(d,l))</span><br><span class="line">            p.start()</span><br><span class="line">            p_list.append(p)</span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> p_list:</span><br><span class="line">            res.join()</span><br><span class="line">        print(d)</span><br><span class="line">        print(l)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock, Value</span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, salary)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.salary = Value(<span class="string">'i'</span>, salary)</span><br><span class="line">        self.data = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increase</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.salary.value += <span class="number">100</span></span><br><span class="line">        self.data.append(self.salary.value)</span><br><span class="line">        print(self.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPay</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name + <span class="string">':'</span> + str(self.salary.value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyManager</span><span class="params">(BaseManager)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    继承即可</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Manager</span><span class="params">()</span>:</span></span><br><span class="line">    m = MyManager()</span><br><span class="line">    m.start()</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">MyManager.register(<span class="string">'Employee'</span>, Employee)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(em, lock)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        em.increase()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manager = Manager()</span><br><span class="line">    em = manager.Employee(<span class="string">'zhangsan'</span>, <span class="number">1000</span>)</span><br><span class="line">    lock = Lock()</span><br><span class="line">    proces = [Process(target=func, args=(em, lock)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> proces:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> proces:</span><br><span class="line">        p.join()</span><br><span class="line">    print(em.getPay())</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br><span class="line"><span class="string">[1100]</span></span><br><span class="line"><span class="string">[1100, 1200]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600, 1700]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]</span></span><br><span class="line"><span class="string">[1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]</span></span><br><span class="line"><span class="string">zhangsan:2000</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="queue"><a class="markdownIt-Anchor" href="#queue"></a> Queue</h2><p>其实就是一个队列（FIFO），两个进程可以通过传入的参数q，来获得里面的内容，从而数据共享、通信。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入Queue,Process</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue,Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="comment">#写入进程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wp</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"%s开始写入："</span>%os.getpid)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"WANG"</span>:</span><br><span class="line">        <span class="comment">#将信息写入队列</span></span><br><span class="line">        q.put(i)</span><br><span class="line">        print(i)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取进程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rd</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"%s开始读取"</span>%os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            <span class="comment">#从队列读取信息</span></span><br><span class="line">            print(<span class="string">"read to %s"</span>%q.get())</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#创建队列</span></span><br><span class="line">    q = Queue()</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#创建写入进程</span></span><br><span class="line">    w = Process(target=wp,args=(q,))</span><br><span class="line">    <span class="comment">#启动写入进程</span></span><br><span class="line">    w.start()</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#创建读取进程</span></span><br><span class="line">    r = Process(target=rd,args=(q,))</span><br><span class="line">    <span class="comment">#启动读取进程</span></span><br><span class="line">    r.start()</span><br></pre></td></tr></table></figure><h2 id="pipe管道"><a class="markdownIt-Anchor" href="#pipe管道"></a> Pipe管道</h2><blockquote><p>和队列的功能差不多，实现两个进程之间数据的传递，只不过是FILO的:</p></blockquote><p><img src="/2019/10/06/Python多进程/Python%E5%A4%9A%E8%BF%9B%E7%A8%8B%5Cpipe.png" alt="pipe"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''管道pipe'''</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(conn)</span>:</span></span><br><span class="line">    conn.send(<span class="string">'hello'</span>)  <span class="comment">#发送hello</span></span><br><span class="line">    print(conn.recv())  <span class="comment">#收到牛逼</span></span><br><span class="line">    conn.close()        <span class="comment">#关闭</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parent_conn, child_conn = Pipe()    <span class="comment">#管道会产生两个返回值</span></span><br><span class="line">    p = Process(target=f, args=(child_conn,))   <span class="comment">#创建一个子进程</span></span><br><span class="line">    p.start()</span><br><span class="line">    print(parent_conn.recv())  <span class="comment">#收到'hello'"</span></span><br><span class="line">    parent_conn.send(<span class="string">'牛逼'</span>)  <span class="comment">#发送牛逼</span></span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h2 id="借鉴"><a class="markdownIt-Anchor" href="#借鉴"></a> 借鉴:</h2><p><a href="https://www.cnblogs.com/yangzhizong/p/9301530.html" target="_blank" rel="noopener">Python守护进程、进程互斥锁、进程间通信ICP（Queue队列）、生产者消费者模型</a></p><p><a href="https://blog.csdn.net/weixin_37111106/article/details/85120706" target="_blank" rel="noopener">多进程 之 join()</a></p><p><a href="https://blog.csdn.net/woainiwss/article/details/52013810" target="_blank" rel="noopener">Java 多线程中两个线程交替执行</a></p><p><a href="https://blog.csdn.net/u011865919/article/details/94722802" target="_blank" rel="noopener">Python多进程消息队列实现进程间通讯</a></p><p><a href="https://www.cnblogs.com/Fantinai/p/8433136.html" target="_blank" rel="noopener">Queue详细内容</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python多进程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#python多进程&quot;&gt;&lt;/a&gt; Python多进程&lt;/h1&gt;
&lt;h2 id=&quot;守护进程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#守护进程
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Openmv使用</title>
    <link href="https://nymrli.top/2019/10/06/Openmv%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2019/10/06/Openmv使用/</id>
    <published>2019-10-06T01:45:28.000Z</published>
    <updated>2019-11-07T12:36:38.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="openmv使用"><a class="markdownIt-Anchor" href="#openmv使用"></a> Openmv使用</h1><h2 id="下载openmv-ide"><a class="markdownIt-Anchor" href="#下载openmv-ide"></a> 下载Openmv IDE</h2><ul><li><a href="https://openmv.io/pages/download" target="_blank" rel="noopener">Openmv官网</a></li><li><a href="https://singtown.com/openmv-download/" target="_blank" rel="noopener">中国代理——星瞳</a></li><li><a href="https://github.com/openmv/openmv/releases" target="_blank" rel="noopener">Github_release</a></li></ul><p>推荐下载星瞳的，这个是中文版的，并且其他两个下载非常慢。</p><h2 id="捕捉图片设置"><a class="markdownIt-Anchor" href="#捕捉图片设置"></a> 捕捉图片设置：</h2><p><strong>设置彩色／黑白</strong></p><ul><li>sensor.set_pixformat() 设置像素模式。<ul><li>sensor.GRAYSCALE: 灰度，每个像素8bit。</li><li>sensor.RGB565: 彩色，每个像素16bit。</li></ul></li></ul><p><strong>设置图像大小</strong></p><ul><li><p>sensor.set_framesize() 设置图像的大小</p><ul><li>sensor.QQVGA: 160x120</li><li>sensor.QQVGA2: 128x160 (用于 lcd 扩展板)</li><li>sensor.HQVGA: 240x160</li><li>sensor.QVGA: 320x240</li><li>sensor.VGA: 640x480 (只用于OpenMV Cam M7 的灰度图处理图像，或者彩图采集图像)</li><li>sensor.QQCIF: 88x72</li><li>sensor.QCIF: 176x144</li><li>sensor.CIF: 352x288</li></ul><p><strong>设置窗口ROI</strong></p><p><code>sensor.set_windowing(roi)</code></p><p><strong>设置翻转</strong></p><p>sensor.set_hmirror(True)<br>水平方向翻转</p><p>sensor.set_vflip(True)<br>垂直方向翻转</p></li></ul><h2 id="demo例程"><a class="markdownIt-Anchor" href="#demo例程"></a> Demo例程：</h2><blockquote><p>openmv虽然比较贵,但是它的功能非常强大,已经提供了相当多的例程了。具体例程可以去星瞳的官网上查看，说明非常详细。</p></blockquote><p>在此，我只介绍点我们这次需要用到的功能。</p><p>我使用的是OPENMV-H7 R1，芯片是STM32H743，镜头为IR 1080P 2.8mm</p><p>Hello World</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hello World Example</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Welcome to the OpenMV IDE! Click on the green run arrow button below to run the script!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line">sensor.reset()                      <span class="comment"># Reset and initialize the sensor.</span></span><br><span class="line">sensor.set_pixformat(sensor.RGB565) <span class="comment"># Set pixel format to RGB565 (or GRAYSCALE)</span></span><br><span class="line">sensor.set_framesize(sensor.QVGA)   <span class="comment"># Set frame size to QVGA (320x240)</span></span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)     <span class="comment"># Wait for settings take effect.</span></span><br><span class="line">clock = time.clock()                <span class="comment"># Create a clock object to track the FPS.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    clock.tick()                    <span class="comment"># Update the FPS clock.</span></span><br><span class="line">    img = sensor.snapshot()         <span class="comment"># Take a picture and return the image.</span></span><br><span class="line">    print(clock.fps())              <span class="comment"># Note: OpenMV Cam runs about half as fast when connected</span></span><br><span class="line">                                    <span class="comment"># to the IDE. The FPS should increase once disconnected.</span></span><br></pre></td></tr></table></figure><h3 id="二维码识别"><a class="markdownIt-Anchor" href="#二维码识别"></a> 二维码识别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># QRCode Example</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example shows the power of the OpenMV Cam to detect QR Codes</span></span><br><span class="line"><span class="comment"># using lens correction (see the qrcodes_with_lens_corr.py script for higher performance).</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line">sensor.reset()</span><br><span class="line">sensor.set_pixformat(sensor.RGB565)</span><br><span class="line">sensor.set_framesize(sensor.QVGA)</span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)</span><br><span class="line">sensor.set_auto_gain(<span class="keyword">False</span>) <span class="comment"># must turn this off to prevent image washout...</span></span><br><span class="line">clock = time.clock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line">    img = sensor.snapshot()</span><br><span class="line">    img.lens_corr(<span class="number">1.8</span>) <span class="comment"># strength of 1.8 is good for the 2.8mm lens.</span></span><br><span class="line">    <span class="keyword">for</span> code <span class="keyword">in</span> img.find_qrcodes():</span><br><span class="line">        img.draw_rectangle(code.rect(), color = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        print(code)</span><br><span class="line">    print(clock.fps())</span><br></pre></td></tr></table></figure><p>代码是用python编写的，文件系统为microPython，具有Cpython解释器翻译成机器码。需要脱机运行的文件命名为main.py即可(具体详情见microPython规范)。可放于flash或者32GB以下的SD卡中，SD卡读取优先级高于Flash，且flash内容容易丢失，且擦写次数有限，建议使用SD卡。</p><p>主要需要用的库：</p><ul><li>sersor:通过这个对象可以控制摄像头及相关配置；</li><li>image：处理图像的功能函数都在这个库里<ul><li>sensor.snapshot()会返回一个&lt;class ‘Image’&gt;</li></ul></li><li>time：跟Python自带的time模块不同，这个是专门用来记录摄像头用时的</li></ul><h3 id="颜色追踪"><a class="markdownIt-Anchor" href="#颜色追踪"></a> 颜色追踪</h3><blockquote><p>颜色阈值需要使用LAB色彩空间</p></blockquote><p>LAB的范围选择，个人比较快截的方法是通过IDE右边的帧缓冲区来获取，即框出ROI区域后，再打开“工具-&gt;机器视觉-&gt;阈值编辑器-&gt;帧缓冲区”,然后根据直方图中的数据就可以筛选出想要的对象辣(白色是选出，黑色是过滤，好像跟PS的蒙版是反的?)</p><p>▲颜色识别时，一定要<strong>关闭</strong>自动增益、白平衡</p><ul><li>sensor.set_auto_gain() 自动增益开启（True）或者关闭（False）。在使用颜色追踪时，需要关闭自动增益。</li><li>sensor.set_auto_whitebal() 自动白平衡开启（True）或者关闭（False）。在使用颜色追踪时，需要关闭自动白平衡。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Measure the distance</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example shows off how to measure the distance through the size in imgage</span></span><br><span class="line"><span class="comment"># This example in particular looks for yellow pingpong ball.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time, lcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># For color tracking to work really well you should ideally be in a very, very,</span></span><br><span class="line"><span class="comment"># very, controlled enviroment where the lighting is constant...</span></span><br><span class="line"><span class="comment">#yellow_threshold   = (22, 74, -12, 31, 23, 62)</span></span><br><span class="line"></span><br><span class="line">box_threshold = (<span class="number">40</span>, <span class="number">80</span>, <span class="number">-4</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">51</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">red_threshold = (<span class="number">40</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">84</span>, <span class="number">30</span>, <span class="number">79</span>)</span><br><span class="line"><span class="comment"># You may need to tweak the above settings for tracking green things...</span></span><br><span class="line"><span class="comment"># Select an area in the Framebuffer to copy the color settings.</span></span><br><span class="line"></span><br><span class="line">sensor.reset() <span class="comment"># Initialize the camera sensor.</span></span><br><span class="line">sensor.set_pixformat(sensor.RGB565) <span class="comment"># use RGB565.</span></span><br><span class="line">sensor.set_framesize(sensor.QVGA) <span class="comment"># use QQVGA for speed.</span></span><br><span class="line">sensor.skip_frames(<span class="number">10</span>) <span class="comment"># Let new settings take affect.</span></span><br><span class="line">sensor.set_auto_whitebal(<span class="keyword">False</span>) <span class="comment"># turn this off.</span></span><br><span class="line">clock = time.clock() <span class="comment"># Tracks FPS.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#lcd.init() # Initialize the lcd screen.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">K=<span class="number">5000</span><span class="comment">#the value should be measured</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    clock.tick() <span class="comment"># Track elapsed milliseconds between snapshots().</span></span><br><span class="line">    img = sensor.snapshot() <span class="comment"># Take a picture and return the image.</span></span><br><span class="line"></span><br><span class="line">    blobs = img.find_blobs([red_threshold])</span><br><span class="line">    <span class="keyword">if</span> len(blobs) == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># Draw a rect around the blob.</span></span><br><span class="line">        <span class="comment">#b = blobs[0]</span></span><br><span class="line">        <span class="comment">#img.draw_rectangle(b[0:4]) # rect</span></span><br><span class="line">        <span class="comment">#img.draw_cross(b[5], b[6]) # cx, cy</span></span><br><span class="line">        <span class="comment">#Lm = (b[2]+b[3])/2</span></span><br><span class="line">        <span class="comment">#length = K/Lm</span></span><br><span class="line">        <span class="comment">#print(length)</span></span><br><span class="line">        b = blobs[<span class="number">0</span>]</span><br><span class="line">        img.draw_rectangle(b[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">        img.draw_cross(b[<span class="number">5</span>], b[<span class="number">6</span>])</span><br><span class="line">    <span class="comment">#lcd.display(sensor.snapshot()) # Take a picture and display the image.</span></span><br><span class="line">    <span class="comment">#print(clock.fps()) # Note: Your OpenMV Cam runs about half as fast while</span></span><br><span class="line">    <span class="comment"># connected to your computer. The FPS should increase once disconnected.</span></span><br></pre></td></tr></table></figure><h3 id="识别圆"><a class="markdownIt-Anchor" href="#识别圆"></a> 识别圆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 圆形检测例程</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 这个例子展示了如何用Hough变换在图像中找到圆。</span></span><br><span class="line"><span class="comment"># https://en.wikipedia.org/wiki/Circle_Hough_Transform</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 请注意，find_circles（）方法将只能找到完全在图像内部的圆。圈子之外的</span></span><br><span class="line"><span class="comment"># 图像/ roi被忽略...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line">sensor.reset()</span><br><span class="line">sensor.set_pixformat(sensor.RGB565) <span class="comment"># grayscale is faster</span></span><br><span class="line">sensor.set_framesize(sensor.QQVGA)</span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)</span><br><span class="line">clock = time.clock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#lens_corr(1.8)畸变矫正</span></span><br><span class="line">    img = sensor.snapshot().lens_corr(<span class="number">1.8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Circle对象有四个值: x, y, r (半径), 和 magnitude。</span></span><br><span class="line">    <span class="comment"># magnitude是检测圆的强度。越高越好</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># roi 是一个用以复制的矩形的感兴趣区域(x, y, w, h)。如果未指定，</span></span><br><span class="line">    <span class="comment"># ROI 即图像矩形。操作范围仅限于roi区域内的像素。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x_stride 是霍夫变换时需要跳过的x像素的数量。若已知圆较大，可增加</span></span><br><span class="line">    <span class="comment"># x_stride 。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># y_stride 是霍夫变换时需要跳过的y像素的数量。若已知直线较大，可增加</span></span><br><span class="line">    <span class="comment"># y_stride 。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># threshold 控制从霍夫变换中监测到的圆。只返回大于或等于阈值的圆。</span></span><br><span class="line">    <span class="comment"># 应用程序的阈值正确值取决于图像。注意：一条圆的大小是组成圆所有</span></span><br><span class="line">    <span class="comment"># 索贝尔滤波像素大小的总和。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x_margin 控制所检测的圆的合并。 圆像素为 x_margin 、 y_margin 和  </span></span><br><span class="line">    <span class="comment"># r_margin的部分合并。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># y_margin 控制所检测的圆的合并。 圆像素为 x_margin 、 y_margin 和</span></span><br><span class="line">    <span class="comment"># r_margin 的部分合并。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># r_margin 控制所检测的圆的合并。 圆像素为 x_margin 、 y_margin 和</span></span><br><span class="line">    <span class="comment"># r_margin 的部分合并。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># r_min，r_max和r_step控制测试圆的半径。</span></span><br><span class="line">    <span class="comment"># 缩小测试圆半径的数量可以大大提升性能。</span></span><br><span class="line">    <span class="comment"># threshold = 3500比较合适。如果视野中检测到的圆过多，请增大阈值；</span></span><br><span class="line">    <span class="comment"># 相反，如果视野中检测到的圆过少，请减少阈值。</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> img.find_circles(threshold = <span class="number">3500</span>, x_margin = <span class="number">10</span>, y_margin = <span class="number">10</span>, r_margin = <span class="number">10</span>,r_min = <span class="number">2</span>, r_max = <span class="number">100</span>, r_step = <span class="number">2</span>):<span class="comment"># (80,60,80,60)</span></span><br><span class="line">        img.draw_circle(c.x(), c.y(), c.r(), color = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        print(c)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> img.find_rects(threshold = <span class="number">3500</span>):</span><br><span class="line">        img.draw_rectangle(r.rect(), color=(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> r.corners():</span><br><span class="line">            img.draw_circle(p[<span class="number">0</span>], p[<span class="number">1</span>], <span class="number">5</span>, color=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>))</span><br><span class="line">            print(r)</span><br><span class="line">        </span><br><span class="line">    print(<span class="string">"FPS %f"</span> % clock.fps())</span><br></pre></td></tr></table></figure><h3 id="测距和测量物块大小"><a class="markdownIt-Anchor" href="#测距和测量物块大小"></a> 测距和测量物块大小</h3><blockquote><p>由于 OpenMV采用的是单目摄像头，想要实现测距，就需要选<strong>参照物</strong>，利用参照物的大小比例来计算距离。</p></blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mi>e</mi><mi>n</mi><mo>∝</mo><mfrac><mn>1</mn><mrow><mi>p</mi><mi>i</mi><mi>x</mi><mi>e</mi><mi>l</mi><mi>c</mi><mi>o</mi><mi>n</mi><mi>u</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Len  ∝  \frac{1}{pixelconut}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∝</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.326216em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><mark>&gt;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo>=</mo><mfrac><mi>C</mi><mrow><mi>p</mi><mi>i</mi><mi>x</mi><mi>e</mi><mi>l</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">dist = \frac{C}{pixel}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3534389999999998em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><em>实际长度和摄像头里的像素成反比</em>  **</mark>&gt;** <em>距离 = 一个常数/直径的像素</em></p><ol><li>先测出这个常数的值，怎么测不用说了吧，就是先让球距离摄像头10cm，打印出摄像头里直径的像素值，然后相乘，就得到了k的值！</li><li>就可以算出距离了(=这个常数/摄像头里像素点数)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Measure the distance</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example shows off how to measure the distance through the size in imgage</span></span><br><span class="line"><span class="comment"># This example in particular looks for yellow pingpong ball.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line"><span class="comment"># For color tracking to work really well you should ideally be in a very, very,</span></span><br><span class="line"><span class="comment"># very, controlled enviroment where the lighting is constant...</span></span><br><span class="line">yellow_threshold   = ( <span class="number">56</span>,   <span class="number">83</span>,    <span class="number">5</span>,   <span class="number">57</span>,   <span class="number">63</span>,   <span class="number">80</span>)</span><br><span class="line"><span class="comment"># box_threshold = (40, 80, -4, 21, 14, 51)</span></span><br><span class="line"><span class="comment"># red_threshold = (40, 59, 61, 84, 30, 79)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You may need to tweak the above settings for tracking green things...</span></span><br><span class="line"><span class="comment"># Select an area in the Framebuffer to copy the color settings.</span></span><br><span class="line"></span><br><span class="line">sensor.reset() <span class="comment"># Initialize the camera sensor.</span></span><br><span class="line">sensor.set_pixformat(sensor.RGB565) <span class="comment"># use RGB565.</span></span><br><span class="line">sensor.set_framesize(sensor.QQVGA) <span class="comment"># use QQVGA for speed.</span></span><br><span class="line">sensor.skip_frames(<span class="number">10</span>) <span class="comment"># Let new settings take affect.</span></span><br><span class="line">sensor.set_auto_whitebal(<span class="keyword">False</span>) <span class="comment"># turn this off.</span></span><br><span class="line">clock = time.clock() <span class="comment"># Tracks FPS.</span></span><br><span class="line"></span><br><span class="line">K=<span class="number">5000</span><span class="comment">#the value should be measured</span></span><br><span class="line"><span class="comment"># K = 36*10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    clock.tick() <span class="comment"># Track elapsed milliseconds between snapshots().</span></span><br><span class="line">    img = sensor.snapshot() <span class="comment"># Take a picture and return the image.</span></span><br><span class="line"></span><br><span class="line">    blobs = img.find_blobs([yellow_threshold])</span><br><span class="line">    <span class="keyword">if</span> len(blobs) == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># Draw a rect around the blob.</span></span><br><span class="line">        b = blobs[<span class="number">0</span>]</span><br><span class="line">        img.draw_rectangle(b[<span class="number">0</span>:<span class="number">4</span>]) <span class="comment"># rect</span></span><br><span class="line">        img.draw_cross(b[<span class="number">5</span>], b[<span class="number">6</span>]) <span class="comment"># cx, cy</span></span><br><span class="line">        Lm = (b[<span class="number">2</span>]+b[<span class="number">3</span>])/<span class="number">2</span><span class="comment"># 像素点数</span></span><br><span class="line">        <span class="comment"># index 2 is length, 3 is width</span></span><br><span class="line">        length = K/Lm<span class="comment"># 距离</span></span><br><span class="line">        print(length)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(clock.fps()) # Note: Your OpenMV Cam runs about half as fast while</span></span><br><span class="line">    <span class="comment"># connected to your computer. The FPS should increase once disconnected.</span></span><br></pre></td></tr></table></figure><h3 id="lcd显示"><a class="markdownIt-Anchor" href="#lcd显示"></a> LCD显示</h3><blockquote><p>由于正好有个LCD显示屏，那就也记录下LCD的代码把</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LCD Example</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note: To run this example you will need a LCD Shield for your OpenMV Cam.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The LCD Shield allows you to view your OpenMV Cam's frame buffer on the go.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, lcd</span><br><span class="line"></span><br><span class="line">sensor.reset() <span class="comment"># Initialize the camera sensor.</span></span><br><span class="line">sensor.set_pixformat(sensor.RGB565) <span class="comment"># or sensor.GRAYSCALE</span></span><br><span class="line">sensor.set_framesize(sensor.QQVGA2) <span class="comment"># Special 128x160 framesize for LCD Shield.</span></span><br><span class="line">lcd.init() <span class="comment"># Initialize the lcd screen.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    lcd.display(sensor.snapshot()) <span class="comment"># Take a picture and display the image.</span></span><br></pre></td></tr></table></figure><h3 id="串口通信"><a class="markdownIt-Anchor" href="#串口通信"></a> 串口通信</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># UART Control</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example shows how to use the serial port on your OpenMV Cam. Attach pin</span></span><br><span class="line"><span class="comment"># P4 to the serial input of a serial LCD screen to see "Hello World!" printed</span></span><br><span class="line"><span class="comment"># on the serial LCD display.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pyb <span class="keyword">import</span> UART</span><br><span class="line"></span><br><span class="line"><span class="comment"># Always pass UART 3 for the UART number for your OpenMV Cam.</span></span><br><span class="line"><span class="comment"># The second argument is the UART baud rate. For a more advanced UART control</span></span><br><span class="line"><span class="comment"># example see the BLE-Shield driver.</span></span><br><span class="line">uart = UART(<span class="number">3</span>, <span class="number">19200</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    <span class="comment"># 发送数据</span></span><br><span class="line">    uart.write(<span class="string">"Hello World!\r"</span>)</span><br><span class="line">    time.sleep(<span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># 接收数据</span></span><br><span class="line">    <span class="keyword">if</span> uart.any():</span><br><span class="line">        a=uart.readline()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h4 id="与stm32通信"><a class="markdownIt-Anchor" href="#与stm32通信"></a> 与STM32通信</h4><p>openmv</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time,sensor, image</span><br><span class="line"><span class="keyword">from</span> pyb <span class="keyword">import</span> UART</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uart = UART(<span class="number">3</span>, <span class="number">115200</span>)</span><br><span class="line">uart.init(<span class="number">115200</span>, bits=<span class="number">8</span>, parity=<span class="keyword">None</span>, stop=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    <span class="comment"># 由于正点原子提供的串口通信协议需要以\r\n结尾,所以,这边必须也要写\r\n</span></span><br><span class="line">    uart.write(<span class="string">"Hello World!\r\n"</span>)</span><br><span class="line">    <span class="comment"># 中文好像解析不了</span></span><br><span class="line">    <span class="keyword">if</span> uart.any():</span><br><span class="line">        a=uart.readline()</span><br><span class="line">        print(a)</span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"key.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sys.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"usart.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"> u16 t;  </span><br><span class="line">u16 len;</span><br><span class="line">u16 times=<span class="number">0</span>;</span><br><span class="line">delay_init();     <span class="comment">//延时函数初始化  </span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级</span></span><br><span class="line">uart_init(<span class="number">115200</span>); <span class="comment">//串口初始化为115200</span></span><br><span class="line"> LED_Init();     <span class="comment">//LED端口初始化</span></span><br><span class="line">KEY_Init();          <span class="comment">//初始化与按键连接的硬件接口</span></span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(USART_RX_STA&amp;<span class="number">0x8000</span>)&#123;   </span><br><span class="line">len=USART_RX_STA&amp;<span class="number">0x3fff</span>;<span class="comment">//得到此次接收到的数据长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Your message is:\r\n\r\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)&#123;</span><br><span class="line">USART_SendData(USART1, USART_RX_BUF[t]);<span class="comment">//向串口1发送数据</span></span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TC)!=SET);<span class="comment">//等待发送结束</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("\r\n\r\n");//插入换行</span></span><br><span class="line">USART_RX_STA=<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">times++;</span><br><span class="line"><span class="keyword">if</span>(times%<span class="number">200</span>==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Waiting for input.2333\r\n"</span>);  </span><br><span class="line"><span class="keyword">if</span>(times%<span class="number">30</span>==<span class="number">0</span>)LED0=!LED0;<span class="comment">//闪烁LED,提示系统正在运行.</span></span><br><span class="line">delay_ms(<span class="number">10</span>);   </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>测试结果（暂时还没理解）：</p><p><img src="/2019/10/06/Openmv使用/uart.png" alt="uart"></p><p>补充:</p><p><a href="https://blog.csdn.net/zzzzjh/article/details/80725348" target="_blank" rel="noopener">openmv 发送16进制数</a></p><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录:</h2><p><a href="https://book.openmv.cc/image/drawing.html" target="_blank" rel="noopener">OpenMV中文入门教程</a></p><p>视频教程:</p><ul><li><a href="https://www.bilibili.com/video/av56434844/?p=5" target="_blank" rel="noopener">B站OpenMV视频教程</a></li><li><a href="https://singtown.com/learn/" target="_blank" rel="noopener">星瞳官网</a></li></ul><p>B站的清晰度和加载速度比较快，星瞳官网的还有额外的教程（他家的拓展版）</p><h3 id="画图"><a class="markdownIt-Anchor" href="#画图"></a> 画图：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image.draw_line((10,10,20,30), color=(255,0,0))</span><br><span class="line">image.draw_rectangle(rect_tuple, color=(255,0,0))</span><br></pre></td></tr></table></figure><h4 id="画线"><a class="markdownIt-Anchor" href="#画线"></a> 画线</h4><ul><li>image.draw_line(line_tuple, color=White) 在图像中画一条直线。<ul><li>line_tuple的格式是(x0, y0, x1, y1)，意思是(x0, y0)到(x1, y1)的直线。</li><li>颜色可以是灰度值(0-255)，或者是彩色值(r, g, b)的tupple。默认是白色</li></ul></li></ul><h4 id="画框"><a class="markdownIt-Anchor" href="#画框"></a> 画框</h4><ul><li>image.draw_rectangle(rect_tuple, color=White) 在图像中画一个矩形框。<ul><li>rect_tuple 的格式是 (x, y, w, h)。</li></ul></li></ul><h4 id="画圆"><a class="markdownIt-Anchor" href="#画圆"></a> 画圆</h4><ul><li>image.draw_circle(x, y, radius, color=White) 在图像中画一个圆。<ul><li>x,y是圆心坐标</li><li>radius是圆的半径</li></ul></li></ul><h4 id="画十字"><a class="markdownIt-Anchor" href="#画十字"></a> 画十字</h4><ul><li>image.draw_cross(x, y, size=5, color=White) 在图像中画一个十字<ul><li>x,y是坐标</li><li>size是两侧的尺寸</li></ul></li></ul><h4 id="写字"><a class="markdownIt-Anchor" href="#写字"></a> 写字</h4><ul><li>image.draw_string(x, y, text, color=White) 在图像中写字 8x10的像素<ul><li>x,y是坐标。使用\n, \r, and \r\n会使光标移动到下一行。</li><li>text是要写的字符串。</li></ul></li></ul><h3 id="需要调参的地方"><a class="markdownIt-Anchor" href="#需要调参的地方"></a> 需要调参的地方：</h3><ol><li>测大小的常数k</li><li>形状检测的阈值</li><li>颜色识别的阈值</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;openmv使用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#openmv使用&quot;&gt;&lt;/a&gt; Openmv使用&lt;/h1&gt;
&lt;h2 id=&quot;下载openmv-ide&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;
      
    
    </summary>
    
    
      <category term="嵌入式" scheme="https://nymrli.top/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>TD-afterstate</title>
    <link href="https://nymrli.top/2019/10/03/TD-afterstate/"/>
    <id>https://nymrli.top/2019/10/03/TD-afterstate/</id>
    <published>2019-10-03T11:28:36.000Z</published>
    <updated>2019-10-03T11:30:03.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="td-afterstate"><a class="markdownIt-Anchor" href="#td-afterstate"></a> TD-afterstate</h1><blockquote><p>afterstae: 当前执行一个动作后的状态，可以理解为中间态</p><p>是处理问题的一个改动,一种思想</p></blockquote><p>以俄罗斯方块为例:</p><p>状态是由当前的局面和一个随机方块组成，执行一个下落动作之后会产生一个局面就称为afterstate，即动作结束后不能进行新的动作（没有新方块）的状态。</p><p>中间态和下一个随机方块构成了下一个状态</p><p>对于没有这种随机性的问题，afterstate就是next state</p><p>td做预测，afterstate做控制</p><p><img src="/2019/10/03/TD-afterstate/afterstate.png" alt="afterstate"></p><h2 id="更多"><a class="markdownIt-Anchor" href="#更多"></a> 更多:</h2><p><a href="https://zhuanlan.zhihu.com/p/27591256" target="_blank" rel="noopener">强化学习经典入门书的读书笔记系列–第六篇Temporal-Difference</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;td-afterstate&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#td-afterstate&quot;&gt;&lt;/a&gt; TD-afterstate&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;afterstae: 当前执行一个动作后的状态，可以
      
    
    </summary>
    
    
      <category term="RL" scheme="https://nymrli.top/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>git命令详解</title>
    <link href="https://nymrli.top/2019/09/29/git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://nymrli.top/2019/09/29/git命令详解/</id>
    <published>2019-09-29T09:39:07.000Z</published>
    <updated>2019-10-11T13:32:26.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git命令详解"><a class="markdownIt-Anchor" href="#git命令详解"></a> git命令详解</h1><h2 id="自己的仓库管理"><a class="markdownIt-Anchor" href="#自己的仓库管理"></a> 自己的仓库管理：</h2><p><code>git add &lt;filename&gt;</code></p><ul><li>将文件添加到暂存区中  (其中git add.可以将当前目录的子目录文件都添加到暂存区中)</li></ul><p><code>git commit -m &quot;...&quot;:</code></p><ul><li>保存仓库的历史记录,其中 -m &quot;…&quot;提交信息(概述)</li></ul><p><code>git config --global user.name &quot;...&quot;</code>、<code>git config --global user.email &quot;...&quot;</code>:</p><ul><li>配置提交作者信息</li></ul><p><code>git log</code>:</p><ul><li><strong>查看</strong>提交日志(当前状态为终点) 会产生版本库里一系列单独提交的历史</li></ul><p><code>git diff ID1/ID2</code>:</p><ul><li>查看版本差异</li></ul><p><code>git mv 新名字,旧名字</code></p><ul><li>重命名:</li></ul><p><code>git branch -a [-v]</code></p><ul><li>分支一展表, -r 查看远程git服务器上的分支</li></ul><p><code>git checkout 分支名</code>:</p><ul><li>切换分支</li><li>-b创建,且切换到新建分支 等价于<code>git branch 分支名</code> + <code>git checkout 分支名</code></li></ul><p><code>git branch -d [分支名称]</code></p><ul><li>删除一个分支, -d选项只能删除已经参与过合并的分支，对于未参与合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项、</li></ul><p><code>git rest --head ID</code> :</p><ul><li>退回之前提交版本</li></ul><p><code>git status</code>  :</p><ul><li>查看仓库当前状态；</li></ul><p><code>git reflog</code>  :</p><ul><li>查看当前仓库的操作日志</li></ul><p><code>git rebase -i</code>:</p><ul><li>压缩历史(如果出现拼写错误时需要): <code>git rebase -i HEAD~2</code></li></ul><p><code>git merge --no-f 分支名</code>  :</p><ul><li>合并分支</li></ul><p><code>git remote set-url origin https://github.com/Freedomisgood/NjuptGo.git</code></p><ul><li>修改仓库指定新的远程仓库</li></ul><p><code>git commit --amend</code>:</p><ul><li>修改上次commit备注信息</li></ul><h2 id="远程仓库"><a class="markdownIt-Anchor" href="#远程仓库"></a> 远程仓库</h2><p>如果本地没有仓库，则clone:<br><code>git clone http://github.com/xxx/yyy.git</code></p><p>在本地增加远程仓库信息：<code>git remote add apollo3d http://github.com/xxx/yyy.git</code>,此时远程库名为origin、apollo3d</p><p>删除远程分支<code>git push origin --delete kickof</code></p><p>git push代码到远程新分支<br><code>git push origin master:my_remote_new_branch</code></p><h3 id="git-pull"><a class="markdownIt-Anchor" href="#git-pull"></a> git pull</h3><p>如果本地有仓库，则拉取更新命令为:<br><code>git pull &lt;远程库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p><p>比如，取回远程库中的online分支，与本地的online分支进行merge，要写成：</p><p>git pull origin online:online<br>如果是要与本地当前分支merge，则冒号后面的&lt;本地分支名&gt;可以不写</p><p><code>git pull origin online</code><br>通常，git会将本地库分支与远程分支之间建立一种追踪关系。比如，在git clone的时候，所有本地分支默认与远程库的同名分支建立追踪关系。也就是说，本地的master分支自动追踪origin/master分支。因此，如果当前处于本地online分支上，并且本地online分支与远程的online分支有追踪关系，那么远程的分支名可以省略：</p><p>比如，取回远程库中的online分支，与本地的online分支进行merge，要写成：</p><p><code>git pull origin</code></p><p>其实，git pull 命令等同于先做了git fetch ，再做了git merge。即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin online</span><br><span class="line">git checkout online</span><br><span class="line">git merge origin/online</span><br></pre></td></tr></table></figure><h3 id="git-push"><a class="markdownIt-Anchor" href="#git-push"></a> git push</h3><h4 id="二推送本地分支到远程仓库"><a class="markdownIt-Anchor" href="#二推送本地分支到远程仓库"></a> 二.推送本地分支到远程仓库</h4><p>（一）.创建本地分支<code>git checkout -b 新分支名</code><br>（二）.推送本地分支到远程仓库<code>git push --set-upstream origin 分支名</code></p><h4 id="三-将远程git仓库里的指定分支拉取到本地本地不存在的分支"><a class="markdownIt-Anchor" href="#三-将远程git仓库里的指定分支拉取到本地本地不存在的分支"></a> 三、将远程git仓库里的指定分支拉取到本地（本地不存在的分支）</h4><p><code>git checkout -b 本地分支名 origin/远程分支名</code></p><h2 id="修改了gitignore生效指令"><a class="markdownIt-Anchor" href="#修改了gitignore生效指令"></a> 修改了.gitignore生效指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached . // 删除本地缓存</span><br><span class="line">git add . // 添加要提交的文件</span><br><span class="line">git commit -m &apos;update .gitignore&apos; // 更新本地的缓存</span><br></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li>Git远程操作详解:<a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/06/git_remote.html</a></li><li>使用git将项目上传到github（最简单方法）:<a href="https://www.cnblogs.com/cxk1995/p/5800196.html" target="_blank" rel="noopener">https://www.cnblogs.com/cxk1995/p/5800196.html</a></li><li>&lt;&lt;Git入门与实践&gt;&gt;:日本</li><li><a href="https://blog.csdn.net/yxlshk/article/details/79944535" target="_blank" rel="noopener">Git恢复之前版本的两种方法reset、revert（图文详解）</a></li></ul><h2 id="采坑记录"><a class="markdownIt-Anchor" href="#采坑记录"></a> 采坑记录</h2><p>Q: 不小心<code>git reset --hard HEAD^</code>导致工作区文件全没了</p><p>A:解决方案:</p><ul><li><p><a href="https://stackoverflow.com/questions/7374069/undo-git-reset-hard-with-uncommitted-files-in-the-staging-area" target="_blank" rel="noopener">Undo git reset --hard with uncommitted files in the staging area</a></p></li><li><p><a href="https://blog.csdn.net/w47_csdn/article/details/82701947" target="_blank" rel="noopener">恢复git reset --hard删除的文件</a></p><p>根据这篇博客操作的结果<code>git cat-file -p ID &gt; a.md</code>是个对比文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">100644 blob cdca566953e3b7b56897b2fa6995129170403212Q-learning.ipynb</span><br><span class="line">100644 blob 47735fcc505315aa61583dad9dc4facb7c00fbdcQ-learning.py</span><br><span class="line">100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391__init__.py</span><br><span class="line">040000 tree db76babbe2f2df4566b607e732c0c835418f9a83__pycache__</span><br><span class="line">100644 blob debb716313cfbf28c055e89ce4a625a1d7801f5bagents.py</span><br><span class="line">100644 blob 30ec43da68efe5eb5e8e31cb431fea981e256b6aapproximator.py</span><br><span class="line">100644 blob 1e8ac820d62943d16fa56fa981d72e27239527d9core.py</span><br><span class="line">100644 blob a0cfa7ac7f9f15a658ace5c5c7c5bbe73f680502myringworld.py</span><br><span class="line">100644 blob 69cb25ba30f4350454a0e731a70890cbf2530217ringworld.py</span><br><span class="line">100644 blob 5638e012cb1b68783e6cdf45d2e769cca96e591futils.py</span><br><span class="line">100644 blob 96aa662c03d991487e6da8120884b6f647be7202viewer.py</span><br></pre></td></tr></table></figure></li><li><p>△.<a href="https://blog.csdn.net/lijiafa/article/details/78275936" target="_blank" rel="noopener">关于git reset --hard导致文件丢失的血的教训</a>——亲测有效</p><ul><li>解决add了但没有commit的文件，可以用上述方法找回</li></ul></li></ul><p>分支git branch参数区别</p><p><img src="/2019/09/29/git命令详解/branch.jpg" alt="branch"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git命令详解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#git命令详解&quot;&gt;&lt;/a&gt; git命令详解&lt;/h1&gt;
&lt;h2 id=&quot;自己的仓库管理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#自己的仓库管理
      
    
    </summary>
    
    
      <category term="git" scheme="https://nymrli.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>numpy使用记录</title>
    <link href="https://nymrli.top/2019/09/28/numpy%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://nymrli.top/2019/09/28/numpy使用记录/</id>
    <published>2019-09-28T03:13:29.000Z</published>
    <updated>2019-09-28T10:16:49.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="numpy使用记录"><a class="markdownIt-Anchor" href="#numpy使用记录"></a> Numpy使用记录</h1><h2 id="numpy中的random"><a class="markdownIt-Anchor" href="#numpy中的random"></a> numpy中的random</h2><p>numpy.random.choice(a, size=None, replace=True, p=None)</p><ul><li>a : 如果是一维数组，就表示从这个一维数组中随机采样；如果是int型，就表示从0到a-1这个序列中随机采样。</li><li>size : 采样结果的数量，默认为1.可以是整数，表示要采样的数量；也可以为tuple，如(m, n, k)，则要采样的数量为m * n * k，size为(m, n, k)</li><li>replace : boolean型，采样的样本是否要更换？这个地方我不太理解，测了一下发现replace指定为True时，采样的元素会有重复；当replace指定为False时，采样不会重复。</li><li>p : 一个一维数组，制定了a中每个元素采样的概率，若为默认的None，则a中每个元素被采样的概率相同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">choice(a[, size, replace, p])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(<span class="number">5</span>, <span class="number">3</span>, replace=<span class="keyword">False</span>)</span><br><span class="line">array([<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#This is equivalent to np.random.permutation(np.arange(5))[:3]</span></span><br><span class="line"><span class="comment"># Generate a non-uniform random sample from np.arange(5) of size 3 without replacement:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(<span class="number">5</span>, <span class="number">3</span>, replace=<span class="keyword">False</span>, p=[<span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0.3</span>, <span class="number">0.6</span>, <span class="number">0</span>])</span><br><span class="line">array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>np.random.randint</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">2</span>,<span class="number">5</span>,size=(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 函数原型randint(low[, high, size])</span></span><br><span class="line"><span class="comment"># - 返回随机的整数，位于半开区间 [low, high)。</span></span><br></pre></td></tr></table></figure><p>np.random.rand</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.rand(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">array([[ <span class="number">0.14022471</span>,  <span class="number">0.96360618</span>],  <span class="comment">#random</span></span><br><span class="line">       [ <span class="number">0.37601032</span>,  <span class="number">0.25528411</span>],  <span class="comment">#random</span></span><br><span class="line">       [ <span class="number">0.49313049</span>,  <span class="number">0.94909878</span>]]) <span class="comment">#random</span></span><br><span class="line"><span class="comment"># 跟random_sample([size])、random([size])和ranf([size])一样</span></span><br></pre></td></tr></table></figure><h2 id="array操作"><a class="markdownIt-Anchor" href="#array操作"></a> array操作</h2><blockquote><p>广播啥的就不介绍了，主要是介绍一点函数方法的使用</p></blockquote><p><strong>array、asarray、asanyarray</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(a)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">c = np.array(a)</span><br><span class="line">c[<span class="number">1</span>]=<span class="number">3</span></span><br><span class="line">print(a,c)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] [<span class="number">1</span> <span class="number">3</span> <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">b = np.asarray(a)</span><br><span class="line">b[<span class="number">1</span>]=<span class="number">3</span></span><br><span class="line">print(a,b)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">3</span> <span class="number">3</span>] [<span class="number">1</span> <span class="number">3</span> <span class="number">3</span>]</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>array和asarray的不同在于array对目标做一个拷贝，而asarray不会</li><li>np.asanyarray 会返回 ndarray 或者ndarray的子类，而np.asarray 只返回 ndarray.</li></ul><p>np.where</p><blockquote><p>这个函数非常有用，非常香，但是他的参数需要narray</p></blockquote><p>np.where(cond,x,y)：满足条件（cond）输出x，不满足输出y</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;numpy使用记录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#numpy使用记录&quot;&gt;&lt;/a&gt; Numpy使用记录&lt;/h1&gt;
&lt;h2 id=&quot;numpy中的random&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python random</title>
    <link href="https://nymrli.top/2019/09/27/Python-random/"/>
    <id>https://nymrli.top/2019/09/27/Python-random/</id>
    <published>2019-09-27T14:11:59.000Z</published>
    <updated>2019-09-29T09:01:11.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-random"><a class="markdownIt-Anchor" href="#python-random"></a> Python random</h1><blockquote><p>老是忘记random中每个函数之间的区别，而且常常跟numpy里的random也经常搞混，因此还是写篇文章记一下吧。</p></blockquote><h2 id="random模块"><a class="markdownIt-Anchor" href="#random模块"></a> random模块</h2><h3 id="choice和sample"><a class="markdownIt-Anchor" href="#choice和sample"></a> choice和sample</h3><p>python中random.choice()可以从给定的可迭代对象中随机挑选出一个。</p><p>而python中random.sample()方法则可以随机地从给定的可迭代对象中提取出N个<strong>不同</strong>的元素，<strong>列表的维数没有限制</strong>。（即第二参数给出个数N）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.sample([chr(<span class="number">97</span> + x) <span class="keyword">for</span> x <span class="keyword">in</span> range(int(<span class="number">9</span>))],<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 函数原型sample(self, population, k)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'e'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line">print( random.randint(<span class="number">1</span>,<span class="number">10</span>) )        <span class="comment"># 产生 1 到 10 的一个整数型随机数  </span></span><br><span class="line">print( random.random() )             <span class="comment"># 产生 0 到 1 之间的随机浮点数</span></span><br><span class="line">print( random.uniform(<span class="number">1.1</span>,<span class="number">5.4</span>) )     <span class="comment"># 产生  1.1 到 5.4 之间的随机浮点数，区间可以不是整数</span></span><br><span class="line">print( random.choice(<span class="string">'tomorrow'</span>) )   <span class="comment"># 从序列中随机选取一个元素</span></span><br><span class="line"><span class="comment"># 函数原型def choice(self, seq)</span></span><br><span class="line">print( random.randrange(<span class="number">1</span>,<span class="number">100</span>,<span class="number">2</span>) )   <span class="comment"># 生成从1到100的间隔为2的随机整数</span></span><br></pre></td></tr></table></figure><h3 id="shuffle"><a class="markdownIt-Anchor" href="#shuffle"></a> shuffle</h3><p>正如字面所示，也就是打乱的意思</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]                <span class="comment"># 将序列a中的元素顺序打乱</span></span><br><span class="line">random.shuffle(a)</span><br><span class="line">print(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h2 id="numpy中的random"><a class="markdownIt-Anchor" href="#numpy中的random"></a> numpy中的random</h2><p>numpy.random.choice(a, size=None, replace=True, p=None)</p><ul><li>a : 如果是一维数组，就表示从这个一维数组中随机采样；如果是int型，就表示从0到a-1这个序列中随机采样。</li><li>size : 采样结果的数量，默认为1.可以是整数，表示要采样的数量；也可以为tuple，如(m, n, k)，则要采样的数量为m * n * k，size为(m, n, k)</li><li>replace : boolean型，采样的样本是否要更换？这个地方我不太理解，测了一下发现replace指定为True时，采样的元素会有重复；当replace指定为False时，采样不会重复。</li><li>p : 一个一维数组，制定了a中每个元素采样的概率，若为默认的None，则a中每个元素被采样的概率相同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">choice(a[, size, replace, p])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(<span class="number">5</span>, <span class="number">3</span>, replace=<span class="keyword">False</span>)</span><br><span class="line">array([<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#This is equivalent to np.random.permutation(np.arange(5))[:3]</span></span><br><span class="line"><span class="comment"># Generate a non-uniform random sample from np.arange(5) of size 3 without replacement:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(<span class="number">5</span>, <span class="number">3</span>, replace=<span class="keyword">False</span>, p=[<span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0.3</span>, <span class="number">0.6</span>, <span class="number">0</span>])</span><br><span class="line">array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>np.random.randint</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">2</span>,<span class="number">5</span>,size=(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 函数原型randint(low[, high, size])</span></span><br><span class="line"><span class="comment"># - 返回随机的整数，位于半开区间 [low, high)。</span></span><br></pre></td></tr></table></figure><p>np.random.rand</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.rand(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">array([[ <span class="number">0.14022471</span>,  <span class="number">0.96360618</span>],  <span class="comment">#random</span></span><br><span class="line">       [ <span class="number">0.37601032</span>,  <span class="number">0.25528411</span>],  <span class="comment">#random</span></span><br><span class="line">       [ <span class="number">0.49313049</span>,  <span class="number">0.94909878</span>]]) <span class="comment">#random</span></span><br><span class="line"><span class="comment"># 跟random_sample([size])、random([size])和ranf([size])一样</span></span><br></pre></td></tr></table></figure><p>▲需要注意的是np.random.randint和random.randint的区间不同，前者左闭右开()，后者左右都是闭区间[]▲</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-random&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#python-random&quot;&gt;&lt;/a&gt; Python random&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;老是忘记random中每个函数之间的区别，而且常常跟
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://nymrli.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>OpenAI Gym使用、rendering画图</title>
    <link href="https://nymrli.top/2019/09/26/OpenAI-Gym%E4%BD%BF%E7%94%A8/"/>
    <id>https://nymrli.top/2019/09/26/OpenAI-Gym使用/</id>
    <published>2019-09-26T09:53:27.000Z</published>
    <updated>2019-10-07T10:01:00.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="openai-gym使用-rendering画图"><a class="markdownIt-Anchor" href="#openai-gym使用-rendering画图"></a> OpenAI Gym使用、rendering画图</h1><blockquote><p>gym开源库：包含一个测试问题集，每个问题成为环境（environment），可以用于自己的RL算法开发。这些环境有共享的接口，允许用户设计通用的算法。其包含了deep mind 使用的Atari游戏测试床。</p></blockquote><p>在强化学习中有2个基本概念，一个是环境（environment），称为外部世界，另一个为智能体agent（<strong>写的算法</strong>）。agent发送action至environment，environment返回观察和回报。</p><p><a href="http://gym.openai.com/docs/" target="_blank" rel="noopener">Gym官方文档</a></p><h2 id="hello-gym"><a class="markdownIt-Anchor" href="#hello-gym"></a> Hello gym</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="comment"># 创建一个小车倒立摆模型</span></span><br><span class="line">env = gym.make(‘CartPole-v0’)</span><br><span class="line"><span class="comment"># 初始化环境</span></span><br><span class="line">env.reset()</span><br><span class="line"><span class="comment"># 刷新当前环境，并显示</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    env.render()</span><br><span class="line">    env.step(env.action_space.sample()) <span class="comment"># take a random action</span></span><br></pre></td></tr></table></figure><p><img src="https://gym.openai.com/assets/docs/aeloop-138c89d44114492fd02822303e6b4b07213010bb14ca5856d2d49d6b62d88e53.svg" alt=""></p><p>设计理念图,一个环境的step函数返回需要的信息，有4种返回值</p><ul><li><strong>observation</strong></li><li><strong>reward</strong></li><li><strong>done</strong> :判断是否到了重新设定(<em>reset</em>)环境</li><li><strong>info</strong> :用于调试的诊断信息，有时也用于学习，但智能体（agent ）在正式的评价中不允许使用该信息进行学习。</li></ul><p>该进程通过调用<strong>reset()<strong>来启动，它返回一个初始</strong>observation</strong>。 所以之前代码的更恰当的方法是遵守<strong>done</strong>的标志：</p><h2 id="空间spaces"><a class="markdownIt-Anchor" href="#空间spaces"></a> 空间（Spaces）</h2><p>在上面的例子中，已经从环境的动作空间中抽取随机动作。但这些行动究竟是什么呢？ 每个环境都带有<strong>action_space</strong> 和<strong>observation_space</strong>对象。这些属性是<a href="https://github.com/openai/gym/blob/master/gym/core.py" target="_blank" rel="noopener">Space</a>类型，它们描述格式化的有效的行动和观察。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line">env = gym.make(<span class="string">'CartPole-v0'</span>)</span><br><span class="line"><span class="comment"># 离散空间允许固定范围的非负数，因此在这种情况下，有效的动作是0或1. </span></span><br><span class="line">print(env.action_space)</span><br><span class="line"><span class="comment">#&gt; Discrete(2)</span></span><br><span class="line">print(env.observation_space)</span><br><span class="line"><span class="comment">#&gt; Box(4,)</span></span><br></pre></td></tr></table></figure><p>Box空间表示一个n维box，所以有效的观察将是4个数字的数组。 也可以检查Box的范围：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(env.observation_space.high)</span><br><span class="line"><span class="comment">#&gt; array([ 2.4       ,         inf,  0.20943951,         inf])</span></span><br><span class="line">print(env.observation_space.low)</span><br><span class="line"><span class="comment">#&gt; array([-2.4       ,        -inf, -0.20943951,        -inf])</span></span><br></pre></td></tr></table></figure><p>这种内省可以帮助编写适用于许多不同环境的通用代码。box和discrete是最常见的空间。你可以从一个空间中取样，或者检查某物是否属于它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gym <span class="keyword">import</span> spaces</span><br><span class="line">space = spaces.Discrete(<span class="number">8</span>) <span class="comment"># Set with 8 elements &#123;0, 1, 2, ..., 7&#125;</span></span><br><span class="line">x = space.sample()</span><br><span class="line"><span class="keyword">assert</span> space.contains(x)</span><br><span class="line"><span class="keyword">assert</span> space.n == <span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="envrender画图"><a class="markdownIt-Anchor" href="#envrender画图"></a> Env.render画图</h2><blockquote><p>参考<a href="https://www.jianshu.com/p/b3c4d2b95c58" target="_blank" rel="noopener">Gym 简单画图</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先，导入库文件（包括gym模块和gym中的渲染模块）</span></span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">from</span> gym.envs.classic_control <span class="keyword">import</span> rendering</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们生成一个类，该类继承 gym.Env. 同时，可以添加元数据，改变渲染环境时的参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(gym.Env)</span>:</span></span><br><span class="line">    <span class="comment"># 如果你不想改参数，下面可以不用写</span></span><br><span class="line">    metadata = &#123;</span><br><span class="line">        <span class="string">'render.modes'</span>: [<span class="string">'human'</span>, <span class="string">'rgb_array'</span>],</span><br><span class="line">        <span class="string">'video.frames_per_second'</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 我们在初始函数中定义一个 viewer ，即画板</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.viewer = rendering.Viewer(<span class="number">600</span>, <span class="number">400</span>)   <span class="comment"># 600x400 是画板的长和框</span></span><br><span class="line"><span class="comment"># 继承Env render函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self, mode=<span class="string">'human'</span>, close=False)</span>:</span></span><br><span class="line">        <span class="comment"># 下面就可以定义你要绘画的元素了</span></span><br><span class="line">        line1 = rendering.Line((<span class="number">100</span>, <span class="number">300</span>), (<span class="number">500</span>, <span class="number">300</span>))</span><br><span class="line">        line2 = rendering.Line((<span class="number">100</span>, <span class="number">200</span>), (<span class="number">500</span>, <span class="number">200</span>))</span><br><span class="line">        <span class="comment"># 给元素添加颜色</span></span><br><span class="line">        line1.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        line2.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 把图形元素添加到画板中</span></span><br><span class="line">        self.viewer.add_geom(line1)</span><br><span class="line">        self.viewer.add_geom(line2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.viewer.render(return_rgb_array=mode == <span class="string">'rgb_array'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 最后运行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Test()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        t.render()</span><br></pre></td></tr></table></figure><p><strong>△.值得注意的是，画板的水平方向是 x 轴， 垂直方向是 y 轴， 且原点在左下角</strong></p><h3 id="画个圆"><a class="markdownIt-Anchor" href="#画个圆"></a> <strong>画个圆</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self, mode=<span class="string">'human'</span>, close=False)</span>:</span></span><br><span class="line">    <span class="comment"># 画一个直径为 30 的园</span></span><br><span class="line">    circle = rendering.make_circle(<span class="number">30</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加一个平移操作</span></span><br><span class="line">    circle_transform = rendering.Transform(translation=(<span class="number">100</span>, <span class="number">200</span>))</span><br><span class="line">    <span class="comment"># 让圆添加平移这个属性,</span></span><br><span class="line">    circle.add_attr(circle_transform)</span><br><span class="line">    </span><br><span class="line">    self.viewer.add_geom(circle)</span><br><span class="line">    <span class="keyword">return</span> self.viewer.render(return_rgb_array=mode == <span class="string">'rgb_array'</span>)</span><br></pre></td></tr></table></figure><p>△注意.是圆心在平移</p><h2 id="ringviewr"><a class="markdownIt-Anchor" href="#ringviewr"></a> RingViewr</h2><blockquote><p>研究rings时写的render</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">from</span> gym.envs.classic_control <span class="keyword">import</span> rendering</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ringViewer</span><span class="params">(rendering.Viewer)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    画板,直接继承自rendering.Viewer</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,width, height, display=None)</span>:</span></span><br><span class="line">        super(ringViewer, self).__init__(width, height, display=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pos2loc</span><span class="params">(pos=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        根据位置索引确定画图坐标</span></span><br><span class="line"><span class="string">        :param pos: 位置索引0-9</span></span><br><span class="line"><span class="string">        :return: loc</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSize</span><span class="params">(size)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        设置画圆的半径</span></span><br><span class="line"><span class="string">        :param size:[0-2]</span></span><br><span class="line"><span class="string">        :return: radius</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getColor</span><span class="params">(c=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        根据颜色索引选择圆圈颜色</span></span><br><span class="line"><span class="string">        :param c:</span></span><br><span class="line"><span class="string">        :return: list</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawNewring</span><span class="params">(self, newring:list=None)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        画新生成的圆</span></span><br><span class="line"><span class="string">        :param newring:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(newring)):</span><br><span class="line">            <span class="keyword">if</span> newring[i] != <span class="number">0</span>:</span><br><span class="line">                ring = rendering.make_circle(radius=self.getSize(i),</span><br><span class="line">                                             res=<span class="number">50</span>,</span><br><span class="line">                                             filled=<span class="keyword">False</span>)</span><br><span class="line">                r, g, b = self.getColor(newring[i])</span><br><span class="line">                ring.set_color(r, g, b)</span><br><span class="line">                ring_transform = rendering.Transform(translation=(<span class="number">150</span>,<span class="number">30</span>))</span><br><span class="line">                ring.add_attr(ring_transform)</span><br><span class="line">                self.add_geom(ring)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_drawQG</span><span class="params">(self, qgs: list=None)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        画棋盘上各个棋格的圆圈</span></span><br><span class="line"><span class="string">        :param qgs:</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">for</span> num,qg <span class="keyword">in</span> enumerate(qgs):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(qg)):</span><br><span class="line">                <span class="keyword">if</span> qg[i] != <span class="number">0</span>:</span><br><span class="line">                    ring = rendering.make_circle(radius=self.getSize(i),</span><br><span class="line">                                                 res = <span class="number">50</span>,</span><br><span class="line">                                                 filled=<span class="keyword">False</span>)</span><br><span class="line">                    r, g, b = self.getColor(qg[i])</span><br><span class="line">                    ring.set_color(r, g, b)</span><br><span class="line">                    ring_transform = rendering.Transform(translation=self.pos2loc(num))</span><br><span class="line">                    ring.add_attr(ring_transform)</span><br><span class="line">                    self.add_geom(ring)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getQG</span><span class="params">(self, qg: list=None)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        将len=27的list转换为[[],[],...]</span></span><br><span class="line"><span class="string">        :param qg: (27,1)的list</span></span><br><span class="line"><span class="string">        :return: (9,1)的list</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        qgs = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                tmp = []</span><br><span class="line">                <span class="keyword">for</span> z <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                    tmp.append(qg[<span class="number">9</span>*x+<span class="number">3</span>*y+z])</span><br><span class="line">                qgs.append(tmp)</span><br><span class="line">        self._drawQG(qgs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testenv</span><span class="params">(gym.Env)</span>:</span></span><br><span class="line">    <span class="comment"># 如果你不想改参数，下面可以不用写</span></span><br><span class="line">    metadata = &#123;</span><br><span class="line">        <span class="string">'render.modes'</span>: [<span class="string">'human'</span>, <span class="string">'rgb_array'</span>],</span><br><span class="line">        <span class="string">'video.frames_per_second'</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.viewer = ringViewer(<span class="number">300</span>, <span class="number">400</span>)   <span class="comment"># 600x400 是画板的长和框</span></span><br><span class="line">        self.state:list = []</span><br><span class="line">        self.state:list = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setState</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        self.state = state</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setNewring</span><span class="params">(self, newring=None)</span>:</span></span><br><span class="line">        self.newring = newring</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self, mode=<span class="string">'human'</span>, close=False)</span>:</span></span><br><span class="line">        <span class="comment"># 由于没有找到viewer源码中删除组件的代码,于是每次在渲染前 清空上一次geoms和onetime_geoms列表 来达到消除的目的</span></span><br><span class="line">        <span class="keyword">if</span> self.state.any():</span><br><span class="line">            self.viewer.geoms.clear()</span><br><span class="line">            self.viewer.onetime_geoms.clear()</span><br><span class="line">            self.viewer.getQG(self.state)</span><br><span class="line">        <span class="keyword">if</span> self.newring:</span><br><span class="line">            self.viewer.drawNewring(self.newring)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.viewer.render(return_rgb_array=mode == <span class="string">'rgb_array'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    v = Testenv()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        v.setState(np.random.randint(<span class="number">0</span>,<span class="number">6</span>,(<span class="number">27</span>)))</span><br><span class="line">        v.setNewring([random.randint(<span class="number">0</span>,<span class="number">5</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>)])</span><br><span class="line">        print(v.state)</span><br><span class="line">        print(v.newring)</span><br><span class="line">        v.render()</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>△.由于没有找到viewer源码中删除组件的代码,于是每次在渲染前 清空上一次geoms和onetime_geoms列表 来达到消除的目的</p><p>效果图如下</p><p><img src="/2019/09/26/OpenAI-Gym使用/ring.jpg" alt="ring"></p><h2 id="深入剖析gym环境构建转"><a class="markdownIt-Anchor" href="#深入剖析gym环境构建转"></a> <a href="https://blog.csdn.net/WASEFADG/article/details/81043075" target="_blank" rel="noopener">深入剖析gym环境构建[转]</a></h2><blockquote><p>由于该博客的代码展示实在太乱,于是重新帮他排版了一下</p></blockquote><p>我们继续讲，从第1小节的尾巴开始。有三个重要的函数：</p><ul><li>env = gym.make(‘CartPole-v0’)</li><li>env.reset()</li><li>env.render()</li></ul><p>第一个函数是创建环境，我们会在第3小节具体讲如何创建自己的环境，所以这个函数暂时不讲。第二个函数env.reset()和第三个函数env.render()是每个环境文件都包含的函数。我们以cartpole为例，对这两个函数进行讲解。</p><p>Cartpole的环境文件在~你的gym目录<code>/gym/envs/classic_control/cartpole.py</code>.</p><p>该文件定义了一个CartPoleEnv的环境类，该类的成员函数有：seed(), step(),reset()和render(). 第1小节调用的就是CartPoleEnv的两个成员函数reset()和render()。下面，我们先讲讲这两个函数，再介绍step()函数</p><h3 id="21-reset函数详解"><a class="markdownIt-Anchor" href="#21-reset函数详解"></a> 2.1 reset()函数详解</h3><p>reset()为重新初始化函数。那么这个函数有什么用呢？</p><p>在强化学习算法中，智能体需要一次次地尝试，累积经验，然后从经验中学到好的动作。一次尝试我们称之为一条轨迹或一个episode. 每次尝试都要到达终止状态. 一次尝试结束后，智能体需要从头开始，这就需要智能体具有<strong>重新初始化</strong>的功能。函数reset()就是这个作用。</p><p>reset()的源代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"># 利用均匀随机分布初试化环境的状态</span></span><br><span class="line">    self.state = self.np_random.uniform(low=-0.05, high=0.05, size=(4,))</span><br><span class="line">    <span class="comment"># 设置当前步数为None</span></span><br><span class="line">    self.steps_beyond_done = <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># 返回环境的初始化状态</span></span><br><span class="line">    <span class="keyword">return</span> np.array(self.state)</span><br></pre></td></tr></table></figure><h3 id="22-render函数详解"><a class="markdownIt-Anchor" href="#22-render函数详解"></a> 2.2 render()函数详解</h3><p>render()函数在这里扮演<strong>图像引擎</strong>的角色。一个仿真环境必不可少的两部分是<strong>物理引擎</strong>和<strong>图像引擎</strong>。物理引擎模拟环境中物体的运动规律；图像引擎用来显示环境中的物体图像。其实，对于强化学习算法，该函数可以没有。但是，为了便于直观显示当前环境中物体的状态，图像引擎还是有必要的。另外，加入图像引擎可以方便我们调试代码。下面具体介绍gym如何利用图像引擎来创建图像。</p><p>我们直接看源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gym.envs.classic_control <span class="keyword">import</span> rendering</span><br><span class="line"><span class="comment"># 这一句导入rendering模块，利用rendering模块中的画图函数进行图形的绘制</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myenv</span><span class="params">(gym.Env)</span></span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">_render</span><span class="params">(self, mode=’human’, close=False)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> close:</span><br><span class="line">        <span class="keyword">pass</span> <span class="comment">#省略，直接看关键代码部分</span></span><br><span class="line">        <span class="keyword">if</span> self.viewer <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># 如绘制600*400的窗口函数为：</span></span><br><span class="line">            self.viewer = rendering.Viewer(screen_width, screen_height)</span><br><span class="line">        <span class="comment"># 其中screen_width=600， screen_height=400</span></span><br><span class="line">        <span class="comment"># 创建小车的代码为：</span></span><br><span class="line">            l,r,t,b = -cartwidth/<span class="number">2</span>, cartwidth/<span class="number">2</span>, cartheight/<span class="number">2</span>, -cartheight/<span class="number">2</span></span><br><span class="line">            axleoffset =cartheight/<span class="number">4.0</span></span><br><span class="line">            cart = rendering.FilledPolygon([(l,b), (l,t), (r,t), (r,b)])</span><br><span class="line">        <span class="comment"># 其中rendering.FilledPolygon为填充一个矩形。</span></span><br></pre></td></tr></table></figure><p>创建完cart的形状，接下来给cart添加平移属性和旋转属性。将车的位移设置到cart的平移属性中，cart就会根据系统的状态变化左右运动。具体代码解释，我已上传到github上面了，<a href="https://link.zhihu.com/?target=https%3A//github.com/gxnk/reinforcement-learning-code" target="_blank" rel="noopener">gxnk/reinforcement-learning-code</a>　。想深入了解的同学可去下载学习。</p><h3 id="23-step函数详解"><a class="markdownIt-Anchor" href="#23-step函数详解"></a> 2.3 step()函数详解</h3><p>该函数在仿真器中扮演<strong>物理引擎</strong>的角色。其输入是动作a，输出是：下一步状态，立即回报，是否终止，调试项。</p><p>该函数描述了智能体与环境交互的所有信息，是环境文件中最重要的函数。在该函数中，一般利用智能体的运动学模型和动力学模型计算下一步的状态和立即回报，并判断是否达到终止状态。</p><p>我们直接看源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_step</span><span class="params">(self, action)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> self.action_space.contains(action), <span class="string">"%r (%s) invalid"</span>%(action, type(action))</span><br><span class="line">    state = self.state</span><br><span class="line">    x, x_dot, theta, theta_dot = state <span class="comment">#系统的当前状态</span></span><br><span class="line">    force = self.force_mag <span class="keyword">if</span> action==<span class="number">1</span> <span class="keyword">else</span> -self.force_mag <span class="comment">#输入动作，即作用到车上的力</span></span><br><span class="line">    costheta = math.cos(theta) <span class="comment">#余弦函数</span></span><br><span class="line">    sintheta = math.sin(theta) <span class="comment">#正弦函数</span></span><br><span class="line">    <span class="comment">#底下是车摆的动力学方程式，即加速度与动作之间的关系。</span></span><br><span class="line">    temp = (force + self.polemass_length * theta_dot * theta_dot * sintheta) / self.total_mass</span><br><span class="line">    thetaacc = (self.gravity * sintheta - costheta* temp) / (self.length * (<span class="number">4.0</span>/<span class="number">3.0</span> - self.masspole * costheta * costheta / self.total_mass)) <span class="comment">#摆的角加速度</span></span><br><span class="line">    xacc = temp - self.polemass_length * thetaacc * costheta / self.total_mass <span class="comment">#小车的平移加速</span></span><br><span class="line">    x = x + self.tau * x_dot</span><br><span class="line">    x_dot = x_dot + self.tau * xacc</span><br><span class="line">    theta = theta + self.tau * theta_dot</span><br><span class="line">    theta_dot = theta_dot + self.tau * thetaacc <span class="comment">#积分求下一步的状态</span></span><br><span class="line">    self.state = (x,x_dot,theta,theta_dot)</span><br></pre></td></tr></table></figure><p>2.4 一个简单的demo</p><p>下面，我给出一个最简单的demo，让大家体会一下上面三个函数如何使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">env = gym.make(<span class="string">'CartPole-v0'</span>)   </span><br><span class="line"><span class="comment">#创造环境observation = env.reset()       </span></span><br><span class="line"><span class="comment">#初始化环境，observation为环境状态</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">100</span>):    </span><br><span class="line">    action = env.action_space.sample()  </span><br><span class="line">    <span class="comment">#随机采样动作    </span></span><br><span class="line">    observation, reward, done, info = env.step(action)  </span><br><span class="line">    <span class="comment">#与环境交互，获得下一步的时刻    </span></span><br><span class="line">    <span class="keyword">if</span> done:                     </span><br><span class="line">        <span class="keyword">break</span>    </span><br><span class="line">    env.render()         </span><br><span class="line">    <span class="comment">#绘制场景    </span></span><br><span class="line">    count+=<span class="number">1</span>    </span><br><span class="line">    time.sleep(<span class="number">0.2</span>)      </span><br><span class="line">    <span class="comment">#每次等待0.2s</span></span><br><span class="line">    print(count)             </span><br><span class="line">    <span class="comment">#打印该次尝试的步数</span></span><br></pre></td></tr></table></figure><p>第3小节：创建自己的gym环境并利示例qlearning的方法</p><p>在上一小节中以cartpole为例子深入剖析了gym环境文件的重要组成。我们知道，一个gym环境最少的组成需要包括reset()函数和step()函数。当然，图像显示函数render()一般也是需要的。这一节，我会以机器人找金币为例给大家演示如何构建一个全新的gym环境，并以此环境为例，示例最经典的强化学习算法qlearning算法。在3.1节中，给出机器人找金币的问题陈述；第3.2节中，给出构建gym环境的过程；第3.3节中，利用qlearning方法实现机器人找金币的智能决策。全部代码已传到github上。</p><p>3.1 机器人找金币的问题陈述</p><p><img src="https://pic3.zhimg.com/80/v2-954718f1e5f4246a91f38386db310439_hd.jpg" alt="img"></p><p>图1.1 机器人找金币</p><p>如图1.1 为机器人在网格世界找金币的示意图。该网格世界一共有８个状态，其中状态６和状态8为死亡区域，状态７为金币区域。机器人的初始位置为网格世界中任意一个状态。机器人从初始状态出发寻找金币。机器人进行一次探索，进入死亡区域或找到金币，本次探测结束。机器人找到金币的回报为１，进入死亡区域回报为－１，机器人在区域１－５之间转换时，回报为０。我们的目标是找到一个策略使得机器人不管处在什么状态（１－５）都能找到金币。对于这个机器人找金币的游戏，我们可以利用强化学习的方法来实现。</p><h3 id="构建网格世界的gym环境"><a class="markdownIt-Anchor" href="#构建网格世界的gym环境"></a> 构建网格世界的gym环境</h3><blockquote><p>该例子的代码,除了本篇博客有以外,<a href="https://blog.csdn.net/extremebingo/article/details/80867486" target="_blank" rel="noopener">OpenAI Gym构建自定义强化学习环境</a>有更仔细和规范的代码贴出</p></blockquote><p>一个gym的环境文件，其主体是个类，在这里我们定义类名为：GridEnv, 其初始化为环境的基本参数，因为机器人找金币的过程是一个马尔科夫过程，我们在强化学习入门课程的第一讲已经介绍过了一个马尔科夫过程应该包括状态空间，动作空间，回报函数，状态转移概率。因此，我们在类GridEnv的初始化时便给出了相应的定义。网格世界的全部代码在<a href="https://link.zhihu.com/?target=https%3A//github.com/gxnk/reinforcement-learning-code" target="_blank" rel="noopener">gxnk/reinforcement-learning-code</a>,文件名为 grid_mdp.py. 我们看源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 状态空间为：</span></span><br><span class="line">self.states = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="comment"># 动作空间为：</span></span><br><span class="line">　　self.actions = [<span class="string">'n'</span>,<span class="string">'e'</span>,<span class="string">'s'</span>,<span class="string">'w'</span>]</span><br><span class="line"><span class="comment"># 回报函数为：</span></span><br><span class="line">　　self.rewards = dict(); <span class="comment">#回报的数据结构为字典</span></span><br><span class="line">　　self.rewards[<span class="string">'1_s'</span>] = <span class="number">-1.0</span></span><br><span class="line">　　self.rewards[<span class="string">'3_s'</span>] = <span class="number">1.0</span></span><br><span class="line">self.rewards[<span class="string">'5_s'</span>] = <span class="number">-1.0</span></span><br><span class="line"><span class="comment"># 状态转移概率为：</span></span><br><span class="line">　　self.t = dict(); <span class="comment">#状态转移的数据格式为字典</span></span><br><span class="line">　　self.t[<span class="string">'1_s'</span>] = <span class="number">6</span></span><br><span class="line">　　self.t[<span class="string">'1_e'</span>] = <span class="number">2</span></span><br><span class="line">　　self.t[<span class="string">'2_w'</span>] = <span class="number">1</span></span><br><span class="line">　　self.t[<span class="string">'2_e'</span>] = <span class="number">3</span></span><br><span class="line">　　self.t[<span class="string">'3_s'</span>] = <span class="number">7</span></span><br><span class="line">　　self.t[<span class="string">'3_w'</span>] = <span class="number">2</span></span><br><span class="line">　　self.t[<span class="string">'3_e'</span>] = <span class="number">4</span></span><br><span class="line">　　self.t[<span class="string">'4_w'</span>] = <span class="number">3</span></span><br><span class="line">　　self.t[<span class="string">'4_e'</span>] = <span class="number">5</span></span><br><span class="line">　　self.t[<span class="string">'5_s'</span>] = <span class="number">8</span></span><br><span class="line">　　self.t[<span class="string">'5_w'</span>] = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>有了状态空间，动作空间和状态转移概率，我们便可以写step(a)函数了。这里特别注意的是，step()函数的输入是动作，输出为：下一个时刻的动作，回报，是否终止，调试信息。尤其需要注意的是输出的顺序不要弄错了。对于调试信息，可以为空，但不能缺少，否则会报错，常用{}来代替。我们看源代码：</p><h4 id="step函数的建立"><a class="markdownIt-Anchor" href="#step函数的建立"></a> step函数的建立:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_step</span><span class="params">(self, action)</span>:</span></span><br><span class="line">    <span class="comment">#系统当前状态</span></span><br><span class="line">    state = self.state</span><br><span class="line">      ＃判断系统当前状态是否为终止状态</span><br><span class="line">    <span class="keyword">if</span> state <span class="keyword">in</span> self.terminate_states:</span><br><span class="line">    <span class="keyword">return</span> state, <span class="number">0</span>, <span class="keyword">True</span>, &#123;&#125;</span><br><span class="line">    key = <span class="string">"%d_%s"</span>%(state, action) <span class="comment">#将状态和动作组成字典的键值</span></span><br><span class="line">    <span class="comment">#状态转移</span></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> self.t:</span><br><span class="line">    next_state = self.t[key]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    next_state = state</span><br><span class="line">        self.state = next_state</span><br><span class="line">        is_terminal = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">if</span> next_state <span class="keyword">in</span> self.terminate_states:</span><br><span class="line">    is_terminal = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.rewards:</span><br><span class="line">    r = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    r = self.rewards[key]</span><br><span class="line"><span class="keyword">return</span> next_state, r,is_terminal,&#123;&#125;</span><br></pre></td></tr></table></figure><p>step()函数就是这么简单。下面我们重点介绍下如何写render()函数。从图1.1机器人找金币的示意图我们可以看到，网格世界是由一些线和圆组成的。因此，我们可以调用rendering中的画图函数来绘制这些图像。</p><h4 id="render函数的建立"><a class="markdownIt-Anchor" href="#render函数的建立"></a> render函数的建立:</h4><p>整个图像是一个600*400的窗口，可用如下代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gym.envs.classic_control <span class="keyword">import</span> rendering</span><br><span class="line"></span><br><span class="line">self.viewer = rendering.Viewer(screen_width, screen_height)</span><br><span class="line"><span class="comment"># 创建网格世界，一共包括11条直线，事先算好每条直线的起点和终点坐标，然后绘制这些直线，代码如下：</span></span><br><span class="line"><span class="comment">#创建网格世界</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.line1 = rendering.Line((<span class="number">100</span>,<span class="number">300</span>),(<span class="number">500</span>,<span class="number">300</span>))</span><br><span class="line">    self.line2 = rendering.Line((<span class="number">100</span>, <span class="number">200</span>), (<span class="number">500</span>, <span class="number">200</span>))</span><br><span class="line">    self.line3 = rendering.Line((<span class="number">100</span>, <span class="number">300</span>), (<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">    self.line4 = rendering.Line((<span class="number">180</span>, <span class="number">300</span>), (<span class="number">180</span>, <span class="number">100</span>))</span><br><span class="line">    self.line5 = rendering.Line((<span class="number">260</span>, <span class="number">300</span>), (<span class="number">260</span>, <span class="number">100</span>))</span><br><span class="line">    self.line6 = rendering.Line((<span class="number">340</span>, <span class="number">300</span>), (<span class="number">340</span>, <span class="number">100</span>))</span><br><span class="line">    self.line7 = rendering.Line((<span class="number">420</span>, <span class="number">300</span>), (<span class="number">420</span>, <span class="number">100</span>))</span><br><span class="line">    self.line8 = rendering.Line((<span class="number">500</span>, <span class="number">300</span>), (<span class="number">500</span>, <span class="number">100</span>))</span><br><span class="line">    self.line9 = rendering.Line((<span class="number">100</span>, <span class="number">100</span>), (<span class="number">180</span>, <span class="number">100</span>))</span><br><span class="line">    self.line10 = rendering.Line((<span class="number">260</span>, <span class="number">100</span>), (<span class="number">340</span>, <span class="number">100</span>))</span><br><span class="line">    self.line11 = rendering.Line((<span class="number">420</span>, <span class="number">100</span>), (<span class="number">500</span>, <span class="number">100</span>))</span><br><span class="line">    <span class="comment"># 接下来，创建死亡区域，我们用黑色的圆圈代表死亡区域，源代码如下：</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建第一个骷髅</span></span><br><span class="line">    self.kulo1 = rendering.make_circle(<span class="number">40</span>)</span><br><span class="line">    self.circletrans = rendering.Transform(translation=(<span class="number">140</span>,<span class="number">150</span>))</span><br><span class="line">    self.kulo1.add_attr(self.circletrans)</span><br><span class="line">    self.kulo1.set_color(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 创建第二个骷髅</span></span><br><span class="line">    self.kulo2 = rendering.make_circle(<span class="number">40</span>)</span><br><span class="line">    self.circletrans = rendering.Transform(translation=(<span class="number">460</span>, <span class="number">150</span>))</span><br><span class="line">    self.kulo2.add_attr(self.circletrans)</span><br><span class="line">    self.kulo2.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 创建金币区域，用金色的圆来表示：</span></span><br><span class="line">    <span class="comment"># 创建金条</span></span><br><span class="line">    self.gold = rendering.make_circle(<span class="number">40</span>)</span><br><span class="line">    self.circletrans = rendering.Transform(translation=(<span class="number">300</span>, <span class="number">150</span>))</span><br><span class="line">    self.gold.add_attr(self.circletrans)</span><br><span class="line">    self.gold.set_color(<span class="number">1</span>, <span class="number">0.9</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建机器人，我们依然用圆来表示机器人，为了跟死亡区域和金币区域不同，我们可以设置不同的颜色：</span></span><br><span class="line">    <span class="comment"># 创建机器人</span></span><br><span class="line">    self.robot= rendering.make_circle(<span class="number">30</span>)</span><br><span class="line">    self.robotrans = rendering.Transform()</span><br><span class="line">    self.robot.add_attr(self.robotrans)</span><br><span class="line">    self.robot.set_color(<span class="number">0.8</span>, <span class="number">0.6</span>, <span class="number">0.4</span>)</span><br><span class="line">    <span class="comment"># 创建完之后，给11条直线设置颜色，并将这些创建的对象添加到几何中代码如下：</span></span><br><span class="line">    self.line1.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line2.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line3.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line4.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line5.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line6.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line7.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line8.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line9.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line10.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.line11.set_color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 添加组件到Viewer中</span></span><br><span class="line">    self.viewer.add_geom(self.line1)</span><br><span class="line">    self.viewer.add_geom(self.line2)</span><br><span class="line">    self.viewer.add_geom(self.line3)</span><br><span class="line">    self.viewer.add_geom(self.line4)</span><br><span class="line">    self.viewer.add_geom(self.line5)</span><br><span class="line">    self.viewer.add_geom(self.line6)</span><br><span class="line">    self.viewer.add_geom(self.line7)</span><br><span class="line">    self.viewer.add_geom(self.line8)</span><br><span class="line">    self.viewer.add_geom(self.line9)</span><br><span class="line">    self.viewer.add_geom(self.line10)</span><br><span class="line">    self.viewer.add_geom(self.line11)</span><br><span class="line">    self.viewer.add_geom(self.kulo1)</span><br><span class="line">    self.viewer.add_geom(self.kulo2)</span><br><span class="line">    self.viewer.add_geom(self.gold)</span><br><span class="line">    self.viewer.add_geom(self.robot)</span><br><span class="line">    <span class="comment"># 接下来，开始设置机器人的位置。机器人的位置根据其当前所处的状态不同，所在的位置不同。我们事先计算出每个状态处机器人位置的中心坐标，并存储到两个向量中，并在类初始化中给出：</span></span><br><span class="line">        self.x=[<span class="number">140</span>,<span class="number">220</span>,<span class="number">300</span>,<span class="number">380</span>,<span class="number">460</span>,<span class="number">140</span>,<span class="number">300</span>,<span class="number">460</span>]</span><br><span class="line">        self.y=[<span class="number">250</span>,<span class="number">250</span>,<span class="number">250</span>,<span class="number">250</span>,<span class="number">250</span>,<span class="number">150</span>,<span class="number">150</span>,<span class="number">150</span>]</span><br><span class="line">    <span class="comment"># 根据这两个向量和机器人当前的状态，我们就可以设置机器人当前的圆心坐标了即：</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.state <span class="keyword">is</span> <span class="keyword">None</span>: <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        self.robotrans.set_translation(self.x[self.state<span class="number">-1</span>], self.y[self.state- <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最后还需要一个返回语句：</span></span><br><span class="line">        <span class="keyword">return</span> self.viewer.render(return_rgb_array=mode == <span class="string">'rgb_array'</span>)</span><br></pre></td></tr></table></figure><p>以上便完成了render()函数的建立</p><h4 id="reset函数的建立"><a class="markdownIt-Anchor" href="#reset函数的建立"></a> reset()函数的建立：</h4><p>reset()函数常常用随机的方法初始化机器人的状态，即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_reset</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.state = self.states[int(random.random() * len(self.states))]</span><br><span class="line">    <span class="keyword">return</span> self.state</span><br></pre></td></tr></table></figure><h4 id="环境的注册"><a class="markdownIt-Anchor" href="#环境的注册"></a> 环境的注册</h4><p>全部的代码请去github上下载学习。下面重点讲一讲如何将建好的环境进行注册，以便通过gym的标准形式进行调用。其实环境的注册很简单，只需要３步：</p><p>第一步：将我们自己的环境文件（我创建的文件名为grid_mdp.py)拷贝到你的gym安装目录/gym/gym/envs/classic_control文件夹中。（拷贝在这个文件夹中因为要使用rendering模块。当然，也有其他办法。该方法不唯一）</p><p>第二步：打开该文件夹（第一步中的文件夹）下的__init__.py文件，在文件末尾加入语句：<code>from gym.envs.classic_control.grid_mdp import GridEnv</code></p><p>第三步：进入文件夹你的gym安装目录/gym/gym/envs，打开该文件夹下的__init__.py文件，添加代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">register(</span><br><span class="line">    <span class="comment"># gym.make(‘id’)时的id</span></span><br><span class="line">    id=<span class="string">'GridWorld-v0'</span>,</span><br><span class="line">    <span class="comment"># 函数路口</span></span><br><span class="line">    entry_point=<span class="string">'gym.envs.classic_control:GridEnv'</span>,</span><br><span class="line">    max_episode_steps=<span class="number">200</span>,</span><br><span class="line">    reward_threshold=<span class="number">100.0</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第一个参数id就是你调用gym.make(‘id’)时的id,　这个id你可以随便选取，我取的，名字是GridWorld-v0</p><p>第二个参数就是函数路口了。</p><p>后面的参数原则上来说可以不必要写。</p><p>经过以上三步，就完成了注册。</p><p>下面，我们给个简单的demo来测试下我们的环境的效果吧：</p><p>我们依然写个终端程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"></span><br><span class="line">env = gym.make(<span class="string">'GridWorld-v0'</span>)</span><br><span class="line">env.reset()</span><br><span class="line">env.render()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;openai-gym使用-rendering画图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#openai-gym使用-rendering画图&quot;&gt;&lt;/a&gt; OpenAI Gym使用、rendering画图&lt;/h1&gt;
&lt;blockquo
      
    
    </summary>
    
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="RL" scheme="https://nymrli.top/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装selenium执行Python程序</title>
    <link href="https://nymrli.top/2019/09/24/Linux%E5%AE%89%E8%A3%85selenium%E6%89%A7%E8%A1%8CPython%E7%A8%8B%E5%BA%8F/"/>
    <id>https://nymrli.top/2019/09/24/Linux安装selenium执行Python程序/</id>
    <published>2019-09-24T14:13:20.000Z</published>
    <updated>2019-10-16T05:21:46.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux安装selenium执行python程序"><a class="markdownIt-Anchor" href="#linux安装selenium执行python程序"></a> Linux安装selenium执行Python程序</h1><ol><li><p>配置python运行环境</p></li><li><p>安装selenium,<code>sudo pip install selenium</code></p></li><li><p>安装chrome</p><blockquote><p>提供下载网站<a href="https://www.chromedownloads.net/chrome64linux-stable/" target="_blank" rel="noopener">chromedownloads</a>,下载google-chrome-stable_current_amd64-75.0.3770.80.deb</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libxss1 libappindicator1 libindicator7</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i google-chrome-stable_current_amd64-75.0.3770.80.deb </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行sudo dpkg -i google-chrome*.deb后报错的话，那就执行一下sudo apt-get install -f</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装后在/usr/bin目录下查看是否有google-chrome文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查chrome版本：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> google-chrome-stable --version</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当时无法查到版本,并报错error <span class="keyword">while</span> loading shared libraries: libasound.so.2,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入sudo apt-get install -f后解决</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> google-chrome-stable --version</span></span><br></pre></td></tr></table></figure></li><li><p>安装chromedriver</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget -N http://chromedriver.storage.googleapis.com/75.0.3770.8/chromedriver_linux64.zip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> unzip chromedriver_linux64.zip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod +x chromedriver</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mv -f chromedriver /usr/<span class="built_in">local</span>/share/chromedriver</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s /usr/<span class="built_in">local</span>/share/chromedriver /usr/<span class="built_in">local</span>/bin/chromedriver</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s /usr/<span class="built_in">local</span>/share/chromedriver /usr/bin/chromedrive</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chromedriver -v</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果发现版本不对，chrome可以使用这样卸载：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum remove google-chrome</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chromedriver可以直接删除目录：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo rm -f /usr/bin/chromedriver</span></span><br></pre></td></tr></table></figure></li><li><p>编写python测试代码</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-dev-shm-usage'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com/'</span>)</span><br></pre></td></tr></table></figure><h2 id="报错记录"><a class="markdownIt-Anchor" href="#报错记录"></a> 报错记录:</h2><p><code>Message: unknown error: Chrome failed to start: exited abnormally (unknown error: DevToolsActivePort file doesn't exist) (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)</code></p><p><strong>解决方法：添加参数</strong>chrome_options.add_argument(’–no-sandbox’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'user-agent=%s'</span> % random.choice(MY_USER_AGENT_PC))</span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">'/usr/local/bin/chromedriver'</span>, chrome_options=chrome_options)</span><br><span class="line">driver.set_window_size(<span class="number">1366</span>, <span class="number">1000</span>)  <span class="comment"># 调整页面尺寸</span></span><br><span class="line">driver.implicitly_wait(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linux安装selenium执行python程序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#linux安装selenium执行python程序&quot;&gt;&lt;/a&gt; Linux安装selenium执行Python程序&lt;/h1&gt;
&lt;ol&gt;
&lt;
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Python" scheme="https://nymrli.top/tags/Python/"/>
    
      <category term="Linux" scheme="https://nymrli.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04+CUDA toolkit10.1+cudNN7.6+bazel0.26.1</title>
    <link href="https://nymrli.top/2019/09/23/Ubuntu16-04-CUDA-toolkit10-1-cudNN7-6-bazel0-26-1/"/>
    <id>https://nymrli.top/2019/09/23/Ubuntu16-04-CUDA-toolkit10-1-cudNN7-6-bazel0-26-1/</id>
    <published>2019-09-23T08:38:55.000Z</published>
    <updated>2019-10-24T12:36:42.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ubuntu-1604-cuda-toolkit-101-cudnn76-bazel-0261"><a class="markdownIt-Anchor" href="#ubuntu-1604-cuda-toolkit-101-cudnn76-bazel-0261"></a> Ubuntu 16.04 + CUDA toolkit 10.1 + cudNN7.6 + bazel 0.26.1</h2><blockquote><p>保证<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">cuDNN</a>跟<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">CUDA SDK</a>的版本一致即可.</p><p>从源码编译的话需要查看显卡的计算能力,可在<a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="noopener">查看GPU计算能力</a>，在配置的时候填入即可，跟CUDA SDK的版本无关</p><p>▲必须注册账号后，才能选择下载</p></blockquote><p>▲最好先看我的踩坑记录，先确保自己知道有这些坑</p><p>▲.<strong>全程保持能连接外网（翻墙）</strong></p><h3 id="安装nvidia驱动"><a class="markdownIt-Anchor" href="#安装nvidia驱动"></a> <strong>安装NVIDIA驱动</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ubuntu-drivers devices <span class="comment"># 查看</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看NVIDIA驱动版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg --list | grep nvidia-*</span></span><br></pre></td></tr></table></figure><p>显卡驱动与CUDA版本对应关系</p><p>最新的根据<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html" target="_blank" rel="noopener">官网查看</a></p><p><img src="https://img-blog.csdnimg.cn/20190308104315129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUX3hpYW9fYmFp,size_16,color_FFFFFF,t_70" alt=""></p><p><a href="https://www.nvidia.cn/Download/index.aspx?lang=cn#" target="_blank" rel="noopener">下载NVIDIA驱动</a></p><p>▲注意:得对应匹配!!!</p><p>安装完成后，可以通过<code>nvidia-smi</code>查看GPU使用情况</p><h3 id="cuda-toolkit-101"><a class="markdownIt-Anchor" href="#cuda-toolkit-101"></a> CUDA toolkit 10.1</h3><p>安装之前先看显卡的驱动版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装过程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i cuda-repo-ubuntu1604-10-1-local-10.1.243-418.87.00_1.0-1_amd64.deb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install cuda</span></span><br></pre></td></tr></table></figure><p>设置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim ~/.bashrc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-8.0/bin:<span class="variable">$PATH</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-8.0/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生效</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure><p>验证安装完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvcc -V</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/samples/1_Utilities/deviceQuery</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./deviceQuery</span></span><br></pre></td></tr></table></figure><p>△.如果显示Result:PASS才是安装成功。这一步一定要保证错误，不然之后bazel编译时报错就很难分析问题！！！！！(只有在驱动安装好的情况下才能运行成功,不然会报no CUDA-capable device is detected，或者GPU is lost)</p><p>如果失败,卸载重装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/bin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ./uninstall_cuda_9.2.pl</span></span><br></pre></td></tr></table></figure><h3 id="安装-python-和-tensorflow-软件包依赖项"><a class="markdownIt-Anchor" href="#安装-python-和-tensorflow-软件包依赖项"></a> 安装 Python 和 TensorFlow 软件包依赖项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-dev python-pip  # or python3-dev python3-pip</span><br></pre></td></tr></table></figure><p>安装 TensorFlow pip 软件包依赖项（如果使用虚拟环境，请省略 <code>--user</code> 参数）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -U --user pip six numpy wheel setuptools mock future&gt;=0.17.1</span><br><span class="line">pip install -U --user keras_applications==1.0.6 --no-deps</span><br><span class="line">pip install -U --user keras_preprocessing==1.0.5 --no-deps</span><br></pre></td></tr></table></figure><h3 id="cudnn-763"><a class="markdownIt-Anchor" href="#cudnn-763"></a> cudNN 7.6.3</h3><p>选择<a href="https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.3.30/Production/10.1_20190822/cudnn-10.1-linux-x64-v7.6.3.30.tgz" target="_blank" rel="noopener">cuDNN Library for Linux</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压cudNN</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp  cudnn-8.0-linux-x64-v5.1.solitairetheme8 /usr/<span class="built_in">local</span>/cuda/cudnn-8.0-linux-x64-v5.1.tgz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf cudnn-8.0-linux-x64-v5.1.tgz</span></span><br><span class="line"></span><br><span class="line">sudo cp cuda/include/cudnn.h /usr/local/cuda/include</span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br><span class="line">sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure><h3 id="bazel"><a class="markdownIt-Anchor" href="#bazel"></a> Bazel</h3><p>构建Tensorflow需要用bazel,而wget下载很慢,需要代理,可以试着去<a href="https://github.com/bazelbuild/bazel/releases" target="_blank" rel="noopener">github</a>上下载后再传到服务器</p><p>后来<code>./configure</code>配置TensorFlow时,提示Bazel版本太高…(这个问题出现在我下载的不是github下载下来的tensorflow，网盘下载的可能版本太低了)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WARNING: --batch mode is deprecated. Please instead explicitly shut down your Bazel server using the command "bazel shutdown".</span><br><span class="line">You have bazel 0.29.1 installed.</span><br><span class="line">Please downgrade your bazel installation to version 0.26.1 or lower to build TensorFlow! To downgrade: download the installer for the old version (from https://github.com/bazelbuild/bazel/releases) then run the installer.</span><br></pre></td></tr></table></figure><h3 id="从源码构建和安装tensorflow"><a class="markdownIt-Anchor" href="#从源码构建和安装tensorflow"></a> <a href="https://www.tensorflow.org/install/source" target="_blank" rel="noopener">从源码构建和安装Tensorflow</a></h3><blockquote><p>第一次安装的是2.0的版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tensorflow/tensorflow.git</span><br><span class="line"><span class="built_in">cd</span> tensorflow</span><br><span class="line">(tf) apollo3d@apollo1:~/Downloads/tensorflow-master$ ./configure </span><br><span class="line">WARNING: --batch mode is deprecated. Please instead explicitly shut down your Bazel server using the <span class="built_in">command</span> <span class="string">"bazel shutdown"</span>.</span><br><span class="line">You have bazel 0.26.0 installed.</span><br><span class="line">Please specify the location of python. [Default is /home/apollo3d/tf/bin/python]: /usr/bin/python3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Found possible Python library paths:</span><br><span class="line">  /usr/<span class="built_in">local</span>/lib/python3.5/dist-packages</span><br><span class="line">  /usr/lib/python3/dist-packages</span><br><span class="line">Please input the desired Python library path to use.  Default is [/usr/<span class="built_in">local</span>/lib/python3.5/dist-packages]</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with XLA JIT support? [Y/n]: </span><br><span class="line">XLA JIT support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with OpenCL SYCL support? [y/N]: </span><br><span class="line">No OpenCL SYCL support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with ROCm support? [y/N]: </span><br><span class="line">No ROCm support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with CUDA support? [y/N]: y</span><br><span class="line">CUDA support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with TensorRT support? [y/N]: </span><br><span class="line">No TensorRT support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Found CUDA 10.1 <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line">Found cuDNN 7 <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please specify a list of comma-separated CUDA compute capabilities you want to build with.</span><br><span class="line">You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.</span><br><span class="line">Please note that each additional compute capability significantly increases your build time and binary size, and that TensorFlow only supports compute capabilities &gt;= 3.5 [Default is: 3.5,7.0]: 5.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you want to use clang as CUDA compiler? [y/N]: N</span><br><span class="line">Clang will be used as CUDA compiler.</span><br><span class="line"></span><br><span class="line">Do you wish to download a fresh release of clang? (Experimental) [y/N]: N</span><br><span class="line">Clang will be downloaded and used to compile tensorflow.</span><br><span class="line"></span><br><span class="line">Please specify optimization flags to use during compilation when bazel option <span class="string">"--config=opt"</span> is specified [Default is -march=native -Wno-sign-compare]: --config=v2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Would you like to interactively configure ./WORKSPACE <span class="keyword">for</span> Android builds? [y/N]: </span><br><span class="line">Not configuring the WORKSPACE <span class="keyword">for</span> Android builds.</span><br><span class="line"></span><br><span class="line">Preconfigured Bazel build configs. You can use any of the below by adding <span class="string">"--config=&lt;&gt;"</span> to your build <span class="built_in">command</span>. See .bazelrc <span class="keyword">for</span> more details.</span><br><span class="line">--config=mkl         <span class="comment"># Build with MKL support.</span></span><br><span class="line">--config=monolithic  <span class="comment"># Config for mostly static monolithic build.</span></span><br><span class="line">--config=ngraph      <span class="comment"># Build with Intel nGraph support.</span></span><br><span class="line">--config=numa        <span class="comment"># Build with NUMA support.</span></span><br><span class="line">--config=dynamic_kernels<span class="comment"># (Experimental) Build kernels into separate shared objects.</span></span><br><span class="line">--config=v2          <span class="comment"># Build TensorFlow 2.x instead of 1.x.</span></span><br><span class="line">Preconfigured Bazel build configs to DISABLE default on features:</span><br><span class="line">--config=noaws       <span class="comment"># Disable AWS S3 filesystem support.</span></span><br><span class="line">--config=nogcp       <span class="comment"># Disable GCP support.</span></span><br><span class="line">--config=nohdfs      <span class="comment"># Disable HDFS support.</span></span><br><span class="line">--config=nonccl      <span class="comment"># Disable NVIDIA NCCL support.</span></span><br><span class="line">Configuration finished</span><br></pre></td></tr></table></figure><blockquote><p>第二次1.14</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">(pythonEnv) apollo3d@apollo1:~/Downloads/tensorflow$ ./configure </span><br><span class="line">WARNING: Running Bazel server needs to be killed, because the startup options are different.</span><br><span class="line">WARNING: --batch mode is deprecated. Please instead explicitly shut down your Bazel server using the <span class="built_in">command</span> <span class="string">"bazel shutdown"</span>.</span><br><span class="line">You have bazel 0.26.0 installed.</span><br><span class="line">Please specify the location of python. [Default is /home/apollo3d/pythonEnv/bin/python]: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: module <span class="string">'site'</span> has no attribute <span class="string">'getsitepackages'</span></span><br><span class="line">Found possible Python library paths:</span><br><span class="line">  /home/apollo3d/pythonEnv/lib/python3.5/site-packages</span><br><span class="line">Please input the desired Python library path to use.  Default is [/home/apollo3d/pythonEnv/lib/python3.5/site-packages]</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with XLA JIT support? [Y/n]: </span><br><span class="line">XLA JIT support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with OpenCL SYCL support? [y/N]: n</span><br><span class="line">No OpenCL SYCL support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with ROCm support? [y/N]: </span><br><span class="line">No ROCm support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with CUDA support? [y/N]: y</span><br><span class="line">CUDA support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with TensorRT support? [y/N]: </span><br><span class="line">No TensorRT support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Found CUDA 10.1 <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line">Found cuDNN 7 <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">    /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please specify a list of comma-separated CUDA compute capabilities you want to build with.</span><br><span class="line">You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.</span><br><span class="line">Please note that each additional compute capability significantly increases your build time and binary size, and that TensorFlow only supports compute capabilities &gt;= 3.5 [Default is: 5.2]: 5.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you want to use clang as CUDA compiler? [y/N]: n</span><br><span class="line">nvcc will be used as CUDA compiler.</span><br><span class="line"></span><br><span class="line">Please specify <span class="built_in">which</span> gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with MPI support? [y/N]: </span><br><span class="line">No MPI support will be enabled <span class="keyword">for</span> TensorFlow.</span><br><span class="line"></span><br><span class="line">Please specify optimization flags to use during compilation when bazel option <span class="string">"--config=opt"</span> is specified [Default is -march=native -Wno-sign-compare]: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Would you like to interactively configure ./WORKSPACE <span class="keyword">for</span> Android builds? [y/N]: </span><br><span class="line">Not configuring the WORKSPACE <span class="keyword">for</span> Android builds.</span><br><span class="line"></span><br><span class="line">Preconfigured Bazel build configs. You can use any of the below by adding <span class="string">"--config=&lt;&gt;"</span> to your build <span class="built_in">command</span>. See .bazelrc <span class="keyword">for</span> more details.</span><br><span class="line">--config=mkl         <span class="comment"># Build with MKL support.</span></span><br><span class="line">--config=monolithic  <span class="comment"># Config for mostly static monolithic build.</span></span><br><span class="line">--config=gdr         <span class="comment"># Build with GDR support.</span></span><br><span class="line">--config=verbs       <span class="comment"># Build with libverbs support.</span></span><br><span class="line">--config=ngraph      <span class="comment"># Build with Intel nGraph support.</span></span><br><span class="line">--config=numa        <span class="comment"># Build with NUMA support.</span></span><br><span class="line">--config=dynamic_kernels<span class="comment"># (Experimental) Build kernels into separate shared objects.</span></span><br><span class="line">Preconfigured Bazel build configs to DISABLE default on features:</span><br><span class="line">--config=noaws       <span class="comment"># Disable AWS S3 filesystem support.</span></span><br><span class="line">--config=nogcp       <span class="comment"># Disable GCP support.</span></span><br><span class="line">--config=nohdfs      <span class="comment"># Disable HDFS support.</span></span><br><span class="line">--config=noignite    <span class="comment"># Disable Apache Ignite support.</span></span><br><span class="line">--config=nokafka     <span class="comment"># Disable Apache Kafka support.</span></span><br><span class="line">--config=nonccl      <span class="comment"># Disable NVIDIA NCCL support.</span></span><br><span class="line">Configuration finished</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">INFO: Elapsed time: 4826.834s, Critical Path: 298.31s</span><br><span class="line">INFO: 24978 processes: 24978 <span class="built_in">local</span>.</span><br><span class="line">INFO: Build completed successfully, 26636 total actions</span><br><span class="line"><span class="comment"># 大概用了一个半小时</span></span><br></pre></td></tr></table></figure><p>△.期间可能多次出现<code>ERROR:[GET returned 404 Not Found, connect timed out]</code>,继续重试即可</p><h3 id="编译-pip-软件包"><a class="markdownIt-Anchor" href="#编译-pip-软件包"></a> 编译 pip 软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ (tf) apollo3d@apollo1:~/Downloads/tensorflow-master$ bazel build -c --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package</span><br><span class="line"><span class="comment"># -c 不链接直接编译</span></span><br><span class="line">Starting <span class="built_in">local</span> Bazel server and connecting to it...</span><br><span class="line">WARNING: The following configs were expanded more than once: [cuda_clang, using_cuda, download_clang_use_lld]. For repeatable flags, repeats are counted twice and may lead to unexpected behavior.</span><br><span class="line">WARNING: option <span class="string">'--crosstool_top'</span> was expanded to from both option <span class="string">'--config=cuda_clang'</span> (<span class="built_in">source</span> /home/apollo3d/Downloads/tensorflow-master/.tf_configure.bazelrc) and option <span class="string">'--config=download_clang'</span> (<span class="built_in">source</span> /home/apollo3d/Downloads/tensorflow-master/.tf_configure.bazelrc)</span><br><span class="line"></span><br><span class="line">$ bazel-bin/tensorfLow/tools/pip_package/build_pip_package ~/</span><br><span class="line">tensorflow/bin <span class="comment"># 传入一个表示Python whell文件存储路径的参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在虚拟环境打开的情况下安装</span></span><br></pre></td></tr></table></figure><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录：</h2><p>windows上安装cuda时一直显示不能安装，就是系统默认安装的版本太低了，或者根本就没有安装。只有到<a href="https://www.geforce.cn/drivers" target="_blank" rel="noopener">显卡驱动下载</a>安装了驱动后，才能正常安装CUDA</p><p><strong>windows安装建议</strong></p><p>安装完linux后,我在自己笔记本上又安装了个Windows10的，两个是相通的，windows的很快我就安装好了。主要卡壳的时间全都是浪费在了驱动版本安装错误，只要把<strong>驱动的版本</strong>弄对了。然后依次安装NVIDIA驱动、CUDA、Cudnn就可以了。</p><h2 id="采坑记录"><a class="markdownIt-Anchor" href="#采坑记录"></a> 采坑记录</h2><p>▲下载tensorflow，一定要从官网下载最新的。千万不要去网盘上下载，我就是被这个坑了很久。最后从github下了后才逐渐正常。（github下载会很慢，可以见我的另外一篇文章，如何提速）</p><p>▲<code>./configure</code>的配置也很重要，除了CUDA选项其他都选默认</p><p><a href="https://blog.csdn.net/Junizxr/article/details/83578579" target="_blank" rel="noopener">Linux系统下安装TensorFlow的GPU版本</a></p><p><a href="https://blog.csdn.net/IT_xiao_bai/article/details/88342921" target="_blank" rel="noopener">CUDA、显卡驱动和Tensorflow版本之间的对应关系</a></p><blockquote><p>Linux x86_64 Driver Version与CUDA Toolkit的对应，一定要对应好，CUDA超出了Driver Version的话，是无法使用的<a href="https://blog.csdn.net/Junizxr/article/details/83578579" target="_blank" rel="noopener">^提示</a></p></blockquote><p>==&gt;CUDA 10.1的需要Linux x86_64 Driver Version&gt;=410.48。同时，tensorflow-gpu默认安装的是1.14版本，要求的cudNN为7，CUDA为9</p><p>▲<strong>google.xxxx.xxxx==&gt;unknown hosts</strong></p><p>报了这个错以后才发现，服务器的DNS没配置（云服务器一般不会出现这样的问题）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/resolv.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dynamic resolv.conf(5) file <span class="keyword">for</span> glibc resolver(3) generated by resolvconf(8)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN</span></span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 8.8.4.4</span><br></pre></td></tr></table></figure><p><strong>▲An error occurred during the fetch of repository ‘llvm’:Error 404 ， cant connect</strong></p><p>多次重试即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> (tf) apollo3d@apollo1:~/Downloads/tensorflow-master$ bazel build -c --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package</span></span><br></pre></td></tr></table></figure><p><strong>▲报错 AttributeError: ‘_NamespacePath’ object has no attribute 'sort’</strong></p><p>重新安装setuptools</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(pythonEnv) $ pip uninstall setuptools</span><br><span class="line">(pythonEnv) $ pip install setuptools</span><br><span class="line">(pythonEnv) $ pip  install googleapis-common-protos</span><br></pre></td></tr></table></figure><p>执行上述命令需要相当长的一段时间，具体时长取决于你的计算机性能。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Target //tensorflow/tools/pip_package:build_pip_package up-to-date:</span><br><span class="line">  bazel-bin/tensorflow/tools/pip_package/build_pip_package</span><br><span class="line">INFO: Elapsed time: 77.892s, Critical Path: 77.18s</span><br><span class="line">INFO: 45 processes: 45 local.</span><br><span class="line">INFO: Build completed successfully, 46 total actions</span><br></pre></td></tr></table></figure><p>待Bazel成功完成上述任务后会输出，运行输出的可执行程序，并传入一个表示Python whee文件存储路径的参数：</p><p><code>bazel-bin/tensorflow/tools/pip_package/build_pip_package ~/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(pythonEnv) apollo3d@apollo1:~/Downloads/tensorflow$ bazel-bin/tensorflow/tools/pip_package/build_pip_package ~/</span><br><span class="line">2019年 09月 24日 星期二 14:34:05 CST : === Preparing sources in dir: /tmp/tmp.pguTqrHuLA</span><br><span class="line">~/Downloads/tensorflow ~/Downloads/tensorflow</span><br><span class="line">~/Downloads/tensorflow</span><br><span class="line">/tmp/tmp.pguTqrHuLA/tensorflow/include ~/Downloads/tensorflow</span><br><span class="line">~/Downloads/tensorflow</span><br><span class="line">2019年 09月 24日 星期二 14:34:11 CST : === Building wheel</span><br><span class="line">warning: no files found matching &apos;*.pyd&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.pd&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.dylib&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.dll&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.lib&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.csv&apos; under directory &apos;*&apos;</span><br><span class="line">warning: no files found matching &apos;*.h&apos; under directory &apos;tensorflow_core/include/tensorflow&apos;</span><br><span class="line">warning: no files found matching &apos;*&apos; under directory &apos;tensorflow_core/include/third_party&apos;</span><br><span class="line">2019年 09月 24日 星期二 14:34:33 CST : === Output wheel file is in: /home/apollo3d/</span><br></pre></td></tr></table></figure><p><strong>pip安装</strong></p><p>上述命令将在~/tensorlowbn下创建一个Python.wh文件。请确保你的“tensor-fow Virtualenv不境处于活动状态，然后用pip安装该whee文件（请注意该二进制文件的具体名称会依所安装的TensorFlow版本、所使用的操作系统和Python版本而不同）：</p><p><code>(pythonEnv) apollo3d@apollo1:~$ pip install tensorflow-2.0.0rc2-cp35-cp35m-linux_x86_64.whl</code></p><p><strong>▲安装成功后，使用时报错</strong></p><p>使用TensorFlow时报错FutureWarning: Passing (type, 1) or ‘1type’ as a synonym of type is deprecated; in a future version of numpy…</p><p>报错原因：numpy1-17-0版本过高，使用numpy-1.16-0版本即可</p><p>解决方法：重新安装numpy-1.16-0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip uninstall numpy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install numpy==1.16.0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ubuntu-1604-cuda-toolkit-101-cudnn76-bazel-0261&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ubuntu-1604-cuda-toolkit-101-cudnn76-bazel-0261
      
    
    </summary>
    
    
      <category term="环境配置" scheme="https://nymrli.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
